(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.LruImpl.Node? () T@U)
(declare-fun Tagclass.LruImpl.Node? () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.LruImpl.Node () T@U)
(declare-fun class.LruImpl.LruImplQueue? () T@U)
(declare-fun Tagclass.LruImpl.LruImplQueue? () T@U)
(declare-fun Tagclass.MutableMap.ResizingHashMap () T@U)
(declare-fun Tagclass.LruImpl.LruImplQueue () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.DebugAccumulator.AccRec () T@U)
(declare-fun class.LruImpl.__default () T@U)
(declare-fun Tagclass.LruImpl.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.DebugAccumulator.AccRec? () T@U)
(declare-fun Tagclass.DebugAccumulator.AccRec? () T@U)
(declare-fun class.DebugAccumulator.__default () T@U)
(declare-fun Tagclass.DebugAccumulator.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.LruModel.__default () T@U)
(declare-fun Tagclass.LruModel.__default () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.SetBijectivity.__default () T@U)
(declare-fun Tagclass.SetBijectivity.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.NativeArithmetic.__default () T@U)
(declare-fun Tagclass.NativeArithmetic.__default () T@U)
(declare-fun |##MutableMapModel.Slot.Slot| () T@U)
(declare-fun Tagclass.MutableMapModel.Slot () T@U)
(declare-fun class.MutableMapModel.Slot () T@U)
(declare-fun |##MutableMapModel.Item.Empty| () T@U)
(declare-fun Tagclass.MutableMapModel.Item () T@U)
(declare-fun |##MutableMapModel.Item.Entry| () T@U)
(declare-fun |##MutableMapModel.Item.Tombstone| () T@U)
(declare-fun class.MutableMapModel.Item () T@U)
(declare-fun |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| () T@U)
(declare-fun Tagclass.MutableMapModel.FixedSizeLinearHashMap () T@U)
(declare-fun class.MutableMapModel.FixedSizeLinearHashMap () T@U)
(declare-fun |##MutableMapModel.ProbeResult.ProbeResult| () T@U)
(declare-fun Tagclass.MutableMapModel.ProbeResult () T@U)
(declare-fun class.MutableMapModel.ProbeResult () T@U)
(declare-fun |##MutableMapModel.LinearHashMap.LinearHashMap| () T@U)
(declare-fun Tagclass.MutableMapModel.LinearHashMap () T@U)
(declare-fun class.MutableMapModel.LinearHashMap () T@U)
(declare-fun |##MutableMapModel.IteratorOutput.Next| () T@U)
(declare-fun Tagclass.MutableMapModel.IteratorOutput () T@U)
(declare-fun |##MutableMapModel.IteratorOutput.Done| () T@U)
(declare-fun class.MutableMapModel.IteratorOutput () T@U)
(declare-fun |##MutableMapModel.Iterator.Iterator| () T@U)
(declare-fun Tagclass.MutableMapModel.Iterator () T@U)
(declare-fun class.MutableMapModel.Iterator () T@U)
(declare-fun |##MutableMapModel.SimpleIterator.SimpleIterator| () T@U)
(declare-fun Tagclass.MutableMapModel.SimpleIterator () T@U)
(declare-fun class.MutableMapModel.SimpleIterator () T@U)
(declare-fun class.MutableMapModel.__default () T@U)
(declare-fun Tagclass.MutableMapModel.__default () T@U)
(declare-fun class.MutableMap.FixedSizeHashMap? () T@U)
(declare-fun Tagclass.MutableMap.FixedSizeHashMap? () T@U)
(declare-fun Tagclass.MutableMap.FixedSizeHashMap () T@U)
(declare-fun class.MutableMap.ResizingHashMap? () T@U)
(declare-fun Tagclass.MutableMap.ResizingHashMap? () T@U)
(declare-fun class.MutableMap.__default () T@U)
(declare-fun Tagclass.MutableMap.__default () T@U)
(declare-fun field$prev () T@U)
(declare-fun field$next () T@U)
(declare-fun field$value () T@U)
(declare-fun field$Queue () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$nodemap () T@U)
(declare-fun field$head_node () T@U)
(declare-fun field$tail_node () T@U)
(declare-fun field$Contents () T@U)
(declare-fun field$Count () T@U)
(declare-fun field$key () T@U)
(declare-fun field$count () T@U)
(declare-fun field$unit () T@U)
(declare-fun field$index () T@U)
(declare-fun field$Storage () T@U)
(declare-fun field$Underlying () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun nat_from_bv64 ((_ BitVec 64)) Int)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.LruImpl.Node? () T@U)
(declare-fun LruImpl.Node.prev () T@U)
(declare-fun LruImpl.Node.next () T@U)
(declare-fun LruImpl.Node.value () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.LruImpl.Node () T@U)
(declare-fun Tclass.LruImpl.LruImplQueue? () T@U)
(declare-fun LruImpl.LruImplQueue.Queue () T@U)
(declare-fun LruImpl.LruImplQueue.Repr () T@U)
(declare-fun LruImpl.LruImplQueue.nodemap () T@U)
(declare-fun Tclass.MutableMap.ResizingHashMap (T@U) T@U)
(declare-fun Tclass.MutableMap.ResizingHashMap_0 (T@U) T@U)
(declare-fun LruImpl.LruImplQueue.head__node () T@U)
(declare-fun LruImpl.LruImplQueue.tail__node () T@U)
(declare-fun Tclass.LruImpl.LruImplQueue () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun LruImpl.LruImplQueue.Inv (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |LruImpl.LruImplQueue.Inv#canCall| (T@U T@U) Bool)
(declare-fun LruModel.__default.WF (T@U) Bool)
(declare-fun |LruImpl.LruImplQueue.Inv#requires| (T@U T@U) Bool)
(declare-fun MutableMap.ResizingHashMap.Repr () T@U)
(declare-fun MutableMap.ResizingHashMap.I (T@U T@U T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.contents (T@U) T@U)
(declare-fun |MutableMap.ResizingHashMap.Inv#canCall| (T@U T@U T@U) Bool)
(declare-fun MutableMap.ResizingHashMap.Inv (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.I#canCall| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.LinearHashMap.LinearHashMap_q (T@U) Bool)
(declare-fun |LruModel.__default.WF#canCall| (T@U) Bool)
(declare-fun MutableMap.ResizingHashMap.Contents () T@U)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun MutableMap.ResizingHashMap.Count () T@U)
(declare-fun Tclass.DebugAccumulator.AccRec () T@U)
(declare-fun Tclass.LruImpl.__default () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.DebugAccumulator.AccRec? () T@U)
(declare-fun DebugAccumulator.AccRec.key () T@U)
(declare-fun DebugAccumulator.AccRec.count () T@U)
(declare-fun DebugAccumulator.AccRec.unit () T@U)
(declare-fun DebugAccumulator.AccRec.index () T@U)
(declare-fun Tclass.DebugAccumulator.__default () T@U)
(declare-fun DebugAccumulator.__default.EmptyAccumulator () T@U)
(declare-fun |DebugAccumulator.__default.EmptyAccumulator#requires| () Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#19| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.LruModel.__default () T@U)
(declare-fun LruModel.__default.distinct (T@U T@U) Bool)
(declare-fun |LruModel.__default.distinct#canCall| (T@U) Bool)
(declare-fun |LruModel.__default.distinct#requires| (T@U T@U) Bool)
(declare-fun |LruModel.__default.WF#requires| (T@U) Bool)
(declare-fun StartFuel_LruModel._default.distinct () T@U)
(declare-fun LruModel.__default.I (T@U) T@U)
(declare-fun |LruModel.__default.I#canCall| (T@U) Bool)
(declare-fun |LruModel.__default.I#requires| (T@U) Bool)
(declare-fun |lambda#23| (T@U T@U) T@U)
(declare-fun LruModel.__default.Empty () T@U)
(declare-fun |LruModel.__default.Empty#requires| () Bool)
(declare-fun MoreFuel_LruModel._default.distinct0 () T@U)
(declare-fun StartFuelAssert_LruModel._default.distinct () T@U)
(declare-fun MoreFuel_LruModel._default.distinct1 () T@U)
(declare-fun LruModel.__default.Remove (T@U T@U Int) T@U)
(declare-fun |LruModel.__default.Remove#canCall| (T@U Int) Bool)
(declare-fun |LruModel.__default.Remove#requires| (T@U T@U Int) Bool)
(declare-fun LruModel.__default.Use (T@U Int) T@U)
(declare-fun |LruModel.__default.Use#canCall| (T@U Int) Bool)
(declare-fun |LruModel.__default.Use#requires| (T@U Int) Bool)
(declare-fun LruModel.__default.Next (T@U) Int)
(declare-fun |LruModel.__default.Next#canCall| (T@U) Bool)
(declare-fun |LruModel.__default.Next#requires| (T@U) Bool)
(declare-fun LruModel.__default.NextOpt (T@U T@U) T@U)
(declare-fun |LruModel.__default.NextOpt#canCall| (T@U) Bool)
(declare-fun |LruModel.__default.NextOpt#requires| (T@U T@U) Bool)
(declare-fun LruModel.__default.Pop (T@U) T@U)
(declare-fun |LruModel.__default.Pop#canCall| (T@U) Bool)
(declare-fun |LruModel.__default.Pop#requires| (T@U) Bool)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#25| (T@U Int Int) T@U)
(declare-fun Tclass.SetBijectivity.__default () T@U)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#27| (T@U T@U T@U) T@U)
(declare-fun |lambda#28| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#31| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove11 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#45| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#59| (T@U T@U T@U) T@U)
(declare-fun |lambda#60| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#79| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#80| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#83| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeArithmetic.__default () T@U)
(declare-fun NativeArithmetic.__default.u64add (Int Int) Int)
(declare-fun |NativeArithmetic.__default.u64add#canCall| (Int Int) Bool)
(declare-fun |NativeArithmetic.__default.u64add#requires| (Int Int) Bool)
(declare-fun |#MutableMapModel.Slot.Slot| (Int) T@U)
(declare-fun MutableMapModel.Slot.Slot_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Slot () T@U)
(declare-fun MutableMapModel.Slot.slot (T@U) Int)
(declare-fun |$IsA#MutableMapModel.Slot| (T@U) Bool)
(declare-fun |MutableMapModel.Slot#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.Item.Empty| () T@U)
(declare-fun MutableMapModel.Item.Empty_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Item (T@U) T@U)
(declare-fun Tclass.MutableMapModel.Item_0 (T@U) T@U)
(declare-fun |#MutableMapModel.Item.Entry| (Int T@U) T@U)
(declare-fun MutableMapModel.Item.Entry_q (T@U) Bool)
(declare-fun MutableMapModel.Item.key (T@U) Int)
(declare-fun MutableMapModel.Item.value (T@U) T@U)
(declare-fun |#MutableMapModel.Item.Tombstone| (Int) T@U)
(declare-fun MutableMapModel.Item.Tombstone_q (T@U) Bool)
(declare-fun |$IsA#MutableMapModel.Item| (T@U) Bool)
(declare-fun |MutableMapModel.Item#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (T@U Int T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.FixedSizeLinearHashMap (T@U) T@U)
(declare-fun Tclass.MutableMapModel.FixedSizeLinearHashMap_0 (T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.storage (T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.count (T@U) Int)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.contents (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.FixedSizeLinearHashMap| (T@U) Bool)
(declare-fun |MutableMapModel.FixedSizeLinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.ProbeResult.ProbeResult| (Int Int Int) T@U)
(declare-fun MutableMapModel.ProbeResult.ProbeResult_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.ProbeResult (T@U) T@U)
(declare-fun Tclass.MutableMapModel.ProbeResult_0 (T@U) T@U)
(declare-fun MutableMapModel.ProbeResult.slotIdx (T@U) Int)
(declare-fun MutableMapModel.ProbeResult.startSlotIdx (T@U) Int)
(declare-fun MutableMapModel.ProbeResult.ghostSkips (T@U) Int)
(declare-fun |$IsA#MutableMapModel.ProbeResult| (T@U) Bool)
(declare-fun |MutableMapModel.ProbeResult#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.LinearHashMap.LinearHashMap| (T@U Int T@U) T@U)
(declare-fun Tclass.MutableMapModel.LinearHashMap (T@U) T@U)
(declare-fun Tclass.MutableMapModel.LinearHashMap_0 (T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.underlying (T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.count (T@U) Int)
(declare-fun |$IsA#MutableMapModel.LinearHashMap| (T@U) Bool)
(declare-fun |MutableMapModel.LinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.IteratorOutput.Next| (Int T@U) T@U)
(declare-fun MutableMapModel.IteratorOutput.Next_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.IteratorOutput (T@U) T@U)
(declare-fun Tclass.MutableMapModel.IteratorOutput_0 (T@U) T@U)
(declare-fun MutableMapModel.IteratorOutput.key (T@U) Int)
(declare-fun MutableMapModel.IteratorOutput.value (T@U) T@U)
(declare-fun |#MutableMapModel.IteratorOutput.Done| () T@U)
(declare-fun MutableMapModel.IteratorOutput.Done_q (T@U) Bool)
(declare-fun |$IsA#MutableMapModel.IteratorOutput| (T@U) Bool)
(declare-fun |MutableMapModel.IteratorOutput#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.Iterator.Iterator| (Int T@U T@U T@U) T@U)
(declare-fun MutableMapModel.Iterator.Iterator_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Iterator (T@U) T@U)
(declare-fun Tclass.MutableMapModel.Iterator_0 (T@U) T@U)
(declare-fun MutableMapModel.Iterator.i (T@U) Int)
(declare-fun MutableMapModel.Iterator.s (T@U) T@U)
(declare-fun MutableMapModel.Iterator.decreaser (T@U) T@U)
(declare-fun MutableMapModel.Iterator.next (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.Iterator| (T@U) Bool)
(declare-fun |MutableMapModel.Iterator#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.SimpleIterator.SimpleIterator| (Int T@U T@U) T@U)
(declare-fun MutableMapModel.SimpleIterator.SimpleIterator_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.SimpleIterator () T@U)
(declare-fun MutableMapModel.SimpleIterator.i (T@U) Int)
(declare-fun MutableMapModel.SimpleIterator.s (T@U) T@U)
(declare-fun MutableMapModel.SimpleIterator.decreaser (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.SimpleIterator| (T@U) Bool)
(declare-fun |MutableMapModel.SimpleIterator#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MutableMapModel.__default () T@U)
(declare-fun MutableMapModel.__default.lshift (T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.lshift#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.lshift#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.rshift (T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.rshift#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.rshift#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.bitnot (T@U Int) Int)
(declare-fun |MutableMapModel.__default.bitnot#canCall| (Int) Bool)
(declare-fun |MutableMapModel.__default.bitnot#requires| (T@U Int) Bool)
(declare-fun MutableMapModel.__default.bitxor (T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.bitxor#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.bitxor#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.hash64 (T@U Int) Int)
(declare-fun |MutableMapModel.__default.hash64#canCall| (Int) Bool)
(declare-fun |MutableMapModel.__default.hash64#requires| (T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.bitnot () T@U)
(declare-fun StartFuel_MutableMapModel._default.lshift () T@U)
(declare-fun StartFuel_MutableMapModel._default.rshift () T@U)
(declare-fun StartFuel_MutableMapModel._default.bitxor () T@U)
(declare-fun MutableMapModel.__default.ValidSlot (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidSlot#canCall| (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidSlot#requires| (Int T@U) Bool)
(declare-fun MutableMapModel.__default.ValidElements (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidElements#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidElements#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotForKey (Int Int) T@U)
(declare-fun |MutableMapModel.__default.SlotForKey#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotForKey#requires| (Int Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.hash64 () T@U)
(declare-fun MutableMapModel.__default.Uint64SlotForKey (T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.Uint64SlotForKey#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Uint64SlotForKey#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotSuccessor (Int T@U) T@U)
(declare-fun |MutableMapModel.__default.SlotSuccessor#canCall| (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotSuccessor#requires| (Int T@U) Bool)
(declare-fun MutableMapModel.__default.KthSlotSuccessor (T@U Int T@U Int) T@U)
(declare-fun |MutableMapModel.__default.KthSlotSuccessor#canCall| (Int T@U Int) Bool)
(declare-fun |MutableMapModel.__default.KthSlotSuccessor#requires| (T@U Int T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotIsEmpty (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEmpty#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEmpty#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotIsEntry (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEntry#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEntry#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotIsTombstone (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsTombstone#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsTombstone#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.FilledWithOtherKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithOtherKeys (T@U T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKeys#canCall| (T@U T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKeys#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithEntryKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithEntryKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithEntryKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotExplainsKey (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotExplainsKey#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotExplainsKey#requires| (T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SameSlot (Int T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SameSlot#canCall| (Int T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SameSlot#requires| (Int T@U T@U) Bool)
(declare-fun MutableMapModel.__default.CantEquivocateStorageKey (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocateStorageKey#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocateStorageKey#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.KeyInSlotIsInContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.KeyInSlotIsInContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.KeyInSlotIsInContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SeqMatchesContentKeys (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SeqMatchesContentKeys#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SeqMatchesContentKeys#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.EntryInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntryInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntryInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.TombstoneInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.EntriesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntriesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntriesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.TombstonesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstonesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstonesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.FixedSizeInv (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInv#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInv#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.IndexSetThrough (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.IndexSetThrough#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.IndexSetThrough#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#87| (T@U Int Int T@U T@U) T@U)
(declare-fun MutableMapModel.__default.IndexSet (T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IndexSet#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IndexSet#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Count1 (T@U T@U) Int)
(declare-fun |MutableMapModel.__default.Count1#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Count1#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.CountFilled (T@U T@U T@U) Int)
(declare-fun |MutableMapModel.__default.CountFilled#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CountFilled#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.ConstructorFromSize (T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ConstructorFromSize#canCall| (T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ConstructorFromSize#requires| (T@U Int) Bool)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun MutableMapModel.__default.ConstructorFromStorage (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ConstructorFromStorage#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ConstructorFromStorage#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.View (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.View#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.View#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Uint64SlotSuccessor (Int Int) Int)
(declare-fun |MutableMapModel.__default.Uint64SlotSuccessor#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.Uint64SlotSuccessor#requires| (Int Int) Bool)
(declare-fun MutableMapModel.__default.getEmptyWitness (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.getEmptyWitness#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.getEmptyWitness#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.ProbeIterate (T@U T@U T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.ProbeIterate#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.ProbeIterate#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.Probe (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.Probe#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Probe#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FixedSizeInsert (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeInsert#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInsert#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.Probe () T@U)
(declare-fun MutableMapModel.__default.FixedSizeUpdateBySlot (T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeUpdateBySlot#requires| (T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.FixedSizeGet (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeGet#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeGet#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FixedSizeRemove (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeRemove#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeRemove#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.MapFromStorage (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.MapFromStorage#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.MapFromStorage#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.CantEquivocate (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocate#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocate#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.UnderlyingContentsMatchesContents (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.UnderlyingInv (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingInv#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingInv#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Inv (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Constructor (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Constructor#canCall| (T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Constructor#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.ReallocIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ReallocIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ReallocIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeInsert () T@U)
(declare-fun MutableMapModel.__default.ReallocInternal (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.ReallocInternal#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ReallocInternal#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Realloc (T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.Realloc#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Realloc#requires| (T@U T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.ReallocInternal () T@U)
(declare-fun MutableMapModel.__default.InsertAndGetOld (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.InsertAndGetOld#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.InsertAndGetOld#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.Insert (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.Insert#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.Insert#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.InsertAndGetOld () T@U)
(declare-fun MutableMapModel.__default.RemoveInternal (T@U T@U Int) T@U)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeRemove () T@U)
(declare-fun |MutableMapModel.__default.RemoveInternal#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.RemoveInternal#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#89| (Int Int T@U Int) T@U)
(declare-fun MutableMapModel.__default.RemoveAndGet (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.RemoveAndGet#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.RemoveAndGet#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Remove (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Remove#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Remove#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Get (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Get#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Get#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeGet () T@U)
(declare-fun MutableMapModel.__default.NextExplainedByI (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.NextExplainedByI#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.NextExplainedByI#requires| (T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.ValidI (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidI#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidI#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.WFIter (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFIter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFIter#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.WFSimpleIter (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFSimpleIter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFSimpleIter#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.indexOutput (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.indexOutput#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.indexOutput#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SimpleIterOutput (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterOutput#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterOutput#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.iterToNext (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.iterToNext#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.iterToNext#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.simpleIterToNext (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.simpleIterToNext#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.simpleIterToNext#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.IterStart (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IterStart#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IterStart#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SimpleIterStart (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterStart#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterStart#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.IterInc (T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IterInc#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IterInc#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SimpleIterInc (T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterInc#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterInc#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.MaxKeyIterate (T@U T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.MaxKeyIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.MaxKeyIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.IterInc () T@U)
(declare-fun MutableMapModel.__default.MaxKey (T@U T@U T@U) Int)
(declare-fun |MutableMapModel.__default.MaxKey#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.MaxKey#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.IterStart () T@U)
(declare-fun MutableMapModel.__default.UpdateByIter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.UpdateByIter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UpdateByIter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.setUpTo (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.setUpTo#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.setUpTo#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#101| (Int Int T@U T@U T@U) T@U)
(declare-fun MutableMapModel.__default.FindSimpleIter (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FindSimpleIter#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FindSimpleIter#requires| (T@U T@U T@U Int) Bool)
(declare-fun Tclass.MutableMap.FixedSizeHashMap? (T@U) T@U)
(declare-fun Tclass.MutableMap.FixedSizeHashMap?_0 (T@U) T@U)
(declare-fun MutableMap.FixedSizeHashMap.Storage () T@U)
(declare-fun MutableMap.FixedSizeHashMap.Count () T@U)
(declare-fun MutableMap.FixedSizeHashMap.Contents () T@U)
(declare-fun MutableMap.FixedSizeHashMap.Repr () T@U)
(declare-fun Tclass.MutableMap.FixedSizeHashMap (T@U) T@U)
(declare-fun Tclass.MutableMap.FixedSizeHashMap_0 (T@U) T@U)
(declare-fun MutableMap.FixedSizeHashMap.WF (T@U T@U T@U) Bool)
(declare-fun |MutableMap.FixedSizeHashMap.WF#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.FixedSizeHashMap.WF#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMap.FixedSizeHashMap.ModelI (T@U T@U T@U) T@U)
(declare-fun |MutableMap.FixedSizeHashMap.ModelI#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.FixedSizeHashMap.ModelI#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMap.FixedSizeHashMap.Inv (T@U T@U T@U) Bool)
(declare-fun |MutableMap.FixedSizeHashMap.Inv#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.FixedSizeHashMap.Inv#requires| (T@U T@U T@U) Bool)
(declare-fun Tclass.MutableMap.ResizingHashMap? (T@U) T@U)
(declare-fun Tclass.MutableMap.ResizingHashMap?_0 (T@U) T@U)
(declare-fun MutableMap.ResizingHashMap.Underlying () T@U)
(declare-fun MutableMap.ResizingHashMap.ReprInv (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.ReprInv#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.ReprInv#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMap.ResizingHashMap.ModelI (T@U T@U T@U) T@U)
(declare-fun |MutableMap.ResizingHashMap.ModelI#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.ModelI#requires| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.Inv#requires| (T@U T@U T@U) Bool)
(declare-fun |MutableMap.ResizingHashMap.I#requires| (T@U T@U T@U) Bool)
(declare-fun Tclass.MutableMap.__default () T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#9| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.LruImpl.Node?) ClassNameType)) (= (type Tagclass.LruImpl.Node?) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.LruImpl.Node) TyTagType)) (= (type class.LruImpl.LruImplQueue?) ClassNameType)) (= (type Tagclass.LruImpl.LruImplQueue?) TyTagType)) (= (type Tagclass.MutableMap.ResizingHashMap) TyTagType)) (= (type Tagclass.LruImpl.LruImplQueue) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.DebugAccumulator.AccRec) TyTagType)) (= (type class.LruImpl.__default) ClassNameType)) (= (type Tagclass.LruImpl.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.DebugAccumulator.AccRec?) ClassNameType)) (= (type Tagclass.DebugAccumulator.AccRec?) TyTagType)) (= (type class.DebugAccumulator.__default) ClassNameType)) (= (type Tagclass.DebugAccumulator.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.LruModel.__default) ClassNameType)) (= (type Tagclass.LruModel.__default) TyTagType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.SetBijectivity.__default) ClassNameType)) (= (type Tagclass.SetBijectivity.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.NativeArithmetic.__default) ClassNameType)) (= (type Tagclass.NativeArithmetic.__default) TyTagType)) (= (type |##MutableMapModel.Slot.Slot|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Slot) TyTagType)) (= (type class.MutableMapModel.Slot) ClassNameType)) (= (type |##MutableMapModel.Item.Empty|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Item) TyTagType)) (= (type |##MutableMapModel.Item.Entry|) DtCtorIdType)) (= (type |##MutableMapModel.Item.Tombstone|) DtCtorIdType)) (= (type class.MutableMapModel.Item) ClassNameType)) (= (type |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.FixedSizeLinearHashMap) TyTagType)) (= (type class.MutableMapModel.FixedSizeLinearHashMap) ClassNameType)) (= (type |##MutableMapModel.ProbeResult.ProbeResult|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.ProbeResult) TyTagType)) (= (type class.MutableMapModel.ProbeResult) ClassNameType)) (= (type |##MutableMapModel.LinearHashMap.LinearHashMap|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.LinearHashMap) TyTagType)) (= (type class.MutableMapModel.LinearHashMap) ClassNameType)) (= (type |##MutableMapModel.IteratorOutput.Next|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.IteratorOutput) TyTagType)) (= (type |##MutableMapModel.IteratorOutput.Done|) DtCtorIdType)) (= (type class.MutableMapModel.IteratorOutput) ClassNameType)) (= (type |##MutableMapModel.Iterator.Iterator|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Iterator) TyTagType)) (= (type class.MutableMapModel.Iterator) ClassNameType)) (= (type |##MutableMapModel.SimpleIterator.SimpleIterator|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.SimpleIterator) TyTagType)) (= (type class.MutableMapModel.SimpleIterator) ClassNameType)) (= (type class.MutableMapModel.__default) ClassNameType)) (= (type Tagclass.MutableMapModel.__default) TyTagType)) (= (type class.MutableMap.FixedSizeHashMap?) ClassNameType)) (= (type Tagclass.MutableMap.FixedSizeHashMap?) TyTagType)) (= (type Tagclass.MutableMap.FixedSizeHashMap) TyTagType)) (= (type class.MutableMap.ResizingHashMap?) ClassNameType)) (= (type Tagclass.MutableMap.ResizingHashMap?) TyTagType)) (= (type class.MutableMap.__default) ClassNameType)) (= (type Tagclass.MutableMap.__default) TyTagType)) (= (type field$prev) NameFamilyType)) (= (type field$next) NameFamilyType)) (= (type field$value) NameFamilyType)) (= (type field$Queue) NameFamilyType)) (= (type field$Repr) NameFamilyType)) (= (type field$nodemap) NameFamilyType)) (= (type field$head_node) NameFamilyType)) (= (type field$tail_node) NameFamilyType)) (= (type field$Contents) NameFamilyType)) (= (type field$Count) NameFamilyType)) (= (type field$key) NameFamilyType)) (= (type field$count) NameFamilyType)) (= (type field$unit) NameFamilyType)) (= (type field$index) NameFamilyType)) (= (type field$Storage) NameFamilyType)) (= (type field$Underlying) NameFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.LruImpl.Node? Tagclass.LruImpl.Node? Tagclass.NativeTypes.uint64 Tagclass.LruImpl.Node class.LruImpl.LruImplQueue? Tagclass.LruImpl.LruImplQueue? Tagclass.MutableMap.ResizingHashMap Tagclass.LruImpl.LruImplQueue Tagclass.Options.Option Tagclass.DebugAccumulator.AccRec class.LruImpl.__default Tagclass.LruImpl.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.DebugAccumulator.AccRec? Tagclass.DebugAccumulator.AccRec? class.DebugAccumulator.__default Tagclass.DebugAccumulator.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.Sequences.__default Tagclass.Sequences.__default class.LruModel.__default Tagclass.LruModel.__default class.Sets.__default Tagclass.Sets.__default class.SetBijectivity.__default Tagclass.SetBijectivity.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Maps.__default Tagclass.Maps.__default class.NativeArithmetic.__default Tagclass.NativeArithmetic.__default |##MutableMapModel.Slot.Slot| Tagclass.MutableMapModel.Slot class.MutableMapModel.Slot |##MutableMapModel.Item.Empty| Tagclass.MutableMapModel.Item |##MutableMapModel.Item.Entry| |##MutableMapModel.Item.Tombstone| class.MutableMapModel.Item |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| Tagclass.MutableMapModel.FixedSizeLinearHashMap class.MutableMapModel.FixedSizeLinearHashMap |##MutableMapModel.ProbeResult.ProbeResult| Tagclass.MutableMapModel.ProbeResult class.MutableMapModel.ProbeResult |##MutableMapModel.LinearHashMap.LinearHashMap| Tagclass.MutableMapModel.LinearHashMap class.MutableMapModel.LinearHashMap |##MutableMapModel.IteratorOutput.Next| Tagclass.MutableMapModel.IteratorOutput |##MutableMapModel.IteratorOutput.Done| class.MutableMapModel.IteratorOutput |##MutableMapModel.Iterator.Iterator| Tagclass.MutableMapModel.Iterator class.MutableMapModel.Iterator |##MutableMapModel.SimpleIterator.SimpleIterator| Tagclass.MutableMapModel.SimpleIterator class.MutableMapModel.SimpleIterator class.MutableMapModel.__default Tagclass.MutableMapModel.__default class.MutableMap.FixedSizeHashMap? Tagclass.MutableMap.FixedSizeHashMap? Tagclass.MutableMap.FixedSizeHashMap class.MutableMap.ResizingHashMap? Tagclass.MutableMap.ResizingHashMap? class.MutableMap.__default Tagclass.MutableMap.__default field$prev field$next field$value field$Queue field$Repr field$nodemap field$head_node field$tail_node field$Contents field$Count field$key field$count field$unit field$index field$Storage field$Underlying) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (forall ((b@@61 (_ BitVec 64)) ) (!  (and (and (<= 0 (nat_from_bv64 b@@61)) (< (nat_from_bv64 b@@61) 18446744073709551616)) (= (nat_from_bv64 b@@61) (bv2int b@@61))) :qid |unknown.0:0| :skolemid |638| :pattern ( (nat_from_bv64 b@@61)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |640| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |642| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |643| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |647| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |649| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |650| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |652| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |654| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |656| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |658| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |661| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |663| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |664| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |666| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |667| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |668| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |669| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |670| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |671| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |672| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |673| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |674| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |675| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |676| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |677| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |678| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |679| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |681| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |682| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |682| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |683| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |684| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |685| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |686| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |686| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |688| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |690| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |693| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |695| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |702| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |703| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |707| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |709| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |710| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |711| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |712| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |713| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |714| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |716| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |717| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |718| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |719| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |720| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |721| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |722| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |723| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |725| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |726| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |726| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |730| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |732| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |733| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |732| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |733| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |734| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |735| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |736| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |740| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |742| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |742| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |744| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |749| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |750| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |750| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |752| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |756| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |757| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |758| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |759| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |760| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |762| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |763| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |764| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |766| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |767| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |773| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |774| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |774| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |777| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |778| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |779| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |779| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |781| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |782| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |786| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |788| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |788| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |790| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |793| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |794| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |795| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |795| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert  (and (forall ((arg0@@156 T@U) (arg1@@74 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) )) (forall ((arg0@@157 T@U) ) (! (= (type (DatatypeCtorId arg0@@157)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@157)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |798| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |799| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |800| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |801| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@75 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@158 arg1@@75)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@158 arg1@@75)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) ) (!  (=> (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@159)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@159)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) ) (!  (=> (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |803| :pattern ( (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@160)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@160)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) ) (!  (=> (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@58)) bx@@58) ($Is ($Unbox DatatypeTypeType bx@@58) (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|)))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|)) (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))))) :qid |unknown.0:0| :skolemid |806| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@14)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14) (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)))) :qid |unknown.0:0| :skolemid |807| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@40| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@40|) TyType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@24| T@U) ) (!  (and (= (type |#$T1@@24|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) :qid |unknown.0:0| :skolemid |809| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@25| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@25|) TyType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@41| T@U) ) (!  (and (= (type |#$T0@@41|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) :qid |unknown.0:0| :skolemid |810| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) :qid |unknown.0:0| :skolemid |811| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |812| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |813| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |814| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |815| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |816| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |817| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |818| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) )))
(assert (forall ((a@@100 T@U) (b@@62 T@U) ) (!  (=> (and (and (= (type a@@100) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@100 b@@62) (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@62)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@62)))) (=> (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@62)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@62))) (|_System.Tuple2#Equal| a@@100 b@@62)))) :qid |unknown.0:0| :skolemid |819| :pattern ( (|_System.Tuple2#Equal| a@@100 b@@62)) )))
(assert (forall ((a@@101 T@U) (b@@63 T@U) ) (!  (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@101 b@@63) (= a@@101 b@@63)) (=> (= a@@101 b@@63) (|_System.Tuple2#Equal| a@@101 b@@63)))) :qid |unknown.0:0| :skolemid |820| :pattern ( (|_System.Tuple2#Equal| a@@101 b@@63)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@76 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |821| :pattern ( (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@162)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |822| :pattern ( (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@163)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) |#$T1@@29|)) :qid |unknown.0:0| :skolemid |823| :pattern ( (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@164)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |824| :pattern ( (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@165)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@165)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |825| :pattern ( (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |826| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@166 T@T) (arg1@@77 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@166 arg1@@77 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@167 T@T) (arg1@@78 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) arg0@@167) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@168 T@T) (arg1@@79 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) arg1@@79) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@169 T@T) (arg1@@80 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@170 T@T) (arg1@@81 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@171 T@T) (arg1@@82 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@172 T@U) (arg1@@83 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@172)))) (= (type (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@173 T@U) (arg1@@84 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@84))) (= (type (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@174 T@U) (arg1@@85 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@175 T@U) (arg1@@86 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@175 arg1@@86 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@175 arg1@@86 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |827| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |828| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@176 T@U) (arg1@@87 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@60) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60))))) :qid |unknown.0:0| :skolemid |829| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@102))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |830| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@103))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |832| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |833| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@104))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |834| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |835| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@105))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |836| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |837| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@106))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |838| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |839| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@107))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |840| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |842| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |843| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |844| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |844| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |845| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@2)) ($IsBox bx@@61 t0@@69)) :qid |unknown.0:0| :skolemid |846| :pattern ( ($IsBox bx@@61 u0@@2)) :pattern ( ($IsBox bx@@61 t0@@69)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@1)) ($IsBox bx@@62 t1@@45)) :qid |unknown.0:0| :skolemid |847| :pattern ( ($IsBox bx@@62 u1@@1)) :pattern ( ($IsBox bx@@62 t1@@45)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@0)) ($IsBox bx@@63 t2@@26)) :qid |unknown.0:0| :skolemid |848| :pattern ( ($IsBox bx@@63 u2@@0)) :pattern ( ($IsBox bx@@63 t2@@26)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@11)) ($IsBox bx@@64 u3)) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@64 t3@@11)) :pattern ( ($IsBox bx@@64 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |850| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |851| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |852| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |851| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |852| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |853| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |854| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |855| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@88 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) |#$T0@@50|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) |#$T1@@35|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |860| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |861| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@55|) ($IsBox |x1#0@@3| |#$T1@@39|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |862| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@55|) ($IsBox |x1#0@@4| |#$T1@@39|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |862| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |863| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |865| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@183)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) |#$T0@@58|)) :qid |unknown.0:0| :skolemid |866| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@184)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) |#$T1@@43|)) :qid |unknown.0:0| :skolemid |867| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@185)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |868| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@186)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |869| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@63|) ($IsBox |x1#0@@5| |#$T1@@47|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |871| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@63|) ($IsBox |x1#0@@6| |#$T1@@47|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |871| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@187 arg1@@90 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@187 arg1@@90 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |874| :pattern ( (Tclass._System.___hFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@188)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@188)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |875| :pattern ( (Tclass._System.___hFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@189)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@189)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |876| :pattern ( (Tclass._System.___hFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@190)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@190)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |877| :pattern ( (Tclass._System.___hFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@191)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@191)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |878| :pattern ( (Tclass._System.___hFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@192)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@192)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |879| :pattern ( (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@67 (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@193 T@T) (arg1@@91 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@193 arg1@@91 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@194 T@T) (arg1@@92 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@194 arg1@@92 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@194) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@194 arg1@@92 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@195 T@T) (arg1@@93 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@195 arg1@@93 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@93) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@195 arg1@@93 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@196 T@T) (arg1@@94 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@196 arg1@@94 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@196 arg1@@94 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@197 T@T) (arg1@@95 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@197 arg1@@95 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@197 arg1@@95 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@198 T@T) (arg1@@96 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@198 arg1@@96 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@198 arg1@@96 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@199 T@T) (arg1@@97 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@199 arg1@@97 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@199 arg1@@97 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@200 T@U) (arg1@@98 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@200)))) (= (type (MapType5Select arg0@@200 arg1@@98 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@200 arg1@@98 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@201 T@U) (arg1@@99 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@99))) (= (type (MapType5Store arg0@@201 arg1@@99 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@201 arg1@@99 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@42)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@202 T@U) (arg1@@100 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@202 arg1@@100 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@202 arg1@@100 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@203 T@U) (arg1@@101 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@203 arg1@@101 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@203 arg1@@101 arg2@@57)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3))) :qid |unknown.0:0| :skolemid |881| :pattern ( (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0))) (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) :qid |unknown.0:0| :skolemid |882| :pattern ( (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) )))
(assert (forall ((arg0@@204 T@U) (arg1@@102 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@204 arg1@@102 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@204 arg1@@102 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@68) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68))))) :qid |unknown.0:0| :skolemid |883| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@68)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@108))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |884| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2))) :qid |unknown.0:0| :skolemid |885| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@109))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |886| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3))) :qid |unknown.0:0| :skolemid |887| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@110))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |888| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@111))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |890| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)))) :qid |unknown.0:0| :skolemid |891| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@112))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |892| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6))) :qid |unknown.0:0| :skolemid |893| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@113))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |894| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7))) :qid |unknown.0:0| :skolemid |895| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |896| :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)))) :qid |unknown.0:0| :skolemid |897| :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |898| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |898| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11)) )) ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u0@@3)) ($IsBox bx@@69 t0@@84)) :qid |unknown.0:0| :skolemid |900| :pattern ( ($IsBox bx@@69 u0@@3)) :pattern ( ($IsBox bx@@69 t0@@84)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u1@@2)) ($IsBox bx@@70 t1@@60)) :qid |unknown.0:0| :skolemid |901| :pattern ( ($IsBox bx@@70 u1@@2)) :pattern ( ($IsBox bx@@70 t1@@60)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u2@@1)) ($IsBox bx@@71 t2@@41)) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsBox bx@@71 u2@@1)) :pattern ( ($IsBox bx@@71 t2@@41)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u3@@0)) ($IsBox bx@@72 t3@@26)) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@72 u3@@0)) :pattern ( ($IsBox bx@@72 t3@@26)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 t4@@11)) ($IsBox bx@@73 u4)) :qid |unknown.0:0| :skolemid |904| :pattern ( ($IsBox bx@@73 t4@@11)) :pattern ( ($IsBox bx@@73 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |905| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |906| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |907| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |906| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |907| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) (Requires4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ($IsAllocBox (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14) t4@@13 h@@54))) :qid |unknown.0:0| :skolemid |909| :pattern ( (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54)) )))
(assert (forall ((arg0@@205 T@U) (arg1@@103 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@205 arg1@@103 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@205 arg1@@103 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@206)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@206)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@207 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@207)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@207)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@208)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@208)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@209)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@209)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@210)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@210)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |917| :pattern ( ($IsBox bx@@74 (Tclass._System.___hPartialFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@11| |#$T0@@79|) ($IsBox |x1#0@@7| |#$T1@@63|)) ($IsBox |x2#0@@3| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |918| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@12| |#$T0@@79|) ($IsBox |x1#0@@8| |#$T1@@63|)) ($IsBox |x2#0@@4| |#$T2@@35|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |918| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|))))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)))) :qid |unknown.0:0| :skolemid |920| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)) )))
(assert (forall ((arg0@@211 T@U) (arg1@@104 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@211 arg1@@104 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@211 arg1@@104 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@212 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@212)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@212)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@213)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@213)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |923| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@214)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@214)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@215)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@215)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |925| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@216)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@216)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |926| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($IsBox bx@@75 (Tclass._System.___hTotalFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@13| |#$T0@@88|) ($IsBox |x1#0@@9| |#$T1@@72|)) ($IsBox |x2#0@@5| |#$T2@@44|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |928| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@14| |#$T0@@88|) ($IsBox |x1#0@@10| |#$T1@@72|)) ($IsBox |x2#0@@6| |#$T2@@44|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |928| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |929| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |931| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |932| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@76)) bx@@76) ($Is ($Unbox DatatypeTypeType bx@@76) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |933| :pattern ( ($IsBox bx@@76 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPre.521:12| :skolemid |934| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |935| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |936| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@64 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@114 b@@64) true) (=> true (|_System.Tuple0#Equal| a@@114 b@@64)))) :qid |unknown.0:0| :skolemid |937| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@64)) )))
(assert (forall ((a@@115 T@U) (b@@65 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@115 b@@65) (= a@@115 b@@65)) (=> (= a@@115 b@@65) (|_System.Tuple0#Equal| a@@115 b@@65)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@65)) )))
(assert (= (type Tclass.LruImpl.Node?) TyType))
(assert (= (Tag Tclass.LruImpl.Node?) Tagclass.LruImpl.Node?))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.LruImpl.Node?)) (and (= ($Box ($Unbox refType bx@@77)) bx@@77) ($Is ($Unbox refType bx@@77) Tclass.LruImpl.Node?))) :qid |unknown.0:0| :skolemid |939| :pattern ( ($IsBox bx@@77 Tclass.LruImpl.Node?)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.LruImpl.Node?) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.LruImpl.Node?))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.LruImpl.Node?)) ($Is $o@@9 Tclass.LruImpl.Node?)))) :qid |unknown.0:0| :skolemid |940| :pattern ( ($Is $o@@9 Tclass.LruImpl.Node?)) )))
(assert (forall (($o@@10 T@U) ($h@@22 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.LruImpl.Node? $h@@22) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.LruImpl.Node? $h@@22)))) :qid |unknown.0:0| :skolemid |941| :pattern ( ($IsAlloc $o@@10 Tclass.LruImpl.Node? $h@@22)) )))
(assert (= (type LruImpl.Node.prev) (FieldType refType)))
(assert (= (FDim LruImpl.Node.prev) 0))
(assert (= (FieldOfDecl refType class.LruImpl.Node? field$prev) LruImpl.Node.prev))
(assert  (not ($IsGhostField LruImpl.Node.prev)))
(assert (forall (($h@@23 T@U) ($o@@11 T@U) ) (!  (=> (and (and (= (type $h@@23) (MapType0Type refType MapType1Type)) (= (type $o@@11) refType)) (and ($IsGoodHeap $h@@23) (and (not (= $o@@11 null)) (= (dtype $o@@11) Tclass.LruImpl.Node?)))) ($Is (MapType1Select (MapType0Select $h@@23 $o@@11) LruImpl.Node.prev) Tclass.LruImpl.Node?)) :qid |DafnyPre.521:12| :skolemid |942| :pattern ( (MapType1Select (MapType0Select $h@@23 $o@@11) LruImpl.Node.prev)) )))
(assert (forall (($h@@24 T@U) ($o@@12 T@U) ) (!  (=> (and (= (type $h@@24) (MapType0Type refType MapType1Type)) (= (type $o@@12) refType)) (=> (and (and ($IsGoodHeap $h@@24) (and (not (= $o@@12 null)) (= (dtype $o@@12) Tclass.LruImpl.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@24 $o@@12) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@24 $o@@12) LruImpl.Node.prev) Tclass.LruImpl.Node? $h@@24))) :qid |DafnyPre.521:12| :skolemid |943| :pattern ( (MapType1Select (MapType0Select $h@@24 $o@@12) LruImpl.Node.prev)) )))
(assert (= (type LruImpl.Node.next) (FieldType refType)))
(assert (= (FDim LruImpl.Node.next) 0))
(assert (= (FieldOfDecl refType class.LruImpl.Node? field$next) LruImpl.Node.next))
(assert  (not ($IsGhostField LruImpl.Node.next)))
(assert (forall (($h@@25 T@U) ($o@@13 T@U) ) (!  (=> (and (and (= (type $h@@25) (MapType0Type refType MapType1Type)) (= (type $o@@13) refType)) (and ($IsGoodHeap $h@@25) (and (not (= $o@@13 null)) (= (dtype $o@@13) Tclass.LruImpl.Node?)))) ($Is (MapType1Select (MapType0Select $h@@25 $o@@13) LruImpl.Node.next) Tclass.LruImpl.Node?)) :qid |DafnyPre.521:12| :skolemid |944| :pattern ( (MapType1Select (MapType0Select $h@@25 $o@@13) LruImpl.Node.next)) )))
(assert (forall (($h@@26 T@U) ($o@@14 T@U) ) (!  (=> (and (= (type $h@@26) (MapType0Type refType MapType1Type)) (= (type $o@@14) refType)) (=> (and (and ($IsGoodHeap $h@@26) (and (not (= $o@@14 null)) (= (dtype $o@@14) Tclass.LruImpl.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@26 $o@@14) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@26 $o@@14) LruImpl.Node.next) Tclass.LruImpl.Node? $h@@26))) :qid |DafnyPre.521:12| :skolemid |945| :pattern ( (MapType1Select (MapType0Select $h@@26 $o@@14) LruImpl.Node.next)) )))
(assert (= (type LruImpl.Node.value) (FieldType intType)))
(assert (= (FDim LruImpl.Node.value) 0))
(assert (= (FieldOfDecl intType class.LruImpl.Node? field$value) LruImpl.Node.value))
(assert  (not ($IsGhostField LruImpl.Node.value)))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@78)) bx@@78) ($Is ($Unbox intType bx@@78) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsBox bx@@78 Tclass.NativeTypes.uint64)) )))
(assert (forall (($h@@27 T@U) ($o@@15 T@U) ) (!  (=> (and (and (= (type $h@@27) (MapType0Type refType MapType1Type)) (= (type $o@@15) refType)) (and ($IsGoodHeap $h@@27) (and (not (= $o@@15 null)) (= (dtype $o@@15) Tclass.LruImpl.Node?)))) ($Is (MapType1Select (MapType0Select $h@@27 $o@@15) LruImpl.Node.value) Tclass.NativeTypes.uint64)) :qid |DafnyPre.521:12| :skolemid |947| :pattern ( (MapType1Select (MapType0Select $h@@27 $o@@15) LruImpl.Node.value)) )))
(assert (forall (($h@@28 T@U) ($o@@16 T@U) ) (!  (=> (and (= (type $h@@28) (MapType0Type refType MapType1Type)) (= (type $o@@16) refType)) (=> (and (and ($IsGoodHeap $h@@28) (and (not (= $o@@16 null)) (= (dtype $o@@16) Tclass.LruImpl.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@28 $o@@16) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@28 $o@@16) LruImpl.Node.value) Tclass.NativeTypes.uint64 $h@@28))) :qid |DafnyPre.521:12| :skolemid |948| :pattern ( (MapType1Select (MapType0Select $h@@28 $o@@16) LruImpl.Node.value)) )))
(assert (= (type Tclass.LruImpl.Node) TyType))
(assert (= (Tag Tclass.LruImpl.Node) Tagclass.LruImpl.Node))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.LruImpl.Node)) (and (= ($Box ($Unbox refType bx@@79)) bx@@79) ($Is ($Unbox refType bx@@79) Tclass.LruImpl.Node))) :qid |unknown.0:0| :skolemid |949| :pattern ( ($IsBox bx@@79 Tclass.LruImpl.Node)) )))
(assert (forall ((|c#0@@3| T@U) ) (!  (=> (= (type |c#0@@3|) refType) (and (=> ($Is |c#0@@3| Tclass.LruImpl.Node) (and ($Is |c#0@@3| Tclass.LruImpl.Node?) (not (= |c#0@@3| null)))) (=> (and ($Is |c#0@@3| Tclass.LruImpl.Node?) (not (= |c#0@@3| null))) ($Is |c#0@@3| Tclass.LruImpl.Node)))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($Is |c#0@@3| Tclass.LruImpl.Node)) )))
(assert (forall ((|c#0@@4| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |c#0@@4|) refType) (= (type $h@@29) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@4| Tclass.LruImpl.Node $h@@29) ($IsAlloc |c#0@@4| Tclass.LruImpl.Node? $h@@29)) (=> ($IsAlloc |c#0@@4| Tclass.LruImpl.Node? $h@@29) ($IsAlloc |c#0@@4| Tclass.LruImpl.Node $h@@29)))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsAlloc |c#0@@4| Tclass.LruImpl.Node $h@@29)) )))
(assert (= (type Tclass.LruImpl.LruImplQueue?) TyType))
(assert (= (Tag Tclass.LruImpl.LruImplQueue?) Tagclass.LruImpl.LruImplQueue?))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.LruImpl.LruImplQueue?)) (and (= ($Box ($Unbox refType bx@@80)) bx@@80) ($Is ($Unbox refType bx@@80) Tclass.LruImpl.LruImplQueue?))) :qid |unknown.0:0| :skolemid |955| :pattern ( ($IsBox bx@@80 Tclass.LruImpl.LruImplQueue?)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.LruImpl.LruImplQueue?) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.LruImpl.LruImplQueue?))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.LruImpl.LruImplQueue?)) ($Is $o@@17 Tclass.LruImpl.LruImplQueue?)))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($Is $o@@17 Tclass.LruImpl.LruImplQueue?)) )))
(assert (forall (($o@@18 T@U) ($h@@30 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@30) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.LruImpl.LruImplQueue? $h@@30) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@30 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@30 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.LruImpl.LruImplQueue? $h@@30)))) :qid |unknown.0:0| :skolemid |957| :pattern ( ($IsAlloc $o@@18 Tclass.LruImpl.LruImplQueue? $h@@30)) )))
(assert (= (type LruImpl.LruImplQueue.Queue) (FieldType (SeqType BoxType))))
(assert (= (FDim LruImpl.LruImplQueue.Queue) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.LruImpl.LruImplQueue? field$Queue) LruImpl.LruImplQueue.Queue))
(assert ($IsGhostField LruImpl.LruImplQueue.Queue))
(assert (forall (($h@@31 T@U) ($o@@19 T@U) ) (!  (=> (and (and (= (type $h@@31) (MapType0Type refType MapType1Type)) (= (type $o@@19) refType)) (and ($IsGoodHeap $h@@31) (and (not (= $o@@19 null)) (= (dtype $o@@19) Tclass.LruImpl.LruImplQueue?)))) ($Is (MapType1Select (MapType0Select $h@@31 $o@@19) LruImpl.LruImplQueue.Queue) (TSeq Tclass.NativeTypes.uint64))) :qid |DafnyPre.521:12| :skolemid |958| :pattern ( (MapType1Select (MapType0Select $h@@31 $o@@19) LruImpl.LruImplQueue.Queue)) )))
(assert (forall (($h@@32 T@U) ($o@@20 T@U) ) (!  (=> (and (= (type $h@@32) (MapType0Type refType MapType1Type)) (= (type $o@@20) refType)) (=> (and (and ($IsGoodHeap $h@@32) (and (not (= $o@@20 null)) (= (dtype $o@@20) Tclass.LruImpl.LruImplQueue?))) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@20) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@32 $o@@20) LruImpl.LruImplQueue.Queue) (TSeq Tclass.NativeTypes.uint64) $h@@32))) :qid |DafnyPre.521:12| :skolemid |959| :pattern ( (MapType1Select (MapType0Select $h@@32 $o@@20) LruImpl.LruImplQueue.Queue)) )))
(assert (= (type LruImpl.LruImplQueue.Repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim LruImpl.LruImplQueue.Repr) 0))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.LruImpl.LruImplQueue? field$Repr) LruImpl.LruImplQueue.Repr))
(assert ($IsGhostField LruImpl.LruImplQueue.Repr))
(assert (forall (($h@@33 T@U) ($o@@21 T@U) ) (!  (=> (and (and (= (type $h@@33) (MapType0Type refType MapType1Type)) (= (type $o@@21) refType)) (and ($IsGoodHeap $h@@33) (and (not (= $o@@21 null)) (= (dtype $o@@21) Tclass.LruImpl.LruImplQueue?)))) ($Is (MapType1Select (MapType0Select $h@@33 $o@@21) LruImpl.LruImplQueue.Repr) (TSet Tclass._System.object))) :qid |DafnyPre.521:12| :skolemid |960| :pattern ( (MapType1Select (MapType0Select $h@@33 $o@@21) LruImpl.LruImplQueue.Repr)) )))
(assert (forall (($h@@34 T@U) ($o@@22 T@U) ) (!  (=> (and (= (type $h@@34) (MapType0Type refType MapType1Type)) (= (type $o@@22) refType)) (=> (and (and ($IsGoodHeap $h@@34) (and (not (= $o@@22 null)) (= (dtype $o@@22) Tclass.LruImpl.LruImplQueue?))) (U_2_bool (MapType1Select (MapType0Select $h@@34 $o@@22) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@34 $o@@22) LruImpl.LruImplQueue.Repr) (TSet Tclass._System.object) $h@@34))) :qid |DafnyPre.521:12| :skolemid |961| :pattern ( (MapType1Select (MapType0Select $h@@34 $o@@22) LruImpl.LruImplQueue.Repr)) )))
(assert (= (type LruImpl.LruImplQueue.nodemap) (FieldType refType)))
(assert (= (FDim LruImpl.LruImplQueue.nodemap) 0))
(assert (= (FieldOfDecl refType class.LruImpl.LruImplQueue? field$nodemap) LruImpl.LruImplQueue.nodemap))
(assert  (not ($IsGhostField LruImpl.LruImplQueue.nodemap)))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass.MutableMap.ResizingHashMap arg0@@217)) TyType) :qid |funType:Tclass.MutableMap.ResizingHashMap| :pattern ( (Tclass.MutableMap.ResizingHashMap arg0@@217)) )))
(assert (forall ((MutableMap.ResizingHashMap$V T@U) ) (!  (=> (= (type MutableMap.ResizingHashMap$V) TyType) (= (Tag (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V)) Tagclass.MutableMap.ResizingHashMap)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass.MutableMap.ResizingHashMap_0 arg0@@218)) TyType) :qid |funType:Tclass.MutableMap.ResizingHashMap_0| :pattern ( (Tclass.MutableMap.ResizingHashMap_0 arg0@@218)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMap.ResizingHashMap$V@@0) TyType) (= (Tclass.MutableMap.ResizingHashMap_0 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@0)) MutableMap.ResizingHashMap$V@@0)) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@0)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@1 T@U) (bx@@81 T@U) ) (!  (=> (and (and (= (type MutableMap.ResizingHashMap$V@@1) TyType) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@1))) (and (= ($Box ($Unbox refType bx@@81)) bx@@81) ($Is ($Unbox refType bx@@81) (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |964| :pattern ( ($IsBox bx@@81 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@1))) )))
(assert (forall (($h@@35 T@U) ($o@@23 T@U) ) (!  (=> (and (and (= (type $h@@35) (MapType0Type refType MapType1Type)) (= (type $o@@23) refType)) (and ($IsGoodHeap $h@@35) (and (not (= $o@@23 null)) (= (dtype $o@@23) Tclass.LruImpl.LruImplQueue?)))) ($Is (MapType1Select (MapType0Select $h@@35 $o@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node))) :qid |DafnyPre.521:12| :skolemid |965| :pattern ( (MapType1Select (MapType0Select $h@@35 $o@@23) LruImpl.LruImplQueue.nodemap)) )))
(assert (forall (($h@@36 T@U) ($o@@24 T@U) ) (!  (=> (and (= (type $h@@36) (MapType0Type refType MapType1Type)) (= (type $o@@24) refType)) (=> (and (and ($IsGoodHeap $h@@36) (and (not (= $o@@24 null)) (= (dtype $o@@24) Tclass.LruImpl.LruImplQueue?))) (U_2_bool (MapType1Select (MapType0Select $h@@36 $o@@24) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@36 $o@@24) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $h@@36))) :qid |DafnyPre.521:12| :skolemid |966| :pattern ( (MapType1Select (MapType0Select $h@@36 $o@@24) LruImpl.LruImplQueue.nodemap)) )))
(assert (= (type LruImpl.LruImplQueue.head__node) (FieldType refType)))
(assert (= (FDim LruImpl.LruImplQueue.head__node) 0))
(assert (= (FieldOfDecl refType class.LruImpl.LruImplQueue? field$head_node) LruImpl.LruImplQueue.head__node))
(assert  (not ($IsGhostField LruImpl.LruImplQueue.head__node)))
(assert (forall (($h@@37 T@U) ($o@@25 T@U) ) (!  (=> (and (and (= (type $h@@37) (MapType0Type refType MapType1Type)) (= (type $o@@25) refType)) (and ($IsGoodHeap $h@@37) (and (not (= $o@@25 null)) (= (dtype $o@@25) Tclass.LruImpl.LruImplQueue?)))) ($Is (MapType1Select (MapType0Select $h@@37 $o@@25) LruImpl.LruImplQueue.head__node) Tclass.LruImpl.Node?)) :qid |DafnyPre.521:12| :skolemid |967| :pattern ( (MapType1Select (MapType0Select $h@@37 $o@@25) LruImpl.LruImplQueue.head__node)) )))
(assert (forall (($h@@38 T@U) ($o@@26 T@U) ) (!  (=> (and (= (type $h@@38) (MapType0Type refType MapType1Type)) (= (type $o@@26) refType)) (=> (and (and ($IsGoodHeap $h@@38) (and (not (= $o@@26 null)) (= (dtype $o@@26) Tclass.LruImpl.LruImplQueue?))) (U_2_bool (MapType1Select (MapType0Select $h@@38 $o@@26) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@38 $o@@26) LruImpl.LruImplQueue.head__node) Tclass.LruImpl.Node? $h@@38))) :qid |DafnyPre.521:12| :skolemid |968| :pattern ( (MapType1Select (MapType0Select $h@@38 $o@@26) LruImpl.LruImplQueue.head__node)) )))
(assert (= (type LruImpl.LruImplQueue.tail__node) (FieldType refType)))
(assert (= (FDim LruImpl.LruImplQueue.tail__node) 0))
(assert (= (FieldOfDecl refType class.LruImpl.LruImplQueue? field$tail_node) LruImpl.LruImplQueue.tail__node))
(assert  (not ($IsGhostField LruImpl.LruImplQueue.tail__node)))
(assert (forall (($h@@39 T@U) ($o@@27 T@U) ) (!  (=> (and (and (= (type $h@@39) (MapType0Type refType MapType1Type)) (= (type $o@@27) refType)) (and ($IsGoodHeap $h@@39) (and (not (= $o@@27 null)) (= (dtype $o@@27) Tclass.LruImpl.LruImplQueue?)))) ($Is (MapType1Select (MapType0Select $h@@39 $o@@27) LruImpl.LruImplQueue.tail__node) Tclass.LruImpl.Node?)) :qid |DafnyPre.521:12| :skolemid |969| :pattern ( (MapType1Select (MapType0Select $h@@39 $o@@27) LruImpl.LruImplQueue.tail__node)) )))
(assert (forall (($h@@40 T@U) ($o@@28 T@U) ) (!  (=> (and (= (type $h@@40) (MapType0Type refType MapType1Type)) (= (type $o@@28) refType)) (=> (and (and ($IsGoodHeap $h@@40) (and (not (= $o@@28 null)) (= (dtype $o@@28) Tclass.LruImpl.LruImplQueue?))) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@28) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@40 $o@@28) LruImpl.LruImplQueue.tail__node) Tclass.LruImpl.Node? $h@@40))) :qid |DafnyPre.521:12| :skolemid |970| :pattern ( (MapType1Select (MapType0Select $h@@40 $o@@28) LruImpl.LruImplQueue.tail__node)) )))
(assert (= (type Tclass.LruImpl.LruImplQueue) TyType))
(assert (= (Tag Tclass.LruImpl.LruImplQueue) Tagclass.LruImpl.LruImplQueue))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.LruImpl.LruImplQueue)) (and (= ($Box ($Unbox refType bx@@82)) bx@@82) ($Is ($Unbox refType bx@@82) Tclass.LruImpl.LruImplQueue))) :qid |unknown.0:0| :skolemid |972| :pattern ( ($IsBox bx@@82 Tclass.LruImpl.LruImplQueue)) )))
(assert (forall (($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (= (type $h0) (MapType0Type refType MapType1Type)) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type this) refType)) (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (not (= this null)) ($Is this Tclass.LruImpl.LruImplQueue))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@29 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@29) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@29 null)) (or (= $o@@29 this) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0 this) LruImpl.LruImplQueue.Repr) ($Box $o@@29)))))) (= (MapType1Select (MapType0Select $h0 $o@@29) $f) (MapType1Select (MapType0Select $h1 $o@@29) $f)))) :qid |unknown.0:0| :skolemid |971| :no-pattern (type $o@@29) :no-pattern (type $f) :no-pattern (U_2_int $o@@29) :no-pattern (U_2_bool $o@@29) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) )) (and (=> (LruImpl.LruImplQueue.Inv $h0 this) (LruImpl.LruImplQueue.Inv $h1 this)) (=> (LruImpl.LruImplQueue.Inv $h1 this) (LruImpl.LruImplQueue.Inv $h0 this)))))) :qid |DafnyPre.521:12| :skolemid |973| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (LruImpl.LruImplQueue.Inv $h1 this)) )))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (this@@0 T@U) ) (!  (=> (and (and (= (type $Heap) (MapType0Type refType MapType1Type)) (= (type this@@0) refType)) (or (|LruImpl.LruImplQueue.Inv#canCall| $Heap this@@0) (and (not (= 2 $FunctionContextHeight)) (and ($IsGoodHeap $Heap) (and (not (= this@@0 null)) (and ($Is this@@0 Tclass.LruImpl.LruImplQueue) ($IsAlloc this@@0 Tclass.LruImpl.LruImplQueue $Heap))))))) (and (=> (LruImpl.LruImplQueue.Inv $Heap this@@0) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap this@@0) LruImpl.LruImplQueue.Repr) ($Box this@@0)))) (=> (LruImpl.LruImplQueue.Inv $Heap this@@0) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap this@@0) LruImpl.LruImplQueue.Queue))))) :qid |LruImpli.85:25| :skolemid |974| :pattern ( (LruImpl.LruImplQueue.Inv $Heap this@@0)) ))))
(assert (forall (($Heap@@0 T@U) (this@@1 T@U) ) (!  (=> (and (and (= (type $Heap@@0) (MapType0Type refType MapType1Type)) (= (type this@@1) refType)) (and ($IsGoodHeap $Heap@@0) (and (not (= this@@1 null)) (and ($Is this@@1 Tclass.LruImpl.LruImplQueue) ($IsAlloc this@@1 Tclass.LruImpl.LruImplQueue $Heap@@0))))) (and (=> (|LruImpl.LruImplQueue.Inv#requires| $Heap@@0 this@@1) true) (=> true (|LruImpl.LruImplQueue.Inv#requires| $Heap@@0 this@@1)))) :qid |LruImpli.85:25| :skolemid |975| :pattern ( (|LruImpl.LruImplQueue.Inv#requires| $Heap@@0 this@@1)) )))
(assert (= (type MutableMap.ResizingHashMap.Repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim MutableMap.ResizingHashMap.Repr) 0))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.MutableMap.ResizingHashMap? field$Repr) MutableMap.ResizingHashMap.Repr))
(assert ($IsGhostField MutableMap.ResizingHashMap.Repr))
(assert  (and (forall ((arg0@@219 T@U) (arg1@@105 T@U) (arg2@@61 T@U) ) (! (= (type (MutableMap.ResizingHashMap.I arg0@@219 arg1@@105 arg2@@61)) DatatypeTypeType) :qid |funType:MutableMap.ResizingHashMap.I| :pattern ( (MutableMap.ResizingHashMap.I arg0@@219 arg1@@105 arg2@@61)) )) (forall ((arg0@@220 T@U) ) (! (= (type (MutableMapModel.LinearHashMap.contents arg0@@220)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.LinearHashMap.contents| :pattern ( (MutableMapModel.LinearHashMap.contents arg0@@220)) ))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@2 T@U) ) (!  (=> (and (and (= (type $Heap@@1) (MapType0Type refType MapType1Type)) (= (type this@@2) refType)) (or (|LruImpl.LruImplQueue.Inv#canCall| $Heap@@1 this@@2) (and (not (= 2 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@1) (and (not (= this@@2 null)) (and ($Is this@@2 Tclass.LruImpl.LruImplQueue) ($IsAlloc this@@2 Tclass.LruImpl.LruImplQueue $Heap@@1))))))) (and (and (and (and (and (and (and (and (and (and (and (and (=> (|Set#Subset| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr)) (|MutableMap.ResizingHashMap.Inv#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (=> (and (|MutableMap.ResizingHashMap.Inv#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@2)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr))) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (=> (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) null) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))))) (=> (and (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (=> (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) null) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) null) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) null)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType))))) (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))) :qid |LruImpli.101:18| :skolemid |976| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0|))) )))) (=> (and (forall ((|i#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))) :qid |LruImpli.101:18| :skolemid |977| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@0|))) )) (forall ((|i#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@1|)))) :qid |LruImpli.101:18| :skolemid |978| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@1|))) ))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (forall ((|ref#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#0|) (< |ref#0| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#0|))))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#0|)))) :qid |LruImpli.102:18| :skolemid |980| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#0|)))) ))) (forall ((|ref#1| T@U) ) (!  (=> (= (type |ref#1|) intType) (=> (and (<= (LitInt 0) (U_2_int |ref#1|)) (< (U_2_int |ref#1|) 18446744073709551616)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1|))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))))) :qid |LruImpli.103:18| :skolemid |979| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1|))) )))) (=> (and (forall ((|ref#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |ref#1@@0|) (< |ref#1@@0| 18446744073709551616)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@0|)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) :qid |LruImpli.103:18| :skolemid |981| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@0|)))) )) (forall ((|ref#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#1@@1|) (< |ref#1@@1| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@1|))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@1|))))) LruImpl.Node.value)) |ref#1@@1|)) :qid |LruImpli.103:18| :skolemid |982| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@1|)))) ))) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (=> (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)))))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))))) (=> (and (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (=> (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)))))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)))))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)))) (forall ((|i#1| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#1| 1)) (=> (< |i#1| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) :qid |LruImpli.110:18| :skolemid |983| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1|))) )))) (=> (and (forall ((|i#1@@0| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |i#1@@0| 1)) (=> (< |i#1@@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) :qid |LruImpli.110:18| :skolemid |985| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@0|))) )) (forall ((|i#1@@1| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |i#1@@1| 1)) (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@1|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@1|)))))) :qid |LruImpli.110:18| :skolemid |986| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@1|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@1|))) ))) (forall ((|i#2| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#2| 1)) (=> (< |i#2| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) :qid |LruImpli.112:18| :skolemid |984| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2|))) )))) (=> (and (forall ((|i#2@@0| Int) (|_t#0#1@@0| Int) ) (!  (=> (= |_t#0#1@@0| (+ |i#2@@0| 1)) (=> (< |i#2@@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) :qid |LruImpli.112:18| :skolemid |987| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@0|))) )) (forall ((|i#2@@1| Int) (|_t#0#1@@1| Int) ) (!  (=> (= |_t#0#1@@1| (+ |i#2@@1| 1)) (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@1|))) (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@1|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |988| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@1|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@1|))) ))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (|LruModel.__default.WF#canCall| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (and (=> (LruImpl.LruImplQueue.Inv $Heap@@1 this@@2) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr) ($Box (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Set#Subset| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr))) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr) (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@2)) (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@2))))) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr))) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) null) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) null)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType))))) (forall ((|i#0@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@2|)))) :qid |LruImpli.101:18| :skolemid |989| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@2|))) ))) (forall ((|ref#0@@0| T@U) ) (!  (=> (= (type |ref#0@@0|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#0@@0|)) (< (U_2_int |ref#0@@0|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#0@@0|)))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box |ref#0@@0|)))) :qid |LruImpli.102:18| :skolemid |990| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box |ref#0@@0|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#0@@0|))) ))) (forall ((|ref#1@@2| T@U) ) (!  (=> (= (type |ref#1@@2|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#1@@2|)) (< (U_2_int |ref#1@@2|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@2|)))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@2|)))) LruImpl.Node.value)) (U_2_int |ref#1@@2|)))) :qid |LruImpli.103:18| :skolemid |991| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@2|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@2|))) ))) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)))))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)))) (forall ((|i#1@@2| Int) (|_t#0#0@@2| Int) ) (!  (=> (= |_t#0#0@@2| (+ |i#1@@2| 1)) (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@2|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@2|)))))) :qid |LruImpli.110:18| :skolemid |992| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@2|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@2|))) ))) (forall ((|i#2@@2| Int) (|_t#0#1@@2| Int) ) (!  (=> (= |_t#0#1@@2| (+ |i#2@@2| 1)) (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@2|))) (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@2|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |993| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@2|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@2|))) ))) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr) ($Box (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Set#Subset| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr))) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Repr) (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@2)) (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))))))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@2))))) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr))) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) null) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) null)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType))))) (forall ((|i#0@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@3|)))) :qid |LruImpli.101:18| :skolemid |989| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#0@@3|))) ))) (forall ((|ref#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#0@@1|) (< |ref#0@@1| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#0@@1|))))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#0@@1|)))) :qid |LruImpli.102:18| :skolemid |990| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#0@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#0@@1|)))) ))) (forall ((|ref#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#1@@3|) (< |ref#1@@3| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@3|))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@3|))))) LruImpl.Node.value)) |ref#1@@3|)) :qid |LruImpli.103:18| :skolemid |991| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@3|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#1@@3|)))) ))) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (= (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1)))))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)))) (forall ((|i#1@@3| Int) (|_t#0#0@@3| Int) ) (!  (=> (= |_t#0#0@@3| (+ |i#1@@3| 1)) (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@3|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@3|)))))) :qid |LruImpli.110:18| :skolemid |992| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#0@@3|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#1@@3|))) ))) (forall ((|i#2@@3| Int) (|_t#0#1@@3| Int) ) (!  (=> (= |_t#0#1@@3| (+ |i#2@@3| 1)) (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@3|))) (MapType1Select (MapType0Select $Heap@@1 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@3|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |993| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |_t#0#1@@3|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue) |i#2@@3|))) ))) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@1 (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.nodemap)))))) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap@@1 this@@2) LruImpl.LruImplQueue.Queue))) (LruImpl.LruImplQueue.Inv $Heap@@1 this@@2))))) :qid |LruImpli.85:25| :skolemid |994| :pattern ( (LruImpl.LruImplQueue.Inv $Heap@@1 this@@2)) ))))
(assert (= (type MutableMap.ResizingHashMap.Contents) (FieldType (MapType BoxType BoxType))))
(assert (= (FDim MutableMap.ResizingHashMap.Contents) 0))
(assert (= (FieldOfDecl (MapType BoxType BoxType) class.MutableMap.ResizingHashMap? field$Contents) MutableMap.ResizingHashMap.Contents))
(assert ($IsGhostField MutableMap.ResizingHashMap.Contents))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass.Options.Option arg0@@221)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@221)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@222)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@222)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@83 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@83) BoxType)) ($IsBox bx@@83 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@83)) bx@@83) ($Is ($Unbox DatatypeTypeType bx@@83) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsBox bx@@83 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type MutableMap.ResizingHashMap.Count) (FieldType intType)))
(assert (= (FDim MutableMap.ResizingHashMap.Count) 0))
(assert (= (FieldOfDecl intType class.MutableMap.ResizingHashMap? field$Count) MutableMap.ResizingHashMap.Count))
(assert  (not ($IsGhostField MutableMap.ResizingHashMap.Count)))
(assert (= (type Tclass.DebugAccumulator.AccRec) TyType))
(assert (= (Tag Tclass.DebugAccumulator.AccRec) Tagclass.DebugAccumulator.AccRec))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.DebugAccumulator.AccRec)) (and (= ($Box ($Unbox refType bx@@84)) bx@@84) ($Is ($Unbox refType bx@@84) Tclass.DebugAccumulator.AccRec))) :qid |unknown.0:0| :skolemid |1191| :pattern ( ($IsBox bx@@84 Tclass.DebugAccumulator.AccRec)) )))
(assert (forall ((|c#0@@5| T@U) ) (!  (=> (= (type |c#0@@5|) refType) (and (=> ($Is |c#0@@5| Tclass.LruImpl.LruImplQueue) (and ($Is |c#0@@5| Tclass.LruImpl.LruImplQueue?) (not (= |c#0@@5| null)))) (=> (and ($Is |c#0@@5| Tclass.LruImpl.LruImplQueue?) (not (= |c#0@@5| null))) ($Is |c#0@@5| Tclass.LruImpl.LruImplQueue)))) :qid |unknown.0:0| :skolemid |1198| :pattern ( ($Is |c#0@@5| Tclass.LruImpl.LruImplQueue)) )))
(assert (forall ((|c#0@@6| T@U) ($h@@41 T@U) ) (!  (=> (and (= (type |c#0@@6|) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@6| Tclass.LruImpl.LruImplQueue $h@@41) ($IsAlloc |c#0@@6| Tclass.LruImpl.LruImplQueue? $h@@41)) (=> ($IsAlloc |c#0@@6| Tclass.LruImpl.LruImplQueue? $h@@41) ($IsAlloc |c#0@@6| Tclass.LruImpl.LruImplQueue $h@@41)))) :qid |unknown.0:0| :skolemid |1199| :pattern ( ($IsAlloc |c#0@@6| Tclass.LruImpl.LruImplQueue $h@@41)) )))
(assert (= (type Tclass.LruImpl.__default) TyType))
(assert (= (Tag Tclass.LruImpl.__default) Tagclass.LruImpl.__default))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.LruImpl.__default)) (and (= ($Box ($Unbox refType bx@@85)) bx@@85) ($Is ($Unbox refType bx@@85) Tclass.LruImpl.__default))) :qid |unknown.0:0| :skolemid |1200| :pattern ( ($IsBox bx@@85 Tclass.LruImpl.__default)) )))
(assert (forall (($o@@30 T@U) ) (!  (=> (= (type $o@@30) refType) (and (=> ($Is $o@@30 Tclass.LruImpl.__default) (or (= $o@@30 null) (= (dtype $o@@30) Tclass.LruImpl.__default))) (=> (or (= $o@@30 null) (= (dtype $o@@30) Tclass.LruImpl.__default)) ($Is $o@@30 Tclass.LruImpl.__default)))) :qid |unknown.0:0| :skolemid |1201| :pattern ( ($Is $o@@30 Tclass.LruImpl.__default)) )))
(assert (forall (($o@@31 T@U) ($h@@42 T@U) ) (!  (=> (and (= (type $o@@31) refType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@31 Tclass.LruImpl.__default $h@@42) (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@31) alloc)))) (=> (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@31) alloc))) ($IsAlloc $o@@31 Tclass.LruImpl.__default $h@@42)))) :qid |unknown.0:0| :skolemid |1202| :pattern ( ($IsAlloc $o@@31 Tclass.LruImpl.__default $h@@42)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1210| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@4| T@U) ) (!  (=> (= (type |i#0@@4|) intType) (and (=> ($Is |i#0@@4| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 128)) ($Is |i#0@@4| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1211| :pattern ( ($Is |i#0@@4| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@5| T@U) ($h@@43 T@U) ) (!  (=> (and (= (type |i#0@@5|) intType) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@5| Tclass.NativeTypes.sbyte $h@@43)) :qid |unknown.0:0| :skolemid |1212| :pattern ( ($IsAlloc |i#0@@5| Tclass.NativeTypes.sbyte $h@@43)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1213| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@6| T@U) ) (!  (=> (= (type |i#0@@6|) intType) (and (=> ($Is |i#0@@6| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 256)) ($Is |i#0@@6| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1214| :pattern ( ($Is |i#0@@6| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@7| T@U) ($h@@44 T@U) ) (!  (=> (and (= (type |i#0@@7|) intType) (= (type $h@@44) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@7| Tclass.NativeTypes.byte $h@@44)) :qid |unknown.0:0| :skolemid |1215| :pattern ( ($IsAlloc |i#0@@7| Tclass.NativeTypes.byte $h@@44)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1216| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@8| T@U) ) (!  (=> (= (type |i#0@@8|) intType) (and (=> ($Is |i#0@@8| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 32768)) ($Is |i#0@@8| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1217| :pattern ( ($Is |i#0@@8| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@9| T@U) ($h@@45 T@U) ) (!  (=> (and (= (type |i#0@@9|) intType) (= (type $h@@45) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@9| Tclass.NativeTypes.int16 $h@@45)) :qid |unknown.0:0| :skolemid |1218| :pattern ( ($IsAlloc |i#0@@9| Tclass.NativeTypes.int16 $h@@45)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1219| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@10| T@U) ) (!  (=> (= (type |i#0@@10|) intType) (and (=> ($Is |i#0@@10| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 65536)) ($Is |i#0@@10| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1220| :pattern ( ($Is |i#0@@10| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@11| T@U) ($h@@46 T@U) ) (!  (=> (and (= (type |i#0@@11|) intType) (= (type $h@@46) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@11| Tclass.NativeTypes.uint16 $h@@46)) :qid |unknown.0:0| :skolemid |1221| :pattern ( ($IsAlloc |i#0@@11| Tclass.NativeTypes.uint16 $h@@46)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1222| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@12| T@U) ) (!  (=> (= (type |i#0@@12|) intType) (and (=> ($Is |i#0@@12| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 2147483648)) ($Is |i#0@@12| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1223| :pattern ( ($Is |i#0@@12| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@13| T@U) ($h@@47 T@U) ) (!  (=> (and (= (type |i#0@@13|) intType) (= (type $h@@47) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@13| Tclass.NativeTypes.int32 $h@@47)) :qid |unknown.0:0| :skolemid |1224| :pattern ( ($IsAlloc |i#0@@13| Tclass.NativeTypes.int32 $h@@47)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1225| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@14| T@U) ) (!  (=> (= (type |i#0@@14|) intType) (and (=> ($Is |i#0@@14| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 4294967296)) ($Is |i#0@@14| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1226| :pattern ( ($Is |i#0@@14| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@15| T@U) ($h@@48 T@U) ) (!  (=> (and (= (type |i#0@@15|) intType) (= (type $h@@48) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@15| Tclass.NativeTypes.uint32 $h@@48)) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($IsAlloc |i#0@@15| Tclass.NativeTypes.uint32 $h@@48)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1228| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@16| T@U) ) (!  (=> (= (type |i#0@@16|) intType) (and (=> ($Is |i#0@@16| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 9223372036854775808)) ($Is |i#0@@16| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1229| :pattern ( ($Is |i#0@@16| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@17| T@U) ($h@@49 T@U) ) (!  (=> (and (= (type |i#0@@17|) intType) (= (type $h@@49) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@17| Tclass.NativeTypes.int64 $h@@49)) :qid |unknown.0:0| :skolemid |1230| :pattern ( ($IsAlloc |i#0@@17| Tclass.NativeTypes.int64 $h@@49)) )))
(assert (forall ((|i#0@@18| T@U) ) (!  (=> (= (type |i#0@@18|) intType) (and (=> ($Is |i#0@@18| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 18446744073709551616)) ($Is |i#0@@18| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1231| :pattern ( ($Is |i#0@@18| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@19| T@U) ($h@@50 T@U) ) (!  (=> (and (= (type |i#0@@19|) intType) (= (type $h@@50) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@19| Tclass.NativeTypes.uint64 $h@@50)) :qid |unknown.0:0| :skolemid |1232| :pattern ( ($IsAlloc |i#0@@19| Tclass.NativeTypes.uint64 $h@@50)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@93)) bx@@93) ($Is ($Unbox intType bx@@93) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1233| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@20| T@U) ) (!  (=> (= (type |i#0@@20|) intType) (and (=> ($Is |i#0@@20| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 128)) ($Is |i#0@@20| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($Is |i#0@@20| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@21| T@U) ($h@@51 T@U) ) (!  (=> (and (= (type |i#0@@21|) intType) (= (type $h@@51) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat8 $h@@51)) :qid |unknown.0:0| :skolemid |1235| :pattern ( ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat8 $h@@51)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@94)) bx@@94) ($Is ($Unbox intType bx@@94) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1236| :pattern ( ($IsBox bx@@94 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@22| T@U) ) (!  (=> (= (type |i#0@@22|) intType) (and (=> ($Is |i#0@@22| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 32768)) ($Is |i#0@@22| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1237| :pattern ( ($Is |i#0@@22| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@23| T@U) ($h@@52 T@U) ) (!  (=> (and (= (type |i#0@@23|) intType) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat16 $h@@52)) :qid |unknown.0:0| :skolemid |1238| :pattern ( ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat16 $h@@52)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@95)) bx@@95) ($Is ($Unbox intType bx@@95) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1239| :pattern ( ($IsBox bx@@95 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@24| T@U) ) (!  (=> (= (type |i#0@@24|) intType) (and (=> ($Is |i#0@@24| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 2147483648)) ($Is |i#0@@24| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1240| :pattern ( ($Is |i#0@@24| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@25| T@U) ($h@@53 T@U) ) (!  (=> (and (= (type |i#0@@25|) intType) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat32 $h@@53)) :qid |unknown.0:0| :skolemid |1241| :pattern ( ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat32 $h@@53)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@96)) bx@@96) ($Is ($Unbox intType bx@@96) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1242| :pattern ( ($IsBox bx@@96 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@26| T@U) ) (!  (=> (= (type |i#0@@26|) intType) (and (=> ($Is |i#0@@26| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@26|)) (< (U_2_int |i#0@@26|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@26|)) (< (U_2_int |i#0@@26|) 9223372036854775808)) ($Is |i#0@@26| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1243| :pattern ( ($Is |i#0@@26| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@27| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@27|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@27| Tclass.NativeTypes.nat64 $h@@54)) :qid |unknown.0:0| :skolemid |1244| :pattern ( ($IsAlloc |i#0@@27| Tclass.NativeTypes.nat64 $h@@54)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@97)) bx@@97) ($Is ($Unbox refType bx@@97) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsBox bx@@97 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.NativeTypes.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.NativeTypes.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.NativeTypes.__default)) ($Is $o@@32 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1246| :pattern ( ($Is $o@@32 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@55 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.NativeTypes.__default $h@@55) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.NativeTypes.__default $h@@55)))) :qid |unknown.0:0| :skolemid |1247| :pattern ( ($IsAlloc $o@@33 Tclass.NativeTypes.__default $h@@55)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.DebugAccumulator.AccRec?) TyType))
(assert (= (Tag Tclass.DebugAccumulator.AccRec?) Tagclass.DebugAccumulator.AccRec?))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.DebugAccumulator.AccRec?)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.DebugAccumulator.AccRec?))) :qid |unknown.0:0| :skolemid |1248| :pattern ( ($IsBox bx@@98 Tclass.DebugAccumulator.AccRec?)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.DebugAccumulator.AccRec?) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.DebugAccumulator.AccRec?))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.DebugAccumulator.AccRec?)) ($Is $o@@34 Tclass.DebugAccumulator.AccRec?)))) :qid |unknown.0:0| :skolemid |1249| :pattern ( ($Is $o@@34 Tclass.DebugAccumulator.AccRec?)) )))
(assert (forall (($o@@35 T@U) ($h@@56 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.DebugAccumulator.AccRec? $h@@56) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.DebugAccumulator.AccRec? $h@@56)))) :qid |unknown.0:0| :skolemid |1250| :pattern ( ($IsAlloc $o@@35 Tclass.DebugAccumulator.AccRec? $h@@56)) )))
(assert (= (type DebugAccumulator.AccRec.key) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.key) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$key) DebugAccumulator.AccRec.key))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.key)))
(assert (forall (($h@@57 T@U) ($o@@36 T@U) ) (!  (=> (and (and (= (type $h@@57) (MapType0Type refType MapType1Type)) (= (type $o@@36) refType)) (and ($IsGoodHeap $h@@57) (and (not (= $o@@36 null)) (= (dtype $o@@36) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@57 $o@@36) DebugAccumulator.AccRec.key) (TSeq TChar))) :qid |DafnyPre.521:12| :skolemid |1251| :pattern ( (MapType1Select (MapType0Select $h@@57 $o@@36) DebugAccumulator.AccRec.key)) )))
(assert (forall (($h@@58 T@U) ($o@@37 T@U) ) (!  (=> (and (= (type $h@@58) (MapType0Type refType MapType1Type)) (= (type $o@@37) refType)) (=> (and (and ($IsGoodHeap $h@@58) (and (not (= $o@@37 null)) (= (dtype $o@@37) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@37) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@58 $o@@37) DebugAccumulator.AccRec.key) (TSeq TChar) $h@@58))) :qid |DafnyPre.521:12| :skolemid |1252| :pattern ( (MapType1Select (MapType0Select $h@@58 $o@@37) DebugAccumulator.AccRec.key)) )))
(assert (= (type DebugAccumulator.AccRec.count) (FieldType intType)))
(assert (= (FDim DebugAccumulator.AccRec.count) 0))
(assert (= (FieldOfDecl intType class.DebugAccumulator.AccRec? field$count) DebugAccumulator.AccRec.count))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.count)))
(assert (forall (($h@@59 T@U) ($o@@38 T@U) ) (!  (=> (and (and (= (type $h@@59) (MapType0Type refType MapType1Type)) (= (type $o@@38) refType)) (and ($IsGoodHeap $h@@59) (and (not (= $o@@38 null)) (= (dtype $o@@38) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@59 $o@@38) DebugAccumulator.AccRec.count) Tclass.NativeTypes.uint64)) :qid |DafnyPre.521:12| :skolemid |1253| :pattern ( (MapType1Select (MapType0Select $h@@59 $o@@38) DebugAccumulator.AccRec.count)) )))
(assert (forall (($h@@60 T@U) ($o@@39 T@U) ) (!  (=> (and (= (type $h@@60) (MapType0Type refType MapType1Type)) (= (type $o@@39) refType)) (=> (and (and ($IsGoodHeap $h@@60) (and (not (= $o@@39 null)) (= (dtype $o@@39) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@60 $o@@39) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@60 $o@@39) DebugAccumulator.AccRec.count) Tclass.NativeTypes.uint64 $h@@60))) :qid |DafnyPre.521:12| :skolemid |1254| :pattern ( (MapType1Select (MapType0Select $h@@60 $o@@39) DebugAccumulator.AccRec.count)) )))
(assert (= (type DebugAccumulator.AccRec.unit) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.unit) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$unit) DebugAccumulator.AccRec.unit))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.unit)))
(assert (forall (($h@@61 T@U) ($o@@40 T@U) ) (!  (=> (and (and (= (type $h@@61) (MapType0Type refType MapType1Type)) (= (type $o@@40) refType)) (and ($IsGoodHeap $h@@61) (and (not (= $o@@40 null)) (= (dtype $o@@40) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@61 $o@@40) DebugAccumulator.AccRec.unit) (TSeq TChar))) :qid |DafnyPre.521:12| :skolemid |1255| :pattern ( (MapType1Select (MapType0Select $h@@61 $o@@40) DebugAccumulator.AccRec.unit)) )))
(assert (forall (($h@@62 T@U) ($o@@41 T@U) ) (!  (=> (and (= (type $h@@62) (MapType0Type refType MapType1Type)) (= (type $o@@41) refType)) (=> (and (and ($IsGoodHeap $h@@62) (and (not (= $o@@41 null)) (= (dtype $o@@41) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@41) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@62 $o@@41) DebugAccumulator.AccRec.unit) (TSeq TChar) $h@@62))) :qid |DafnyPre.521:12| :skolemid |1256| :pattern ( (MapType1Select (MapType0Select $h@@62 $o@@41) DebugAccumulator.AccRec.unit)) )))
(assert (= (type DebugAccumulator.AccRec.index) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.index) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$index) DebugAccumulator.AccRec.index))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.index)))
(assert (forall (($h@@63 T@U) ($o@@42 T@U) ) (!  (=> (and (and (= (type $h@@63) (MapType0Type refType MapType1Type)) (= (type $o@@42) refType)) (and ($IsGoodHeap $h@@63) (and (not (= $o@@42 null)) (= (dtype $o@@42) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@63 $o@@42) DebugAccumulator.AccRec.index) (TSeq Tclass.DebugAccumulator.AccRec))) :qid |DafnyPre.521:12| :skolemid |1257| :pattern ( (MapType1Select (MapType0Select $h@@63 $o@@42) DebugAccumulator.AccRec.index)) )))
(assert (forall (($h@@64 T@U) ($o@@43 T@U) ) (!  (=> (and (= (type $h@@64) (MapType0Type refType MapType1Type)) (= (type $o@@43) refType)) (=> (and (and ($IsGoodHeap $h@@64) (and (not (= $o@@43 null)) (= (dtype $o@@43) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@64 $o@@43) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@64 $o@@43) DebugAccumulator.AccRec.index) (TSeq Tclass.DebugAccumulator.AccRec) $h@@64))) :qid |DafnyPre.521:12| :skolemid |1258| :pattern ( (MapType1Select (MapType0Select $h@@64 $o@@43) DebugAccumulator.AccRec.index)) )))
(assert (forall ((|c#0@@7| T@U) ) (!  (=> (= (type |c#0@@7|) refType) (and (=> ($Is |c#0@@7| Tclass.DebugAccumulator.AccRec) (and ($Is |c#0@@7| Tclass.DebugAccumulator.AccRec?) (not (= |c#0@@7| null)))) (=> (and ($Is |c#0@@7| Tclass.DebugAccumulator.AccRec?) (not (= |c#0@@7| null))) ($Is |c#0@@7| Tclass.DebugAccumulator.AccRec)))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($Is |c#0@@7| Tclass.DebugAccumulator.AccRec)) )))
(assert (forall ((|c#0@@8| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |c#0@@8|) refType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@8| Tclass.DebugAccumulator.AccRec $h@@65) ($IsAlloc |c#0@@8| Tclass.DebugAccumulator.AccRec? $h@@65)) (=> ($IsAlloc |c#0@@8| Tclass.DebugAccumulator.AccRec? $h@@65) ($IsAlloc |c#0@@8| Tclass.DebugAccumulator.AccRec $h@@65)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($IsAlloc |c#0@@8| Tclass.DebugAccumulator.AccRec $h@@65)) )))
(assert (= (type Tclass.DebugAccumulator.__default) TyType))
(assert (= (Tag Tclass.DebugAccumulator.__default) Tagclass.DebugAccumulator.__default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.DebugAccumulator.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.DebugAccumulator.__default))) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($IsBox bx@@99 Tclass.DebugAccumulator.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (and (=> ($Is $o@@44 Tclass.DebugAccumulator.__default) (or (= $o@@44 null) (= (dtype $o@@44) Tclass.DebugAccumulator.__default))) (=> (or (= $o@@44 null) (= (dtype $o@@44) Tclass.DebugAccumulator.__default)) ($Is $o@@44 Tclass.DebugAccumulator.__default)))) :qid |unknown.0:0| :skolemid |1263| :pattern ( ($Is $o@@44 Tclass.DebugAccumulator.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@66 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@45 Tclass.DebugAccumulator.__default $h@@66) (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@45) alloc)))) (=> (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@45) alloc))) ($IsAlloc $o@@45 Tclass.DebugAccumulator.__default $h@@66)))) :qid |unknown.0:0| :skolemid |1264| :pattern ( ($IsAlloc $o@@45 Tclass.DebugAccumulator.__default $h@@66)) )))
(assert (= (type DebugAccumulator.__default.EmptyAccumulator) (SeqType BoxType)))
(assert  (=> true (=> true ($Is DebugAccumulator.__default.EmptyAccumulator (TSeq Tclass.DebugAccumulator.AccRec)))))
(assert  (=> |DebugAccumulator.__default.EmptyAccumulator#requires| true))
(assert  (=> true |DebugAccumulator.__default.EmptyAccumulator#requires|))
(assert  (=> true (=> true (= DebugAccumulator.__default.EmptyAccumulator (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= DebugAccumulator.__default.EmptyAccumulator (Lit (|Seq#Empty| BoxType))))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (Options.Option.None_q d@@10) (= (DatatypeCtorId d@@10) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@10) |##Options.Option.None|) (Options.Option.None_q d@@10)))) :qid |unknown.0:0| :skolemid |1266| :pattern ( (Options.Option.None_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (Options.Option.None_q d@@11)) (= d@@11 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1267| :pattern ( (Options.Option.None_q d@@11)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1268| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@67 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@67)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@67)) :qid |unknown.0:0| :skolemid |1269| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@67)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@223)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@223)) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |1270| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@12) (= (DatatypeCtorId d@@12) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@12) |##Options.Option.Some|) (Options.Option.Some_q d@@12)))) :qid |unknown.0:0| :skolemid |1271| :pattern ( (Options.Option.Some_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (Options.Option.Some_q d@@13)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@13 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |1272| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1273| :pattern ( (Options.Option.Some_q d@@13)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |1274| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@68 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@68)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@68) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@68)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@68) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@68)))) :qid |unknown.0:0| :skolemid |1275| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@68)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Options.Option.value arg0@@224)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@224)) )))
(assert (forall ((d@@14 T@U) (Options.Option$V@@6 T@U) ($h@@69 T@U) ) (!  (=> (and (and (and (= (type d@@14) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@69) (and (Options.Option.Some_q d@@14) ($IsAlloc d@@14 (Tclass.Options.Option Options.Option$V@@6) $h@@69)))) ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@69)) :qid |unknown.0:0| :skolemid |1276| :pattern ( ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@69)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |1277| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |1278| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |1279| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#Options.Option| d@@15)) (or (Options.Option.None_q d@@15) (Options.Option.Some_q d@@15))) :qid |unknown.0:0| :skolemid |1280| :pattern ( (|$IsA#Options.Option| d@@15)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@16 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@16) DatatypeTypeType)) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@16) (Options.Option.Some_q d@@16))) :qid |unknown.0:0| :skolemid |1281| :pattern ( (Options.Option.Some_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@116 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (Options.Option.None_q a@@116) (Options.Option.None_q b@@66))) (and (=> (|Options.Option#Equal| a@@116 b@@66) true) (=> true (|Options.Option#Equal| a@@116 b@@66)))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (|Options.Option#Equal| a@@116 b@@66) (Options.Option.None_q a@@116)) :pattern ( (|Options.Option#Equal| a@@116 b@@66) (Options.Option.None_q b@@66)) )))
(assert (forall ((a@@117 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@117) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.Some_q a@@117) (Options.Option.Some_q b@@67))) (and (=> (|Options.Option#Equal| a@@117 b@@67) (= (Options.Option.value a@@117) (Options.Option.value b@@67))) (=> (= (Options.Option.value a@@117) (Options.Option.value b@@67)) (|Options.Option#Equal| a@@117 b@@67)))) :qid |unknown.0:0| :skolemid |1283| :pattern ( (|Options.Option#Equal| a@@117 b@@67) (Options.Option.Some_q a@@117)) :pattern ( (|Options.Option#Equal| a@@117 b@@67) (Options.Option.Some_q b@@67)) )))
(assert (forall ((a@@118 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@118) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@118 b@@68) (= a@@118 b@@68)) (=> (= a@@118 b@@68) (|Options.Option#Equal| a@@118 b@@68)))) :qid |unknown.0:0| :skolemid |1284| :pattern ( (|Options.Option#Equal| a@@118 b@@68)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@100)) bx@@100) ($Is ($Unbox refType bx@@100) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1285| :pattern ( ($IsBox bx@@100 Tclass.Options.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (and (=> ($Is $o@@46 Tclass.Options.__default) (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Options.__default))) (=> (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Options.__default)) ($Is $o@@46 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1286| :pattern ( ($Is $o@@46 Tclass.Options.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@70 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@47 Tclass.Options.__default $h@@70) (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@47) alloc)))) (=> (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@47) alloc))) ($IsAlloc $o@@47 Tclass.Options.__default $h@@70)))) :qid |unknown.0:0| :skolemid |1287| :pattern ( ($IsAlloc $o@@47 Tclass.Options.__default $h@@70)) )))
(assert (forall ((arg0@@225 T@U) (arg1@@106 T@U) (arg2@@62 T@U) (arg3@@39 T@U) (arg4@@28 T@U) ) (! (= (type (Options.__default.MapOption arg0@@225 arg1@@106 arg2@@62 arg3@@39 arg4@@28)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@225 arg1@@106 arg2@@62 arg3@@39 arg4@@28)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@48 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@48) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@48 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@48))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@48) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@48) $f@@0)))) :qid |unknown.0:0| :skolemid |1288| :no-pattern (type $o@@48) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@48) :no-pattern (U_2_bool $o@@48) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@0 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |1289| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@0 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1290| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |1291| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@22| |v#1|)))))) :qid |unknown.0:0| :skolemid |1292| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@226 T@U) (arg1@@107 T@U) (arg2@@63 T@U) (arg3@@40 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@226 arg1@@107 arg2@@63 arg3@@40 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@226 arg1@@107 arg2@@63 arg3@@40 arg4@@29)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@1 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@49 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@49) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@49 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@1 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@49))))) (= (MapType1Select (MapType0Select $h0@@1 $o@@49) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@49) $f@@1)))) :qid |unknown.0:0| :skolemid |1293| :no-pattern (type $o@@49) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@49) :no-pattern (U_2_bool $o@@49) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@1 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@1 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |1294| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@1 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@5 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1295| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@6 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |1296| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@7 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@26| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |1297| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|)) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1298| :pattern ( ($IsBox bx@@101 Tclass.Sequences.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (and (=> ($Is $o@@50 Tclass.Sequences.__default) (or (= $o@@50 null) (= (dtype $o@@50) Tclass.Sequences.__default))) (=> (or (= $o@@50 null) (= (dtype $o@@50) Tclass.Sequences.__default)) ($Is $o@@50 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1299| :pattern ( ($Is $o@@50 Tclass.Sequences.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@71 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@51 Tclass.Sequences.__default $h@@71) (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@51) alloc)))) (=> (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@51) alloc))) ($IsAlloc $o@@51 Tclass.Sequences.__default $h@@71)))) :qid |unknown.0:0| :skolemid |1300| :pattern ( ($IsAlloc $o@@51 Tclass.Sequences.__default $h@@71)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@108 T@U) ) (! (= (type (Sequences.__default.Last arg0@@227 arg1@@108)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@227 arg1@@108)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1301| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |1302| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1304| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@228 T@U) (arg1@@109 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@228 arg1@@109)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@228 arg1@@109)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1305| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |1306| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1307| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1308| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@229 T@U) (arg1@@110 T@U) ) (! (= (type (Sequences.__default.Set arg0@@229 arg1@@110)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@229 arg1@@110)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1309| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |1310| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@230 T@U) (arg1@@111 T@U) (arg2@@64 Int) ) (! (= (type (|lambda#19| arg0@@230 arg1@@111 arg2@@64)) (MapType0Type BoxType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@230 arg1@@111 arg2@@64)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#19| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |1311| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#19| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1312| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@231 T@U) (arg1@@112 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@231 arg1@@112)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@231 arg1@@112)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1313| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |1314| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#19| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |1315| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#19| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1316| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly) LayerTypeType)) (= (type |a#0@@1|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly) |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly |a#0@@1|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly) |a#0@@1|)))) :qid |unknown.0:0| :skolemid |1317| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly) |a#0@@1|)) )))
(assert  (and (forall ((arg0@@232 T@U) ) (! (= (type (AsFuelBottom arg0@@232)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@232)) )) (= (type $LZ) LayerTypeType)))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@0 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |a#0@@2|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@0 |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@0 |a#0@@2|)))) :qid |unknown.0:0| :skolemid |1318| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@0) |a#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@1 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |a#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@3|) ($Is |a#0@@3| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |1319| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@1 |a#0@@3|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@2 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |a#0@@4|) (SeqType BoxType))) ($Is |a#0@@4| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@2 |a#0@@4|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@2 |a#0@@4|)))) :qid |unknown.0:0| :skolemid |1320| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@2 |a#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@3 T@U) (|a#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |a#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@5|) ($Is |a#0@@5| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@3) |a#0@@5|) (forall ((|i#0@@28| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@5|)))) (not (= |i#0@@28| |j#0|))) (not (= (|Seq#Index| |a#0@@5| |i#0@@28|) (|Seq#Index| |a#0@@5| |j#0|))))) :qid |sequence.54:13| :skolemid |1321| :pattern ( (|Seq#Index| |a#0@@5| |j#0|) (|Seq#Index| |a#0@@5| |i#0@@28|)) ))) (=> (forall ((|i#0@@29| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@5|)))) (not (= |i#0@@29| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@5| |i#0@@29|) (|Seq#Index| |a#0@@5| |j#0@@0|))))) :qid |sequence.54:13| :skolemid |1321| :pattern ( (|Seq#Index| |a#0@@5| |j#0@@0|) (|Seq#Index| |a#0@@5| |i#0@@29|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@3) |a#0@@5|)))) :qid |unknown.0:0| :skolemid |1322| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@3) |a#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@4 T@U) (|a#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |a#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@6|)) ($Is |a#0@@6| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@4) (Lit |a#0@@6|)) (forall ((|i#1@@4| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#1@@4| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#1@@4|) (|Seq#Index| (Lit |a#0@@6|) |j#1|))))) :qid |sequence.54:13| :skolemid |1323| :pattern ( (|Seq#Index| |a#0@@6| |j#1|) (|Seq#Index| |a#0@@6| |i#1@@4|)) ))) (=> (forall ((|i#1@@5| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#1@@5| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#1@@5|) (|Seq#Index| (Lit |a#0@@6|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |1323| :pattern ( (|Seq#Index| |a#0@@6| |j#1@@0|) (|Seq#Index| |a#0@@6| |i#1@@5|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@4) (Lit |a#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |1324| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@4) (Lit |a#0@@6|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1325| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@8 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@0| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |1326| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@8)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |1327| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@9 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@9) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@30| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@30|)))) :qid |unknown.0:0| :skolemid |1328| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@9)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@10 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@6| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |1329| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@10)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@11 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2@@4| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2@@4|)))) :qid |unknown.0:0| :weight 3 :skolemid |1330| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@11)) ))))
(assert (forall ((arg0@@233 T@U) (arg1@@113 Int) ) (! (= (type (Sequences.__default.Range arg0@@233 arg1@@113)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@233 arg1@@113)) )))
(assert (forall (($ly@@5 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@5) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@5) |n#0|) (Sequences.__default.Range $ly@@5 |n#0|))) :qid |sequence.109:22| :skolemid |1331| :pattern ( (Sequences.__default.Range ($LS $ly@@5) |n#0|)) )))
(assert (forall (($ly@@6 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@6) LayerTypeType) (= (Sequences.__default.Range $ly@@6 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |1332| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@6) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@7 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@7) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@7 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@31| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@7 |n#0@@1|) |i#0@@31|))) |i#0@@31|)) :qid |sequence.112:20| :skolemid |1333| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@7 |n#0@@1|) |i#0@@31|))) ))) ($Is (Sequences.__default.Range $ly@@7 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |1334| :pattern ( (Sequences.__default.Range $ly@@7 |n#0@@1|)) ))))
(assert (forall (($ly@@8 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@8) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@8 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@8 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |1335| :pattern ( (|Sequences.__default.Range#requires| $ly@@8 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@9 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@9) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@9) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@9 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |1336| :pattern ( (Sequences.__default.Range ($LS $ly@@9) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@10 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@10) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@10) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@10) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |1337| :pattern ( (Sequences.__default.Range ($LS $ly@@10) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@234 T@U) (arg1@@114 T@U) (arg2@@65 T@U) (arg3@@41 T@U) (arg4@@30 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@234 arg1@@114 arg2@@65 arg3@@41 arg4@@30 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@234 arg1@@114 arg2@@65 arg3@@41 arg4@@30 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@11 T@U) ($Heap@@12 T@U) (|f#0@@27| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@11) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@11) $Heap@@12 |f#0@@27| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@11 $Heap@@12 |f#0@@27| |run#0@@15|))) :qid |unknown.0:0| :skolemid |1338| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@11) $Heap@@12 |f#0@@27| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@12 T@U) ($Heap@@13 T@U) (|f#0@@28| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@12) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@12 $Heap@@13 |f#0@@28| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@13 |f#0@@28| |run#0@@16|))) :qid |unknown.0:0| :skolemid |1339| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@12) $Heap@@13 |f#0@@28| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@13 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@29| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@13) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| |run#0@@17|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@52 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@52) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@52 null)) (exists ((|i#0@@32| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@32|)) ($Box |o#0|))))) (= ($Box $o@@52) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |1340| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@32|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@52) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@52) $f@@2)))) :qid |unknown.0:0| :skolemid |1341| :no-pattern (type $o@@52) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@52) :no-pattern (U_2_bool $o@@52) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h0@@2 |f#0@@29| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h1@@2 |f#0@@29| |run#0@@17|))) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h1@@2 |f#0@@29| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@14 T@U) ($Heap@@14 T@U) (|f#0@@30| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@14) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@14) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| (|Seq#Index| |run#0@@18| |i#1@@7|)))) :qid |sequence.118:21| :skolemid |1343| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@7|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@14 |f#0@@30| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@14 |f#0@@30| |run#0@@18|) |i#2@@5|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| (|Seq#Index| |run#0@@18| |i#2@@5|))))) :qid |sequence.120:20| :skolemid |1344| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@5|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@14 |f#0@@30| |run#0@@18|) |i#2@@5|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@14 |f#0@@30| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1345| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@14 |f#0@@30| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@15 T@U) ($Heap@@15 T@U) (|f#0@@31| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@15) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@15) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@15 $Heap@@15 |f#0@@31| |run#0@@19|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@15 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3|)))) :qid |sequence.118:21| :skolemid |1346| :pattern ( (|Seq#Index| |run#0@@19| |i#3|)) ))) (=> (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@15 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3@@0|)))) :qid |sequence.118:21| :skolemid |1346| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@0|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@15 $Heap@@15 |f#0@@31| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |1347| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@15 $Heap@@15 |f#0@@31| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@16 T@U) ($Heap@@16 T@U) (|f#0@@32| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@16) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Index| |run#0@@20| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |1346| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@1|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@16) $Heap@@16 |f#0@@32| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@16 $Heap@@16 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1348| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@16) $Heap@@16 |f#0@@32| |run#0@@20|)) ))))
(assert (forall ((arg0@@235 T@U) (arg1@@115 T@U) (arg2@@66 T@U) (arg3@@42 T@U) (arg4@@31 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@235 arg1@@115 arg2@@66 arg3@@42 arg4@@31 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@235 arg1@@115 arg2@@66 arg3@@42 arg4@@31 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@17 T@U) ($Heap@@17 T@U) (|f#0@@33| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@17) $Heap@@17 |f#0@@33| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@17 $Heap@@17 |f#0@@33| |run#0@@21|))) :qid |unknown.0:0| :skolemid |1349| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@17) $Heap@@17 |f#0@@33| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@18 T@U) ($Heap@@18 T@U) (|f#0@@34| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@18 $Heap@@18 |f#0@@34| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@18 |f#0@@34| |run#0@@22|))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@18) $Heap@@18 |f#0@@34| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@19 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@35| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| |run#0@@23|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@53 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@53) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@53 null)) (exists ((|i#0@@33| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@33|)) ($Box |o#0@@0|))))) (= ($Box $o@@53) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |1351| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@33|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@53) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@53) $f@@3)))) :qid |unknown.0:0| :skolemid |1352| :no-pattern (type $o@@53) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@53) :no-pattern (U_2_bool $o@@53) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h0@@3 |f#0@@35| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h1@@3 |f#0@@35| |run#0@@23|))) :qid |unknown.0:0| :skolemid |1353| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h1@@3 |f#0@@35| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@20 T@U) ($Heap@@19 T@U) (|f#0@@36| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| (|Seq#Index| |run#0@@24| |i#1@@8|)))) :qid |sequence.129:21| :skolemid |1354| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@8|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@19 |f#0@@36| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@19 |f#0@@36| |run#0@@24|) |i#2@@6|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| (|Seq#Index| |run#0@@24| |i#2@@6|))))) :qid |sequence.131:20| :skolemid |1355| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@6|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@19 |f#0@@36| |run#0@@24|) |i#2@@6|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@19 |f#0@@36| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1356| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@19 |f#0@@36| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@21 T@U) ($Heap@@20 T@U) (|f#0@@37| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@21 $Heap@@20 |f#0@@37| |run#0@@25|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@20 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@2|)))) :qid |sequence.129:21| :skolemid |1357| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@2|)) ))) (=> (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@20 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@3|)))) :qid |sequence.129:21| :skolemid |1357| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@3|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@21 $Heap@@20 |f#0@@37| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |1358| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@21 $Heap@@20 |f#0@@37| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@22 T@U) ($Heap@@21 T@U) (|f#0@@38| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| (|Seq#Index| |run#0@@26| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |1357| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@4|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@22) $Heap@@21 |f#0@@38| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@21 |f#0@@38| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |1359| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@22) $Heap@@21 |f#0@@38| |run#0@@26|)) ))))
(assert (forall ((arg0@@236 T@U) (arg1@@116 T@U) (arg2@@67 T@U) (arg3@@43 T@U) (arg4@@32 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@236 arg1@@116 arg2@@67 arg3@@43 arg4@@32)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@236 arg1@@116 arg2@@67 arg3@@43 arg4@@32)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@23 T@U) ($Heap@@22 T@U) (|f#0@@39| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@23) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@23) $Heap@@22 |f#0@@39| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@23 $Heap@@22 |f#0@@39| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1360| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@23) $Heap@@22 |f#0@@39| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@24 T@U) ($Heap@@23 T@U) (|f#0@@40| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@24 $Heap@@23 |f#0@@40| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@23 |f#0@@40| |run#0@@28|))) :qid |unknown.0:0| :skolemid |1361| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@24) $Heap@@23 |f#0@@40| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@25 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|f#0@@41| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@25) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@4 |f#0@@41| |run#0@@29|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@54 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@54) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@54 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@4 |f#0@@41| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@54) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |1362| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@54) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@54) $f@@4)))) :qid |unknown.0:0| :skolemid |1363| :no-pattern (type $o@@54) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@54) :no-pattern (U_2_bool $o@@54) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h0@@4 |f#0@@41| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h1@@4 |f#0@@41| |run#0@@29|))) :qid |unknown.0:0| :skolemid |1364| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h1@@4 |f#0@@41| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@26 T@U) ($Heap@@24 T@U) (|f#0@@42| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@26) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@24 |f#0@@42| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@34| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| |run#0@@30| |i#0@@34|)))) :qid |sequence.138:21| :skolemid |1365| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@34|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@9| Int) ) (!  (=> (<= (LitInt 0) |i#1@@9|) (=> (and (< |i#1@@9| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@9|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@9|)))))) :qid |sequence.140:20| :skolemid |1366| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@9|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |1367| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@24 |f#0@@42| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@27 T@U) ($Heap@@25 T@U) (|f#0@@43| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@27 $Heap@@25 |f#0@@43| |run#0@@31|) (forall ((|i#2@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@25 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@7|)))) :qid |sequence.138:21| :skolemid |1368| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@7|)) ))) (=> (forall ((|i#2@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@25 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@8|)))) :qid |sequence.138:21| :skolemid |1368| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@8|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@27 $Heap@@25 |f#0@@43| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |1369| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@27 $Heap@@25 |f#0@@43| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@28 T@U) ($Heap@@26 T@U) (|f#0@@44| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@44| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@44| (|Seq#Index| |run#0@@32| |i#2@@9|)))) :qid |sequence.138:21| :skolemid |1368| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@9|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@28) $Heap@@26 |f#0@@44| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@44| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@28 $Heap@@26 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1370| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@28) $Heap@@26 |f#0@@44| |run#0@@32|)) ))))
(assert (forall ((arg0@@237 T@U) (arg1@@117 T@U) (arg2@@68 T@U) (arg3@@44 T@U) (arg4@@33 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@237 arg1@@117 arg2@@68 arg3@@44 arg4@@33 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@237 arg1@@117 arg2@@68 arg3@@44 arg4@@33 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@29 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@29) |f#0@@45| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@29 |f#0@@45| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1371| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@29) |f#0@@45| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@30 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@30) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@30 |f#0@@46| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |1372| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@30) |f#0@@46| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@31 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@31) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@31 |f#0@@47| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |1373| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@31 |f#0@@47| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@32 T@U) ($Heap@@27 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@32) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@32 |f#0@@48| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@32 |f#0@@48| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |1374| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@32 |f#0@@48| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@27)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@33 T@U) ($Heap@@28 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@33) |f#0@@49| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@33 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |1375| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@33) |f#0@@49| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@28)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@34 T@U) ($Heap@@29 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1376| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@35 T@U) ($Heap@@30 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1377| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@30)) ))))
(assert (forall ((arg0@@238 T@U) (arg1@@118 T@U) (arg2@@69 T@U) (arg3@@45 T@U) (arg4@@34 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@238 arg1@@118 arg2@@69 arg3@@45 arg4@@34 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@238 arg1@@118 arg2@@69 arg3@@45 arg4@@34 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@36 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@36) |f#0@@52| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@36 |f#0@@52| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |1378| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@36) |f#0@@52| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@37 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@37 |f#0@@53| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |1379| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@37) |f#0@@53| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@38 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@38 |f#0@@54| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |1380| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@38 |f#0@@54| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@39 T@U) ($Heap@@31 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@39 |f#0@@55| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@39 |f#0@@55| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |1381| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@39 |f#0@@55| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@31)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@40 T@U) ($Heap@@32 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@40) |f#0@@56| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@32 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@40 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |1382| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@40) |f#0@@56| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@32)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@41 T@U) ($Heap@@33 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@33 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1383| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@42 T@U) ($Heap@@34 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@34 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1384| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@34)) ))))
(assert (forall ((arg0@@239 T@U) (arg1@@119 T@U) (arg2@@70 T@U) (arg3@@46 T@U) (arg4@@35 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@239 arg1@@119 arg2@@70 arg3@@46 arg4@@35 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@239 arg1@@119 arg2@@70 arg3@@46 arg4@@35 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@43 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@43) |f#0@@59| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@43 |f#0@@59| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |1385| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@43) |f#0@@59| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@44 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@44 |f#0@@60| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |1386| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@44) |f#0@@60| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@45 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@45 |f#0@@61| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |1387| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@45 |f#0@@61| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@46 T@U) ($Heap@@35 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@46 |f#0@@62| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@46 |f#0@@62| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |1388| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@46 |f#0@@62| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@47 T@U) ($Heap@@36 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@47) |f#0@@63| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@36 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@47 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |1389| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@47) |f#0@@63| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@48 T@U) ($Heap@@37 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@37 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1390| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@49 T@U) ($Heap@@38 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@38 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1391| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@38)) ))))
(assert (forall ((arg0@@240 T@U) (arg1@@120 T@U) (arg2@@71 T@U) (arg3@@47 Int) ) (! (= (type (Sequences.__default.remove arg0@@240 arg1@@120 arg2@@71 arg3@@47)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@240 arg1@@120 arg2@@71 arg3@@47)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@50 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@50) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@50) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@50 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |1392| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@50) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@51 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@51) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@51 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |1393| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@51) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@52 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@52) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@35| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#0@@35|) (|Seq#Index| |s#0@@6| |i#0@@35|))) :qid |sequence.168:18| :skolemid |1394| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@35|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#0@@35|)) ))) (forall ((|i#1@@10| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@10|) (< |i#1@@10| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#1@@10|) (|Seq#Index| |s#0@@6| (+ |i#1@@10| 1)))) :qid |sequence.169:18| :skolemid |1395| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#1@@10|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |1396| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@53 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@53) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@53 |s#0@@7| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@53 |s#0@@7| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |1397| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@53 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@54 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@54) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@54) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |1398| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@54) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@55 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@55) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@55) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1399| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@55) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@121 T@U) (arg2@@72 T@U) (arg3@@48 T@U) (arg4@@36 Int) ) (! (= (type (Sequences.__default.insert arg0@@241 arg1@@121 arg2@@72 arg3@@48 arg4@@36)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@241 arg1@@121 arg2@@72 arg3@@48 arg4@@36)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@56 T@U) (|s#0@@10| T@U) (|a#0@@7| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@56) |s#0@@10| |a#0@@7| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@56 |s#0@@10| |a#0@@7| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |1400| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@56) |s#0@@10| |a#0@@7| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@57 T@U) (|s#0@@11| T@U) (|a#0@@8| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@57 |s#0@@11| |a#0@@8| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@11| |a#0@@8| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |1401| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@57) |s#0@@11| |a#0@@8| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@58 T@U) (|s#0@@12| T@U) (|a#0@@9| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |a#0@@9|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@12| |a#0@@9| |pos#0@@7|) (and (and ($Is |s#0@@12| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@9| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@12|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@12|) 1)) (forall ((|i#0@@36| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|) |i#0@@36|) (|Seq#Index| |s#0@@12| |i#0@@36|)))) :qid |sequence.177:18| :skolemid |1402| :pattern ( (|Seq#Index| |s#0@@12| |i#0@@36|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|) |i#0@@36|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@11|) (< |i#1@@11| (|Seq#Length| |s#0@@12|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|) (+ |i#1@@11| 1)) (|Seq#Index| |s#0@@12| |i#1@@11|)))) :qid |sequence.178:18| :skolemid |1403| :pattern ( (|Seq#Index| |s#0@@12| |i#1@@11|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|) |pos#0@@7|) |a#0@@9|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |1404| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@58 |s#0@@12| |a#0@@9| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@59 T@U) (|s#0@@13| T@U) (|a#0@@10| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |a#0@@10|) BoxType)) (and ($Is |s#0@@13| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@10| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@59 |s#0@@13| |a#0@@10| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@59 |s#0@@13| |a#0@@10| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |1405| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@59 |s#0@@13| |a#0@@10| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@60 T@U) (|s#0@@14| T@U) (|a#0@@11| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |a#0@@11|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@14| |a#0@@11| |pos#0@@9|) (and (and ($Is |s#0@@14| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@11| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@14|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@60) |s#0@@14| |a#0@@11| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@14| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@11|)) (|Seq#Drop| |s#0@@14| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |1406| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@60) |s#0@@14| |a#0@@11| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@61 T@U) (|s#0@@15| T@U) (|a#0@@12| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |a#0@@12|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@15| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@12| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@15|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@61) (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@12|)) (|Seq#Drop| (Lit |s#0@@15|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |1407| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@61) (Lit |s#0@@15|) |a#0@@12| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@62 T@U) (|s#0@@16| T@U) (|a#0@@13| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |a#0@@13|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@16| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@13| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@16|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@62) (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@13|))) (|Seq#Drop| (Lit |s#0@@16|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |1408| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@62) (Lit |s#0@@16|) (Lit |a#0@@13|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@122 T@U) (arg2@@73 T@U) (arg3@@49 T@U) (arg4@@37 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@242 arg1@@122 arg2@@73 arg3@@49 arg4@@37 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@242 arg1@@122 arg2@@73 arg3@@49 arg4@@37 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@63 T@U) (|s#0@@17| T@U) (|a#0@@14| T@U) (|b#0@@1| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@14|) BoxType)) (= (type |b#0@@1|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@63) |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@63 |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |1409| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@63) |s#0@@17| |a#0@@14| |b#0@@1| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@64 T@U) (|s#0@@18| T@U) (|a#0@@15| T@U) (|b#0@@2| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (type |b#0@@2|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@64 |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |1410| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@64) |s#0@@18| |a#0@@15| |b#0@@2| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@65 T@U) (|s#0@@19| T@U) (|a#0@@16| T@U) (|b#0@@3| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (type |b#0@@3|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (and (and (and ($Is |s#0@@19| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@16| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@3| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@37| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@37|) (|Seq#Index| |s#0@@19| |i#0@@37|)))) :qid |sequence.202:18| :skolemid |1411| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@37|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@37|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@12|) (< |i#1@@12| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |i#1@@12| 1)) (|Seq#Index| |s#0@@19| |i#1@@12|)))) :qid |sequence.203:18| :skolemid |1412| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@12|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) |pos#0@@14|) |a#0@@16|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@3|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |1413| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@65 |s#0@@19| |a#0@@16| |b#0@@3| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@66 T@U) (|s#0@@20| T@U) (|a#0@@17| T@U) (|b#0@@4| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (= (type |b#0@@4|) BoxType)) (and (and ($Is |s#0@@20| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@17| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@4| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@66 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@66 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |1414| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@66 |s#0@@20| |a#0@@17| |b#0@@4| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@67 T@U) (|s#0@@21| T@U) (|a#0@@18| T@U) (|b#0@@5| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (type |b#0@@5|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|) (and (and (and ($Is |s#0@@21| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@18| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@5| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@67) |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@18|) |b#0@@5|)) (|Seq#Drop| |s#0@@21| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |1415| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@67) |s#0@@21| |a#0@@18| |b#0@@5| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@68 T@U) (|s#0@@22| T@U) (|a#0@@19| T@U) (|b#0@@6| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (type |b#0@@6|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@22| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@19| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@6| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@68) (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|) |b#0@@6|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1416| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@68) (Lit |s#0@@22|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@69 T@U) (|s#0@@23| T@U) (|a#0@@20| T@U) (|b#0@@7| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (= (type |b#0@@7|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@23| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@20| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@7| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@69) (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@20|)) (Lit |b#0@@7|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1417| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@69) (Lit |s#0@@23|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@243 T@U) (arg1@@123 T@U) (arg2@@74 T@U) (arg3@@50 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@243 arg1@@123 arg2@@74 arg3@@50 arg4@@38)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@243 arg1@@123 arg2@@74 arg3@@50 arg4@@38)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@70 T@U) (|s#0@@24| T@U) (|a#0@@21| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@70) |s#0@@24| |a#0@@21| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@70 |s#0@@24| |a#0@@21| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |1418| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@70) |s#0@@24| |a#0@@21| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@71 T@U) (|s#0@@25| T@U) (|a#0@@22| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@71 |s#0@@25| |a#0@@22| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@25| |a#0@@22| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |1419| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@71) |s#0@@25| |a#0@@22| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@72 T@U) (|s#0@@26| T@U) (|a#0@@23| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@26| |a#0@@23| |pos#0@@21|) (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@23| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@26|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|)) (- (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@38| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#0@@38|) (|Seq#Index| |s#0@@26| |i#0@@38|)))) :qid |sequence.221:18| :skolemid |1420| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@38|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#0@@38|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@13|) (< |i#1@@13| (- (|Seq#Length| |s#0@@26|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#1@@13|) (|Seq#Index| |s#0@@26| (+ |i#1@@13| 1))))) :qid |sequence.222:18| :skolemid |1421| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) |i#1@@13|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) |pos#0@@21|) |a#0@@23|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |1422| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@72 |s#0@@26| |a#0@@23| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@73 T@U) (|s#0@@27| T@U) (|a#0@@24| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (and ($Is |s#0@@27| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@24| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@73 |s#0@@27| |a#0@@24| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@73 |s#0@@27| |a#0@@24| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |1423| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@73 |s#0@@27| |a#0@@24| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@74 T@U) (|s#0@@28| T@U) (|a#0@@25| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@28| |a#0@@25| |pos#0@@23|) (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@25| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@28|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@74) |s#0@@28| |a#0@@25| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@25|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |1424| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@74) |s#0@@28| |a#0@@25| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@75 T@U) (|s#0@@29| T@U) (|a#0@@26| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@26| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@29|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@75) (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1425| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@75) (Lit |s#0@@29|) |a#0@@26| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@76 T@U) (|s#0@@30| T@U) (|a#0@@27| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@27| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@30|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@76) (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@27|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1426| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@76) (Lit |s#0@@30|) (Lit |a#0@@27|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@244 T@U) (arg1@@124 T@U) (arg2@@75 T@U) (arg3@@51 T@U) ) (! (= (type (Sequences.__default.concat arg0@@244 arg1@@124 arg2@@75 arg3@@51)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@244 arg1@@124 arg2@@75 arg3@@51)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@77 T@U) (|a#0@@28| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |a#0@@28|) (SeqType BoxType))) (= (type |b#0@@8|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@77) |a#0@@28| |b#0@@8|) (Sequences.__default.concat Sequences._default.concat$A $ly@@77 |a#0@@28| |b#0@@8|))) :qid |unknown.0:0| :skolemid |1427| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@77) |a#0@@28| |b#0@@8|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@78 T@U) (|a#0@@29| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |a#0@@29|) (SeqType BoxType))) (= (type |b#0@@9|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@78 |a#0@@29| |b#0@@9|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@29| |b#0@@9|))) :qid |unknown.0:0| :skolemid |1428| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@78) |a#0@@29| |b#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@79 T@U) (|a#0@@30| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |a#0@@30|) (SeqType BoxType))) (= (type |b#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@30| |b#0@@10|) (and ($Is |a#0@@30| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@10| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|)) (+ (|Seq#Length| |a#0@@30|) (|Seq#Length| |b#0@@10|))) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| (|Seq#Length| |a#0@@30|))) (= (|Seq#Index| |a#0@@30| |i#0@@39|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|) |i#0@@39|)))) :qid |sequence.230:18| :skolemid |1429| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|) |i#0@@39|)) :pattern ( (|Seq#Index| |a#0@@30| |i#0@@39|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| (|Seq#Length| |b#0@@10|))) (= (|Seq#Index| |b#0@@10| |i#1@@14|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|) (+ (|Seq#Length| |a#0@@30|) |i#1@@14|))))) :qid |sequence.231:18| :skolemid |1430| :pattern ( (|Seq#Index| |b#0@@10| |i#1@@14|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |1431| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@79 |a#0@@30| |b#0@@10|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@80 T@U) (|a#0@@31| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |a#0@@31|) (SeqType BoxType))) (= (type |b#0@@11|) (SeqType BoxType))) (and ($Is |a#0@@31| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@11| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@80 |a#0@@31| |b#0@@11|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@80 |a#0@@31| |b#0@@11|)))) :qid |unknown.0:0| :skolemid |1432| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@80 |a#0@@31| |b#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@81 T@U) (|a#0@@32| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |a#0@@32|) (SeqType BoxType))) (= (type |b#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@32| |b#0@@12|) (and ($Is |a#0@@32| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@12| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@81) |a#0@@32| |b#0@@12|) (|Seq#Append| |a#0@@32| |b#0@@12|))) :qid |unknown.0:0| :skolemid |1433| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@81) |a#0@@32| |b#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@82 T@U) (|a#0@@33| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |a#0@@33|) (SeqType BoxType))) (= (type |b#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@33|) (Lit |b#0@@13|)) (and ($Is |a#0@@33| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@13| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@82) (Lit |a#0@@33|) (Lit |b#0@@13|)) (|Seq#Append| |a#0@@33| |b#0@@13|))) :qid |unknown.0:0| :weight 3 :skolemid |1434| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@82) (Lit |a#0@@33|) (Lit |b#0@@13|))) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@125 T@U) (arg2@@76 T@U) (arg3@@52 T@U) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@245 arg1@@125 arg2@@76 arg3@@52 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@245 arg1@@125 arg2@@76 arg3@@52 arg4@@39)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@83 T@U) (|a#0@@34| T@U) (|b#0@@14| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |a#0@@34|) (SeqType BoxType))) (= (type |b#0@@14|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@83) |a#0@@34| |b#0@@14| |c#0@@9|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@83 |a#0@@34| |b#0@@14| |c#0@@9|))) :qid |unknown.0:0| :skolemid |1435| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@83) |a#0@@34| |b#0@@14| |c#0@@9|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@84 T@U) (|a#0@@35| T@U) (|b#0@@15| T@U) (|c#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |a#0@@35|) (SeqType BoxType))) (= (type |b#0@@15|) BoxType)) (= (type |c#0@@10|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@84 |a#0@@35| |b#0@@15| |c#0@@10|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@35| |b#0@@15| |c#0@@10|))) :qid |unknown.0:0| :skolemid |1436| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@84) |a#0@@35| |b#0@@15| |c#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@85 T@U) (|a#0@@36| T@U) (|b#0@@16| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@16|) BoxType)) (= (type |c#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@36| |b#0@@16| |c#0@@11|) (and (and ($Is |a#0@@36| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@16| Sequences._default.concat3$A@@1)) ($Is |c#0@@11| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|)) (+ (+ (|Seq#Length| |a#0@@36|) (|Seq#Length| |c#0@@11|)) 1)) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| (|Seq#Length| |a#0@@36|))) (= (|Seq#Index| |a#0@@36| |i#0@@40|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|) |i#0@@40|)))) :qid |sequence.238:18| :skolemid |1437| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|) |i#0@@40|)) :pattern ( (|Seq#Index| |a#0@@36| |i#0@@40|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|) (|Seq#Length| |a#0@@36|)) |b#0@@16|)) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (|Seq#Length| |c#0@@11|))) (= (|Seq#Index| |c#0@@11| |i#1@@15|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|) (+ (+ (|Seq#Length| |a#0@@36|) 1) |i#1@@15|))))) :qid |sequence.240:18| :skolemid |1438| :pattern ( (|Seq#Index| |c#0@@11| |i#1@@15|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |1439| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@85 |a#0@@36| |b#0@@16| |c#0@@11|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@86 T@U) (|a#0@@37| T@U) (|b#0@@17| T@U) (|c#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@17|) BoxType)) (= (type |c#0@@12|) (SeqType BoxType))) (and (and ($Is |a#0@@37| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@17| Sequences._default.concat3$A@@2)) ($Is |c#0@@12| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@86 |a#0@@37| |b#0@@17| |c#0@@12|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@86 |a#0@@37| |b#0@@17| |c#0@@12|)))) :qid |unknown.0:0| :skolemid |1440| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@86 |a#0@@37| |b#0@@17| |c#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@87 T@U) (|a#0@@38| T@U) (|b#0@@18| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@18|) BoxType)) (= (type |c#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@38| |b#0@@18| |c#0@@13|) (and (and ($Is |a#0@@38| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@18| Sequences._default.concat3$A@@3)) ($Is |c#0@@13| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@87) |a#0@@38| |b#0@@18| |c#0@@13|) (|Seq#Append| (|Seq#Append| |a#0@@38| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@18|)) |c#0@@13|))) :qid |unknown.0:0| :skolemid |1441| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@87) |a#0@@38| |b#0@@18| |c#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@88 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) (|c#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) BoxType)) (= (type |c#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@14|)) (and (and ($Is |a#0@@39| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@19| Sequences._default.concat3$A@@4)) ($Is |c#0@@14| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@88) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@14|)) (|Seq#Append| (|Seq#Append| |a#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@19|)) |c#0@@14|))) :qid |unknown.0:0| :weight 3 :skolemid |1442| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@88) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@14|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@89 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) (|c#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) BoxType)) (= (type |c#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@15|)) (and (and ($Is |a#0@@40| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@20| Sequences._default.concat3$A@@5)) ($Is |c#0@@15| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@89) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@15|)) (|Seq#Append| (|Seq#Append| |a#0@@40| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@20|))) |c#0@@15|))) :qid |unknown.0:0| :weight 3 :skolemid |1443| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@89) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@15|))) ))))
(assert (forall ((arg0@@246 T@U) (arg1@@126 T@U) (arg2@@77 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@246 arg1@@126 arg2@@77)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@246 arg1@@126 arg2@@77)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@90 T@U) (|a#0@@41| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@90) |a#0@@41|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@90 |a#0@@41|))) :qid |unknown.0:0| :skolemid |1444| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@90) |a#0@@41|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@91 T@U) (|a#0@@42| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@91 |a#0@@42|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@42|))) :qid |unknown.0:0| :skolemid |1445| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@91) |a#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@92 T@U) (|a#0@@43| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@43|) ($Is |a#0@@43| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@92 |a#0@@43|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |1446| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@92 |a#0@@43|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@93 T@U) (|a#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) ($Is |a#0@@44| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@93 |a#0@@44|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@93 |a#0@@44|)))) :qid |unknown.0:0| :skolemid |1447| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@93 |a#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@94 T@U) (|a#0@@45| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@45|) ($Is |a#0@@45| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@45|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@94) |a#0@@45|) (ite (= (|Seq#Length| |a#0@@45|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@94 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))))))) :qid |unknown.0:0| :skolemid |1448| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@94) |a#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@95 T@U) (|a#0@@46| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@46|)) ($Is |a#0@@46| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@95) (Lit |a#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@95) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1449| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@95) (Lit |a#0@@46|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@96 T@U) (|a#0@@47| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@96) |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@96 |a#0@@47| |b#0@@21|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@96 |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@96) |a#0@@47| |b#0@@21|)))) :qid |unknown.0:0| :skolemid |1450| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@96) |a#0@@47| |b#0@@21|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@97 T@U) (|a#0@@48| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@97 |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@97 |a#0@@48| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |1451| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@97) |a#0@@48| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@98 T@U) (|a#0@@49| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@49| |b#0@@23|) (and ($Is |a#0@@49| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@23| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@98 |a#0@@49| |b#0@@23|)) (<= (|Seq#Length| |a#0@@49|) (|Seq#Length| |b#0@@23|))) :qid |unknown.0:0| :skolemid |1452| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@98 |a#0@@49| |b#0@@23|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@99 T@U) (|a#0@@50| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (and ($Is |a#0@@50| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@24| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@99 |a#0@@50| |b#0@@24|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@99 |a#0@@50| |b#0@@24|)))) :qid |unknown.0:0| :skolemid |1453| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@99 |a#0@@50| |b#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@100 T@U) (|a#0@@51| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@51| |b#0@@25|) (and ($Is |a#0@@51| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@25| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@100) |a#0@@51| |b#0@@25|) (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|))))) (=> (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@100) |a#0@@51| |b#0@@25|)))) :qid |unknown.0:0| :skolemid |1454| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@100) |a#0@@51| |b#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@101 T@U) (|a#0@@52| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@52|) (Lit |b#0@@26|)) (and ($Is |a#0@@52| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@26| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@101) (Lit |a#0@@52|) (Lit |b#0@@26|)) (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@101) (Lit |a#0@@52|) (Lit |b#0@@26|))))) :qid |unknown.0:0| :weight 3 :skolemid |1455| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@101) (Lit |a#0@@52|) (Lit |b#0@@26|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@102 T@U) (|a#0@@53| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@102) |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@102 |a#0@@53| |b#0@@27|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@102 |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@102) |a#0@@53| |b#0@@27|)))) :qid |unknown.0:0| :skolemid |1456| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@102) |a#0@@53| |b#0@@27|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@103 T@U) (|a#0@@54| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@103 |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@103 |a#0@@54| |b#0@@28|)))) :qid |unknown.0:0| :skolemid |1457| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@103) |a#0@@54| |b#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@104 T@U) (|a#0@@55| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@55| |b#0@@29|) (and ($Is |a#0@@55| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@29| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |1458| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@104 |a#0@@55| |b#0@@29|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@105 T@U) (|a#0@@56| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@56| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@30| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@105 |a#0@@56| |b#0@@30|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@105 |a#0@@56| |b#0@@30|)))) :qid |unknown.0:0| :skolemid |1459| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@105 |a#0@@56| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@106 T@U) (|a#0@@57| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@57| |b#0@@31|) (and ($Is |a#0@@57| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@31| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@106) |a#0@@57| |b#0@@31|) (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|)))))) (=> (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@106) |a#0@@57| |b#0@@31|)))) :qid |unknown.0:0| :skolemid |1460| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@106) |a#0@@57| |b#0@@31|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@107 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@58|) (Lit |b#0@@32|)) (and ($Is |a#0@@58| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@32| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@107) (Lit |a#0@@58|) (Lit |b#0@@32|)) (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@107) (Lit |a#0@@58|) (Lit |b#0@@32|))))) :qid |unknown.0:0| :weight 3 :skolemid |1461| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@107) (Lit |a#0@@58|) (Lit |b#0@@32|))) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@127 T@U) (arg2@@78 T@U) (arg3@@53 T@U) (arg4@@40 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@247 arg1@@127 arg2@@78 arg3@@53 arg4@@40)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@247 arg1@@127 arg2@@78 arg3@@53 arg4@@40)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@108 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@41| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@108) |run#0@@54| |needle#0| |i#0@@41|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@108 |run#0@@54| |needle#0| |i#0@@41|))) :qid |unknown.0:0| :skolemid |1462| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@108) |run#0@@54| |needle#0| |i#0@@41|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@109 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@109 |run#0@@55| |needle#0@@0| |i#0@@42|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@42|))) :qid |unknown.0:0| :skolemid |1463| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@109) |run#0@@55| |needle#0@@0| |i#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@110 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@43|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@43|) (<= |i#0@@43| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@43| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |1464| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1465| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@110 |run#0@@56| |needle#0@@1| |i#0@@43|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@111 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@111 |run#0@@57| |needle#0@@2| |i#0@@44|) (and (<= (LitInt 0) |i#0@@44|) (<= |i#0@@44| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@44|) (<= |i#0@@44| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@111 |run#0@@57| |needle#0@@2| |i#0@@44|)))) :qid |unknown.0:0| :skolemid |1466| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@111 |run#0@@57| |needle#0@@2| |i#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@112 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@45|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@45|) (<= |i#0@@45| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@45| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@45|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@45| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@112) |run#0@@58| |needle#0@@3| |i#0@@45|) (ite (= |i#0@@45| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@45|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@45|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@112 |run#0@@58| |needle#0@@3| (+ |i#0@@45| 1))))))) :qid |unknown.0:0| :skolemid |1467| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@112) |run#0@@58| |needle#0@@3| |i#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@113 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@46|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@46|)) (<= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@46|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@46| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@113) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@46|)) (ite (= (LitInt |i#0@@46|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@46|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@46|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@113) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@46| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1468| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@113) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@46|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@114 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@47|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@47|)) (<= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@47|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@47| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@114) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@47|)) (ite (= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@47|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@47|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@114) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@47| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1469| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@114) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@47|))) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@128 T@U) (arg2@@79 T@U) (arg3@@54 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@248 arg1@@128 arg2@@79 arg3@@54)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@248 arg1@@128 arg2@@79 arg3@@54)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@115 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@115) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@115 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |1470| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@115) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@116 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@116 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |1471| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@116) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@117 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@48| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@48|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |1472| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@48|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1473| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@117 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@118 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@118 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@118 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |1474| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@118 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@119 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@119) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |1475| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@119) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@120 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@120) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1476| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@120) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@121 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@121) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1477| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@121) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@129 T@U) (arg2@@80 Int) (arg3@@55 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@249 arg1@@129 arg2@@80 arg3@@55)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@249 arg1@@129 arg2@@80 arg3@@55)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@122 T@U) (|length#0| Int) (|v#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |v#0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@122) |length#0| |v#0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@122 |length#0| |v#0|))) :qid |unknown.0:0| :skolemid |1478| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@122) |length#0| |v#0|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@123 T@U) (|length#0@@0| Int) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@123 |length#0@@0| |v#0@@0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@0|))) :qid |unknown.0:0| :skolemid |1479| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@123) |length#0@@0| |v#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@124 T@U) (|length#0@@1| Int) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@1|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@1| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|)) |length#0@@1|) (forall ((|i#0@@49| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|) |i#0@@49|) |v#0@@1|)) :qid |sequence.357:18| :skolemid |1480| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|) |i#0@@49|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |1481| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@124 |length#0@@1| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@125 T@U) (|length#0@@2| Int) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |v#0@@2|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@2| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@125 |length#0@@2| |v#0@@2|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@125 |length#0@@2| |v#0@@2|)))) :qid |unknown.0:0| :skolemid |1482| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@125 |length#0@@2| |v#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@126 T@U) (|length#0@@3| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@3|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@3| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@3|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@126) |length#0@@3| |v#0@@3|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@126 (- |length#0@@3| 1) |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |1483| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@126) |length#0@@3| |v#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@127 T@U) (|length#0@@4| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@4|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@4| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@4|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@127) (LitInt |length#0@@4|) |v#0@@4|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@127) (LitInt (- |length#0@@4| 1)) |v#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1484| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@127) (LitInt |length#0@@4|) |v#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@128 T@U) (|length#0@@5| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@5|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@128) (LitInt |length#0@@5|) (Lit |v#0@@5|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@5|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@128) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1485| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@128) (LitInt |length#0@@5|) (Lit |v#0@@5|))) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@130 T@U) (arg2@@81 T@U) (arg3@@56 Int) (arg4@@41 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@250 arg1@@130 arg2@@81 arg3@@56 arg4@@41)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@250 arg1@@130 arg2@@81 arg3@@56 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@129 T@U) (|s#0@@31| T@U) (|i#0@@50| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@129) |s#0@@31| |i#0@@50| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@129 |s#0@@31| |i#0@@50| |t#0|))) :qid |unknown.0:0| :skolemid |1486| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@129) |s#0@@31| |i#0@@50| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@130 T@U) (|s#0@@32| T@U) (|i#0@@51| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@130 |s#0@@32| |i#0@@51| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@32| |i#0@@51| |t#0@@0|))) :qid |unknown.0:0| :skolemid |1487| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@130) |s#0@@32| |i#0@@51| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@131 T@U) (|s#0@@33| T@U) (|i#0@@52| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@33| |i#0@@52| |t#0@@1|) (and (and (and ($Is |s#0@@33| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@52| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| (|Seq#Length| |s#0@@33|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@131 |s#0@@33| |i#0@@52| |t#0@@1|) (|Seq#Update| |s#0@@33| |i#0@@52| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@131 |s#0@@33| |i#0@@52| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |1488| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@131 |s#0@@33| |i#0@@52| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@132 T@U) (|s#0@@34| T@U) (|i#0@@53| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@34| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@132 |s#0@@34| |i#0@@53| |t#0@@2|) (and (< (+ |i#0@@53| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| (|Seq#Length| |s#0@@34|))))) (=> (and (< (+ |i#0@@53| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| (|Seq#Length| |s#0@@34|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@132 |s#0@@34| |i#0@@53| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |1489| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@132 |s#0@@34| |i#0@@53| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@133 T@U) (|s#0@@35| T@U) (|i#0@@54| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@35| |i#0@@54| |t#0@@3|) (and (and (and ($Is |s#0@@35| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@54| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| (|Seq#Length| |s#0@@35|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@133) |s#0@@35| |i#0@@54| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |i#0@@54|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@35| (+ |i#0@@54| 1))))) :qid |unknown.0:0| :skolemid |1490| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@133) |s#0@@35| |i#0@@54| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@134 T@U) (|s#0@@36| T@U) (|i#0@@55| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@36|) (LitInt |i#0@@55|) |t#0@@4|) (and (and (and ($Is |s#0@@36| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@55| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@55|)) (< |i#0@@55| (|Seq#Length| (Lit |s#0@@36|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@134) (Lit |s#0@@36|) (LitInt |i#0@@55|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |i#0@@55|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |i#0@@55| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1491| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@134) (Lit |s#0@@36|) (LitInt |i#0@@55|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@135 T@U) (|s#0@@37| T@U) (|i#0@@56| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@37|) (LitInt |i#0@@56|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@37| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@56| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (< |i#0@@56| (|Seq#Length| (Lit |s#0@@37|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@135) (Lit |s#0@@37|) (LitInt |i#0@@56|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |i#0@@56|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |i#0@@56| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1492| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@135) (Lit |s#0@@37|) (LitInt |i#0@@56|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@131 T@U) (arg2@@82 T@U) (arg3@@57 T@U) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@251 arg1@@131 arg2@@82 arg3@@57 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@251 arg1@@131 arg2@@82 arg3@@57 arg4@@42)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@136 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@136) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@136) |a#0@@59| |b#0@@33|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@136 |a#0@@59| |b#0@@33|))) :qid |unknown.0:0| :skolemid |1493| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@136) |a#0@@59| |b#0@@33|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@137 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@137) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@137 |a#0@@60| |b#0@@34|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |1494| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@137) |a#0@@60| |b#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@138 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@138) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@61| |b#0@@35|) (and (and ($Is |a#0@@61| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@61|) (|Seq#Length| |b#0@@35|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|)) (|Seq#Length| |a#0@@61|)) (forall ((|i#0@@57| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|) |i#0@@57|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@61| |i#0@@57|) (|Seq#Index| |b#0@@35| |i#0@@57|))))) :qid |sequence.378:20| :skolemid |1495| :pattern ( (|Seq#Index| |b#0@@35| |i#0@@57|)) :pattern ( (|Seq#Index| |a#0@@61| |i#0@@57|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|) |i#0@@57|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |1496| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@138 |a#0@@61| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@139 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@139) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@62| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@139 |a#0@@62| |b#0@@36|) (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|))) (=> (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@139 |a#0@@62| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |1497| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@139 |a#0@@62| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@140 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@140) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@63| |b#0@@37|) (and (and ($Is |a#0@@63| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@63|) (|Seq#Length| |b#0@@37|))))) (and (=> (not (= (|Seq#Length| |a#0@@63|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@140) |a#0@@63| |b#0@@37|) (ite (= (|Seq#Length| |a#0@@63|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@140 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@37|))))))))) :qid |unknown.0:0| :skolemid |1498| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@140) |a#0@@63| |b#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@141 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@141) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@64|) (Lit |b#0@@38|)) (and (and ($Is |a#0@@64| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@64|)) (|Seq#Length| (Lit |b#0@@38|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@141) (Lit |a#0@@64|) (Lit |b#0@@38|)) (ite (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@141) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1499| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@141) (Lit |a#0@@64|) (Lit |b#0@@38|))) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@132 T@U) (arg2@@83 T@U) (arg3@@58 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@252 arg1@@132 arg2@@83 arg3@@58)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@252 arg1@@132 arg2@@83 arg3@@58)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@142 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@142) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@142) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@142 |z#0|))) :qid |unknown.0:0| :skolemid |1500| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@142) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@143 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@143) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@143 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |1501| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@143) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@144 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@58| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|))) |i#0@@58|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|))) |i#0@@58|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@58|))))) :qid |sequence.386:20| :skolemid |1502| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@58|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|))) |i#0@@58|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|))) |i#0@@58|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |1503| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@144 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@145 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@145 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@145 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |1504| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@145 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@146 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@146) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@39| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@146 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@65| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@146 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@65| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |1505| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@146) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@147 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@147) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@147) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@147) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1506| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@147) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@253 T@U) (arg1@@133 T@U) (arg2@@84 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@253 arg1@@133 arg2@@84)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@253 arg1@@133 arg2@@84)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@148 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@148) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@148 |seqs#0|))) :qid |unknown.0:0| :skolemid |1507| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@148) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@149 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@149 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |1508| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@149) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@150 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@59| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|) |i#0@@59|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@59|)))))) :qid |sequence.408:20| :skolemid |1509| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@59|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|) |i#0@@59|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |1510| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@150 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@151 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@151 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@151 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |1511| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@151 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@152 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@152) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@152 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |1512| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@152) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@153 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@153) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@153) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1513| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@153) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@154 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@154) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@154) |shape#0|) (Sequences.__default.FlattenLength $ly@@154 |shape#0|))) :qid |sequence.419:22| :skolemid |1514| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@154) |shape#0|)) )))
(assert (forall (($ly@@155 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@155) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@155 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |1515| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@155) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@156 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@156) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@156 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@156 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |1516| :pattern ( (Sequences.__default.FlattenLength $ly@@156 |shape#0@@1|)) ))))
(assert (forall (($ly@@157 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@157) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@157 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@157 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |1517| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@157 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@158 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@158) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@158) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@158 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |1518| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@158) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@159 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@159) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@159) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@159) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |1519| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@159) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@134 T@U) (arg2@@85 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@254 arg1@@134 arg2@@85)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@254 arg1@@134 arg2@@85)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@160 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@160) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@160 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |1520| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@160) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@161 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@161 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |1521| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@161) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@162 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@162 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@162 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@162 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |1522| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@162 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@163 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@163 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@163 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |1523| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@163 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@164 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@164) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@164 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |1524| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@164) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@165 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@165) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@165) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1525| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@165) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@60| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@60| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@60|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@60| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@60|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@60| |j#0@@2|))) :qid |sequence.488:25| :skolemid |1526| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@60| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@61| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@61|)) (<= (LitInt 0) |j#0@@3|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@61| |j#0@@3|) (and (< |i#0@@61| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@61|)))))) (=> (and (< |i#0@@61| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@61|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@61| |j#0@@3|))))) :qid |sequence.488:25| :skolemid |1527| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@61| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@62| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@62| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@62|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@62| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@62|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@62|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@62| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@62|)) |j#0@@4|)))) :qid |sequence.488:25| :skolemid |1528| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@62| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@63| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@63|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@63| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@63|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@63|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@63|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@63|)))) |j#0@@5|)))) :qid |sequence.488:25| :weight 3 :skolemid |1529| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@63|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@255 T@U) (arg1@@135 T@U) (arg2@@86 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@255 arg1@@135 arg2@@86)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@255 arg1@@135 arg2@@86)) )))
(assert (forall (($ly@@166 T@U) (|shape#0@@9| T@U) (|i#0@@64| Int) ) (!  (=> (and (= (type $ly@@166) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@166) |shape#0@@9| |i#0@@64|) (Sequences.__default.UnflattenIndex $ly@@166 |shape#0@@9| |i#0@@64|))) :qid |sequence.495:12| :skolemid |1530| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@166) |shape#0@@9| |i#0@@64|)) )))
(assert (forall (($ly@@167 T@U) (|shape#0@@10| T@U) (|i#0@@65| Int) ) (!  (=> (and (= (type $ly@@167) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@167 |shape#0@@10| |i#0@@65|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@65|))) :qid |sequence.495:12| :skolemid |1531| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@167) |shape#0@@10| |i#0@@65|)) )))
(assert  (=> true (forall (($ly@@168 T@U) (|shape#0@@11| T@U) (|i#0@@66| Int) ) (!  (=> (and (and (= (type $ly@@168) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@66|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@66|)) (< |i#0@@66| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@168 |shape#0@@11| |i#0@@66|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |1532| :pattern ( (Sequences.__default.UnflattenIndex $ly@@168 |shape#0@@11| |i#0@@66|)) ))))
(assert (forall (($ly@@169 T@U) (|shape#0@@12| T@U) (|i#0@@67| Int) ) (!  (=> (and (and (= (type $ly@@169) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@67|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@169 |shape#0@@12| |i#0@@67|) (< |i#0@@67| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@67| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@169 |shape#0@@12| |i#0@@67|)))) :qid |sequence.495:12| :skolemid |1533| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@169 |shape#0@@12| |i#0@@67|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@170 T@U) (|shape#0@@13| T@U) (|i#0@@68| Int) ) (!  (=> (and (and (= (type $ly@@170) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@68|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@68|)) (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@68|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@68|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@170) |shape#0@@13| |i#0@@68|) (ite (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@170 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@68|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |1534| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@170) |shape#0@@13| |i#0@@68|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@171 T@U) (|shape#0@@14| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@171) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@69|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@69|)) (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@69|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@69|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@171) (Lit |shape#0@@14|) (LitInt |i#0@@69|)) (ite (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@171) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@69|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |1535| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@171) (Lit |shape#0@@14|) (LitInt |i#0@@69|))) ))))
(assert (forall ((arg0@@256 T@U) (arg1@@136 T@U) (arg2@@87 Int) (arg3@@59 T@U) ) (! (= (type (Sequences.__default.fill arg0@@256 arg1@@136 arg2@@87 arg3@@59)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@256 arg1@@136 arg2@@87 arg3@@59)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@172 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@172) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@172 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |1536| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@172) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@173 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@173 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |1537| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@173) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@174 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@174 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@70| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@70|) (< |i#0@@70| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@174 |n#0@@7| |t#0@@8|) |i#0@@70|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |1538| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@174 |n#0@@7| |t#0@@8|) |i#0@@70|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@174 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |1539| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@174 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@175 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@175 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@175 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |1540| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@175 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@176 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@176) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@176 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |1541| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@176) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@177 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@177) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@177) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1542| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@177) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@178 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@178) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@178) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1543| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@178) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.LruModel.__default) TyType))
(assert (= (Tag Tclass.LruModel.__default) Tagclass.LruModel.__default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.LruModel.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.LruModel.__default))) :qid |unknown.0:0| :skolemid |1544| :pattern ( ($IsBox bx@@102 Tclass.LruModel.__default)) )))
(assert (forall (($o@@55 T@U) ) (!  (=> (= (type $o@@55) refType) (and (=> ($Is $o@@55 Tclass.LruModel.__default) (or (= $o@@55 null) (= (dtype $o@@55) Tclass.LruModel.__default))) (=> (or (= $o@@55 null) (= (dtype $o@@55) Tclass.LruModel.__default)) ($Is $o@@55 Tclass.LruModel.__default)))) :qid |unknown.0:0| :skolemid |1545| :pattern ( ($Is $o@@55 Tclass.LruModel.__default)) )))
(assert (forall (($o@@56 T@U) ($h@@72 T@U) ) (!  (=> (and (= (type $o@@56) refType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@56 Tclass.LruModel.__default $h@@72) (or (= $o@@56 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@56) alloc)))) (=> (or (= $o@@56 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@56) alloc))) ($IsAlloc $o@@56 Tclass.LruModel.__default $h@@72)))) :qid |unknown.0:0| :skolemid |1546| :pattern ( ($IsAlloc $o@@56 Tclass.LruModel.__default $h@@72)) )))
(assert (forall (($ly@@179 T@U) (|q#0| T@U) ) (!  (=> (and (= (type $ly@@179) LayerTypeType) (= (type |q#0|) (SeqType BoxType))) (and (=> (LruModel.__default.distinct ($LS $ly@@179) |q#0|) (LruModel.__default.distinct $ly@@179 |q#0|)) (=> (LruModel.__default.distinct $ly@@179 |q#0|) (LruModel.__default.distinct ($LS $ly@@179) |q#0|)))) :qid |LruModel.23:23| :skolemid |1547| :pattern ( (LruModel.__default.distinct ($LS $ly@@179) |q#0|)) )))
(assert (forall (($ly@@180 T@U) (|q#0@@0| T@U) ) (!  (=> (and (= (type $ly@@180) LayerTypeType) (= (type |q#0@@0|) (SeqType BoxType))) (and (=> (LruModel.__default.distinct $ly@@180 |q#0@@0|) (LruModel.__default.distinct $LZ |q#0@@0|)) (=> (LruModel.__default.distinct $LZ |q#0@@0|) (LruModel.__default.distinct $ly@@180 |q#0@@0|)))) :qid |LruModel.23:23| :skolemid |1548| :pattern ( (LruModel.__default.distinct (AsFuelBottom $ly@@180) |q#0@@0|)) )))
(assert  (=> true (forall (($ly@@181 T@U) (|q#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@181) LayerTypeType) (= (type |q#0@@1|) (SeqType BoxType))) (or (|LruModel.__default.distinct#canCall| |q#0@@1|) ($Is |q#0@@1| (TSeq Tclass.NativeTypes.uint64)))) true) :qid |LruModel.23:23| :skolemid |1549| :pattern ( (LruModel.__default.distinct $ly@@181 |q#0@@1|)) ))))
(assert (forall (($ly@@182 T@U) (|q#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@182) LayerTypeType) (= (type |q#0@@2|) (SeqType BoxType))) ($Is |q#0@@2| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.distinct#requires| $ly@@182 |q#0@@2|) true) (=> true (|LruModel.__default.distinct#requires| $ly@@182 |q#0@@2|)))) :qid |LruModel.23:23| :skolemid |1550| :pattern ( (|LruModel.__default.distinct#requires| $ly@@182 |q#0@@2|)) )))
(assert  (=> true (forall (($ly@@183 T@U) (|q#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@183) LayerTypeType) (= (type |q#0@@3|) (SeqType BoxType))) (or (|LruModel.__default.distinct#canCall| |q#0@@3|) ($Is |q#0@@3| (TSeq Tclass.NativeTypes.uint64)))) (and (=> (LruModel.__default.distinct ($LS $ly@@183) |q#0@@3|) (forall ((|i#0@@71| Int) (|j#0@@6| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| (|Seq#Length| |q#0@@3|))) (and (<= (LitInt 0) |j#0@@6|) (< |j#0@@6| (|Seq#Length| |q#0@@3|)))) (not (= |i#0@@71| |j#0@@6|))) (not (= (U_2_int ($Unbox intType (|Seq#Index| |q#0@@3| |i#0@@71|))) (U_2_int ($Unbox intType (|Seq#Index| |q#0@@3| |j#0@@6|)))))) :qid |LruModel.25:12| :skolemid |1551| :pattern ( ($Unbox intType (|Seq#Index| |q#0@@3| |j#0@@6|)) ($Unbox intType (|Seq#Index| |q#0@@3| |i#0@@71|))) ))) (=> (forall ((|i#0@@72| Int) (|j#0@@7| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| |q#0@@3|))) (and (<= (LitInt 0) |j#0@@7|) (< |j#0@@7| (|Seq#Length| |q#0@@3|)))) (not (= |i#0@@72| |j#0@@7|))) (not (= (U_2_int ($Unbox intType (|Seq#Index| |q#0@@3| |i#0@@72|))) (U_2_int ($Unbox intType (|Seq#Index| |q#0@@3| |j#0@@7|)))))) :qid |LruModel.25:12| :skolemid |1551| :pattern ( ($Unbox intType (|Seq#Index| |q#0@@3| |j#0@@7|)) ($Unbox intType (|Seq#Index| |q#0@@3| |i#0@@72|))) )) (LruModel.__default.distinct ($LS $ly@@183) |q#0@@3|)))) :qid |LruModel.23:23| :skolemid |1552| :pattern ( (LruModel.__default.distinct ($LS $ly@@183) |q#0@@3|)) ))))
(assert  (=> true (forall (($ly@@184 T@U) (|q#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@184) LayerTypeType) (= (type |q#0@@4|) (SeqType BoxType))) (or (|LruModel.__default.distinct#canCall| (Lit |q#0@@4|)) ($Is |q#0@@4| (TSeq Tclass.NativeTypes.uint64)))) (and (=> (LruModel.__default.distinct ($LS $ly@@184) (Lit |q#0@@4|)) (forall ((|i#1@@16| Int) (|j#1@@1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| (Lit |q#0@@4|)))) (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| (|Seq#Length| (Lit |q#0@@4|))))) (not (= |i#1@@16| |j#1@@1|))) (not (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |q#0@@4|) |i#1@@16|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |q#0@@4|) |j#1@@1|)))))) :qid |LruModel.25:12| :skolemid |1553| :pattern ( ($Unbox intType (|Seq#Index| |q#0@@4| |j#1@@1|)) ($Unbox intType (|Seq#Index| |q#0@@4| |i#1@@16|))) ))) (=> (forall ((|i#1@@17| Int) (|j#1@@2| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| (Lit |q#0@@4|)))) (and (<= (LitInt 0) |j#1@@2|) (< |j#1@@2| (|Seq#Length| (Lit |q#0@@4|))))) (not (= |i#1@@17| |j#1@@2|))) (not (= (U_2_int ($Unbox intType (|Seq#Index| (Lit |q#0@@4|) |i#1@@17|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |q#0@@4|) |j#1@@2|)))))) :qid |LruModel.25:12| :skolemid |1553| :pattern ( ($Unbox intType (|Seq#Index| |q#0@@4| |j#1@@2|)) ($Unbox intType (|Seq#Index| |q#0@@4| |i#1@@17|))) )) (LruModel.__default.distinct ($LS $ly@@184) (Lit |q#0@@4|))))) :qid |LruModel.23:23| :weight 3 :skolemid |1554| :pattern ( (LruModel.__default.distinct ($LS $ly@@184) (Lit |q#0@@4|))) ))))
(assert  (=> true (forall ((|q#0@@5| T@U) ) (!  (=> (and (= (type |q#0@@5|) (SeqType BoxType)) (or (|LruModel.__default.WF#canCall| |q#0@@5|) ($Is |q#0@@5| (TSeq Tclass.NativeTypes.uint64)))) true) :qid |LruModel.28:16| :skolemid |1555| :pattern ( (LruModel.__default.WF |q#0@@5|)) ))))
(assert (forall ((|q#0@@6| T@U) ) (!  (=> (and (= (type |q#0@@6|) (SeqType BoxType)) ($Is |q#0@@6| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.WF#requires| |q#0@@6|) true) (=> true (|LruModel.__default.WF#requires| |q#0@@6|)))) :qid |LruModel.28:16| :skolemid |1556| :pattern ( (|LruModel.__default.WF#requires| |q#0@@6|)) )))
(assert (= (type StartFuel_LruModel._default.distinct) LayerTypeType))
(assert  (=> true (forall ((|q#0@@7| T@U) ) (!  (=> (and (= (type |q#0@@7|) (SeqType BoxType)) (or (|LruModel.__default.WF#canCall| |q#0@@7|) ($Is |q#0@@7| (TSeq Tclass.NativeTypes.uint64)))) (and (|LruModel.__default.distinct#canCall| |q#0@@7|) (and (=> (LruModel.__default.WF |q#0@@7|) (LruModel.__default.distinct StartFuel_LruModel._default.distinct |q#0@@7|)) (=> (LruModel.__default.distinct StartFuel_LruModel._default.distinct |q#0@@7|) (LruModel.__default.WF |q#0@@7|))))) :qid |LruModel.28:16| :skolemid |1557| :pattern ( (LruModel.__default.WF |q#0@@7|)) ))))
(assert  (=> true (forall ((|q#0@@8| T@U) ) (!  (=> (and (= (type |q#0@@8|) (SeqType BoxType)) (or (|LruModel.__default.WF#canCall| (Lit |q#0@@8|)) ($Is |q#0@@8| (TSeq Tclass.NativeTypes.uint64)))) (and (|LruModel.__default.distinct#canCall| (Lit |q#0@@8|)) (and (=> (LruModel.__default.WF (Lit |q#0@@8|)) (LruModel.__default.distinct StartFuel_LruModel._default.distinct (Lit |q#0@@8|))) (=> (LruModel.__default.distinct StartFuel_LruModel._default.distinct (Lit |q#0@@8|)) (LruModel.__default.WF (Lit |q#0@@8|)))))) :qid |LruModel.28:16| :weight 3 :skolemid |1558| :pattern ( (LruModel.__default.WF (Lit |q#0@@8|))) ))))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (LruModel.__default.I arg0@@257)) (MapType0Type BoxType boolType)) :qid |funType:LruModel.__default.I| :pattern ( (LruModel.__default.I arg0@@257)) )))
(assert  (=> true (forall ((|q#0@@9| T@U) ) (!  (=> (and (= (type |q#0@@9|) (SeqType BoxType)) (or (|LruModel.__default.I#canCall| |q#0@@9|) ($Is |q#0@@9| (TSeq Tclass.NativeTypes.uint64)))) ($Is (LruModel.__default.I |q#0@@9|) (TSet Tclass.NativeTypes.uint64))) :qid |LruModel.33:14| :skolemid |1559| :pattern ( (LruModel.__default.I |q#0@@9|)) ))))
(assert (forall ((|q#0@@10| T@U) ) (!  (=> (and (= (type |q#0@@10|) (SeqType BoxType)) ($Is |q#0@@10| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.I#requires| |q#0@@10|) true) (=> true (|LruModel.__default.I#requires| |q#0@@10|)))) :qid |LruModel.33:14| :skolemid |1560| :pattern ( (|LruModel.__default.I#requires| |q#0@@10|)) )))
(assert (forall ((arg0@@258 T@U) (arg1@@137 T@U) ) (! (= (type (|lambda#23| arg0@@258 arg1@@137)) (MapType0Type BoxType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@258 arg1@@137)) )))
(assert  (=> true (forall ((|q#0@@11| T@U) ) (!  (=> (and (= (type |q#0@@11|) (SeqType BoxType)) (or (|LruModel.__default.I#canCall| |q#0@@11|) ($Is |q#0@@11| (TSeq Tclass.NativeTypes.uint64)))) (= (LruModel.__default.I |q#0@@11|) (|lambda#23| Tclass.NativeTypes.uint64 |q#0@@11|))) :qid |LruModel.33:14| :skolemid |1561| :pattern ( (LruModel.__default.I |q#0@@11|)) ))))
(assert  (=> true (forall ((|q#0@@12| T@U) ) (!  (=> (and (= (type |q#0@@12|) (SeqType BoxType)) (or (|LruModel.__default.I#canCall| (Lit |q#0@@12|)) ($Is |q#0@@12| (TSeq Tclass.NativeTypes.uint64)))) (= (LruModel.__default.I (Lit |q#0@@12|)) (|lambda#23| Tclass.NativeTypes.uint64 |q#0@@12|))) :qid |LruModel.33:14| :weight 3 :skolemid |1562| :pattern ( (LruModel.__default.I (Lit |q#0@@12|))) ))))
(assert (= (type LruModel.__default.Empty) (SeqType BoxType)))
(assert  (=> true (=> true (and (and (|Set#Equal| (LruModel.__default.I LruModel.__default.Empty) (|Set#Empty| BoxType)) (LruModel.__default.WF LruModel.__default.Empty)) ($Is LruModel.__default.Empty (TSeq Tclass.NativeTypes.uint64))))))
(assert  (=> |LruModel.__default.Empty#requires| true))
(assert  (=> true |LruModel.__default.Empty#requires|))
(assert  (and (= (type MoreFuel_LruModel._default.distinct0) LayerTypeType) (= (type StartFuelAssert_LruModel._default.distinct) LayerTypeType)))
(assert  (=> true (=> true (and (and (and (= StartFuel_LruModel._default.distinct ($LS MoreFuel_LruModel._default.distinct0)) (= StartFuelAssert_LruModel._default.distinct ($LS ($LS MoreFuel_LruModel._default.distinct0)))) (= (AsFuelBottom MoreFuel_LruModel._default.distinct0) MoreFuel_LruModel._default.distinct0)) (= LruModel.__default.Empty (Lit (|Seq#Empty| BoxType)))))))
(assert (= (type MoreFuel_LruModel._default.distinct1) LayerTypeType))
(assert  (=> true (=> true (and (and (and (= StartFuel_LruModel._default.distinct ($LS MoreFuel_LruModel._default.distinct1)) (= StartFuelAssert_LruModel._default.distinct ($LS ($LS MoreFuel_LruModel._default.distinct1)))) (= (AsFuelBottom MoreFuel_LruModel._default.distinct1) MoreFuel_LruModel._default.distinct1)) (= LruModel.__default.Empty (Lit (|Seq#Empty| BoxType)))))))
(assert (forall ((arg0@@259 T@U) (arg1@@138 T@U) (arg2@@88 Int) ) (! (= (type (LruModel.__default.Remove arg0@@259 arg1@@138 arg2@@88)) (SeqType BoxType)) :qid |funType:LruModel.__default.Remove| :pattern ( (LruModel.__default.Remove arg0@@259 arg1@@138 arg2@@88)) )))
(assert (forall (($ly@@185 T@U) (|q#0@@13| T@U) (|x#0@@1| Int) ) (!  (=> (and (= (type $ly@@185) LayerTypeType) (= (type |q#0@@13|) (SeqType BoxType))) (= (LruModel.__default.Remove ($LS $ly@@185) |q#0@@13| |x#0@@1|) (LruModel.__default.Remove $ly@@185 |q#0@@13| |x#0@@1|))) :qid |LruModel.46:12| :skolemid |1563| :pattern ( (LruModel.__default.Remove ($LS $ly@@185) |q#0@@13| |x#0@@1|)) )))
(assert (forall (($ly@@186 T@U) (|q#0@@14| T@U) (|x#0@@2| Int) ) (!  (=> (and (= (type $ly@@186) LayerTypeType) (= (type |q#0@@14|) (SeqType BoxType))) (= (LruModel.__default.Remove $ly@@186 |q#0@@14| |x#0@@2|) (LruModel.__default.Remove $LZ |q#0@@14| |x#0@@2|))) :qid |LruModel.46:12| :skolemid |1564| :pattern ( (LruModel.__default.Remove (AsFuelBottom $ly@@186) |q#0@@14| |x#0@@2|)) )))
(assert  (=> true (forall (($ly@@187 T@U) (|q#0@@15| T@U) (|x#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@187) LayerTypeType) (= (type |q#0@@15|) (SeqType BoxType))) (or (|LruModel.__default.Remove#canCall| |q#0@@15| |x#0@@3|) (and ($Is |q#0@@15| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 18446744073709551616))))) ($Is (LruModel.__default.Remove $ly@@187 |q#0@@15| |x#0@@3|) (TSeq Tclass.NativeTypes.uint64))) :qid |LruModel.46:12| :skolemid |1565| :pattern ( (LruModel.__default.Remove $ly@@187 |q#0@@15| |x#0@@3|)) ))))
(assert (forall (($ly@@188 T@U) (|q#0@@16| T@U) (|x#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@188) LayerTypeType) (= (type |q#0@@16|) (SeqType BoxType))) (and ($Is |q#0@@16| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 18446744073709551616)))) (and (=> (|LruModel.__default.Remove#requires| $ly@@188 |q#0@@16| |x#0@@4|) true) (=> true (|LruModel.__default.Remove#requires| $ly@@188 |q#0@@16| |x#0@@4|)))) :qid |LruModel.46:12| :skolemid |1566| :pattern ( (|LruModel.__default.Remove#requires| $ly@@188 |q#0@@16| |x#0@@4|)) )))
(assert  (=> true (forall (($ly@@189 T@U) (|q#0@@17| T@U) (|x#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@189) LayerTypeType) (= (type |q#0@@17|) (SeqType BoxType))) (or (|LruModel.__default.Remove#canCall| |q#0@@17| |x#0@@5|) (and ($Is |q#0@@17| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 18446744073709551616))))) (and (=> (not (= (|Seq#Length| |q#0@@17|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 |q#0@@17|) (=> (= (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |q#0@@17|))) |x#0@@5|) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 |q#0@@17|) (|LruModel.__default.Remove#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |q#0@@17|) |x#0@@5|)))) (=> (not (= (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |q#0@@17|))) |x#0@@5|)) (and (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 |q#0@@17|) (|LruModel.__default.Remove#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |q#0@@17|) |x#0@@5|)) (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 |q#0@@17|))))) (= (LruModel.__default.Remove ($LS $ly@@189) |q#0@@17| |x#0@@5|) (ite (= (|Seq#Length| |q#0@@17|) (LitInt 0)) (|Seq#Empty| BoxType) (ite (= (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |q#0@@17|))) |x#0@@5|) (LruModel.__default.Remove $ly@@189 (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |q#0@@17|) |x#0@@5|) (|Seq#Append| (LruModel.__default.Remove $ly@@189 (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |q#0@@17|) |x#0@@5|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.NativeTypes.uint64 |q#0@@17|)))))))) :qid |LruModel.46:12| :skolemid |1567| :pattern ( (LruModel.__default.Remove ($LS $ly@@189) |q#0@@17| |x#0@@5|)) ))))
(assert  (=> true (forall (($ly@@190 T@U) (|q#0@@18| T@U) (|x#0@@6| Int) ) (!  (=> (and (and (= (type $ly@@190) LayerTypeType) (= (type |q#0@@18|) (SeqType BoxType))) (or (|LruModel.__default.Remove#canCall| (Lit |q#0@@18|) (LitInt |x#0@@6|)) (and ($Is |q#0@@18| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@6|) (< |x#0@@6| 18446744073709551616))))) (and (=> (not (= (|Seq#Length| (Lit |q#0@@18|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 (Lit |q#0@@18|)) (=> (= (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |q#0@@18|))))) (LitInt |x#0@@6|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 (Lit |q#0@@18|)) (|LruModel.__default.Remove#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |q#0@@18|))) (LitInt |x#0@@6|))))) (=> (not (= (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |q#0@@18|))))) (LitInt |x#0@@6|))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 (Lit |q#0@@18|)) (|LruModel.__default.Remove#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |q#0@@18|))) (LitInt |x#0@@6|))) (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 (Lit |q#0@@18|)))))) (= (LruModel.__default.Remove ($LS $ly@@190) (Lit |q#0@@18|) (LitInt |x#0@@6|)) (ite (= (|Seq#Length| (Lit |q#0@@18|)) (LitInt 0)) (|Seq#Empty| BoxType) (ite (= (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |q#0@@18|))))) (LitInt |x#0@@6|)) (LruModel.__default.Remove ($LS $ly@@190) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |q#0@@18|))) (LitInt |x#0@@6|)) (|Seq#Append| (LruModel.__default.Remove ($LS $ly@@190) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |q#0@@18|))) (LitInt |x#0@@6|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |q#0@@18|)))))))))))))) :qid |LruModel.46:12| :weight 3 :skolemid |1568| :pattern ( (LruModel.__default.Remove ($LS $ly@@190) (Lit |q#0@@18|) (LitInt |x#0@@6|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@139 Int) ) (! (= (type (LruModel.__default.Use arg0@@260 arg1@@139)) (SeqType BoxType)) :qid |funType:LruModel.__default.Use| :pattern ( (LruModel.__default.Use arg0@@260 arg1@@139)) )))
(assert  (=> true (forall ((|q#0@@19| T@U) (|x#0@@7| Int) ) (!  (=> (and (= (type |q#0@@19|) (SeqType BoxType)) (or (|LruModel.__default.Use#canCall| |q#0@@19| |x#0@@7|) (and ($Is |q#0@@19| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@7|) (< |x#0@@7| 18446744073709551616))))) ($Is (LruModel.__default.Use |q#0@@19| |x#0@@7|) (TSeq Tclass.NativeTypes.uint64))) :qid |LruModel.53:16| :skolemid |1569| :pattern ( (LruModel.__default.Use |q#0@@19| |x#0@@7|)) ))))
(assert (forall ((|q#0@@20| T@U) (|x#0@@8| Int) ) (!  (=> (= (type |q#0@@20|) (SeqType BoxType)) (=> (and ($Is |q#0@@20| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@8|) (< |x#0@@8| 18446744073709551616))) (and (=> (|LruModel.__default.Use#requires| |q#0@@20| |x#0@@8|) true) (=> true (|LruModel.__default.Use#requires| |q#0@@20| |x#0@@8|))))) :qid |LruModel.53:16| :skolemid |1570| :pattern ( (|LruModel.__default.Use#requires| |q#0@@20| |x#0@@8|)) )))
(assert  (=> true (forall ((|q#0@@21| T@U) (|x#0@@9| Int) ) (!  (=> (and (= (type |q#0@@21|) (SeqType BoxType)) (or (|LruModel.__default.Use#canCall| |q#0@@21| |x#0@@9|) (and ($Is |q#0@@21| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@9|) (< |x#0@@9| 18446744073709551616))))) (and (|LruModel.__default.Remove#canCall| |q#0@@21| |x#0@@9|) (= (LruModel.__default.Use |q#0@@21| |x#0@@9|) (|Seq#Append| (LruModel.__default.Remove ($LS $LZ) |q#0@@21| |x#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |x#0@@9|))))))) :qid |LruModel.53:16| :skolemid |1571| :pattern ( (LruModel.__default.Use |q#0@@21| |x#0@@9|)) ))))
(assert  (=> true (forall ((|q#0@@22| T@U) (|x#0@@10| Int) ) (!  (=> (and (= (type |q#0@@22|) (SeqType BoxType)) (or (|LruModel.__default.Use#canCall| (Lit |q#0@@22|) (LitInt |x#0@@10|)) (and ($Is |q#0@@22| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |x#0@@10|) (< |x#0@@10| 18446744073709551616))))) (and (|LruModel.__default.Remove#canCall| (Lit |q#0@@22|) (LitInt |x#0@@10|)) (= (LruModel.__default.Use (Lit |q#0@@22|) (LitInt |x#0@@10|)) (|Seq#Append| (LruModel.__default.Remove ($LS $LZ) (Lit |q#0@@22|) (LitInt |x#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt |x#0@@10|)))))))) :qid |LruModel.53:16| :weight 3 :skolemid |1572| :pattern ( (LruModel.__default.Use (Lit |q#0@@22|) (LitInt |x#0@@10|))) ))))
(assert  (=> true (forall ((|q#0@@23| T@U) ) (!  (=> (and (= (type |q#0@@23|) (SeqType BoxType)) (or (|LruModel.__default.Next#canCall| |q#0@@23|) (and ($Is |q#0@@23| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (LruModel.__default.I |q#0@@23|)) 0)))) (and (U_2_bool (MapType0Select (LruModel.__default.I |q#0@@23|) ($Box (int_2_U (LruModel.__default.Next |q#0@@23|))))) (and (<= (LitInt 0) (LruModel.__default.Next |q#0@@23|)) (< (LruModel.__default.Next |q#0@@23|) 18446744073709551616)))) :qid |LruModel.58:17| :skolemid |1573| :pattern ( (LruModel.__default.Next |q#0@@23|)) ))))
(assert (forall ((|q#0@@24| T@U) ) (!  (=> (and (= (type |q#0@@24|) (SeqType BoxType)) ($Is |q#0@@24| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.Next#requires| |q#0@@24|) (> (|Set#Card| (LruModel.__default.I |q#0@@24|)) 0)) (=> (> (|Set#Card| (LruModel.__default.I |q#0@@24|)) 0) (|LruModel.__default.Next#requires| |q#0@@24|)))) :qid |LruModel.58:17| :skolemid |1574| :pattern ( (|LruModel.__default.Next#requires| |q#0@@24|)) )))
(assert  (=> true (forall ((|q#0@@25| T@U) ) (!  (=> (and (= (type |q#0@@25|) (SeqType BoxType)) (or (|LruModel.__default.Next#canCall| |q#0@@25|) (and ($Is |q#0@@25| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (LruModel.__default.I |q#0@@25|)) 0)))) (= (LruModel.__default.Next |q#0@@25|) (U_2_int ($Unbox intType (|Seq#Index| |q#0@@25| (LitInt 0)))))) :qid |LruModel.58:17| :skolemid |1575| :pattern ( (LruModel.__default.Next |q#0@@25|)) ))))
(assert  (=> true (forall ((|q#0@@26| T@U) ) (!  (=> (and (= (type |q#0@@26|) (SeqType BoxType)) (or (|LruModel.__default.Next#canCall| (Lit |q#0@@26|)) (and ($Is |q#0@@26| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (Lit (LruModel.__default.I (Lit |q#0@@26|)))) 0)))) (= (LruModel.__default.Next (Lit |q#0@@26|)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |q#0@@26|) (LitInt 0)))))) :qid |LruModel.58:17| :weight 3 :skolemid |1576| :pattern ( (LruModel.__default.Next (Lit |q#0@@26|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@140 T@U) ) (! (= (type (LruModel.__default.NextOpt arg0@@261 arg1@@140)) DatatypeTypeType) :qid |funType:LruModel.__default.NextOpt| :pattern ( (LruModel.__default.NextOpt arg0@@261 arg1@@140)) )))
(assert (forall (($ly@@191 T@U) (|q#0@@27| T@U) ) (!  (=> (and (= (type $ly@@191) LayerTypeType) (= (type |q#0@@27|) (SeqType BoxType))) (= (LruModel.__default.NextOpt ($LS $ly@@191) |q#0@@27|) (LruModel.__default.NextOpt $ly@@191 |q#0@@27|))) :qid |LruModel.65:22| :skolemid |1577| :pattern ( (LruModel.__default.NextOpt ($LS $ly@@191) |q#0@@27|)) )))
(assert (forall (($ly@@192 T@U) (|q#0@@28| T@U) ) (!  (=> (and (= (type $ly@@192) LayerTypeType) (= (type |q#0@@28|) (SeqType BoxType))) (= (LruModel.__default.NextOpt $ly@@192 |q#0@@28|) (LruModel.__default.NextOpt $LZ |q#0@@28|))) :qid |LruModel.65:22| :skolemid |1578| :pattern ( (LruModel.__default.NextOpt (AsFuelBottom $ly@@192) |q#0@@28|)) )))
(assert  (=> true (forall (($ly@@193 T@U) (|q#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@193) LayerTypeType) (= (type |q#0@@29|) (SeqType BoxType))) (or (|LruModel.__default.NextOpt#canCall| |q#0@@29|) ($Is |q#0@@29| (TSeq Tclass.NativeTypes.uint64)))) (and (and (=> (Options.Option.Some_q (LruModel.__default.NextOpt $ly@@193 |q#0@@29|)) (U_2_bool (MapType0Select (LruModel.__default.I |q#0@@29|) (Options.Option.value (LruModel.__default.NextOpt $ly@@193 |q#0@@29|))))) (=> (Options.Option.None_q (LruModel.__default.NextOpt $ly@@193 |q#0@@29|)) (|Set#Equal| (LruModel.__default.I |q#0@@29|) (|Set#Empty| BoxType)))) ($Is (LruModel.__default.NextOpt $ly@@193 |q#0@@29|) (Tclass.Options.Option Tclass.NativeTypes.uint64)))) :qid |LruModel.65:22| :skolemid |1579| :pattern ( (LruModel.__default.NextOpt $ly@@193 |q#0@@29|)) ))))
(assert (forall (($ly@@194 T@U) (|q#0@@30| T@U) ) (!  (=> (and (and (= (type $ly@@194) LayerTypeType) (= (type |q#0@@30|) (SeqType BoxType))) ($Is |q#0@@30| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.NextOpt#requires| $ly@@194 |q#0@@30|) true) (=> true (|LruModel.__default.NextOpt#requires| $ly@@194 |q#0@@30|)))) :qid |LruModel.65:22| :skolemid |1580| :pattern ( (|LruModel.__default.NextOpt#requires| $ly@@194 |q#0@@30|)) )))
(assert  (=> true (forall (($ly@@195 T@U) (|q#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@195) LayerTypeType) (= (type |q#0@@31|) (SeqType BoxType))) (or (|LruModel.__default.NextOpt#canCall| |q#0@@31|) ($Is |q#0@@31| (TSeq Tclass.NativeTypes.uint64)))) (= (LruModel.__default.NextOpt ($LS $ly@@195) |q#0@@31|) (ite (|Seq#Equal| |q#0@@31| (|Seq#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |q#0@@31| (LitInt 0)))))) :qid |LruModel.65:22| :skolemid |1581| :pattern ( (LruModel.__default.NextOpt ($LS $ly@@195) |q#0@@31|)) ))))
(assert  (=> true (forall (($ly@@196 T@U) (|q#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@196) LayerTypeType) (= (type |q#0@@32|) (SeqType BoxType))) (or (|LruModel.__default.NextOpt#canCall| (Lit |q#0@@32|)) ($Is |q#0@@32| (TSeq Tclass.NativeTypes.uint64)))) (= (LruModel.__default.NextOpt ($LS $ly@@196) (Lit |q#0@@32|)) (ite (|Seq#Equal| |q#0@@32| (|Seq#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |q#0@@32|) (LitInt 0)))))) :qid |LruModel.65:22| :weight 3 :skolemid |1582| :pattern ( (LruModel.__default.NextOpt ($LS $ly@@196) (Lit |q#0@@32|))) ))))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (LruModel.__default.Pop arg0@@262)) DatatypeTypeType) :qid |funType:LruModel.__default.Pop| :pattern ( (LruModel.__default.Pop arg0@@262)) )))
(assert  (=> true (forall ((|q#0@@33| T@U) ) (!  (=> (and (= (type |q#0@@33|) (SeqType BoxType)) (or (|LruModel.__default.Pop#canCall| |q#0@@33|) (and ($Is |q#0@@33| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (LruModel.__default.I |q#0@@33|)) 0)))) ($Is (LruModel.__default.Pop |q#0@@33|) (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.uint64) Tclass.NativeTypes.uint64))) :qid |LruModel.72:16| :skolemid |1583| :pattern ( (LruModel.__default.Pop |q#0@@33|)) ))))
(assert (forall ((|q#0@@34| T@U) ) (!  (=> (and (= (type |q#0@@34|) (SeqType BoxType)) ($Is |q#0@@34| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|LruModel.__default.Pop#requires| |q#0@@34|) (> (|Set#Card| (LruModel.__default.I |q#0@@34|)) 0)) (=> (> (|Set#Card| (LruModel.__default.I |q#0@@34|)) 0) (|LruModel.__default.Pop#requires| |q#0@@34|)))) :qid |LruModel.72:16| :skolemid |1584| :pattern ( (|LruModel.__default.Pop#requires| |q#0@@34|)) )))
(assert  (=> true (forall ((|q#0@@35| T@U) ) (!  (=> (and (= (type |q#0@@35|) (SeqType BoxType)) (or (|LruModel.__default.Pop#canCall| |q#0@@35|) (and ($Is |q#0@@35| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (LruModel.__default.I |q#0@@35|)) 0)))) (= (LruModel.__default.Pop |q#0@@35|) (|#_System._tuple#2._#Make2| ($Box (|Seq#Drop| |q#0@@35| (LitInt 1))) (|Seq#Index| |q#0@@35| (LitInt 0))))) :qid |LruModel.72:16| :skolemid |1585| :pattern ( (LruModel.__default.Pop |q#0@@35|)) ))))
(assert  (=> true (forall ((|q#0@@36| T@U) ) (!  (=> (and (= (type |q#0@@36|) (SeqType BoxType)) (or (|LruModel.__default.Pop#canCall| (Lit |q#0@@36|)) (and ($Is |q#0@@36| (TSeq Tclass.NativeTypes.uint64)) (> (|Set#Card| (Lit (LruModel.__default.I (Lit |q#0@@36|)))) 0)))) (= (LruModel.__default.Pop (Lit |q#0@@36|)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Drop| (Lit |q#0@@36|) (LitInt 1)))) (|Seq#Index| (Lit |q#0@@36|) (LitInt 0))))) :qid |LruModel.72:16| :weight 3 :skolemid |1586| :pattern ( (LruModel.__default.Pop (Lit |q#0@@36|))) ))))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |1587| :pattern ( ($IsBox bx@@103 Tclass.Sets.__default)) )))
(assert (forall (($o@@57 T@U) ) (!  (=> (= (type $o@@57) refType) (and (=> ($Is $o@@57 Tclass.Sets.__default) (or (= $o@@57 null) (= (dtype $o@@57) Tclass.Sets.__default))) (=> (or (= $o@@57 null) (= (dtype $o@@57) Tclass.Sets.__default)) ($Is $o@@57 Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |1588| :pattern ( ($Is $o@@57 Tclass.Sets.__default)) )))
(assert (forall (($o@@58 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@58) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@58 Tclass.Sets.__default $h@@73) (or (= $o@@58 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@58) alloc)))) (=> (or (= $o@@58 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@58) alloc))) ($IsAlloc $o@@58 Tclass.Sets.__default $h@@73)))) :qid |unknown.0:0| :skolemid |1589| :pattern ( ($IsAlloc $o@@58 Tclass.Sets.__default $h@@73)) )))
(assert (forall ((arg0@@263 Int) ) (! (= (type (Sets.__default.SetRange arg0@@263)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@263)) )))
(assert  (=> true (forall ((|n#0@@12| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@12|) (TSet TInt))) :qid |Setsidfy.32:21| :skolemid |1590| :pattern ( (Sets.__default.SetRange |n#0@@12|)) ))))
(assert (forall ((|n#0@@13| Int) ) (!  (and (=> (|Sets.__default.SetRange#requires| |n#0@@13|) true) (=> true (|Sets.__default.SetRange#requires| |n#0@@13|))) :qid |Setsidfy.32:21| :skolemid |1591| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@13|)) )))
(assert (forall ((arg0@@264 T@U) (arg1@@141 Int) (arg2@@89 Int) ) (! (= (type (|lambda#25| arg0@@264 arg1@@141 arg2@@89)) (MapType0Type BoxType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@264 arg1@@141 arg2@@89)) )))
(assert  (=> true (forall ((|n#0@@14| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@14|) (|lambda#25| TInt (LitInt 0) |n#0@@14|))) :qid |Setsidfy.32:21| :skolemid |1592| :pattern ( (Sets.__default.SetRange |n#0@@14|)) ))))
(assert  (=> true (forall ((|n#0@@15| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@15|)) (|lambda#25| TInt (LitInt 0) |n#0@@15|))) :qid |Setsidfy.32:21| :weight 3 :skolemid |1593| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@15|))) ))))
(assert (= (type Tclass.SetBijectivity.__default) TyType))
(assert (= (Tag Tclass.SetBijectivity.__default) Tagclass.SetBijectivity.__default))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.SetBijectivity.__default)) (and (= ($Box ($Unbox refType bx@@104)) bx@@104) ($Is ($Unbox refType bx@@104) Tclass.SetBijectivity.__default))) :qid |unknown.0:0| :skolemid |1594| :pattern ( ($IsBox bx@@104 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@59 T@U) ) (!  (=> (= (type $o@@59) refType) (and (=> ($Is $o@@59 Tclass.SetBijectivity.__default) (or (= $o@@59 null) (= (dtype $o@@59) Tclass.SetBijectivity.__default))) (=> (or (= $o@@59 null) (= (dtype $o@@59) Tclass.SetBijectivity.__default)) ($Is $o@@59 Tclass.SetBijectivity.__default)))) :qid |unknown.0:0| :skolemid |1595| :pattern ( ($Is $o@@59 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@60 T@U) ($h@@74 T@U) ) (!  (=> (and (= (type $o@@60) refType) (= (type $h@@74) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@60 Tclass.SetBijectivity.__default $h@@74) (or (= $o@@60 null) (U_2_bool (MapType1Select (MapType0Select $h@@74 $o@@60) alloc)))) (=> (or (= $o@@60 null) (U_2_bool (MapType1Select (MapType0Select $h@@74 $o@@60) alloc))) ($IsAlloc $o@@60 Tclass.SetBijectivity.__default $h@@74)))) :qid |unknown.0:0| :skolemid |1596| :pattern ( ($IsAlloc $o@@60 Tclass.SetBijectivity.__default $h@@74)) )))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@105)) bx@@105) ($Is ($Unbox refType bx@@105) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |1597| :pattern ( ($IsBox bx@@105 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@61 T@U) ) (!  (=> (= (type $o@@61) refType) (and (=> ($Is $o@@61 Tclass.SeqComparison.__default) (or (= $o@@61 null) (= (dtype $o@@61) Tclass.SeqComparison.__default))) (=> (or (= $o@@61 null) (= (dtype $o@@61) Tclass.SeqComparison.__default)) ($Is $o@@61 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |1598| :pattern ( ($Is $o@@61 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@62 T@U) ($h@@75 T@U) ) (!  (=> (and (= (type $o@@62) refType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@62 Tclass.SeqComparison.__default $h@@75) (or (= $o@@62 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@62) alloc)))) (=> (or (= $o@@62 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@62) alloc))) ($IsAlloc $o@@62 Tclass.SeqComparison.__default $h@@75)))) :qid |unknown.0:0| :skolemid |1599| :pattern ( ($IsAlloc $o@@62 Tclass.SeqComparison.__default $h@@75)) )))
(assert (forall (($ly@@197 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@197) LayerTypeType) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@197) |a#0@@66| |b#0@@40|) (SeqComparison.__default.lte $ly@@197 |a#0@@66| |b#0@@40|)) (=> (SeqComparison.__default.lte $ly@@197 |a#0@@66| |b#0@@40|) (SeqComparison.__default.lte ($LS $ly@@197) |a#0@@66| |b#0@@40|)))) :qid |SeqCompa.9:23| :skolemid |1600| :pattern ( (SeqComparison.__default.lte ($LS $ly@@197) |a#0@@66| |b#0@@40|)) )))
(assert (forall (($ly@@198 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (= (type $ly@@198) LayerTypeType) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@198 |a#0@@67| |b#0@@41|) (SeqComparison.__default.lte $LZ |a#0@@67| |b#0@@41|)) (=> (SeqComparison.__default.lte $LZ |a#0@@67| |b#0@@41|) (SeqComparison.__default.lte $ly@@198 |a#0@@67| |b#0@@41|)))) :qid |SeqCompa.9:23| :skolemid |1601| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@198) |a#0@@67| |b#0@@41|)) )))
(assert  (=> true (forall (($ly@@199 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@199) LayerTypeType) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@68| |b#0@@42|) (and ($Is |a#0@@68| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@42| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |1602| :pattern ( (SeqComparison.__default.lte $ly@@199 |a#0@@68| |b#0@@42|)) ))))
(assert (forall (($ly@@200 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (= (type $ly@@200) LayerTypeType) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (and ($Is |a#0@@69| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@43| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@200 |a#0@@69| |b#0@@43|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@200 |a#0@@69| |b#0@@43|)))) :qid |SeqCompa.9:23| :skolemid |1603| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@200 |a#0@@69| |b#0@@43|)) )))
(assert  (=> true (forall (($ly@@201 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (= (type $ly@@201) LayerTypeType) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@70| |b#0@@44|) (and ($Is |a#0@@70| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@44| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@70|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@44|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@70| (LitInt 1)) (|Seq#Drop| |b#0@@44| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@201) |a#0@@70| |b#0@@44|) (ite (= (|Seq#Length| |a#0@@70|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@44|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@201 (|Seq#Drop| |a#0@@70| (LitInt 1)) (|Seq#Drop| |b#0@@44| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@70|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@44|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@44| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@70| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@201 (|Seq#Drop| |a#0@@70| (LitInt 1)) (|Seq#Drop| |b#0@@44| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@201) |a#0@@70| |b#0@@44|))))) :qid |SeqCompa.9:23| :skolemid |1604| :pattern ( (SeqComparison.__default.lte ($LS $ly@@201) |a#0@@70| |b#0@@44|)) ))))
(assert  (=> true (forall (($ly@@202 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@202) LayerTypeType) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@71|) |b#0@@45|) (and ($Is |a#0@@71| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@45| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@45|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (|Seq#Drop| |b#0@@45| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@202) (Lit |a#0@@71|) |b#0@@45|) (ite (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@45|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@202) (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (|Seq#Drop| |b#0@@45| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@71|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@45|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@45| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@71|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@202) (Lit (|Seq#Drop| (Lit |a#0@@71|) (LitInt 1))) (|Seq#Drop| |b#0@@45| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@202) (Lit |a#0@@71|) |b#0@@45|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1605| :pattern ( (SeqComparison.__default.lte ($LS $ly@@202) (Lit |a#0@@71|) |b#0@@45|)) ))))
(assert  (=> true (forall (($ly@@203 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@203) LayerTypeType) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@72|) (Lit |b#0@@46|)) (and ($Is |a#0@@72| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@46| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@46|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@72|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@46|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@203) (Lit |a#0@@72|) (Lit |b#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@46|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@203) (Lit (|Seq#Drop| (Lit |a#0@@72|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@46|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@46|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@46|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@72|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@203) (Lit (|Seq#Drop| (Lit |a#0@@72|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@46|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@203) (Lit |a#0@@72|) (Lit |b#0@@46|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1606| :pattern ( (SeqComparison.__default.lte ($LS $ly@@203) (Lit |a#0@@72|) (Lit |b#0@@46|))) ))))
(assert  (=> true (forall ((|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (= (type |a#0@@73|) (SeqType BoxType)) (= (type |b#0@@47|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@73| |b#0@@47|) (and ($Is |a#0@@73| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@47| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |1607| :pattern ( (SeqComparison.__default.lt |a#0@@73| |b#0@@47|)) ))))
(assert (forall ((|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (= (type |a#0@@74|) (SeqType BoxType)) (= (type |b#0@@48|) (SeqType BoxType))) (and ($Is |a#0@@74| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@48| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@74| |b#0@@48|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@74| |b#0@@48|)))) :qid |SeqCompa.25:16| :skolemid |1608| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@74| |b#0@@48|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (= (type |a#0@@75|) (SeqType BoxType)) (= (type |b#0@@49|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@75| |b#0@@49|) (and ($Is |a#0@@75| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@49| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@75| |b#0@@49|) (and (=> (SeqComparison.__default.lt |a#0@@75| |b#0@@49|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@75| |b#0@@49|) (not (|Seq#Equal| |a#0@@75| |b#0@@49|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@75| |b#0@@49|) (not (|Seq#Equal| |a#0@@75| |b#0@@49|))) (SeqComparison.__default.lt |a#0@@75| |b#0@@49|))))) :qid |SeqCompa.25:16| :skolemid |1609| :pattern ( (SeqComparison.__default.lt |a#0@@75| |b#0@@49|)) ))))
(assert  (=> true (forall ((|a#0@@76| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (= (type |a#0@@76|) (SeqType BoxType)) (= (type |b#0@@50|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@76|) (Lit |b#0@@50|)) (and ($Is |a#0@@76| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@50| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@76|) (Lit |b#0@@50|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@76|) (Lit |b#0@@50|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@76|) (Lit |b#0@@50|)) (not (|Seq#Equal| |a#0@@76| |b#0@@50|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@76|) (Lit |b#0@@50|)) (not (|Seq#Equal| |a#0@@76| |b#0@@50|))) (SeqComparison.__default.lt (Lit |a#0@@76|) (Lit |b#0@@50|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |1610| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@76|) (Lit |b#0@@50|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@106)) bx@@106) ($Is ($Unbox refType bx@@106) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |1611| :pattern ( ($IsBox bx@@106 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@63 T@U) ) (!  (=> (= (type $o@@63) refType) (and (=> ($Is $o@@63 Tclass.NativeArrays.__default) (or (= $o@@63 null) (= (dtype $o@@63) Tclass.NativeArrays.__default))) (=> (or (= $o@@63 null) (= (dtype $o@@63) Tclass.NativeArrays.__default)) ($Is $o@@63 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |1612| :pattern ( ($Is $o@@63 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@64 T@U) ($h@@76 T@U) ) (!  (=> (and (= (type $o@@64) refType) (= (type $h@@76) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@64 Tclass.NativeArrays.__default $h@@76) (or (= $o@@64 null) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@64) alloc)))) (=> (or (= $o@@64 null) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@64) alloc))) ($IsAlloc $o@@64 Tclass.NativeArrays.__default $h@@76)))) :qid |unknown.0:0| :skolemid |1613| :pattern ( ($IsAlloc $o@@64 Tclass.NativeArrays.__default $h@@76)) )))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@107)) bx@@107) ($Is ($Unbox refType bx@@107) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |1614| :pattern ( ($IsBox bx@@107 Tclass.Maps.__default)) )))
(assert (forall (($o@@65 T@U) ) (!  (=> (= (type $o@@65) refType) (and (=> ($Is $o@@65 Tclass.Maps.__default) (or (= $o@@65 null) (= (dtype $o@@65) Tclass.Maps.__default))) (=> (or (= $o@@65 null) (= (dtype $o@@65) Tclass.Maps.__default)) ($Is $o@@65 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |1615| :pattern ( ($Is $o@@65 Tclass.Maps.__default)) )))
(assert (forall (($o@@66 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@66) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@66 Tclass.Maps.__default $h@@77) (or (= $o@@66 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@66) alloc)))) (=> (or (= $o@@66 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@66) alloc))) ($IsAlloc $o@@66 Tclass.Maps.__default $h@@77)))) :qid |unknown.0:0| :skolemid |1616| :pattern ( ($IsAlloc $o@@66 Tclass.Maps.__default $h@@77)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0| T@U) (|k#0| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0|) (IMapType BoxType BoxType))) (= (type |k#0|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|) (and (and ($Is |m#0| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0| Maps._default.IMapsTo$K)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |1617| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@0| T@U) (|k#0@@0| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@0|) (IMapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (type |v#0@@7|) BoxType)) (and (and ($Is |m#0@@0| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@0| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)))) :qid |unknown.0:0| :skolemid |1618| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@1| T@U) (|k#0@@1| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@1|) (IMapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (and ($Is |m#0@@1| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@1| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |1619| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@2| T@U) (|k#0@@2| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@2|) (IMapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (and ($Is |m#0@@2| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@2| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@9| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))))) :qid |unknown.0:0| :weight 3 :skolemid |1620| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@3| T@U) (|k#0@@3| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|) (and (and ($Is |m#0@@3| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@3| Maps._default.MapsTo$K)) ($IsBox |v#0@@10| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |1621| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@4| T@U) (|k#0@@4| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@4| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@4| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |1622| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@5| T@U) (|k#0@@5| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (and ($Is |m#0@@5| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@5| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |1623| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@6| T@U) (|k#0@@6| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (and ($Is |m#0@@6| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@6| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |1624| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@7| T@U) (|k#0@@7| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (and ($Is |m#0@@7| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@7| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@14| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |1625| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@8| T@U) (|m'#0| T@U) (|k#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|) (and (and ($Is |m#0@@8| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@8| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |1626| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@9| T@U) (|m'#0@@0| T@U) (|k#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (and (and ($Is |m#0@@9| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@9| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)))) :qid |unknown.0:0| :skolemid |1627| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@10| T@U) (|m'#0@@1| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@10| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)))) :qid |unknown.0:0| :skolemid |1628| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@11| T@U) (|m'#0@@2| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@11| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)))) :qid |unknown.0:0| :weight 3 :skolemid |1629| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@12| T@U) (|m'#0@@3| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@12| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))))) :qid |unknown.0:0| :weight 3 :skolemid |1630| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@13| T@U) (|m'#0@@4| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@13| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |1631| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@14| T@U) (|m'#0@@5| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@14| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)))) :qid |unknown.0:0| :skolemid |1632| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@15| T@U) (|m'#0@@6| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@15| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)))) :qid |unknown.0:0| :skolemid |1633| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@16| T@U) (|m'#0@@7| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@16| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))))) :qid |unknown.0:0| :weight 3 :skolemid |1634| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |1635| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |1636| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0| T@U) ) (!  (=> (and (and (= (type |key#0|) BoxType) ($IsBox |key#0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :qid |Mapssdfy.28:16| :skolemid |1637| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@0|) BoxType) ($IsBox |key#0@@0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :qid |Mapssdfy.28:16| :skolemid |1638| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@1|) BoxType) ($IsBox |key#0@@1| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :qid |Mapssdfy.28:16| :skolemid |1638| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |1639| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1| T@U) ) (!  (=> (and (and (= (type |key#1|) BoxType) ($IsBox |key#1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1|)) :qid |Mapssdfy.28:16| :skolemid |1640| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@0| T@U) ) (!  (=> (and (and (= (type |key#1@@0|) BoxType) ($IsBox |key#1@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@0|)) :qid |Mapssdfy.28:16| :skolemid |1641| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) BoxType) ($IsBox |key#1@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@1|)) :qid |Mapssdfy.28:16| :skolemid |1641| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1642| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |1643| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |1644| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@2|) BoxType) ($IsBox |key#0@@2| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :qid |Mapssdfy.33:16| :skolemid |1645| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@3| T@U) ) (!  (=> (and (and (= (type |key#0@@3|) BoxType) ($IsBox |key#0@@3| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :qid |Mapssdfy.33:16| :skolemid |1646| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@4| T@U) ) (!  (=> (and (and (= (type |key#0@@4|) BoxType) ($IsBox |key#0@@4| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :qid |Mapssdfy.33:16| :skolemid |1646| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |1647| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@2|)) :qid |Mapssdfy.33:16| :skolemid |1648| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@3|)) :qid |Mapssdfy.33:16| :skolemid |1649| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapssdfy.33:16| :skolemid |1649| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1650| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@265 T@U) (arg1@@142 T@U) (arg2@@90 T@U) (arg3@@60 T@U) (arg4@@43 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@265 arg1@@142 arg2@@90 arg3@@60 arg4@@43)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@265 arg1@@142 arg2@@90 arg3@@60 arg4@@43)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@204 T@U) (|m#0@@17| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@204) LayerTypeType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@204) |m#0@@17| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@204 |m#0@@17| |ks#0|))) :qid |unknown.0:0| :skolemid |1651| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@204) |m#0@@17| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@205 T@U) (|m#0@@18| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@205) LayerTypeType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@205 |m#0@@18| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@18| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |1652| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@205) |m#0@@18| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@206 T@U) (|m#0@@19| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@206) LayerTypeType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@19| |ks#0@@1|) (and ($Is |m#0@@19| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@17| T@U) ) (!  (=> (and (and (= (type |k#0@@17|) BoxType) ($IsBox |k#0@@17| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@17|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@17|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |k#0@@17|))) :qid |Mapssdfy.37:20| :skolemid |1653| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |k#0@@17|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@17|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@17|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapssdfy.38:20| :skolemid |1654| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |j#0@@8|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |j#0@@8|) (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@8|))) :qid |Mapssdfy.39:20| :skolemid |1655| :pattern ( (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) |j#0@@8|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@19|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) (|Map#Card| |m#0@@19|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |1656| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@206 |m#0@@19| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@207 T@U) (|m#0@@20| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@207) LayerTypeType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@20| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@207 |m#0@@20| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@207 |m#0@@20| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |1657| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@207 |m#0@@20| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@266 T@U) (arg1@@143 T@U) (arg2@@91 T@U) ) (! (= (type (|lambda#27| arg0@@266 arg1@@143 arg2@@91)) (MapType0Type BoxType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@266 arg1@@143 arg2@@91)) )) (forall ((arg0@@267 T@U) ) (! (= (type (|lambda#28| arg0@@267)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@267)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@208 T@U) (|m#0@@21| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@208) LayerTypeType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@21| |ks#0@@3|) (and ($Is |m#0@@21| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@208) |m#0@@21| |ks#0@@3|) (let ((|m'#0@@8| (|Map#Glue| (|lambda#27| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@21|) |ks#0@@3|) (|lambda#28| (|Map#Elements| |m#0@@21|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@8|))) :qid |unknown.0:0| :skolemid |1658| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@208) |m#0@@21| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@209 T@U) (|m#0@@22| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@209) LayerTypeType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@22|) (Lit |ks#0@@4|)) (and ($Is |m#0@@22| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@209) (Lit |m#0@@22|) (Lit |ks#0@@4|)) (let ((|m'#1| (|Map#Glue| (|lambda#27| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@22|) (Lit |ks#0@@4|)) (|lambda#28| (|Map#Elements| (Lit |m#0@@22|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |1659| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@209) (Lit |m#0@@22|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@268 T@U) (arg1@@144 T@U) (arg2@@92 T@U) (arg3@@61 T@U) (arg4@@44 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@268 arg1@@144 arg2@@92 arg3@@61 arg4@@44)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@268 arg1@@144 arg2@@92 arg3@@61 arg4@@44)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@210 T@U) (|m#0@@23| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@210) LayerTypeType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@210) |m#0@@23| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@210 |m#0@@23| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |1660| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@210) |m#0@@23| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@211 T@U) (|m#0@@24| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@211) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@211 |m#0@@24| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@24| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |1661| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@211) |m#0@@24| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@212 T@U) (|m#0@@25| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@212) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@25| |ks#0@@7|) (and ($Is |m#0@@25| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@25|) |ks#0@@7|)) (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) |j#0@@9|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) |j#0@@9|) (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@9|))) :qid |Mapssdfy.50:20| :skolemid |1662| :pattern ( (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) |j#0@@9|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@25|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) (|Map#Card| |m#0@@25|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |1663| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@212 |m#0@@25| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@213 T@U) (|m#0@@26| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@213) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@26| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@213 |m#0@@26| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@213 |m#0@@26| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |1664| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@213 |m#0@@26| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@214 T@U) (|m#0@@27| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and ($Is |m#0@@27| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@214) |m#0@@27| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@27| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |1665| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@214) |m#0@@27| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@215 T@U) (|m#0@@28| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and ($Is |m#0@@28| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@215) (Lit |m#0@@28|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@28|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1666| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@215) (Lit |m#0@@28|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@269 T@U) (arg1@@145 T@U) (arg2@@93 T@U) (arg3@@62 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@269 arg1@@145 arg2@@93 arg3@@62 arg4@@45)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@269 arg1@@145 arg2@@93 arg3@@62 arg4@@45)) )))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@216 T@U) (|m#0@@29| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@216) |m#0@@29| |k#0@@18|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@216 |m#0@@29| |k#0@@18|))) :qid |unknown.0:0| :skolemid |1667| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@216) |m#0@@29| |k#0@@18|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@217 T@U) (|m#0@@30| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@217 |m#0@@30| |k#0@@19|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@30| |k#0@@19|))) :qid |unknown.0:0| :skolemid |1668| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@217) |m#0@@30| |k#0@@19|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@218 T@U) (|m#0@@31| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@31| |k#0@@20|) (and ($Is |m#0@@31| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@20| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@10|)) (not (= |j#0@@10| |k#0@@20|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#0@@10|))) :qid |Mapssdfy.59:20| :skolemid |1669| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@10|)) )) (forall ((|j#1@@3| T@U) ) (!  (=> (and (= (type |j#1@@3|) BoxType) ($IsBox |j#1@@3| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#1@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#1@@3|)) (not (= |j#1@@3| |k#0@@20|))))) :qid |Mapssdfy.60:20| :skolemid |1670| :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#1@@3|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|))) :qid |Mapssdfy.61:20| :skolemid |1671| :pattern ( (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|))) (|Set#Card| (|Map#Domain| |m#0@@31|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@20|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) (- (|Map#Card| |m#0@@31|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@20|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) (|Map#Card| |m#0@@31|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |1672| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@218 |m#0@@31| |k#0@@20|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@219 T@U) (|m#0@@32| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (and ($Is |m#0@@32| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@21| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@219 |m#0@@32| |k#0@@21|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@219 |m#0@@32| |k#0@@21|)))) :qid |unknown.0:0| :skolemid |1673| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@219 |m#0@@32| |k#0@@21|)) )))
(assert (forall ((arg0@@270 T@U) (arg1@@146 T@U) (arg2@@94 T@U) ) (! (= (type (|lambda#31| arg0@@270 arg1@@146 arg2@@94)) (MapType0Type BoxType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@270 arg1@@146 arg2@@94)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@220 T@U) (|m#0@@33| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@33| |k#0@@22|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@22| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@220) |m#0@@33| |k#0@@22|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#31| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@33|) |k#0@@22|) (|lambda#28| (|Map#Elements| |m#0@@33|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |1674| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@220) |m#0@@33| |k#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@221 T@U) (|m#0@@34| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@34|) |k#0@@23|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@23| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@221) (Lit |m#0@@34|) |k#0@@23|) (let ((|m'#1@@0| (|Map#Glue| (|lambda#31| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@34|) |k#0@@23|) (|lambda#28| (|Map#Elements| (Lit |m#0@@34|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |1675| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@221) (Lit |m#0@@34|) |k#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@222 T@U) (|m#0@@35| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@35|) (Lit |k#0@@24|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@24| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@222) (Lit |m#0@@35|) (Lit |k#0@@24|)) (let ((|m'#2| (|Map#Glue| (|lambda#31| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@35|) |k#0@@24|) (|lambda#28| (|Map#Elements| (Lit |m#0@@35|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |1676| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@222) (Lit |m#0@@35|) (Lit |k#0@@24|))) ))))
(assert (forall ((arg0@@271 T@U) (arg1@@147 T@U) (arg2@@95 T@U) (arg3@@63 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@271 arg1@@147 arg2@@95 arg3@@63 arg4@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@271 arg1@@147 arg2@@95 arg3@@63 arg4@@46)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@223 T@U) (|m#0@@36| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@223) |m#0@@36| |k#0@@25|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@223 |m#0@@36| |k#0@@25|))) :qid |unknown.0:0| :skolemid |1677| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@223) |m#0@@36| |k#0@@25|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@224 T@U) (|m#0@@37| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@224 |m#0@@37| |k#0@@26|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@37| |k#0@@26|))) :qid |unknown.0:0| :skolemid |1678| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@224) |m#0@@37| |k#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@225 T@U) (|m#0@@38| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@38| |k#0@@27|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@27| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) (|Set#Difference| (|Map#Domain| |m#0@@38|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@27|))) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) |j#0@@11|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) |j#0@@11|) (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@11|))) :qid |Mapssdfy.76:20| :skolemid |1679| :pattern ( (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@11|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) |j#0@@11|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) |j#0@@11|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|))) (|Set#Card| (|Map#Domain| |m#0@@38|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) (|Map#Card| |m#0@@38|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |1680| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@225 |m#0@@38| |k#0@@27|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@226 T@U) (|m#0@@39| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@28| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@226 |m#0@@39| |k#0@@28|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@226 |m#0@@39| |k#0@@28|)))) :qid |unknown.0:0| :skolemid |1681| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@226 |m#0@@39| |k#0@@28|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove10) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@227 T@U) (|m#0@@40| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@29|) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@29| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@29|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove10)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove10) MoreFuel_Maps._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@227) |m#0@@40| |k#0@@29|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@40| |k#0@@29|))))) :qid |unknown.0:0| :skolemid |1682| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@227) |m#0@@40| |k#0@@29|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@228 T@U) (|m#0@@41| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@30|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@30| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@30|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove11)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove11) MoreFuel_Maps._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@228) (Lit |m#0@@41|) |k#0@@30|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@41|) |k#0@@30|))))) :qid |unknown.0:0| :weight 3 :skolemid |1683| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@228) (Lit |m#0@@41|) |k#0@@30|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@229 T@U) (|m#0@@42| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@31|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@31| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@31|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove12)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove12) MoreFuel_Maps._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@229) (Lit |m#0@@42|) (Lit |k#0@@31|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@42|) (Lit |k#0@@31|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1684| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@229) (Lit |m#0@@42|) (Lit |k#0@@31|))) ))))
(assert (forall ((arg0@@272 T@U) (arg1@@148 T@U) (arg2@@96 T@U) (arg3@@64 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@272 arg1@@148 arg2@@96 arg3@@64 arg4@@47)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@272 arg1@@148 arg2@@96 arg3@@64 arg4@@47)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@230 T@U) (|m#0@@43| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@43|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@230) |m#0@@43| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@230 |m#0@@43| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |1685| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@230) |m#0@@43| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@231 T@U) (|m#0@@44| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@44|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@231 |m#0@@44| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@44| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |1686| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@231) |m#0@@44| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@232 T@U) (|m#0@@45| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@45|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@45| |ks#0@@13|) (and ($Is |m#0@@45| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@45|) |ks#0@@13|)) (forall ((|j#0@@12| T@U) ) (!  (=> (and (and (= (type |j#0@@12|) BoxType) ($IsBox |j#0@@12| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) |j#0@@12|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) |j#0@@12|) (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@12|))) :qid |Mapssdfy.86:20| :skolemid |1687| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) |j#0@@12|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |1688| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@232 |m#0@@45| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@233 T@U) (|m#0@@46| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@46|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@233 |m#0@@46| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@233 |m#0@@46| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |1689| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@233 |m#0@@46| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@234 T@U) (|m#0@@47| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@47|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@47| |ks#0@@15|) (and ($Is |m#0@@47| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@234) |m#0@@47| |ks#0@@15|) (|IMap#Glue| (|lambda#27| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@47|) |ks#0@@15|) (|lambda#28| (|IMap#Elements| |m#0@@47|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |1690| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@234) |m#0@@47| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@235 T@U) (|m#0@@48| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@16|)) (and ($Is |m#0@@48| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@235) (Lit |m#0@@48|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#27| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@48|) (Lit |ks#0@@16|)) (|lambda#28| (|IMap#Elements| (Lit |m#0@@48|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1691| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@235) (Lit |m#0@@48|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@273 T@U) (arg1@@149 T@U) (arg2@@97 T@U) (arg3@@65 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@273 arg1@@149 arg2@@97 arg3@@65 arg4@@48)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@273 arg1@@149 arg2@@97 arg3@@65 arg4@@48)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@236 T@U) (|m#0@@49| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@236) |m#0@@49| |k#0@@32|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@236 |m#0@@49| |k#0@@32|))) :qid |unknown.0:0| :skolemid |1692| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@236) |m#0@@49| |k#0@@32|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@237 T@U) (|m#0@@50| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@237 |m#0@@50| |k#0@@33|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@50| |k#0@@33|))) :qid |unknown.0:0| :skolemid |1693| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@237) |m#0@@50| |k#0@@33|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@238 T@U) (|m#0@@51| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@51| |k#0@@34|) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@34| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) (|ISet#Difference| (|IMap#Domain| |m#0@@51|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@34|))) (forall ((|j#0@@13| T@U) ) (!  (=> (and (and (= (type |j#0@@13|) BoxType) ($IsBox |j#0@@13| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) |j#0@@13|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) |j#0@@13|) (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@13|))) :qid |Mapssdfy.93:20| :skolemid |1694| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@13|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) |j#0@@13|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) |j#0@@13|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |1695| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@238 |m#0@@51| |k#0@@34|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@239 T@U) (|m#0@@52| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@35| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@239 |m#0@@52| |k#0@@35|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@239 |m#0@@52| |k#0@@35|)))) :qid |unknown.0:0| :skolemid |1696| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@239 |m#0@@52| |k#0@@35|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@240 T@U) (|m#0@@53| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@53| |k#0@@36|) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@36| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@240) |m#0@@53| |k#0@@36|) (|IMap#Glue| (|lambda#31| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@53|) |k#0@@36|) (|lambda#28| (|IMap#Elements| |m#0@@53|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |1697| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@240) |m#0@@53| |k#0@@36|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@241 T@U) (|m#0@@54| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@54|) (Lit |k#0@@37|)) (and ($Is |m#0@@54| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@37| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@241) (Lit |m#0@@54|) (Lit |k#0@@37|)) (|IMap#Glue| (|lambda#31| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@54|) |k#0@@37|) (|lambda#28| (|IMap#Elements| (Lit |m#0@@54|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1698| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@241) (Lit |m#0@@54|) (Lit |k#0@@37|))) ))))
(assert (forall ((arg0@@274 T@U) (arg1@@150 T@U) (arg2@@98 T@U) (arg3@@66 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@274 arg1@@150 arg2@@98 arg3@@66)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@274 arg1@@150 arg2@@98 arg3@@66)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@55| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (and ($Is |m#0@@55| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |1699| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@56| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@56| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |1700| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)) )))
(assert (forall ((arg0@@275 T@U) (arg1@@151 T@U) (arg2@@99 T@U) ) (! (= (type (|lambda#45| arg0@@275 arg1@@151 arg2@@99)) (MapType0Type BoxType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@275 arg1@@151 arg2@@99)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@57| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (and ($Is |m#0@@57| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (|Map#Glue| (|lambda#45| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@57|)) (|lambda#28| (|Map#Elements| |m#0@@57|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1701| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@58| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#45| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@58|)) (|lambda#28| (|Map#Elements| (Lit |m#0@@58|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1702| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@276 T@U) (arg1@@152 T@U) (arg2@@100 T@U) (arg3@@67 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@276 arg1@@152 arg2@@100 arg3@@67)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@276 arg1@@152 arg2@@100 arg3@@67)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@59| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (and ($Is |m#0@@59| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |1703| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@60| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@60| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |1704| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@61| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (and ($Is |m#0@@61| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (|Map#Glue| (|lambda#45| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@61|) |ks#0@@23|) (|lambda#28| (|Map#Elements| |m#0@@61|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1705| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@62| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (and ($Is |m#0@@62| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (|Map#Glue| (|lambda#45| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@62|) |ks#0@@24|) (|lambda#28| (|Map#Elements| (Lit |m#0@@62|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1706| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@63| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (and ($Is |m#0@@63| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#45| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@63|) (Lit |ks#0@@25|)) (|lambda#28| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |1707| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@277 T@U) (arg1@@153 T@U) (arg2@@101 T@U) (arg3@@68 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@277 arg1@@153 arg2@@101 arg3@@68)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@277 arg1@@153 arg2@@101 arg3@@68)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |1708| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |1709| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (|IMap#Glue| (|lambda#45| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@66|)) (|lambda#28| (|IMap#Elements| |m#0@@66|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1710| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#45| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@67|)) (|lambda#28| (|IMap#Elements| (Lit |m#0@@67|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1711| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@278 T@U) (arg1@@154 T@U) (arg2@@102 T@U) (arg3@@69 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@278 arg1@@154 arg2@@102 arg3@@69 arg4@@49)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@278 arg1@@154 arg2@@102 arg3@@69 arg4@@49)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@242 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@242) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@242 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |1712| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@242) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@243 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@243 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |1713| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@243) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@244 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@38| T@U) ) (!  (=> (and (and (= (type |k#0@@38|) BoxType) ($IsBox |k#0@@38| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@38|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@38|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#0@@38|))) :qid |Mapssdfy.114:18| :skolemid |1714| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#0@@38|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@38|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@38|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapssdfy.115:18| :skolemid |1715| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1716| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@244 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@245 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@245 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@245 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |1717| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@245 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@279 T@U) (arg1@@155 T@U) (arg2@@103 T@U) ) (! (= (type (|lambda#59| arg0@@279 arg1@@155 arg2@@103)) (MapType0Type BoxType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@279 arg1@@155 arg2@@103)) )) (forall ((arg0@@280 T@U) (arg1@@156 T@U) (arg2@@104 T@U) ) (! (= (type (|lambda#60| arg0@@280 arg1@@156 arg2@@104)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@280 arg1@@156 arg2@@104)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@246 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@246) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#59| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#60| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |1718| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@246) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@247 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#59| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#60| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1719| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@281 T@U) (arg1@@157 T@U) (arg2@@105 T@U) (arg3@@70 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@281 arg1@@157 arg2@@105 arg3@@70 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@281 arg1@@157 arg2@@105 arg3@@70 arg4@@50)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@248 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@248) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@248 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |1720| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@248) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@249 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@249 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |1721| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@249) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@250 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@39| T@U) ) (!  (=> (and (and (= (type |k#0@@39|) BoxType) ($IsBox |k#0@@39| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@39|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#0@@39|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@39|))) :qid |Mapssdfy.124:20| :skolemid |1722| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@39|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#0@@39|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@39|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#1@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#1@@1|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapssdfy.125:20| :skolemid |1723| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapssdfy.126:20| :skolemid |1724| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |1725| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@250 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@251 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@251 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@251 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |1726| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@251 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@252 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#59| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#60| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |1727| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@253 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#59| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#60| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1728| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@158 T@U) (arg2@@106 T@U) (arg3@@71 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@282 arg1@@158 arg2@@106 arg3@@71 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@282 arg1@@158 arg2@@106 arg3@@71 arg4@@51)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@254 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@254) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@254 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |1729| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@254) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@255 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@255 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |1730| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@255) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@256 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@40| T@U) ) (!  (=> (and (and (= (type |k#0@@40|) BoxType) ($IsBox |k#0@@40| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@40|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#0@@40|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@40|))) :qid |Mapssdfy.133:20| :skolemid |1731| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@40|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#1@@2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#1@@2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapssdfy.134:20| :skolemid |1732| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapssdfy.135:20| :skolemid |1733| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |1734| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@256 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@257 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@257 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@257 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |1735| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@257 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@258 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#59| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#60| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |1736| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@259 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#59| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#60| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1737| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@283 T@U) (arg1@@159 T@U) (arg2@@107 T@U) (arg3@@72 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@283 arg1@@159 arg2@@107 arg3@@72 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@283 arg1@@159 arg2@@107 arg3@@72 arg4@@52)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@260 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@260) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@260 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |1738| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@260) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@261 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@261 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |1739| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@261) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@262 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@41| T@U) ) (!  (=> (and (and (= (type |k#0@@41|) BoxType) ($IsBox |k#0@@41| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#0@@41|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#0@@41|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@41|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#0@@41|))) :qid |Mapssdfy.144:18| :skolemid |1740| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#0@@41|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@41|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#1@@3|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#1@@3|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapssdfy.145:18| :skolemid |1741| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#2@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#2@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapssdfy.146:18| :skolemid |1742| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1743| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@262 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@263 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@263 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@263 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |1744| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@263 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@264 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@264) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |1745| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@264) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@265 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |1746| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@284 T@U) (arg1@@160 T@U) (arg2@@108 T@U) (arg3@@73 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@284 arg1@@160 arg2@@108 arg3@@73 arg4@@53)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@284 arg1@@160 arg2@@108 arg3@@73 arg4@@53)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@266 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@266) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@266 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |1747| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@266) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@267 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@267 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |1748| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@267) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@268 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@42| T@U) ) (!  (=> (and (and (= (type |k#0@@42|) BoxType) ($IsBox |k#0@@42| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@42|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#0@@42|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@42|))) :qid |Mapssdfy.153:20| :skolemid |1749| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@42|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#0@@42|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@42|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#1@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#1@@4|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapssdfy.154:20| :skolemid |1750| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapssdfy.155:20| :skolemid |1751| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |1752| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@268 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@269 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@269 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@269 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |1753| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@269 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@270 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@270) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#59| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#60| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |1754| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@270) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@271 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@271) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#59| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#60| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1755| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@271) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@161 T@U) (arg2@@109 T@U) (arg3@@74 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@285 arg1@@161 arg2@@109 arg3@@74 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@285 arg1@@161 arg2@@109 arg3@@74 arg4@@54)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@272 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@272) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@272 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |1756| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@272) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@273 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@273 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |1757| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@273) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@274 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@43| T@U) ) (!  (=> (and (and (= (type |k#0@@43|) BoxType) ($IsBox |k#0@@43| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@43|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#0@@43|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@43|))) :qid |Mapssdfy.162:20| :skolemid |1758| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@43|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#0@@43|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@43|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#1@@5|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#1@@5|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapssdfy.163:20| :skolemid |1759| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapssdfy.164:20| :skolemid |1760| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |1761| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@274 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@275 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@275 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@275 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |1762| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@275 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@276 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@276) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#59| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#60| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |1763| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@276) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@277 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@277) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#59| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#60| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1764| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@277) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@286 T@U) (arg1@@162 T@U) (arg2@@110 T@U) (arg3@@75 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@286 arg1@@162 arg2@@110 arg3@@75 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@286 arg1@@162 arg2@@110 arg3@@75 arg4@@55)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@278 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@278) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@278 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |1765| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@278) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@279 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@279 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |1766| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@279) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@280 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@44| T@U) ) (!  (=> (and (and (= (type |k#0@@44|) BoxType) ($IsBox |k#0@@44| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#0@@44|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#0@@44|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@44|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#0@@44|))) :qid |Mapssdfy.173:18| :skolemid |1767| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#0@@44|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@44|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#1@@6|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#1@@6|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapssdfy.174:18| :skolemid |1768| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#2@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapssdfy.175:18| :skolemid |1769| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1770| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@280 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@281 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@281 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@281 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |1771| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@281 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@282 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@282) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |1772| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@282) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@283 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@283) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |1773| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@283) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@287 T@U) (arg1@@163 T@U) (arg2@@111 T@U) (arg3@@76 T@U) (arg4@@56 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@287 arg1@@163 arg2@@111 arg3@@76 arg4@@56 arg5@@21)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@287 arg1@@163 arg2@@111 arg3@@76 arg4@@56 arg5@@21)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@284 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@284) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@284 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |1774| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@284) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@285 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@285 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |1775| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@285) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@286 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@45| T@U) ) (!  (=> (and (and (= (type |k#0@@45|) BoxType) ($IsBox |k#0@@45| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@45|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@45|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@45|))) :qid |Mapssdfy.185:18| :skolemid |1776| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@45|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapssdfy.186:18| :skolemid |1777| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapssdfy.187:18| :skolemid |1778| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |1779| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@286 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@287 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@287 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@287 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |1780| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@287 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@288 T@U) (arg1@@164 T@U) (arg2@@112 T@U) (arg3@@77 T@U) ) (! (= (type (|lambda#79| arg0@@288 arg1@@164 arg2@@112 arg3@@77)) (MapType0Type BoxType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@288 arg1@@164 arg2@@112 arg3@@77)) )) (forall ((arg0@@289 T@U) (arg1@@165 T@U) (arg2@@113 T@U) (arg3@@78 T@U) (arg4@@57 T@U) ) (! (= (type (|lambda#80| arg0@@289 arg1@@165 arg2@@113 arg3@@78 arg4@@57)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@289 arg1@@165 arg2@@113 arg3@@78 arg4@@57)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@288 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@288) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#79| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#80| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |1781| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@288) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@289 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@289) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#79| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#80| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1782| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@289) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@290 T@U) (arg1@@166 T@U) (arg2@@114 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@290 arg1@@166 arg2@@114)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@290 arg1@@166 arg2@@114)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) ($Is |m#0@@68| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |1783| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) ($Is |m#0@@69| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)))) :qid |unknown.0:0| :skolemid |1784| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)) )))
(assert (forall ((arg0@@291 T@U) (arg1@@167 T@U) ) (! (= (type (|lambda#83| arg0@@291 arg1@@167)) (MapType0Type BoxType boolType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@291 arg1@@167)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) ($Is |m#0@@70| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) (|IMap#Glue| (|lambda#83| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@70|)) (|lambda#28| (|Map#Elements| |m#0@@70|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |1785| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) ($Is |m#0@@71| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#83| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@71|)) (|lambda#28| (|Map#Elements| (Lit |m#0@@71|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1786| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|))) ))))
(assert (forall ((arg0@@292 T@U) (arg1@@168 T@U) (arg2@@115 T@U) (arg3@@79 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@292 arg1@@168 arg2@@115 arg3@@79)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@292 arg1@@168 arg2@@115 arg3@@79)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@72| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |key#0@@5|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (and ($Is |m#0@@72| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@5| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |1787| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@73| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |key#0@@6|) BoxType)) (and ($Is |m#0@@73| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@6| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)))) :qid |unknown.0:0| :skolemid |1788| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@74| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |key#0@@7|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (and ($Is |m#0@@74| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@7| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@74|) |key#0@@7|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@74|) |key#0@@7|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |1789| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@75| T@U) (|key#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |key#0@@8|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (and ($Is |m#0@@75| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@8| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@75|) |key#0@@8|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@75|)) |key#0@@8|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1790| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@76| T@U) (|key#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |key#0@@9|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (and ($Is |m#0@@76| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@9| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@76|) |key#0@@9|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@76|)) (Lit |key#0@@9|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1791| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|))) ))))
(assert (forall ((arg0@@293 T@U) (arg1@@169 T@U) (arg2@@116 T@U) (arg3@@80 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@293 arg1@@169 arg2@@116 arg3@@80)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@293 arg1@@169 arg2@@116 arg3@@80)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |key#0@@10|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (and ($Is |m#0@@77| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@10| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |1792| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |key#0@@11|) BoxType)) (and ($Is |m#0@@78| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@11| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)))) :qid |unknown.0:0| :skolemid |1793| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |key#0@@12|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (and ($Is |m#0@@79| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@12| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@79|) |key#0@@12|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@79|) |key#0@@12|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |1794| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |key#0@@13|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (and ($Is |m#0@@80| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@13| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@80|) |key#0@@13|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@80|)) (Lit |key#0@@13|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1795| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|))) ))))
(assert (= (type Tclass.NativeArithmetic.__default) TyType))
(assert (= (Tag Tclass.NativeArithmetic.__default) Tagclass.NativeArithmetic.__default))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.NativeArithmetic.__default)) (and (= ($Box ($Unbox refType bx@@108)) bx@@108) ($Is ($Unbox refType bx@@108) Tclass.NativeArithmetic.__default))) :qid |unknown.0:0| :skolemid |1796| :pattern ( ($IsBox bx@@108 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@67 T@U) ) (!  (=> (= (type $o@@67) refType) (and (=> ($Is $o@@67 Tclass.NativeArithmetic.__default) (or (= $o@@67 null) (= (dtype $o@@67) Tclass.NativeArithmetic.__default))) (=> (or (= $o@@67 null) (= (dtype $o@@67) Tclass.NativeArithmetic.__default)) ($Is $o@@67 Tclass.NativeArithmetic.__default)))) :qid |unknown.0:0| :skolemid |1797| :pattern ( ($Is $o@@67 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@68 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@68) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@68 Tclass.NativeArithmetic.__default $h@@78) (or (= $o@@68 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@68) alloc)))) (=> (or (= $o@@68 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@68) alloc))) ($IsAlloc $o@@68 Tclass.NativeArithmetic.__default $h@@78)))) :qid |unknown.0:0| :skolemid |1798| :pattern ( ($IsAlloc $o@@68 Tclass.NativeArithmetic.__default $h@@78)) )))
(assert  (=> true (forall ((|a#0@@77| Int) (|b#0@@51| Int) ) (!  (=> (or (|NativeArithmetic.__default.u64add#canCall| |a#0@@77| |b#0@@51|) (and (and (<= (LitInt 0) |a#0@@77|) (< |a#0@@77| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@51|) (< |b#0@@51| 18446744073709551616)))) (and (= (NativeArithmetic.__default.u64add |a#0@@77| |b#0@@51|) (ite (< (+ |a#0@@77| |b#0@@51|) 18446744073709551616) (+ |a#0@@77| |b#0@@51|) (- (+ |a#0@@77| |b#0@@51|) 18446744073709551616))) (and (<= (LitInt 0) (NativeArithmetic.__default.u64add |a#0@@77| |b#0@@51|)) (< (NativeArithmetic.__default.u64add |a#0@@77| |b#0@@51|) 18446744073709551616)))) :qid |Arithmet.7:10| :skolemid |1799| :pattern ( (NativeArithmetic.__default.u64add |a#0@@77| |b#0@@51|)) ))))
(assert (forall ((|a#0@@78| Int) (|b#0@@52| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@78|) (< |a#0@@78| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@52|) (< |b#0@@52| 18446744073709551616))) (and (=> (|NativeArithmetic.__default.u64add#requires| |a#0@@78| |b#0@@52|) true) (=> true (|NativeArithmetic.__default.u64add#requires| |a#0@@78| |b#0@@52|)))) :qid |Arithmet.7:10| :skolemid |1800| :pattern ( (|NativeArithmetic.__default.u64add#requires| |a#0@@78| |b#0@@52|)) )))
(assert (forall ((arg0@@294 Int) ) (! (= (type (|#MutableMapModel.Slot.Slot| arg0@@294)) DatatypeTypeType) :qid |funType:#MutableMapModel.Slot.Slot| :pattern ( (|#MutableMapModel.Slot.Slot| arg0@@294)) )))
(assert (forall ((|a#0#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.Slot.Slot| |a#0#0#0@@0|)) |##MutableMapModel.Slot.Slot|) :qid |MutableM.64:30| :skolemid |1801| :pattern ( (|#MutableMapModel.Slot.Slot| |a#0#0#0@@0|)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (= (type d@@17) DatatypeTypeType) (and (=> (MutableMapModel.Slot.Slot_q d@@17) (= (DatatypeCtorId d@@17) |##MutableMapModel.Slot.Slot|)) (=> (= (DatatypeCtorId d@@17) |##MutableMapModel.Slot.Slot|) (MutableMapModel.Slot.Slot_q d@@17)))) :qid |unknown.0:0| :skolemid |1802| :pattern ( (MutableMapModel.Slot.Slot_q d@@17)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (MutableMapModel.Slot.Slot_q d@@18)) (exists ((|a#1#0#0@@0| Int) ) (! (= d@@18 (|#MutableMapModel.Slot.Slot| |a#1#0#0@@0|)) :qid |MutableM.64:30| :skolemid |1803| ))) :qid |unknown.0:0| :skolemid |1804| :pattern ( (MutableMapModel.Slot.Slot_q d@@18)) )))
(assert (= (type Tclass.MutableMapModel.Slot) TyType))
(assert (= (Tag Tclass.MutableMapModel.Slot) Tagclass.MutableMapModel.Slot))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass.MutableMapModel.Slot)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass.MutableMapModel.Slot))) :qid |unknown.0:0| :skolemid |1805| :pattern ( ($IsBox bx@@109 Tclass.MutableMapModel.Slot)) )))
(assert (forall ((|a#2#0#0@@0| Int) ) (!  (and (=> ($Is (|#MutableMapModel.Slot.Slot| |a#2#0#0@@0|) Tclass.MutableMapModel.Slot) ($Is (int_2_U |a#2#0#0@@0|) Tclass._System.nat)) (=> ($Is (int_2_U |a#2#0#0@@0|) Tclass._System.nat) ($Is (|#MutableMapModel.Slot.Slot| |a#2#0#0@@0|) Tclass.MutableMapModel.Slot))) :qid |MutableM.64:30| :skolemid |1806| :pattern ( ($Is (|#MutableMapModel.Slot.Slot| |a#2#0#0@@0|) Tclass.MutableMapModel.Slot)) )))
(assert (forall ((|a#3#0#0@@0| Int) ($h@@79 T@U) ) (!  (=> (and (= (type $h@@79) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@79)) (and (=> ($IsAlloc (|#MutableMapModel.Slot.Slot| |a#3#0#0@@0|) Tclass.MutableMapModel.Slot $h@@79) ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass._System.nat $h@@79)) (=> ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass._System.nat $h@@79) ($IsAlloc (|#MutableMapModel.Slot.Slot| |a#3#0#0@@0|) Tclass.MutableMapModel.Slot $h@@79)))) :qid |MutableM.64:30| :skolemid |1807| :pattern ( ($IsAlloc (|#MutableMapModel.Slot.Slot| |a#3#0#0@@0|) Tclass.MutableMapModel.Slot $h@@79)) )))
(assert (forall ((d@@19 T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@80) (and (MutableMapModel.Slot.Slot_q d@@19) ($IsAlloc d@@19 Tclass.MutableMapModel.Slot $h@@80)))) ($IsAlloc (int_2_U (MutableMapModel.Slot.slot d@@19)) Tclass._System.nat $h@@80)) :qid |unknown.0:0| :skolemid |1808| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Slot.slot d@@19)) Tclass._System.nat $h@@80)) )))
(assert (forall ((|a#4#0#0@@0| Int) ) (! (= (|#MutableMapModel.Slot.Slot| (LitInt |a#4#0#0@@0|)) (Lit (|#MutableMapModel.Slot.Slot| |a#4#0#0@@0|))) :qid |MutableM.64:30| :skolemid |1809| :pattern ( (|#MutableMapModel.Slot.Slot| (LitInt |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| Int) ) (! (= (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |a#5#0#0@@1|)) |a#5#0#0@@1|) :qid |MutableM.64:30| :skolemid |1810| :pattern ( (|#MutableMapModel.Slot.Slot| |a#5#0#0@@1|)) )))
(assert (forall ((d@@20 T@U) ) (!  (=> (and (= (type d@@20) DatatypeTypeType) (|$IsA#MutableMapModel.Slot| d@@20)) (MutableMapModel.Slot.Slot_q d@@20)) :qid |unknown.0:0| :skolemid |1811| :pattern ( (|$IsA#MutableMapModel.Slot| d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) ($Is d@@21 Tclass.MutableMapModel.Slot)) (MutableMapModel.Slot.Slot_q d@@21)) :qid |unknown.0:0| :skolemid |1812| :pattern ( (MutableMapModel.Slot.Slot_q d@@21) ($Is d@@21 Tclass.MutableMapModel.Slot)) )))
(assert (forall ((a@@119 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) true) (and (=> (|MutableMapModel.Slot#Equal| a@@119 b@@69) (= (MutableMapModel.Slot.slot a@@119) (MutableMapModel.Slot.slot b@@69))) (=> (= (MutableMapModel.Slot.slot a@@119) (MutableMapModel.Slot.slot b@@69)) (|MutableMapModel.Slot#Equal| a@@119 b@@69)))) :qid |unknown.0:0| :skolemid |1813| :pattern ( (|MutableMapModel.Slot#Equal| a@@119 b@@69)) )))
(assert (forall ((a@@120 T@U) (b@@70 T@U) ) (!  (=> (and (= (type a@@120) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (=> (|MutableMapModel.Slot#Equal| a@@120 b@@70) (= a@@120 b@@70)) (=> (= a@@120 b@@70) (|MutableMapModel.Slot#Equal| a@@120 b@@70)))) :qid |unknown.0:0| :skolemid |1814| :pattern ( (|MutableMapModel.Slot#Equal| a@@120 b@@70)) )))
(assert (= (type |#MutableMapModel.Item.Empty|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MutableMapModel.Item.Empty|) |##MutableMapModel.Item.Empty|))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (and (=> (MutableMapModel.Item.Empty_q d@@22) (= (DatatypeCtorId d@@22) |##MutableMapModel.Item.Empty|)) (=> (= (DatatypeCtorId d@@22) |##MutableMapModel.Item.Empty|) (MutableMapModel.Item.Empty_q d@@22)))) :qid |unknown.0:0| :skolemid |1815| :pattern ( (MutableMapModel.Item.Empty_q d@@22)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (MutableMapModel.Item.Empty_q d@@23)) (= d@@23 |#MutableMapModel.Item.Empty|)) :qid |unknown.0:0| :skolemid |1816| :pattern ( (MutableMapModel.Item.Empty_q d@@23)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass.MutableMapModel.Item arg0@@295)) TyType) :qid |funType:Tclass.MutableMapModel.Item| :pattern ( (Tclass.MutableMapModel.Item arg0@@295)) )))
(assert (forall ((MutableMapModel.Item$V T@U) ) (!  (=> (= (type MutableMapModel.Item$V) TyType) (= (Tag (Tclass.MutableMapModel.Item MutableMapModel.Item$V)) Tagclass.MutableMapModel.Item)) :qid |unknown.0:0| :skolemid |1817| :pattern ( (Tclass.MutableMapModel.Item MutableMapModel.Item$V)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass.MutableMapModel.Item_0 arg0@@296)) TyType) :qid |funType:Tclass.MutableMapModel.Item_0| :pattern ( (Tclass.MutableMapModel.Item_0 arg0@@296)) )))
(assert (forall ((MutableMapModel.Item$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.Item$V@@0) TyType) (= (Tclass.MutableMapModel.Item_0 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@0)) MutableMapModel.Item$V@@0)) :qid |unknown.0:0| :skolemid |1818| :pattern ( (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@0)) )))
(assert (forall ((MutableMapModel.Item$V@@1 T@U) (bx@@110 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@1) TyType) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1)))) :qid |unknown.0:0| :skolemid |1819| :pattern ( ($IsBox bx@@110 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1))) )))
(assert (forall ((MutableMapModel.Item$V@@2 T@U) ) (!  (=> (= (type MutableMapModel.Item$V@@2) TyType) ($Is |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@2))) :qid |unknown.0:0| :skolemid |1820| :pattern ( ($Is |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@2))) )))
(assert (forall ((MutableMapModel.Item$V@@3 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@3) TyType) (= (type $h@@81) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@81)) ($IsAlloc |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@3) $h@@81)) :qid |unknown.0:0| :skolemid |1821| :pattern ( ($IsAlloc |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@3) $h@@81)) )))
(assert (= |#MutableMapModel.Item.Empty| (Lit |#MutableMapModel.Item.Empty|)))
(assert (forall ((arg0@@297 Int) (arg1@@170 T@U) ) (! (= (type (|#MutableMapModel.Item.Entry| arg0@@297 arg1@@170)) DatatypeTypeType) :qid |funType:#MutableMapModel.Item.Entry| :pattern ( (|#MutableMapModel.Item.Entry| arg0@@297 arg1@@170)) )))
(assert (forall ((|a#11#0#0@@0| Int) (|a#11#1#0| T@U) ) (!  (=> (= (type |a#11#1#0|) BoxType) (= (DatatypeCtorId (|#MutableMapModel.Item.Entry| |a#11#0#0@@0| |a#11#1#0|)) |##MutableMapModel.Item.Entry|)) :qid |MutableM.66:36| :skolemid |1822| :pattern ( (|#MutableMapModel.Item.Entry| |a#11#0#0@@0| |a#11#1#0|)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (= (type d@@24) DatatypeTypeType) (and (=> (MutableMapModel.Item.Entry_q d@@24) (= (DatatypeCtorId d@@24) |##MutableMapModel.Item.Entry|)) (=> (= (DatatypeCtorId d@@24) |##MutableMapModel.Item.Entry|) (MutableMapModel.Item.Entry_q d@@24)))) :qid |unknown.0:0| :skolemid |1823| :pattern ( (MutableMapModel.Item.Entry_q d@@24)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (MutableMapModel.Item.Entry_q d@@25)) (exists ((|a#12#0#0| Int) (|a#12#1#0| T@U) ) (!  (and (= (type |a#12#1#0|) BoxType) (= d@@25 (|#MutableMapModel.Item.Entry| |a#12#0#0| |a#12#1#0|))) :qid |MutableM.66:36| :skolemid |1824| :no-pattern (type |a#12#1#0|) :no-pattern (U_2_int |a#12#1#0|) :no-pattern (U_2_bool |a#12#1#0|) ))) :qid |unknown.0:0| :skolemid |1825| :pattern ( (MutableMapModel.Item.Entry_q d@@25)) )))
(assert (forall ((MutableMapModel.Item$V@@4 T@U) (|a#13#0#0| Int) (|a#13#1#0| T@U) ) (!  (=> (and (= (type MutableMapModel.Item$V@@4) TyType) (= (type |a#13#1#0|) BoxType)) (and (=> ($Is (|#MutableMapModel.Item.Entry| |a#13#0#0| |a#13#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@4)) (and ($Is (int_2_U |a#13#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#13#1#0| MutableMapModel.Item$V@@4))) (=> (and ($Is (int_2_U |a#13#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#13#1#0| MutableMapModel.Item$V@@4)) ($Is (|#MutableMapModel.Item.Entry| |a#13#0#0| |a#13#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@4))))) :qid |unknown.0:0| :skolemid |1826| :pattern ( ($Is (|#MutableMapModel.Item.Entry| |a#13#0#0| |a#13#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@4))) )))
(assert (forall ((MutableMapModel.Item$V@@5 T@U) (|a#14#0#0| Int) (|a#14#1#0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.Item$V@@5) TyType) (= (type |a#14#1#0|) BoxType)) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (and (=> ($IsAlloc (|#MutableMapModel.Item.Entry| |a#14#0#0| |a#14#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@5) $h@@82) (and ($IsAlloc (int_2_U |a#14#0#0|) Tclass.NativeTypes.uint64 $h@@82) ($IsAllocBox |a#14#1#0| MutableMapModel.Item$V@@5 $h@@82))) (=> (and ($IsAlloc (int_2_U |a#14#0#0|) Tclass.NativeTypes.uint64 $h@@82) ($IsAllocBox |a#14#1#0| MutableMapModel.Item$V@@5 $h@@82)) ($IsAlloc (|#MutableMapModel.Item.Entry| |a#14#0#0| |a#14#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@5) $h@@82)))) :qid |unknown.0:0| :skolemid |1827| :pattern ( ($IsAlloc (|#MutableMapModel.Item.Entry| |a#14#0#0| |a#14#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@5) $h@@82)) )))
(assert (forall ((d@@26 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@26) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (MutableMapModel.Item.Entry_q d@@26) (exists ((MutableMapModel.Item$V@@6 T@U) ) (!  (and (= (type MutableMapModel.Item$V@@6) TyType) ($IsAlloc d@@26 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@6) $h@@83)) :qid |unknown.0:0| :skolemid |1828| :pattern ( ($IsAlloc d@@26 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@6) $h@@83)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@26)) Tclass.NativeTypes.uint64 $h@@83)) :qid |unknown.0:0| :skolemid |1829| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@26)) Tclass.NativeTypes.uint64 $h@@83)) )))
(assert (forall ((arg0@@298 T@U) ) (! (= (type (MutableMapModel.Item.value arg0@@298)) BoxType) :qid |funType:MutableMapModel.Item.value| :pattern ( (MutableMapModel.Item.value arg0@@298)) )))
(assert (forall ((d@@27 T@U) (MutableMapModel.Item$V@@7 T@U) ($h@@84 T@U) ) (!  (=> (and (and (and (= (type d@@27) DatatypeTypeType) (= (type MutableMapModel.Item$V@@7) TyType)) (= (type $h@@84) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@84) (and (MutableMapModel.Item.Entry_q d@@27) ($IsAlloc d@@27 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@7) $h@@84)))) ($IsAllocBox (MutableMapModel.Item.value d@@27) MutableMapModel.Item$V@@7 $h@@84)) :qid |unknown.0:0| :skolemid |1830| :pattern ( ($IsAllocBox (MutableMapModel.Item.value d@@27) MutableMapModel.Item$V@@7 $h@@84)) )))
(assert (forall ((|a#15#0#0| Int) (|a#15#1#0| T@U) ) (!  (=> (= (type |a#15#1#0|) BoxType) (= (|#MutableMapModel.Item.Entry| (LitInt |a#15#0#0|) (Lit |a#15#1#0|)) (Lit (|#MutableMapModel.Item.Entry| |a#15#0#0| |a#15#1#0|)))) :qid |MutableM.66:36| :skolemid |1831| :pattern ( (|#MutableMapModel.Item.Entry| (LitInt |a#15#0#0|) (Lit |a#15#1#0|))) )))
(assert (forall ((|a#16#0#0| Int) (|a#16#1#0| T@U) ) (!  (=> (= (type |a#16#1#0|) BoxType) (= (MutableMapModel.Item.key (|#MutableMapModel.Item.Entry| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)) :qid |MutableM.66:36| :skolemid |1832| :pattern ( (|#MutableMapModel.Item.Entry| |a#16#0#0| |a#16#1#0|)) )))
(assert (forall ((|a#17#0#0| Int) (|a#17#1#0| T@U) ) (!  (=> (= (type |a#17#1#0|) BoxType) (= (MutableMapModel.Item.value (|#MutableMapModel.Item.Entry| |a#17#0#0| |a#17#1#0|)) |a#17#1#0|)) :qid |MutableM.66:36| :skolemid |1833| :pattern ( (|#MutableMapModel.Item.Entry| |a#17#0#0| |a#17#1#0|)) )))
(assert (forall ((|a#18#0#0| Int) (|a#18#1#0| T@U) ) (!  (=> (= (type |a#18#1#0|) BoxType) (< (BoxRank |a#18#1#0|) (DtRank (|#MutableMapModel.Item.Entry| |a#18#0#0| |a#18#1#0|)))) :qid |MutableM.66:36| :skolemid |1834| :pattern ( (|#MutableMapModel.Item.Entry| |a#18#0#0| |a#18#1#0|)) )))
(assert (forall ((arg0@@299 Int) ) (! (= (type (|#MutableMapModel.Item.Tombstone| arg0@@299)) DatatypeTypeType) :qid |funType:#MutableMapModel.Item.Tombstone| :pattern ( (|#MutableMapModel.Item.Tombstone| arg0@@299)) )))
(assert (forall ((|a#19#0#0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.Item.Tombstone| |a#19#0#0|)) |##MutableMapModel.Item.Tombstone|) :qid |MutableM.66:71| :skolemid |1835| :pattern ( (|#MutableMapModel.Item.Tombstone| |a#19#0#0|)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (= (type d@@28) DatatypeTypeType) (and (=> (MutableMapModel.Item.Tombstone_q d@@28) (= (DatatypeCtorId d@@28) |##MutableMapModel.Item.Tombstone|)) (=> (= (DatatypeCtorId d@@28) |##MutableMapModel.Item.Tombstone|) (MutableMapModel.Item.Tombstone_q d@@28)))) :qid |unknown.0:0| :skolemid |1836| :pattern ( (MutableMapModel.Item.Tombstone_q d@@28)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) (MutableMapModel.Item.Tombstone_q d@@29)) (exists ((|a#20#0#0| Int) ) (! (= d@@29 (|#MutableMapModel.Item.Tombstone| |a#20#0#0|)) :qid |MutableM.66:71| :skolemid |1837| ))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (MutableMapModel.Item.Tombstone_q d@@29)) )))
(assert (forall ((MutableMapModel.Item$V@@8 T@U) (|a#21#0#0| Int) ) (!  (=> (= (type MutableMapModel.Item$V@@8) TyType) (and (=> ($Is (|#MutableMapModel.Item.Tombstone| |a#21#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@8)) ($Is (int_2_U |a#21#0#0|) Tclass.NativeTypes.uint64)) (=> ($Is (int_2_U |a#21#0#0|) Tclass.NativeTypes.uint64) ($Is (|#MutableMapModel.Item.Tombstone| |a#21#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@8))))) :qid |unknown.0:0| :skolemid |1839| :pattern ( ($Is (|#MutableMapModel.Item.Tombstone| |a#21#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@8))) )))
(assert (forall ((MutableMapModel.Item$V@@9 T@U) (|a#22#0#0| Int) ($h@@85 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@9) TyType) (= (type $h@@85) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@85)) (and (=> ($IsAlloc (|#MutableMapModel.Item.Tombstone| |a#22#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@9) $h@@85) ($IsAlloc (int_2_U |a#22#0#0|) Tclass.NativeTypes.uint64 $h@@85)) (=> ($IsAlloc (int_2_U |a#22#0#0|) Tclass.NativeTypes.uint64 $h@@85) ($IsAlloc (|#MutableMapModel.Item.Tombstone| |a#22#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@9) $h@@85)))) :qid |unknown.0:0| :skolemid |1840| :pattern ( ($IsAlloc (|#MutableMapModel.Item.Tombstone| |a#22#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@9) $h@@85)) )))
(assert (forall ((d@@30 T@U) ($h@@86 T@U) ) (!  (=> (and (and (= (type d@@30) DatatypeTypeType) (= (type $h@@86) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@86) (and (MutableMapModel.Item.Tombstone_q d@@30) (exists ((MutableMapModel.Item$V@@10 T@U) ) (!  (and (= (type MutableMapModel.Item$V@@10) TyType) ($IsAlloc d@@30 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@10) $h@@86)) :qid |unknown.0:0| :skolemid |1841| :pattern ( ($IsAlloc d@@30 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@10) $h@@86)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@30)) Tclass.NativeTypes.uint64 $h@@86)) :qid |unknown.0:0| :skolemid |1842| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@30)) Tclass.NativeTypes.uint64 $h@@86)) )))
(assert (forall ((|a#23#0#0| Int) ) (! (= (|#MutableMapModel.Item.Tombstone| (LitInt |a#23#0#0|)) (Lit (|#MutableMapModel.Item.Tombstone| |a#23#0#0|))) :qid |MutableM.66:71| :skolemid |1843| :pattern ( (|#MutableMapModel.Item.Tombstone| (LitInt |a#23#0#0|))) )))
(assert (forall ((|a#24#0#0| Int) ) (! (= (MutableMapModel.Item.key (|#MutableMapModel.Item.Tombstone| |a#24#0#0|)) |a#24#0#0|) :qid |MutableM.66:71| :skolemid |1844| :pattern ( (|#MutableMapModel.Item.Tombstone| |a#24#0#0|)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (|$IsA#MutableMapModel.Item| d@@31)) (or (or (MutableMapModel.Item.Empty_q d@@31) (MutableMapModel.Item.Entry_q d@@31)) (MutableMapModel.Item.Tombstone_q d@@31))) :qid |unknown.0:0| :skolemid |1845| :pattern ( (|$IsA#MutableMapModel.Item| d@@31)) )))
(assert (forall ((MutableMapModel.Item$V@@11 T@U) (d@@32 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@11) TyType) (= (type d@@32) DatatypeTypeType)) ($Is d@@32 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) (or (or (MutableMapModel.Item.Empty_q d@@32) (MutableMapModel.Item.Entry_q d@@32)) (MutableMapModel.Item.Tombstone_q d@@32))) :qid |unknown.0:0| :skolemid |1846| :pattern ( (MutableMapModel.Item.Tombstone_q d@@32) ($Is d@@32 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) :pattern ( (MutableMapModel.Item.Entry_q d@@32) ($Is d@@32 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) :pattern ( (MutableMapModel.Item.Empty_q d@@32) ($Is d@@32 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) )))
(assert (forall ((a@@121 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (MutableMapModel.Item.Empty_q a@@121) (MutableMapModel.Item.Empty_q b@@71))) (and (=> (|MutableMapModel.Item#Equal| a@@121 b@@71) true) (=> true (|MutableMapModel.Item#Equal| a@@121 b@@71)))) :qid |unknown.0:0| :skolemid |1847| :pattern ( (|MutableMapModel.Item#Equal| a@@121 b@@71) (MutableMapModel.Item.Empty_q a@@121)) :pattern ( (|MutableMapModel.Item#Equal| a@@121 b@@71) (MutableMapModel.Item.Empty_q b@@71)) )))
(assert (forall ((a@@122 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (MutableMapModel.Item.Entry_q a@@122) (MutableMapModel.Item.Entry_q b@@72))) (and (=> (|MutableMapModel.Item#Equal| a@@122 b@@72) (and (= (MutableMapModel.Item.key a@@122) (MutableMapModel.Item.key b@@72)) (= (MutableMapModel.Item.value a@@122) (MutableMapModel.Item.value b@@72)))) (=> (and (= (MutableMapModel.Item.key a@@122) (MutableMapModel.Item.key b@@72)) (= (MutableMapModel.Item.value a@@122) (MutableMapModel.Item.value b@@72))) (|MutableMapModel.Item#Equal| a@@122 b@@72)))) :qid |unknown.0:0| :skolemid |1848| :pattern ( (|MutableMapModel.Item#Equal| a@@122 b@@72) (MutableMapModel.Item.Entry_q a@@122)) :pattern ( (|MutableMapModel.Item#Equal| a@@122 b@@72) (MutableMapModel.Item.Entry_q b@@72)) )))
(assert (forall ((a@@123 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@123) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (MutableMapModel.Item.Tombstone_q a@@123) (MutableMapModel.Item.Tombstone_q b@@73))) (and (=> (|MutableMapModel.Item#Equal| a@@123 b@@73) (= (MutableMapModel.Item.key a@@123) (MutableMapModel.Item.key b@@73))) (=> (= (MutableMapModel.Item.key a@@123) (MutableMapModel.Item.key b@@73)) (|MutableMapModel.Item#Equal| a@@123 b@@73)))) :qid |unknown.0:0| :skolemid |1849| :pattern ( (|MutableMapModel.Item#Equal| a@@123 b@@73) (MutableMapModel.Item.Tombstone_q a@@123)) :pattern ( (|MutableMapModel.Item#Equal| a@@123 b@@73) (MutableMapModel.Item.Tombstone_q b@@73)) )))
(assert (forall ((a@@124 T@U) (b@@74 T@U) ) (!  (=> (and (= (type a@@124) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (=> (|MutableMapModel.Item#Equal| a@@124 b@@74) (= a@@124 b@@74)) (=> (= a@@124 b@@74) (|MutableMapModel.Item#Equal| a@@124 b@@74)))) :qid |unknown.0:0| :skolemid |1850| :pattern ( (|MutableMapModel.Item#Equal| a@@124 b@@74)) )))
(assert (forall ((arg0@@300 T@U) (arg1@@171 Int) (arg2@@117 T@U) ) (! (= (type (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@300 arg1@@171 arg2@@117)) DatatypeTypeType) :qid |funType:#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@300 arg1@@171 arg2@@117)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| Int) (|a#25#2#0| T@U) ) (!  (=> (and (= (type |a#25#0#0|) (SeqType BoxType)) (= (type |a#25#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|)) :qid |MutableM.74:5| :skolemid |1851| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (and (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33) (= (DatatypeCtorId d@@33) |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|)) (=> (= (DatatypeCtorId d@@33) |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33)))) :qid |unknown.0:0| :skolemid |1852| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@34)) (exists ((|a#26#0#0| T@U) (|a#26#1#0| Int) (|a#26#2#0| T@U) ) (!  (and (and (= (type |a#26#0#0|) (SeqType BoxType)) (= (type |a#26#2#0|) (MapType BoxType BoxType))) (= d@@34 (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#26#0#0| |a#26#1#0| |a#26#2#0|))) :qid |MutableM.74:5| :skolemid |1853| :no-pattern (type |a#26#0#0|) :no-pattern (type |a#26#2#0|) :no-pattern (U_2_int |a#26#0#0|) :no-pattern (U_2_bool |a#26#0#0|) :no-pattern (U_2_int |a#26#2#0|) :no-pattern (U_2_bool |a#26#2#0|) ))) :qid |unknown.0:0| :skolemid |1854| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@34)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass.MutableMapModel.FixedSizeLinearHashMap arg0@@301)) TyType) :qid |funType:Tclass.MutableMapModel.FixedSizeLinearHashMap| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap arg0@@301)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V T@U) ) (!  (=> (= (type MutableMapModel.FixedSizeLinearHashMap$V) TyType) (= (Tag (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V)) Tagclass.MutableMapModel.FixedSizeLinearHashMap)) :qid |unknown.0:0| :skolemid |1855| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 arg0@@302)) TyType) :qid |funType:Tclass.MutableMapModel.FixedSizeLinearHashMap_0| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 arg0@@302)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.FixedSizeLinearHashMap$V@@0) TyType) (= (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@0)) MutableMapModel.FixedSizeLinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1856| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@0)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@1 T@U) (bx@@111 T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@1) TyType) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1857| :pattern ( ($IsBox bx@@111 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1))) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@2 T@U) (|a#27#0#0| T@U) (|a#27#1#0| Int) (|a#27#2#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@2) TyType) (= (type |a#27#0#0|) (SeqType BoxType))) (= (type |a#27#2#0|) (MapType BoxType BoxType))) (and (=> ($Is (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#27#0#0| |a#27#1#0| |a#27#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@2)) (and (and ($Is |a#27#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@2))) ($Is (int_2_U |a#27#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#27#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@2))))) (=> (and (and ($Is |a#27#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@2))) ($Is (int_2_U |a#27#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#27#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@2)))) ($Is (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#27#0#0| |a#27#1#0| |a#27#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@2))))) :qid |unknown.0:0| :skolemid |1858| :pattern ( ($Is (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#27#0#0| |a#27#1#0| |a#27#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@2))) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@3 T@U) (|a#28#0#0| T@U) (|a#28#1#0| Int) (|a#28#2#0| T@U) ($h@@87 T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@3) TyType) (= (type |a#28#0#0|) (SeqType BoxType))) (= (type |a#28#2#0|) (MapType BoxType BoxType))) (= (type $h@@87) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@87)) (and (=> ($IsAlloc (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#28#0#0| |a#28#1#0| |a#28#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@3) $h@@87) (and (and ($IsAlloc |a#28#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@87) ($IsAlloc (int_2_U |a#28#1#0|) Tclass.NativeTypes.uint64 $h@@87)) ($IsAlloc |a#28#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@87))) (=> (and (and ($IsAlloc |a#28#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@87) ($IsAlloc (int_2_U |a#28#1#0|) Tclass.NativeTypes.uint64 $h@@87)) ($IsAlloc |a#28#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@87)) ($IsAlloc (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#28#0#0| |a#28#1#0| |a#28#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@3) $h@@87)))) :qid |unknown.0:0| :skolemid |1859| :pattern ( ($IsAlloc (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#28#0#0| |a#28#1#0| |a#28#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@3) $h@@87)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (MutableMapModel.FixedSizeLinearHashMap.storage arg0@@303)) (SeqType BoxType)) :qid |funType:MutableMapModel.FixedSizeLinearHashMap.storage| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.storage arg0@@303)) )))
(assert (forall ((d@@35 T@U) (MutableMapModel.FixedSizeLinearHashMap$V@@4 T@U) ($h@@88 T@U) ) (!  (=> (and (and (and (= (type d@@35) DatatypeTypeType) (= (type MutableMapModel.FixedSizeLinearHashMap$V@@4) TyType)) (= (type $h@@88) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@88) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@35) ($IsAlloc d@@35 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@4) $h@@88)))) ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.storage d@@35) (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@4)) $h@@88)) :qid |unknown.0:0| :skolemid |1860| :pattern ( ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.storage d@@35) (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@4)) $h@@88)) )))
(assert (forall ((d@@36 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@36) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@36) (exists ((MutableMapModel.FixedSizeLinearHashMap$V@@5 T@U) ) (!  (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@5) TyType) ($IsAlloc d@@36 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@5) $h@@89)) :qid |unknown.0:0| :skolemid |1861| :pattern ( ($IsAlloc d@@36 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@5) $h@@89)) ))))) ($IsAlloc (int_2_U (MutableMapModel.FixedSizeLinearHashMap.count d@@36)) Tclass.NativeTypes.uint64 $h@@89)) :qid |unknown.0:0| :skolemid |1862| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.FixedSizeLinearHashMap.count d@@36)) Tclass.NativeTypes.uint64 $h@@89)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (MutableMapModel.FixedSizeLinearHashMap.contents arg0@@304)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.FixedSizeLinearHashMap.contents| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.contents arg0@@304)) )))
(assert (forall ((d@@37 T@U) (MutableMapModel.FixedSizeLinearHashMap$V@@6 T@U) ($h@@90 T@U) ) (!  (=> (and (and (and (= (type d@@37) DatatypeTypeType) (= (type MutableMapModel.FixedSizeLinearHashMap$V@@6) TyType)) (= (type $h@@90) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@90) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@37) ($IsAlloc d@@37 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@6) $h@@90)))) ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.contents d@@37) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@6)) $h@@90)) :qid |unknown.0:0| :skolemid |1863| :pattern ( ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.contents d@@37) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@6)) $h@@90)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| Int) (|a#29#2#0| T@U) ) (!  (=> (and (= (type |a#29#0#0|) (SeqType BoxType)) (= (type |a#29#2#0|) (MapType BoxType BoxType))) (= (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#29#0#0|) (LitInt |a#29#1#0|) (Lit |a#29#2#0|)) (Lit (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))) :qid |MutableM.74:5| :skolemid |1864| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#29#0#0|) (LitInt |a#29#1#0|) (Lit |a#29#2#0|))) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| Int) (|a#30#2#0| T@U) ) (!  (=> (and (= (type |a#30#0#0|) (SeqType BoxType)) (= (type |a#30#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.storage (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) |a#30#0#0|)) :qid |MutableM.74:5| :skolemid |1865| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| Int) (|a#31#2#0| T@U) (i@@31 Int) ) (!  (=> (and (and (= (type |a#31#0#0|) (SeqType BoxType)) (= (type |a#31#2#0|) (MapType BoxType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#31#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#31#0#0| i@@31))) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#31#0#0| |a#31#1#0| |a#31#2#0|)))) :qid |MutableM.74:5| :skolemid |1866| :pattern ( (|Seq#Index| |a#31#0#0| i@@31) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| Int) (|a#32#2#0| T@U) ) (!  (=> (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type |a#32#2#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#32#0#0|) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#32#0#0| |a#32#1#0| |a#32#2#0|)))) :qid |MutableM.74:5| :skolemid |1867| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| Int) (|a#33#2#0| T@U) ) (!  (=> (and (= (type |a#33#0#0|) (SeqType BoxType)) (= (type |a#33#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.count (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#33#0#0| |a#33#1#0| |a#33#2#0|)) |a#33#1#0|)) :qid |MutableM.74:5| :skolemid |1868| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#33#0#0| |a#33#1#0| |a#33#2#0|)) )))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| Int) (|a#34#2#0| T@U) ) (!  (=> (and (= (type |a#34#0#0|) (SeqType BoxType)) (= (type |a#34#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.contents (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#34#0#0| |a#34#1#0| |a#34#2#0|)) |a#34#2#0|)) :qid |MutableM.74:5| :skolemid |1869| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#34#0#0| |a#34#1#0| |a#34#2#0|)) )))
(assert (forall ((|a#35#0#0| T@U) (|a#35#1#0| Int) (|a#35#2#0| T@U) (d@@38 T@U) ) (!  (=> (and (and (and (= (type |a#35#0#0|) (SeqType BoxType)) (= (type |a#35#2#0|) (MapType BoxType BoxType))) (= (type d@@38) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#35#2#0|) ($Box d@@38)))) (< (DtRank d@@38) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#35#0#0| |a#35#1#0| |a#35#2#0|)))) :qid |MutableM.74:5| :skolemid |1870| :pattern ( (MapType0Select (|Map#Domain| |a#35#2#0|) ($Box d@@38)) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#35#0#0| |a#35#1#0| |a#35#2#0|)) )))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| Int) (|a#36#2#0| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (= (type |a#36#0#0|) (SeqType BoxType)) (= (type |a#36#2#0|) (MapType BoxType BoxType))) (= (type bx@@112) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#36#2#0|) bx@@112))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#36#2#0|) bx@@112))) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#36#0#0| |a#36#1#0| |a#36#2#0|)))) :qid |MutableM.74:5| :skolemid |1871| :pattern ( (MapType0Select (|Map#Domain| |a#36#2#0|) bx@@112) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#36#0#0| |a#36#1#0| |a#36#2#0|)) )))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (|$IsA#MutableMapModel.FixedSizeLinearHashMap| d@@39)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@39)) :qid |unknown.0:0| :skolemid |1872| :pattern ( (|$IsA#MutableMapModel.FixedSizeLinearHashMap| d@@39)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@7 T@U) (d@@40 T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@7) TyType) (= (type d@@40) DatatypeTypeType)) ($Is d@@40 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@7))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@40)) :qid |unknown.0:0| :skolemid |1873| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@40) ($Is d@@40 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@7))) )))
(assert (forall ((a@@125 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@125) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) true) (and (=> (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@125 b@@75) (and (and (|Seq#Equal| (MutableMapModel.FixedSizeLinearHashMap.storage a@@125) (MutableMapModel.FixedSizeLinearHashMap.storage b@@75)) (= (MutableMapModel.FixedSizeLinearHashMap.count a@@125) (MutableMapModel.FixedSizeLinearHashMap.count b@@75))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents a@@125) (MutableMapModel.FixedSizeLinearHashMap.contents b@@75)))) (=> (and (and (|Seq#Equal| (MutableMapModel.FixedSizeLinearHashMap.storage a@@125) (MutableMapModel.FixedSizeLinearHashMap.storage b@@75)) (= (MutableMapModel.FixedSizeLinearHashMap.count a@@125) (MutableMapModel.FixedSizeLinearHashMap.count b@@75))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents a@@125) (MutableMapModel.FixedSizeLinearHashMap.contents b@@75))) (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@125 b@@75)))) :qid |unknown.0:0| :skolemid |1874| :pattern ( (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@125 b@@75)) )))
(assert (forall ((a@@126 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@126) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (=> (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@126 b@@76) (= a@@126 b@@76)) (=> (= a@@126 b@@76) (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@126 b@@76)))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@126 b@@76)) )))
(assert (forall ((arg0@@305 Int) (arg1@@172 Int) (arg2@@118 Int) ) (! (= (type (|#MutableMapModel.ProbeResult.ProbeResult| arg0@@305 arg1@@172 arg2@@118)) DatatypeTypeType) :qid |funType:#MutableMapModel.ProbeResult.ProbeResult| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| arg0@@305 arg1@@172 arg2@@118)) )))
(assert (forall ((|a#37#0#0| Int) (|a#37#1#0| Int) (|a#37#2#0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.ProbeResult.ProbeResult| |a#37#0#0| |a#37#1#0| |a#37#2#0|)) |##MutableMapModel.ProbeResult.ProbeResult|) :qid |MutableM.488:7| :skolemid |1876| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#37#0#0| |a#37#1#0| |a#37#2#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (and (=> (MutableMapModel.ProbeResult.ProbeResult_q d@@41) (= (DatatypeCtorId d@@41) |##MutableMapModel.ProbeResult.ProbeResult|)) (=> (= (DatatypeCtorId d@@41) |##MutableMapModel.ProbeResult.ProbeResult|) (MutableMapModel.ProbeResult.ProbeResult_q d@@41)))) :qid |unknown.0:0| :skolemid |1877| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (MutableMapModel.ProbeResult.ProbeResult_q d@@42)) (exists ((|a#38#0#0| Int) (|a#38#1#0| Int) (|a#38#2#0| Int) ) (! (= d@@42 (|#MutableMapModel.ProbeResult.ProbeResult| |a#38#0#0| |a#38#1#0| |a#38#2#0|)) :qid |MutableM.488:7| :skolemid |1878| ))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@42)) )))
(assert (forall ((arg0@@306 T@U) ) (! (= (type (Tclass.MutableMapModel.ProbeResult arg0@@306)) TyType) :qid |funType:Tclass.MutableMapModel.ProbeResult| :pattern ( (Tclass.MutableMapModel.ProbeResult arg0@@306)) )))
(assert (forall ((MutableMapModel.ProbeResult$V T@U) ) (!  (=> (= (type MutableMapModel.ProbeResult$V) TyType) (= (Tag (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V)) Tagclass.MutableMapModel.ProbeResult)) :qid |unknown.0:0| :skolemid |1880| :pattern ( (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V)) )))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (Tclass.MutableMapModel.ProbeResult_0 arg0@@307)) TyType) :qid |funType:Tclass.MutableMapModel.ProbeResult_0| :pattern ( (Tclass.MutableMapModel.ProbeResult_0 arg0@@307)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.ProbeResult$V@@0) TyType) (= (Tclass.MutableMapModel.ProbeResult_0 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@0)) MutableMapModel.ProbeResult$V@@0)) :qid |unknown.0:0| :skolemid |1881| :pattern ( (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@0)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@1 T@U) (bx@@113 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@1) TyType) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1)))) :qid |unknown.0:0| :skolemid |1882| :pattern ( ($IsBox bx@@113 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1))) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@2 T@U) (|a#39#0#0| Int) (|a#39#1#0| Int) (|a#39#2#0| Int) ) (!  (=> (= (type MutableMapModel.ProbeResult$V@@2) TyType) (and (=> ($Is (|#MutableMapModel.ProbeResult.ProbeResult| |a#39#0#0| |a#39#1#0| |a#39#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@2)) (and (and ($Is (int_2_U |a#39#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#39#1#0|) Tclass.NativeTypes.uint64)) ($Is (int_2_U |a#39#2#0|) Tclass.NativeTypes.uint64))) (=> (and (and ($Is (int_2_U |a#39#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#39#1#0|) Tclass.NativeTypes.uint64)) ($Is (int_2_U |a#39#2#0|) Tclass.NativeTypes.uint64)) ($Is (|#MutableMapModel.ProbeResult.ProbeResult| |a#39#0#0| |a#39#1#0| |a#39#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@2))))) :qid |unknown.0:0| :skolemid |1883| :pattern ( ($Is (|#MutableMapModel.ProbeResult.ProbeResult| |a#39#0#0| |a#39#1#0| |a#39#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@2))) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@3 T@U) (|a#40#0#0| Int) (|a#40#1#0| Int) (|a#40#2#0| Int) ($h@@91 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@3) TyType) (= (type $h@@91) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@91)) (and (=> ($IsAlloc (|#MutableMapModel.ProbeResult.ProbeResult| |a#40#0#0| |a#40#1#0| |a#40#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@3) $h@@91) (and (and ($IsAlloc (int_2_U |a#40#0#0|) Tclass.NativeTypes.uint64 $h@@91) ($IsAlloc (int_2_U |a#40#1#0|) Tclass.NativeTypes.uint64 $h@@91)) ($IsAlloc (int_2_U |a#40#2#0|) Tclass.NativeTypes.uint64 $h@@91))) (=> (and (and ($IsAlloc (int_2_U |a#40#0#0|) Tclass.NativeTypes.uint64 $h@@91) ($IsAlloc (int_2_U |a#40#1#0|) Tclass.NativeTypes.uint64 $h@@91)) ($IsAlloc (int_2_U |a#40#2#0|) Tclass.NativeTypes.uint64 $h@@91)) ($IsAlloc (|#MutableMapModel.ProbeResult.ProbeResult| |a#40#0#0| |a#40#1#0| |a#40#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@3) $h@@91)))) :qid |unknown.0:0| :skolemid |1884| :pattern ( ($IsAlloc (|#MutableMapModel.ProbeResult.ProbeResult| |a#40#0#0| |a#40#1#0| |a#40#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@3) $h@@91)) )))
(assert (forall ((d@@43 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@43) (exists ((MutableMapModel.ProbeResult$V@@4 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@4) TyType) ($IsAlloc d@@43 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@4) $h@@92)) :qid |unknown.0:0| :skolemid |1885| :pattern ( ($IsAlloc d@@43 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@4) $h@@92)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.slotIdx d@@43)) Tclass.NativeTypes.uint64 $h@@92)) :qid |unknown.0:0| :skolemid |1886| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.slotIdx d@@43)) Tclass.NativeTypes.uint64 $h@@92)) )))
(assert (forall ((d@@44 T@U) ($h@@93 T@U) ) (!  (=> (and (and (= (type d@@44) DatatypeTypeType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@93) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@44) (exists ((MutableMapModel.ProbeResult$V@@5 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@5) TyType) ($IsAlloc d@@44 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@5) $h@@93)) :qid |unknown.0:0| :skolemid |1887| :pattern ( ($IsAlloc d@@44 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@5) $h@@93)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.startSlotIdx d@@44)) Tclass.NativeTypes.uint64 $h@@93)) :qid |unknown.0:0| :skolemid |1888| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.startSlotIdx d@@44)) Tclass.NativeTypes.uint64 $h@@93)) )))
(assert (forall ((d@@45 T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type d@@45) DatatypeTypeType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@94) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@45) (exists ((MutableMapModel.ProbeResult$V@@6 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@6) TyType) ($IsAlloc d@@45 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@6) $h@@94)) :qid |unknown.0:0| :skolemid |1889| :pattern ( ($IsAlloc d@@45 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@6) $h@@94)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.ghostSkips d@@45)) Tclass.NativeTypes.uint64 $h@@94)) :qid |unknown.0:0| :skolemid |1890| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.ghostSkips d@@45)) Tclass.NativeTypes.uint64 $h@@94)) )))
(assert (forall ((|a#41#0#0| Int) (|a#41#1#0| Int) (|a#41#2#0| Int) ) (! (= (|#MutableMapModel.ProbeResult.ProbeResult| (LitInt |a#41#0#0|) (LitInt |a#41#1#0|) (LitInt |a#41#2#0|)) (Lit (|#MutableMapModel.ProbeResult.ProbeResult| |a#41#0#0| |a#41#1#0| |a#41#2#0|))) :qid |MutableM.488:7| :skolemid |1891| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| (LitInt |a#41#0#0|) (LitInt |a#41#1#0|) (LitInt |a#41#2#0|))) )))
(assert (forall ((|a#42#0#0| Int) (|a#42#1#0| Int) (|a#42#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.slotIdx (|#MutableMapModel.ProbeResult.ProbeResult| |a#42#0#0| |a#42#1#0| |a#42#2#0|)) |a#42#0#0|) :qid |MutableM.488:7| :skolemid |1892| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#42#0#0| |a#42#1#0| |a#42#2#0|)) )))
(assert (forall ((|a#43#0#0| Int) (|a#43#1#0| Int) (|a#43#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.startSlotIdx (|#MutableMapModel.ProbeResult.ProbeResult| |a#43#0#0| |a#43#1#0| |a#43#2#0|)) |a#43#1#0|) :qid |MutableM.488:7| :skolemid |1893| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#43#0#0| |a#43#1#0| |a#43#2#0|)) )))
(assert (forall ((|a#44#0#0| Int) (|a#44#1#0| Int) (|a#44#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.ghostSkips (|#MutableMapModel.ProbeResult.ProbeResult| |a#44#0#0| |a#44#1#0| |a#44#2#0|)) |a#44#2#0|) :qid |MutableM.488:7| :skolemid |1894| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#44#0#0| |a#44#1#0| |a#44#2#0|)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) (|$IsA#MutableMapModel.ProbeResult| d@@46)) (MutableMapModel.ProbeResult.ProbeResult_q d@@46)) :qid |unknown.0:0| :skolemid |1895| :pattern ( (|$IsA#MutableMapModel.ProbeResult| d@@46)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@7 T@U) (d@@47 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@7) TyType) (= (type d@@47) DatatypeTypeType)) ($Is d@@47 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@7))) (MutableMapModel.ProbeResult.ProbeResult_q d@@47)) :qid |unknown.0:0| :skolemid |1896| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@47) ($Is d@@47 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@7))) )))
(assert (forall ((a@@127 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@127) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) true) (and (=> (|MutableMapModel.ProbeResult#Equal| a@@127 b@@77) (and (and (= (MutableMapModel.ProbeResult.slotIdx a@@127) (MutableMapModel.ProbeResult.slotIdx b@@77)) (= (MutableMapModel.ProbeResult.startSlotIdx a@@127) (MutableMapModel.ProbeResult.startSlotIdx b@@77))) (= (MutableMapModel.ProbeResult.ghostSkips a@@127) (MutableMapModel.ProbeResult.ghostSkips b@@77)))) (=> (and (and (= (MutableMapModel.ProbeResult.slotIdx a@@127) (MutableMapModel.ProbeResult.slotIdx b@@77)) (= (MutableMapModel.ProbeResult.startSlotIdx a@@127) (MutableMapModel.ProbeResult.startSlotIdx b@@77))) (= (MutableMapModel.ProbeResult.ghostSkips a@@127) (MutableMapModel.ProbeResult.ghostSkips b@@77))) (|MutableMapModel.ProbeResult#Equal| a@@127 b@@77)))) :qid |unknown.0:0| :skolemid |1897| :pattern ( (|MutableMapModel.ProbeResult#Equal| a@@127 b@@77)) )))
(assert (forall ((a@@128 T@U) (b@@78 T@U) ) (!  (=> (and (= (type a@@128) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (=> (|MutableMapModel.ProbeResult#Equal| a@@128 b@@78) (= a@@128 b@@78)) (=> (= a@@128 b@@78) (|MutableMapModel.ProbeResult#Equal| a@@128 b@@78)))) :qid |unknown.0:0| :skolemid |1898| :pattern ( (|MutableMapModel.ProbeResult#Equal| a@@128 b@@78)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@173 Int) (arg2@@119 T@U) ) (! (= (type (|#MutableMapModel.LinearHashMap.LinearHashMap| arg0@@308 arg1@@173 arg2@@119)) DatatypeTypeType) :qid |funType:#MutableMapModel.LinearHashMap.LinearHashMap| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| arg0@@308 arg1@@173 arg2@@119)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| Int) (|a#45#2#0| T@U) ) (!  (=> (and (= (type |a#45#0#0|) DatatypeTypeType) (= (type |a#45#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#45#0#0| |a#45#1#0| |a#45#2#0|)) |##MutableMapModel.LinearHashMap.LinearHashMap|)) :qid |MutableM.814:5| :skolemid |1899| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#45#0#0| |a#45#1#0| |a#45#2#0|)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (= (type d@@48) DatatypeTypeType) (and (=> (MutableMapModel.LinearHashMap.LinearHashMap_q d@@48) (= (DatatypeCtorId d@@48) |##MutableMapModel.LinearHashMap.LinearHashMap|)) (=> (= (DatatypeCtorId d@@48) |##MutableMapModel.LinearHashMap.LinearHashMap|) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@48)))) :qid |unknown.0:0| :skolemid |1900| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@48)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@49)) (exists ((|a#46#0#0| T@U) (|a#46#1#0| Int) (|a#46#2#0| T@U) ) (!  (and (and (= (type |a#46#0#0|) DatatypeTypeType) (= (type |a#46#2#0|) (MapType BoxType BoxType))) (= d@@49 (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#46#0#0| |a#46#1#0| |a#46#2#0|))) :qid |MutableM.814:5| :skolemid |1901| :no-pattern (type |a#46#0#0|) :no-pattern (type |a#46#2#0|) :no-pattern (U_2_int |a#46#0#0|) :no-pattern (U_2_bool |a#46#0#0|) :no-pattern (U_2_int |a#46#2#0|) :no-pattern (U_2_bool |a#46#2#0|) ))) :qid |unknown.0:0| :skolemid |1902| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@49)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass.MutableMapModel.LinearHashMap arg0@@309)) TyType) :qid |funType:Tclass.MutableMapModel.LinearHashMap| :pattern ( (Tclass.MutableMapModel.LinearHashMap arg0@@309)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V T@U) ) (!  (=> (= (type MutableMapModel.LinearHashMap$V) TyType) (= (Tag (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V)) Tagclass.MutableMapModel.LinearHashMap)) :qid |unknown.0:0| :skolemid |1903| :pattern ( (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass.MutableMapModel.LinearHashMap_0 arg0@@310)) TyType) :qid |funType:Tclass.MutableMapModel.LinearHashMap_0| :pattern ( (Tclass.MutableMapModel.LinearHashMap_0 arg0@@310)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.LinearHashMap$V@@0) TyType) (= (Tclass.MutableMapModel.LinearHashMap_0 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@0)) MutableMapModel.LinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1904| :pattern ( (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@0)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@1 T@U) (bx@@114 T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@1) TyType) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@114)) bx@@114) ($Is ($Unbox DatatypeTypeType bx@@114) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1905| :pattern ( ($IsBox bx@@114 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1))) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@2 T@U) (|a#47#0#0| T@U) (|a#47#1#0| Int) (|a#47#2#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@2) TyType) (= (type |a#47#0#0|) DatatypeTypeType)) (= (type |a#47#2#0|) (MapType BoxType BoxType))) (and (=> ($Is (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#47#0#0| |a#47#1#0| |a#47#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@2)) (and (and ($Is |a#47#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@2)) ($Is (int_2_U |a#47#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#47#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@2)))) (=> (and (and ($Is |a#47#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@2)) ($Is (int_2_U |a#47#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#47#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@2))) ($Is (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#47#0#0| |a#47#1#0| |a#47#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@2))))) :qid |unknown.0:0| :skolemid |1906| :pattern ( ($Is (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#47#0#0| |a#47#1#0| |a#47#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@2))) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@3 T@U) (|a#48#0#0| T@U) (|a#48#1#0| Int) (|a#48#2#0| T@U) ($h@@95 T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel.LinearHashMap$V@@3) TyType) (= (type |a#48#0#0|) DatatypeTypeType)) (= (type |a#48#2#0|) (MapType BoxType BoxType))) (= (type $h@@95) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@95)) (and (=> ($IsAlloc (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#48#0#0| |a#48#1#0| |a#48#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@95) (and (and ($IsAlloc |a#48#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@95) ($IsAlloc (int_2_U |a#48#1#0|) Tclass.NativeTypes.uint64 $h@@95)) ($IsAlloc |a#48#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@3) $h@@95))) (=> (and (and ($IsAlloc |a#48#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@95) ($IsAlloc (int_2_U |a#48#1#0|) Tclass.NativeTypes.uint64 $h@@95)) ($IsAlloc |a#48#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@3) $h@@95)) ($IsAlloc (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#48#0#0| |a#48#1#0| |a#48#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@95)))) :qid |unknown.0:0| :skolemid |1907| :pattern ( ($IsAlloc (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#48#0#0| |a#48#1#0| |a#48#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@95)) )))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (MutableMapModel.LinearHashMap.underlying arg0@@311)) DatatypeTypeType) :qid |funType:MutableMapModel.LinearHashMap.underlying| :pattern ( (MutableMapModel.LinearHashMap.underlying arg0@@311)) )))
(assert (forall ((d@@50 T@U) (MutableMapModel.LinearHashMap$V@@4 T@U) ($h@@96 T@U) ) (!  (=> (and (and (and (= (type d@@50) DatatypeTypeType) (= (type MutableMapModel.LinearHashMap$V@@4) TyType)) (= (type $h@@96) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@96) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@50) ($IsAlloc d@@50 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@96)))) ($IsAlloc (MutableMapModel.LinearHashMap.underlying d@@50) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@96)) :qid |unknown.0:0| :skolemid |1908| :pattern ( ($IsAlloc (MutableMapModel.LinearHashMap.underlying d@@50) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@96)) )))
(assert (forall ((d@@51 T@U) ($h@@97 T@U) ) (!  (=> (and (and (= (type d@@51) DatatypeTypeType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@97) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@51) (exists ((MutableMapModel.LinearHashMap$V@@5 T@U) ) (!  (and (= (type MutableMapModel.LinearHashMap$V@@5) TyType) ($IsAlloc d@@51 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@5) $h@@97)) :qid |unknown.0:0| :skolemid |1909| :pattern ( ($IsAlloc d@@51 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@5) $h@@97)) ))))) ($IsAlloc (int_2_U (MutableMapModel.LinearHashMap.count d@@51)) Tclass.NativeTypes.uint64 $h@@97)) :qid |unknown.0:0| :skolemid |1910| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.LinearHashMap.count d@@51)) Tclass.NativeTypes.uint64 $h@@97)) )))
(assert (forall ((d@@52 T@U) (MutableMapModel.LinearHashMap$V@@6 T@U) ($h@@98 T@U) ) (!  (=> (and (and (and (= (type d@@52) DatatypeTypeType) (= (type MutableMapModel.LinearHashMap$V@@6) TyType)) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@52) ($IsAlloc d@@52 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@6) $h@@98)))) ($IsAlloc (MutableMapModel.LinearHashMap.contents d@@52) (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@6) $h@@98)) :qid |unknown.0:0| :skolemid |1911| :pattern ( ($IsAlloc (MutableMapModel.LinearHashMap.contents d@@52) (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@6) $h@@98)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| Int) (|a#49#2#0| T@U) ) (!  (=> (and (= (type |a#49#0#0|) DatatypeTypeType) (= (type |a#49#2#0|) (MapType BoxType BoxType))) (= (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit |a#49#0#0|) (LitInt |a#49#1#0|) (Lit |a#49#2#0|)) (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#49#0#0| |a#49#1#0| |a#49#2#0|)))) :qid |MutableM.814:5| :skolemid |1912| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit |a#49#0#0|) (LitInt |a#49#1#0|) (Lit |a#49#2#0|))) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| Int) (|a#50#2#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) DatatypeTypeType) (= (type |a#50#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.underlying (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#50#0#0| |a#50#1#0| |a#50#2#0|)) |a#50#0#0|)) :qid |MutableM.814:5| :skolemid |1913| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#50#0#0| |a#50#1#0| |a#50#2#0|)) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| Int) (|a#51#2#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) DatatypeTypeType) (= (type |a#51#2#0|) (MapType BoxType BoxType))) (< (DtRank |a#51#0#0|) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#51#0#0| |a#51#1#0| |a#51#2#0|)))) :qid |MutableM.814:5| :skolemid |1914| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#51#0#0| |a#51#1#0| |a#51#2#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| Int) (|a#52#2#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) DatatypeTypeType) (= (type |a#52#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.count (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#52#0#0| |a#52#1#0| |a#52#2#0|)) |a#52#1#0|)) :qid |MutableM.814:5| :skolemid |1915| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#52#0#0| |a#52#1#0| |a#52#2#0|)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| Int) (|a#53#2#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) DatatypeTypeType) (= (type |a#53#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.contents (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#53#0#0| |a#53#1#0| |a#53#2#0|)) |a#53#2#0|)) :qid |MutableM.814:5| :skolemid |1916| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#53#0#0| |a#53#1#0| |a#53#2#0|)) )))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| Int) (|a#54#2#0| T@U) (d@@53 T@U) ) (!  (=> (and (and (and (= (type |a#54#0#0|) DatatypeTypeType) (= (type |a#54#2#0|) (MapType BoxType BoxType))) (= (type d@@53) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#54#2#0|) ($Box d@@53)))) (< (DtRank d@@53) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#54#0#0| |a#54#1#0| |a#54#2#0|)))) :qid |MutableM.814:5| :skolemid |1917| :pattern ( (MapType0Select (|Map#Domain| |a#54#2#0|) ($Box d@@53)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#54#0#0| |a#54#1#0| |a#54#2#0|)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| Int) (|a#55#2#0| T@U) (bx@@115 T@U) ) (!  (=> (and (and (and (= (type |a#55#0#0|) DatatypeTypeType) (= (type |a#55#2#0|) (MapType BoxType BoxType))) (= (type bx@@115) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#55#2#0|) bx@@115))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#55#2#0|) bx@@115))) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#55#0#0| |a#55#1#0| |a#55#2#0|)))) :qid |MutableM.814:5| :skolemid |1918| :pattern ( (MapType0Select (|Map#Domain| |a#55#2#0|) bx@@115) (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#55#0#0| |a#55#1#0| |a#55#2#0|)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (|$IsA#MutableMapModel.LinearHashMap| d@@54)) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@54)) :qid |unknown.0:0| :skolemid |1919| :pattern ( (|$IsA#MutableMapModel.LinearHashMap| d@@54)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@7 T@U) (d@@55 T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@7) TyType) (= (type d@@55) DatatypeTypeType)) ($Is d@@55 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@7))) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@55)) :qid |unknown.0:0| :skolemid |1920| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@55) ($Is d@@55 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@7))) )))
(assert (forall ((a@@129 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) true) (and (=> (|MutableMapModel.LinearHashMap#Equal| a@@129 b@@79) (and (and (|MutableMapModel.FixedSizeLinearHashMap#Equal| (MutableMapModel.LinearHashMap.underlying a@@129) (MutableMapModel.LinearHashMap.underlying b@@79)) (= (MutableMapModel.LinearHashMap.count a@@129) (MutableMapModel.LinearHashMap.count b@@79))) (|Map#Equal| (MutableMapModel.LinearHashMap.contents a@@129) (MutableMapModel.LinearHashMap.contents b@@79)))) (=> (and (and (|MutableMapModel.FixedSizeLinearHashMap#Equal| (MutableMapModel.LinearHashMap.underlying a@@129) (MutableMapModel.LinearHashMap.underlying b@@79)) (= (MutableMapModel.LinearHashMap.count a@@129) (MutableMapModel.LinearHashMap.count b@@79))) (|Map#Equal| (MutableMapModel.LinearHashMap.contents a@@129) (MutableMapModel.LinearHashMap.contents b@@79))) (|MutableMapModel.LinearHashMap#Equal| a@@129 b@@79)))) :qid |unknown.0:0| :skolemid |1921| :pattern ( (|MutableMapModel.LinearHashMap#Equal| a@@129 b@@79)) )))
(assert (forall ((a@@130 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@130) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (=> (|MutableMapModel.LinearHashMap#Equal| a@@130 b@@80) (= a@@130 b@@80)) (=> (= a@@130 b@@80) (|MutableMapModel.LinearHashMap#Equal| a@@130 b@@80)))) :qid |unknown.0:0| :skolemid |1922| :pattern ( (|MutableMapModel.LinearHashMap#Equal| a@@130 b@@80)) )))
(assert (forall ((arg0@@312 Int) (arg1@@174 T@U) ) (! (= (type (|#MutableMapModel.IteratorOutput.Next| arg0@@312 arg1@@174)) DatatypeTypeType) :qid |funType:#MutableMapModel.IteratorOutput.Next| :pattern ( (|#MutableMapModel.IteratorOutput.Next| arg0@@312 arg1@@174)) )))
(assert (forall ((|a#56#0#0| Int) (|a#56#1#0| T@U) ) (!  (=> (= (type |a#56#1#0|) BoxType) (= (DatatypeCtorId (|#MutableMapModel.IteratorOutput.Next| |a#56#0#0| |a#56#1#0|)) |##MutableMapModel.IteratorOutput.Next|)) :qid |MutableM.1401:37| :skolemid |1923| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#56#0#0| |a#56#1#0|)) )))
(assert (forall ((d@@56 T@U) ) (!  (=> (= (type d@@56) DatatypeTypeType) (and (=> (MutableMapModel.IteratorOutput.Next_q d@@56) (= (DatatypeCtorId d@@56) |##MutableMapModel.IteratorOutput.Next|)) (=> (= (DatatypeCtorId d@@56) |##MutableMapModel.IteratorOutput.Next|) (MutableMapModel.IteratorOutput.Next_q d@@56)))) :qid |unknown.0:0| :skolemid |1924| :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (MutableMapModel.IteratorOutput.Next_q d@@57)) (exists ((|a#57#0#0| Int) (|a#57#1#0| T@U) ) (!  (and (= (type |a#57#1#0|) BoxType) (= d@@57 (|#MutableMapModel.IteratorOutput.Next| |a#57#0#0| |a#57#1#0|))) :qid |MutableM.1401:37| :skolemid |1925| :no-pattern (type |a#57#1#0|) :no-pattern (U_2_int |a#57#1#0|) :no-pattern (U_2_bool |a#57#1#0|) ))) :qid |unknown.0:0| :skolemid |1926| :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@57)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass.MutableMapModel.IteratorOutput arg0@@313)) TyType) :qid |funType:Tclass.MutableMapModel.IteratorOutput| :pattern ( (Tclass.MutableMapModel.IteratorOutput arg0@@313)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V) TyType) (= (Tag (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V)) Tagclass.MutableMapModel.IteratorOutput)) :qid |unknown.0:0| :skolemid |1927| :pattern ( (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass.MutableMapModel.IteratorOutput_0 arg0@@314)) TyType) :qid |funType:Tclass.MutableMapModel.IteratorOutput_0| :pattern ( (Tclass.MutableMapModel.IteratorOutput_0 arg0@@314)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V@@0) TyType) (= (Tclass.MutableMapModel.IteratorOutput_0 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@0)) MutableMapModel.IteratorOutput$V@@0)) :qid |unknown.0:0| :skolemid |1928| :pattern ( (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@0)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@1 T@U) (bx@@116 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@1) TyType) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@116)) bx@@116) ($Is ($Unbox DatatypeTypeType bx@@116) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1)))) :qid |unknown.0:0| :skolemid |1929| :pattern ( ($IsBox bx@@116 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@2 T@U) (|a#58#0#0| Int) (|a#58#1#0| T@U) ) (!  (=> (and (= (type MutableMapModel.IteratorOutput$V@@2) TyType) (= (type |a#58#1#0|) BoxType)) (and (=> ($Is (|#MutableMapModel.IteratorOutput.Next| |a#58#0#0| |a#58#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@2)) (and ($Is (int_2_U |a#58#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#58#1#0| MutableMapModel.IteratorOutput$V@@2))) (=> (and ($Is (int_2_U |a#58#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#58#1#0| MutableMapModel.IteratorOutput$V@@2)) ($Is (|#MutableMapModel.IteratorOutput.Next| |a#58#0#0| |a#58#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@2))))) :qid |unknown.0:0| :skolemid |1930| :pattern ( ($Is (|#MutableMapModel.IteratorOutput.Next| |a#58#0#0| |a#58#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@2))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@3 T@U) (|a#59#0#0| Int) (|a#59#1#0| T@U) ($h@@99 T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.IteratorOutput$V@@3) TyType) (= (type |a#59#1#0|) BoxType)) (= (type $h@@99) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@99)) (and (=> ($IsAlloc (|#MutableMapModel.IteratorOutput.Next| |a#59#0#0| |a#59#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@3) $h@@99) (and ($IsAlloc (int_2_U |a#59#0#0|) Tclass.NativeTypes.uint64 $h@@99) ($IsAllocBox |a#59#1#0| MutableMapModel.IteratorOutput$V@@3 $h@@99))) (=> (and ($IsAlloc (int_2_U |a#59#0#0|) Tclass.NativeTypes.uint64 $h@@99) ($IsAllocBox |a#59#1#0| MutableMapModel.IteratorOutput$V@@3 $h@@99)) ($IsAlloc (|#MutableMapModel.IteratorOutput.Next| |a#59#0#0| |a#59#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@3) $h@@99)))) :qid |unknown.0:0| :skolemid |1931| :pattern ( ($IsAlloc (|#MutableMapModel.IteratorOutput.Next| |a#59#0#0| |a#59#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@3) $h@@99)) )))
(assert (forall ((d@@58 T@U) ($h@@100 T@U) ) (!  (=> (and (and (= (type d@@58) DatatypeTypeType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@100) (and (MutableMapModel.IteratorOutput.Next_q d@@58) (exists ((MutableMapModel.IteratorOutput$V@@4 T@U) ) (!  (and (= (type MutableMapModel.IteratorOutput$V@@4) TyType) ($IsAlloc d@@58 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@4) $h@@100)) :qid |unknown.0:0| :skolemid |1932| :pattern ( ($IsAlloc d@@58 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@4) $h@@100)) ))))) ($IsAlloc (int_2_U (MutableMapModel.IteratorOutput.key d@@58)) Tclass.NativeTypes.uint64 $h@@100)) :qid |unknown.0:0| :skolemid |1933| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.IteratorOutput.key d@@58)) Tclass.NativeTypes.uint64 $h@@100)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (MutableMapModel.IteratorOutput.value arg0@@315)) BoxType) :qid |funType:MutableMapModel.IteratorOutput.value| :pattern ( (MutableMapModel.IteratorOutput.value arg0@@315)) )))
(assert (forall ((d@@59 T@U) (MutableMapModel.IteratorOutput$V@@5 T@U) ($h@@101 T@U) ) (!  (=> (and (and (and (= (type d@@59) DatatypeTypeType) (= (type MutableMapModel.IteratorOutput$V@@5) TyType)) (= (type $h@@101) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@101) (and (MutableMapModel.IteratorOutput.Next_q d@@59) ($IsAlloc d@@59 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@5) $h@@101)))) ($IsAllocBox (MutableMapModel.IteratorOutput.value d@@59) MutableMapModel.IteratorOutput$V@@5 $h@@101)) :qid |unknown.0:0| :skolemid |1934| :pattern ( ($IsAllocBox (MutableMapModel.IteratorOutput.value d@@59) MutableMapModel.IteratorOutput$V@@5 $h@@101)) )))
(assert (forall ((|a#60#0#0| Int) (|a#60#1#0| T@U) ) (!  (=> (= (type |a#60#1#0|) BoxType) (= (|#MutableMapModel.IteratorOutput.Next| (LitInt |a#60#0#0|) (Lit |a#60#1#0|)) (Lit (|#MutableMapModel.IteratorOutput.Next| |a#60#0#0| |a#60#1#0|)))) :qid |MutableM.1401:37| :skolemid |1935| :pattern ( (|#MutableMapModel.IteratorOutput.Next| (LitInt |a#60#0#0|) (Lit |a#60#1#0|))) )))
(assert (forall ((|a#61#0#0| Int) (|a#61#1#0| T@U) ) (!  (=> (= (type |a#61#1#0|) BoxType) (= (MutableMapModel.IteratorOutput.key (|#MutableMapModel.IteratorOutput.Next| |a#61#0#0| |a#61#1#0|)) |a#61#0#0|)) :qid |MutableM.1401:37| :skolemid |1936| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| Int) (|a#62#1#0| T@U) ) (!  (=> (= (type |a#62#1#0|) BoxType) (= (MutableMapModel.IteratorOutput.value (|#MutableMapModel.IteratorOutput.Next| |a#62#0#0| |a#62#1#0|)) |a#62#1#0|)) :qid |MutableM.1401:37| :skolemid |1937| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((|a#63#0#0| Int) (|a#63#1#0| T@U) ) (!  (=> (= (type |a#63#1#0|) BoxType) (< (BoxRank |a#63#1#0|) (DtRank (|#MutableMapModel.IteratorOutput.Next| |a#63#0#0| |a#63#1#0|)))) :qid |MutableM.1401:37| :skolemid |1938| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#63#0#0| |a#63#1#0|)) )))
(assert (= (type |#MutableMapModel.IteratorOutput.Done|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MutableMapModel.IteratorOutput.Done|) |##MutableMapModel.IteratorOutput.Done|))
(assert (forall ((d@@60 T@U) ) (!  (=> (= (type d@@60) DatatypeTypeType) (and (=> (MutableMapModel.IteratorOutput.Done_q d@@60) (= (DatatypeCtorId d@@60) |##MutableMapModel.IteratorOutput.Done|)) (=> (= (DatatypeCtorId d@@60) |##MutableMapModel.IteratorOutput.Done|) (MutableMapModel.IteratorOutput.Done_q d@@60)))) :qid |unknown.0:0| :skolemid |1939| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@60)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (MutableMapModel.IteratorOutput.Done_q d@@61)) (= d@@61 |#MutableMapModel.IteratorOutput.Done|)) :qid |unknown.0:0| :skolemid |1940| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@61)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@6 T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V@@6) TyType) ($Is |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@6))) :qid |unknown.0:0| :skolemid |1941| :pattern ( ($Is |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@6))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@7 T@U) ($h@@102 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@7) TyType) (= (type $h@@102) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@102)) ($IsAlloc |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@7) $h@@102)) :qid |unknown.0:0| :skolemid |1942| :pattern ( ($IsAlloc |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@7) $h@@102)) )))
(assert (= |#MutableMapModel.IteratorOutput.Done| (Lit |#MutableMapModel.IteratorOutput.Done|)))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (|$IsA#MutableMapModel.IteratorOutput| d@@62)) (or (MutableMapModel.IteratorOutput.Next_q d@@62) (MutableMapModel.IteratorOutput.Done_q d@@62))) :qid |unknown.0:0| :skolemid |1943| :pattern ( (|$IsA#MutableMapModel.IteratorOutput| d@@62)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@8 T@U) (d@@63 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@8) TyType) (= (type d@@63) DatatypeTypeType)) ($Is d@@63 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) (or (MutableMapModel.IteratorOutput.Next_q d@@63) (MutableMapModel.IteratorOutput.Done_q d@@63))) :qid |unknown.0:0| :skolemid |1944| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@63) ($Is d@@63 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@63) ($Is d@@63 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) )))
(assert (forall ((a@@131 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (MutableMapModel.IteratorOutput.Next_q a@@131) (MutableMapModel.IteratorOutput.Next_q b@@81))) (and (=> (|MutableMapModel.IteratorOutput#Equal| a@@131 b@@81) (and (= (MutableMapModel.IteratorOutput.key a@@131) (MutableMapModel.IteratorOutput.key b@@81)) (= (MutableMapModel.IteratorOutput.value a@@131) (MutableMapModel.IteratorOutput.value b@@81)))) (=> (and (= (MutableMapModel.IteratorOutput.key a@@131) (MutableMapModel.IteratorOutput.key b@@81)) (= (MutableMapModel.IteratorOutput.value a@@131) (MutableMapModel.IteratorOutput.value b@@81))) (|MutableMapModel.IteratorOutput#Equal| a@@131 b@@81)))) :qid |unknown.0:0| :skolemid |1945| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@131 b@@81) (MutableMapModel.IteratorOutput.Next_q a@@131)) :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@131 b@@81) (MutableMapModel.IteratorOutput.Next_q b@@81)) )))
(assert (forall ((a@@132 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (MutableMapModel.IteratorOutput.Done_q a@@132) (MutableMapModel.IteratorOutput.Done_q b@@82))) (and (=> (|MutableMapModel.IteratorOutput#Equal| a@@132 b@@82) true) (=> true (|MutableMapModel.IteratorOutput#Equal| a@@132 b@@82)))) :qid |unknown.0:0| :skolemid |1946| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@132 b@@82) (MutableMapModel.IteratorOutput.Done_q a@@132)) :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@132 b@@82) (MutableMapModel.IteratorOutput.Done_q b@@82)) )))
(assert (forall ((a@@133 T@U) (b@@83 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (=> (|MutableMapModel.IteratorOutput#Equal| a@@133 b@@83) (= a@@133 b@@83)) (=> (= a@@133 b@@83) (|MutableMapModel.IteratorOutput#Equal| a@@133 b@@83)))) :qid |unknown.0:0| :skolemid |1947| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@133 b@@83)) )))
(assert (forall ((arg0@@316 Int) (arg1@@175 T@U) (arg2@@120 T@U) (arg3@@81 T@U) ) (! (= (type (|#MutableMapModel.Iterator.Iterator| arg0@@316 arg1@@175 arg2@@120 arg3@@81)) DatatypeTypeType) :qid |funType:#MutableMapModel.Iterator.Iterator| :pattern ( (|#MutableMapModel.Iterator.Iterator| arg0@@316 arg1@@175 arg2@@120 arg3@@81)) )))
(assert (forall ((|a#69#0#0| Int) (|a#69#1#0| T@U) (|a#69#2#0| T@U) (|a#69#3#0| T@U) ) (!  (=> (and (and (= (type |a#69#1#0|) (MapType0Type BoxType boolType)) (= (type |a#69#2#0|) BoxType)) (= (type |a#69#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MutableMapModel.Iterator.Iterator| |a#69#0#0| |a#69#1#0| |a#69#2#0| |a#69#3#0|)) |##MutableMapModel.Iterator.Iterator|)) :qid |MutableM.1404:5| :skolemid |1948| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#69#0#0| |a#69#1#0| |a#69#2#0| |a#69#3#0|)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (and (=> (MutableMapModel.Iterator.Iterator_q d@@64) (= (DatatypeCtorId d@@64) |##MutableMapModel.Iterator.Iterator|)) (=> (= (DatatypeCtorId d@@64) |##MutableMapModel.Iterator.Iterator|) (MutableMapModel.Iterator.Iterator_q d@@64)))) :qid |unknown.0:0| :skolemid |1949| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (MutableMapModel.Iterator.Iterator_q d@@65)) (exists ((|a#70#0#0| Int) (|a#70#1#0| T@U) (|a#70#2#0| T@U) (|a#70#3#0| T@U) ) (!  (and (and (and (= (type |a#70#1#0|) (MapType0Type BoxType boolType)) (= (type |a#70#2#0|) BoxType)) (= (type |a#70#3#0|) DatatypeTypeType)) (= d@@65 (|#MutableMapModel.Iterator.Iterator| |a#70#0#0| |a#70#1#0| |a#70#2#0| |a#70#3#0|))) :qid |MutableM.1404:5| :skolemid |1950| :no-pattern (type |a#70#1#0|) :no-pattern (type |a#70#2#0|) :no-pattern (type |a#70#3#0|) :no-pattern (U_2_int |a#70#1#0|) :no-pattern (U_2_bool |a#70#1#0|) :no-pattern (U_2_int |a#70#2#0|) :no-pattern (U_2_bool |a#70#2#0|) :no-pattern (U_2_int |a#70#3#0|) :no-pattern (U_2_bool |a#70#3#0|) ))) :qid |unknown.0:0| :skolemid |1951| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@65)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass.MutableMapModel.Iterator arg0@@317)) TyType) :qid |funType:Tclass.MutableMapModel.Iterator| :pattern ( (Tclass.MutableMapModel.Iterator arg0@@317)) )))
(assert (forall ((MutableMapModel.Iterator$V T@U) ) (!  (=> (= (type MutableMapModel.Iterator$V) TyType) (= (Tag (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V)) Tagclass.MutableMapModel.Iterator)) :qid |unknown.0:0| :skolemid |1952| :pattern ( (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass.MutableMapModel.Iterator_0 arg0@@318)) TyType) :qid |funType:Tclass.MutableMapModel.Iterator_0| :pattern ( (Tclass.MutableMapModel.Iterator_0 arg0@@318)) )))
(assert (forall ((MutableMapModel.Iterator$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.Iterator$V@@0) TyType) (= (Tclass.MutableMapModel.Iterator_0 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@0)) MutableMapModel.Iterator$V@@0)) :qid |unknown.0:0| :skolemid |1953| :pattern ( (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@0)) )))
(assert (forall ((MutableMapModel.Iterator$V@@1 T@U) (bx@@117 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Iterator$V@@1) TyType) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@117)) bx@@117) ($Is ($Unbox DatatypeTypeType bx@@117) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1)))) :qid |unknown.0:0| :skolemid |1954| :pattern ( ($IsBox bx@@117 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1))) )))
(assert (forall ((MutableMapModel.Iterator$V@@2 T@U) (|a#71#0#0| Int) (|a#71#1#0| T@U) (|a#71#2#0| T@U) (|a#71#3#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.Iterator$V@@2) TyType) (= (type |a#71#1#0|) (MapType0Type BoxType boolType))) (= (type |a#71#2#0|) BoxType)) (= (type |a#71#3#0|) DatatypeTypeType)) (and (=> ($Is (|#MutableMapModel.Iterator.Iterator| |a#71#0#0| |a#71#1#0| |a#71#2#0| |a#71#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@2)) (and (and (and ($Is (int_2_U |a#71#0#0|) Tclass.NativeTypes.uint64) ($Is |a#71#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#71#2#0| TORDINAL)) ($Is |a#71#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@2)))) (=> (and (and (and ($Is (int_2_U |a#71#0#0|) Tclass.NativeTypes.uint64) ($Is |a#71#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#71#2#0| TORDINAL)) ($Is |a#71#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@2))) ($Is (|#MutableMapModel.Iterator.Iterator| |a#71#0#0| |a#71#1#0| |a#71#2#0| |a#71#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@2))))) :qid |unknown.0:0| :skolemid |1955| :pattern ( ($Is (|#MutableMapModel.Iterator.Iterator| |a#71#0#0| |a#71#1#0| |a#71#2#0| |a#71#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@2))) )))
(assert (forall ((MutableMapModel.Iterator$V@@3 T@U) (|a#72#0#0| Int) (|a#72#1#0| T@U) (|a#72#2#0| T@U) (|a#72#3#0| T@U) ($h@@103 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel.Iterator$V@@3) TyType) (= (type |a#72#1#0|) (MapType0Type BoxType boolType))) (= (type |a#72#2#0|) BoxType)) (= (type |a#72#3#0|) DatatypeTypeType)) (= (type $h@@103) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@103)) (and (=> ($IsAlloc (|#MutableMapModel.Iterator.Iterator| |a#72#0#0| |a#72#1#0| |a#72#2#0| |a#72#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@3) $h@@103) (and (and (and ($IsAlloc (int_2_U |a#72#0#0|) Tclass.NativeTypes.uint64 $h@@103) ($IsAlloc |a#72#1#0| (TSet Tclass.NativeTypes.uint64) $h@@103)) ($IsAlloc |a#72#2#0| TORDINAL $h@@103)) ($IsAlloc |a#72#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@3) $h@@103))) (=> (and (and (and ($IsAlloc (int_2_U |a#72#0#0|) Tclass.NativeTypes.uint64 $h@@103) ($IsAlloc |a#72#1#0| (TSet Tclass.NativeTypes.uint64) $h@@103)) ($IsAlloc |a#72#2#0| TORDINAL $h@@103)) ($IsAlloc |a#72#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@3) $h@@103)) ($IsAlloc (|#MutableMapModel.Iterator.Iterator| |a#72#0#0| |a#72#1#0| |a#72#2#0| |a#72#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@3) $h@@103)))) :qid |unknown.0:0| :skolemid |1956| :pattern ( ($IsAlloc (|#MutableMapModel.Iterator.Iterator| |a#72#0#0| |a#72#1#0| |a#72#2#0| |a#72#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@3) $h@@103)) )))
(assert (forall ((d@@66 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@66) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (MutableMapModel.Iterator.Iterator_q d@@66) (exists ((MutableMapModel.Iterator$V@@4 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@4) TyType) ($IsAlloc d@@66 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@4) $h@@104)) :qid |unknown.0:0| :skolemid |1957| :pattern ( ($IsAlloc d@@66 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@4) $h@@104)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Iterator.i d@@66)) Tclass.NativeTypes.uint64 $h@@104)) :qid |unknown.0:0| :skolemid |1958| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Iterator.i d@@66)) Tclass.NativeTypes.uint64 $h@@104)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (MutableMapModel.Iterator.s arg0@@319)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.Iterator.s| :pattern ( (MutableMapModel.Iterator.s arg0@@319)) )))
(assert (forall ((d@@67 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type d@@67) DatatypeTypeType) (= (type $h@@105) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@105) (and (MutableMapModel.Iterator.Iterator_q d@@67) (exists ((MutableMapModel.Iterator$V@@5 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@5) TyType) ($IsAlloc d@@67 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@5) $h@@105)) :qid |unknown.0:0| :skolemid |1959| :pattern ( ($IsAlloc d@@67 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@5) $h@@105)) ))))) ($IsAlloc (MutableMapModel.Iterator.s d@@67) (TSet Tclass.NativeTypes.uint64) $h@@105)) :qid |unknown.0:0| :skolemid |1960| :pattern ( ($IsAlloc (MutableMapModel.Iterator.s d@@67) (TSet Tclass.NativeTypes.uint64) $h@@105)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (MutableMapModel.Iterator.decreaser arg0@@320)) BoxType) :qid |funType:MutableMapModel.Iterator.decreaser| :pattern ( (MutableMapModel.Iterator.decreaser arg0@@320)) )))
(assert (forall ((d@@68 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@68) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (MutableMapModel.Iterator.Iterator_q d@@68) (exists ((MutableMapModel.Iterator$V@@6 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@6) TyType) ($IsAlloc d@@68 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@6) $h@@106)) :qid |unknown.0:0| :skolemid |1961| :pattern ( ($IsAlloc d@@68 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@6) $h@@106)) ))))) ($IsAlloc (MutableMapModel.Iterator.decreaser d@@68) TORDINAL $h@@106)) :qid |unknown.0:0| :skolemid |1962| :pattern ( ($IsAlloc (MutableMapModel.Iterator.decreaser d@@68) TORDINAL $h@@106)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (MutableMapModel.Iterator.next arg0@@321)) DatatypeTypeType) :qid |funType:MutableMapModel.Iterator.next| :pattern ( (MutableMapModel.Iterator.next arg0@@321)) )))
(assert (forall ((d@@69 T@U) (MutableMapModel.Iterator$V@@7 T@U) ($h@@107 T@U) ) (!  (=> (and (and (and (= (type d@@69) DatatypeTypeType) (= (type MutableMapModel.Iterator$V@@7) TyType)) (= (type $h@@107) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@107) (and (MutableMapModel.Iterator.Iterator_q d@@69) ($IsAlloc d@@69 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@7) $h@@107)))) ($IsAlloc (MutableMapModel.Iterator.next d@@69) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@7) $h@@107)) :qid |unknown.0:0| :skolemid |1963| :pattern ( ($IsAlloc (MutableMapModel.Iterator.next d@@69) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@7) $h@@107)) )))
(assert (forall ((|a#73#0#0| Int) (|a#73#1#0| T@U) (|a#73#2#0| T@U) (|a#73#3#0| T@U) ) (!  (=> (and (and (= (type |a#73#1#0|) (MapType0Type BoxType boolType)) (= (type |a#73#2#0|) BoxType)) (= (type |a#73#3#0|) DatatypeTypeType)) (= (|#MutableMapModel.Iterator.Iterator| (LitInt |a#73#0#0|) (Lit |a#73#1#0|) (Lit |a#73#2#0|) (Lit |a#73#3#0|)) (Lit (|#MutableMapModel.Iterator.Iterator| |a#73#0#0| |a#73#1#0| |a#73#2#0| |a#73#3#0|)))) :qid |MutableM.1404:5| :skolemid |1964| :pattern ( (|#MutableMapModel.Iterator.Iterator| (LitInt |a#73#0#0|) (Lit |a#73#1#0|) (Lit |a#73#2#0|) (Lit |a#73#3#0|))) )))
(assert (forall ((|a#74#0#0| Int) (|a#74#1#0| T@U) (|a#74#2#0| T@U) (|a#74#3#0| T@U) ) (!  (=> (and (and (= (type |a#74#1#0|) (MapType0Type BoxType boolType)) (= (type |a#74#2#0|) BoxType)) (= (type |a#74#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.i (|#MutableMapModel.Iterator.Iterator| |a#74#0#0| |a#74#1#0| |a#74#2#0| |a#74#3#0|)) |a#74#0#0|)) :qid |MutableM.1404:5| :skolemid |1965| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#74#0#0| |a#74#1#0| |a#74#2#0| |a#74#3#0|)) )))
(assert (forall ((|a#75#0#0| Int) (|a#75#1#0| T@U) (|a#75#2#0| T@U) (|a#75#3#0| T@U) ) (!  (=> (and (and (= (type |a#75#1#0|) (MapType0Type BoxType boolType)) (= (type |a#75#2#0|) BoxType)) (= (type |a#75#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.s (|#MutableMapModel.Iterator.Iterator| |a#75#0#0| |a#75#1#0| |a#75#2#0| |a#75#3#0|)) |a#75#1#0|)) :qid |MutableM.1404:5| :skolemid |1966| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#75#0#0| |a#75#1#0| |a#75#2#0| |a#75#3#0|)) )))
(assert (forall ((|a#76#0#0| Int) (|a#76#1#0| T@U) (|a#76#2#0| T@U) (|a#76#3#0| T@U) (d@@70 T@U) ) (!  (=> (and (and (and (and (= (type |a#76#1#0|) (MapType0Type BoxType boolType)) (= (type |a#76#2#0|) BoxType)) (= (type |a#76#3#0|) DatatypeTypeType)) (= (type d@@70) DatatypeTypeType)) (U_2_bool (MapType0Select |a#76#1#0| ($Box d@@70)))) (< (DtRank d@@70) (DtRank (|#MutableMapModel.Iterator.Iterator| |a#76#0#0| |a#76#1#0| |a#76#2#0| |a#76#3#0|)))) :qid |MutableM.1404:5| :skolemid |1967| :pattern ( (MapType0Select |a#76#1#0| ($Box d@@70)) (|#MutableMapModel.Iterator.Iterator| |a#76#0#0| |a#76#1#0| |a#76#2#0| |a#76#3#0|)) )))
(assert (forall ((|a#77#0#0| Int) (|a#77#1#0| T@U) (|a#77#2#0| T@U) (|a#77#3#0| T@U) ) (!  (=> (and (and (= (type |a#77#1#0|) (MapType0Type BoxType boolType)) (= (type |a#77#2#0|) BoxType)) (= (type |a#77#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.decreaser (|#MutableMapModel.Iterator.Iterator| |a#77#0#0| |a#77#1#0| |a#77#2#0| |a#77#3#0|)) |a#77#2#0|)) :qid |MutableM.1404:5| :skolemid |1968| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#77#0#0| |a#77#1#0| |a#77#2#0| |a#77#3#0|)) )))
(assert (forall ((|a#78#0#0| Int) (|a#78#1#0| T@U) (|a#78#2#0| T@U) (|a#78#3#0| T@U) ) (!  (=> (and (and (= (type |a#78#1#0|) (MapType0Type BoxType boolType)) (= (type |a#78#2#0|) BoxType)) (= (type |a#78#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.next (|#MutableMapModel.Iterator.Iterator| |a#78#0#0| |a#78#1#0| |a#78#2#0| |a#78#3#0|)) |a#78#3#0|)) :qid |MutableM.1404:5| :skolemid |1969| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#78#0#0| |a#78#1#0| |a#78#2#0| |a#78#3#0|)) )))
(assert (forall ((|a#79#0#0| Int) (|a#79#1#0| T@U) (|a#79#2#0| T@U) (|a#79#3#0| T@U) ) (!  (=> (and (and (= (type |a#79#1#0|) (MapType0Type BoxType boolType)) (= (type |a#79#2#0|) BoxType)) (= (type |a#79#3#0|) DatatypeTypeType)) (< (DtRank |a#79#3#0|) (DtRank (|#MutableMapModel.Iterator.Iterator| |a#79#0#0| |a#79#1#0| |a#79#2#0| |a#79#3#0|)))) :qid |MutableM.1404:5| :skolemid |1970| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#79#0#0| |a#79#1#0| |a#79#2#0| |a#79#3#0|)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) (|$IsA#MutableMapModel.Iterator| d@@71)) (MutableMapModel.Iterator.Iterator_q d@@71)) :qid |unknown.0:0| :skolemid |1971| :pattern ( (|$IsA#MutableMapModel.Iterator| d@@71)) )))
(assert (forall ((MutableMapModel.Iterator$V@@8 T@U) (d@@72 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Iterator$V@@8) TyType) (= (type d@@72) DatatypeTypeType)) ($Is d@@72 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@8))) (MutableMapModel.Iterator.Iterator_q d@@72)) :qid |unknown.0:0| :skolemid |1972| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@72) ($Is d@@72 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@8))) )))
(assert (forall ((a@@134 T@U) (b@@84 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) true) (and (=> (|MutableMapModel.Iterator#Equal| a@@134 b@@84) (and (and (and (= (MutableMapModel.Iterator.i a@@134) (MutableMapModel.Iterator.i b@@84)) (|Set#Equal| (MutableMapModel.Iterator.s a@@134) (MutableMapModel.Iterator.s b@@84))) (= (MutableMapModel.Iterator.decreaser a@@134) (MutableMapModel.Iterator.decreaser b@@84))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.Iterator.next a@@134) (MutableMapModel.Iterator.next b@@84)))) (=> (and (and (and (= (MutableMapModel.Iterator.i a@@134) (MutableMapModel.Iterator.i b@@84)) (|Set#Equal| (MutableMapModel.Iterator.s a@@134) (MutableMapModel.Iterator.s b@@84))) (= (MutableMapModel.Iterator.decreaser a@@134) (MutableMapModel.Iterator.decreaser b@@84))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.Iterator.next a@@134) (MutableMapModel.Iterator.next b@@84))) (|MutableMapModel.Iterator#Equal| a@@134 b@@84)))) :qid |unknown.0:0| :skolemid |1973| :pattern ( (|MutableMapModel.Iterator#Equal| a@@134 b@@84)) )))
(assert (forall ((a@@135 T@U) (b@@85 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (=> (|MutableMapModel.Iterator#Equal| a@@135 b@@85) (= a@@135 b@@85)) (=> (= a@@135 b@@85) (|MutableMapModel.Iterator#Equal| a@@135 b@@85)))) :qid |unknown.0:0| :skolemid |1974| :pattern ( (|MutableMapModel.Iterator#Equal| a@@135 b@@85)) )))
(assert (forall ((arg0@@322 Int) (arg1@@176 T@U) (arg2@@121 T@U) ) (! (= (type (|#MutableMapModel.SimpleIterator.SimpleIterator| arg0@@322 arg1@@176 arg2@@121)) DatatypeTypeType) :qid |funType:#MutableMapModel.SimpleIterator.SimpleIterator| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| arg0@@322 arg1@@176 arg2@@121)) )))
(assert (forall ((|a#80#0#0| Int) (|a#80#1#0| T@U) (|a#80#2#0| T@U) ) (!  (=> (and (= (type |a#80#1#0|) (MapType0Type BoxType boolType)) (= (type |a#80#2#0|) BoxType)) (= (DatatypeCtorId (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#80#0#0| |a#80#1#0| |a#80#2#0|)) |##MutableMapModel.SimpleIterator.SimpleIterator|)) :qid |MutableM.1410:5| :skolemid |1975| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#80#0#0| |a#80#1#0| |a#80#2#0|)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (= (type d@@73) DatatypeTypeType) (and (=> (MutableMapModel.SimpleIterator.SimpleIterator_q d@@73) (= (DatatypeCtorId d@@73) |##MutableMapModel.SimpleIterator.SimpleIterator|)) (=> (= (DatatypeCtorId d@@73) |##MutableMapModel.SimpleIterator.SimpleIterator|) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@73)))) :qid |unknown.0:0| :skolemid |1976| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@73)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (and (= (type d@@74) DatatypeTypeType) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@74)) (exists ((|a#81#0#0| Int) (|a#81#1#0| T@U) (|a#81#2#0| T@U) ) (!  (and (and (= (type |a#81#1#0|) (MapType0Type BoxType boolType)) (= (type |a#81#2#0|) BoxType)) (= d@@74 (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#81#0#0| |a#81#1#0| |a#81#2#0|))) :qid |MutableM.1410:5| :skolemid |1977| :no-pattern (type |a#81#1#0|) :no-pattern (type |a#81#2#0|) :no-pattern (U_2_int |a#81#1#0|) :no-pattern (U_2_bool |a#81#1#0|) :no-pattern (U_2_int |a#81#2#0|) :no-pattern (U_2_bool |a#81#2#0|) ))) :qid |unknown.0:0| :skolemid |1978| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@74)) )))
(assert (= (type Tclass.MutableMapModel.SimpleIterator) TyType))
(assert (= (Tag Tclass.MutableMapModel.SimpleIterator) Tagclass.MutableMapModel.SimpleIterator))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.MutableMapModel.SimpleIterator)) (and (= ($Box ($Unbox DatatypeTypeType bx@@118)) bx@@118) ($Is ($Unbox DatatypeTypeType bx@@118) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |1979| :pattern ( ($IsBox bx@@118 Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((|a#82#0#0| Int) (|a#82#1#0| T@U) (|a#82#2#0| T@U) ) (!  (=> (and (= (type |a#82#1#0|) (MapType0Type BoxType boolType)) (= (type |a#82#2#0|) BoxType)) (and (=> ($Is (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#82#0#0| |a#82#1#0| |a#82#2#0|) Tclass.MutableMapModel.SimpleIterator) (and (and ($Is (int_2_U |a#82#0#0|) Tclass.NativeTypes.uint64) ($Is |a#82#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#82#2#0| TORDINAL))) (=> (and (and ($Is (int_2_U |a#82#0#0|) Tclass.NativeTypes.uint64) ($Is |a#82#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#82#2#0| TORDINAL)) ($Is (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#82#0#0| |a#82#1#0| |a#82#2#0|) Tclass.MutableMapModel.SimpleIterator)))) :qid |MutableM.1410:5| :skolemid |1980| :pattern ( ($Is (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#82#0#0| |a#82#1#0| |a#82#2#0|) Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((|a#83#0#0| Int) (|a#83#1#0| T@U) (|a#83#2#0| T@U) ($h@@108 T@U) ) (!  (=> (and (and (and (= (type |a#83#1#0|) (MapType0Type BoxType boolType)) (= (type |a#83#2#0|) BoxType)) (= (type $h@@108) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@108)) (and (=> ($IsAlloc (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#83#0#0| |a#83#1#0| |a#83#2#0|) Tclass.MutableMapModel.SimpleIterator $h@@108) (and (and ($IsAlloc (int_2_U |a#83#0#0|) Tclass.NativeTypes.uint64 $h@@108) ($IsAlloc |a#83#1#0| (TSet Tclass.NativeTypes.uint64) $h@@108)) ($IsAlloc |a#83#2#0| TORDINAL $h@@108))) (=> (and (and ($IsAlloc (int_2_U |a#83#0#0|) Tclass.NativeTypes.uint64 $h@@108) ($IsAlloc |a#83#1#0| (TSet Tclass.NativeTypes.uint64) $h@@108)) ($IsAlloc |a#83#2#0| TORDINAL $h@@108)) ($IsAlloc (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#83#0#0| |a#83#1#0| |a#83#2#0|) Tclass.MutableMapModel.SimpleIterator $h@@108)))) :qid |MutableM.1410:5| :skolemid |1981| :pattern ( ($IsAlloc (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#83#0#0| |a#83#1#0| |a#83#2#0|) Tclass.MutableMapModel.SimpleIterator $h@@108)) )))
(assert (forall ((d@@75 T@U) ($h@@109 T@U) ) (!  (=> (and (and (= (type d@@75) DatatypeTypeType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@109) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@75) ($IsAlloc d@@75 Tclass.MutableMapModel.SimpleIterator $h@@109)))) ($IsAlloc (int_2_U (MutableMapModel.SimpleIterator.i d@@75)) Tclass.NativeTypes.uint64 $h@@109)) :qid |unknown.0:0| :skolemid |1982| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.SimpleIterator.i d@@75)) Tclass.NativeTypes.uint64 $h@@109)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (MutableMapModel.SimpleIterator.s arg0@@323)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.SimpleIterator.s| :pattern ( (MutableMapModel.SimpleIterator.s arg0@@323)) )))
(assert (forall ((d@@76 T@U) ($h@@110 T@U) ) (!  (=> (and (and (= (type d@@76) DatatypeTypeType) (= (type $h@@110) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@110) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@76) ($IsAlloc d@@76 Tclass.MutableMapModel.SimpleIterator $h@@110)))) ($IsAlloc (MutableMapModel.SimpleIterator.s d@@76) (TSet Tclass.NativeTypes.uint64) $h@@110)) :qid |unknown.0:0| :skolemid |1983| :pattern ( ($IsAlloc (MutableMapModel.SimpleIterator.s d@@76) (TSet Tclass.NativeTypes.uint64) $h@@110)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (MutableMapModel.SimpleIterator.decreaser arg0@@324)) BoxType) :qid |funType:MutableMapModel.SimpleIterator.decreaser| :pattern ( (MutableMapModel.SimpleIterator.decreaser arg0@@324)) )))
(assert (forall ((d@@77 T@U) ($h@@111 T@U) ) (!  (=> (and (and (= (type d@@77) DatatypeTypeType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@111) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@77) ($IsAlloc d@@77 Tclass.MutableMapModel.SimpleIterator $h@@111)))) ($IsAlloc (MutableMapModel.SimpleIterator.decreaser d@@77) TORDINAL $h@@111)) :qid |unknown.0:0| :skolemid |1984| :pattern ( ($IsAlloc (MutableMapModel.SimpleIterator.decreaser d@@77) TORDINAL $h@@111)) )))
(assert (forall ((|a#84#0#0| Int) (|a#84#1#0| T@U) (|a#84#2#0| T@U) ) (!  (=> (and (= (type |a#84#1#0|) (MapType0Type BoxType boolType)) (= (type |a#84#2#0|) BoxType)) (= (|#MutableMapModel.SimpleIterator.SimpleIterator| (LitInt |a#84#0#0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|)) (Lit (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#84#0#0| |a#84#1#0| |a#84#2#0|)))) :qid |MutableM.1410:5| :skolemid |1985| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| (LitInt |a#84#0#0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|))) )))
(assert (forall ((|a#85#0#0| Int) (|a#85#1#0| T@U) (|a#85#2#0| T@U) ) (!  (=> (and (= (type |a#85#1#0|) (MapType0Type BoxType boolType)) (= (type |a#85#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.i (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#85#0#0| |a#85#1#0| |a#85#2#0|)) |a#85#0#0|)) :qid |MutableM.1410:5| :skolemid |1986| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#85#0#0| |a#85#1#0| |a#85#2#0|)) )))
(assert (forall ((|a#86#0#0| Int) (|a#86#1#0| T@U) (|a#86#2#0| T@U) ) (!  (=> (and (= (type |a#86#1#0|) (MapType0Type BoxType boolType)) (= (type |a#86#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.s (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#86#0#0| |a#86#1#0| |a#86#2#0|)) |a#86#1#0|)) :qid |MutableM.1410:5| :skolemid |1987| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#86#0#0| |a#86#1#0| |a#86#2#0|)) )))
(assert (forall ((|a#87#0#0| Int) (|a#87#1#0| T@U) (|a#87#2#0| T@U) (d@@78 T@U) ) (!  (=> (and (and (and (= (type |a#87#1#0|) (MapType0Type BoxType boolType)) (= (type |a#87#2#0|) BoxType)) (= (type d@@78) DatatypeTypeType)) (U_2_bool (MapType0Select |a#87#1#0| ($Box d@@78)))) (< (DtRank d@@78) (DtRank (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#87#0#0| |a#87#1#0| |a#87#2#0|)))) :qid |MutableM.1410:5| :skolemid |1988| :pattern ( (MapType0Select |a#87#1#0| ($Box d@@78)) (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#87#0#0| |a#87#1#0| |a#87#2#0|)) )))
(assert (forall ((|a#88#0#0| Int) (|a#88#1#0| T@U) (|a#88#2#0| T@U) ) (!  (=> (and (= (type |a#88#1#0|) (MapType0Type BoxType boolType)) (= (type |a#88#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.decreaser (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#88#0#0| |a#88#1#0| |a#88#2#0|)) |a#88#2#0|)) :qid |MutableM.1410:5| :skolemid |1989| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#88#0#0| |a#88#1#0| |a#88#2#0|)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) (|$IsA#MutableMapModel.SimpleIterator| d@@79)) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@79)) :qid |unknown.0:0| :skolemid |1990| :pattern ( (|$IsA#MutableMapModel.SimpleIterator| d@@79)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (and (= (type d@@80) DatatypeTypeType) ($Is d@@80 Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@80)) :qid |unknown.0:0| :skolemid |1991| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@80) ($Is d@@80 Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((a@@136 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) true) (and (=> (|MutableMapModel.SimpleIterator#Equal| a@@136 b@@86) (and (and (= (MutableMapModel.SimpleIterator.i a@@136) (MutableMapModel.SimpleIterator.i b@@86)) (|Set#Equal| (MutableMapModel.SimpleIterator.s a@@136) (MutableMapModel.SimpleIterator.s b@@86))) (= (MutableMapModel.SimpleIterator.decreaser a@@136) (MutableMapModel.SimpleIterator.decreaser b@@86)))) (=> (and (and (= (MutableMapModel.SimpleIterator.i a@@136) (MutableMapModel.SimpleIterator.i b@@86)) (|Set#Equal| (MutableMapModel.SimpleIterator.s a@@136) (MutableMapModel.SimpleIterator.s b@@86))) (= (MutableMapModel.SimpleIterator.decreaser a@@136) (MutableMapModel.SimpleIterator.decreaser b@@86))) (|MutableMapModel.SimpleIterator#Equal| a@@136 b@@86)))) :qid |unknown.0:0| :skolemid |1992| :pattern ( (|MutableMapModel.SimpleIterator#Equal| a@@136 b@@86)) )))
(assert (forall ((a@@137 T@U) (b@@87 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (=> (|MutableMapModel.SimpleIterator#Equal| a@@137 b@@87) (= a@@137 b@@87)) (=> (= a@@137 b@@87) (|MutableMapModel.SimpleIterator#Equal| a@@137 b@@87)))) :qid |unknown.0:0| :skolemid |1993| :pattern ( (|MutableMapModel.SimpleIterator#Equal| a@@137 b@@87)) )))
(assert (= (type Tclass.MutableMapModel.__default) TyType))
(assert (= (Tag Tclass.MutableMapModel.__default) Tagclass.MutableMapModel.__default))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.MutableMapModel.__default)) (and (= ($Box ($Unbox refType bx@@119)) bx@@119) ($Is ($Unbox refType bx@@119) Tclass.MutableMapModel.__default))) :qid |unknown.0:0| :skolemid |1994| :pattern ( ($IsBox bx@@119 Tclass.MutableMapModel.__default)) )))
(assert (forall (($o@@69 T@U) ) (!  (=> (= (type $o@@69) refType) (and (=> ($Is $o@@69 Tclass.MutableMapModel.__default) (or (= $o@@69 null) (= (dtype $o@@69) Tclass.MutableMapModel.__default))) (=> (or (= $o@@69 null) (= (dtype $o@@69) Tclass.MutableMapModel.__default)) ($Is $o@@69 Tclass.MutableMapModel.__default)))) :qid |unknown.0:0| :skolemid |1995| :pattern ( ($Is $o@@69 Tclass.MutableMapModel.__default)) )))
(assert (forall (($o@@70 T@U) ($h@@112 T@U) ) (!  (=> (and (= (type $o@@70) refType) (= (type $h@@112) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@70 Tclass.MutableMapModel.__default $h@@112) (or (= $o@@70 null) (U_2_bool (MapType1Select (MapType0Select $h@@112 $o@@70) alloc)))) (=> (or (= $o@@70 null) (U_2_bool (MapType1Select (MapType0Select $h@@112 $o@@70) alloc))) ($IsAlloc $o@@70 Tclass.MutableMapModel.__default $h@@112)))) :qid |unknown.0:0| :skolemid |1996| :pattern ( ($IsAlloc $o@@70 Tclass.MutableMapModel.__default $h@@112)) )))
(assert (forall (($ly@@290 T@U) (|a#0@@79| Int) (|b#0@@53| Int) ) (!  (=> (= (type $ly@@290) LayerTypeType) (= (MutableMapModel.__default.lshift ($LS $ly@@290) |a#0@@79| |b#0@@53|) (MutableMapModel.__default.lshift $ly@@290 |a#0@@79| |b#0@@53|))) :qid |MutableM.29:29| :skolemid |1997| :pattern ( (MutableMapModel.__default.lshift ($LS $ly@@290) |a#0@@79| |b#0@@53|)) )))
(assert (forall (($ly@@291 T@U) (|a#0@@80| Int) (|b#0@@54| Int) ) (!  (=> (= (type $ly@@291) LayerTypeType) (= (MutableMapModel.__default.lshift $ly@@291 |a#0@@80| |b#0@@54|) (MutableMapModel.__default.lshift $LZ |a#0@@80| |b#0@@54|))) :qid |MutableM.29:29| :skolemid |1998| :pattern ( (MutableMapModel.__default.lshift (AsFuelBottom $ly@@291) |a#0@@80| |b#0@@54|)) )))
(assert  (=> true (forall (($ly@@292 T@U) (|a#0@@81| Int) (|b#0@@55| Int) ) (!  (=> (and (= (type $ly@@292) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| |a#0@@81| |b#0@@55|) (and (and (and (<= (LitInt 0) |a#0@@81|) (< |a#0@@81| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@55|) (< |b#0@@55| 4294967296))) (and (<= (LitInt 0) |b#0@@55|) (< |b#0@@55| 64))))) (and (<= (LitInt 0) (MutableMapModel.__default.lshift $ly@@292 |a#0@@81| |b#0@@55|)) (< (MutableMapModel.__default.lshift $ly@@292 |a#0@@81| |b#0@@55|) 18446744073709551616))) :qid |MutableM.29:29| :skolemid |1999| :pattern ( (MutableMapModel.__default.lshift $ly@@292 |a#0@@81| |b#0@@55|)) ))))
(assert (forall (($ly@@293 T@U) (|a#0@@82| Int) (|b#0@@56| Int) ) (!  (=> (= (type $ly@@293) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@82|) (< |a#0@@82| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@56|) (< |b#0@@56| 4294967296))) (and (=> (|MutableMapModel.__default.lshift#requires| $ly@@293 |a#0@@82| |b#0@@56|) (and (<= (LitInt 0) |b#0@@56|) (< |b#0@@56| 64))) (=> (and (<= (LitInt 0) |b#0@@56|) (< |b#0@@56| 64)) (|MutableMapModel.__default.lshift#requires| $ly@@293 |a#0@@82| |b#0@@56|))))) :qid |MutableM.29:29| :skolemid |2000| :pattern ( (|MutableMapModel.__default.lshift#requires| $ly@@293 |a#0@@82| |b#0@@56|)) )))
(assert  (=> true (forall (($ly@@294 T@U) (|a#0@@83| Int) (|b#0@@57| Int) ) (!  (=> (and (= (type $ly@@294) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| |a#0@@83| |b#0@@57|) (and (and (and (<= (LitInt 0) |a#0@@83|) (< |a#0@@83| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@57|) (< |b#0@@57| 4294967296))) (and (<= (LitInt 0) |b#0@@57|) (< |b#0@@57| 64))))) (= (MutableMapModel.__default.lshift ($LS $ly@@294) |a#0@@83| |b#0@@57|) (nat_from_bv64 (bvshl ((_ int2bv 64) |a#0@@83|) ((_ int2bv 64) |b#0@@57|))))) :qid |MutableM.29:29| :skolemid |2001| :pattern ( (MutableMapModel.__default.lshift ($LS $ly@@294) |a#0@@83| |b#0@@57|)) ))))
(assert  (=> true (forall (($ly@@295 T@U) (|a#0@@84| Int) (|b#0@@58| Int) ) (!  (=> (and (= (type $ly@@295) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| (LitInt |a#0@@84|) (LitInt |b#0@@58|)) (and (and (and (<= (LitInt 0) |a#0@@84|) (< |a#0@@84| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@58|) (< |b#0@@58| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@58|)) (< |b#0@@58| 64))))) (= (MutableMapModel.__default.lshift ($LS $ly@@295) (LitInt |a#0@@84|) (LitInt |b#0@@58|)) (nat_from_bv64 (bvshl ((_ int2bv 64) (LitInt |a#0@@84|)) ((_ int2bv 64) |b#0@@58|))))) :qid |MutableM.29:29| :weight 3 :skolemid |2002| :pattern ( (MutableMapModel.__default.lshift ($LS $ly@@295) (LitInt |a#0@@84|) (LitInt |b#0@@58|))) ))))
(assert (forall (($ly@@296 T@U) (|a#0@@85| Int) (|b#0@@59| Int) ) (!  (=> (= (type $ly@@296) LayerTypeType) (= (MutableMapModel.__default.rshift ($LS $ly@@296) |a#0@@85| |b#0@@59|) (MutableMapModel.__default.rshift $ly@@296 |a#0@@85| |b#0@@59|))) :qid |MutableM.35:29| :skolemid |2003| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@296) |a#0@@85| |b#0@@59|)) )))
(assert (forall (($ly@@297 T@U) (|a#0@@86| Int) (|b#0@@60| Int) ) (!  (=> (= (type $ly@@297) LayerTypeType) (= (MutableMapModel.__default.rshift $ly@@297 |a#0@@86| |b#0@@60|) (MutableMapModel.__default.rshift $LZ |a#0@@86| |b#0@@60|))) :qid |MutableM.35:29| :skolemid |2004| :pattern ( (MutableMapModel.__default.rshift (AsFuelBottom $ly@@297) |a#0@@86| |b#0@@60|)) )))
(assert  (=> true (forall (($ly@@298 T@U) (|a#0@@87| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@298) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| |a#0@@87| |b#0@@61|) (and (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 4294967296))) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 64))))) (and (<= (LitInt 0) (MutableMapModel.__default.rshift $ly@@298 |a#0@@87| |b#0@@61|)) (< (MutableMapModel.__default.rshift $ly@@298 |a#0@@87| |b#0@@61|) 18446744073709551616))) :qid |MutableM.35:29| :skolemid |2005| :pattern ( (MutableMapModel.__default.rshift $ly@@298 |a#0@@87| |b#0@@61|)) ))))
(assert (forall (($ly@@299 T@U) (|a#0@@88| Int) (|b#0@@62| Int) ) (!  (=> (= (type $ly@@299) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@88|) (< |a#0@@88| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 4294967296))) (and (=> (|MutableMapModel.__default.rshift#requires| $ly@@299 |a#0@@88| |b#0@@62|) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 64))) (=> (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 64)) (|MutableMapModel.__default.rshift#requires| $ly@@299 |a#0@@88| |b#0@@62|))))) :qid |MutableM.35:29| :skolemid |2006| :pattern ( (|MutableMapModel.__default.rshift#requires| $ly@@299 |a#0@@88| |b#0@@62|)) )))
(assert  (=> true (forall (($ly@@300 T@U) (|a#0@@89| Int) (|b#0@@63| Int) ) (!  (=> (and (= (type $ly@@300) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| |a#0@@89| |b#0@@63|) (and (and (and (<= (LitInt 0) |a#0@@89|) (< |a#0@@89| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@63|) (< |b#0@@63| 4294967296))) (and (<= (LitInt 0) |b#0@@63|) (< |b#0@@63| 64))))) (= (MutableMapModel.__default.rshift ($LS $ly@@300) |a#0@@89| |b#0@@63|) (nat_from_bv64 (bvlshr ((_ int2bv 64) |a#0@@89|) ((_ int2bv 64) |b#0@@63|))))) :qid |MutableM.35:29| :skolemid |2007| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@300) |a#0@@89| |b#0@@63|)) ))))
(assert  (=> true (forall (($ly@@301 T@U) (|a#0@@90| Int) (|b#0@@64| Int) ) (!  (=> (and (= (type $ly@@301) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| (LitInt |a#0@@90|) (LitInt |b#0@@64|)) (and (and (and (<= (LitInt 0) |a#0@@90|) (< |a#0@@90| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@64|) (< |b#0@@64| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@64|)) (< |b#0@@64| 64))))) (= (MutableMapModel.__default.rshift ($LS $ly@@301) (LitInt |a#0@@90|) (LitInt |b#0@@64|)) (nat_from_bv64 (bvlshr ((_ int2bv 64) (LitInt |a#0@@90|)) ((_ int2bv 64) |b#0@@64|))))) :qid |MutableM.35:29| :weight 3 :skolemid |2008| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@301) (LitInt |a#0@@90|) (LitInt |b#0@@64|))) ))))
(assert (forall (($ly@@302 T@U) (|a#0@@91| Int) ) (!  (=> (= (type $ly@@302) LayerTypeType) (= (MutableMapModel.__default.bitnot ($LS $ly@@302) |a#0@@91|) (MutableMapModel.__default.bitnot $ly@@302 |a#0@@91|))) :qid |MutableM.41:29| :skolemid |2009| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@302) |a#0@@91|)) )))
(assert (forall (($ly@@303 T@U) (|a#0@@92| Int) ) (!  (=> (= (type $ly@@303) LayerTypeType) (= (MutableMapModel.__default.bitnot $ly@@303 |a#0@@92|) (MutableMapModel.__default.bitnot $LZ |a#0@@92|))) :qid |MutableM.41:29| :skolemid |2010| :pattern ( (MutableMapModel.__default.bitnot (AsFuelBottom $ly@@303) |a#0@@92|)) )))
(assert  (=> true (forall (($ly@@304 T@U) (|a#0@@93| Int) ) (!  (=> (and (= (type $ly@@304) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| |a#0@@93|) (and (<= (LitInt 0) |a#0@@93|) (< |a#0@@93| 18446744073709551616)))) (and (<= (LitInt 0) (MutableMapModel.__default.bitnot $ly@@304 |a#0@@93|)) (< (MutableMapModel.__default.bitnot $ly@@304 |a#0@@93|) 18446744073709551616))) :qid |MutableM.41:29| :skolemid |2011| :pattern ( (MutableMapModel.__default.bitnot $ly@@304 |a#0@@93|)) ))))
(assert (forall (($ly@@305 T@U) (|a#0@@94| Int) ) (!  (=> (= (type $ly@@305) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@94|) (< |a#0@@94| 18446744073709551616)) (and (=> (|MutableMapModel.__default.bitnot#requires| $ly@@305 |a#0@@94|) true) (=> true (|MutableMapModel.__default.bitnot#requires| $ly@@305 |a#0@@94|))))) :qid |MutableM.41:29| :skolemid |2012| :pattern ( (|MutableMapModel.__default.bitnot#requires| $ly@@305 |a#0@@94|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|a#0@@95| Int) ) (!  (=> (and (= (type $ly@@306) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| |a#0@@95|) (and (<= (LitInt 0) |a#0@@95|) (< |a#0@@95| 18446744073709551616)))) (= (MutableMapModel.__default.bitnot ($LS $ly@@306) |a#0@@95|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@95|) #xffffffffffffffff)))) :qid |MutableM.41:29| :skolemid |2013| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@306) |a#0@@95|)) ))))
(assert  (=> true (forall (($ly@@307 T@U) (|a#0@@96| Int) ) (!  (=> (and (= (type $ly@@307) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| (LitInt |a#0@@96|)) (and (<= (LitInt 0) |a#0@@96|) (< |a#0@@96| 18446744073709551616)))) (= (MutableMapModel.__default.bitnot ($LS $ly@@307) (LitInt |a#0@@96|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@96|)) #xffffffffffffffff)))) :qid |MutableM.41:29| :weight 3 :skolemid |2014| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@307) (LitInt |a#0@@96|))) ))))
(assert (forall (($ly@@308 T@U) (|a#0@@97| Int) (|b#0@@65| Int) ) (!  (=> (= (type $ly@@308) LayerTypeType) (= (MutableMapModel.__default.bitxor ($LS $ly@@308) |a#0@@97| |b#0@@65|) (MutableMapModel.__default.bitxor $ly@@308 |a#0@@97| |b#0@@65|))) :qid |MutableM.46:29| :skolemid |2015| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@308) |a#0@@97| |b#0@@65|)) )))
(assert (forall (($ly@@309 T@U) (|a#0@@98| Int) (|b#0@@66| Int) ) (!  (=> (= (type $ly@@309) LayerTypeType) (= (MutableMapModel.__default.bitxor $ly@@309 |a#0@@98| |b#0@@66|) (MutableMapModel.__default.bitxor $LZ |a#0@@98| |b#0@@66|))) :qid |MutableM.46:29| :skolemid |2016| :pattern ( (MutableMapModel.__default.bitxor (AsFuelBottom $ly@@309) |a#0@@98| |b#0@@66|)) )))
(assert  (=> true (forall (($ly@@310 T@U) (|a#0@@99| Int) (|b#0@@67| Int) ) (!  (=> (and (= (type $ly@@310) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| |a#0@@99| |b#0@@67|) (and (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 18446744073709551616))))) (and (<= (LitInt 0) (MutableMapModel.__default.bitxor $ly@@310 |a#0@@99| |b#0@@67|)) (< (MutableMapModel.__default.bitxor $ly@@310 |a#0@@99| |b#0@@67|) 18446744073709551616))) :qid |MutableM.46:29| :skolemid |2017| :pattern ( (MutableMapModel.__default.bitxor $ly@@310 |a#0@@99| |b#0@@67|)) ))))
(assert (forall (($ly@@311 T@U) (|a#0@@100| Int) (|b#0@@68| Int) ) (!  (=> (= (type $ly@@311) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@100|) (< |a#0@@100| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@68|) (< |b#0@@68| 18446744073709551616))) (and (=> (|MutableMapModel.__default.bitxor#requires| $ly@@311 |a#0@@100| |b#0@@68|) true) (=> true (|MutableMapModel.__default.bitxor#requires| $ly@@311 |a#0@@100| |b#0@@68|))))) :qid |MutableM.46:29| :skolemid |2018| :pattern ( (|MutableMapModel.__default.bitxor#requires| $ly@@311 |a#0@@100| |b#0@@68|)) )))
(assert  (=> true (forall (($ly@@312 T@U) (|a#0@@101| Int) (|b#0@@69| Int) ) (!  (=> (and (= (type $ly@@312) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| |a#0@@101| |b#0@@69|) (and (and (<= (LitInt 0) |a#0@@101|) (< |a#0@@101| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@69|) (< |b#0@@69| 18446744073709551616))))) (= (MutableMapModel.__default.bitxor ($LS $ly@@312) |a#0@@101| |b#0@@69|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@101|) ((_ int2bv 64) |b#0@@69|))))) :qid |MutableM.46:29| :skolemid |2019| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@312) |a#0@@101| |b#0@@69|)) ))))
(assert  (=> true (forall (($ly@@313 T@U) (|a#0@@102| Int) (|b#0@@70| Int) ) (!  (=> (and (= (type $ly@@313) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| (LitInt |a#0@@102|) (LitInt |b#0@@70|)) (and (and (<= (LitInt 0) |a#0@@102|) (< |a#0@@102| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@70|) (< |b#0@@70| 18446744073709551616))))) (= (MutableMapModel.__default.bitxor ($LS $ly@@313) (LitInt |a#0@@102|) (LitInt |b#0@@70|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@102|)) ((_ int2bv 64) (LitInt |b#0@@70|)))))) :qid |MutableM.46:29| :weight 3 :skolemid |2020| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@313) (LitInt |a#0@@102|) (LitInt |b#0@@70|))) ))))
(assert (forall (($ly@@314 T@U) (|k#0@@46| Int) ) (!  (=> (= (type $ly@@314) LayerTypeType) (= (MutableMapModel.__default.hash64 ($LS $ly@@314) |k#0@@46|) (MutableMapModel.__default.hash64 $ly@@314 |k#0@@46|))) :qid |MutableM.51:29| :skolemid |2021| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@314) |k#0@@46|)) )))
(assert (forall (($ly@@315 T@U) (|k#0@@47| Int) ) (!  (=> (= (type $ly@@315) LayerTypeType) (= (MutableMapModel.__default.hash64 $ly@@315 |k#0@@47|) (MutableMapModel.__default.hash64 $LZ |k#0@@47|))) :qid |MutableM.51:29| :skolemid |2022| :pattern ( (MutableMapModel.__default.hash64 (AsFuelBottom $ly@@315) |k#0@@47|)) )))
(assert  (=> true (forall (($ly@@316 T@U) (|k#0@@48| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| |k#0@@48|) (and (<= (LitInt 0) |k#0@@48|) (< |k#0@@48| 18446744073709551616)))) (and (<= (LitInt 0) (MutableMapModel.__default.hash64 $ly@@316 |k#0@@48|)) (< (MutableMapModel.__default.hash64 $ly@@316 |k#0@@48|) 18446744073709551616))) :qid |MutableM.51:29| :skolemid |2023| :pattern ( (MutableMapModel.__default.hash64 $ly@@316 |k#0@@48|)) ))))
(assert (forall (($ly@@317 T@U) (|k#0@@49| Int) ) (!  (=> (= (type $ly@@317) LayerTypeType) (=> (and (<= (LitInt 0) |k#0@@49|) (< |k#0@@49| 18446744073709551616)) (and (=> (|MutableMapModel.__default.hash64#requires| $ly@@317 |k#0@@49|) true) (=> true (|MutableMapModel.__default.hash64#requires| $ly@@317 |k#0@@49|))))) :qid |MutableM.51:29| :skolemid |2024| :pattern ( (|MutableMapModel.__default.hash64#requires| $ly@@317 |k#0@@49|)) )))
(assert  (and (and (and (= (type StartFuel_MutableMapModel._default.bitnot) LayerTypeType) (= (type StartFuel_MutableMapModel._default.lshift) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.rshift) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.bitxor) LayerTypeType)))
(assert  (=> true (forall (($ly@@318 T@U) (|k#0@@50| Int) ) (!  (=> (and (= (type $ly@@318) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| |k#0@@50|) (and (<= (LitInt 0) |k#0@@50|) (< |k#0@@50| 18446744073709551616)))) (and (and (and (and (|MutableMapModel.__default.bitnot#canCall| |k#0@@50|) (|MutableMapModel.__default.lshift#canCall| |k#0@@50| (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@50|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@50| (LitInt 21)))) (let ((|k0#0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@50|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@50| (LitInt 21))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k0#0| (LitInt 24)) (|MutableMapModel.__default.bitxor#canCall| |k0#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0| (LitInt 24)))) (let ((|k1#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0| (LitInt 24))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k1#0| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3)))) (|MutableMapModel.__default.lshift#canCall| |k1#0| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 8)))) (let ((|k2#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 8))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k2#0| (LitInt 14)) (|MutableMapModel.__default.bitxor#canCall| |k2#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0| (LitInt 14)))) (let ((|k3#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0| (LitInt 14))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k3#0| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2)))) (|MutableMapModel.__default.lshift#canCall| |k3#0| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 4)))) (let ((|k4#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 4))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k4#0| (LitInt 28)) (|MutableMapModel.__default.bitxor#canCall| |k4#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0| (LitInt 28)))) (let ((|k5#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0| (LitInt 28))))) (and (|MutableMapModel.__default.lshift#canCall| |k5#0| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#0| (LitInt 31)))))))))))))))) (= (MutableMapModel.__default.hash64 ($LS $ly@@318) |k#0@@50|) (let ((|k0#0@@0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@50|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@50| (LitInt 21))))) (let ((|k1#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0@@0| (LitInt 24))))) (let ((|k2#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0@@0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0@@0| (LitInt 8))))) (let ((|k3#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0@@0| (LitInt 14))))) (let ((|k4#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0@@0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0@@0| (LitInt 4))))) (let ((|k5#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0@@0| (LitInt 28))))) (let ((|k6#0| (NativeArithmetic.__default.u64add |k5#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#0@@0| (LitInt 31))))) |k6#0|)))))))))) :qid |MutableM.51:29| :skolemid |2025| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@318) |k#0@@50|)) ))))
(assert  (=> true (forall (($ly@@319 T@U) (|k#0@@51| Int) ) (!  (=> (and (= (type $ly@@319) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| (LitInt |k#0@@51|)) (and (<= (LitInt 0) |k#0@@51|) (< |k#0@@51| 18446744073709551616)))) (and (and (and (and (|MutableMapModel.__default.bitnot#canCall| (LitInt |k#0@@51|)) (|MutableMapModel.__default.lshift#canCall| (LitInt |k#0@@51|) (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@51|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@51|) (LitInt 21)))) (let ((|k0#1| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@51|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@51|) (LitInt 21))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k0#1| (LitInt 24)) (|MutableMapModel.__default.bitxor#canCall| |k0#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1| (LitInt 24)))) (let ((|k1#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1| (LitInt 24))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k1#1| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3)))) (|MutableMapModel.__default.lshift#canCall| |k1#1| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 8)))) (let ((|k2#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 8))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k2#1| (LitInt 14)) (|MutableMapModel.__default.bitxor#canCall| |k2#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1| (LitInt 14)))) (let ((|k3#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1| (LitInt 14))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k3#1| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2)))) (|MutableMapModel.__default.lshift#canCall| |k3#1| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 4)))) (let ((|k4#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 4))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k4#1| (LitInt 28)) (|MutableMapModel.__default.bitxor#canCall| |k4#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1| (LitInt 28)))) (let ((|k5#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1| (LitInt 28))))) (and (|MutableMapModel.__default.lshift#canCall| |k5#1| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#1| (LitInt 31)))))))))))))))) (= (MutableMapModel.__default.hash64 ($LS $ly@@319) (LitInt |k#0@@51|)) (let ((|k0#1@@0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@51|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@51|) (LitInt 21))))) (let ((|k1#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1@@0| (LitInt 24))))) (let ((|k2#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1@@0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1@@0| (LitInt 8))))) (let ((|k3#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1@@0| (LitInt 14))))) (let ((|k4#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1@@0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1@@0| (LitInt 4))))) (let ((|k5#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1@@0| (LitInt 28))))) (let ((|k6#1| (NativeArithmetic.__default.u64add |k5#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#1@@0| (LitInt 31))))) |k6#1|)))))))))) :qid |MutableM.51:29| :weight 3 :skolemid |2026| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@319) (LitInt |k#0@@51|))) ))))
(assert  (=> true (forall ((|elementsLength#0| Int) (|slot#0| T@U) ) (!  (=> (and (= (type |slot#0|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| |elementsLength#0| |slot#0|) (and (<= (LitInt 0) |elementsLength#0|) ($Is |slot#0| Tclass.MutableMapModel.Slot)))) true) :qid |MutableM.68:23| :skolemid |2027| :pattern ( (MutableMapModel.__default.ValidSlot |elementsLength#0| |slot#0|)) ))))
(assert (forall ((|elementsLength#0@@0| Int) (|slot#0@@0| T@U) ) (!  (=> (= (type |slot#0@@0|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@0|) ($Is |slot#0@@0| Tclass.MutableMapModel.Slot)) (and (=> (|MutableMapModel.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@0|) true) (=> true (|MutableMapModel.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@0|))))) :qid |MutableM.68:23| :skolemid |2028| :pattern ( (|MutableMapModel.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@0|)) )))
(assert  (=> true (forall ((|elementsLength#0@@1| Int) (|slot#0@@1| T@U) ) (!  (=> (and (= (type |slot#0@@1|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| |elementsLength#0@@1| |slot#0@@1|) (and (<= (LitInt 0) |elementsLength#0@@1|) ($Is |slot#0@@1| Tclass.MutableMapModel.Slot)))) (and (MutableMapModel.Slot.Slot_q |slot#0@@1|) (and (=> (MutableMapModel.__default.ValidSlot |elementsLength#0@@1| |slot#0@@1|) (< (MutableMapModel.Slot.slot |slot#0@@1|) |elementsLength#0@@1|)) (=> (< (MutableMapModel.Slot.slot |slot#0@@1|) |elementsLength#0@@1|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@1| |slot#0@@1|))))) :qid |MutableM.68:23| :skolemid |2029| :pattern ( (MutableMapModel.__default.ValidSlot |elementsLength#0@@1| |slot#0@@1|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@2| Int) (|slot#0@@2| T@U) ) (!  (=> (and (= (type |slot#0@@2|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|)) (and (<= (LitInt 0) |elementsLength#0@@2|) ($Is |slot#0@@2| Tclass.MutableMapModel.Slot)))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@2|)) (and (=> (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|)) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.Slot.slot (Lit |slot#0@@2|)) |elementsLength#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (< (MutableMapModel.Slot.slot (Lit |slot#0@@2|)) |elementsLength#0@@2|)))) (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|)))))) :qid |MutableM.68:23| :weight 3 :skolemid |2030| :pattern ( (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.ValidElements$V T@U) (|elements#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V) TyType) (= (type |elements#0|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V |elements#0|) ($Is |elements#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V))))) true) :qid |unknown.0:0| :skolemid |2031| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V |elements#0|)) ))))
(assert (forall ((MutableMapModel._default.ValidElements$V@@0 T@U) (|elements#0@@0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@0) TyType) (= (type |elements#0@@0|) (SeqType BoxType))) ($Is |elements#0@@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@0)))) (and (=> (|MutableMapModel.__default.ValidElements#requires| MutableMapModel._default.ValidElements$V@@0 |elements#0@@0|) true) (=> true (|MutableMapModel.__default.ValidElements#requires| MutableMapModel._default.ValidElements$V@@0 |elements#0@@0|)))) :qid |unknown.0:0| :skolemid |2032| :pattern ( (|MutableMapModel.__default.ValidElements#requires| MutableMapModel._default.ValidElements$V@@0 |elements#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ValidElements$V@@1 T@U) (|elements#0@@1| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@1) TyType) (= (type |elements#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|) ($Is |elements#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@1))))) (and (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|) (and true (and (< 0 (|Seq#Length| |elements#0@@1|)) (< (|Seq#Length| |elements#0@@1|) 18446744073709551616)))) (=> (and true (and (< 0 (|Seq#Length| |elements#0@@1|)) (< (|Seq#Length| |elements#0@@1|) 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|)))) :qid |unknown.0:0| :skolemid |2033| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ValidElements$V@@2 T@U) (|elements#0@@2| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@2) TyType) (= (type |elements#0@@2|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|)) ($Is |elements#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@2))))) (and (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|)) (and true (and (< 0 (|Seq#Length| (Lit |elements#0@@2|))) (< (|Seq#Length| (Lit |elements#0@@2|)) 18446744073709551616)))) (=> (and true (and (< 0 (|Seq#Length| (Lit |elements#0@@2|))) (< (|Seq#Length| (Lit |elements#0@@2|)) 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |2034| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|))) ))))
(assert (forall ((arg0@@325 Int) (arg1@@177 Int) ) (! (= (type (MutableMapModel.__default.SlotForKey arg0@@325 arg1@@177)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SlotForKey| :pattern ( (MutableMapModel.__default.SlotForKey arg0@@325 arg1@@177)) )))
(assert  (=> true (forall ((|elementsLength#0@@3| Int) (|key#0@@14| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| |elementsLength#0@@3| |key#0@@14|) (and (and (<= (LitInt 0) |elementsLength#0@@3|) (and (<= (LitInt 0) |key#0@@14|) (< |key#0@@14| 18446744073709551616))) (< 0 |elementsLength#0@@3|))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@3| (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0@@14|)) ($Is (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0@@14|) Tclass.MutableMapModel.Slot))) :qid |MutableM.83:23| :skolemid |2035| :pattern ( (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0@@14|)) ))))
(assert (forall ((|elementsLength#0@@4| Int) (|key#0@@15| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@4|) (and (<= (LitInt 0) |key#0@@15|) (< |key#0@@15| 18446744073709551616))) (and (=> (|MutableMapModel.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@15|) (< 0 |elementsLength#0@@4|)) (=> (< 0 |elementsLength#0@@4|) (|MutableMapModel.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@15|)))) :qid |MutableM.83:23| :skolemid |2036| :pattern ( (|MutableMapModel.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@15|)) )))
(assert (= (type StartFuel_MutableMapModel._default.hash64) LayerTypeType))
(assert  (=> true (forall ((|elementsLength#0@@5| Int) (|key#0@@16| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| |elementsLength#0@@5| |key#0@@16|) (and (and (<= (LitInt 0) |elementsLength#0@@5|) (and (<= (LitInt 0) |key#0@@16|) (< |key#0@@16| 18446744073709551616))) (< 0 |elementsLength#0@@5|))) (and (|MutableMapModel.__default.hash64#canCall| |key#0@@16|) (= (MutableMapModel.__default.SlotForKey |elementsLength#0@@5| |key#0@@16|) (let ((|h#0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 |key#0@@16|))) (|#MutableMapModel.Slot.Slot| (Mod |h#0| |elementsLength#0@@5|)))))) :qid |MutableM.83:23| :skolemid |2037| :pattern ( (MutableMapModel.__default.SlotForKey |elementsLength#0@@5| |key#0@@16|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@6| Int) (|key#0@@17| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| (LitInt |elementsLength#0@@6|) (LitInt |key#0@@17|)) (and (and (<= (LitInt 0) |elementsLength#0@@6|) (and (<= (LitInt 0) |key#0@@17|) (< |key#0@@17| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< 0 |elementsLength#0@@6|)))))) (and (|MutableMapModel.__default.hash64#canCall| (LitInt |key#0@@17|)) (= (MutableMapModel.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@17|)) (let ((|h#1| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 (LitInt |key#0@@17|)))) (|#MutableMapModel.Slot.Slot| (Mod |h#1| (LitInt |elementsLength#0@@6|))))))) :qid |MutableM.83:23| :weight 3 :skolemid |2038| :pattern ( (MutableMapModel.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@17|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.Uint64SlotForKey$V T@U) (|self#0| T@U) (|key#0@@18| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V) TyType) (= (type |self#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|) (and (and ($Is |self#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V)) (and (<= (LitInt 0) |key#0@@18|) (< |key#0@@18| 18446744073709551616))) (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) 18446744073709551616))))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|))) (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) |key#0@@18|))) (and (<= (LitInt 0) (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|)) (< (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@18|)) ))))
(assert (forall ((MutableMapModel._default.Uint64SlotForKey$V@@0 T@U) (|self#0@@0| T@U) (|key#0@@19| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@0) TyType) (= (type |self#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@0)) (and (<= (LitInt 0) |key#0@@19|) (< |key#0@@19| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.Uint64SlotForKey#requires| MutableMapModel._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@19|) (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|)) 18446744073709551616))) (=> (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|)) 18446744073709551616)) (|MutableMapModel.__default.Uint64SlotForKey#requires| MutableMapModel._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@19|)))) :qid |unknown.0:0| :skolemid |2040| :pattern ( (|MutableMapModel.__default.Uint64SlotForKey#requires| MutableMapModel._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@19|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Uint64SlotForKey$V@@1 T@U) (|self#0@@1| T@U) (|key#0@@20| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@1) TyType) (= (type |self#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@20|) (and (and ($Is |self#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@1)) (and (<= (LitInt 0) |key#0@@20|) (< |key#0@@20| 18446744073709551616))) (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|)) 18446744073709551616))))) (and (and (|MutableMapModel.__default.hash64#canCall| |key#0@@20|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@1|)) (= (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@20|) (let ((|h#0@@0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 |key#0@@20|))) (Mod |h#0@@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|))))))) :qid |unknown.0:0| :skolemid |2041| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@20|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Uint64SlotForKey$V@@2 T@U) (|self#0@@2| T@U) (|key#0@@21| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@2) TyType) (= (type |self#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@21|)) (and (and ($Is |self#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@2)) (and (<= (LitInt 0) |key#0@@21|) (< |key#0@@21| 18446744073709551616))) (and (< 0 (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|))))) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|)))) 18446744073709551616))))) (and (and (|MutableMapModel.__default.hash64#canCall| (LitInt |key#0@@21|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@2|))) (= (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@21|)) (let ((|h#1@@0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 (LitInt |key#0@@21|)))) (Mod |h#1@@0| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2042| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@21|))) ))))
(assert (forall ((arg0@@326 Int) (arg1@@178 T@U) ) (! (= (type (MutableMapModel.__default.SlotSuccessor arg0@@326 arg1@@178)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SlotSuccessor| :pattern ( (MutableMapModel.__default.SlotSuccessor arg0@@326 arg1@@178)) )))
(assert  (=> true (forall ((|elementsLength#0@@7| Int) (|slot#0@@3| T@U) ) (!  (=> (and (= (type |slot#0@@3|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@7| |slot#0@@3|) (and (and (<= (LitInt 0) |elementsLength#0@@7|) ($Is |slot#0@@3| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@7| |slot#0@@3|)))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@7| (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|)) ($Is (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|) Tclass.MutableMapModel.Slot))) :qid |MutableM.100:26| :skolemid |2043| :pattern ( (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|)) ))))
(assert (forall ((|elementsLength#0@@8| Int) (|slot#0@@4| T@U) ) (!  (=> (= (type |slot#0@@4|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@8|) ($Is |slot#0@@4| Tclass.MutableMapModel.Slot)) (and (=> (|MutableMapModel.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@4|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@8| |slot#0@@4|)) (=> (MutableMapModel.__default.ValidSlot |elementsLength#0@@8| |slot#0@@4|) (|MutableMapModel.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@4|))))) :qid |MutableM.100:26| :skolemid |2044| :pattern ( (|MutableMapModel.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@4|)) )))
(assert  (=> true (forall ((|elementsLength#0@@9| Int) (|slot#0@@5| T@U) ) (!  (=> (and (= (type |slot#0@@5|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@9| |slot#0@@5|) (and (and (<= (LitInt 0) |elementsLength#0@@9|) ($Is |slot#0@@5| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@9| |slot#0@@5|)))) (and (and (MutableMapModel.Slot.Slot_q |slot#0@@5|) (=> (not (= (MutableMapModel.Slot.slot |slot#0@@5|) (- |elementsLength#0@@9| 1))) (MutableMapModel.Slot.Slot_q |slot#0@@5|))) (= (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@5|) (|#MutableMapModel.Slot.Slot| (ite (= (MutableMapModel.Slot.slot |slot#0@@5|) (- |elementsLength#0@@9| 1)) 0 (+ (MutableMapModel.Slot.slot |slot#0@@5|) 1)))))) :qid |MutableM.100:26| :skolemid |2045| :pattern ( (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@5|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@10| Int) (|slot#0@@6| T@U) ) (!  (=> (and (= (type |slot#0@@6|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|)) (and (and (<= (LitInt 0) |elementsLength#0@@10|) ($Is |slot#0@@6| Tclass.MutableMapModel.Slot)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|)))))))) (and (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@6|)) (=> (not (= (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@6|))) (LitInt (- |elementsLength#0@@10| 1)))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@6|)))) (= (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|)) (|#MutableMapModel.Slot.Slot| (ite (= (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@6|))) (LitInt (- |elementsLength#0@@10| 1))) 0 (+ (MutableMapModel.Slot.slot (Lit |slot#0@@6|)) 1)))))) :qid |MutableM.100:26| :weight 3 :skolemid |2046| :pattern ( (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|))) ))))
(assert (forall ((arg0@@327 T@U) (arg1@@179 Int) (arg2@@122 T@U) (arg3@@82 Int) ) (! (= (type (MutableMapModel.__default.KthSlotSuccessor arg0@@327 arg1@@179 arg2@@122 arg3@@82)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.KthSlotSuccessor| :pattern ( (MutableMapModel.__default.KthSlotSuccessor arg0@@327 arg1@@179 arg2@@122 arg3@@82)) )))
(assert (forall (($ly@@320 T@U) (|elementsLength#0@@11| Int) (|slot#0@@7| T@U) (|k#0@@52| Int) ) (!  (=> (and (= (type $ly@@320) LayerTypeType) (= (type |slot#0@@7|) DatatypeTypeType)) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@320) |elementsLength#0@@11| |slot#0@@7| |k#0@@52|) (MutableMapModel.__default.KthSlotSuccessor $ly@@320 |elementsLength#0@@11| |slot#0@@7| |k#0@@52|))) :qid |MutableM.110:12| :skolemid |2047| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@320) |elementsLength#0@@11| |slot#0@@7| |k#0@@52|)) )))
(assert (forall (($ly@@321 T@U) (|elementsLength#0@@12| Int) (|slot#0@@8| T@U) (|k#0@@53| Int) ) (!  (=> (and (= (type $ly@@321) LayerTypeType) (= (type |slot#0@@8|) DatatypeTypeType)) (= (MutableMapModel.__default.KthSlotSuccessor $ly@@321 |elementsLength#0@@12| |slot#0@@8| |k#0@@53|) (MutableMapModel.__default.KthSlotSuccessor $LZ |elementsLength#0@@12| |slot#0@@8| |k#0@@53|))) :qid |MutableM.110:12| :skolemid |2048| :pattern ( (MutableMapModel.__default.KthSlotSuccessor (AsFuelBottom $ly@@321) |elementsLength#0@@12| |slot#0@@8| |k#0@@53|)) )))
(assert  (=> true (forall (($ly@@322 T@U) (|elementsLength#0@@13| Int) (|slot#0@@9| T@U) (|k#0@@54| Int) ) (!  (=> (and (and (= (type $ly@@322) LayerTypeType) (= (type |slot#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@13| |slot#0@@9| |k#0@@54|) (and (and (and (<= (LitInt 0) |elementsLength#0@@13|) ($Is |slot#0@@9| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@54|)) (and (>= |k#0@@54| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@13| |slot#0@@9|))))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@13| (MutableMapModel.__default.KthSlotSuccessor $ly@@322 |elementsLength#0@@13| |slot#0@@9| |k#0@@54|)) ($Is (MutableMapModel.__default.KthSlotSuccessor $ly@@322 |elementsLength#0@@13| |slot#0@@9| |k#0@@54|) Tclass.MutableMapModel.Slot))) :qid |MutableM.110:12| :skolemid |2049| :pattern ( (MutableMapModel.__default.KthSlotSuccessor $ly@@322 |elementsLength#0@@13| |slot#0@@9| |k#0@@54|)) ))))
(assert (forall (($ly@@323 T@U) (|elementsLength#0@@14| Int) (|slot#0@@10| T@U) (|k#0@@55| Int) ) (!  (=> (and (= (type $ly@@323) LayerTypeType) (= (type |slot#0@@10|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@14|) ($Is |slot#0@@10| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@55|)) (and (=> (|MutableMapModel.__default.KthSlotSuccessor#requires| $ly@@323 |elementsLength#0@@14| |slot#0@@10| |k#0@@55|) (and (>= |k#0@@55| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@14| |slot#0@@10|))) (=> (and (>= |k#0@@55| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@14| |slot#0@@10|)) (|MutableMapModel.__default.KthSlotSuccessor#requires| $ly@@323 |elementsLength#0@@14| |slot#0@@10| |k#0@@55|))))) :qid |MutableM.110:12| :skolemid |2050| :pattern ( (|MutableMapModel.__default.KthSlotSuccessor#requires| $ly@@323 |elementsLength#0@@14| |slot#0@@10| |k#0@@55|)) )))
(assert  (=> true (forall (($ly@@324 T@U) (|elementsLength#0@@15| Int) (|slot#0@@11| T@U) (|k#0@@56| Int) ) (!  (=> (and (and (= (type $ly@@324) LayerTypeType) (= (type |slot#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@11| |k#0@@56|) (and (and (and (<= (LitInt 0) |elementsLength#0@@15|) ($Is |slot#0@@11| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@56|)) (and (>= |k#0@@56| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@15| |slot#0@@11|))))) (and (=> (not (= |k#0@@56| (LitInt 0))) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@11| (- |k#0@@56| 1)) (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@15| (MutableMapModel.__default.KthSlotSuccessor $ly@@324 |elementsLength#0@@15| |slot#0@@11| (- |k#0@@56| 1))))) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@324) |elementsLength#0@@15| |slot#0@@11| |k#0@@56|) (ite (= |k#0@@56| (LitInt 0)) |slot#0@@11| (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@15| (MutableMapModel.__default.KthSlotSuccessor $ly@@324 |elementsLength#0@@15| |slot#0@@11| (- |k#0@@56| 1))))))) :qid |MutableM.110:12| :skolemid |2051| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@324) |elementsLength#0@@15| |slot#0@@11| |k#0@@56|)) ))))
(assert  (=> true (forall (($ly@@325 T@U) (|elementsLength#0@@16| Int) (|slot#0@@12| T@U) (|k#0@@57| Int) ) (!  (=> (and (and (= (type $ly@@325) LayerTypeType) (= (type |slot#0@@12|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@57|)) (and (and (and (<= (LitInt 0) |elementsLength#0@@16|) ($Is |slot#0@@12| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@57|)) (and (>= (LitInt |k#0@@57|) (LitInt 0)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|))))))))) (and (=> (not (= (LitInt |k#0@@57|) (LitInt 0))) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@57| 1))) (|MutableMapModel.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@325) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@57| 1))))))) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@325) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@57|)) (ite (= (LitInt |k#0@@57|) (LitInt 0)) |slot#0@@12| (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@16|) (Lit (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@325) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@57| 1))))))))) :qid |MutableM.110:12| :weight 3 :skolemid |2052| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@325) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@57|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEmpty$V T@U) (|elements#0@@3| T@U) (|slot#0@@13| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V) TyType) (= (type |elements#0@@3|) (SeqType BoxType))) (= (type |slot#0@@13|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V |elements#0@@3| |slot#0@@13|) (and (and ($Is |elements#0@@3| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V))) ($Is |slot#0@@13| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@3|) |slot#0@@13|)))) true) :qid |unknown.0:0| :skolemid |2053| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V |elements#0@@3| |slot#0@@13|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsEmpty$V@@0 T@U) (|elements#0@@4| T@U) (|slot#0@@14| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@0) TyType) (= (type |elements#0@@4|) (SeqType BoxType))) (= (type |slot#0@@14|) DatatypeTypeType)) (and ($Is |elements#0@@4| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@0))) ($Is |slot#0@@14| Tclass.MutableMapModel.Slot))) (and (=> (|MutableMapModel.__default.SlotIsEmpty#requires| MutableMapModel._default.SlotIsEmpty$V@@0 |elements#0@@4| |slot#0@@14|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@4|) |slot#0@@14|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@4|) |slot#0@@14|) (|MutableMapModel.__default.SlotIsEmpty#requires| MutableMapModel._default.SlotIsEmpty$V@@0 |elements#0@@4| |slot#0@@14|)))) :qid |unknown.0:0| :skolemid |2054| :pattern ( (|MutableMapModel.__default.SlotIsEmpty#requires| MutableMapModel._default.SlotIsEmpty$V@@0 |elements#0@@4| |slot#0@@14|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEmpty$V@@1 T@U) (|elements#0@@5| T@U) (|slot#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@1) TyType) (= (type |elements#0@@5|) (SeqType BoxType))) (= (type |slot#0@@15|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|) (and (and ($Is |elements#0@@5| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@1))) ($Is |slot#0@@15| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@5|) |slot#0@@15|)))) (and (MutableMapModel.Slot.Slot_q |slot#0@@15|) (and (=> (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@5| (MutableMapModel.Slot.slot |slot#0@@15|))))) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@5| (MutableMapModel.Slot.slot |slot#0@@15|)))) (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|))))) :qid |unknown.0:0| :skolemid |2055| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEmpty$V@@2 T@U) (|elements#0@@6| T@U) (|slot#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@2) TyType) (= (type |elements#0@@6|) (SeqType BoxType))) (= (type |slot#0@@16|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|)) (and (and ($Is |elements#0@@6| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@2))) ($Is |slot#0@@16| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@6|)) (Lit |slot#0@@16|))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@16|)) (and (=> (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|)) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@6|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@16|))))))) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@6|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@16|)))))) (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2056| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEntry$V T@U) (|elements#0@@7| T@U) (|slot#0@@17| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V) TyType) (= (type |elements#0@@7|) (SeqType BoxType))) (= (type |slot#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V |elements#0@@7| |slot#0@@17|) (and (and ($Is |elements#0@@7| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V))) ($Is |slot#0@@17| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@7|) |slot#0@@17|)))) true) :qid |unknown.0:0| :skolemid |2057| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V |elements#0@@7| |slot#0@@17|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsEntry$V@@0 T@U) (|elements#0@@8| T@U) (|slot#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@0) TyType) (= (type |elements#0@@8|) (SeqType BoxType))) (= (type |slot#0@@18|) DatatypeTypeType)) (and ($Is |elements#0@@8| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@0))) ($Is |slot#0@@18| Tclass.MutableMapModel.Slot))) (and (=> (|MutableMapModel.__default.SlotIsEntry#requires| MutableMapModel._default.SlotIsEntry$V@@0 |elements#0@@8| |slot#0@@18|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@8|) |slot#0@@18|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@8|) |slot#0@@18|) (|MutableMapModel.__default.SlotIsEntry#requires| MutableMapModel._default.SlotIsEntry$V@@0 |elements#0@@8| |slot#0@@18|)))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (|MutableMapModel.__default.SlotIsEntry#requires| MutableMapModel._default.SlotIsEntry$V@@0 |elements#0@@8| |slot#0@@18|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEntry$V@@1 T@U) (|elements#0@@9| T@U) (|slot#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@1) TyType) (= (type |elements#0@@9|) (SeqType BoxType))) (= (type |slot#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|) (and (and ($Is |elements#0@@9| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@1))) ($Is |slot#0@@19| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@9|) |slot#0@@19|)))) (and (MutableMapModel.Slot.Slot_q |slot#0@@19|) (and (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@9| (MutableMapModel.Slot.slot |slot#0@@19|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@9| (MutableMapModel.Slot.slot |slot#0@@19|)))) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|))))) :qid |unknown.0:0| :skolemid |2059| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsEntry$V@@2 T@U) (|elements#0@@10| T@U) (|slot#0@@20| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@2) TyType) (= (type |elements#0@@10|) (SeqType BoxType))) (= (type |slot#0@@20|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|)) (and (and ($Is |elements#0@@10| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@2))) ($Is |slot#0@@20| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@10|)) (Lit |slot#0@@20|))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@20|)) (and (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@10|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@20|))))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@10|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@20|)))))) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2060| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsTombstone$V T@U) (|elements#0@@11| T@U) (|slot#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V) TyType) (= (type |elements#0@@11|) (SeqType BoxType))) (= (type |slot#0@@21|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V |elements#0@@11| |slot#0@@21|) (and (and ($Is |elements#0@@11| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V))) ($Is |slot#0@@21| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@11|) |slot#0@@21|)))) true) :qid |unknown.0:0| :skolemid |2061| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V |elements#0@@11| |slot#0@@21|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsTombstone$V@@0 T@U) (|elements#0@@12| T@U) (|slot#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@0) TyType) (= (type |elements#0@@12|) (SeqType BoxType))) (= (type |slot#0@@22|) DatatypeTypeType)) (and ($Is |elements#0@@12| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@0))) ($Is |slot#0@@22| Tclass.MutableMapModel.Slot))) (and (=> (|MutableMapModel.__default.SlotIsTombstone#requires| MutableMapModel._default.SlotIsTombstone$V@@0 |elements#0@@12| |slot#0@@22|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@12|) |slot#0@@22|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@12|) |slot#0@@22|) (|MutableMapModel.__default.SlotIsTombstone#requires| MutableMapModel._default.SlotIsTombstone$V@@0 |elements#0@@12| |slot#0@@22|)))) :qid |unknown.0:0| :skolemid |2062| :pattern ( (|MutableMapModel.__default.SlotIsTombstone#requires| MutableMapModel._default.SlotIsTombstone$V@@0 |elements#0@@12| |slot#0@@22|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsTombstone$V@@1 T@U) (|elements#0@@13| T@U) (|slot#0@@23| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@1) TyType) (= (type |elements#0@@13|) (SeqType BoxType))) (= (type |slot#0@@23|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|) (and (and ($Is |elements#0@@13| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@1))) ($Is |slot#0@@23| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@13|) |slot#0@@23|)))) (and (MutableMapModel.Slot.Slot_q |slot#0@@23|) (and (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@13| (MutableMapModel.Slot.slot |slot#0@@23|))))) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@13| (MutableMapModel.Slot.slot |slot#0@@23|)))) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|))))) :qid |unknown.0:0| :skolemid |2063| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotIsTombstone$V@@2 T@U) (|elements#0@@14| T@U) (|slot#0@@24| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@2) TyType) (= (type |elements#0@@14|) (SeqType BoxType))) (= (type |slot#0@@24|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|)) (and (and ($Is |elements#0@@14| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@2))) ($Is |slot#0@@24| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@14|)) (Lit |slot#0@@24|))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@24|)) (and (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|)) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@14|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@24|))))))) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@14|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@24|)))))) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2064| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKey$V T@U) (|elements#0@@15| T@U) (|slot#0@@25| T@U) (|excludingKey#0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V) TyType) (= (type |elements#0@@15|) (SeqType BoxType))) (= (type |slot#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15| |slot#0@@25| |excludingKey#0|) (and (and (and ($Is |elements#0@@15| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V))) ($Is |slot#0@@25| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0|) (< |excludingKey#0| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@15|) |slot#0@@25|))))) true) :qid |unknown.0:0| :skolemid |2065| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15| |slot#0@@25| |excludingKey#0|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithOtherKey$V@@0 T@U) (|elements#0@@16| T@U) (|slot#0@@26| T@U) (|excludingKey#0@@0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@0) TyType) (= (type |elements#0@@16|) (SeqType BoxType))) (= (type |slot#0@@26|) DatatypeTypeType)) (and (and ($Is |elements#0@@16| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@0))) ($Is |slot#0@@26| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@0|) (< |excludingKey#0@@0| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FilledWithOtherKey#requires| MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16| |slot#0@@26| |excludingKey#0@@0|) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@16|) |slot#0@@26|))) (=> (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@16|) |slot#0@@26|)) (|MutableMapModel.__default.FilledWithOtherKey#requires| MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16| |slot#0@@26| |excludingKey#0@@0|)))) :qid |unknown.0:0| :skolemid |2066| :pattern ( (|MutableMapModel.__default.FilledWithOtherKey#requires| MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16| |slot#0@@26| |excludingKey#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKey$V@@1 T@U) (|elements#0@@17| T@U) (|slot#0@@27| T@U) (|excludingKey#0@@1| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@1) TyType) (= (type |elements#0@@17|) (SeqType BoxType))) (= (type |slot#0@@27|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|) (and (and (and ($Is |elements#0@@17| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@1))) ($Is |slot#0@@27| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@1|) (< |excludingKey#0@@1| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@17|) |slot#0@@27|))))) (and (and (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (MutableMapModel.Slot.Slot_q |slot#0@@27|))) (=> (and (MutableMapModel.Slot.Slot_q |slot#0@@27|) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|)) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (MutableMapModel.Slot.Slot_q |slot#0@@27|))))) (and (=> (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|) (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|))))) (=> (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|)))) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|))))) :qid |unknown.0:0| :skolemid |2067| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKey$V@@2 T@U) (|elements#0@@18| T@U) (|slot#0@@28| T@U) (|excludingKey#0@@2| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@2) TyType) (= (type |elements#0@@18|) (SeqType BoxType))) (= (type |slot#0@@28|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|)) (and (and (and ($Is |elements#0@@18| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@2))) ($Is |slot#0@@28| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@2|) (< |excludingKey#0@@2| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@18|)) (Lit |slot#0@@28|)))))) (and (and (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@28|)))) (=> (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@28|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|)) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@28|)))))) (and (=> (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|)) (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|))))) (=> (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|)))) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2068| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKeys$V T@U) (|elements#0@@19| T@U) (|start#0| T@U) (|count#0| Int) (|excludingKey#0@@3| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V) TyType) (= (type |elements#0@@19|) (SeqType BoxType))) (= (type |start#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19| |start#0| |count#0| |excludingKey#0@@3|) (and (and (and (and ($Is |elements#0@@19| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V))) ($Is |start#0| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0|)) (and (<= (LitInt 0) |excludingKey#0@@3|) (< |excludingKey#0@@3| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@19|) |start#0|))))) true) :qid |unknown.0:0| :skolemid |2069| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19| |start#0| |count#0| |excludingKey#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@0 T@U) (|elements#0@@20| T@U) (|start#0@@0| T@U) (|count#0@@0| Int) (|excludingKey#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@0) TyType) (= (type |elements#0@@20|) (SeqType BoxType))) (= (type |start#0@@0|) DatatypeTypeType)) (=> (and (and (and ($Is |elements#0@@20| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@0))) ($Is |start#0@@0| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@0|)) (and (<= (LitInt 0) |excludingKey#0@@4|) (< |excludingKey#0@@4| 18446744073709551616))) (and (=> (|MutableMapModel.__default.FilledWithOtherKeys#requires| MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20| |start#0@@0| |count#0@@0| |excludingKey#0@@4|) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@20|) |start#0@@0|))) (=> (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@20|) |start#0@@0|)) (|MutableMapModel.__default.FilledWithOtherKeys#requires| MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20| |start#0@@0| |count#0@@0| |excludingKey#0@@4|))))) :qid |unknown.0:0| :skolemid |2070| :pattern ( (|MutableMapModel.__default.FilledWithOtherKeys#requires| MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20| |start#0@@0| |count#0@@0| |excludingKey#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@1 T@U) (|elements#0@@21| T@U) (|start#0@@1| T@U) (|count#0@@1| Int) (|excludingKey#0@@5| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@1) TyType) (= (type |elements#0@@21|) (SeqType BoxType))) (= (type |start#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|) (and (and (and (and ($Is |elements#0@@21| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@1))) ($Is |start#0@@1| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@1|)) (and (<= (LitInt 0) |excludingKey#0@@5|) (< |excludingKey#0@@5| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@21|) |start#0@@1|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#0| Int) ) (!  (=> (<= (LitInt 0) |offset#0|) (=> (< |offset#0| |count#0@@1|) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|) (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|) |excludingKey#0@@5|)))) :qid |MutableM.182:16| :skolemid |2071| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|)) ))) (and (=> (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|) (and true (forall ((|offset#0@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#0@@0|) (=> (< |offset#0@@0| |count#0@@1|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@0|) |excludingKey#0@@5|))) :qid |MutableM.182:16| :skolemid |2072| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@0|)) )))) (=> (and true (forall ((|offset#0@@1| Int) ) (!  (=> (<= (LitInt 0) |offset#0@@1|) (=> (< |offset#0@@1| |count#0@@1|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@1|) |excludingKey#0@@5|))) :qid |MutableM.182:16| :skolemid |2072| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@1|)) ))) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|))))) :qid |unknown.0:0| :skolemid |2073| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@2 T@U) (|elements#0@@22| T@U) (|start#0@@2| T@U) (|count#0@@2| Int) (|excludingKey#0@@6| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@2) TyType) (= (type |elements#0@@22|) (SeqType BoxType))) (= (type |start#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|)) (and (and (and (and ($Is |elements#0@@22| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@2))) ($Is |start#0@@2| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@2|)) (and (<= (LitInt 0) |excludingKey#0@@6|) (< |excludingKey#0@@6| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#1| Int) ) (!  (=> (<= (LitInt 0) |offset#1|) (=> (< |offset#1| |count#0@@2|) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1|) (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1|) (LitInt |excludingKey#0@@6|))))) :qid |MutableM.182:16| :skolemid |2074| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@22|) |start#0@@2| |offset#1|)) ))) (and (=> (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|)) (and true (forall ((|offset#1@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#1@@0|) (=> (< |offset#1@@0| |count#0@@2|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1@@0|) (LitInt |excludingKey#0@@6|)))) :qid |MutableM.182:16| :skolemid |2075| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@22|) |start#0@@2| |offset#1@@0|)) )))) (=> (and true (forall ((|offset#1@@1| Int) ) (!  (=> (<= (LitInt 0) |offset#1@@1|) (=> (< |offset#1@@1| |count#0@@2|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1@@1|) (LitInt |excludingKey#0@@6|)))) :qid |MutableM.182:16| :skolemid |2075| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@22|) |start#0@@2| |offset#1@@1|)) ))) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2076| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithKey$V T@U) (|elements#0@@23| T@U) (|slot#0@@29| T@U) (|key#0@@22| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V) TyType) (= (type |elements#0@@23|) (SeqType BoxType))) (= (type |slot#0@@29|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V |elements#0@@23| |slot#0@@29| |key#0@@22|) (and (and (and ($Is |elements#0@@23| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V))) ($Is |slot#0@@29| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@22|) (< |key#0@@22| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V |elements#0@@23|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@23|) |slot#0@@29|))))) true) :qid |unknown.0:0| :skolemid |2077| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V |elements#0@@23| |slot#0@@29| |key#0@@22|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithKey$V@@0 T@U) (|elements#0@@24| T@U) (|slot#0@@30| T@U) (|key#0@@23| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@0) TyType) (= (type |elements#0@@24|) (SeqType BoxType))) (= (type |slot#0@@30|) DatatypeTypeType)) (and (and ($Is |elements#0@@24| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@0))) ($Is |slot#0@@30| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@23|) (< |key#0@@23| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FilledWithKey#requires| MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24| |slot#0@@30| |key#0@@23|) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@24|) |slot#0@@30|))) (=> (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@24|) |slot#0@@30|)) (|MutableMapModel.__default.FilledWithKey#requires| MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24| |slot#0@@30| |key#0@@23|)))) :qid |unknown.0:0| :skolemid |2078| :pattern ( (|MutableMapModel.__default.FilledWithKey#requires| MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24| |slot#0@@30| |key#0@@23|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithKey$V@@1 T@U) (|elements#0@@25| T@U) (|slot#0@@31| T@U) (|key#0@@24| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@1) TyType) (= (type |elements#0@@25|) (SeqType BoxType))) (= (type |slot#0@@31|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@24|) (and (and (and ($Is |elements#0@@25| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@1))) ($Is |slot#0@@31| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@24|) (< |key#0@@24| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@25|) |slot#0@@31|))))) (and (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|))) (=> (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (MutableMapModel.Slot.Slot_q |slot#0@@31|))) (and (=> (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@24|) (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@25| (MutableMapModel.Slot.slot |slot#0@@31|)))) |key#0@@24|))) (=> (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@25| (MutableMapModel.Slot.slot |slot#0@@31|)))) |key#0@@24|)) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@24|))))) :qid |unknown.0:0| :skolemid |2079| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@24|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithKey$V@@2 T@U) (|elements#0@@26| T@U) (|slot#0@@32| T@U) (|key#0@@25| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@2) TyType) (= (type |elements#0@@26|) (SeqType BoxType))) (= (type |slot#0@@32|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@25|)) (and (and (and ($Is |elements#0@@26| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@2))) ($Is |slot#0@@32| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@26|)) (Lit |slot#0@@32|)))))) (and (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))) (=> (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@32|)))) (and (=> (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@25|)) (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@26|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@32|)))))) (LitInt |key#0@@25|)))) (=> (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@26|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@32|)))))) (LitInt |key#0@@25|))) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@25|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2080| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@25|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithEntryKey$V T@U) (|elements#0@@27| T@U) (|slot#0@@33| T@U) (|key#0@@26| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V) TyType) (= (type |elements#0@@27|) (SeqType BoxType))) (= (type |slot#0@@33|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27| |slot#0@@33| |key#0@@26|) (and (and (and ($Is |elements#0@@27| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V))) ($Is |slot#0@@33| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@27|) |slot#0@@33|))))) true) :qid |unknown.0:0| :skolemid |2081| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27| |slot#0@@33| |key#0@@26|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithEntryKey$V@@0 T@U) (|elements#0@@28| T@U) (|slot#0@@34| T@U) (|key#0@@27| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@0) TyType) (= (type |elements#0@@28|) (SeqType BoxType))) (= (type |slot#0@@34|) DatatypeTypeType)) (and (and ($Is |elements#0@@28| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@0))) ($Is |slot#0@@34| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@27|) (< |key#0@@27| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FilledWithEntryKey#requires| MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28| |slot#0@@34| |key#0@@27|) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@28|) |slot#0@@34|))) (=> (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@28|) |slot#0@@34|)) (|MutableMapModel.__default.FilledWithEntryKey#requires| MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28| |slot#0@@34| |key#0@@27|)))) :qid |unknown.0:0| :skolemid |2082| :pattern ( (|MutableMapModel.__default.FilledWithEntryKey#requires| MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28| |slot#0@@34| |key#0@@27|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithEntryKey$V@@1 T@U) (|elements#0@@29| T@U) (|slot#0@@35| T@U) (|key#0@@28| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@1) TyType) (= (type |elements#0@@29|) (SeqType BoxType))) (= (type |slot#0@@35|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@28|) (and (and (and ($Is |elements#0@@29| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@1))) ($Is |slot#0@@35| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@28|) (< |key#0@@28| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@29|) |slot#0@@35|))))) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (MutableMapModel.Slot.Slot_q |slot#0@@35|))) (and (=> (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@28|) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@29| (MutableMapModel.Slot.slot |slot#0@@35|)))) |key#0@@28|))) (=> (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@29| (MutableMapModel.Slot.slot |slot#0@@35|)))) |key#0@@28|)) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@28|))))) :qid |unknown.0:0| :skolemid |2083| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@28|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FilledWithEntryKey$V@@2 T@U) (|elements#0@@30| T@U) (|slot#0@@36| T@U) (|key#0@@29| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@2) TyType) (= (type |elements#0@@30|) (SeqType BoxType))) (= (type |slot#0@@36|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@29|)) (and (and (and ($Is |elements#0@@30| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@2))) ($Is |slot#0@@36| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@29|) (< |key#0@@29| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@30|)) (Lit |slot#0@@36|)))))) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@36|)))) (and (=> (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@29|)) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@30|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@36|)))))) (LitInt |key#0@@29|)))) (=> (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@30|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@36|)))))) (LitInt |key#0@@29|))) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@29|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2084| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@29|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotExplainsKey$V T@U) (|elements#0@@31| T@U) (|skips#0| Int) (|key#0@@30| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V) TyType) (= (type |elements#0@@31|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V |elements#0@@31| |skips#0| |key#0@@30|) (and (and (and ($Is |elements#0@@31| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V))) (<= (LitInt 0) |skips#0|)) (and (<= (LitInt 0) |key#0@@30|) (< |key#0@@30| 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V |elements#0@@31|)))) true) :qid |unknown.0:0| :skolemid |2085| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V |elements#0@@31| |skips#0| |key#0@@30|)) ))))
(assert (forall ((MutableMapModel._default.SlotExplainsKey$V@@0 T@U) (|elements#0@@32| T@U) (|skips#0@@0| Int) (|key#0@@31| Int) ) (!  (=> (and (= (type MutableMapModel._default.SlotExplainsKey$V@@0) TyType) (= (type |elements#0@@32|) (SeqType BoxType))) (=> (and (and ($Is |elements#0@@32| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@0))) (<= (LitInt 0) |skips#0@@0|)) (and (<= (LitInt 0) |key#0@@31|) (< |key#0@@31| 18446744073709551616))) (and (=> (|MutableMapModel.__default.SlotExplainsKey#requires| MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32| |skips#0@@0| |key#0@@31|) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32|) (|MutableMapModel.__default.SlotExplainsKey#requires| MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32| |skips#0@@0| |key#0@@31|))))) :qid |unknown.0:0| :skolemid |2086| :pattern ( (|MutableMapModel.__default.SlotExplainsKey#requires| MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32| |skips#0@@0| |key#0@@31|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SlotExplainsKey$V@@1 T@U) (|elements#0@@33| T@U) (|skips#0@@1| Int) (|key#0@@32| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V@@1) TyType) (= (type |elements#0@@33|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@32|) (and (and (and ($Is |elements#0@@33| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@1))) (<= (LitInt 0) |skips#0@@1|)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33|)))) (and (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@33|) |key#0@@32|) (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1|)) (let ((|foundSlot#0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1|))) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@33|) |foundSlot#0|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@33|) |foundSlot#0|) (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@33|) |key#0@@32|) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1| |key#0@@32|)))) (=> (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@33|) |key#0@@32|) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1| |key#0@@32|)) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1| |key#0@@32|)) (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |foundSlot#0| |key#0@@32|))))) (and (=> (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@32|) (let ((|foundSlot#0@@0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1|))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@33|) |foundSlot#0@@0|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1| |key#0@@32|)) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |foundSlot#0@@0| |key#0@@32|)))) (=> (let ((|foundSlot#0@@1| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1|))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@33|) |foundSlot#0@@1|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@32|) |skips#0@@1| |key#0@@32|)) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |foundSlot#0@@1| |key#0@@32|))) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@32|))))) :qid |unknown.0:0| :skolemid |2087| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@32|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SlotExplainsKey$V@@2 T@U) (|elements#0@@34| T@U) (|skips#0@@2| Int) (|key#0@@33| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V@@2) TyType) (= (type |elements#0@@34|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@33|)) (and (and (and ($Is |elements#0@@34| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@2))) (<= (LitInt 0) |skips#0@@2|)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|)))))))) (and (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|))) (let ((|foundSlot#1| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|)))) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1|) (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))))) (=> (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))) (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) |foundSlot#1| (LitInt |key#0@@33|)))))) (and (=> (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@33|)) (let ((|foundSlot#1@@0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|)))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1@@0|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) |foundSlot#1@@0| (LitInt |key#0@@33|))))) (=> (let ((|foundSlot#1@@1| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|)))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1@@1|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@33|)) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) |foundSlot#1@@1| (LitInt |key#0@@33|)))) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@33|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2088| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@33|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V T@U) (|elements#0@@35| T@U) (|slot1#0| T@U) (|slot2#0| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V) TyType) (= (type |elements#0@@35|) (SeqType BoxType))) (= (type |slot1#0|) DatatypeTypeType)) (= (type |slot2#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35| |slot1#0| |slot2#0|) (and (and (and ($Is |elements#0@@35| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V))) ($Is |slot1#0| Tclass.MutableMapModel.Slot)) ($Is |slot2#0| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35|)))) true) :qid |unknown.0:0| :skolemid |2089| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35| |slot1#0| |slot2#0|)) ))))
(assert (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 T@U) (|elements#0@@36| T@U) (|slot1#0@@0| T@U) (|slot2#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0) TyType) (= (type |elements#0@@36|) (SeqType BoxType))) (= (type |slot1#0@@0|) DatatypeTypeType)) (= (type |slot2#0@@0|) DatatypeTypeType)) (and (and ($Is |elements#0@@36| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0))) ($Is |slot1#0@@0| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@0| Tclass.MutableMapModel.Slot))) (and (=> (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36| |slot1#0@@0| |slot2#0@@0|) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36|) (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36| |slot1#0@@0| |slot2#0@@0|)))) :qid |unknown.0:0| :skolemid |2090| :pattern ( (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36| |slot1#0@@0| |slot2#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 T@U) (|elements#0@@37| T@U) (|slot1#0@@1| T@U) (|slot2#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1) TyType) (= (type |elements#0@@37|) (SeqType BoxType))) (= (type |slot1#0@@1|) DatatypeTypeType)) (= (type |slot2#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|) (and (and (and ($Is |elements#0@@37| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1))) ($Is |slot1#0@@1| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@1| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37|)))) (and (and (and (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@37|) |slot2#0@@1|))) (=> (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@37|) |slot2#0@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot2#0@@1|)) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (and (MutableMapModel.Slot.Slot_q |slot1#0@@1|) (MutableMapModel.Slot.Slot_q |slot2#0@@1|)))) (and (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|) (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot2#0@@1|)) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot1#0@@1|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot2#0@@1|))))))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot2#0@@1|)) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot1#0@@1|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot2#0@@1|)))))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|))))) :qid |unknown.0:0| :skolemid |2091| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 T@U) (|elements#0@@38| T@U) (|slot1#0@@2| T@U) (|slot2#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2) TyType) (= (type |elements#0@@38|) (SeqType BoxType))) (= (type |slot1#0@@2|) DatatypeTypeType)) (= (type |slot2#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|)) (and (and (and ($Is |elements#0@@38| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2))) ($Is |slot1#0@@2| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@2| Tclass.MutableMapModel.Slot)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|)))))))) (and (and (and (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|)))) (=> (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|))) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))) (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|))))))) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))) (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|))))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot1#0@@2|)) (MutableMapModel.Slot.Slot_q (Lit |slot2#0@@2|))))) (and (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|)) (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot1#0@@2|)))))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot2#0@@2|))))))))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot1#0@@2|)))))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot2#0@@2|)))))))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2092| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@17| Int) (|slot1#0@@3| T@U) (|slot2#0@@3| T@U) ) (!  (=> (and (and (= (type |slot1#0@@3|) DatatypeTypeType) (= (type |slot2#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|) (and (and (and (<= (LitInt 0) |elementsLength#0@@17|) ($Is |slot1#0@@3| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@17| |slot1#0@@3|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@17| |slot2#0@@3|))))) true) :qid |MutableM.222:22| :skolemid |2093| :pattern ( (MutableMapModel.__default.SameSlot |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|)) ))))
(assert (forall ((|elementsLength#0@@18| Int) (|slot1#0@@4| T@U) (|slot2#0@@4| T@U) ) (!  (=> (and (= (type |slot1#0@@4|) DatatypeTypeType) (= (type |slot2#0@@4|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@18|) ($Is |slot1#0@@4| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@4| Tclass.MutableMapModel.Slot)) (and (=> (|MutableMapModel.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot1#0@@4|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot2#0@@4|))) (=> (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot1#0@@4|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot2#0@@4|)) (|MutableMapModel.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|))))) :qid |MutableM.222:22| :skolemid |2094| :pattern ( (|MutableMapModel.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|)) )))
(assert  (=> true (forall ((|elementsLength#0@@19| Int) (|slot1#0@@5| T@U) (|slot2#0@@5| T@U) ) (!  (=> (and (and (= (type |slot1#0@@5|) DatatypeTypeType) (= (type |slot2#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (and (and (and (<= (LitInt 0) |elementsLength#0@@19|) ($Is |slot1#0@@5| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@19| |slot1#0@@5|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@19| |slot2#0@@5|))))) (and (and (|$IsA#MutableMapModel.Slot| |slot1#0@@5|) (|$IsA#MutableMapModel.Slot| |slot2#0@@5|)) (and (=> (MutableMapModel.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (|MutableMapModel.Slot#Equal| |slot1#0@@5| |slot2#0@@5|)) (=> (|MutableMapModel.Slot#Equal| |slot1#0@@5| |slot2#0@@5|) (MutableMapModel.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|))))) :qid |MutableM.222:22| :skolemid |2095| :pattern ( (MutableMapModel.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@20| Int) (|slot1#0@@6| T@U) (|slot2#0@@6| T@U) ) (!  (=> (and (and (= (type |slot1#0@@6|) DatatypeTypeType) (= (type |slot2#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (and (and (and (<= (LitInt 0) |elementsLength#0@@20|) ($Is |slot1#0@@6| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@6| Tclass.MutableMapModel.Slot)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot2#0@@6|))))))))) (and (and (|$IsA#MutableMapModel.Slot| (Lit |slot1#0@@6|)) (|$IsA#MutableMapModel.Slot| (Lit |slot2#0@@6|))) (and (=> (MutableMapModel.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (|MutableMapModel.Slot#Equal| |slot1#0@@6| |slot2#0@@6|)) (=> (|MutableMapModel.Slot#Equal| |slot1#0@@6| |slot2#0@@6|) (MutableMapModel.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)))))) :qid |MutableM.222:22| :weight 3 :skolemid |2096| :pattern ( (MutableMapModel.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocateStorageKey$V T@U) (|elements#0@@39| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V) TyType) (= (type |elements#0@@39|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|) (and ($Is |elements#0@@39| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V))) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|)))) true) :qid |unknown.0:0| :skolemid |2097| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|)) ))))
(assert (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@0 T@U) (|elements#0@@40| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@0) TyType) (= (type |elements#0@@40|) (SeqType BoxType))) ($Is |elements#0@@40| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@0)))) (and (=> (|MutableMapModel.__default.CantEquivocateStorageKey#requires| MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|) (|MutableMapModel.__default.CantEquivocateStorageKey#requires| MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|)))) :qid |unknown.0:0| :skolemid |2098| :pattern ( (|MutableMapModel.__default.CantEquivocateStorageKey#requires| MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|)) )))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@1 T@U) (|elements#0@@41| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@1) TyType) (= (type |elements#0@@41|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|) (and ($Is |elements#0@@41| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@1))) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|)))) (and (forall ((|slot1#0@@7| T@U) (|slot2#0@@7| T@U) ) (!  (=> (and (and (= (type |slot1#0@@7|) DatatypeTypeType) (= (type |slot2#0@@7|) DatatypeTypeType)) (and ($Is |slot1#0@@7| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@7| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|) (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|) (|MutableMapModel.__default.SameSlot#canCall| (|Seq#Length| |elements#0@@41|) |slot1#0@@7| |slot2#0@@7|)))) :qid |MutableM.232:12| :skolemid |2099| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@7| |slot2#0@@7|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|)) )) (and (=> (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|) (forall ((|slot1#0@@8| T@U) (|slot2#0@@8| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@8|) DatatypeTypeType) (= (type |slot2#0@@8|) DatatypeTypeType)) (and ($Is |slot1#0@@8| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@8| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@8| |slot2#0@@8|)) (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@8| |slot2#0@@8|)) :qid |MutableM.232:12| :skolemid |2100| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@8| |slot2#0@@8|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@8| |slot2#0@@8|)) ))) (=> (forall ((|slot1#0@@9| T@U) (|slot2#0@@9| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@9|) DatatypeTypeType) (= (type |slot2#0@@9|) DatatypeTypeType)) (and ($Is |slot1#0@@9| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@9| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@9| |slot2#0@@9|)) (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@9| |slot2#0@@9|)) :qid |MutableM.232:12| :skolemid |2100| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@9| |slot2#0@@9|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@9| |slot2#0@@9|)) )) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|))))) :qid |unknown.0:0| :skolemid |2101| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@2 T@U) (|elements#0@@42| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@2) TyType) (= (type |elements#0@@42|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)) (and ($Is |elements#0@@42| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@2))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)))))))) (and (forall ((|slot1#1| T@U) (|slot2#1| T@U) ) (!  (=> (and (and (= (type |slot1#1|) DatatypeTypeType) (= (type |slot2#1|) DatatypeTypeType)) (and ($Is |slot1#1| Tclass.MutableMapModel.Slot) ($Is |slot2#1| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1| |slot2#1|) (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1| |slot2#1|) (|MutableMapModel.__default.SameSlot#canCall| (|Seq#Length| (Lit |elements#0@@42|)) |slot1#1| |slot2#1|)))) :qid |MutableM.232:12| :skolemid |2102| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@42|) |slot1#1| |slot2#1|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 |elements#0@@42| |slot1#1| |slot2#1|)) )) (and (=> (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)) (forall ((|slot1#1@@0| T@U) (|slot2#1@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@0|) DatatypeTypeType) (= (type |slot2#1@@0|) DatatypeTypeType)) (and ($Is |slot1#1@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1@@0| |slot2#1@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (Lit |elements#0@@42|)) |slot1#1@@0| |slot2#1@@0|)) :qid |MutableM.232:12| :skolemid |2103| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@42|) |slot1#1@@0| |slot2#1@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 |elements#0@@42| |slot1#1@@0| |slot2#1@@0|)) ))) (=> (forall ((|slot1#1@@1| T@U) (|slot2#1@@1| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@1|) DatatypeTypeType) (= (type |slot2#1@@1|) DatatypeTypeType)) (and ($Is |slot1#1@@1| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@1| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1@@1| |slot2#1@@1|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (Lit |elements#0@@42|)) |slot1#1@@1| |slot2#1@@1|)) :qid |MutableM.232:12| :skolemid |2103| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@42|) |slot1#1@@1| |slot2#1@@1|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 |elements#0@@42| |slot1#1@@1| |slot2#1@@1|)) )) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2104| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.KeyInSlotIsInContents$V T@U) (|elements#0@@43| T@U) (|contents#0| T@U) (|slot#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V) TyType) (= (type |elements#0@@43|) (SeqType BoxType))) (= (type |contents#0|) (MapType BoxType BoxType))) (= (type |slot#0@@37|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |contents#0| |slot#0@@37|) (and (and (and ($Is |elements#0@@43| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V))) ($Is |contents#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V)))) ($Is |slot#0@@37| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@43|) |slot#0@@37|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |slot#0@@37|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |slot#0@@37|)))))) true) :qid |unknown.0:0| :skolemid |2105| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |contents#0| |slot#0@@37|)) ))))
(assert (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@0 T@U) (|elements#0@@44| T@U) (|contents#0@@0| T@U) (|slot#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@0) TyType) (= (type |elements#0@@44|) (SeqType BoxType))) (= (type |contents#0@@0|) (MapType BoxType BoxType))) (= (type |slot#0@@38|) DatatypeTypeType)) (and (and ($Is |elements#0@@44| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@0))) ($Is |contents#0@@0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@0)))) ($Is |slot#0@@38| Tclass.MutableMapModel.Slot))) (and (=> (|MutableMapModel.__default.KeyInSlotIsInContents#requires| MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |contents#0@@0| |slot#0@@38|) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@44|) |slot#0@@38|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|)))) (=> (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@44|) |slot#0@@38|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|))) (|MutableMapModel.__default.KeyInSlotIsInContents#requires| MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |contents#0@@0| |slot#0@@38|)))) :qid |unknown.0:0| :skolemid |2106| :pattern ( (|MutableMapModel.__default.KeyInSlotIsInContents#requires| MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |contents#0@@0| |slot#0@@38|)) )))
(assert  (=> true (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@1 T@U) (|elements#0@@45| T@U) (|contents#0@@1| T@U) (|slot#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@1) TyType) (= (type |elements#0@@45|) (SeqType BoxType))) (= (type |contents#0@@1|) (MapType BoxType BoxType))) (= (type |slot#0@@39|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|) (and (and (and ($Is |elements#0@@45| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@1))) ($Is |contents#0@@1| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@1)))) ($Is |slot#0@@39| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot#0@@39|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |slot#0@@39|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |slot#0@@39|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q |slot#0@@39|)) (and (=> (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|) (and true (let ((|key#0@@34| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@45| (MutableMapModel.Slot.slot |slot#0@@39|)))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@34|)))))))) (=> (and true (let ((|key#0@@35| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@45| (MutableMapModel.Slot.slot |slot#0@@39|)))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@35|))))))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|))))) :qid |unknown.0:0| :skolemid |2107| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@2 T@U) (|elements#0@@46| T@U) (|contents#0@@2| T@U) (|slot#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@2) TyType) (= (type |elements#0@@46|) (SeqType BoxType))) (= (type |contents#0@@2|) (MapType BoxType BoxType))) (= (type |slot#0@@40|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|)) (and (and (and ($Is |elements#0@@46| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@2))) ($Is |contents#0@@2| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@2)))) ($Is |slot#0@@40| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot#0@@40|)) (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |slot#0@@40|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |slot#0@@40|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@40|))) (and (=> (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|)) (and true (let ((|key#1@@5| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@46|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@40|)))))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#1@@5|)))))))) (=> (and true (let ((|key#1@@6| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@46|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@40|)))))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#1@@6|))))))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2108| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.SeqMatchesContentKeys$V T@U) (|elements#0@@47| T@U) (|contents#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V) TyType) (= (type |elements#0@@47|) (SeqType BoxType))) (= (type |contents#0@@3|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47| |contents#0@@3|) (and (and ($Is |elements#0@@47| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V))) ($Is |contents#0@@3| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47|)))) true) :qid |unknown.0:0| :skolemid |2109| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47| |contents#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@0 T@U) (|elements#0@@48| T@U) (|contents#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@0) TyType) (= (type |elements#0@@48|) (SeqType BoxType))) (= (type |contents#0@@4|) (MapType BoxType BoxType))) (and ($Is |elements#0@@48| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@0))) ($Is |contents#0@@4| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@0))))) (and (=> (|MutableMapModel.__default.SeqMatchesContentKeys#requires| MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48| |contents#0@@4|) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48|) (|MutableMapModel.__default.SeqMatchesContentKeys#requires| MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48| |contents#0@@4|)))) :qid |unknown.0:0| :skolemid |2110| :pattern ( (|MutableMapModel.__default.SeqMatchesContentKeys#requires| MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48| |contents#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@1 T@U) (|elements#0@@49| T@U) (|contents#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@1) TyType) (= (type |elements#0@@49|) (SeqType BoxType))) (= (type |contents#0@@5|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|) (and (and ($Is |elements#0@@49| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@1))) ($Is |contents#0@@5| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|)))) (and (and (and (forall ((|key#0@@36| T@U) ) (!  (=> (= (type |key#0@@36|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@36|)) (< (U_2_int |key#0@@36|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@36|))) (forall ((|skips#0@@3| Int) ) (!  (=> (<= (LitInt 0) |skips#0@@3|) (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@3| (U_2_int |key#0@@36|))) :qid |MutableM.247:50| :skolemid |2111| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@3| (U_2_int |key#0@@36|))) ))))) :qid |MutableM.247:16| :skolemid |2112| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@36|))) )) (=> (forall ((|key#0@@37| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@37|) (< |key#0@@37| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@37|)))) (exists ((|skips#0@@4| Int) ) (!  (and (<= (LitInt 0) |skips#0@@4|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@4| |key#0@@37|)) :qid |MutableM.247:50| :skolemid |2114| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@4| |key#0@@37|)) )))) :qid |MutableM.247:16| :skolemid |2115| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@37|)))) )) (forall ((|slot#0@@41| T@U) ) (!  (=> (and (= (type |slot#0@@41|) DatatypeTypeType) ($Is |slot#0@@41| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@49|) |slot#0@@41|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@41|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|))) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@41|)))) :qid |MutableM.248:16| :skolemid |2113| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@41|)) )))) (=> (and (forall ((|slot#0@@42| T@U) ) (!  (=> (and (= (type |slot#0@@42|) DatatypeTypeType) ($Is |slot#0@@42| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@49|) |slot#0@@42|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@42|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|))) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@42|)))) :qid |MutableM.248:16| :skolemid |2116| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@42|)) )) (forall ((|slot#0@@43| T@U) ) (!  (=> (and (and (= (type |slot#0@@43|) DatatypeTypeType) ($Is |slot#0@@43| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@43|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@43|)) :qid |MutableM.248:16| :skolemid |2117| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@43|)) ))) (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|))) (and (=> (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|) (and (and (forall ((|key#0@@38| T@U) ) (!  (=> (= (type |key#0@@38|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@38|)) (< (U_2_int |key#0@@38|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@38|))) (exists ((|skips#0@@5| Int) ) (!  (and (<= (LitInt 0) |skips#0@@5|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@5| (U_2_int |key#0@@38|))) :qid |MutableM.247:50| :skolemid |2118| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@5| (U_2_int |key#0@@38|))) ))))) :qid |MutableM.247:16| :skolemid |2119| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@38|))) )) (forall ((|slot#0@@44| T@U) ) (!  (=> (and (and (= (type |slot#0@@44|) DatatypeTypeType) ($Is |slot#0@@44| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@44|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@44|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@44|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@44|)) :qid |MutableM.248:16| :skolemid |2120| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@44|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@44|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@44|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@44|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|))) (=> (and (and (forall ((|key#0@@39| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@39|)))) (exists ((|skips#0@@6| Int) ) (!  (and (<= (LitInt 0) |skips#0@@6|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@6| |key#0@@39|)) :qid |MutableM.247:50| :skolemid |2118| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@6| |key#0@@39|)) )))) :qid |MutableM.247:16| :skolemid |2119| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@39|)))) )) (forall ((|slot#0@@45| T@U) ) (!  (=> (and (and (= (type |slot#0@@45|) DatatypeTypeType) ($Is |slot#0@@45| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@45|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@45|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@45|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@45|)) :qid |MutableM.248:16| :skolemid |2120| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@45|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@45|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@45|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@45|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|)) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|))))) :qid |unknown.0:0| :skolemid |2121| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@2 T@U) (|elements#0@@50| T@U) (|contents#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@2) TyType) (= (type |elements#0@@50|) (SeqType BoxType))) (= (type |contents#0@@6|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|)) (and (and ($Is |elements#0@@50| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@2))) ($Is |contents#0@@6| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|)))))))) (and (and (and (forall ((|key#1@@7| T@U) ) (!  (=> (= (type |key#1@@7|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@7|)) (< (U_2_int |key#1@@7|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@7|))) (forall ((|skips#1| Int) ) (!  (=> (<= (LitInt 0) |skips#1|) (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1| (U_2_int |key#1@@7|))) :qid |MutableM.247:50| :skolemid |2122| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1| (U_2_int |key#1@@7|))) ))))) :qid |MutableM.247:16| :skolemid |2123| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@7|))) )) (=> (forall ((|key#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@8|) (< |key#1@@8| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@8|)))) (exists ((|skips#1@@0| Int) ) (!  (and (<= (LitInt 0) |skips#1@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1@@0| |key#1@@8|)) :qid |MutableM.247:50| :skolemid |2125| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1@@0| |key#1@@8|)) )))) :qid |MutableM.247:16| :skolemid |2126| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@8|)))) )) (forall ((|slot#1| T@U) ) (!  (=> (and (= (type |slot#1|) DatatypeTypeType) ($Is |slot#1| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@50|)) |slot#1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|))) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1|)))) :qid |MutableM.248:16| :skolemid |2124| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1|)) )))) (=> (and (forall ((|slot#1@@0| T@U) ) (!  (=> (and (= (type |slot#1@@0|) DatatypeTypeType) ($Is |slot#1@@0| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@0|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@0|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|))))) (=> (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|))) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@0|)))) :qid |MutableM.248:16| :skolemid |2127| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@0|)) )) (forall ((|slot#1@@1| T@U) ) (!  (=> (and (and (= (type |slot#1@@1|) DatatypeTypeType) ($Is |slot#1@@1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@1|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@1|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@1|)) :qid |MutableM.248:16| :skolemid |2128| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@1|)) ))) (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|)))) (and (=> (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|)) (and (and (forall ((|key#1@@9| T@U) ) (!  (=> (= (type |key#1@@9|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@9|)) (< (U_2_int |key#1@@9|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@9|))) (exists ((|skips#1@@1| Int) ) (!  (and (<= (LitInt 0) |skips#1@@1|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1@@1| (U_2_int |key#1@@9|))) :qid |MutableM.247:50| :skolemid |2129| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1@@1| (U_2_int |key#1@@9|))) ))))) :qid |MutableM.247:16| :skolemid |2130| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@9|))) )) (forall ((|slot#1@@2| T@U) ) (!  (=> (and (and (= (type |slot#1@@2|) DatatypeTypeType) ($Is |slot#1@@2| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@2|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@2|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@2|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@2|)) :qid |MutableM.248:16| :skolemid |2131| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@2|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@2|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@2|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|)))) (=> (and (and (forall ((|key#1@@10| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@10|) (< |key#1@@10| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@10|)))) (exists ((|skips#1@@2| Int) ) (!  (and (<= (LitInt 0) |skips#1@@2|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1@@2| |key#1@@10|)) :qid |MutableM.247:50| :skolemid |2129| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1@@2| |key#1@@10|)) )))) :qid |MutableM.247:16| :skolemid |2130| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@10|)))) )) (forall ((|slot#1@@3| T@U) ) (!  (=> (and (and (= (type |slot#1@@3|) DatatypeTypeType) ($Is |slot#1@@3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@3|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@3|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@3|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@3|)) :qid |MutableM.248:16| :skolemid |2131| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@3|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@3|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@3|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2132| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V T@U) (|elements#0@@51| T@U) (|slot#0@@46| T@U) (|contents#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V) TyType) (= (type |elements#0@@51|) (SeqType BoxType))) (= (type |slot#0@@46|) DatatypeTypeType)) (= (type |contents#0@@7|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@46| |contents#0@@7|) (and (and (and ($Is |elements#0@@51| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V))) ($Is |slot#0@@46| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@7| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@51|) |slot#0@@46|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@46|))))) true) :qid |unknown.0:0| :skolemid |2133| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@46| |contents#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@0 T@U) (|elements#0@@52| T@U) (|slot#0@@47| T@U) (|contents#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@52|) (SeqType BoxType))) (= (type |slot#0@@47|) DatatypeTypeType)) (= (type |contents#0@@8|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@52| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@0))) ($Is |slot#0@@47| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@8| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@0))))) (and (=> (|MutableMapModel.__default.EntryInSlotMatchesContents#requires| MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@47| |contents#0@@8|) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@52|) |slot#0@@47|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@47|))) (=> (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@52|) |slot#0@@47|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@47|)) (|MutableMapModel.__default.EntryInSlotMatchesContents#requires| MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@47| |contents#0@@8|)))) :qid |unknown.0:0| :skolemid |2134| :pattern ( (|MutableMapModel.__default.EntryInSlotMatchesContents#requires| MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@47| |contents#0@@8|)) )))
(assert  (=> true (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@1 T@U) (|elements#0@@53| T@U) (|slot#0@@48| T@U) (|contents#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@53|) (SeqType BoxType))) (= (type |slot#0@@48|) DatatypeTypeType)) (= (type |contents#0@@9|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@48| |contents#0@@9|) (and (and (and ($Is |elements#0@@53| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@1))) ($Is |slot#0@@48| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@9| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@1)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@53|) |slot#0@@48|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@48|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Slot.Slot_q |slot#0@@48|) (let ((|item#0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (MutableMapModel.Slot.slot |slot#0@@48|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0|)))))))))) (and (=> (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@48| |contents#0@@9|) (and true (let ((|item#0@@0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (MutableMapModel.Slot.slot |slot#0@@48|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@0|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#0@@0|))))))) (=> (and true (let ((|item#0@@1| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (MutableMapModel.Slot.slot |slot#0@@48|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@1|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@1|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#0@@1|)))))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@48| |contents#0@@9|))))) :qid |unknown.0:0| :skolemid |2135| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@48| |contents#0@@9|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@2 T@U) (|elements#0@@54| T@U) (|slot#0@@49| T@U) (|contents#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@54|) (SeqType BoxType))) (= (type |slot#0@@49|) DatatypeTypeType)) (= (type |contents#0@@10|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@49|) (Lit |contents#0@@10|)) (and (and (and ($Is |elements#0@@54| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@2))) ($Is |slot#0@@49| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@10| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@2)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@54|)) (Lit |slot#0@@49|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@49|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@49|)) (let ((|item#1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@49|))))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U (MutableMapModel.Item.key |item#1|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@10|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1|)))))))))) (and (=> (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@49|) (Lit |contents#0@@10|)) (and true (let ((|item#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@49|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@10|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@0|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#1@@0|))))))) (=> (and true (let ((|item#1@@1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@49|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@1|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@10|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@1|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#1@@1|)))))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@49|) (Lit |contents#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2136| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@49|) (Lit |contents#0@@10|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V T@U) (|elements#0@@55| T@U) (|slot#0@@50| T@U) (|contents#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V) TyType) (= (type |elements#0@@55|) (SeqType BoxType))) (= (type |slot#0@@50|) DatatypeTypeType)) (= (type |contents#0@@11|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@50| |contents#0@@11|) (and (and (and ($Is |elements#0@@55| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V))) ($Is |slot#0@@50| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@11| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@55|) |slot#0@@50|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@50|))))) true) :qid |unknown.0:0| :skolemid |2137| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@50| |contents#0@@11|)) ))))
(assert (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 T@U) (|elements#0@@56| T@U) (|slot#0@@51| T@U) (|contents#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@56|) (SeqType BoxType))) (= (type |slot#0@@51|) DatatypeTypeType)) (= (type |contents#0@@12|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@56| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0))) ($Is |slot#0@@51| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@12| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0))))) (and (=> (|MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@51| |contents#0@@12|) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@56|) |slot#0@@51|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@51|))) (=> (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@56|) |slot#0@@51|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@51|)) (|MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@51| |contents#0@@12|)))) :qid |unknown.0:0| :skolemid |2138| :pattern ( (|MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@51| |contents#0@@12|)) )))
(assert  (=> true (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 T@U) (|elements#0@@57| T@U) (|slot#0@@52| T@U) (|contents#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@57|) (SeqType BoxType))) (= (type |slot#0@@52|) DatatypeTypeType)) (= (type |contents#0@@13|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@52| |contents#0@@13|) (and (and (and ($Is |elements#0@@57| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1))) ($Is |slot#0@@52| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@13| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@52|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@52|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q |slot#0@@52|)) (and (=> (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@52| |contents#0@@13|) (and true (let ((|item#0@@2| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@57| (MutableMapModel.Slot.slot |slot#0@@52|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@2|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@2|)))))))))) (=> (and true (let ((|item#0@@3| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@57| (MutableMapModel.Slot.slot |slot#0@@52|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@3|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@3|))))))))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@52| |contents#0@@13|))))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@52| |contents#0@@13|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 T@U) (|elements#0@@58| T@U) (|slot#0@@53| T@U) (|contents#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@58|) (SeqType BoxType))) (= (type |slot#0@@53|) DatatypeTypeType)) (= (type |contents#0@@14|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@53|) (Lit |contents#0@@14|)) (and (and (and ($Is |elements#0@@58| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2))) ($Is |slot#0@@53| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@14| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@58|)) (Lit |slot#0@@53|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@53|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@53|))) (and (=> (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@53|) (Lit |contents#0@@14|)) (and true (let ((|item#1@@2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@58|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@53|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@14|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@2|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@14|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@2|)))))))))) (=> (and true (let ((|item#1@@3| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@58|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@53|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@14|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@3|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@14|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@3|))))))))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@53|) (Lit |contents#0@@14|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2140| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@53|) (Lit |contents#0@@14|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.EntriesMatchContentValue$V T@U) (|elements#0@@59| T@U) (|contents#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V) TyType) (= (type |elements#0@@59|) (SeqType BoxType))) (= (type |contents#0@@15|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59| |contents#0@@15|) (and (and ($Is |elements#0@@59| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V))) ($Is |contents#0@@15| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59|)))) true) :qid |unknown.0:0| :skolemid |2141| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59| |contents#0@@15|)) ))))
(assert (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@0 T@U) (|elements#0@@60| T@U) (|contents#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@0) TyType) (= (type |elements#0@@60|) (SeqType BoxType))) (= (type |contents#0@@16|) (MapType BoxType BoxType))) (and ($Is |elements#0@@60| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@0))) ($Is |contents#0@@16| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@0))))) (and (=> (|MutableMapModel.__default.EntriesMatchContentValue#requires| MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60| |contents#0@@16|) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60|) (|MutableMapModel.__default.EntriesMatchContentValue#requires| MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60| |contents#0@@16|)))) :qid |unknown.0:0| :skolemid |2142| :pattern ( (|MutableMapModel.__default.EntriesMatchContentValue#requires| MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60| |contents#0@@16|)) )))
(assert  (=> true (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@1 T@U) (|elements#0@@61| T@U) (|contents#0@@17| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@1) TyType) (= (type |elements#0@@61|) (SeqType BoxType))) (= (type |contents#0@@17|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|) (and (and ($Is |elements#0@@61| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@1))) ($Is |contents#0@@17| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61|)))) (and (forall ((|slot#0@@54| T@U) ) (!  (=> (and (= (type |slot#0@@54|) DatatypeTypeType) ($Is |slot#0@@54| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@61|) |slot#0@@54|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@54|) (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54|))) (=> (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54|)) (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54| |contents#0@@17|)))) :qid |MutableM.274:12| :skolemid |2143| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54| |contents#0@@17|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@54|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@54|)) )) (and (=> (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|) (forall ((|slot#0@@55| T@U) ) (!  (=> (and (and (= (type |slot#0@@55|) DatatypeTypeType) ($Is |slot#0@@55| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@55|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@55|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@55| |contents#0@@17|)) :qid |MutableM.274:12| :skolemid |2144| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@55| |contents#0@@17|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@55|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@55|)) ))) (=> (forall ((|slot#0@@56| T@U) ) (!  (=> (and (and (= (type |slot#0@@56|) DatatypeTypeType) ($Is |slot#0@@56| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@56|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@56|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@56| |contents#0@@17|)) :qid |MutableM.274:12| :skolemid |2144| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@56| |contents#0@@17|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@56|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@56|)) )) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|))))) :qid |unknown.0:0| :skolemid |2145| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@2 T@U) (|elements#0@@62| T@U) (|contents#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@2) TyType) (= (type |elements#0@@62|) (SeqType BoxType))) (= (type |contents#0@@18|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|)) (and (and ($Is |elements#0@@62| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@2))) ($Is |contents#0@@18| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|)))))))) (and (forall ((|slot#1@@4| T@U) ) (!  (=> (and (= (type |slot#1@@4|) DatatypeTypeType) ($Is |slot#1@@4| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@4|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@4|) (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@4|))) (=> (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@4|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@4|)) (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@4| (Lit |contents#0@@18|))))) :qid |MutableM.274:12| :skolemid |2146| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@4| |contents#0@@18|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@4|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@62|) |slot#1@@4|)) )) (and (=> (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|)) (forall ((|slot#1@@5| T@U) ) (!  (=> (and (and (= (type |slot#1@@5|) DatatypeTypeType) ($Is |slot#1@@5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@5|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@5|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@5| (Lit |contents#0@@18|))) :qid |MutableM.274:12| :skolemid |2147| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@5| |contents#0@@18|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@5|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@62|) |slot#1@@5|)) ))) (=> (forall ((|slot#1@@6| T@U) ) (!  (=> (and (and (= (type |slot#1@@6|) DatatypeTypeType) ($Is |slot#1@@6| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@6|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@6|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@6| (Lit |contents#0@@18|))) :qid |MutableM.274:12| :skolemid |2147| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@6| |contents#0@@18|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@6|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@62|) |slot#1@@6|)) )) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2148| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.TombstonesMatchContentValue$V T@U) (|elements#0@@63| T@U) (|contents#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V) TyType) (= (type |elements#0@@63|) (SeqType BoxType))) (= (type |contents#0@@19|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63| |contents#0@@19|) (and (and ($Is |elements#0@@63| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V))) ($Is |contents#0@@19| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63|)))) true) :qid |unknown.0:0| :skolemid |2149| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63| |contents#0@@19|)) ))))
(assert (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@0 T@U) (|elements#0@@64| T@U) (|contents#0@@20| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@0) TyType) (= (type |elements#0@@64|) (SeqType BoxType))) (= (type |contents#0@@20|) (MapType BoxType BoxType))) (and ($Is |elements#0@@64| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@0))) ($Is |contents#0@@20| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@0))))) (and (=> (|MutableMapModel.__default.TombstonesMatchContentValue#requires| MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64| |contents#0@@20|) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64|)) (=> (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64|) (|MutableMapModel.__default.TombstonesMatchContentValue#requires| MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64| |contents#0@@20|)))) :qid |unknown.0:0| :skolemid |2150| :pattern ( (|MutableMapModel.__default.TombstonesMatchContentValue#requires| MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64| |contents#0@@20|)) )))
(assert  (=> true (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@1 T@U) (|elements#0@@65| T@U) (|contents#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@1) TyType) (= (type |elements#0@@65|) (SeqType BoxType))) (= (type |contents#0@@21|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|) (and (and ($Is |elements#0@@65| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@1))) ($Is |contents#0@@21| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65|)))) (and (forall ((|slot#0@@57| T@U) ) (!  (=> (and (= (type |slot#0@@57|) DatatypeTypeType) ($Is |slot#0@@57| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@65|) |slot#0@@57|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@57|) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57|))) (=> (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57|)) (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57| |contents#0@@21|)))) :qid |MutableM.281:12| :skolemid |2151| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57| |contents#0@@21|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@57|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@57|)) )) (and (=> (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|) (forall ((|slot#0@@58| T@U) ) (!  (=> (and (and (= (type |slot#0@@58|) DatatypeTypeType) ($Is |slot#0@@58| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@58|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@58|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@58| |contents#0@@21|)) :qid |MutableM.281:12| :skolemid |2152| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@58| |contents#0@@21|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@58|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@58|)) ))) (=> (forall ((|slot#0@@59| T@U) ) (!  (=> (and (and (= (type |slot#0@@59|) DatatypeTypeType) ($Is |slot#0@@59| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@59|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@59|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@59| |contents#0@@21|)) :qid |MutableM.281:12| :skolemid |2152| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@59| |contents#0@@21|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@59|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@59|)) )) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|))))) :qid |unknown.0:0| :skolemid |2153| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@2 T@U) (|elements#0@@66| T@U) (|contents#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@2) TyType) (= (type |elements#0@@66|) (SeqType BoxType))) (= (type |contents#0@@22|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|)) (and (and ($Is |elements#0@@66| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@2))) ($Is |contents#0@@22| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|)))))))) (and (forall ((|slot#1@@7| T@U) ) (!  (=> (and (= (type |slot#1@@7|) DatatypeTypeType) ($Is |slot#1@@7| Tclass.MutableMapModel.Slot)) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@7|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@7|) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@7|))) (=> (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@7|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@7|)) (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@7| (Lit |contents#0@@22|))))) :qid |MutableM.281:12| :skolemid |2154| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@7| |contents#0@@22|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@7|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@66|) |slot#1@@7|)) )) (and (=> (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|)) (forall ((|slot#1@@8| T@U) ) (!  (=> (and (and (= (type |slot#1@@8|) DatatypeTypeType) ($Is |slot#1@@8| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@8|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@8|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@8| (Lit |contents#0@@22|))) :qid |MutableM.281:12| :skolemid |2155| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@8| |contents#0@@22|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@8|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@66|) |slot#1@@8|)) ))) (=> (forall ((|slot#1@@9| T@U) ) (!  (=> (and (and (= (type |slot#1@@9|) DatatypeTypeType) ($Is |slot#1@@9| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@9|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@9|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@9| (Lit |contents#0@@22|))) :qid |MutableM.281:12| :skolemid |2155| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@9| |contents#0@@22|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@9|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@66|) |slot#1@@9|)) )) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2156| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInv$V T@U) (|self#0@@3| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V) TyType) (= (type |self#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V |self#0@@3|) ($Is |self#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V)))) true) :qid |unknown.0:0| :skolemid |2157| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V |self#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeInv$V@@0 T@U) (|self#0@@4| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@0) TyType) (= (type |self#0@@4|) DatatypeTypeType)) ($Is |self#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@0))) (and (=> (|MutableMapModel.__default.FixedSizeInv#requires| MutableMapModel._default.FixedSizeInv$V@@0 |self#0@@4|) true) (=> true (|MutableMapModel.__default.FixedSizeInv#requires| MutableMapModel._default.FixedSizeInv$V@@0 |self#0@@4|)))) :qid |unknown.0:0| :skolemid |2158| :pattern ( (|MutableMapModel.__default.FixedSizeInv#requires| MutableMapModel._default.FixedSizeInv$V@@0 |self#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInv$V@@1 T@U) (|self#0@@5| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@1) TyType) (= (type |self#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|) ($Is |self#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@1)))) (and (and (and (and (and (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (=> (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)))) (=> (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)))) (=> (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))))) (=> (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))))) (=> (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))))) (and (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)))) (=> (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|))))) :qid |unknown.0:0| :skolemid |2159| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInv$V@@2 T@U) (|self#0@@6| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@2) TyType) (= (type |self#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|)) ($Is |self#0@@6| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@2)))) (and (and (and (and (and (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (=> (<= (LitInt 128) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616))))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))))) (=> (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))))) (=> (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (= (|Map#Card| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (=> (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (=> (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (and (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|)) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (= (|Map#Card| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|))))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))))) (=> (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (= (|Map#Card| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|))))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2160| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|))) ))))
(assert (forall ((arg0@@328 T@U) (arg1@@180 T@U) (arg2@@123 Int) ) (! (= (type (MutableMapModel.__default.IndexSetThrough arg0@@328 arg1@@180 arg2@@123)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.IndexSetThrough| :pattern ( (MutableMapModel.__default.IndexSetThrough arg0@@328 arg1@@180 arg2@@123)) )))
(assert  (=> true (forall ((MutableMapModel._default.IndexSetThrough$V T@U) (|elements#0@@67| T@U) (|through#0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V) TyType) (= (type |elements#0@@67|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|) (and (and ($Is |elements#0@@67| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V))) (<= (LitInt 0) |through#0|)) (<= |through#0| (|Seq#Length| |elements#0@@67|))))) ($Is (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|) (TSet TInt))) :qid |unknown.0:0| :skolemid |2161| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|)) ))))
(assert (forall ((MutableMapModel._default.IndexSetThrough$V@@0 T@U) (|elements#0@@68| T@U) (|through#0@@0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@0) TyType) (= (type |elements#0@@68|) (SeqType BoxType))) (and ($Is |elements#0@@68| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@0))) (<= (LitInt 0) |through#0@@0|))) (and (=> (|MutableMapModel.__default.IndexSetThrough#requires| MutableMapModel._default.IndexSetThrough$V@@0 |elements#0@@68| |through#0@@0|) (<= |through#0@@0| (|Seq#Length| |elements#0@@68|))) (=> (<= |through#0@@0| (|Seq#Length| |elements#0@@68|)) (|MutableMapModel.__default.IndexSetThrough#requires| MutableMapModel._default.IndexSetThrough$V@@0 |elements#0@@68| |through#0@@0|)))) :qid |unknown.0:0| :skolemid |2162| :pattern ( (|MutableMapModel.__default.IndexSetThrough#requires| MutableMapModel._default.IndexSetThrough$V@@0 |elements#0@@68| |through#0@@0|)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@181 Int) (arg2@@124 Int) (arg3@@83 T@U) (arg4@@58 T@U) ) (! (= (type (|lambda#87| arg0@@329 arg1@@181 arg2@@124 arg3@@83 arg4@@58)) (MapType0Type BoxType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@329 arg1@@181 arg2@@124 arg3@@83 arg4@@58)) )))
(assert  (=> true (forall ((MutableMapModel._default.IndexSetThrough$V@@1 T@U) (|elements#0@@69| T@U) (|through#0@@1| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@1) TyType) (= (type |elements#0@@69|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|) (and (and ($Is |elements#0@@69| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@1))) (<= (LitInt 0) |through#0@@1|)) (<= |through#0@@1| (|Seq#Length| |elements#0@@69|))))) (= (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|) (|lambda#87| TInt (LitInt 0) |through#0@@1| |elements#0@@69| |elements#0@@69|))) :qid |unknown.0:0| :skolemid |2163| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.IndexSetThrough$V@@2 T@U) (|elements#0@@70| T@U) (|through#0@@2| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@2) TyType) (= (type |elements#0@@70|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|)) (and (and ($Is |elements#0@@70| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@2))) (<= (LitInt 0) |through#0@@2|)) (<= (LitInt |through#0@@2|) (|Seq#Length| (Lit |elements#0@@70|)))))) (= (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|)) (|lambda#87| TInt (LitInt 0) |through#0@@2| (Lit |elements#0@@70|) (Lit |elements#0@@70|)))) :qid |unknown.0:0| :weight 3 :skolemid |2164| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|))) ))))
(assert (forall ((arg0@@330 T@U) (arg1@@182 T@U) ) (! (= (type (MutableMapModel.__default.IndexSet arg0@@330 arg1@@182)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.IndexSet| :pattern ( (MutableMapModel.__default.IndexSet arg0@@330 arg1@@182)) )))
(assert  (=> true (forall ((MutableMapModel._default.IndexSet$V T@U) (|elements#0@@71| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V) TyType) (= (type |elements#0@@71|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V |elements#0@@71|) ($Is |elements#0@@71| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V))))) ($Is (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V |elements#0@@71|) (TSet TInt))) :qid |unknown.0:0| :skolemid |2165| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V |elements#0@@71|)) ))))
(assert (forall ((MutableMapModel._default.IndexSet$V@@0 T@U) (|elements#0@@72| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@0) TyType) (= (type |elements#0@@72|) (SeqType BoxType))) ($Is |elements#0@@72| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@0)))) (and (=> (|MutableMapModel.__default.IndexSet#requires| MutableMapModel._default.IndexSet$V@@0 |elements#0@@72|) true) (=> true (|MutableMapModel.__default.IndexSet#requires| MutableMapModel._default.IndexSet$V@@0 |elements#0@@72|)))) :qid |unknown.0:0| :skolemid |2166| :pattern ( (|MutableMapModel.__default.IndexSet#requires| MutableMapModel._default.IndexSet$V@@0 |elements#0@@72|)) )))
(assert  (=> true (forall ((MutableMapModel._default.IndexSet$V@@1 T@U) (|elements#0@@73| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@1) TyType) (= (type |elements#0@@73|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|) ($Is |elements#0@@73| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@1))))) (and (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSet$V@@1 |elements#0@@73| (|Seq#Length| |elements#0@@73|)) (= (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|) (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSet$V@@1 |elements#0@@73| (|Seq#Length| |elements#0@@73|))))) :qid |unknown.0:0| :skolemid |2167| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.IndexSet$V@@2 T@U) (|elements#0@@74| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@2) TyType) (= (type |elements#0@@74|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|)) ($Is |elements#0@@74| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@2))))) (and (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|) (|Seq#Length| (Lit |elements#0@@74|))) (= (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|)) (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|) (|Seq#Length| (Lit |elements#0@@74|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2168| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.Count1$V T@U) (|item#0@@4| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V) TyType) (= (type |item#0@@4|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V |item#0@@4|) ($Is |item#0@@4| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V)))) (<= (LitInt 0) (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V |item#0@@4|))) :qid |unknown.0:0| :skolemid |2169| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V |item#0@@4|)) ))))
(assert (forall ((MutableMapModel._default.Count1$V@@0 T@U) (|item#0@@5| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@0) TyType) (= (type |item#0@@5|) DatatypeTypeType)) ($Is |item#0@@5| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@0))) (and (=> (|MutableMapModel.__default.Count1#requires| MutableMapModel._default.Count1$V@@0 |item#0@@5|) true) (=> true (|MutableMapModel.__default.Count1#requires| MutableMapModel._default.Count1$V@@0 |item#0@@5|)))) :qid |unknown.0:0| :skolemid |2170| :pattern ( (|MutableMapModel.__default.Count1#requires| MutableMapModel._default.Count1$V@@0 |item#0@@5|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Count1$V@@1 T@U) (|item#0@@6| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@1) TyType) (= (type |item#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V@@1 |item#0@@6|) ($Is |item#0@@6| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@1)))) (= (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@1 |item#0@@6|) (ite  (or (MutableMapModel.Item.Entry_q |item#0@@6|) (MutableMapModel.Item.Tombstone_q |item#0@@6|)) 1 0))) :qid |unknown.0:0| :skolemid |2171| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@1 |item#0@@6|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Count1$V@@2 T@U) (|item#0@@7| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@2) TyType) (= (type |item#0@@7|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V@@2 (Lit |item#0@@7|)) ($Is |item#0@@7| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@2)))) (= (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@2 (Lit |item#0@@7|)) (ite  (or (MutableMapModel.Item.Entry_q (Lit |item#0@@7|)) (MutableMapModel.Item.Tombstone_q (Lit |item#0@@7|))) 1 0))) :qid |unknown.0:0| :weight 3 :skolemid |2172| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@2 (Lit |item#0@@7|))) ))))
(assert (forall ((MutableMapModel._default.CountFilled$V T@U) ($ly@@326 T@U) (|view#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CountFilled$V) TyType) (= (type $ly@@326) LayerTypeType)) (= (type |view#0|) (SeqType BoxType))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V ($LS $ly@@326) |view#0|) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V $ly@@326 |view#0|))) :qid |unknown.0:0| :skolemid |2173| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V ($LS $ly@@326) |view#0|)) )))
(assert (forall ((MutableMapModel._default.CountFilled$V@@0 T@U) ($ly@@327 T@U) (|view#0@@0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CountFilled$V@@0) TyType) (= (type $ly@@327) LayerTypeType)) (= (type |view#0@@0|) (SeqType BoxType))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 $ly@@327 |view#0@@0|) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 $LZ |view#0@@0|))) :qid |unknown.0:0| :skolemid |2174| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 (AsFuelBottom $ly@@327) |view#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.CountFilled$V@@1 T@U) ($ly@@328 T@U) (|view#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@1) TyType) (= (type $ly@@328) LayerTypeType)) (= (type |view#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@1 |view#0@@1|) ($Is |view#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@1))))) (<= (LitInt 0) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@1 $ly@@328 |view#0@@1|))) :qid |unknown.0:0| :skolemid |2175| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@1 $ly@@328 |view#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.CountFilled$V@@2 T@U) ($ly@@329 T@U) (|view#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@2) TyType) (= (type $ly@@329) LayerTypeType)) (= (type |view#0@@2|) (SeqType BoxType))) ($Is |view#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@2)))) (and (=> (|MutableMapModel.__default.CountFilled#requires| MutableMapModel._default.CountFilled$V@@2 $ly@@329 |view#0@@2|) true) (=> true (|MutableMapModel.__default.CountFilled#requires| MutableMapModel._default.CountFilled$V@@2 $ly@@329 |view#0@@2|)))) :qid |unknown.0:0| :skolemid |2176| :pattern ( (|MutableMapModel.__default.CountFilled#requires| MutableMapModel._default.CountFilled$V@@2 $ly@@329 |view#0@@2|)) )))
(assert  (=> true (forall ((MutableMapModel._default.CountFilled$V@@3 T@U) ($ly@@330 T@U) (|view#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@3) TyType) (= (type $ly@@330) LayerTypeType)) (= (type |view#0@@3|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@3 |view#0@@3|) ($Is |view#0@@3| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@3))))) (and (=> (not (= (|Seq#Length| |view#0@@3|) (LitInt 0))) (and (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@3 (|Seq#Drop| |view#0@@3| (LitInt 1))) (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0)))))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 ($LS $ly@@330) |view#0@@3|) (ite (= (|Seq#Length| |view#0@@3|) (LitInt 0)) 0 (+ (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 $ly@@330 (|Seq#Drop| |view#0@@3| (LitInt 1))) (MutableMapModel.__default.Count1 MutableMapModel._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0))))))))) :qid |unknown.0:0| :skolemid |2177| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 ($LS $ly@@330) |view#0@@3|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.CountFilled$V@@4 T@U) ($ly@@331 T@U) (|view#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@4) TyType) (= (type $ly@@331) LayerTypeType)) (= (type |view#0@@4|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@4 (Lit |view#0@@4|)) ($Is |view#0@@4| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@4))))) (and (=> (not (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0))) (and (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@4 (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0)))))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@331) (Lit |view#0@@4|)) (ite (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0)) 0 (+ (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@331) (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (MutableMapModel.__default.Count1 MutableMapModel._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2178| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@331) (Lit |view#0@@4|))) ))))
(assert (forall ((arg0@@331 T@U) (arg1@@183 Int) ) (! (= (type (MutableMapModel.__default.ConstructorFromSize arg0@@331 arg1@@183)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ConstructorFromSize| :pattern ( (MutableMapModel.__default.ConstructorFromSize arg0@@331 arg1@@183)) )))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromSize$V T@U) (|size#0| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V |size#0|) (and (and (<= (LitInt 0) |size#0|) (< |size#0| 18446744073709551616)) (<= (LitInt 128) |size#0|)))) (and (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) (forall ((|slot#0@@60| T@U) ) (!  (=> (and (and (= (type |slot#0@@60|) DatatypeTypeType) ($Is |slot#0@@60| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))) |slot#0@@60|)) (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) |slot#0@@60|)) :qid |MutableM.370:18| :skolemid |2179| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) |slot#0@@60|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))) |slot#0@@60|)) ))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) (|Map#Empty| BoxType BoxType))) (= |size#0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))))) ($Is (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ConstructorFromSize$V)))) :qid |unknown.0:0| :skolemid |2180| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) ))))
(assert (forall ((MutableMapModel._default.ConstructorFromSize$V@@0 T@U) (|size#0@@0| Int) ) (!  (=> (= (type MutableMapModel._default.ConstructorFromSize$V@@0) TyType) (=> (and (<= (LitInt 0) |size#0@@0|) (< |size#0@@0| 18446744073709551616)) (and (=> (|MutableMapModel.__default.ConstructorFromSize#requires| MutableMapModel._default.ConstructorFromSize$V@@0 |size#0@@0|) (<= (LitInt 128) |size#0@@0|)) (=> (<= (LitInt 128) |size#0@@0|) (|MutableMapModel.__default.ConstructorFromSize#requires| MutableMapModel._default.ConstructorFromSize$V@@0 |size#0@@0|))))) :qid |unknown.0:0| :skolemid |2181| :pattern ( (|MutableMapModel.__default.ConstructorFromSize#requires| MutableMapModel._default.ConstructorFromSize$V@@0 |size#0@@0|)) )))
(assert (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromSize$V@@1 T@U) (|size#0@@1| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V@@1) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|) (and (and (<= (LitInt 0) |size#0@@1|) (< |size#0@@1| 18446744073709551616)) (<= (LitInt 128) |size#0@@1|)))) (and (|Sequences.__default.SeqOfLength#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@1) |size#0@@1| ($Box (Lit |#MutableMapModel.Item.Empty|))) (= (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Sequences.__default.SeqOfLength (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@1) StartFuel_Sequences._default.SeqOfLength |size#0@@1| ($Box (Lit |#MutableMapModel.Item.Empty|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :skolemid |2182| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromSize$V@@2 T@U) (|size#0@@2| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V@@2) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|)) (and (and (<= (LitInt 0) |size#0@@2|) (< |size#0@@2| 18446744073709551616)) (<= (LitInt 128) (LitInt |size#0@@2|))))) (and (|Sequences.__default.SeqOfLength#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@2) (LitInt |size#0@@2|) ($Box (Lit |#MutableMapModel.Item.Empty|))) (= (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|)) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Sequences.__default.SeqOfLength (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@2) StartFuel_Sequences._default.SeqOfLength (LitInt |size#0@@2|) ($Box (Lit |#MutableMapModel.Item.Empty|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :weight 3 :skolemid |2183| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|))) ))))
(assert (forall ((arg0@@332 T@U) (arg1@@184 T@U) (arg2@@125 Int) ) (! (= (type (MutableMapModel.__default.ConstructorFromStorage arg0@@332 arg1@@184 arg2@@125)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ConstructorFromStorage| :pattern ( (MutableMapModel.__default.ConstructorFromStorage arg0@@332 arg1@@184 arg2@@125)) )))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromStorage$V T@U) (|storage#0| T@U) (|count#0@@3| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V) TyType) (= (type |storage#0|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|) (and (and ($Is |storage#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V))) (and (<= (LitInt 0) |count#0@@3|) (< |count#0@@3| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| |storage#0|))))) (and (and (and (and (|Seq#Equal| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) |storage#0|) (forall ((|slot#0@@61| T@U) ) (!  (=> (and (and (= (type |slot#0@@61|) DatatypeTypeType) ($Is |slot#0@@61| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|))) |slot#0@@61|)) (|MutableMapModel.Item#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) (MutableMapModel.Slot.slot |slot#0@@61|))) ($Unbox DatatypeTypeType (|Seq#Index| |storage#0| (MutableMapModel.Slot.slot |slot#0@@61|))))) :qid |MutableM.385:18| :skolemid |2184| :pattern ( (MutableMapModel.Slot.slot |slot#0@@61|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|))) |slot#0@@61|)) ))) (= (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) |count#0@@3|)) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) (|Map#Empty| BoxType BoxType))) ($Is (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ConstructorFromStorage$V)))) :qid |unknown.0:0| :skolemid |2185| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.ConstructorFromStorage$V@@0 T@U) (|storage#0@@0| T@U) (|count#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@0) TyType) (= (type |storage#0@@0|) (SeqType BoxType))) (and ($Is |storage#0@@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@0))) (and (<= (LitInt 0) |count#0@@4|) (< |count#0@@4| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.ConstructorFromStorage#requires| MutableMapModel._default.ConstructorFromStorage$V@@0 |storage#0@@0| |count#0@@4|) (<= (LitInt 128) (|Seq#Length| |storage#0@@0|))) (=> (<= (LitInt 128) (|Seq#Length| |storage#0@@0|)) (|MutableMapModel.__default.ConstructorFromStorage#requires| MutableMapModel._default.ConstructorFromStorage$V@@0 |storage#0@@0| |count#0@@4|)))) :qid |unknown.0:0| :skolemid |2186| :pattern ( (|MutableMapModel.__default.ConstructorFromStorage#requires| MutableMapModel._default.ConstructorFromStorage$V@@0 |storage#0@@0| |count#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromStorage$V@@1 T@U) (|storage#0@@1| T@U) (|count#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@1) TyType) (= (type |storage#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|) (and (and ($Is |storage#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@1))) (and (<= (LitInt 0) |count#0@@5|) (< |count#0@@5| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| |storage#0@@1|))))) (= (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@1| |count#0@@5| (Lit (|Map#Empty| BoxType BoxType))))) :qid |unknown.0:0| :skolemid |2187| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ConstructorFromStorage$V@@2 T@U) (|storage#0@@2| T@U) (|count#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@2) TyType) (= (type |storage#0@@2|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|)) (and (and ($Is |storage#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@2))) (and (<= (LitInt 0) |count#0@@6|) (< |count#0@@6| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| (Lit |storage#0@@2|)))))) (= (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|)) (Lit (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |storage#0@@2|) (LitInt |count#0@@6|) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :weight 3 :skolemid |2188| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|))) ))))
(assert (forall ((arg0@@333 T@U) (arg1@@185 T@U) (arg2@@126 Int) ) (! (= (type (MutableMapModel.__default.View arg0@@333 arg1@@185 arg2@@126)) (SeqType BoxType)) :qid |funType:MutableMapModel.__default.View| :pattern ( (MutableMapModel.__default.View arg0@@333 arg1@@185 arg2@@126)) )))
(assert  (=> true (forall ((MutableMapModel._default.View$V T@U) (|elements#0@@75| T@U) (|start#0@@3| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V) TyType) (= (type |elements#0@@75|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|) (and (and ($Is |elements#0@@75| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V))) (<= (LitInt 0) |start#0@@3|)) (< |start#0@@3| (|Seq#Length| |elements#0@@75|))))) (and (= (|Seq#Length| (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|)) (|Seq#Length| |elements#0@@75|)) ($Is (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|) (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V))))) :qid |unknown.0:0| :skolemid |2189| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.View$V@@0 T@U) (|elements#0@@76| T@U) (|start#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@0) TyType) (= (type |elements#0@@76|) (SeqType BoxType))) (and ($Is |elements#0@@76| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@0))) (<= (LitInt 0) |start#0@@4|))) (and (=> (|MutableMapModel.__default.View#requires| MutableMapModel._default.View$V@@0 |elements#0@@76| |start#0@@4|) (< |start#0@@4| (|Seq#Length| |elements#0@@76|))) (=> (< |start#0@@4| (|Seq#Length| |elements#0@@76|)) (|MutableMapModel.__default.View#requires| MutableMapModel._default.View$V@@0 |elements#0@@76| |start#0@@4|)))) :qid |unknown.0:0| :skolemid |2190| :pattern ( (|MutableMapModel.__default.View#requires| MutableMapModel._default.View$V@@0 |elements#0@@76| |start#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.View$V@@1 T@U) (|elements#0@@77| T@U) (|start#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@1) TyType) (= (type |elements#0@@77|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|) (and (and ($Is |elements#0@@77| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@1))) (<= (LitInt 0) |start#0@@5|)) (< |start#0@@5| (|Seq#Length| |elements#0@@77|))))) (= (MutableMapModel.__default.View MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|) (|Seq#Append| (|Seq#Drop| |elements#0@@77| |start#0@@5|) (|Seq#Take| |elements#0@@77| |start#0@@5|)))) :qid |unknown.0:0| :skolemid |2191| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.View$V@@2 T@U) (|elements#0@@78| T@U) (|start#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@2) TyType) (= (type |elements#0@@78|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (and (and ($Is |elements#0@@78| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@2))) (<= (LitInt 0) |start#0@@6|)) (< |start#0@@6| (|Seq#Length| (Lit |elements#0@@78|)))))) (= (MutableMapModel.__default.View MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (|Seq#Append| (|Seq#Drop| (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (|Seq#Take| (Lit |elements#0@@78|) (LitInt |start#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |2192| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@21| Int) (|slot#0@@62| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@21| |slot#0@@62|) (and (and (<= (LitInt 0) |elementsLength#0@@21|) (and (<= (LitInt 0) |slot#0@@62|) (< |slot#0@@62| 18446744073709551616))) (and (< |elementsLength#0@@21| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| |slot#0@@62|))))) (and (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@62|))) (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@62|)) (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| |slot#0@@62|)))) (and (<= (LitInt 0) (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@62|)) (< (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@62|) 18446744073709551616)))) :qid |MutableM.415:32| :skolemid |2193| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@62|)) ))))
(assert (forall ((|elementsLength#0@@22| Int) (|slot#0@@63| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@22|) (and (<= (LitInt 0) |slot#0@@63|) (< |slot#0@@63| 18446744073709551616))) (and (=> (|MutableMapModel.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@63|) (and (< |elementsLength#0@@22| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@22| (|#MutableMapModel.Slot.Slot| |slot#0@@63|)))) (=> (and (< |elementsLength#0@@22| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@22| (|#MutableMapModel.Slot.Slot| |slot#0@@63|))) (|MutableMapModel.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@63|)))) :qid |MutableM.415:32| :skolemid |2194| :pattern ( (|MutableMapModel.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@63|)) )))
(assert  (=> true (forall ((|elementsLength#0@@23| Int) (|slot#0@@64| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@23| |slot#0@@64|) (and (and (<= (LitInt 0) |elementsLength#0@@23|) (and (<= (LitInt 0) |slot#0@@64|) (< |slot#0@@64| 18446744073709551616))) (and (< |elementsLength#0@@23| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@23| (|#MutableMapModel.Slot.Slot| |slot#0@@64|))))) (= (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@64|) (ite (= |slot#0@@64| (- |elementsLength#0@@23| 1)) 0 (+ |slot#0@@64| 1)))) :qid |MutableM.415:32| :skolemid |2195| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@64|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@24| Int) (|slot#0@@65| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@65|)) (and (and (<= (LitInt 0) |elementsLength#0@@24|) (and (<= (LitInt 0) |slot#0@@65|) (< |slot#0@@65| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |elementsLength#0@@24| 18446744073709551616)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@24|) (Lit (|#MutableMapModel.Slot.Slot| (LitInt |slot#0@@65|)))))))))) (= (MutableMapModel.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@65|)) (ite (= (LitInt |slot#0@@65|) (LitInt (- |elementsLength#0@@24| 1))) 0 (+ |slot#0@@65| 1)))) :qid |MutableM.415:32| :weight 3 :skolemid |2196| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@65|))) ))))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V T@U) ($ly@@332 T@U) (|self#0@@7| T@U) (|i#0@@73| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.getEmptyWitness$V) TyType) (= (type $ly@@332) LayerTypeType)) (= (type |self#0@@7|) DatatypeTypeType)) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V ($LS $ly@@332) |self#0@@7| |i#0@@73|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V $ly@@332 |self#0@@7| |i#0@@73|))) :qid |unknown.0:0| :skolemid |2197| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V ($LS $ly@@332) |self#0@@7| |i#0@@73|)) )))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V@@0 T@U) ($ly@@333 T@U) (|self#0@@8| T@U) (|i#0@@74| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@0) TyType) (= (type $ly@@333) LayerTypeType)) (= (type |self#0@@8|) DatatypeTypeType)) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 $ly@@333 |self#0@@8| |i#0@@74|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 $LZ |self#0@@8| |i#0@@74|))) :qid |unknown.0:0| :skolemid |2198| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 (AsFuelBottom $ly@@333) |self#0@@8| |i#0@@74|)) )))
(assert  (=> true (forall ((MutableMapModel._default.getEmptyWitness$V@@1 T@U) ($ly@@334 T@U) (|self#0@@9| T@U) (|i#0@@75| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@1) TyType) (= (type $ly@@334) LayerTypeType)) (= (type |self#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@1 |self#0@@9| |i#0@@75|) (and (and ($Is |self#0@@9| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@1)) (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| 18446744073709551616))) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@1 |self#0@@9|) (and (<= (LitInt 0) |i#0@@75|) (<= |i#0@@75| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|))))) (forall ((|j#0@@14| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0@@14|) (< |j#0@@14| 18446744073709551616)) (and (<= (LitInt 0) |j#0@@14|) (< |j#0@@14| |i#0@@75|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) |j#0@@14|))))) :qid |MutableM.444:19| :skolemid |2199| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) |j#0@@14|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|))))))) (and (and (and (<= (LitInt 0) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|)) (< (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|)))) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|))))) (and (<= (LitInt 0) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|)) (< (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2200| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@334 |self#0@@9| |i#0@@75|)) ))))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V@@2 T@U) ($ly@@335 T@U) (|self#0@@10| T@U) (|i#0@@76| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@2) TyType) (= (type $ly@@335) LayerTypeType)) (= (type |self#0@@10|) DatatypeTypeType)) (and ($Is |self#0@@10| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@2)) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.getEmptyWitness#requires| MutableMapModel._default.getEmptyWitness$V@@2 $ly@@335 |self#0@@10| |i#0@@76|) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@2 |self#0@@10|) (and (<= (LitInt 0) |i#0@@76|) (<= |i#0@@76| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|))))) (forall ((|j#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| 18446744073709551616)) (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| |i#0@@76|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1@@4|))))) :qid |MutableM.444:19| :skolemid |2201| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1@@4|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@10|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|))))) (=> (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@2 |self#0@@10|) (and (<= (LitInt 0) |i#0@@76|) (<= |i#0@@76| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|))))) (forall ((|j#1@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| 18446744073709551616)) (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| |i#0@@76|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1@@5|))))) :qid |MutableM.444:19| :skolemid |2201| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1@@5|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@10|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|)))) (|MutableMapModel.__default.getEmptyWitness#requires| MutableMapModel._default.getEmptyWitness$V@@2 $ly@@335 |self#0@@10| |i#0@@76|)))) :qid |unknown.0:0| :skolemid |2202| :pattern ( (|MutableMapModel.__default.getEmptyWitness#requires| MutableMapModel._default.getEmptyWitness$V@@2 $ly@@335 |self#0@@10| |i#0@@76|)) )))
(assert  (=> true (forall ((MutableMapModel._default.getEmptyWitness$V@@3 T@U) ($ly@@336 T@U) (|self#0@@11| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@3) TyType) (= (type $ly@@336) LayerTypeType)) (= (type |self#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11| |i#0@@77|) (and (and ($Is |self#0@@11| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@3)) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| 18446744073709551616))) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11|) (and (<= (LitInt 0) |i#0@@77|) (<= |i#0@@77| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|))))) (forall ((|j#1@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@6|) (< |j#1@@6| 18446744073709551616)) (and (<= (LitInt 0) |j#1@@6|) (< |j#1@@6| |i#0@@77|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |j#1@@6|))))) :qid |MutableM.444:19| :skolemid |2201| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |j#1@@6|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@11|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@11|) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |i#0@@77|)))) (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11| (+ |i#0@@77| 1)))) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 ($LS $ly@@336) |self#0@@11| |i#0@@77|) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |i#0@@77|))) |i#0@@77| (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 $ly@@336 |self#0@@11| (+ |i#0@@77| 1)))))) :qid |unknown.0:0| :skolemid |2203| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 ($LS $ly@@336) |self#0@@11| |i#0@@77|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.getEmptyWitness$V@@4 T@U) ($ly@@337 T@U) (|self#0@@12| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@4) TyType) (= (type $ly@@337) LayerTypeType)) (= (type |self#0@@12|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|) (LitInt |i#0@@78|)) (and (and ($Is |self#0@@12| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@4)) (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| 18446744073709551616))) (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|))))) (and (<= (LitInt 0) (LitInt |i#0@@78|)) (<= (LitInt |i#0@@78|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))))))) (forall ((|j#2@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#2@@0|) (< |j#2@@0| 18446744073709551616)) (and (<= (LitInt 0) |j#2@@0|) (< |j#2@@0| |i#0@@78|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) |j#2@@0|))))) :qid |MutableM.444:19| :skolemid |2204| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@12|) |j#2@@0|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@12|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@12|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) (LitInt |i#0@@78|))))) (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|) (LitInt (+ |i#0@@78| 1))))) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@337) (Lit |self#0@@12|) (LitInt |i#0@@78|)) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) (LitInt |i#0@@78|)))) |i#0@@78| (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@337) (Lit |self#0@@12|) (LitInt (+ |i#0@@78| 1))))))) :qid |unknown.0:0| :weight 3 :skolemid |2205| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@337) (Lit |self#0@@12|) (LitInt |i#0@@78|))) ))))
(assert (forall ((MutableMapModel._default.ProbeIterate$V T@U) ($ly@@338 T@U) (|self#0@@13| T@U) (|key#0@@40| Int) (|slotIdx#0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ProbeIterate$V) TyType) (= (type $ly@@338) LayerTypeType)) (= (type |self#0@@13|) DatatypeTypeType)) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V ($LS $ly@@338) |self#0@@13| |key#0@@40| |slotIdx#0|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V $ly@@338 |self#0@@13| |key#0@@40| |slotIdx#0|))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V ($LS $ly@@338) |self#0@@13| |key#0@@40| |slotIdx#0|)) )))
(assert (forall ((MutableMapModel._default.ProbeIterate$V@@0 T@U) ($ly@@339 T@U) (|self#0@@14| T@U) (|key#0@@41| Int) (|slotIdx#0@@0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ProbeIterate$V@@0) TyType) (= (type $ly@@339) LayerTypeType)) (= (type |self#0@@14|) DatatypeTypeType)) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 $ly@@339 |self#0@@14| |key#0@@41| |slotIdx#0@@0|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 $LZ |self#0@@14| |key#0@@41| |slotIdx#0@@0|))) :qid |unknown.0:0| :skolemid |2207| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 (AsFuelBottom $ly@@339) |self#0@@14| |key#0@@41| |slotIdx#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ProbeIterate$V@@1 T@U) ($ly@@340 T@U) (|self#0@@15| T@U) (|key#0@@42| Int) (|slotIdx#0@@1| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@1) TyType) (= (type $ly@@340) LayerTypeType)) (= (type |self#0@@15|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@1 |self#0@@15| |key#0@@42| |slotIdx#0@@1|) (and (and (and ($Is |self#0@@15| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@1)) (and (<= (LitInt 0) |key#0@@42|) (< |key#0@@42| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@1|) (< |slotIdx#0@@1| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@1 |self#0@@15|) (and (<= (LitInt 0) |slotIdx#0@@1|) (< |slotIdx#0@@1| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@15|)))))))) (and (and (<= (LitInt 0) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@340 |self#0@@15| |key#0@@42| |slotIdx#0@@1|)) (< (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@340 |self#0@@15| |key#0@@42| |slotIdx#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@15|)))) (and (<= (LitInt 0) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@340 |self#0@@15| |key#0@@42| |slotIdx#0@@1|)) (< (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@340 |self#0@@15| |key#0@@42| |slotIdx#0@@1|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2208| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@340 |self#0@@15| |key#0@@42| |slotIdx#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.ProbeIterate$V@@2 T@U) ($ly@@341 T@U) (|self#0@@16| T@U) (|key#0@@43| Int) (|slotIdx#0@@2| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@2) TyType) (= (type $ly@@341) LayerTypeType)) (= (type |self#0@@16|) DatatypeTypeType)) (and (and ($Is |self#0@@16| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@2)) (and (<= (LitInt 0) |key#0@@43|) (< |key#0@@43| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@2|) (< |slotIdx#0@@2| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.ProbeIterate#requires| MutableMapModel._default.ProbeIterate$V@@2 $ly@@341 |self#0@@16| |key#0@@43| |slotIdx#0@@2|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@2 |self#0@@16|) (and (<= (LitInt 0) |slotIdx#0@@2|) (< |slotIdx#0@@2| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@16|)))))) (=> (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@2 |self#0@@16|) (and (<= (LitInt 0) |slotIdx#0@@2|) (< |slotIdx#0@@2| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@16|))))) (|MutableMapModel.__default.ProbeIterate#requires| MutableMapModel._default.ProbeIterate$V@@2 $ly@@341 |self#0@@16| |key#0@@43| |slotIdx#0@@2|)))) :qid |unknown.0:0| :skolemid |2209| :pattern ( (|MutableMapModel.__default.ProbeIterate#requires| MutableMapModel._default.ProbeIterate$V@@2 $ly@@341 |self#0@@16| |key#0@@43| |slotIdx#0@@2|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ProbeIterate$V@@3 T@U) ($ly@@342 T@U) (|self#0@@17| T@U) (|key#0@@44| Int) (|slotIdx#0@@3| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@3) TyType) (= (type $ly@@342) LayerTypeType)) (= (type |self#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17| |key#0@@44| |slotIdx#0@@3|) (and (and (and ($Is |self#0@@17| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@3)) (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@3|) (< |slotIdx#0@@3| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17|) (and (<= (LitInt 0) |slotIdx#0@@3|) (< |slotIdx#0@@3| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) |key#0@@44|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|)) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17| |key#0@@44| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 ($LS $ly@@342) |self#0@@17| |key#0@@44| |slotIdx#0@@3|) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) |key#0@@44|)) |slotIdx#0@@3| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 $ly@@342 |self#0@@17| |key#0@@44| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|)))))) :qid |unknown.0:0| :skolemid |2210| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 ($LS $ly@@342) |self#0@@17| |key#0@@44| |slotIdx#0@@3|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ProbeIterate$V@@4 T@U) ($ly@@343 T@U) (|self#0@@18| T@U) (|key#0@@45| Int) (|slotIdx#0@@4| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@4) TyType) (= (type $ly@@343) LayerTypeType)) (= (type |self#0@@18|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|) |key#0@@45| (LitInt |slotIdx#0@@4|)) (and (and (and ($Is |self#0@@18| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@4)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@4|) (< |slotIdx#0@@4| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|))))) (and (<= (LitInt 0) (LitInt |slotIdx#0@@4|)) (< |slotIdx#0@@4| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) |key#0@@45|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|))) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|) |key#0@@45| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|)))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@343) (Lit |self#0@@18|) |key#0@@45| (LitInt |slotIdx#0@@4|)) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) |key#0@@45|)) |slotIdx#0@@4| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@343) (Lit |self#0@@18|) |key#0@@45| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2211| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@343) (Lit |self#0@@18|) |key#0@@45| (LitInt |slotIdx#0@@4|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.ProbeIterate$V@@5 T@U) ($ly@@344 T@U) (|self#0@@19| T@U) (|key#0@@46| Int) (|slotIdx#0@@5| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@5) TyType) (= (type $ly@@344) LayerTypeType)) (= (type |self#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|) (LitInt |key#0@@46|) (LitInt |slotIdx#0@@5|)) (and (and (and ($Is |self#0@@19| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@5)) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@5|) (< |slotIdx#0@@5| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|))))) (and (<= (LitInt 0) (LitInt |slotIdx#0@@5|)) (< |slotIdx#0@@5| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (LitInt |key#0@@46|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|))) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|) (LitInt |key#0@@46|) (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|)))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@344) (Lit |self#0@@19|) (LitInt |key#0@@46|) (LitInt |slotIdx#0@@5|)) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (LitInt |key#0@@46|))) |slotIdx#0@@5| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@344) (Lit |self#0@@19|) (LitInt |key#0@@46|) (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2212| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@344) (Lit |self#0@@19|) (LitInt |key#0@@46|) (LitInt |slotIdx#0@@5|))) ))))
(assert (forall ((MutableMapModel._default.Probe$V T@U) ($ly@@345 T@U) (|self#0@@20| T@U) (|key#0@@47| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Probe$V) TyType) (= (type $ly@@345) LayerTypeType)) (= (type |self#0@@20|) DatatypeTypeType)) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V ($LS $ly@@345) |self#0@@20| |key#0@@47|) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V $ly@@345 |self#0@@20| |key#0@@47|))) :qid |unknown.0:0| :skolemid |2213| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V ($LS $ly@@345) |self#0@@20| |key#0@@47|)) )))
(assert (forall ((MutableMapModel._default.Probe$V@@0 T@U) ($ly@@346 T@U) (|self#0@@21| T@U) (|key#0@@48| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Probe$V@@0) TyType) (= (type $ly@@346) LayerTypeType)) (= (type |self#0@@21|) DatatypeTypeType)) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 $ly@@346 |self#0@@21| |key#0@@48|) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 $LZ |self#0@@21| |key#0@@48|))) :qid |unknown.0:0| :skolemid |2214| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 (AsFuelBottom $ly@@346) |self#0@@21| |key#0@@48|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Probe$V@@1 T@U) ($ly@@347 T@U) (|self#0@@22| T@U) (|key#0@@49| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@1) TyType) (= (type $ly@@347) LayerTypeType)) (= (type |self#0@@22|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@1 |self#0@@22| |key#0@@49|) (and (and ($Is |self#0@@22| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@1)) (and (<= (LitInt 0) |key#0@@49|) (< |key#0@@49| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@1 |self#0@@22|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@22|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@22|))))))) (and (and (<= (LitInt 0) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@347 |self#0@@22| |key#0@@49|)) (< (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@347 |self#0@@22| |key#0@@49|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@22|)))) (and (<= (LitInt 0) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@347 |self#0@@22| |key#0@@49|)) (< (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@347 |self#0@@22| |key#0@@49|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2215| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@347 |self#0@@22| |key#0@@49|)) ))))
(assert (forall ((MutableMapModel._default.Probe$V@@2 T@U) ($ly@@348 T@U) (|self#0@@23| T@U) (|key#0@@50| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@2) TyType) (= (type $ly@@348) LayerTypeType)) (= (type |self#0@@23|) DatatypeTypeType)) (and ($Is |self#0@@23| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@2)) (and (<= (LitInt 0) |key#0@@50|) (< |key#0@@50| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.Probe#requires| MutableMapModel._default.Probe$V@@2 $ly@@348 |self#0@@23| |key#0@@50|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@2 |self#0@@23|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@23|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@23|))))) (=> (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@2 |self#0@@23|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@23|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@23|)))) (|MutableMapModel.__default.Probe#requires| MutableMapModel._default.Probe$V@@2 $ly@@348 |self#0@@23| |key#0@@50|)))) :qid |unknown.0:0| :skolemid |2216| :pattern ( (|MutableMapModel.__default.Probe#requires| MutableMapModel._default.Probe$V@@2 $ly@@348 |self#0@@23| |key#0@@50|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Probe$V@@3 T@U) ($ly@@349 T@U) (|self#0@@24| T@U) (|key#0@@51| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@3) TyType) (= (type $ly@@349) LayerTypeType)) (= (type |self#0@@24|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@51|) (and (and ($Is |self#0@@24| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@3)) (and (<= (LitInt 0) |key#0@@51|) (< |key#0@@51| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@3 |self#0@@24|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@24|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@24|))))))) (and (and (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@51|) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@51| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@51|))) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@3 ($LS $ly@@349) |self#0@@24| |key#0@@51|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.Probe$V@@3 ($LS $LZ) |self#0@@24| |key#0@@51| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@51|))))) :qid |unknown.0:0| :skolemid |2217| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@3 ($LS $ly@@349) |self#0@@24| |key#0@@51|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Probe$V@@4 T@U) ($ly@@350 T@U) (|self#0@@25| T@U) (|key#0@@52| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@4) TyType) (= (type $ly@@350) LayerTypeType)) (= (type |self#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@52|)) (and (and ($Is |self#0@@25| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@4)) (and (<= (LitInt 0) |key#0@@52|) (< |key#0@@52| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@25|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@25|))))))))) (and (and (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@52|)) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@52|) (LitInt (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@52|))))) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@4 ($LS $ly@@350) (Lit |self#0@@25|) (LitInt |key#0@@52|)) (LitInt (MutableMapModel.__default.ProbeIterate MutableMapModel._default.Probe$V@@4 ($LS $LZ) (Lit |self#0@@25|) (LitInt |key#0@@52|) (LitInt (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2218| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@4 ($LS $ly@@350) (Lit |self#0@@25|) (LitInt |key#0@@52|))) ))))
(assert (forall ((arg0@@334 T@U) (arg1@@186 T@U) (arg2@@127 T@U) (arg3@@84 Int) (arg4@@59 T@U) ) (! (= (type (MutableMapModel.__default.FixedSizeInsert arg0@@334 arg1@@186 arg2@@127 arg3@@84 arg4@@59)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeInsert| :pattern ( (MutableMapModel.__default.FixedSizeInsert arg0@@334 arg1@@186 arg2@@127 arg3@@84 arg4@@59)) )))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V T@U) ($ly@@351 T@U) (|self#0@@26| T@U) (|key#0@@53| Int) (|value#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V) TyType) (= (type $ly@@351) LayerTypeType)) (= (type |self#0@@26|) DatatypeTypeType)) (= (type |value#0|) BoxType)) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V ($LS $ly@@351) |self#0@@26| |key#0@@53| |value#0|) (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V $ly@@351 |self#0@@26| |key#0@@53| |value#0|))) :qid |unknown.0:0| :skolemid |2219| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V ($LS $ly@@351) |self#0@@26| |key#0@@53| |value#0|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V@@0 T@U) ($ly@@352 T@U) (|self#0@@27| T@U) (|key#0@@54| Int) (|value#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@0) TyType) (= (type $ly@@352) LayerTypeType)) (= (type |self#0@@27|) DatatypeTypeType)) (= (type |value#0@@0|) BoxType)) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 $ly@@352 |self#0@@27| |key#0@@54| |value#0@@0|) (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 $LZ |self#0@@27| |key#0@@54| |value#0@@0|))) :qid |unknown.0:0| :skolemid |2220| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 (AsFuelBottom $ly@@352) |self#0@@27| |key#0@@54| |value#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInsert$V@@1 T@U) ($ly@@353 T@U) (|self#0@@28| T@U) (|key#0@@55| Int) (|value#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@1) TyType) (= (type $ly@@353) LayerTypeType)) (= (type |self#0@@28|) DatatypeTypeType)) (= (type |value#0@@1|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@1 |self#0@@28| |key#0@@55| |value#0@@1|) (and (and (and ($Is |self#0@@28| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@1)) (and (<= (LitInt 0) |key#0@@55|) (< |key#0@@55| 18446744073709551616))) ($IsBox |value#0@@1| MutableMapModel._default.FixedSizeInsert$V@@1)) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@1 |self#0@@28|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@28|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@28|)) 1)))))) ($Is (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@1 $ly@@353 |self#0@@28| |key#0@@55| |value#0@@1|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@1) (Tclass.Options.Option MutableMapModel._default.FixedSizeInsert$V@@1)))) :qid |unknown.0:0| :skolemid |2221| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@1 $ly@@353 |self#0@@28| |key#0@@55| |value#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V@@2 T@U) ($ly@@354 T@U) (|self#0@@29| T@U) (|key#0@@56| Int) (|value#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@2) TyType) (= (type $ly@@354) LayerTypeType)) (= (type |self#0@@29|) DatatypeTypeType)) (= (type |value#0@@2|) BoxType)) (and (and ($Is |self#0@@29| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@2)) (and (<= (LitInt 0) |key#0@@56|) (< |key#0@@56| 18446744073709551616))) ($IsBox |value#0@@2| MutableMapModel._default.FixedSizeInsert$V@@2))) (and (=> (|MutableMapModel.__default.FixedSizeInsert#requires| MutableMapModel._default.FixedSizeInsert$V@@2 $ly@@354 |self#0@@29| |key#0@@56| |value#0@@2|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@2 |self#0@@29|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@29|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@29|)) 1)))) (=> (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@2 |self#0@@29|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@29|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@29|)) 1))) (|MutableMapModel.__default.FixedSizeInsert#requires| MutableMapModel._default.FixedSizeInsert$V@@2 $ly@@354 |self#0@@29| |key#0@@56| |value#0@@2|)))) :qid |unknown.0:0| :skolemid |2222| :pattern ( (|MutableMapModel.__default.FixedSizeInsert#requires| MutableMapModel._default.FixedSizeInsert$V@@2 $ly@@354 |self#0@@29| |key#0@@56| |value#0@@2|)) )))
(assert (= (type StartFuel_MutableMapModel._default.Probe) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInsert$V@@3 T@U) ($ly@@355 T@U) (|self#0@@30| T@U) (|key#0@@57| Int) (|value#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@3) TyType) (= (type $ly@@355) LayerTypeType)) (= (type |self#0@@30|) DatatypeTypeType)) (= (type |value#0@@3|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30| |key#0@@57| |value#0@@3|) (and (and (and ($Is |self#0@@30| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@3)) (and (<= (LitInt 0) |key#0@@57|) (< |key#0@@57| 18446744073709551616))) ($IsBox |value#0@@3| MutableMapModel._default.FixedSizeInsert$V@@3)) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|)) 1)))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30| |key#0@@57|) (let ((|slotIdx#0@@6| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@30| |key#0@@57|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|)))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@3 ($LS $ly@@355) |self#0@@30| |key#0@@57| |value#0@@3|) (let ((|slotIdx#0@@7| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@30| |key#0@@57|))) (let ((|storage#0@@3| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7| ($Box (|#MutableMapModel.Item.Entry| |key#0@@57| |value#0@@3|))))) (let ((|contents#0@@23| (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@30|) ($Box (int_2_U |key#0@@57|)) ($Box (|#Options.Option.Some| |value#0@@3|))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (+ (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) 1) |contents#0@@23|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) |contents#0@@23|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#0| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) |contents#0@@23|)) ($Box |replaced#0|))))))))))) :qid |unknown.0:0| :skolemid |2223| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@3 ($LS $ly@@355) |self#0@@30| |key#0@@57| |value#0@@3|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInsert$V@@4 T@U) ($ly@@356 T@U) (|self#0@@31| T@U) (|key#0@@58| Int) (|value#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@4) TyType) (= (type $ly@@356) LayerTypeType)) (= (type |self#0@@31|) DatatypeTypeType)) (= (type |value#0@@4|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|) (LitInt |key#0@@58|) |value#0@@4|) (and (and (and ($Is |self#0@@31| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@4)) (and (<= (LitInt 0) |key#0@@58|) (< |key#0@@58| 18446744073709551616))) ($IsBox |value#0@@4| MutableMapModel._default.FixedSizeInsert$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|)))) 1)))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|) (LitInt |key#0@@58|)) (let ((|slotIdx#1| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@31|) (LitInt |key#0@@58|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|))))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@4 ($LS $ly@@356) (Lit |self#0@@31|) (LitInt |key#0@@58|) |value#0@@4|) (let ((|slotIdx#1@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@31|) (LitInt |key#0@@58|)))) (let ((|storage#1| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0| ($Box (|#MutableMapModel.Item.Entry| (LitInt |key#0@@58|) |value#0@@4|))))) (let ((|contents#1| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@31|))) ($Box (int_2_U (LitInt |key#0@@58|))) ($Box (|#Options.Option.Some| |value#0@@4|))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (+ (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|)) 1)) |contents#1|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|))) |contents#1|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#1| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|))) |contents#1|)) ($Box |replaced#1|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2224| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@4 ($LS $ly@@356) (Lit |self#0@@31|) (LitInt |key#0@@58|) |value#0@@4|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeInsert$V@@5 T@U) ($ly@@357 T@U) (|self#0@@32| T@U) (|key#0@@59| Int) (|value#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@5) TyType) (= (type $ly@@357) LayerTypeType)) (= (type |self#0@@32|) DatatypeTypeType)) (= (type |value#0@@5|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|) (LitInt |key#0@@59|) (Lit |value#0@@5|)) (and (and (and ($Is |self#0@@32| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@5)) (and (<= (LitInt 0) |key#0@@59|) (< |key#0@@59| 18446744073709551616))) ($IsBox |value#0@@5| MutableMapModel._default.FixedSizeInsert$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|)))) 1)))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|) (LitInt |key#0@@59|)) (let ((|slotIdx#2| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@5 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@32|) (LitInt |key#0@@59|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|))))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@5 ($LS $ly@@357) (Lit |self#0@@32|) (LitInt |key#0@@59|) (Lit |value#0@@5|)) (let ((|slotIdx#2@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@5 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@32|) (LitInt |key#0@@59|)))) (let ((|storage#2| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0| ($Box (Lit (|#MutableMapModel.Item.Entry| (LitInt |key#0@@59|) (Lit |value#0@@5|))))))) (let ((|contents#2| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@32|))) ($Box (int_2_U (LitInt |key#0@@59|))) ($Box (Lit (|#Options.Option.Some| (Lit |value#0@@5|))))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (+ (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|)) 1)) |contents#2|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|))) |contents#2|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#2| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|))) |contents#2|)) ($Box |replaced#2|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2225| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@5 ($LS $ly@@357) (Lit |self#0@@32|) (LitInt |key#0@@59|) (Lit |value#0@@5|))) ))))
(assert (forall ((arg0@@335 T@U) (arg1@@187 T@U) (arg2@@128 Int) (arg3@@85 T@U) ) (! (= (type (MutableMapModel.__default.FixedSizeUpdateBySlot arg0@@335 arg1@@187 arg2@@128 arg3@@85)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeUpdateBySlot| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot arg0@@335 arg1@@187 arg2@@128 arg3@@85)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V T@U) (|self#0@@33| T@U) (|slotIdx#0@@8| Int) (|value#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V) TyType) (= (type |self#0@@33|) DatatypeTypeType)) (= (type |value#0@@6|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|) (and (and (and ($Is |self#0@@33| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V)) (and (<= (LitInt 0) |slotIdx#0@@8|) (< |slotIdx#0@@8| 18446744073709551616))) ($IsBox |value#0@@6| MutableMapModel._default.FixedSizeUpdateBySlot$V)) (and (and (<= (LitInt 0) |slotIdx#0@@8|) (< |slotIdx#0@@8| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@33|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@33|) |slotIdx#0@@8|))))))) ($Is (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V))) :qid |unknown.0:0| :skolemid |2226| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 T@U) (|self#0@@34| T@U) (|slotIdx#0@@9| Int) (|value#0@@7| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@0) TyType) (= (type |self#0@@34|) DatatypeTypeType)) (= (type |value#0@@7|) BoxType)) (and (and ($Is |self#0@@34| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@0)) (and (<= (LitInt 0) |slotIdx#0@@9|) (< |slotIdx#0@@9| 18446744073709551616))) ($IsBox |value#0@@7| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0))) (and (=> (|MutableMapModel.__default.FixedSizeUpdateBySlot#requires| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 |self#0@@34| |slotIdx#0@@9| |value#0@@7|) (and (and (<= (LitInt 0) |slotIdx#0@@9|) (< |slotIdx#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|) |slotIdx#0@@9|))))) (=> (and (and (<= (LitInt 0) |slotIdx#0@@9|) (< |slotIdx#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|) |slotIdx#0@@9|)))) (|MutableMapModel.__default.FixedSizeUpdateBySlot#requires| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 |self#0@@34| |slotIdx#0@@9| |value#0@@7|)))) :qid |unknown.0:0| :skolemid |2227| :pattern ( (|MutableMapModel.__default.FixedSizeUpdateBySlot#requires| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 |self#0@@34| |slotIdx#0@@9| |value#0@@7|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 T@U) (|self#0@@35| T@U) (|slotIdx#0@@10| Int) (|value#0@@8| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@1) TyType) (= (type |self#0@@35|) DatatypeTypeType)) (= (type |value#0@@8|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|) (and (and (and ($Is |self#0@@35| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@1)) (and (<= (LitInt 0) |slotIdx#0@@10|) (< |slotIdx#0@@10| 18446744073709551616))) ($IsBox |value#0@@8| MutableMapModel._default.FixedSizeUpdateBySlot$V@@1)) (and (and (<= (LitInt 0) |slotIdx#0@@10|) (< |slotIdx#0@@10| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|) (let ((|storage'#0| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10| ($Box (let ((|dt_update_tmp#0#0| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|)))) (let ((|dt_update#value#0#0| |value#0@@8|)) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#0|) |dt_update#value#0#0|))))))) (let ((|contents'#0| (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@35|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|))))) ($Box (|#Options.Option.Some| |value#0@@8|))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#0| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@35|) |contents'#0|)))))) :qid |unknown.0:0| :skolemid |2228| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 T@U) (|self#0@@36| T@U) (|slotIdx#0@@11| Int) (|value#0@@9| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@2) TyType) (= (type |self#0@@36|) DatatypeTypeType)) (= (type |value#0@@9|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|) (and (and (and ($Is |self#0@@36| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@2)) (and (<= (LitInt 0) |slotIdx#0@@11|) (< |slotIdx#0@@11| 18446744073709551616))) ($IsBox |value#0@@9| MutableMapModel._default.FixedSizeUpdateBySlot$V@@2)) (and (and (<= (LitInt 0) (LitInt |slotIdx#0@@11|)) (< |slotIdx#0@@11| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|)))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|) (let ((|storage'#1| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|) ($Box (let ((|dt_update_tmp#0#1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|))))) (let ((|dt_update#value#0#1| |value#0@@9|)) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#1|) |dt_update#value#0#1|))))))) (let ((|contents'#1| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@36|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|)))))) ($Box (|#Options.Option.Some| |value#0@@9|))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@36|))) |contents'#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2229| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 T@U) (|self#0@@37| T@U) (|slotIdx#0@@12| Int) (|value#0@@10| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@3) TyType) (= (type |self#0@@37|) DatatypeTypeType)) (= (type |value#0@@10|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|)) (and (and (and ($Is |self#0@@37| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@3)) (and (<= (LitInt 0) |slotIdx#0@@12|) (< |slotIdx#0@@12| 18446744073709551616))) ($IsBox |value#0@@10| MutableMapModel._default.FixedSizeUpdateBySlot$V@@3)) (and (and (<= (LitInt 0) (LitInt |slotIdx#0@@12|)) (< |slotIdx#0@@12| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|)))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|)) (let ((|storage'#2| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|) ($Box (let ((|dt_update_tmp#0#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|))))) (let ((|dt_update#value#0#2| (Lit |value#0@@10|))) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#2|) |dt_update#value#0#2|))))))) (let ((|contents'#2| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@37|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|)))))) ($Box (Lit (|#Options.Option.Some| (Lit |value#0@@10|))))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@37|))) |contents'#2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2230| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|))) ))))
(assert (forall ((arg0@@336 T@U) (arg1@@188 T@U) (arg2@@129 T@U) (arg3@@86 Int) ) (! (= (type (MutableMapModel.__default.FixedSizeGet arg0@@336 arg1@@188 arg2@@129 arg3@@86)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeGet| :pattern ( (MutableMapModel.__default.FixedSizeGet arg0@@336 arg1@@188 arg2@@129 arg3@@86)) )))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V T@U) ($ly@@358 T@U) (|self#0@@38| T@U) (|key#0@@60| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeGet$V) TyType) (= (type $ly@@358) LayerTypeType)) (= (type |self#0@@38|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V ($LS $ly@@358) |self#0@@38| |key#0@@60|) (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V $ly@@358 |self#0@@38| |key#0@@60|))) :qid |unknown.0:0| :skolemid |2231| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V ($LS $ly@@358) |self#0@@38| |key#0@@60|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V@@0 T@U) ($ly@@359 T@U) (|self#0@@39| T@U) (|key#0@@61| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@0) TyType) (= (type $ly@@359) LayerTypeType)) (= (type |self#0@@39|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 $ly@@359 |self#0@@39| |key#0@@61|) (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 $LZ |self#0@@39| |key#0@@61|))) :qid |unknown.0:0| :skolemid |2232| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 (AsFuelBottom $ly@@359) |self#0@@39| |key#0@@61|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeGet$V@@1 T@U) ($ly@@360 T@U) (|self#0@@40| T@U) (|key#0@@62| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@1) TyType) (= (type $ly@@360) LayerTypeType)) (= (type |self#0@@40|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@1 |self#0@@40| |key#0@@62|) (and (and ($Is |self#0@@40| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@1)) (and (<= (LitInt 0) |key#0@@62|) (< |key#0@@62| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@1 |self#0@@40|)))) ($Is (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@1 $ly@@360 |self#0@@40| |key#0@@62|) (Tclass.Options.Option MutableMapModel._default.FixedSizeGet$V@@1))) :qid |unknown.0:0| :skolemid |2233| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@1 $ly@@360 |self#0@@40| |key#0@@62|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V@@2 T@U) ($ly@@361 T@U) (|self#0@@41| T@U) (|key#0@@63| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@2) TyType) (= (type $ly@@361) LayerTypeType)) (= (type |self#0@@41|) DatatypeTypeType)) (and ($Is |self#0@@41| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@2)) (and (<= (LitInt 0) |key#0@@63|) (< |key#0@@63| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FixedSizeGet#requires| MutableMapModel._default.FixedSizeGet$V@@2 $ly@@361 |self#0@@41| |key#0@@63|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@2 |self#0@@41|)) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@2 |self#0@@41|) (|MutableMapModel.__default.FixedSizeGet#requires| MutableMapModel._default.FixedSizeGet$V@@2 $ly@@361 |self#0@@41| |key#0@@63|)))) :qid |unknown.0:0| :skolemid |2234| :pattern ( (|MutableMapModel.__default.FixedSizeGet#requires| MutableMapModel._default.FixedSizeGet$V@@2 $ly@@361 |self#0@@41| |key#0@@63|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeGet$V@@3 T@U) ($ly@@362 T@U) (|self#0@@42| T@U) (|key#0@@64| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@3) TyType) (= (type $ly@@362) LayerTypeType)) (= (type |self#0@@42|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42| |key#0@@64|) (and (and ($Is |self#0@@42| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@3)) (and (<= (LitInt 0) |key#0@@64|) (< |key#0@@64| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42|)))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42| |key#0@@64|) (let ((|slotIdx#0@@13| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@42| |key#0@@64|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@42|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@13|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@42|))))) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@3 ($LS $ly@@362) |self#0@@42| |key#0@@64|) (let ((|slotIdx#0@@14| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@42| |key#0@@64|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@14|))) (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@14|)))) |#Options.Option.None|))))) :qid |unknown.0:0| :skolemid |2235| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@3 ($LS $ly@@362) |self#0@@42| |key#0@@64|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeGet$V@@4 T@U) ($ly@@363 T@U) (|self#0@@43| T@U) (|key#0@@65| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@4) TyType) (= (type $ly@@363) LayerTypeType)) (= (type |self#0@@43|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|) (LitInt |key#0@@65|)) (and (and ($Is |self#0@@43| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@4)) (and (<= (LitInt 0) |key#0@@65|) (< |key#0@@65| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|)))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|) (LitInt |key#0@@65|)) (let ((|slotIdx#1@@1| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@43|) (LitInt |key#0@@65|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@43|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@43|)))))) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@4 ($LS $ly@@363) (Lit |self#0@@43|) (LitInt |key#0@@65|)) (let ((|slotIdx#1@@2| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@43|) (LitInt |key#0@@65|)))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@2|))) (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@2|)))) |#Options.Option.None|))))) :qid |unknown.0:0| :weight 3 :skolemid |2236| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@4 ($LS $ly@@363) (Lit |self#0@@43|) (LitInt |key#0@@65|))) ))))
(assert (forall ((arg0@@337 T@U) (arg1@@189 T@U) (arg2@@130 T@U) (arg3@@87 Int) ) (! (= (type (MutableMapModel.__default.FixedSizeRemove arg0@@337 arg1@@189 arg2@@130 arg3@@87)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeRemove| :pattern ( (MutableMapModel.__default.FixedSizeRemove arg0@@337 arg1@@189 arg2@@130 arg3@@87)) )))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V T@U) ($ly@@364 T@U) (|self#0@@44| T@U) (|key#0@@66| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeRemove$V) TyType) (= (type $ly@@364) LayerTypeType)) (= (type |self#0@@44|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V ($LS $ly@@364) |self#0@@44| |key#0@@66|) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V $ly@@364 |self#0@@44| |key#0@@66|))) :qid |unknown.0:0| :skolemid |2237| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V ($LS $ly@@364) |self#0@@44| |key#0@@66|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V@@0 T@U) ($ly@@365 T@U) (|self#0@@45| T@U) (|key#0@@67| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@0) TyType) (= (type $ly@@365) LayerTypeType)) (= (type |self#0@@45|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 $ly@@365 |self#0@@45| |key#0@@67|) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 $LZ |self#0@@45| |key#0@@67|))) :qid |unknown.0:0| :skolemid |2238| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 (AsFuelBottom $ly@@365) |self#0@@45| |key#0@@67|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeRemove$V@@1 T@U) ($ly@@366 T@U) (|self#0@@46| T@U) (|key#0@@68| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@1) TyType) (= (type $ly@@366) LayerTypeType)) (= (type |self#0@@46|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@1 |self#0@@46| |key#0@@68|) (and (and ($Is |self#0@@46| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@1)) (and (<= (LitInt 0) |key#0@@68|) (< |key#0@@68| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@1 |self#0@@46|)))) ($Is (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@1 $ly@@366 |self#0@@46| |key#0@@68|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@1) (Tclass.Options.Option MutableMapModel._default.FixedSizeRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2239| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@1 $ly@@366 |self#0@@46| |key#0@@68|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V@@2 T@U) ($ly@@367 T@U) (|self#0@@47| T@U) (|key#0@@69| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@2) TyType) (= (type $ly@@367) LayerTypeType)) (= (type |self#0@@47|) DatatypeTypeType)) (and ($Is |self#0@@47| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@2)) (and (<= (LitInt 0) |key#0@@69|) (< |key#0@@69| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FixedSizeRemove#requires| MutableMapModel._default.FixedSizeRemove$V@@2 $ly@@367 |self#0@@47| |key#0@@69|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@2 |self#0@@47|)) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@2 |self#0@@47|) (|MutableMapModel.__default.FixedSizeRemove#requires| MutableMapModel._default.FixedSizeRemove$V@@2 $ly@@367 |self#0@@47| |key#0@@69|)))) :qid |unknown.0:0| :skolemid |2240| :pattern ( (|MutableMapModel.__default.FixedSizeRemove#requires| MutableMapModel._default.FixedSizeRemove$V@@2 $ly@@367 |self#0@@47| |key#0@@69|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeRemove$V@@3 T@U) ($ly@@368 T@U) (|self#0@@48| T@U) (|key#0@@70| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@3) TyType) (= (type $ly@@368) LayerTypeType)) (= (type |self#0@@48|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48| |key#0@@70|) (and (and ($Is |self#0@@48| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@3)) (and (<= (LitInt 0) |key#0@@70|) (< |key#0@@70| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48|)))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48| |key#0@@70|) (let ((|slotIdx#0@@15| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@48| |key#0@@70|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@15|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|))))))) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@3 ($LS $ly@@368) |self#0@@48| |key#0@@70|) (let ((|slotIdx#0@@16| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@48| |key#0@@70|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16|))) (let ((|removed#0| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16|)))))) (let ((|self'#0| (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16| ($Box (|#MutableMapModel.Item.Tombstone| |key#0@@70|))) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@48|) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@48|) ($Box (int_2_U |key#0@@70|)) ($Box (Lit |#Options.Option.None|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#0|) ($Box |removed#0|)))) (|#_System._tuple#2._#Make2| ($Box |self#0@@48|) ($Box (Lit |#Options.Option.None|)))))))) :qid |unknown.0:0| :skolemid |2241| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@3 ($LS $ly@@368) |self#0@@48| |key#0@@70|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FixedSizeRemove$V@@4 T@U) ($ly@@369 T@U) (|self#0@@49| T@U) (|key#0@@71| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@4) TyType) (= (type $ly@@369) LayerTypeType)) (= (type |self#0@@49|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|) (LitInt |key#0@@71|)) (and (and ($Is |self#0@@49| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@4)) (and (<= (LitInt 0) |key#0@@71|) (< |key#0@@71| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|)))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|) (LitInt |key#0@@71|)) (let ((|slotIdx#1@@3| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@49|) (LitInt |key#0@@71|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@3|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)))))))) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@4 ($LS $ly@@369) (Lit |self#0@@49|) (LitInt |key#0@@71|)) (let ((|slotIdx#1@@4| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@49|) (LitInt |key#0@@71|)))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4|))) (let ((|removed#1| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4|)))))) (let ((|self'#1| (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4| ($Box (Lit (|#MutableMapModel.Item.Tombstone| (LitInt |key#0@@71|))))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@49|))) (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@49|))) ($Box (int_2_U (LitInt |key#0@@71|))) ($Box (Lit |#Options.Option.None|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1|) ($Box |removed#1|)))) (|#_System._tuple#2._#Make2| ($Box (Lit |self#0@@49|)) ($Box (Lit |#Options.Option.None|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2242| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@4 ($LS $ly@@369) (Lit |self#0@@49|) (LitInt |key#0@@71|))) ))))
(assert (forall ((arg0@@338 T@U) (arg1@@190 T@U) (arg2@@131 T@U) ) (! (= (type (MutableMapModel.__default.MapFromStorage arg0@@338 arg1@@190 arg2@@131)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.__default.MapFromStorage| :pattern ( (MutableMapModel.__default.MapFromStorage arg0@@338 arg1@@190 arg2@@131)) )))
(assert (forall ((MutableMapModel._default.MapFromStorage$V T@U) ($ly@@370 T@U) (|elements#0@@79| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MapFromStorage$V) TyType) (= (type $ly@@370) LayerTypeType)) (= (type |elements#0@@79|) (SeqType BoxType))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V ($LS $ly@@370) |elements#0@@79|) (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V $ly@@370 |elements#0@@79|))) :qid |unknown.0:0| :skolemid |2243| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V ($LS $ly@@370) |elements#0@@79|)) )))
(assert (forall ((MutableMapModel._default.MapFromStorage$V@@0 T@U) ($ly@@371 T@U) (|elements#0@@80| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MapFromStorage$V@@0) TyType) (= (type $ly@@371) LayerTypeType)) (= (type |elements#0@@80|) (SeqType BoxType))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 $ly@@371 |elements#0@@80|) (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 $LZ |elements#0@@80|))) :qid |unknown.0:0| :skolemid |2244| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 (AsFuelBottom $ly@@371) |elements#0@@80|)) )))
(assert  (=> true (forall ((MutableMapModel._default.MapFromStorage$V@@1 T@U) ($ly@@372 T@U) (|elements#0@@81| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@1) TyType) (= (type $ly@@372) LayerTypeType)) (= (type |elements#0@@81|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@1 |elements#0@@81|) ($Is |elements#0@@81| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@1))))) ($Is (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@1 $ly@@372 |elements#0@@81|) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.MapFromStorage$V@@1))) :qid |unknown.0:0| :skolemid |2245| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@1 $ly@@372 |elements#0@@81|)) ))))
(assert (forall ((MutableMapModel._default.MapFromStorage$V@@2 T@U) ($ly@@373 T@U) (|elements#0@@82| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@2) TyType) (= (type $ly@@373) LayerTypeType)) (= (type |elements#0@@82|) (SeqType BoxType))) ($Is |elements#0@@82| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@2)))) (and (=> (|MutableMapModel.__default.MapFromStorage#requires| MutableMapModel._default.MapFromStorage$V@@2 $ly@@373 |elements#0@@82|) true) (=> true (|MutableMapModel.__default.MapFromStorage#requires| MutableMapModel._default.MapFromStorage$V@@2 $ly@@373 |elements#0@@82|)))) :qid |unknown.0:0| :skolemid |2246| :pattern ( (|MutableMapModel.__default.MapFromStorage#requires| MutableMapModel._default.MapFromStorage$V@@2 $ly@@373 |elements#0@@82|)) )))
(assert  (=> true (forall ((MutableMapModel._default.MapFromStorage$V@@3 T@U) ($ly@@374 T@U) (|elements#0@@83| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@3) TyType) (= (type $ly@@374) LayerTypeType)) (= (type |elements#0@@83|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@3 |elements#0@@83|) ($Is |elements#0@@83| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3))))) (and (=> (not (= (|Seq#Length| |elements#0@@83|) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|) (and (|Sequences.__default.DropLast#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@3 (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|))))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 ($LS $ly@@374) |elements#0@@83|) (ite (= (|Seq#Length| |elements#0@@83|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#0@@8| ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|)))) (let ((|dropLastMap#0| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 $ly@@374 (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|)))) (ite (MutableMapModel.Item.Entry_q |item#0@@8|) (|Map#Build| |dropLastMap#0| ($Box (int_2_U (MutableMapModel.Item.key |item#0@@8|))) (MutableMapModel.Item.value |item#0@@8|)) |dropLastMap#0|))))))) :qid |unknown.0:0| :skolemid |2247| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 ($LS $ly@@374) |elements#0@@83|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.MapFromStorage$V@@4 T@U) ($ly@@375 T@U) (|elements#0@@84| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@4) TyType) (= (type $ly@@375) LayerTypeType)) (= (type |elements#0@@84|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@4 (Lit |elements#0@@84|)) ($Is |elements#0@@84| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4))))) (and (=> (not (= (|Seq#Length| (Lit |elements#0@@84|)) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)) (and (|Sequences.__default.DropLast#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@4 (Lit (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|))))))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@375) (Lit |elements#0@@84|)) (ite (= (|Seq#Length| (Lit |elements#0@@84|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#1@@4| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)))))) (let ((|dropLastMap#1| (Lit (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@375) (Lit (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|))))))) (ite (MutableMapModel.Item.Entry_q |item#1@@4|) (|Map#Build| |dropLastMap#1| ($Box (int_2_U (LitInt (MutableMapModel.Item.key |item#1@@4|)))) (Lit (MutableMapModel.Item.value |item#1@@4|))) |dropLastMap#1|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2248| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@375) (Lit |elements#0@@84|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocate$V T@U) (|elements#0@@85| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V) TyType) (= (type |elements#0@@85|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V |elements#0@@85|) ($Is |elements#0@@85| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V))))) true) :qid |unknown.0:0| :skolemid |2249| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V |elements#0@@85|)) ))))
(assert (forall ((MutableMapModel._default.CantEquivocate$V@@0 T@U) (|elements#0@@86| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@0) TyType) (= (type |elements#0@@86|) (SeqType BoxType))) ($Is |elements#0@@86| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@0)))) (and (=> (|MutableMapModel.__default.CantEquivocate#requires| MutableMapModel._default.CantEquivocate$V@@0 |elements#0@@86|) true) (=> true (|MutableMapModel.__default.CantEquivocate#requires| MutableMapModel._default.CantEquivocate$V@@0 |elements#0@@86|)))) :qid |unknown.0:0| :skolemid |2250| :pattern ( (|MutableMapModel.__default.CantEquivocate#requires| MutableMapModel._default.CantEquivocate$V@@0 |elements#0@@86|)) )))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocate$V@@1 T@U) (|elements#0@@87| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@1) TyType) (= (type |elements#0@@87|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|) ($Is |elements#0@@87| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@1))))) (and (forall ((|slot1#0@@10| T@U) (|slot2#0@@10| T@U) ) (!  (=> (and (and (= (type |slot1#0@@10|) DatatypeTypeType) (= (type |slot2#0@@10|) DatatypeTypeType)) (and ($Is |slot1#0@@10| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@10| Tclass.MutableMapModel.Slot))) (and (and (and (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@87|) |slot1#0@@10|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@87|) |slot2#0@@10|))) (=> (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@87|) |slot2#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|)) (MutableMapModel.Slot.Slot_q |slot1#0@@10|))) (=> (and (MutableMapModel.Slot.Slot_q |slot1#0@@10|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@10|))))) (MutableMapModel.Slot.Slot_q |slot2#0@@10|))) (=> (and (MutableMapModel.Slot.Slot_q |slot2#0@@10|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@10|))))) (and (MutableMapModel.Slot.Slot_q |slot1#0@@10|) (MutableMapModel.Slot.Slot_q |slot2#0@@10|)))) (=> (and (and (MutableMapModel.Slot.Slot_q |slot1#0@@10|) (MutableMapModel.Slot.Slot_q |slot2#0@@10|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@10|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@10|)))))) (and (|$IsA#MutableMapModel.Slot| |slot1#0@@10|) (|$IsA#MutableMapModel.Slot| |slot2#0@@10|))))) :qid |MutableM.836:12| :skolemid |2251| :pattern ( (MutableMapModel.Slot.slot |slot2#0@@10|) (MutableMapModel.Slot.slot |slot1#0@@10|)) :pattern ( (MutableMapModel.Slot.slot |slot2#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|)) :pattern ( (MutableMapModel.Slot.slot |slot1#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|)) )) (and (=> (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|) (forall ((|slot1#0@@11| T@U) (|slot2#0@@11| T@U) ) (!  (=> (and (and (= (type |slot1#0@@11|) DatatypeTypeType) (= (type |slot2#0@@11|) DatatypeTypeType)) (and ($Is |slot1#0@@11| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@11| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@11|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@11|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@11|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@11|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@11|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@11|)))))) (|MutableMapModel.Slot#Equal| |slot1#0@@11| |slot2#0@@11|))) :qid |MutableM.836:12| :skolemid |2252| :pattern ( (MutableMapModel.Slot.slot |slot2#0@@11|) (MutableMapModel.Slot.slot |slot1#0@@11|)) :pattern ( (MutableMapModel.Slot.slot |slot2#0@@11|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@11|)) :pattern ( (MutableMapModel.Slot.slot |slot1#0@@11|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@11|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@11|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@11|)) ))) (=> (forall ((|slot1#0@@12| T@U) (|slot2#0@@12| T@U) ) (!  (=> (and (and (= (type |slot1#0@@12|) DatatypeTypeType) (= (type |slot2#0@@12|) DatatypeTypeType)) (and ($Is |slot1#0@@12| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@12| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@12|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@12|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@12|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@12|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@12|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@12|)))))) (|MutableMapModel.Slot#Equal| |slot1#0@@12| |slot2#0@@12|))) :qid |MutableM.836:12| :skolemid |2252| :pattern ( (MutableMapModel.Slot.slot |slot2#0@@12|) (MutableMapModel.Slot.slot |slot1#0@@12|)) :pattern ( (MutableMapModel.Slot.slot |slot2#0@@12|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@12|)) :pattern ( (MutableMapModel.Slot.slot |slot1#0@@12|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@12|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@12|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@12|)) )) (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|))))) :qid |unknown.0:0| :skolemid |2253| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.CantEquivocate$V@@2 T@U) (|elements#0@@88| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@2) TyType) (= (type |elements#0@@88|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|)) ($Is |elements#0@@88| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@2))))) (and (forall ((|slot1#1@@2| T@U) (|slot2#1@@2| T@U) ) (!  (=> (and (and (= (type |slot1#1@@2|) DatatypeTypeType) (= (type |slot2#1@@2|) DatatypeTypeType)) (and ($Is |slot1#1@@2| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@2| Tclass.MutableMapModel.Slot))) (and (and (and (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@2|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@2|) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@2|))) (=> (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@2|)) (MutableMapModel.Slot.Slot_q |slot1#1@@2|))) (=> (and (MutableMapModel.Slot.Slot_q |slot1#1@@2|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@2|))))) (MutableMapModel.Slot.Slot_q |slot2#1@@2|))) (=> (and (MutableMapModel.Slot.Slot_q |slot2#1@@2|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@2|))))) (and (MutableMapModel.Slot.Slot_q |slot1#1@@2|) (MutableMapModel.Slot.Slot_q |slot2#1@@2|)))) (=> (and (and (MutableMapModel.Slot.Slot_q |slot1#1@@2|) (MutableMapModel.Slot.Slot_q |slot2#1@@2|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@2|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@2|)))))) (and (|$IsA#MutableMapModel.Slot| |slot1#1@@2|) (|$IsA#MutableMapModel.Slot| |slot2#1@@2|))))) :qid |MutableM.836:12| :skolemid |2254| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@2|) (MutableMapModel.Slot.slot |slot1#1@@2|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@2|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@2|)) )) (and (=> (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|)) (forall ((|slot1#1@@3| T@U) (|slot2#1@@3| T@U) ) (!  (=> (and (and (= (type |slot1#1@@3|) DatatypeTypeType) (= (type |slot2#1@@3|) DatatypeTypeType)) (and ($Is |slot1#1@@3| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@3| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@3|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@3|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@3|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@3|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@3|)))))) (|MutableMapModel.Slot#Equal| |slot1#1@@3| |slot2#1@@3|))) :qid |MutableM.836:12| :skolemid |2255| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@3|) (MutableMapModel.Slot.slot |slot1#1@@3|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@3|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@3|)) ))) (=> (forall ((|slot1#1@@4| T@U) (|slot2#1@@4| T@U) ) (!  (=> (and (and (= (type |slot1#1@@4|) DatatypeTypeType) (= (type |slot2#1@@4|) DatatypeTypeType)) (and ($Is |slot1#1@@4| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@4| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@4|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@4|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@4|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@4|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@4|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@4|)))))) (|MutableMapModel.Slot#Equal| |slot1#1@@4| |slot2#1@@4|))) :qid |MutableM.836:12| :skolemid |2255| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@4|) (MutableMapModel.Slot.slot |slot1#1@@4|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@4|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@4|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@4|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@4|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@4|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@4|)) )) (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2256| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V T@U) (|underlying#0| T@U) (|contents#0@@24| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V) TyType) (= (type |underlying#0|) DatatypeTypeType)) (= (type |contents#0@@24|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0@@24|) (and ($Is |underlying#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V)) ($Is |contents#0@@24| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V))))) true) :qid |unknown.0:0| :skolemid |2257| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0@@24|)) ))))
(assert (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 T@U) (|underlying#0@@0| T@U) (|contents#0@@25| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0) TyType) (= (type |underlying#0@@0|) DatatypeTypeType)) (= (type |contents#0@@25|) (MapType BoxType BoxType))) (and ($Is |underlying#0@@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0)) ($Is |contents#0@@25| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0)))) (and (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@25|) true) (=> true (|MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@25|)))) :qid |unknown.0:0| :skolemid |2258| :pattern ( (|MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@25|)) )))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 T@U) (|underlying#0@@1| T@U) (|contents#0@@26| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1) TyType) (= (type |underlying#0@@1|) DatatypeTypeType)) (= (type |contents#0@@26|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|) (and ($Is |underlying#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1)) ($Is |contents#0@@26| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1))))) (and (and (forall ((|key#0@@72| T@U) ) (!  (=> (= (type |key#0@@72|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@72|)) (< (U_2_int |key#0@@72|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@72|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@72|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@72|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@72|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|))))))) :qid |MutableM.922:16| :skolemid |2259| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box |key#0@@72|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@72|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@72|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@72|))) )) (=> (forall ((|key#0@@73| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@73|) (< |key#0@@73| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@73|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@73|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@73|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@73|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@73|)))))))) :qid |MutableM.922:16| :skolemid |2261| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@73|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@73|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@73|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@73|)))) )) (forall ((|key#1@@11| T@U) ) (!  (=> (= (type |key#1@@11|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@11|)) (< (U_2_int |key#1@@11|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@11|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@11|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)))))) :qid |MutableM.923:16| :skolemid |2260| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@11|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@11|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@11|))) )))) (and (=> (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|) (and (forall ((|key#0@@74| T@U) ) (!  (=> (= (type |key#0@@74|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@74|)) (< (U_2_int |key#0@@74|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@74|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@74|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@74|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@74|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box |key#0@@74|)))))))) :qid |MutableM.922:16| :skolemid |2262| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box |key#0@@74|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@74|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@74|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@74|))) )) (forall ((|key#1@@12| T@U) ) (!  (=> (= (type |key#1@@12|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@12|)) (< (U_2_int |key#1@@12|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@12|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@12|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@12|)))))))) :qid |MutableM.923:16| :skolemid |2263| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@12|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@12|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@12|))) )))) (=> (and (forall ((|key#0@@75| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@75|) (< |key#0@@75| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@75|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@75|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@75|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@75|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@75|)))))))) :qid |MutableM.922:16| :skolemid |2262| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@75|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@75|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@75|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@75|)))) )) (forall ((|key#1@@13| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@13|) (< |key#1@@13| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#1@@13|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@13|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@13|)))))))) :qid |MutableM.923:16| :skolemid |2263| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@13|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@13|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#1@@13|)))) ))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|))))) :qid |unknown.0:0| :skolemid |2264| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 T@U) (|underlying#0@@2| T@U) (|contents#0@@27| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2) TyType) (= (type |underlying#0@@2|) DatatypeTypeType)) (= (type |contents#0@@27|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|)) (and ($Is |underlying#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2)) ($Is |contents#0@@27| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2))))) (and (and (forall ((|key#2| T@U) ) (!  (=> (= (type |key#2|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2|)) (< (U_2_int |key#2|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box |key#2|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)))))))) :qid |MutableM.922:16| :skolemid |2265| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box |key#2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) )) (=> (forall ((|key#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@0|) (< |key#2@@0| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@0|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@27|)) ($Box (int_2_U |key#2@@0|)))))))) :qid |MutableM.922:16| :skolemid |2267| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) )) (forall ((|key#3| T@U) ) (!  (=> (= (type |key#3|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3|)) (< (U_2_int |key#3|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#3|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))))))) :qid |MutableM.923:16| :skolemid |2266| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3|))) )))) (and (=> (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|)) (and (forall ((|key#2@@1| T@U) ) (!  (=> (= (type |key#2@@1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2@@1|)) (< (U_2_int |key#2@@1|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2@@1|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#2@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2@@1|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box |key#2@@1|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@27|)) ($Box |key#2@@1|)))))))) :qid |MutableM.922:16| :skolemid |2268| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box |key#2@@1|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2@@1|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2@@1|))) )) (forall ((|key#3@@0| T@U) ) (!  (=> (= (type |key#3@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3@@0|)) (< (U_2_int |key#3@@0|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3@@0|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#3@@0|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box |key#3@@0|)))))))) :qid |MutableM.923:16| :skolemid |2269| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3@@0|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3@@0|))) )))) (=> (and (forall ((|key#2@@2| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@2|) (< |key#2@@2| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@2|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@2|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@2|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@2|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@27|)) ($Box (int_2_U |key#2@@2|)))))))) :qid |MutableM.922:16| :skolemid |2268| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box (int_2_U |key#2@@2|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@2|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@2|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@2|)))) )) (forall ((|key#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#3@@1|) (< |key#3@@1| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#3@@1|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#3@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#3@@1|)))))))) :qid |MutableM.923:16| :skolemid |2269| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#3@@1|)))) ))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2270| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingInv$V T@U) (|self#0@@50| T@U) (|underlying#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V) TyType) (= (type |self#0@@50|) DatatypeTypeType)) (= (type |underlying#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V |self#0@@50| |underlying#0@@3|) (and ($Is |self#0@@50| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V)) ($Is |underlying#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V))))) true) :qid |unknown.0:0| :skolemid |2271| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V |self#0@@50| |underlying#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.UnderlyingInv$V@@0 T@U) (|self#0@@51| T@U) (|underlying#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@0) TyType) (= (type |self#0@@51|) DatatypeTypeType)) (= (type |underlying#0@@4|) DatatypeTypeType)) (and ($Is |self#0@@51| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@0)) ($Is |underlying#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@0)))) (and (=> (|MutableMapModel.__default.UnderlyingInv#requires| MutableMapModel._default.UnderlyingInv$V@@0 |self#0@@51| |underlying#0@@4|) true) (=> true (|MutableMapModel.__default.UnderlyingInv#requires| MutableMapModel._default.UnderlyingInv$V@@0 |self#0@@51| |underlying#0@@4|)))) :qid |unknown.0:0| :skolemid |2272| :pattern ( (|MutableMapModel.__default.UnderlyingInv#requires| MutableMapModel._default.UnderlyingInv$V@@0 |self#0@@51| |underlying#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingInv$V@@1 T@U) (|self#0@@52| T@U) (|underlying#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@1) TyType) (= (type |self#0@@52|) DatatypeTypeType)) (= (type |underlying#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|) (and ($Is |self#0@@52| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@1)) ($Is |underlying#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@1))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|)) (=> (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (MutableMapModel.LinearHashMap.count |self#0@@52|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|))) (=> (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@5|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.UnderlyingInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |underlying#0@@5|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|)))) (and (=> (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|) (and (and (and (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (MutableMapModel.LinearHashMap.count |self#0@@52|)) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@1 ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage |underlying#0@@5|)) (MutableMapModel.LinearHashMap.contents |self#0@@52|)))) (=> (and (and (and (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (MutableMapModel.LinearHashMap.count |self#0@@52|)) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@1 ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage |underlying#0@@5|)) (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|))))) :qid |unknown.0:0| :skolemid |2273| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.UnderlyingInv$V@@2 T@U) (|self#0@@53| T@U) (|underlying#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@2) TyType) (= (type |self#0@@53|) DatatypeTypeType)) (= (type |underlying#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|)) (and ($Is |self#0@@53| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@2)) ($Is |underlying#0@@6| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@2))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|))) (=> (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@53|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|)) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|)) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))))))) (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|)))) (=> (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|)))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@6|)) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|))))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|))))) (and (=> (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|)) (and (and (and (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@53|)))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@2 ($LS $LZ) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|)))) (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (=> (and (and (and (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@53|)))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@2 ($LS $LZ) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|)))) (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2274| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.Inv$V T@U) (|self#0@@54| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Inv$V) TyType) (= (type |self#0@@54|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V |self#0@@54|) ($Is |self#0@@54| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V)))) (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V |self#0@@54|)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@54|)) (MutableMapModel.LinearHashMap.count |self#0@@54|))) :qid |unknown.0:0| :skolemid |2275| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V |self#0@@54|)) ))))
(assert (forall ((MutableMapModel._default.Inv$V@@0 T@U) (|self#0@@55| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@0) TyType) (= (type |self#0@@55|) DatatypeTypeType)) ($Is |self#0@@55| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@0))) (and (=> (|MutableMapModel.__default.Inv#requires| MutableMapModel._default.Inv$V@@0 |self#0@@55|) true) (=> true (|MutableMapModel.__default.Inv#requires| MutableMapModel._default.Inv$V@@0 |self#0@@55|)))) :qid |unknown.0:0| :skolemid |2276| :pattern ( (|MutableMapModel.__default.Inv#requires| MutableMapModel._default.Inv$V@@0 |self#0@@55|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Inv$V@@1 T@U) (|self#0@@56| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@1) TyType) (= (type |self#0@@56|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V@@1 |self#0@@56|) ($Is |self#0@@56| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@1)))) true) :qid |unknown.0:0| :skolemid |2277| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@1 |self#0@@56|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Inv$V@@2 T@U) (|self#0@@57| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@2) TyType) (= (type |self#0@@57|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|)) ($Is |self#0@@57| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@2)))) true) :qid |unknown.0:0| :weight 3 :skolemid |2278| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|))) ))))
(assert (forall ((arg0@@339 T@U) (arg1@@191 T@U) (arg2@@132 Int) ) (! (= (type (MutableMapModel.__default.Constructor arg0@@339 arg1@@191 arg2@@132)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Constructor| :pattern ( (MutableMapModel.__default.Constructor arg0@@339 arg1@@191 arg2@@132)) )))
(assert (forall ((MutableMapModel._default.Constructor$V T@U) ($ly@@376 T@U) (|size#0@@3| Int) ) (!  (=> (and (= (type MutableMapModel._default.Constructor$V) TyType) (= (type $ly@@376) LayerTypeType)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V ($LS $ly@@376) |size#0@@3|) (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V $ly@@376 |size#0@@3|))) :qid |unknown.0:0| :skolemid |2279| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V ($LS $ly@@376) |size#0@@3|)) )))
(assert (forall ((MutableMapModel._default.Constructor$V@@0 T@U) ($ly@@377 T@U) (|size#0@@4| Int) ) (!  (=> (and (= (type MutableMapModel._default.Constructor$V@@0) TyType) (= (type $ly@@377) LayerTypeType)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 $ly@@377 |size#0@@4|) (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 $LZ |size#0@@4|))) :qid |unknown.0:0| :skolemid |2280| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 (AsFuelBottom $ly@@377) |size#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Constructor$V@@1 T@U) ($ly@@378 T@U) (|size#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@1) TyType) (= (type $ly@@378) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@1 |size#0@@5|) (and (and (<= (LitInt 0) |size#0@@5|) (< |size#0@@5| 18446744073709551616)) (<= (LitInt 128) |size#0@@5|)))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Constructor$V@@1 (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@378 |size#0@@5|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@378 |size#0@@5|)) (|Map#Empty| BoxType BoxType))) ($Is (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@378 |size#0@@5|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Constructor$V@@1)))) :qid |unknown.0:0| :skolemid |2281| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@378 |size#0@@5|)) ))))
(assert (forall ((MutableMapModel._default.Constructor$V@@2 T@U) ($ly@@379 T@U) (|size#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@2) TyType) (= (type $ly@@379) LayerTypeType)) (and (<= (LitInt 0) |size#0@@6|) (< |size#0@@6| 18446744073709551616))) (and (=> (|MutableMapModel.__default.Constructor#requires| MutableMapModel._default.Constructor$V@@2 $ly@@379 |size#0@@6|) (<= (LitInt 128) |size#0@@6|)) (=> (<= (LitInt 128) |size#0@@6|) (|MutableMapModel.__default.Constructor#requires| MutableMapModel._default.Constructor$V@@2 $ly@@379 |size#0@@6|)))) :qid |unknown.0:0| :skolemid |2282| :pattern ( (|MutableMapModel.__default.Constructor#requires| MutableMapModel._default.Constructor$V@@2 $ly@@379 |size#0@@6|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Constructor$V@@3 T@U) ($ly@@380 T@U) (|size#0@@7| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@3) TyType) (= (type $ly@@380) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (and (and (<= (LitInt 0) |size#0@@7|) (< |size#0@@7| 18446744073709551616)) (<= (LitInt 128) |size#0@@7|)))) (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@3 ($LS $ly@@380) |size#0@@7|) (let ((|self#0@@58| (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType))))) |self#0@@58|)))) :qid |unknown.0:0| :skolemid |2283| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@3 ($LS $ly@@380) |size#0@@7|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Constructor$V@@4 T@U) ($ly@@381 T@U) (|size#0@@8| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@4) TyType) (= (type $ly@@381) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|)) (and (and (<= (LitInt 0) |size#0@@8|) (< |size#0@@8| 18446744073709551616)) (<= (LitInt 128) (LitInt |size#0@@8|))))) (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@4 ($LS $ly@@381) (LitInt |size#0@@8|)) (let ((|self#1| (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) |self#1|)))) :qid |unknown.0:0| :weight 3 :skolemid |2284| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@4 ($LS $ly@@381) (LitInt |size#0@@8|))) ))))
(assert (forall ((arg0@@340 T@U) (arg1@@192 T@U) (arg2@@133 T@U) (arg3@@88 T@U) (arg4@@60 Int) ) (! (= (type (MutableMapModel.__default.ReallocIterate arg0@@340 arg1@@192 arg2@@133 arg3@@88 arg4@@60)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ReallocIterate| :pattern ( (MutableMapModel.__default.ReallocIterate arg0@@340 arg1@@192 arg2@@133 arg3@@88 arg4@@60)) )))
(assert (forall ((MutableMapModel._default.ReallocIterate$V T@U) ($ly@@382 T@U) (|self#0@@59| T@U) (|newUnderlying#0| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocIterate$V) TyType) (= (type $ly@@382) LayerTypeType)) (= (type |self#0@@59|) DatatypeTypeType)) (= (type |newUnderlying#0|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V ($LS $ly@@382) |self#0@@59| |newUnderlying#0| |i#0@@79|) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V $ly@@382 |self#0@@59| |newUnderlying#0| |i#0@@79|))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V ($LS $ly@@382) |self#0@@59| |newUnderlying#0| |i#0@@79|)) )))
(assert (forall ((MutableMapModel._default.ReallocIterate$V@@0 T@U) ($ly@@383 T@U) (|self#0@@60| T@U) (|newUnderlying#0@@0| T@U) (|i#0@@80| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@0) TyType) (= (type $ly@@383) LayerTypeType)) (= (type |self#0@@60|) DatatypeTypeType)) (= (type |newUnderlying#0@@0|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 $ly@@383 |self#0@@60| |newUnderlying#0@@0| |i#0@@80|) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 $LZ |self#0@@60| |newUnderlying#0@@0| |i#0@@80|))) :qid |unknown.0:0| :skolemid |2286| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 (AsFuelBottom $ly@@383) |self#0@@60| |newUnderlying#0@@0| |i#0@@80|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ReallocIterate$V@@1 T@U) ($ly@@384 T@U) (|self#0@@61| T@U) (|newUnderlying#0@@1| T@U) (|i#0@@81| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@1) TyType) (= (type $ly@@384) LayerTypeType)) (= (type |self#0@@61|) DatatypeTypeType)) (= (type |newUnderlying#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@1 |self#0@@61| |newUnderlying#0@@1| |i#0@@81|) (and (and (and ($Is |self#0@@61| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@1)) ($Is |newUnderlying#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@1))) (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| 18446744073709551616))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@1 |self#0@@61|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@1 |newUnderlying#0@@1|)) (and (<= (LitInt 0) |i#0@@81|) (<= |i#0@@81| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@61|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@61|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@1|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@1|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@61|))))))) ($Is (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@1 $ly@@384 |self#0@@61| |newUnderlying#0@@1| |i#0@@81|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@1))) :qid |unknown.0:0| :skolemid |2287| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@1 $ly@@384 |self#0@@61| |newUnderlying#0@@1| |i#0@@81|)) ))))
(assert (forall ((MutableMapModel._default.ReallocIterate$V@@2 T@U) ($ly@@385 T@U) (|self#0@@62| T@U) (|newUnderlying#0@@2| T@U) (|i#0@@82| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@2) TyType) (= (type $ly@@385) LayerTypeType)) (= (type |self#0@@62|) DatatypeTypeType)) (= (type |newUnderlying#0@@2|) DatatypeTypeType)) (and (and ($Is |self#0@@62| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@2)) ($Is |newUnderlying#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@2))) (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.ReallocIterate#requires| MutableMapModel._default.ReallocIterate$V@@2 $ly@@385 |self#0@@62| |newUnderlying#0@@2| |i#0@@82|) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@2 |self#0@@62|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@2 |newUnderlying#0@@2|)) (and (<= (LitInt 0) |i#0@@82|) (<= |i#0@@82| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@62|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@62|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@2|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@2|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@62|))))) (=> (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@2 |self#0@@62|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@2 |newUnderlying#0@@2|)) (and (<= (LitInt 0) |i#0@@82|) (<= |i#0@@82| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@62|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@62|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@2|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@2|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@62|)))) (|MutableMapModel.__default.ReallocIterate#requires| MutableMapModel._default.ReallocIterate$V@@2 $ly@@385 |self#0@@62| |newUnderlying#0@@2| |i#0@@82|)))) :qid |unknown.0:0| :skolemid |2288| :pattern ( (|MutableMapModel.__default.ReallocIterate#requires| MutableMapModel._default.ReallocIterate$V@@2 $ly@@385 |self#0@@62| |newUnderlying#0@@2| |i#0@@82|)) )))
(assert (= (type StartFuel_MutableMapModel._default.FixedSizeInsert) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.ReallocIterate$V@@3 T@U) ($ly@@386 T@U) (|self#0@@63| T@U) (|newUnderlying#0@@3| T@U) (|i#0@@83| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@3) TyType) (= (type $ly@@386) LayerTypeType)) (= (type |self#0@@63|) DatatypeTypeType)) (= (type |newUnderlying#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63| |newUnderlying#0@@3| |i#0@@83|) (and (and (and ($Is |self#0@@63| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@3)) ($Is |newUnderlying#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@3))) (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| 18446744073709551616))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@3 |newUnderlying#0@@3|)) (and (<= (LitInt 0) |i#0@@83|) (<= |i#0@@83| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@63|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@3|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@3|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@63|))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@63|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@63|))) (=> (not (= |i#0@@83| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@63|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@63|))) (let ((|item#0@@9| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)) |i#0@@83|)))) (and (=> (MutableMapModel.Item.Entry_q |item#0@@9|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@3 |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@9|) (MutableMapModel.Item.value |item#0@@9|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@9|) (MutableMapModel.Item.value |item#0@@9|))))) (let ((|newUnderlying'#0| (ite (MutableMapModel.Item.Entry_q |item#0@@9|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@9|) (MutableMapModel.Item.value |item#0@@9|)))) |newUnderlying#0@@3|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63| |newUnderlying'#0| (+ |i#0@@83| 1)))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 ($LS $ly@@386) |self#0@@63| |newUnderlying#0@@3| |i#0@@83|) (ite (= |i#0@@83| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)))) |newUnderlying#0@@3| (let ((|item#0@@10| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)) |i#0@@83|)))) (let ((|newUnderlying'#0@@0| (ite (MutableMapModel.Item.Entry_q |item#0@@10|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@10|) (MutableMapModel.Item.value |item#0@@10|)))) |newUnderlying#0@@3|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 $ly@@386 |self#0@@63| |newUnderlying'#0@@0| (+ |i#0@@83| 1)))))))) :qid |unknown.0:0| :skolemid |2289| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 ($LS $ly@@386) |self#0@@63| |newUnderlying#0@@3| |i#0@@83|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ReallocIterate$V@@4 T@U) ($ly@@387 T@U) (|self#0@@64| T@U) (|newUnderlying#0@@4| T@U) (|i#0@@84| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@4) TyType) (= (type $ly@@387) LayerTypeType)) (= (type |self#0@@64|) DatatypeTypeType)) (= (type |newUnderlying#0@@4|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@84|)) (and (and (and ($Is |self#0@@64| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@4)) ($Is |newUnderlying#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@4))) (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| 18446744073709551616))) (and (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@4 |newUnderlying#0@@4|)) (and (<= (LitInt 0) (LitInt |i#0@@84|)) (<= (LitInt |i#0@@84|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))))))) (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@64|)) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@4|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@4|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@64|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@64|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (=> (not (= (LitInt |i#0@@84|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@64|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (let ((|item#1@@5| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (LitInt |i#0@@84|))))) (and (=> (MutableMapModel.Item.Entry_q |item#1@@5|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@4 |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@5|) (MutableMapModel.Item.value |item#1@@5|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@5|) (MutableMapModel.Item.value |item#1@@5|))))) (let ((|newUnderlying'#1| (ite (MutableMapModel.Item.Entry_q |item#1@@5|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@5|) (MutableMapModel.Item.value |item#1@@5|)))) |newUnderlying#0@@4|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|) |newUnderlying'#1| (LitInt (+ |i#0@@84| 1))))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@387) (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@84|)) (ite (= (LitInt |i#0@@84|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))))) |newUnderlying#0@@4| (let ((|item#1@@6| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (LitInt |i#0@@84|))))) (let ((|newUnderlying'#1@@0| (ite (MutableMapModel.Item.Entry_q |item#1@@6|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@6|) (MutableMapModel.Item.value |item#1@@6|)))) |newUnderlying#0@@4|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@387) (Lit |self#0@@64|) |newUnderlying'#1@@0| (LitInt (+ |i#0@@84| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2290| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@387) (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@84|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.ReallocIterate$V@@5 T@U) ($ly@@388 T@U) (|self#0@@65| T@U) (|newUnderlying#0@@5| T@U) (|i#0@@85| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@5) TyType) (= (type $ly@@388) LayerTypeType)) (= (type |self#0@@65|) DatatypeTypeType)) (= (type |newUnderlying#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@85|)) (and (and (and ($Is |self#0@@65| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@5)) ($Is |newUnderlying#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@5))) (and (<= (LitInt 0) |i#0@@85|) (< |i#0@@85| 18446744073709551616))) (and (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@5 (Lit |newUnderlying#0@@5|)))))) (and (<= (LitInt 0) (LitInt |i#0@@85|)) (<= (LitInt |i#0@@85|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))))))) (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@65|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |newUnderlying#0@@5|)))) 1))) (|Set#Subset| (|Map#Domain| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |newUnderlying#0@@5|)))) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@65|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@65|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (=> (not (= (LitInt |i#0@@85|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@65|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (let ((|item#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (LitInt |i#0@@85|))))) (and (=> (MutableMapModel.Item.Entry_q |item#2|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|))))) (let ((|newUnderlying'#2| (ite (MutableMapModel.Item.Entry_q |item#2|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|)))) |newUnderlying#0@@5|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|) |newUnderlying'#2| (LitInt (+ |i#0@@85| 1))))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@388) (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@85|)) (ite (= (LitInt |i#0@@85|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))))) |newUnderlying#0@@5| (let ((|item#2@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (LitInt |i#0@@85|))))) (let ((|newUnderlying'#2@@0| (ite (MutableMapModel.Item.Entry_q |item#2@@0|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2@@0|) (MutableMapModel.Item.value |item#2@@0|)))) |newUnderlying#0@@5|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@388) (Lit |self#0@@65|) |newUnderlying'#2@@0| (LitInt (+ |i#0@@85| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2291| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@388) (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@85|))) ))))
(assert (forall ((arg0@@341 T@U) (arg1@@193 T@U) (arg2@@134 T@U) ) (! (= (type (MutableMapModel.__default.ReallocInternal arg0@@341 arg1@@193 arg2@@134)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ReallocInternal| :pattern ( (MutableMapModel.__default.ReallocInternal arg0@@341 arg1@@193 arg2@@134)) )))
(assert (forall ((MutableMapModel._default.ReallocInternal$V T@U) ($ly@@389 T@U) (|self#0@@66| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ReallocInternal$V) TyType) (= (type $ly@@389) LayerTypeType)) (= (type |self#0@@66|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V ($LS $ly@@389) |self#0@@66|) (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V $ly@@389 |self#0@@66|))) :qid |unknown.0:0| :skolemid |2292| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V ($LS $ly@@389) |self#0@@66|)) )))
(assert (forall ((MutableMapModel._default.ReallocInternal$V@@0 T@U) ($ly@@390 T@U) (|self#0@@67| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ReallocInternal$V@@0) TyType) (= (type $ly@@390) LayerTypeType)) (= (type |self#0@@67|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 $ly@@390 |self#0@@67|) (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 $LZ |self#0@@67|))) :qid |unknown.0:0| :skolemid |2293| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 (AsFuelBottom $ly@@390) |self#0@@67|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ReallocInternal$V@@1 T@U) ($ly@@391 T@U) (|self#0@@68| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@1) TyType) (= (type $ly@@391) LayerTypeType)) (= (type |self#0@@68|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@1 |self#0@@68|) (and ($Is |self#0@@68| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@1)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@68|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@1 |self#0@@68|))))) ($Is (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@1 $ly@@391 |self#0@@68|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@1))) :qid |unknown.0:0| :skolemid |2294| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@1 $ly@@391 |self#0@@68|)) ))))
(assert (forall ((MutableMapModel._default.ReallocInternal$V@@2 T@U) ($ly@@392 T@U) (|self#0@@69| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@2) TyType) (= (type $ly@@392) LayerTypeType)) (= (type |self#0@@69|) DatatypeTypeType)) ($Is |self#0@@69| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@2))) (and (=> (|MutableMapModel.__default.ReallocInternal#requires| MutableMapModel._default.ReallocInternal$V@@2 $ly@@392 |self#0@@69|) (and (< (MutableMapModel.LinearHashMap.count |self#0@@69|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@2 |self#0@@69|))) (=> (and (< (MutableMapModel.LinearHashMap.count |self#0@@69|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@2 |self#0@@69|)) (|MutableMapModel.__default.ReallocInternal#requires| MutableMapModel._default.ReallocInternal$V@@2 $ly@@392 |self#0@@69|)))) :qid |unknown.0:0| :skolemid |2295| :pattern ( (|MutableMapModel.__default.ReallocInternal#requires| MutableMapModel._default.ReallocInternal$V@@2 $ly@@392 |self#0@@69|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ReallocInternal$V@@3 T@U) ($ly@@393 T@U) (|self#0@@70| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@3) TyType) (= (type $ly@@393) LayerTypeType)) (= (type |self#0@@70|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70|) (and ($Is |self#0@@70| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@3)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@70|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@70|) (let ((|newSize#0| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@70|)) (LitInt 4)))) (and (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ReallocInternal$V@@3 |newSize#0|) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@3 |newSize#0|) (LitInt 0))) (let ((|dt_update_tmp#0#0@@0| |self#0@@70|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@0|)))))) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@3 ($LS $ly@@393) |self#0@@70|) (let ((|newSize#0@@0| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@70|)) (LitInt 4)))) (let ((|newUnderlying#0@@6| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocInternal$V@@3 ($LS $LZ) |self#0@@70| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@3 |newSize#0@@0|) (LitInt 0)))) (let ((|dt_update_tmp#0#0@@1| |self#0@@70|)) (let ((|dt_update#underlying#0#0| |newUnderlying#0@@6|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@1|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@1|))))))))) :qid |unknown.0:0| :skolemid |2296| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@3 ($LS $ly@@393) |self#0@@70|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ReallocInternal$V@@4 T@U) ($ly@@394 T@U) (|self#0@@71| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@4) TyType) (= (type $ly@@394) LayerTypeType)) (= (type |self#0@@71|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|)) (and ($Is |self#0@@71| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@4)) (and (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)) (Div 18446744073709551616 (LitInt 8)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|))))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@71|)) (let ((|newSize#1| (LitInt (Mul (LitInt (+ 128 (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)))) (LitInt 4))))) (and (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ReallocInternal$V@@4 |newSize#1|) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|) (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@4 |newSize#1|) (LitInt 0))) (let ((|dt_update_tmp#0#1@@0| (Lit |self#0@@71|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@0|)))))) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@4 ($LS $ly@@394) (Lit |self#0@@71|)) (let ((|newSize#1@@0| (LitInt (Mul (LitInt (+ 128 (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)))) (LitInt 4))))) (let ((|newUnderlying#1| (Lit (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocInternal$V@@4 ($LS $LZ) (Lit |self#0@@71|) (Lit (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@4 |newSize#1@@0|)) (LitInt 0))))) (let ((|dt_update_tmp#0#1@@1| (Lit |self#0@@71|))) (let ((|dt_update#underlying#0#1| |newUnderlying#1|)) (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@1|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@1|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2297| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@4 ($LS $ly@@394) (Lit |self#0@@71|))) ))))
(assert (forall ((arg0@@342 T@U) (arg1@@194 T@U) ) (! (= (type (MutableMapModel.__default.Realloc arg0@@342 arg1@@194)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Realloc| :pattern ( (MutableMapModel.__default.Realloc arg0@@342 arg1@@194)) )))
(assert  (=> true (forall ((MutableMapModel._default.Realloc$V T@U) (|self#0@@72| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V) TyType) (= (type |self#0@@72|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V |self#0@@72|) (and ($Is |self#0@@72| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@72|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V |self#0@@72|))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) (MutableMapModel.LinearHashMap.contents |self#0@@72|))) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|))) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)))) 2))) ($Is (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V)))) :qid |unknown.0:0| :skolemid |2298| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) ))))
(assert (forall ((MutableMapModel._default.Realloc$V@@0 T@U) (|self#0@@73| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@0) TyType) (= (type |self#0@@73|) DatatypeTypeType)) ($Is |self#0@@73| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@0))) (and (=> (|MutableMapModel.__default.Realloc#requires| MutableMapModel._default.Realloc$V@@0 |self#0@@73|) (and (< (MutableMapModel.LinearHashMap.count |self#0@@73|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@0 |self#0@@73|))) (=> (and (< (MutableMapModel.LinearHashMap.count |self#0@@73|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@0 |self#0@@73|)) (|MutableMapModel.__default.Realloc#requires| MutableMapModel._default.Realloc$V@@0 |self#0@@73|)))) :qid |unknown.0:0| :skolemid |2299| :pattern ( (|MutableMapModel.__default.Realloc#requires| MutableMapModel._default.Realloc$V@@0 |self#0@@73|)) )))
(assert (= (type StartFuel_MutableMapModel._default.ReallocInternal) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.Realloc$V@@1 T@U) (|self#0@@74| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@1) TyType) (= (type |self#0@@74|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (and ($Is |self#0@@74| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@1)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@74|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@1 |self#0@@74|))))) (and (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (= (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (let ((|self'#0@@0| (MutableMapModel.__default.ReallocInternal MutableMapModel._default.Realloc$V@@1 StartFuel_MutableMapModel._default.ReallocInternal |self#0@@74|))) |self'#0@@0|)))) :qid |unknown.0:0| :skolemid |2300| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@1 |self#0@@74|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Realloc$V@@2 T@U) (|self#0@@75| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@2) TyType) (= (type |self#0@@75|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (and ($Is |self#0@@75| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@2)) (and (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@75|)) (Div 18446744073709551616 (LitInt 8)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|))))))))) (and (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (= (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (let ((|self'#1@@0| (MutableMapModel.__default.ReallocInternal MutableMapModel._default.Realloc$V@@2 StartFuel_MutableMapModel._default.ReallocInternal (Lit |self#0@@75|)))) |self'#1@@0|)))) :qid |unknown.0:0| :weight 3 :skolemid |2301| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|))) ))))
(assert (forall ((arg0@@343 T@U) (arg1@@195 T@U) (arg2@@135 T@U) (arg3@@89 Int) (arg4@@61 T@U) ) (! (= (type (MutableMapModel.__default.InsertAndGetOld arg0@@343 arg1@@195 arg2@@135 arg3@@89 arg4@@61)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.InsertAndGetOld| :pattern ( (MutableMapModel.__default.InsertAndGetOld arg0@@343 arg1@@195 arg2@@135 arg3@@89 arg4@@61)) )))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V T@U) ($ly@@395 T@U) (|self#0@@76| T@U) (|key#0@@76| Int) (|value#0@@11| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V) TyType) (= (type $ly@@395) LayerTypeType)) (= (type |self#0@@76|) DatatypeTypeType)) (= (type |value#0@@11|) BoxType)) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V ($LS $ly@@395) |self#0@@76| |key#0@@76| |value#0@@11|) (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V $ly@@395 |self#0@@76| |key#0@@76| |value#0@@11|))) :qid |unknown.0:0| :skolemid |2302| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V ($LS $ly@@395) |self#0@@76| |key#0@@76| |value#0@@11|)) )))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V@@0 T@U) ($ly@@396 T@U) (|self#0@@77| T@U) (|key#0@@77| Int) (|value#0@@12| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@0) TyType) (= (type $ly@@396) LayerTypeType)) (= (type |self#0@@77|) DatatypeTypeType)) (= (type |value#0@@12|) BoxType)) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 $ly@@396 |self#0@@77| |key#0@@77| |value#0@@12|) (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 $LZ |self#0@@77| |key#0@@77| |value#0@@12|))) :qid |unknown.0:0| :skolemid |2303| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 (AsFuelBottom $ly@@396) |self#0@@77| |key#0@@77| |value#0@@12|)) )))
(assert  (=> true (forall ((MutableMapModel._default.InsertAndGetOld$V@@1 T@U) ($ly@@397 T@U) (|self#0@@78| T@U) (|key#0@@78| Int) (|value#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@1) TyType) (= (type $ly@@397) LayerTypeType)) (= (type |self#0@@78|) DatatypeTypeType)) (= (type |value#0@@13|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@1 |self#0@@78| |key#0@@78| |value#0@@13|) (and (and (and ($Is |self#0@@78| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@1)) (and (<= (LitInt 0) |key#0@@78|) (< |key#0@@78| 18446744073709551616))) ($IsBox |value#0@@13| MutableMapModel._default.InsertAndGetOld$V@@1)) (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@1 |self#0@@78|) (< (MutableMapModel.LinearHashMap.count |self#0@@78|) (Div 18446744073709551616 (LitInt 8))))))) (and (let ((|replaced#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@397 |self#0@@78| |key#0@@78| |value#0@@13|))))) (let ((|self'#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@397 |self#0@@78| |key#0@@78| |value#0@@13|))))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@1 |self'#0@@1|) (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0@@1|) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@78|) ($Box (int_2_U |key#0@@78|)) |value#0@@13|))) (= (MutableMapModel.LinearHashMap.count |self'#0@@1|) (+ (MutableMapModel.LinearHashMap.count |self#0@@78|) (ite (Options.Option.Some_q |replaced#0@@0|) 0 1)))) (=> (Options.Option.Some_q |replaced#0@@0|) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.InsertAndGetOld$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@78|) ($Box (int_2_U |key#0@@78|)) (Options.Option.value |replaced#0@@0|)))) (=> (Options.Option.None_q |replaced#0@@0|) (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@78|)) ($Box (int_2_U |key#0@@78|))))))))) ($Is (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@397 |self#0@@78| |key#0@@78| |value#0@@13|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@1) (Tclass.Options.Option MutableMapModel._default.InsertAndGetOld$V@@1))))) :qid |unknown.0:0| :skolemid |2304| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@397 |self#0@@78| |key#0@@78| |value#0@@13|)) ))))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V@@2 T@U) ($ly@@398 T@U) (|self#0@@79| T@U) (|key#0@@79| Int) (|value#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@2) TyType) (= (type $ly@@398) LayerTypeType)) (= (type |self#0@@79|) DatatypeTypeType)) (= (type |value#0@@14|) BoxType)) (and (and ($Is |self#0@@79| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@2)) (and (<= (LitInt 0) |key#0@@79|) (< |key#0@@79| 18446744073709551616))) ($IsBox |value#0@@14| MutableMapModel._default.InsertAndGetOld$V@@2))) (and (=> (|MutableMapModel.__default.InsertAndGetOld#requires| MutableMapModel._default.InsertAndGetOld$V@@2 $ly@@398 |self#0@@79| |key#0@@79| |value#0@@14|) (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@2 |self#0@@79|) (< (MutableMapModel.LinearHashMap.count |self#0@@79|) (Div 18446744073709551616 (LitInt 8))))) (=> (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@2 |self#0@@79|) (< (MutableMapModel.LinearHashMap.count |self#0@@79|) (Div 18446744073709551616 (LitInt 8)))) (|MutableMapModel.__default.InsertAndGetOld#requires| MutableMapModel._default.InsertAndGetOld$V@@2 $ly@@398 |self#0@@79| |key#0@@79| |value#0@@14|)))) :qid |unknown.0:0| :skolemid |2305| :pattern ( (|MutableMapModel.__default.InsertAndGetOld#requires| MutableMapModel._default.InsertAndGetOld$V@@2 $ly@@398 |self#0@@79| |key#0@@79| |value#0@@14|)) )))
(assert  (=> true (forall ((MutableMapModel._default.InsertAndGetOld$V@@3 T@U) ($ly@@399 T@U) (|self#0@@80| T@U) (|key#0@@80| Int) (|value#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@3) TyType) (= (type $ly@@399) LayerTypeType)) (= (type |self#0@@80|) DatatypeTypeType)) (= (type |value#0@@15|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80| |key#0@@80| |value#0@@15|) (and (and (and ($Is |self#0@@80| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@3)) (and (<= (LitInt 0) |key#0@@80|) (< |key#0@@80| 18446744073709551616))) ($IsBox |value#0@@15| MutableMapModel._default.InsertAndGetOld$V@@3)) (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) (< (MutableMapModel.LinearHashMap.count |self#0@@80|) (Div 18446744073709551616 (LitInt 8))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@80|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@80|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@80|)))) (=> (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|))) (let ((|self1#0| (ite (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) |self#0@@80|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@80| |value#0@@15|)) (let ((|replaced#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@80| |value#0@@15|))))) (let ((|underlying'#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@80| |value#0@@15|))))) (and (and (let ((|dt_update_tmp#0#0@@2| |self1#0|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@2|))) (let ((|dt_update_tmp#1#0| (let ((|dt_update_tmp#0#0@@3| |self1#0|)) (let ((|dt_update#underlying#0#0@@0| |underlying'#0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@3|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0|))))) (let ((|dt_update_tmp#2#0| (let ((|dt_update_tmp#1#0@@0| (let ((|dt_update_tmp#0#0@@4| |self1#0|)) (let ((|dt_update#underlying#0#0@@1| |underlying'#0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@4|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@4|)))))) (let ((|dt_update#contents#0#0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#0|) ($Box (int_2_U |key#0@@80|)) |value#0@@15|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@0|) |dt_update#contents#0#0|))))) (and (and (=> (Options.Option.None_q |replaced#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|)) (=> (not (Options.Option.None_q |replaced#1@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@3 ($LS $ly@@399) |self#0@@80| |key#0@@80| |value#0@@15|) (let ((|self1#0@@0| (ite (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) |self#0@@80|))) (let ((|replaced#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0@@0|) |key#0@@80| |value#0@@15|))))) (let ((|underlying'#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0@@0|) |key#0@@80| |value#0@@15|))))) (let ((|self'#1@@1| (let ((|dt_update_tmp#2#0@@0| (let ((|dt_update_tmp#1#0@@1| (let ((|dt_update_tmp#0#0@@5| |self1#0@@0|)) (let ((|dt_update#underlying#0#0@@2| |underlying'#0@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@5|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@5|)))))) (let ((|dt_update#contents#0#0@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#0@@0|) ($Box (int_2_U |key#0@@80|)) |value#0@@15|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@1|) |dt_update#contents#0#0@@0|))))) (let ((|dt_update#count#0#0| (ite (Options.Option.None_q |replaced#1@@1|) (+ (MutableMapModel.LinearHashMap.count |self1#0@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#0@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#0@@0|) |dt_update#count#0#0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#0@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@1|) ($Box |replaced#1@@1|))))))))) :qid |unknown.0:0| :skolemid |2306| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@3 ($LS $ly@@399) |self#0@@80| |key#0@@80| |value#0@@15|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.InsertAndGetOld$V@@4 T@U) ($ly@@400 T@U) (|self#0@@81| T@U) (|key#0@@81| Int) (|value#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@4) TyType) (= (type $ly@@400) LayerTypeType)) (= (type |self#0@@81|) DatatypeTypeType)) (= (type |value#0@@16|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|) (LitInt |key#0@@81|) |value#0@@16|) (and (and (and ($Is |self#0@@81| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@4)) (and (<= (LitInt 0) |key#0@@81|) (< |key#0@@81| 18446744073709551616))) ($IsBox |value#0@@16| MutableMapModel._default.InsertAndGetOld$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@81|)) (Div 18446744073709551616 (LitInt 8)))))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@81|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@81|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (=> (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)))) (let ((|self1#1| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)) |self#0@@81|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@81|) |value#0@@16|)) (let ((|replaced#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@81|) |value#0@@16|))))) (let ((|underlying'#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@81|) |value#0@@16|))))) (and (and (let ((|dt_update_tmp#0#1@@2| |self1#1|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@2|))) (let ((|dt_update_tmp#1#1| (let ((|dt_update_tmp#0#1@@3| |self1#1|)) (let ((|dt_update#underlying#0#1@@0| |underlying'#1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@3|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1|))))) (let ((|dt_update_tmp#2#1| (let ((|dt_update_tmp#1#1@@0| (let ((|dt_update_tmp#0#1@@4| |self1#1|)) (let ((|dt_update#underlying#0#1@@1| |underlying'#1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@4|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@4|)))))) (let ((|dt_update#contents#0#1| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#1|) ($Box (int_2_U (LitInt |key#0@@81|))) |value#0@@16|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@0|) |dt_update#contents#0#1|))))) (and (and (=> (Options.Option.None_q |replaced#2@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|)) (=> (not (Options.Option.None_q |replaced#2@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@4 ($LS $ly@@400) (Lit |self#0@@81|) (LitInt |key#0@@81|) |value#0@@16|) (let ((|self1#1@@0| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)) |self#0@@81|))) (let ((|replaced#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1@@0|) (LitInt |key#0@@81|) |value#0@@16|))))) (let ((|underlying'#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1@@0|) (LitInt |key#0@@81|) |value#0@@16|))))) (let ((|self'#2| (let ((|dt_update_tmp#2#1@@0| (let ((|dt_update_tmp#1#1@@1| (let ((|dt_update_tmp#0#1@@5| |self1#1@@0|)) (let ((|dt_update#underlying#0#1@@2| |underlying'#1@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@5|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@5|)))))) (let ((|dt_update#contents#0#1@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#1@@0|) ($Box (int_2_U (LitInt |key#0@@81|))) |value#0@@16|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@1|) |dt_update#contents#0#1@@0|))))) (let ((|dt_update#count#0#1| (ite (Options.Option.None_q |replaced#2@@1|) (+ (MutableMapModel.LinearHashMap.count |self1#1@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#1@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#1@@0|) |dt_update#count#0#1| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#1@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#2|) ($Box |replaced#2@@1|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2307| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@4 ($LS $ly@@400) (Lit |self#0@@81|) (LitInt |key#0@@81|) |value#0@@16|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.InsertAndGetOld$V@@5 T@U) ($ly@@401 T@U) (|self#0@@82| T@U) (|key#0@@82| Int) (|value#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@5) TyType) (= (type $ly@@401) LayerTypeType)) (= (type |self#0@@82|) DatatypeTypeType)) (= (type |value#0@@17|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|) (LitInt |key#0@@82|) (Lit |value#0@@17|)) (and (and (and ($Is |self#0@@82| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@5)) (and (<= (LitInt 0) |key#0@@82|) (< |key#0@@82| 18446744073709551616))) ($IsBox |value#0@@17| MutableMapModel._default.InsertAndGetOld$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@82|)) (Div 18446744073709551616 (LitInt 8)))))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@82|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@82|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (=> (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)))) (let ((|self1#2| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)) |self#0@@82|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@82|) (Lit |value#0@@17|))) (let ((|replaced#3| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@82|) (Lit |value#0@@17|)))))) (let ((|underlying'#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@82|) (Lit |value#0@@17|)))))) (and (and (let ((|dt_update_tmp#0#2@@0| |self1#2|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#2@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#2@@0|))) (let ((|dt_update_tmp#1#2| (let ((|dt_update_tmp#0#2@@1| |self1#2|)) (let ((|dt_update#underlying#0#2| |underlying'#2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@1|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@1|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#2|))))) (let ((|dt_update_tmp#2#2| (let ((|dt_update_tmp#1#2@@0| (let ((|dt_update_tmp#0#2@@2| |self1#2|)) (let ((|dt_update#underlying#0#2@@0| |underlying'#2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@2|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@2|)))))) (let ((|dt_update#contents#0#2| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#2|) ($Box (int_2_U (LitInt |key#0@@82|))) (Lit |value#0@@17|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#2@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#2@@0|) |dt_update#contents#0#2|))))) (and (and (=> (Options.Option.None_q |replaced#3|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|)) (=> (not (Options.Option.None_q |replaced#3|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#2|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@5 ($LS $ly@@401) (Lit |self#0@@82|) (LitInt |key#0@@82|) (Lit |value#0@@17|)) (let ((|self1#2@@0| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)) |self#0@@82|))) (let ((|replaced#3@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2@@0|) (LitInt |key#0@@82|) (Lit |value#0@@17|)))))) (let ((|underlying'#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2@@0|) (LitInt |key#0@@82|) (Lit |value#0@@17|)))))) (let ((|self'#3| (let ((|dt_update_tmp#2#2@@0| (let ((|dt_update_tmp#1#2@@1| (let ((|dt_update_tmp#0#2@@3| |self1#2@@0|)) (let ((|dt_update#underlying#0#2@@1| |underlying'#2@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@3|)))))) (let ((|dt_update#contents#0#2@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#2@@0|) ($Box (int_2_U (LitInt |key#0@@82|))) (Lit |value#0@@17|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#2@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#2@@1|) |dt_update#contents#0#2@@0|))))) (let ((|dt_update#count#0#2| (ite (Options.Option.None_q |replaced#3@@0|) (+ (MutableMapModel.LinearHashMap.count |self1#2@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#2@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#2@@0|) |dt_update#count#0#2| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#2@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#3|) ($Box |replaced#3@@0|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2308| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@5 ($LS $ly@@401) (Lit |self#0@@82|) (LitInt |key#0@@82|) (Lit |value#0@@17|))) ))))
(assert (forall ((arg0@@344 T@U) (arg1@@196 T@U) (arg2@@136 T@U) (arg3@@90 Int) (arg4@@62 T@U) ) (! (= (type (MutableMapModel.__default.Insert arg0@@344 arg1@@196 arg2@@136 arg3@@90 arg4@@62)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Insert| :pattern ( (MutableMapModel.__default.Insert arg0@@344 arg1@@196 arg2@@136 arg3@@90 arg4@@62)) )))
(assert (forall ((MutableMapModel._default.Insert$V T@U) ($ly@@402 T@U) (|self#0@@83| T@U) (|key#0@@83| Int) (|value#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Insert$V) TyType) (= (type $ly@@402) LayerTypeType)) (= (type |self#0@@83|) DatatypeTypeType)) (= (type |value#0@@18|) BoxType)) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V ($LS $ly@@402) |self#0@@83| |key#0@@83| |value#0@@18|) (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V $ly@@402 |self#0@@83| |key#0@@83| |value#0@@18|))) :qid |unknown.0:0| :skolemid |2309| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V ($LS $ly@@402) |self#0@@83| |key#0@@83| |value#0@@18|)) )))
(assert (forall ((MutableMapModel._default.Insert$V@@0 T@U) ($ly@@403 T@U) (|self#0@@84| T@U) (|key#0@@84| Int) (|value#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Insert$V@@0) TyType) (= (type $ly@@403) LayerTypeType)) (= (type |self#0@@84|) DatatypeTypeType)) (= (type |value#0@@19|) BoxType)) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 $ly@@403 |self#0@@84| |key#0@@84| |value#0@@19|) (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 $LZ |self#0@@84| |key#0@@84| |value#0@@19|))) :qid |unknown.0:0| :skolemid |2310| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 (AsFuelBottom $ly@@403) |self#0@@84| |key#0@@84| |value#0@@19|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Insert$V@@1 T@U) ($ly@@404 T@U) (|self#0@@85| T@U) (|key#0@@85| Int) (|value#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@1) TyType) (= (type $ly@@404) LayerTypeType)) (= (type |self#0@@85|) DatatypeTypeType)) (= (type |value#0@@20|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@1 |self#0@@85| |key#0@@85| |value#0@@20|) (and (and (and ($Is |self#0@@85| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@1)) (and (<= (LitInt 0) |key#0@@85|) (< |key#0@@85| 18446744073709551616))) ($IsBox |value#0@@20| MutableMapModel._default.Insert$V@@1)) (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@1 |self#0@@85|) (< (MutableMapModel.LinearHashMap.count |self#0@@85|) (Div 18446744073709551616 (LitInt 8))))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@1 (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|)) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@85|) ($Box (int_2_U |key#0@@85|)) |value#0@@20|))) (or (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|)) (MutableMapModel.LinearHashMap.count |self#0@@85|)) (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|)) (+ (MutableMapModel.LinearHashMap.count |self#0@@85|) 1)))) ($Is (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@1)))) :qid |unknown.0:0| :skolemid |2311| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@404 |self#0@@85| |key#0@@85| |value#0@@20|)) ))))
(assert (forall ((MutableMapModel._default.Insert$V@@2 T@U) ($ly@@405 T@U) (|self#0@@86| T@U) (|key#0@@86| Int) (|value#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@2) TyType) (= (type $ly@@405) LayerTypeType)) (= (type |self#0@@86|) DatatypeTypeType)) (= (type |value#0@@21|) BoxType)) (and (and ($Is |self#0@@86| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@2)) (and (<= (LitInt 0) |key#0@@86|) (< |key#0@@86| 18446744073709551616))) ($IsBox |value#0@@21| MutableMapModel._default.Insert$V@@2))) (and (=> (|MutableMapModel.__default.Insert#requires| MutableMapModel._default.Insert$V@@2 $ly@@405 |self#0@@86| |key#0@@86| |value#0@@21|) (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@2 |self#0@@86|) (< (MutableMapModel.LinearHashMap.count |self#0@@86|) (Div 18446744073709551616 (LitInt 8))))) (=> (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@2 |self#0@@86|) (< (MutableMapModel.LinearHashMap.count |self#0@@86|) (Div 18446744073709551616 (LitInt 8)))) (|MutableMapModel.__default.Insert#requires| MutableMapModel._default.Insert$V@@2 $ly@@405 |self#0@@86| |key#0@@86| |value#0@@21|)))) :qid |unknown.0:0| :skolemid |2312| :pattern ( (|MutableMapModel.__default.Insert#requires| MutableMapModel._default.Insert$V@@2 $ly@@405 |self#0@@86| |key#0@@86| |value#0@@21|)) )))
(assert (= (type StartFuel_MutableMapModel._default.InsertAndGetOld) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.Insert$V@@3 T@U) ($ly@@406 T@U) (|self#0@@87| T@U) (|key#0@@87| Int) (|value#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@3) TyType) (= (type $ly@@406) LayerTypeType)) (= (type |self#0@@87|) DatatypeTypeType)) (= (type |value#0@@22|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@3 |self#0@@87| |key#0@@87| |value#0@@22|) (and (and (and ($Is |self#0@@87| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@3)) (and (<= (LitInt 0) |key#0@@87|) (< |key#0@@87| 18446744073709551616))) ($IsBox |value#0@@22| MutableMapModel._default.Insert$V@@3)) (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@3 |self#0@@87|) (< (MutableMapModel.LinearHashMap.count |self#0@@87|) (Div 18446744073709551616 (LitInt 8))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@3 |self#0@@87| |key#0@@87| |value#0@@22|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@3 StartFuel_MutableMapModel._default.InsertAndGetOld |self#0@@87| |key#0@@87| |value#0@@22|))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@3 ($LS $ly@@406) |self#0@@87| |key#0@@87| |value#0@@22|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@3 StartFuel_MutableMapModel._default.InsertAndGetOld |self#0@@87| |key#0@@87| |value#0@@22|)))))) :qid |unknown.0:0| :skolemid |2313| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@3 ($LS $ly@@406) |self#0@@87| |key#0@@87| |value#0@@22|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Insert$V@@4 T@U) ($ly@@407 T@U) (|self#0@@88| T@U) (|key#0@@88| Int) (|value#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@4) TyType) (= (type $ly@@407) LayerTypeType)) (= (type |self#0@@88|) DatatypeTypeType)) (= (type |value#0@@23|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|) (and (and (and ($Is |self#0@@88| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@4)) (and (<= (LitInt 0) |key#0@@88|) (< |key#0@@88| 18446744073709551616))) ($IsBox |value#0@@23| MutableMapModel._default.Insert$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@88|)) (Div 18446744073709551616 (LitInt 8)))))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@4 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@4 ($LS $ly@@407) (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@4 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2314| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@4 ($LS $ly@@407) (Lit |self#0@@88|) (LitInt |key#0@@88|) |value#0@@23|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Insert$V@@5 T@U) ($ly@@408 T@U) (|self#0@@89| T@U) (|key#0@@89| Int) (|value#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@5) TyType) (= (type $ly@@408) LayerTypeType)) (= (type |self#0@@89|) DatatypeTypeType)) (= (type |value#0@@24|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|)) (and (and (and ($Is |self#0@@89| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@5)) (and (<= (LitInt 0) |key#0@@89|) (< |key#0@@89| 18446744073709551616))) ($IsBox |value#0@@24| MutableMapModel._default.Insert$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@89|)) (Div 18446744073709551616 (LitInt 8)))))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@5 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|)))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@5 ($LS $ly@@408) (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|)) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@5 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2315| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@5 ($LS $ly@@408) (Lit |self#0@@89|) (LitInt |key#0@@89|) (Lit |value#0@@24|))) ))))
(assert  (and (forall ((arg0@@345 T@U) (arg1@@197 T@U) (arg2@@137 Int) ) (! (= (type (MutableMapModel.__default.RemoveInternal arg0@@345 arg1@@197 arg2@@137)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.RemoveInternal| :pattern ( (MutableMapModel.__default.RemoveInternal arg0@@345 arg1@@197 arg2@@137)) )) (= (type StartFuel_MutableMapModel._default.FixedSizeRemove) LayerTypeType)))
(assert  (=> true (forall ((MutableMapModel._default.RemoveInternal$V T@U) (|self#0@@90| T@U) (|key#0@@90| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V) TyType) (= (type |self#0@@90|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@90|) (and (and ($Is |self#0@@90| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V)) (and (<= (LitInt 0) |key#0@@90|) (< |key#0@@90| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V |self#0@@90|)))) (and (let ((|removed#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@90|))))) (let ((|self'#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@90|))))) (and (and (and (and (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| ($Box (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) ($Box |removed#0@@0|)) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@90|) |key#0@@90|)) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.RemoveInternal$V (MutableMapModel.LinearHashMap.underlying |self'#0@@2|))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@90|)))) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|)) ($Box (int_2_U |key#0@@90|)) ($Box (Lit |#Options.Option.None|))) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))))) (|Options.Option#Equal| |removed#0@@0| (ite  (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@90|)))) (Options.Option.Some_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@90|)))))) (|#Options.Option.Some| (Options.Option.value ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@90|)))))) |#Options.Option.None|))) (= (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@90|)))))) ($Is (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@90|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V) (Tclass.Options.Option MutableMapModel._default.RemoveInternal$V))))) :qid |unknown.0:0| :skolemid |2316| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@90|)) ))))
(assert (forall ((MutableMapModel._default.RemoveInternal$V@@0 T@U) (|self#0@@91| T@U) (|key#0@@91| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@0) TyType) (= (type |self#0@@91|) DatatypeTypeType)) (and ($Is |self#0@@91| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@0)) (and (<= (LitInt 0) |key#0@@91|) (< |key#0@@91| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.RemoveInternal#requires| MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91| |key#0@@91|) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91|) (|MutableMapModel.__default.RemoveInternal#requires| MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91| |key#0@@91|)))) :qid |unknown.0:0| :skolemid |2317| :pattern ( (|MutableMapModel.__default.RemoveInternal#requires| MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91| |key#0@@91|)) )))
(assert (forall ((arg0@@346 Int) (arg1@@198 Int) (arg2@@138 T@U) (arg3@@91 Int) ) (! (= (type (|lambda#89| arg0@@346 arg1@@198 arg2@@138 arg3@@91)) (MapType0Type BoxType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@346 arg1@@198 arg2@@138 arg3@@91)) )))
(assert  (=> true (forall ((MutableMapModel._default.RemoveInternal$V@@1 T@U) (|self#0@@92| T@U) (|key#0@@92| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@1) TyType) (= (type |self#0@@92|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@92|) (and (and ($Is |self#0@@92| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@1)) (and (<= (LitInt 0) |key#0@@92|) (< |key#0@@92| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92|)))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|) (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.RemoveInternal$V@@1 (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@92|)) (let ((|removed#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@92|))))) (let ((|underlying'#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@92|))))) (and (and (let ((|dt_update_tmp#0#0@@6| |self#0@@92|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@6|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@6|))) (let ((|dt_update_tmp#1#0@@2| (let ((|dt_update_tmp#0#0@@7| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@3| |underlying'#0@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@3| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@7|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@7|)))))) (and (forall ((|k#0@@58| T@U) ) (!  (=> (= (type |k#0@@58|) intType) (=> (and (<= (LitInt 0) (U_2_int |k#0@@58|)) (< (U_2_int |k#0@@58|) 18446744073709551616)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@58|))) (not (= (U_2_int |k#0@@58|) |key#0@@92|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|))))) :qid |MutableM.1313:25| :skolemid |2318| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@58|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@58|))) )) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0@@2|))))) (let ((|dt_update_tmp#2#0@@1| (let ((|dt_update_tmp#1#0@@3| (let ((|dt_update_tmp#0#0@@8| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@4| |underlying'#0@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@4| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@8|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@8|)))))) (let ((|dt_update#contents#0#0@@1| (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) |key#0@@92|) (|lambda#28| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@1)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@3|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@3|) |dt_update#contents#0#0@@1|))))) (and (and (=> (Options.Option.Some_q |removed#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|)) (=> (not (Options.Option.Some_q |removed#1@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0@@1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0@@1|)))))))) (= (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@92|) (let ((|removed#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@92|))))) (let ((|underlying'#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@92|))))) (let ((|self'#1@@2| (let ((|dt_update_tmp#2#0@@2| (let ((|dt_update_tmp#1#0@@4| (let ((|dt_update_tmp#0#0@@9| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@5| |underlying'#0@@2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@5| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@9|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@9|)))))) (let ((|dt_update#contents#0#0@@2| (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) |key#0@@92|) (|lambda#28| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@1)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@4|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@4|) |dt_update#contents#0#0@@2|))))) (let ((|dt_update#count#0#0@@0| (ite (Options.Option.Some_q |removed#1@@1|) (- (MutableMapModel.LinearHashMap.count |self#0@@92|) 1) (MutableMapModel.LinearHashMap.count |self#0@@92|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#0@@2|) |dt_update#count#0#0@@0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#0@@2|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@2|) ($Box |removed#1@@1|)))))))) :qid |unknown.0:0| :skolemid |2319| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@92|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.RemoveInternal$V@@2 T@U) (|self#0@@93| T@U) (|key#0@@93| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@2) TyType) (= (type |self#0@@93|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@93|)) (and (and ($Is |self#0@@93| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@2)) (and (<= (LitInt 0) |key#0@@93|) (< |key#0@@93| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)) (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.RemoveInternal$V@@2 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@93|))) (let ((|removed#2| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@93|)))))) (let ((|underlying'#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@93|)))))) (and (and (let ((|dt_update_tmp#0#1@@6| (Lit |self#0@@93|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@6|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@6|))) (let ((|dt_update_tmp#1#1@@2| (let ((|dt_update_tmp#0#1@@7| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@3| |underlying'#1@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@3| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@7|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@7|))))))) (and (forall ((|k#0@@59| T@U) ) (!  (=> (= (type |k#0@@59|) intType) (=> (and (<= (LitInt 0) (U_2_int |k#0@@59|)) (< (U_2_int |k#0@@59|) 18446744073709551616)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) ($Box |k#0@@59|))) (not (= (U_2_int |k#0@@59|) |key#0@@93|))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)))))) :qid |MutableM.1313:25| :skolemid |2320| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@93|)) ($Box |k#0@@59|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@93|)) ($Box |k#0@@59|))) )) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1@@2|))))) (let ((|dt_update_tmp#2#1@@1| (let ((|dt_update_tmp#1#1@@3| (let ((|dt_update_tmp#0#1@@8| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@4| |underlying'#1@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@4| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@8|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@8|))))))) (let ((|dt_update#contents#0#1@@1| (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) |key#0@@93|) (|lambda#28| (|Map#Elements| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@2)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@3|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@3|) |dt_update#contents#0#1@@1|))))) (and (and (=> (Options.Option.Some_q |removed#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|))) (=> (not (Options.Option.Some_q |removed#2|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1@@1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1@@1|)))))))) (= (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@93|)) (let ((|removed#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@93|)))))) (let ((|underlying'#1@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@93|)))))) (let ((|self'#2@@0| (let ((|dt_update_tmp#2#1@@2| (let ((|dt_update_tmp#1#1@@4| (let ((|dt_update_tmp#0#1@@9| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@5| |underlying'#1@@2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@5| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@9|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@9|))))))) (let ((|dt_update#contents#0#1@@2| (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) |key#0@@93|) (|lambda#28| (|Map#Elements| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@2)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@4|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@4|) |dt_update#contents#0#1@@2|))))) (let ((|dt_update#count#0#1@@0| (ite (Options.Option.Some_q |removed#2@@0|) (- (MutableMapModel.LinearHashMap.count (Lit |self#0@@93|)) 1) (MutableMapModel.LinearHashMap.count (Lit |self#0@@93|))))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#1@@2|) |dt_update#count#0#1@@0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#1@@2|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#2@@0|) ($Box |removed#2@@0|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2321| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@93|))) ))))
(assert (forall ((arg0@@347 T@U) (arg1@@199 T@U) (arg2@@139 Int) ) (! (= (type (MutableMapModel.__default.RemoveAndGet arg0@@347 arg1@@199 arg2@@139)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.RemoveAndGet| :pattern ( (MutableMapModel.__default.RemoveAndGet arg0@@347 arg1@@199 arg2@@139)) )))
(assert  (=> true (forall ((MutableMapModel._default.RemoveAndGet$V T@U) (|self#0@@94| T@U) (|key#0@@94| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V) TyType) (= (type |self#0@@94|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@94|) (and (and ($Is |self#0@@94| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V)) (and (<= (LitInt 0) |key#0@@94|) (< |key#0@@94| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V |self#0@@94|)))) (and (let ((|removed#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@94|))))) (let ((|self'#0@@3| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@94|))))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V |self'#0@@3|) (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0@@3|) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@94|)))) (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) |key#0@@94|) (|lambda#28| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@94|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveAndGet$V)) (MutableMapModel.LinearHashMap.contents |self#0@@94|)))) (|Options.Option#Equal| |removed#0@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@94|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@94|)))) |#Options.Option.None|))))) ($Is (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@94|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V) (Tclass.Options.Option MutableMapModel._default.RemoveAndGet$V))))) :qid |unknown.0:0| :skolemid |2322| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@94|)) ))))
(assert (forall ((MutableMapModel._default.RemoveAndGet$V@@0 T@U) (|self#0@@95| T@U) (|key#0@@95| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@0) TyType) (= (type |self#0@@95|) DatatypeTypeType)) (and ($Is |self#0@@95| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@0)) (and (<= (LitInt 0) |key#0@@95|) (< |key#0@@95| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.RemoveAndGet#requires| MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95| |key#0@@95|) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95|) (|MutableMapModel.__default.RemoveAndGet#requires| MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95| |key#0@@95|)))) :qid |unknown.0:0| :skolemid |2323| :pattern ( (|MutableMapModel.__default.RemoveAndGet#requires| MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95| |key#0@@95|)) )))
(assert  (=> true (forall ((MutableMapModel._default.RemoveAndGet$V@@1 T@U) (|self#0@@96| T@U) (|key#0@@96| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@1) TyType) (= (type |self#0@@96|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|) (and (and ($Is |self#0@@96| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@1)) (and (<= (LitInt 0) |key#0@@96|) (< |key#0@@96| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96|)))) (and (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|) (= (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|) (let ((|removed#1@@2| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|))))) (let ((|self'#1@@3| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@3|) ($Box |removed#1@@2|))))))) :qid |unknown.0:0| :skolemid |2324| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@96|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.RemoveAndGet$V@@2 T@U) (|self#0@@97| T@U) (|key#0@@97| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@2) TyType) (= (type |self#0@@97|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|)) (and (and ($Is |self#0@@97| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@2)) (and (<= (LitInt 0) |key#0@@97|) (< |key#0@@97| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|)))))))) (and (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|)) (= (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|)) (let ((|removed#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|))))))) (let ((|self'#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|))))))) (|#_System._tuple#2._#Make2| ($Box |self'#2@@1|) ($Box |removed#2@@1|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2325| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@97|))) ))))
(assert (forall ((arg0@@348 T@U) (arg1@@200 T@U) (arg2@@140 Int) ) (! (= (type (MutableMapModel.__default.Remove arg0@@348 arg1@@200 arg2@@140)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Remove| :pattern ( (MutableMapModel.__default.Remove arg0@@348 arg1@@200 arg2@@140)) )))
(assert  (=> true (forall ((MutableMapModel._default.Remove$V T@U) (|self#0@@98| T@U) (|key#0@@98| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V) TyType) (= (type |self#0@@98|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V |self#0@@98| |key#0@@98|) (and (and ($Is |self#0@@98| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V)) (and (<= (LitInt 0) |key#0@@98|) (< |key#0@@98| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V |self#0@@98|)))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@98|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@98|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@98|)) ($Box (int_2_U |key#0@@98|)))) (|Map#Glue| (|lambda#89| (LitInt 0) 18446744073709551616 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@98|)) |key#0@@98|) (|lambda#28| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@98|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.Remove$V)) (MutableMapModel.LinearHashMap.contents |self#0@@98|)))) ($Is (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@98|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V)))) :qid |unknown.0:0| :skolemid |2326| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@98|)) ))))
(assert (forall ((MutableMapModel._default.Remove$V@@0 T@U) (|self#0@@99| T@U) (|key#0@@99| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@0) TyType) (= (type |self#0@@99|) DatatypeTypeType)) (and ($Is |self#0@@99| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@0)) (and (<= (LitInt 0) |key#0@@99|) (< |key#0@@99| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.Remove#requires| MutableMapModel._default.Remove$V@@0 |self#0@@99| |key#0@@99|) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@0 |self#0@@99|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@0 |self#0@@99|) (|MutableMapModel.__default.Remove#requires| MutableMapModel._default.Remove$V@@0 |self#0@@99| |key#0@@99|)))) :qid |unknown.0:0| :skolemid |2327| :pattern ( (|MutableMapModel.__default.Remove#requires| MutableMapModel._default.Remove$V@@0 |self#0@@99| |key#0@@99|)) )))
(assert  (=> true (forall ((MutableMapModel._default.Remove$V@@1 T@U) (|self#0@@100| T@U) (|key#0@@100| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@1) TyType) (= (type |self#0@@100|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|) (and (and ($Is |self#0@@100| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@1)) (and (<= (LitInt 0) |key#0@@100|) (< |key#0@@100| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@1 |self#0@@100|)))) (and (and (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|))) (= (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|)))))) :qid |unknown.0:0| :skolemid |2328| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@100|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Remove$V@@2 T@U) (|self#0@@101| T@U) (|key#0@@101| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@2) TyType) (= (type |self#0@@101|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|)) (and (and ($Is |self#0@@101| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@2)) (and (<= (LitInt 0) |key#0@@101|) (< |key#0@@101| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|)))))))) (and (and (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|)) (_System.Tuple2.___hMake2_q (Lit (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|))))) (= (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|)) (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2329| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@101|))) ))))
(assert (forall ((arg0@@349 T@U) (arg1@@201 T@U) (arg2@@141 Int) ) (! (= (type (MutableMapModel.__default.Get arg0@@349 arg1@@201 arg2@@141)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Get| :pattern ( (MutableMapModel.__default.Get arg0@@349 arg1@@201 arg2@@141)) )))
(assert  (=> true (forall ((MutableMapModel._default.Get$V T@U) (|self#0@@102| T@U) (|key#0@@102| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V) TyType) (= (type |self#0@@102|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|) (and (and ($Is |self#0@@102| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V)) (and (<= (LitInt 0) |key#0@@102|) (< |key#0@@102| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V |self#0@@102|)))) (and (and (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@102|)))) (|Options.Option#Equal| (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@102|))))) (Options.Option.None_q (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|))) (and (=> (Options.Option.Some_q (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@102|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@102|)))) (Options.Option.Some_q (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|))))) ($Is (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|) (Tclass.Options.Option MutableMapModel._default.Get$V)))) :qid |unknown.0:0| :skolemid |2330| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@102|)) ))))
(assert (forall ((MutableMapModel._default.Get$V@@0 T@U) (|self#0@@103| T@U) (|key#0@@103| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@0) TyType) (= (type |self#0@@103|) DatatypeTypeType)) (and ($Is |self#0@@103| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@0)) (and (<= (LitInt 0) |key#0@@103|) (< |key#0@@103| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.Get#requires| MutableMapModel._default.Get$V@@0 |self#0@@103| |key#0@@103|) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@0 |self#0@@103|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@0 |self#0@@103|) (|MutableMapModel.__default.Get#requires| MutableMapModel._default.Get$V@@0 |self#0@@103| |key#0@@103|)))) :qid |unknown.0:0| :skolemid |2331| :pattern ( (|MutableMapModel.__default.Get#requires| MutableMapModel._default.Get$V@@0 |self#0@@103| |key#0@@103|)) )))
(assert (= (type StartFuel_MutableMapModel._default.FixedSizeGet) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.Get$V@@1 T@U) (|self#0@@104| T@U) (|key#0@@104| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@1) TyType) (= (type |self#0@@104|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@104|) (and (and ($Is |self#0@@104| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@1)) (and (<= (LitInt 0) |key#0@@104|) (< |key#0@@104| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@1 |self#0@@104|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@104|) (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.Get$V@@1 (MutableMapModel.LinearHashMap.underlying |self#0@@104|) |key#0@@104|)) (= (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@104|) (let ((|found#0| (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.Get$V@@1 StartFuel_MutableMapModel._default.FixedSizeGet (MutableMapModel.LinearHashMap.underlying |self#0@@104|) |key#0@@104|))) |found#0|)))) :qid |unknown.0:0| :skolemid |2332| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@104|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.Get$V@@2 T@U) (|self#0@@105| T@U) (|key#0@@105| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@2) TyType) (= (type |self#0@@105|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@105|)) (and (and ($Is |self#0@@105| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@2)) (and (<= (LitInt 0) |key#0@@105|) (< |key#0@@105| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@105|)) (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.Get$V@@2 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@105|))) (LitInt |key#0@@105|))) (= (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@105|)) (let ((|found#1| (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.Get$V@@2 StartFuel_MutableMapModel._default.FixedSizeGet (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@105|))) (LitInt |key#0@@105|)))) |found#1|)))) :qid |unknown.0:0| :weight 3 :skolemid |2333| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@105|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.NextExplainedByI$V T@U) (|self#0@@106| T@U) (|i#0@@86| Int) (|output#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V) TyType) (= (type |self#0@@106|) DatatypeTypeType)) (= (type |output#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V |self#0@@106| |i#0@@86| |output#0|) (and (and ($Is |self#0@@106| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V)) (and (<= (LitInt 0) |i#0@@86|) (< |i#0@@86| 18446744073709551616))) ($Is |output#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V))))) true) :qid |unknown.0:0| :skolemid |2334| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V |self#0@@106| |i#0@@86| |output#0|)) ))))
(assert (forall ((MutableMapModel._default.NextExplainedByI$V@@0 T@U) (|self#0@@107| T@U) (|i#0@@87| Int) (|output#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@0) TyType) (= (type |self#0@@107|) DatatypeTypeType)) (= (type |output#0@@0|) DatatypeTypeType)) (and (and ($Is |self#0@@107| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@0)) (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| 18446744073709551616))) ($Is |output#0@@0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@0)))) (and (=> (|MutableMapModel.__default.NextExplainedByI#requires| MutableMapModel._default.NextExplainedByI$V@@0 |self#0@@107| |i#0@@87| |output#0@@0|) true) (=> true (|MutableMapModel.__default.NextExplainedByI#requires| MutableMapModel._default.NextExplainedByI$V@@0 |self#0@@107| |i#0@@87| |output#0@@0|)))) :qid |unknown.0:0| :skolemid |2335| :pattern ( (|MutableMapModel.__default.NextExplainedByI#requires| MutableMapModel._default.NextExplainedByI$V@@0 |self#0@@107| |i#0@@87| |output#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.NextExplainedByI$V@@1 T@U) (|self#0@@108| T@U) (|i#0@@88| Int) (|output#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@1) TyType) (= (type |self#0@@108|) DatatypeTypeType)) (= (type |output#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@88| |output#0@@1|) (and (and ($Is |self#0@@108| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@1)) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| 18446744073709551616))) ($Is |output#0@@1| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@1))))) (and (and (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (=> (< |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))))) (=> (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (=> (< |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))) (and (and (and (< |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.value |output#0@@1|)))) (=> (MutableMapModel.IteratorOutput.Done_q |output#0@@1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))))) (and (=> (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@88| |output#0@@1|) (and (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (and (< |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.value |output#0@@1|)))) (=> (MutableMapModel.IteratorOutput.Done_q |output#0@@1|) (= |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))))) (=> (and (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (and (< |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@88|))) (MutableMapModel.IteratorOutput.value |output#0@@1|)))) (=> (MutableMapModel.IteratorOutput.Done_q |output#0@@1|) (= |i#0@@88| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))))) (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@88| |output#0@@1|))))) :qid |unknown.0:0| :skolemid |2336| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@88| |output#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.NextExplainedByI$V@@2 T@U) (|self#0@@109| T@U) (|i#0@@89| Int) (|output#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@2) TyType) (= (type |self#0@@109|) DatatypeTypeType)) (= (type |output#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@89|) (Lit |output#0@@2|)) (and (and ($Is |self#0@@109| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@2)) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| 18446744073709551616))) ($Is |output#0@@2| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@2))))) (and (and (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (=> (< |i#0@@89| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))) (=> (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (=> (< |i#0@@89| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (and (and (and (< |i#0@@89| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (Lit (MutableMapModel.IteratorOutput.value (Lit |output#0@@2|)))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit |output#0@@2|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))) (and (=> (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@89|) (Lit |output#0@@2|)) (and (=> (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|)) (and (and (and (< |i#0@@89| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (Lit (MutableMapModel.IteratorOutput.value (Lit |output#0@@2|)))))) (=> (MutableMapModel.IteratorOutput.Done_q (Lit |output#0@@2|)) (= (LitInt |i#0@@89|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))))) (=> (and (=> (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|)) (and (and (and (< |i#0@@89| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@89|)))) (Lit (MutableMapModel.IteratorOutput.value (Lit |output#0@@2|)))))) (=> (MutableMapModel.IteratorOutput.Done_q (Lit |output#0@@2|)) (= (LitInt |i#0@@89|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))))) (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@89|) (Lit |output#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2337| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@89|) (Lit |output#0@@2|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.ValidI$V T@U) (|self#0@@110| T@U) (|it#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V) TyType) (= (type |self#0@@110|) DatatypeTypeType)) (= (type |it#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V |self#0@@110| |it#0|) (and ($Is |self#0@@110| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V)) ($Is |it#0| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V))))) true) :qid |unknown.0:0| :skolemid |2338| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V |self#0@@110| |it#0|)) ))))
(assert (forall ((MutableMapModel._default.ValidI$V@@0 T@U) (|self#0@@111| T@U) (|it#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@0) TyType) (= (type |self#0@@111|) DatatypeTypeType)) (= (type |it#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@111| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@0)) ($Is |it#0@@0| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@0)))) (and (=> (|MutableMapModel.__default.ValidI#requires| MutableMapModel._default.ValidI$V@@0 |self#0@@111| |it#0@@0|) true) (=> true (|MutableMapModel.__default.ValidI#requires| MutableMapModel._default.ValidI$V@@0 |self#0@@111| |it#0@@0|)))) :qid |unknown.0:0| :skolemid |2339| :pattern ( (|MutableMapModel.__default.ValidI#requires| MutableMapModel._default.ValidI$V@@0 |self#0@@111| |it#0@@0|)) )))
(assert  (=> true (forall ((MutableMapModel._default.ValidI$V@@1 T@U) (|self#0@@112| T@U) (|it#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@1) TyType) (= (type |self#0@@112|) DatatypeTypeType)) (= (type |it#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|) (and ($Is |self#0@@112| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@1)) ($Is |it#0@@1| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@1))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Iterator.Iterator_q |it#0@@1|) (=> (<= (LitInt 0) (MutableMapModel.Iterator.i |it#0@@1|)) (and (MutableMapModel.Iterator.Iterator_q |it#0@@1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@112|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@112|))))))) (and (=> (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|) (and true (and (<= (LitInt 0) (MutableMapModel.Iterator.i |it#0@@1|)) (<= (MutableMapModel.Iterator.i |it#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@112|))))))) (=> (and true (and (<= (LitInt 0) (MutableMapModel.Iterator.i |it#0@@1|)) (<= (MutableMapModel.Iterator.i |it#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@112|)))))) (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|))))) :qid |unknown.0:0| :skolemid |2340| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.ValidI$V@@2 T@U) (|self#0@@113| T@U) (|it#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@2) TyType) (= (type |self#0@@113|) DatatypeTypeType)) (= (type |it#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|)) (and ($Is |self#0@@113| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@2)) ($Is |it#0@@2| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@2))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@2|)) (=> (<= (LitInt 0) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|)))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@2|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@113|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@113|))))))))) (and (=> (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|)) (and true (and (<= (LitInt 0) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|)))) (<= (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@113|)))))))))) (=> (and true (and (<= (LitInt 0) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|)))) (<= (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@113|))))))))) (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2341| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V T@U) (|self#0@@114| T@U) (|s#0@@38| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V) TyType) (= (type |self#0@@114|) DatatypeTypeType)) (= (type |s#0@@38|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V |self#0@@114| |s#0@@38| |i#0@@90|) (and (and (and ($Is |self#0@@114| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V)) ($Is |s#0@@38| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@90|) (<= |i#0@@90| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@114|)))))))) true) :qid |unknown.0:0| :skolemid |2342| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V |self#0@@114| |s#0@@38| |i#0@@90|)) ))))
(assert (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 T@U) (|self#0@@115| T@U) (|s#0@@39| T@U) (|i#0@@91| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0) TyType) (= (type |self#0@@115|) DatatypeTypeType)) (= (type |s#0@@39|) (MapType0Type BoxType boolType))) (and (and ($Is |self#0@@115| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0)) ($Is |s#0@@39| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 |self#0@@115| |s#0@@39| |i#0@@91|) (and (<= (LitInt 0) |i#0@@91|) (<= |i#0@@91| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@115|)))))) (=> (and (<= (LitInt 0) |i#0@@91|) (<= |i#0@@91| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@115|))))) (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 |self#0@@115| |s#0@@39| |i#0@@91|)))) :qid |unknown.0:0| :skolemid |2343| :pattern ( (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 |self#0@@115| |s#0@@39| |i#0@@91|)) )))
(assert  (=> true (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 T@U) (|self#0@@116| T@U) (|s#0@@40| T@U) (|i#0@@92| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1) TyType) (= (type |self#0@@116|) DatatypeTypeType)) (= (type |s#0@@40|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@40| |i#0@@92|) (and (and (and ($Is |self#0@@116| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1)) ($Is |s#0@@40| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@92|) (< |i#0@@92| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@92|) (<= |i#0@@92| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)))))))) (and (forall ((|key#0@@106| T@U) ) (!  (=> (= (type |key#0@@106|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@106|)) (< (U_2_int |key#0@@106|) 18446744073709551616)) (=> (U_2_bool (MapType0Select |s#0@@40| ($Box |key#0@@106|))) (forall ((|j#0@@15| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@15|) (< |j#0@@15| |i#0@@92|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@116|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@116|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@15|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@116|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@116|)))))) :qid |MutableM.1433:16| :skolemid |2344| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@15|))) ))))) :qid |MutableM.1432:12| :skolemid |2345| :pattern ( (MapType0Select |s#0@@40| ($Box |key#0@@106|))) )) (and (=> (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@40| |i#0@@92|) (forall ((|key#0@@107| T@U) ) (!  (=> (= (type |key#0@@107|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#0@@107|)) (< (U_2_int |key#0@@107|) 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@40| ($Box |key#0@@107|)))) (exists ((|j#0@@16| Int) ) (!  (and (and (<= (LitInt 0) |j#0@@16|) (< |j#0@@16| |i#0@@92|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@16|))) (= (U_2_int |key#0@@107|) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@16|)))))) :qid |MutableM.1433:16| :skolemid |2346| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@16|))) )))) :qid |MutableM.1432:12| :skolemid |2347| :pattern ( (MapType0Select |s#0@@40| ($Box |key#0@@107|))) ))) (=> (forall ((|key#0@@108| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#0@@108|) (< |key#0@@108| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@40| ($Box (int_2_U |key#0@@108|))))) (exists ((|j#0@@17| Int) ) (!  (and (and (<= (LitInt 0) |j#0@@17|) (< |j#0@@17| |i#0@@92|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@17|))) (= |key#0@@108| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@17|)))))) :qid |MutableM.1433:16| :skolemid |2346| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@17|))) ))) :qid |MutableM.1432:12| :skolemid |2347| :pattern ( (MapType0Select |s#0@@40| ($Box (int_2_U |key#0@@108|)))) )) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@40| |i#0@@92|))))) :qid |unknown.0:0| :skolemid |2348| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@40| |i#0@@92|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 T@U) (|self#0@@117| T@U) (|s#0@@41| T@U) (|i#0@@93| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2) TyType) (= (type |self#0@@117|) DatatypeTypeType)) (= (type |s#0@@41|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@41|) (LitInt |i#0@@93|)) (and (and (and ($Is |self#0@@117| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2)) ($Is |s#0@@41| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| 18446744073709551616))) (and (<= (LitInt 0) (LitInt |i#0@@93|)) (<= (LitInt |i#0@@93|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))))))))) (and (forall ((|key#1@@14| T@U) ) (!  (=> (= (type |key#1@@14|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@14|)) (< (U_2_int |key#1@@14|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (Lit |s#0@@41|) ($Box |key#1@@14|))) (forall ((|j#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@7|) (< |j#1@@7| |i#0@@93|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@117|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@7|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@117|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|)))))))) :qid |MutableM.1433:16| :skolemid |2349| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@117|)) |j#1@@7|))) ))))) :qid |MutableM.1432:12| :skolemid |2350| :pattern ( (MapType0Select |s#0@@41| ($Box |key#1@@14|))) )) (and (=> (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@41|) (LitInt |i#0@@93|)) (forall ((|key#1@@15| T@U) ) (!  (=> (= (type |key#1@@15|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#1@@15|)) (< (U_2_int |key#1@@15|) 18446744073709551616)) (U_2_bool (MapType0Select (Lit |s#0@@41|) ($Box |key#1@@15|)))) (exists ((|j#1@@8| Int) ) (!  (and (and (<= (LitInt 0) |j#1@@8|) (< |j#1@@8| |i#0@@93|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@8|))) (= (U_2_int |key#1@@15|) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@8|)))))) :qid |MutableM.1433:16| :skolemid |2351| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@117|)) |j#1@@8|))) )))) :qid |MutableM.1432:12| :skolemid |2352| :pattern ( (MapType0Select |s#0@@41| ($Box |key#1@@15|))) ))) (=> (forall ((|key#1@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#1@@16|) (< |key#1@@16| 18446744073709551616)) (U_2_bool (MapType0Select (Lit |s#0@@41|) ($Box (int_2_U |key#1@@16|))))) (exists ((|j#1@@9| Int) ) (!  (and (and (<= (LitInt 0) |j#1@@9|) (< |j#1@@9| |i#0@@93|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@9|))) (= |key#1@@16| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@9|)))))) :qid |MutableM.1433:16| :skolemid |2351| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@117|)) |j#1@@9|))) ))) :qid |MutableM.1432:12| :skolemid |2352| :pattern ( (MapType0Select |s#0@@41| ($Box (int_2_U |key#1@@16|)))) )) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@41|) (LitInt |i#0@@93|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2353| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@41|) (LitInt |i#0@@93|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.WFIter$V T@U) (|self#0@@118| T@U) (|it#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V) TyType) (= (type |self#0@@118|) DatatypeTypeType)) (= (type |it#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (and ($Is |self#0@@118| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V)) ($Is |it#0@@3| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V))))) (and (and (and (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@3|)) (|Set#Equal| (MutableMapModel.Iterator.s |it#0@@3|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@118|))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@3|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V (MutableMapModel.LinearHashMap.contents |self#0@@118|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@3|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.Iterator.next |it#0@@3|)))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@3|)) (not (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@3|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@3|)))))))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (|Set#Subset| (MutableMapModel.Iterator.s |it#0@@3|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@118|)))))) :qid |unknown.0:0| :skolemid |2354| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.WFIter$V@@0 T@U) (|self#0@@119| T@U) (|it#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@0) TyType) (= (type |self#0@@119|) DatatypeTypeType)) (= (type |it#0@@4|) DatatypeTypeType)) (and ($Is |self#0@@119| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@0)) ($Is |it#0@@4| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@0)))) (and (=> (|MutableMapModel.__default.WFIter#requires| MutableMapModel._default.WFIter$V@@0 |self#0@@119| |it#0@@4|) true) (=> true (|MutableMapModel.__default.WFIter#requires| MutableMapModel._default.WFIter$V@@0 |self#0@@119| |it#0@@4|)))) :qid |unknown.0:0| :skolemid |2355| :pattern ( (|MutableMapModel.__default.WFIter#requires| MutableMapModel._default.WFIter$V@@0 |self#0@@119| |it#0@@4|)) )))
(assert  (=> true (forall ((MutableMapModel._default.WFIter$V@@1 T@U) (|self#0@@120| T@U) (|it#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@1) TyType) (= (type |self#0@@120|) DatatypeTypeType)) (= (type |it#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|) (and ($Is |self#0@@120| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@1)) ($Is |it#0@@5| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@1))))) true) :qid |unknown.0:0| :skolemid |2356| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.WFIter$V@@2 T@U) (|self#0@@121| T@U) (|it#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@2) TyType) (= (type |self#0@@121|) DatatypeTypeType)) (= (type |it#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|)) (and ($Is |self#0@@121| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@2)) ($Is |it#0@@6| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@2))))) true) :qid |unknown.0:0| :weight 3 :skolemid |2357| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|))) ))))
(assert  (=> true (forall ((MutableMapModel._default.WFSimpleIter$V T@U) (|self#0@@122| T@U) (|it#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V) TyType) (= (type |self#0@@122|) DatatypeTypeType)) (= (type |it#0@@7|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|) (and ($Is |self#0@@122| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V)) ($Is |it#0@@7| Tclass.MutableMapModel.SimpleIterator)))) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|)) (|Set#Subset| (MutableMapModel.SimpleIterator.s |it#0@@7|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@122|)))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.WFSimpleIter$V@@0 T@U) (|self#0@@123| T@U) (|it#0@@8| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@0) TyType) (= (type |self#0@@123|) DatatypeTypeType)) (= (type |it#0@@8|) DatatypeTypeType)) (and ($Is |self#0@@123| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@0)) ($Is |it#0@@8| Tclass.MutableMapModel.SimpleIterator))) (and (=> (|MutableMapModel.__default.WFSimpleIter#requires| MutableMapModel._default.WFSimpleIter$V@@0 |self#0@@123| |it#0@@8|) true) (=> true (|MutableMapModel.__default.WFSimpleIter#requires| MutableMapModel._default.WFSimpleIter$V@@0 |self#0@@123| |it#0@@8|)))) :qid |unknown.0:0| :skolemid |2359| :pattern ( (|MutableMapModel.__default.WFSimpleIter#requires| MutableMapModel._default.WFSimpleIter$V@@0 |self#0@@123| |it#0@@8|)) )))
(assert  (=> true (forall ((MutableMapModel._default.WFSimpleIter$V@@1 T@U) (|self#0@@124| T@U) (|it#0@@9| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@1) TyType) (= (type |self#0@@124|) DatatypeTypeType)) (= (type |it#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| |it#0@@9|) (and ($Is |self#0@@124| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@1)) ($Is |it#0@@9| Tclass.MutableMapModel.SimpleIterator)))) true) :qid |unknown.0:0| :skolemid |2360| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| |it#0@@9|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.WFSimpleIter$V@@2 T@U) (|self#0@@125| T@U) (|it#0@@10| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@2) TyType) (= (type |self#0@@125|) DatatypeTypeType)) (= (type |it#0@@10|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit |it#0@@10|)) (and ($Is |self#0@@125| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@2)) ($Is |it#0@@10| Tclass.MutableMapModel.SimpleIterator)))) true) :qid |unknown.0:0| :weight 3 :skolemid |2361| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit |it#0@@10|))) ))))
(assert (forall ((arg0@@350 T@U) (arg1@@202 T@U) (arg2@@142 Int) ) (! (= (type (MutableMapModel.__default.indexOutput arg0@@350 arg1@@202 arg2@@142)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.indexOutput| :pattern ( (MutableMapModel.__default.indexOutput arg0@@350 arg1@@202 arg2@@142)) )))
(assert  (=> true (forall ((MutableMapModel._default.indexOutput$V T@U) (|self#0@@126| T@U) (|i#0@@94| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V) TyType) (= (type |self#0@@126|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@94|) (and (and ($Is |self#0@@126| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V)) (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| 18446744073709551616))) (and (and (<= (LitInt 0) |i#0@@94|) (<= |i#0@@94| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|))))) (=> (< |i#0@@94| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|)) |i#0@@94|)))))))) ($Is (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@94|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.indexOutput$V))) :qid |unknown.0:0| :skolemid |2362| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@94|)) ))))
(assert (forall ((MutableMapModel._default.indexOutput$V@@0 T@U) (|self#0@@127| T@U) (|i#0@@95| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@0) TyType) (= (type |self#0@@127|) DatatypeTypeType)) (and ($Is |self#0@@127| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@0)) (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.indexOutput#requires| MutableMapModel._default.indexOutput$V@@0 |self#0@@127| |i#0@@95|) (and (and (<= (LitInt 0) |i#0@@95|) (<= |i#0@@95| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|))))) (=> (< |i#0@@95| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)) |i#0@@95|)))))) (=> (and (and (<= (LitInt 0) |i#0@@95|) (<= |i#0@@95| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|))))) (=> (< |i#0@@95| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)) |i#0@@95|))))) (|MutableMapModel.__default.indexOutput#requires| MutableMapModel._default.indexOutput$V@@0 |self#0@@127| |i#0@@95|)))) :qid |unknown.0:0| :skolemid |2363| :pattern ( (|MutableMapModel.__default.indexOutput#requires| MutableMapModel._default.indexOutput$V@@0 |self#0@@127| |i#0@@95|)) )))
(assert  (=> true (forall ((MutableMapModel._default.indexOutput$V@@1 T@U) (|self#0@@128| T@U) (|i#0@@96| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@1) TyType) (= (type |self#0@@128|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@96|) (and (and ($Is |self#0@@128| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@1)) (and (<= (LitInt 0) |i#0@@96|) (< |i#0@@96| 18446744073709551616))) (and (and (<= (LitInt 0) |i#0@@96|) (<= |i#0@@96| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|))))) (=> (< |i#0@@96| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@96|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|))) (=> (not (= |i#0@@96| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))))) (= (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@96|) (ite (= |i#0@@96| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))) |#MutableMapModel.IteratorOutput.Done| (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@96|))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@96|)))))))) :qid |unknown.0:0| :skolemid |2364| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@96|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.indexOutput$V@@2 T@U) (|self#0@@129| T@U) (|i#0@@97| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@2) TyType) (= (type |self#0@@129|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@97|)) (and (and ($Is |self#0@@129| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@2)) (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |i#0@@97|)) (<= (LitInt |i#0@@97|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (=> (< |i#0@@97| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@97|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (=> (not (= (LitInt |i#0@@97|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (= (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@97|)) (ite (= (LitInt |i#0@@97|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))))) |#MutableMapModel.IteratorOutput.Done| (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@97|)))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@97|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2365| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@97|))) ))))
(assert (forall ((arg0@@351 T@U) (arg1@@203 T@U) (arg2@@143 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterOutput arg0@@351 arg1@@203 arg2@@143)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterOutput| :pattern ( (MutableMapModel.__default.SimpleIterOutput arg0@@351 arg1@@203 arg2@@143)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterOutput$V T@U) (|self#0@@130| T@U) (|it#0@@11| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V) TyType) (= (type |self#0@@130|) DatatypeTypeType)) (= (type |it#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|) (and (and ($Is |self#0@@130| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V)) ($Is |it#0@@11| Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)))) (and (and (and (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s |it#0@@11|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@130|)))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.SimpleIterOutput$V (MutableMapModel.LinearHashMap.contents |self#0@@130|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|))))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (not (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@11|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|))))))))) ($Is (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.SimpleIterOutput$V)))) :qid |unknown.0:0| :skolemid |2366| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterOutput$V@@0 T@U) (|self#0@@131| T@U) (|it#0@@12| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@0) TyType) (= (type |self#0@@131|) DatatypeTypeType)) (= (type |it#0@@12|) DatatypeTypeType)) (and ($Is |self#0@@131| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@0)) ($Is |it#0@@12| Tclass.MutableMapModel.SimpleIterator))) (and (=> (|MutableMapModel.__default.SimpleIterOutput#requires| MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|)) (=> (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|) (|MutableMapModel.__default.SimpleIterOutput#requires| MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|)))) :qid |unknown.0:0| :skolemid |2367| :pattern ( (|MutableMapModel.__default.SimpleIterOutput#requires| MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterOutput$V@@1 T@U) (|self#0@@132| T@U) (|it#0@@13| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@1) TyType) (= (type |self#0@@132|) DatatypeTypeType)) (= (type |it#0@@13|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|) (and (and ($Is |self#0@@132| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@1)) ($Is |it#0@@13| Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|)))) true) :qid |unknown.0:0| :skolemid |2368| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterOutput$V@@2 T@U) (|self#0@@133| T@U) (|it#0@@14| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@2) TyType) (= (type |self#0@@133|) DatatypeTypeType)) (= (type |it#0@@14|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|)) (and (and ($Is |self#0@@133| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@2)) ($Is |it#0@@14| Tclass.MutableMapModel.SimpleIterator)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|)))))))) true) :qid |unknown.0:0| :weight 3 :skolemid |2369| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|))) ))))
(assert (forall ((arg0@@352 T@U) (arg1@@204 T@U) (arg2@@144 T@U) (arg3@@92 Int) ) (! (= (type (MutableMapModel.__default.iterToNext arg0@@352 arg1@@204 arg2@@144 arg3@@92)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.iterToNext| :pattern ( (MutableMapModel.__default.iterToNext arg0@@352 arg1@@204 arg2@@144 arg3@@92)) )))
(assert (forall ((MutableMapModel._default.iterToNext$V T@U) ($ly@@409 T@U) (|self#0@@134| T@U) (|i#0@@98| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.iterToNext$V) TyType) (= (type $ly@@409) LayerTypeType)) (= (type |self#0@@134|) DatatypeTypeType)) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V ($LS $ly@@409) |self#0@@134| |i#0@@98|) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V $ly@@409 |self#0@@134| |i#0@@98|))) :qid |unknown.0:0| :skolemid |2370| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V ($LS $ly@@409) |self#0@@134| |i#0@@98|)) )))
(assert (forall ((MutableMapModel._default.iterToNext$V@@0 T@U) ($ly@@410 T@U) (|self#0@@135| T@U) (|i#0@@99| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.iterToNext$V@@0) TyType) (= (type $ly@@410) LayerTypeType)) (= (type |self#0@@135|) DatatypeTypeType)) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 $ly@@410 |self#0@@135| |i#0@@99|) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 $LZ |self#0@@135| |i#0@@99|))) :qid |unknown.0:0| :skolemid |2371| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 (AsFuelBottom $ly@@410) |self#0@@135| |i#0@@99|)) )))
(assert  (=> true (forall ((MutableMapModel._default.iterToNext$V@@1 T@U) ($ly@@411 T@U) (|self#0@@136| T@U) (|i#0@@100| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@1) TyType) (= (type $ly@@411) LayerTypeType)) (= (type |self#0@@136|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@1 |self#0@@136| |i#0@@100|) (and (and ($Is |self#0@@136| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@1)) (and (<= (LitInt 0) |i#0@@100|) (< |i#0@@100| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@1 |self#0@@136|) (and (<= (LitInt 0) |i#0@@100|) (<= |i#0@@100| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|))))))))) (and (and (and (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.iterToNext$V@@1 |self#0@@136| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|)))) ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|)))) (forall ((|j#0@@18| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0@@18|) (< |j#0@@18| 18446744073709551616)) (and (<= |i#0@@100| |j#0@@18|) (< |j#0@@18| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|))))))) (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|)) |j#0@@18|))))) :qid |MutableM.1546:18| :skolemid |2372| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|)) |j#0@@18|))) ))) (<= |i#0@@100| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|)))))) ($Is (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|) (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.iterToNext$V@@1))))) :qid |unknown.0:0| :skolemid |2373| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@411 |self#0@@136| |i#0@@100|)) ))))
(assert (forall ((MutableMapModel._default.iterToNext$V@@2 T@U) ($ly@@412 T@U) (|self#0@@137| T@U) (|i#0@@101| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@2) TyType) (= (type $ly@@412) LayerTypeType)) (= (type |self#0@@137|) DatatypeTypeType)) (and ($Is |self#0@@137| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@2)) (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.iterToNext#requires| MutableMapModel._default.iterToNext$V@@2 $ly@@412 |self#0@@137| |i#0@@101|) (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@2 |self#0@@137|) (and (<= (LitInt 0) |i#0@@101|) (<= |i#0@@101| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@137|))))))) (=> (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@2 |self#0@@137|) (and (<= (LitInt 0) |i#0@@101|) (<= |i#0@@101| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@137|)))))) (|MutableMapModel.__default.iterToNext#requires| MutableMapModel._default.iterToNext$V@@2 $ly@@412 |self#0@@137| |i#0@@101|)))) :qid |unknown.0:0| :skolemid |2374| :pattern ( (|MutableMapModel.__default.iterToNext#requires| MutableMapModel._default.iterToNext$V@@2 $ly@@412 |self#0@@137| |i#0@@101|)) )))
(assert  (=> true (forall ((MutableMapModel._default.iterToNext$V@@3 T@U) ($ly@@413 T@U) (|self#0@@138| T@U) (|i#0@@102| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@3) TyType) (= (type $ly@@413) LayerTypeType)) (= (type |self#0@@138|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@3 |self#0@@138| |i#0@@102|) (and (and ($Is |self#0@@138| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@3)) (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@3 |self#0@@138|) (and (<= (LitInt 0) |i#0@@102|) (<= |i#0@@102| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (=> (not (= |i#0@@102| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@102|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|)))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@102|)))) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@3 |self#0@@138| (+ |i#0@@102| 1)))))) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 ($LS $ly@@413) |self#0@@138| |i#0@@102|) (ite (= |i#0@@102| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)))) (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@102|)) ($Box (Lit |#MutableMapModel.IteratorOutput.Done|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@102|))) (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@102|)) ($Box (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@102|))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@102|)))))) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 $ly@@413 |self#0@@138| (+ |i#0@@102| 1))))))) :qid |unknown.0:0| :skolemid |2375| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 ($LS $ly@@413) |self#0@@138| |i#0@@102|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.iterToNext$V@@4 T@U) ($ly@@414 T@U) (|self#0@@139| T@U) (|i#0@@103| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@4) TyType) (= (type $ly@@414) LayerTypeType)) (= (type |self#0@@139|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|) (LitInt |i#0@@103|)) (and (and ($Is |self#0@@139| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@4)) (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|))))) (and (<= (LitInt 0) (LitInt |i#0@@103|)) (<= (LitInt |i#0@@103|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|)))))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (=> (not (= (LitInt |i#0@@103|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@103|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|)))))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@103|))))) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|) (LitInt (+ |i#0@@103| 1))))))) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@414) (Lit |self#0@@139|) (LitInt |i#0@@103|)) (ite (= (LitInt |i#0@@103|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))))) (|#_System._tuple#2._#Make2| ($Box (int_2_U (LitInt |i#0@@103|))) ($Box (Lit |#MutableMapModel.IteratorOutput.Done|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@103|)))) (|#_System._tuple#2._#Make2| ($Box (int_2_U (LitInt |i#0@@103|))) ($Box (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@103|)))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@103|))))))) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@414) (Lit |self#0@@139|) (LitInt (+ |i#0@@103| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2376| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@414) (Lit |self#0@@139|) (LitInt |i#0@@103|))) ))))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V T@U) ($ly@@415 T@U) (|self#0@@140| T@U) (|i#0@@104| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.simpleIterToNext$V) TyType) (= (type $ly@@415) LayerTypeType)) (= (type |self#0@@140|) DatatypeTypeType)) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V ($LS $ly@@415) |self#0@@140| |i#0@@104|) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V $ly@@415 |self#0@@140| |i#0@@104|))) :qid |unknown.0:0| :skolemid |2377| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V ($LS $ly@@415) |self#0@@140| |i#0@@104|)) )))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V@@0 T@U) ($ly@@416 T@U) (|self#0@@141| T@U) (|i#0@@105| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@0) TyType) (= (type $ly@@416) LayerTypeType)) (= (type |self#0@@141|) DatatypeTypeType)) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 $ly@@416 |self#0@@141| |i#0@@105|) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 $LZ |self#0@@141| |i#0@@105|))) :qid |unknown.0:0| :skolemid |2378| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 (AsFuelBottom $ly@@416) |self#0@@141| |i#0@@105|)) )))
(assert  (=> true (forall ((MutableMapModel._default.simpleIterToNext$V@@1 T@U) ($ly@@417 T@U) (|self#0@@142| T@U) (|i#0@@106| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@1) TyType) (= (type $ly@@417) LayerTypeType)) (= (type |self#0@@142|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@1 |self#0@@142| |i#0@@106|) (and (and ($Is |self#0@@142| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@1)) (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@1 |self#0@@142|) (and (<= (LitInt 0) |i#0@@106|) (<= |i#0@@106| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|))))))))) (and (and (and (and (and (<= (LitInt 0) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|)) (<= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|))))) (forall ((|j#0@@19| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0@@19|) (< |j#0@@19| 18446744073709551616)) (and (<= |i#0@@106| |j#0@@19|) (< |j#0@@19| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|)))) (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) |j#0@@19|))))) :qid |MutableM.1563:18| :skolemid |2379| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) |j#0@@19|))) ))) (=> (< (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|)))))) (<= |i#0@@106| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|))) (and (<= (LitInt 0) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|)) (< (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2380| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@417 |self#0@@142| |i#0@@106|)) ))))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V@@2 T@U) ($ly@@418 T@U) (|self#0@@143| T@U) (|i#0@@107| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@2) TyType) (= (type $ly@@418) LayerTypeType)) (= (type |self#0@@143|) DatatypeTypeType)) (and ($Is |self#0@@143| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@2)) (and (<= (LitInt 0) |i#0@@107|) (< |i#0@@107| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.simpleIterToNext#requires| MutableMapModel._default.simpleIterToNext$V@@2 $ly@@418 |self#0@@143| |i#0@@107|) (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@2 |self#0@@143|) (and (<= (LitInt 0) |i#0@@107|) (<= |i#0@@107| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@143|))))))) (=> (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@2 |self#0@@143|) (and (<= (LitInt 0) |i#0@@107|) (<= |i#0@@107| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@143|)))))) (|MutableMapModel.__default.simpleIterToNext#requires| MutableMapModel._default.simpleIterToNext$V@@2 $ly@@418 |self#0@@143| |i#0@@107|)))) :qid |unknown.0:0| :skolemid |2381| :pattern ( (|MutableMapModel.__default.simpleIterToNext#requires| MutableMapModel._default.simpleIterToNext$V@@2 $ly@@418 |self#0@@143| |i#0@@107|)) )))
(assert  (=> true (forall ((MutableMapModel._default.simpleIterToNext$V@@3 T@U) ($ly@@419 T@U) (|self#0@@144| T@U) (|i#0@@108| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@3) TyType) (= (type $ly@@419) LayerTypeType)) (= (type |self#0@@144|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144| |i#0@@108|) (and (and ($Is |self#0@@144| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@3)) (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144|) (and (<= (LitInt 0) |i#0@@108|) (<= |i#0@@108| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@144|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@144|))) (=> (not (= |i#0@@108| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@144|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@144|))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)) |i#0@@108|)))) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144| (+ |i#0@@108| 1)))))) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 ($LS $ly@@419) |self#0@@144| |i#0@@108|) (ite (= |i#0@@108| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)))) |i#0@@108| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)) |i#0@@108|))) |i#0@@108| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 $ly@@419 |self#0@@144| (+ |i#0@@108| 1))))))) :qid |unknown.0:0| :skolemid |2382| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 ($LS $ly@@419) |self#0@@144| |i#0@@108|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.simpleIterToNext$V@@4 T@U) ($ly@@420 T@U) (|self#0@@145| T@U) (|i#0@@109| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@4) TyType) (= (type $ly@@420) LayerTypeType)) (= (type |self#0@@145|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|) (LitInt |i#0@@109|)) (and (and ($Is |self#0@@145| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@4)) (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|))))) (and (<= (LitInt 0) (LitInt |i#0@@109|)) (<= (LitInt |i#0@@109|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|)))))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@145|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (=> (not (= (LitInt |i#0@@109|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@145|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (LitInt |i#0@@109|))))) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|) (LitInt (+ |i#0@@109| 1))))))) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@420) (Lit |self#0@@145|) (LitInt |i#0@@109|)) (ite (= (LitInt |i#0@@109|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))))) |i#0@@109| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (LitInt |i#0@@109|)))) |i#0@@109| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@420) (Lit |self#0@@145|) (LitInt (+ |i#0@@109| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2383| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@420) (Lit |self#0@@145|) (LitInt |i#0@@109|))) ))))
(assert (forall ((arg0@@353 T@U) (arg1@@205 T@U) (arg2@@145 T@U) ) (! (= (type (MutableMapModel.__default.IterStart arg0@@353 arg1@@205 arg2@@145)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.IterStart| :pattern ( (MutableMapModel.__default.IterStart arg0@@353 arg1@@205 arg2@@145)) )))
(assert (forall ((MutableMapModel._default.IterStart$V T@U) ($ly@@421 T@U) (|self#0@@146| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IterStart$V) TyType) (= (type $ly@@421) LayerTypeType)) (= (type |self#0@@146|) DatatypeTypeType)) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V ($LS $ly@@421) |self#0@@146|) (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V $ly@@421 |self#0@@146|))) :qid |unknown.0:0| :skolemid |2384| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V ($LS $ly@@421) |self#0@@146|)) )))
(assert (forall ((MutableMapModel._default.IterStart$V@@0 T@U) ($ly@@422 T@U) (|self#0@@147| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IterStart$V@@0) TyType) (= (type $ly@@422) LayerTypeType)) (= (type |self#0@@147|) DatatypeTypeType)) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 $ly@@422 |self#0@@147|) (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 $LZ |self#0@@147|))) :qid |unknown.0:0| :skolemid |2385| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 (AsFuelBottom $ly@@422) |self#0@@147|)) )))
(assert  (=> true (forall ((MutableMapModel._default.IterStart$V@@1 T@U) ($ly@@423 T@U) (|self#0@@148| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@1) TyType) (= (type $ly@@423) LayerTypeType)) (= (type |self#0@@148|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@1 |self#0@@148|) (and ($Is |self#0@@148| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@1 |self#0@@148|)))) (and (and (MutableMapModel.__default.WFIter MutableMapModel._default.IterStart$V@@1 |self#0@@148| (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@423 |self#0@@148|)) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@423 |self#0@@148|)) (|Set#Empty| BoxType))) ($Is (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@423 |self#0@@148|) (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterStart$V@@1)))) :qid |unknown.0:0| :skolemid |2386| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@423 |self#0@@148|)) ))))
(assert (forall ((MutableMapModel._default.IterStart$V@@2 T@U) ($ly@@424 T@U) (|self#0@@149| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@2) TyType) (= (type $ly@@424) LayerTypeType)) (= (type |self#0@@149|) DatatypeTypeType)) ($Is |self#0@@149| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@2))) (and (=> (|MutableMapModel.__default.IterStart#requires| MutableMapModel._default.IterStart$V@@2 $ly@@424 |self#0@@149|) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@2 |self#0@@149|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@2 |self#0@@149|) (|MutableMapModel.__default.IterStart#requires| MutableMapModel._default.IterStart$V@@2 $ly@@424 |self#0@@149|)))) :qid |unknown.0:0| :skolemid |2387| :pattern ( (|MutableMapModel.__default.IterStart#requires| MutableMapModel._default.IterStart$V@@2 $ly@@424 |self#0@@149|)) )))
(assert  (=> true (forall ((MutableMapModel._default.IterStart$V@@3 T@U) ($ly@@425 T@U) (|self#0@@150| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@3) TyType) (= (type $ly@@425) LayerTypeType)) (= (type |self#0@@150|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@3 |self#0@@150|) (and ($Is |self#0@@150| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@3 |self#0@@150|)))) (and (and (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterStart$V@@3 |self#0@@150| (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@150|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@150|)))) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@3 ($LS $ly@@425) |self#0@@150|) (let ((|next#0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@3 ($LS $LZ) |self#0@@150| (LitInt 0)))))) (let ((|i#0@@110| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@3 ($LS $LZ) |self#0@@150| (LitInt 0))))))) (let ((|it'#0| (|#MutableMapModel.Iterator.Iterator| |i#0@@110| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@150|))) |i#0@@110|)) |next#0|))) |it'#0|)))))) :qid |unknown.0:0| :skolemid |2388| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@3 ($LS $ly@@425) |self#0@@150|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.IterStart$V@@4 T@U) ($ly@@426 T@U) (|self#0@@151| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@4) TyType) (= (type $ly@@426) LayerTypeType)) (= (type |self#0@@151|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|)) (and ($Is |self#0@@151| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|)))))))) (and (and (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|) (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@151|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@151|)))))) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@4 ($LS $ly@@426) (Lit |self#0@@151|)) (let ((|next#1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@4 ($LS $LZ) (Lit |self#0@@151|) (LitInt 0))))))) (let ((|i#1@@18| (U_2_int ($Unbox intType (_System.Tuple2._0 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@4 ($LS $LZ) (Lit |self#0@@151|) (LitInt 0)))))))) (let ((|it'#1| (|#MutableMapModel.Iterator.Iterator| |i#1@@18| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@151|)))))) |i#1@@18|)) |next#1|))) |it'#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2389| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@4 ($LS $ly@@426) (Lit |self#0@@151|))) ))))
(assert (forall ((arg0@@354 T@U) (arg1@@206 T@U) (arg2@@146 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterStart arg0@@354 arg1@@206 arg2@@146)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterStart| :pattern ( (MutableMapModel.__default.SimpleIterStart arg0@@354 arg1@@206 arg2@@146)) )))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V T@U) ($ly@@427 T@U) (|self#0@@152| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.SimpleIterStart$V) TyType) (= (type $ly@@427) LayerTypeType)) (= (type |self#0@@152|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V ($LS $ly@@427) |self#0@@152|) (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V $ly@@427 |self#0@@152|))) :qid |unknown.0:0| :skolemid |2390| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V ($LS $ly@@427) |self#0@@152|)) )))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V@@0 T@U) ($ly@@428 T@U) (|self#0@@153| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@0) TyType) (= (type $ly@@428) LayerTypeType)) (= (type |self#0@@153|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 $ly@@428 |self#0@@153|) (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 $LZ |self#0@@153|))) :qid |unknown.0:0| :skolemid |2391| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 (AsFuelBottom $ly@@428) |self#0@@153|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterStart$V@@1 T@U) ($ly@@429 T@U) (|self#0@@154| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@1) TyType) (= (type $ly@@429) LayerTypeType)) (= (type |self#0@@154|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154|) (and ($Is |self#0@@154| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154|)))) (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154| (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@429 |self#0@@154|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@429 |self#0@@154|)) (|Set#Empty| BoxType))) ($Is (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@429 |self#0@@154|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |2392| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@429 |self#0@@154|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V@@2 T@U) ($ly@@430 T@U) (|self#0@@155| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@2) TyType) (= (type $ly@@430) LayerTypeType)) (= (type |self#0@@155|) DatatypeTypeType)) ($Is |self#0@@155| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@2))) (and (=> (|MutableMapModel.__default.SimpleIterStart#requires| MutableMapModel._default.SimpleIterStart$V@@2 $ly@@430 |self#0@@155|) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@2 |self#0@@155|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@2 |self#0@@155|) (|MutableMapModel.__default.SimpleIterStart#requires| MutableMapModel._default.SimpleIterStart$V@@2 $ly@@430 |self#0@@155|)))) :qid |unknown.0:0| :skolemid |2393| :pattern ( (|MutableMapModel.__default.SimpleIterStart#requires| MutableMapModel._default.SimpleIterStart$V@@2 $ly@@430 |self#0@@155|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterStart$V@@3 T@U) ($ly@@431 T@U) (|self#0@@156| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@3) TyType) (= (type $ly@@431) LayerTypeType)) (= (type |self#0@@156|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156|) (and ($Is |self#0@@156| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156|)))) (and (and (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156| (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@156|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@156|)))) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@3 ($LS $ly@@431) |self#0@@156|) (let ((|i#0@@111| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterStart$V@@3 ($LS $LZ) |self#0@@156| (LitInt 0)))) (let ((|it'#0@@0| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@111| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@156|))) |i#0@@111|))))) |it'#0@@0|))))) :qid |unknown.0:0| :skolemid |2394| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@3 ($LS $ly@@431) |self#0@@156|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterStart$V@@4 T@U) ($ly@@432 T@U) (|self#0@@157| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@4) TyType) (= (type $ly@@432) LayerTypeType)) (= (type |self#0@@157|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|)) (and ($Is |self#0@@157| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|)))))))) (and (and (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|) (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@157|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@157|)))))) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@4 ($LS $ly@@432) (Lit |self#0@@157|)) (let ((|i#1@@19| (LitInt (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterStart$V@@4 ($LS $LZ) (Lit |self#0@@157|) (LitInt 0))))) (let ((|it'#1@@0| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@19| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@157|)))))) |i#1@@19|))))) |it'#1@@0|))))) :qid |unknown.0:0| :weight 3 :skolemid |2395| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@4 ($LS $ly@@432) (Lit |self#0@@157|))) ))))
(assert (forall ((arg0@@355 T@U) (arg1@@207 T@U) (arg2@@147 T@U) (arg3@@93 T@U) ) (! (= (type (MutableMapModel.__default.IterInc arg0@@355 arg1@@207 arg2@@147 arg3@@93)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.IterInc| :pattern ( (MutableMapModel.__default.IterInc arg0@@355 arg1@@207 arg2@@147 arg3@@93)) )))
(assert (forall ((MutableMapModel._default.IterInc$V T@U) ($ly@@433 T@U) (|self#0@@158| T@U) (|it#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterInc$V) TyType) (= (type $ly@@433) LayerTypeType)) (= (type |self#0@@158|) DatatypeTypeType)) (= (type |it#0@@15|) DatatypeTypeType)) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V ($LS $ly@@433) |self#0@@158| |it#0@@15|) (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V $ly@@433 |self#0@@158| |it#0@@15|))) :qid |unknown.0:0| :skolemid |2396| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V ($LS $ly@@433) |self#0@@158| |it#0@@15|)) )))
(assert (forall ((MutableMapModel._default.IterInc$V@@0 T@U) ($ly@@434 T@U) (|self#0@@159| T@U) (|it#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterInc$V@@0) TyType) (= (type $ly@@434) LayerTypeType)) (= (type |self#0@@159|) DatatypeTypeType)) (= (type |it#0@@16|) DatatypeTypeType)) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 $ly@@434 |self#0@@159| |it#0@@16|) (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 $LZ |self#0@@159| |it#0@@16|))) :qid |unknown.0:0| :skolemid |2397| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 (AsFuelBottom $ly@@434) |self#0@@159| |it#0@@16|)) )))
(assert  (=> true (forall ((MutableMapModel._default.IterInc$V@@1 T@U) ($ly@@435 T@U) (|self#0@@160| T@U) (|it#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@1) TyType) (= (type $ly@@435) LayerTypeType)) (= (type |self#0@@160|) DatatypeTypeType)) (= (type |it#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@1 |self#0@@160| |it#0@@17|) (and (and ($Is |self#0@@160| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@1)) ($Is |it#0@@17| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@1))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@1 |self#0@@160|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@1 |self#0@@160| |it#0@@17|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@17|)))))) (and (and (and (and (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@1 |self#0@@160| (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|)) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|)) (|Set#Union| (MutableMapModel.Iterator.s |it#0@@17|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@17|)))))))) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|))) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@160|))))) (|ORD#Less| (MutableMapModel.Iterator.decreaser (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|)) (MutableMapModel.Iterator.decreaser |it#0@@17|))) ($Is (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|) (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@1)))) :qid |unknown.0:0| :skolemid |2398| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@435 |self#0@@160| |it#0@@17|)) ))))
(assert (forall ((MutableMapModel._default.IterInc$V@@2 T@U) ($ly@@436 T@U) (|self#0@@161| T@U) (|it#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@2) TyType) (= (type $ly@@436) LayerTypeType)) (= (type |self#0@@161|) DatatypeTypeType)) (= (type |it#0@@18|) DatatypeTypeType)) (and ($Is |self#0@@161| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@2)) ($Is |it#0@@18| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@2)))) (and (=> (|MutableMapModel.__default.IterInc#requires| MutableMapModel._default.IterInc$V@@2 $ly@@436 |self#0@@161| |it#0@@18|) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@2 |self#0@@161|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@2 |self#0@@161| |it#0@@18|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@18|)))) (=> (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@2 |self#0@@161|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@2 |self#0@@161| |it#0@@18|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@18|))) (|MutableMapModel.__default.IterInc#requires| MutableMapModel._default.IterInc$V@@2 $ly@@436 |self#0@@161| |it#0@@18|)))) :qid |unknown.0:0| :skolemid |2399| :pattern ( (|MutableMapModel.__default.IterInc#requires| MutableMapModel._default.IterInc$V@@2 $ly@@436 |self#0@@161| |it#0@@18|)) )))
(assert  (=> true (forall ((MutableMapModel._default.IterInc$V@@3 T@U) ($ly@@437 T@U) (|self#0@@162| T@U) (|it#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@3) TyType) (= (type $ly@@437) LayerTypeType)) (= (type |self#0@@162|) DatatypeTypeType)) (= (type |it#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@3 |self#0@@162| |it#0@@19|) (and (and ($Is |self#0@@162| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@3)) ($Is |it#0@@19| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@3))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@3 |self#0@@162|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@3 |self#0@@162| |it#0@@19|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@19|)))))) (and (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@19|) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterInc$V@@3 |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@19|) (MutableMapModel.Iterator.Iterator_q |it#0@@19|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@162|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@162|))))) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@3 ($LS $ly@@437) |self#0@@162| |it#0@@19|) (let ((|next#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@3 ($LS $LZ) |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1)))))) (let ((|i#0@@112| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@3 ($LS $LZ) |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1))))))) (let ((|it'#0@@1| (|#MutableMapModel.Iterator.Iterator| |i#0@@112| (|Set#Union| (MutableMapModel.Iterator.s |it#0@@19|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@19|)))))) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@162|))) |i#0@@112|)) |next#0@@0|))) |it'#0@@1|)))))) :qid |unknown.0:0| :skolemid |2400| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@3 ($LS $ly@@437) |self#0@@162| |it#0@@19|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.IterInc$V@@4 T@U) ($ly@@438 T@U) (|self#0@@163| T@U) (|it#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@4) TyType) (= (type $ly@@438) LayerTypeType)) (= (type |self#0@@163|) DatatypeTypeType)) (= (type |it#0@@20|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (Lit |it#0@@20|)) (and (and ($Is |self#0@@163| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@4)) ($Is |it#0@@20| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@4))) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (Lit |it#0@@20|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@20|))))))))))) (and (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|)) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1)))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@163|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@163|))))))) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@4 ($LS $ly@@438) (Lit |self#0@@163|) (Lit |it#0@@20|)) (let ((|next#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@4 ($LS $LZ) (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1)))))))) (let ((|i#1@@20| (U_2_int ($Unbox intType (_System.Tuple2._0 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@4 ($LS $LZ) (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1))))))))) (let ((|it'#1@@1| (|#MutableMapModel.Iterator.Iterator| |i#1@@20| (|Set#Union| (MutableMapModel.Iterator.s (Lit |it#0@@20|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@20|))))))))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@163|)))))) |i#1@@20|)) |next#1@@0|))) |it'#1@@1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2401| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@4 ($LS $ly@@438) (Lit |self#0@@163|) (Lit |it#0@@20|))) ))))
(assert (forall ((arg0@@356 T@U) (arg1@@208 T@U) (arg2@@148 T@U) (arg3@@94 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterInc arg0@@356 arg1@@208 arg2@@148 arg3@@94)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterInc| :pattern ( (MutableMapModel.__default.SimpleIterInc arg0@@356 arg1@@208 arg2@@148 arg3@@94)) )))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V T@U) ($ly@@439 T@U) (|self#0@@164| T@U) (|it#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V) TyType) (= (type $ly@@439) LayerTypeType)) (= (type |self#0@@164|) DatatypeTypeType)) (= (type |it#0@@21|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V ($LS $ly@@439) |self#0@@164| |it#0@@21|) (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V $ly@@439 |self#0@@164| |it#0@@21|))) :qid |unknown.0:0| :skolemid |2402| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V ($LS $ly@@439) |self#0@@164| |it#0@@21|)) )))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V@@0 T@U) ($ly@@440 T@U) (|self#0@@165| T@U) (|it#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@0) TyType) (= (type $ly@@440) LayerTypeType)) (= (type |self#0@@165|) DatatypeTypeType)) (= (type |it#0@@22|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 $ly@@440 |self#0@@165| |it#0@@22|) (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 $LZ |self#0@@165| |it#0@@22|))) :qid |unknown.0:0| :skolemid |2403| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 (AsFuelBottom $ly@@440) |self#0@@165| |it#0@@22|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterInc$V@@1 T@U) ($ly@@441 T@U) (|self#0@@166| T@U) (|it#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@1) TyType) (= (type $ly@@441) LayerTypeType)) (= (type |self#0@@166|) DatatypeTypeType)) (= (type |it#0@@23|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|) (and (and ($Is |self#0@@166| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@1)) ($Is |it#0@@23| Tclass.MutableMapModel.SimpleIterator)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|)))))) (and (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@441 |self#0@@166| |it#0@@23|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@441 |self#0@@166| |it#0@@23|)) (|Set#Union| (MutableMapModel.SimpleIterator.s |it#0@@23|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|)))))))) (|ORD#Less| (MutableMapModel.SimpleIterator.decreaser (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@441 |self#0@@166| |it#0@@23|)) (MutableMapModel.SimpleIterator.decreaser |it#0@@23|))) ($Is (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@441 |self#0@@166| |it#0@@23|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |2404| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@441 |self#0@@166| |it#0@@23|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V@@2 T@U) ($ly@@442 T@U) (|self#0@@167| T@U) (|it#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@2) TyType) (= (type $ly@@442) LayerTypeType)) (= (type |self#0@@167|) DatatypeTypeType)) (= (type |it#0@@24|) DatatypeTypeType)) (and ($Is |self#0@@167| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@2)) ($Is |it#0@@24| Tclass.MutableMapModel.SimpleIterator))) (and (=> (|MutableMapModel.__default.SimpleIterInc#requires| MutableMapModel._default.SimpleIterInc$V@@2 $ly@@442 |self#0@@167| |it#0@@24|) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|)))) (=> (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|))) (|MutableMapModel.__default.SimpleIterInc#requires| MutableMapModel._default.SimpleIterInc$V@@2 $ly@@442 |self#0@@167| |it#0@@24|)))) :qid |unknown.0:0| :skolemid |2405| :pattern ( (|MutableMapModel.__default.SimpleIterInc#requires| MutableMapModel._default.SimpleIterInc$V@@2 $ly@@442 |self#0@@167| |it#0@@24|)) )))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterInc$V@@3 T@U) ($ly@@443 T@U) (|self#0@@168| T@U) (|it#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@3) TyType) (= (type $ly@@443) LayerTypeType)) (= (type |self#0@@168|) DatatypeTypeType)) (= (type |it#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|) (and (and ($Is |self#0@@168| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@3)) ($Is |it#0@@25| Tclass.MutableMapModel.SimpleIterator)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@25|) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| (+ (MutableMapModel.SimpleIterator.i |it#0@@25|) 1))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@25|) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@168|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@168|))))) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@3 ($LS $ly@@443) |self#0@@168| |it#0@@25|) (let ((|i#0@@113| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterInc$V@@3 ($LS $LZ) |self#0@@168| (+ (MutableMapModel.SimpleIterator.i |it#0@@25|) 1)))) (let ((|it'#0@@2| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@113| (|Set#Union| (MutableMapModel.SimpleIterator.s |it#0@@25|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)))))) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@168|))) |i#0@@113|))))) |it'#0@@2|))))) :qid |unknown.0:0| :skolemid |2406| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@3 ($LS $ly@@443) |self#0@@168| |it#0@@25|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.SimpleIterInc$V@@4 T@U) ($ly@@444 T@U) (|self#0@@169| T@U) (|it#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@4) TyType) (= (type $ly@@444) LayerTypeType)) (= (type |self#0@@169|) DatatypeTypeType)) (= (type |it#0@@26|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|)) (and (and ($Is |self#0@@169| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@4)) ($Is |it#0@@26| Tclass.MutableMapModel.SimpleIterator)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|))))))))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@26|)) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (LitInt (+ (MutableMapModel.SimpleIterator.i (Lit |it#0@@26|)) 1)))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@26|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@169|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@169|))))))) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@4 ($LS $ly@@444) (Lit |self#0@@169|) (Lit |it#0@@26|)) (let ((|i#1@@21| (LitInt (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterInc$V@@4 ($LS $LZ) (Lit |self#0@@169|) (LitInt (+ (MutableMapModel.SimpleIterator.i (Lit |it#0@@26|)) 1)))))) (let ((|it'#1@@2| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@21| (|Set#Union| (MutableMapModel.SimpleIterator.s (Lit |it#0@@26|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|))))))))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@169|)))))) |i#1@@21|))))) |it'#1@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |2407| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@4 ($LS $ly@@444) (Lit |self#0@@169|) (Lit |it#0@@26|))) ))))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V T@U) ($ly@@445 T@U) (|self#0@@170| T@U) (|it#0@@27| T@U) (|m#0@@81| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V) TyType) (= (type $ly@@445) LayerTypeType)) (= (type |self#0@@170|) DatatypeTypeType)) (= (type |it#0@@27|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V ($LS $ly@@445) |self#0@@170| |it#0@@27| |m#0@@81|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V $ly@@445 |self#0@@170| |it#0@@27| |m#0@@81|))) :qid |unknown.0:0| :skolemid |2408| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V ($LS $ly@@445) |self#0@@170| |it#0@@27| |m#0@@81|)) )))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V@@0 T@U) ($ly@@446 T@U) (|self#0@@171| T@U) (|it#0@@28| T@U) (|m#0@@82| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@0) TyType) (= (type $ly@@446) LayerTypeType)) (= (type |self#0@@171|) DatatypeTypeType)) (= (type |it#0@@28|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 $ly@@446 |self#0@@171| |it#0@@28| |m#0@@82|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 $LZ |self#0@@171| |it#0@@28| |m#0@@82|))) :qid |unknown.0:0| :skolemid |2409| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 (AsFuelBottom $ly@@446) |self#0@@171| |it#0@@28| |m#0@@82|)) )))
(assert  (=> true (forall ((MutableMapModel._default.MaxKeyIterate$V@@1 T@U) ($ly@@447 T@U) (|self#0@@172| T@U) (|it#0@@29| T@U) (|m#0@@83| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@1) TyType) (= (type $ly@@447) LayerTypeType)) (= (type |self#0@@172|) DatatypeTypeType)) (= (type |it#0@@29|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172| |it#0@@29| |m#0@@83|) (and (and (and ($Is |self#0@@172| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@1)) ($Is |it#0@@29| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@1))) (and (<= (LitInt 0) |m#0@@83|) (< |m#0@@83| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172| |it#0@@29|)) (forall ((|key#0@@109| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#0@@109|) (< |key#0@@109| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@29|) ($Box (int_2_U |key#0@@109|))))) (<= |key#0@@109| |m#0@@83|)) :qid |MutableM.1689:19| :skolemid |2410| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@29|) ($Box (int_2_U |key#0@@109|)))) )))))) (and (forall ((|key#1@@17| T@U) ) (!  (=> (= (type |key#1@@17|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#1@@17|)) (< (U_2_int |key#1@@17|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@172|)) ($Box |key#1@@17|)))) (<= (U_2_int |key#1@@17|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@447 |self#0@@172| |it#0@@29| |m#0@@83|)))) :qid |MutableM.1690:18| :skolemid |2411| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@172|)) ($Box |key#1@@17|))) )) (and (<= (LitInt 0) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@447 |self#0@@172| |it#0@@29| |m#0@@83|)) (< (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@447 |self#0@@172| |it#0@@29| |m#0@@83|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2412| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@447 |self#0@@172| |it#0@@29| |m#0@@83|)) ))))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V@@2 T@U) ($ly@@448 T@U) (|self#0@@173| T@U) (|it#0@@30| T@U) (|m#0@@84| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@2) TyType) (= (type $ly@@448) LayerTypeType)) (= (type |self#0@@173|) DatatypeTypeType)) (= (type |it#0@@30|) DatatypeTypeType)) (and (and ($Is |self#0@@173| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@2)) ($Is |it#0@@30| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@2))) (and (<= (LitInt 0) |m#0@@84|) (< |m#0@@84| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.MaxKeyIterate#requires| MutableMapModel._default.MaxKeyIterate$V@@2 $ly@@448 |self#0@@173| |it#0@@30| |m#0@@84|) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173| |it#0@@30|)) (forall ((|key#2@@3| T@U) ) (!  (=> (= (type |key#2@@3|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#2@@3|)) (< (U_2_int |key#2@@3|) 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box |key#2@@3|)))) (<= (U_2_int |key#2@@3|) |m#0@@84|))) :qid |MutableM.1689:19| :skolemid |2413| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box |key#2@@3|))) )))) (=> (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173| |it#0@@30|)) (forall ((|key#2@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#2@@4|) (< |key#2@@4| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box (int_2_U |key#2@@4|))))) (<= |key#2@@4| |m#0@@84|)) :qid |MutableM.1689:19| :skolemid |2413| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box (int_2_U |key#2@@4|)))) ))) (|MutableMapModel.__default.MaxKeyIterate#requires| MutableMapModel._default.MaxKeyIterate$V@@2 $ly@@448 |self#0@@173| |it#0@@30| |m#0@@84|)))) :qid |unknown.0:0| :skolemid |2414| :pattern ( (|MutableMapModel.__default.MaxKeyIterate#requires| MutableMapModel._default.MaxKeyIterate$V@@2 $ly@@448 |self#0@@173| |it#0@@30| |m#0@@84|)) )))
(assert (= (type StartFuel_MutableMapModel._default.IterInc) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.MaxKeyIterate$V@@3 T@U) ($ly@@449 T@U) (|self#0@@174| T@U) (|it#0@@31| T@U) (|m#0@@85| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@3) TyType) (= (type $ly@@449) LayerTypeType)) (= (type |self#0@@174|) DatatypeTypeType)) (= (type |it#0@@31|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31| |m#0@@85|) (and (and (and ($Is |self#0@@174| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@3)) ($Is |it#0@@31| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@3))) (and (<= (LitInt 0) |m#0@@85|) (< |m#0@@85| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31|)) (forall ((|key#2@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#2@@5|) (< |key#2@@5| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@31|) ($Box (int_2_U |key#2@@5|))))) (<= |key#2@@5| |m#0@@85|)) :qid |MutableM.1689:19| :skolemid |2413| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@31|) ($Box (int_2_U |key#2@@5|)))) )))))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@31|) (=> (not (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@31|))) (and (MutableMapModel.Iterator.Iterator_q |it#0@@31|) (let ((|key#3@@2| (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@31|)))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31|) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@3 StartFuel_MutableMapModel._default.IterInc |self#0@@174| |it#0@@31|) (ite (< |m#0@@85| |key#3@@2|) |key#3@@2| |m#0@@85|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 ($LS $ly@@449) |self#0@@174| |it#0@@31| |m#0@@85|) (ite (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@31|)) |m#0@@85| (let ((|key#3@@3| (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@31|)))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 $ly@@449 |self#0@@174| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@3 StartFuel_MutableMapModel._default.IterInc |self#0@@174| |it#0@@31|) (ite (< |m#0@@85| |key#3@@3|) |key#3@@3| |m#0@@85|))))))) :qid |unknown.0:0| :skolemid |2415| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 ($LS $ly@@449) |self#0@@174| |it#0@@31| |m#0@@85|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.MaxKeyIterate$V@@4 T@U) ($ly@@450 T@U) (|self#0@@175| T@U) (|it#0@@32| T@U) (|m#0@@86| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@4) TyType) (= (type $ly@@450) LayerTypeType)) (= (type |self#0@@175|) DatatypeTypeType)) (= (type |it#0@@32|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|) |m#0@@86|) (and (and (and ($Is |self#0@@175| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@4)) ($Is |it#0@@32| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@4))) (and (<= (LitInt 0) |m#0@@86|) (< |m#0@@86| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|))) (forall ((|key#4| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#4|) (< |key#4| 18446744073709551616)) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@32|))) ($Box (int_2_U |key#4|))))) (<= |key#4| |m#0@@86|)) :qid |MutableM.1689:19| :skolemid |2416| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@32|) ($Box (int_2_U |key#4|)))) )))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@32|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|)))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@32|)) (let ((|key#5| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|))))))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@4 StartFuel_MutableMapModel._default.IterInc |self#0@@175| (Lit |it#0@@32|)) (ite (< |m#0@@86| |key#5|) |key#5| |m#0@@86|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@450) |self#0@@175| (Lit |it#0@@32|) |m#0@@86|) (ite (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|)))) |m#0@@86| (let ((|key#5@@0| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|))))))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@450) |self#0@@175| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@4 StartFuel_MutableMapModel._default.IterInc |self#0@@175| (Lit |it#0@@32|)) (ite (< |m#0@@86| |key#5@@0|) |key#5@@0| |m#0@@86|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2417| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@450) |self#0@@175| (Lit |it#0@@32|) |m#0@@86|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.MaxKeyIterate$V@@5 T@U) ($ly@@451 T@U) (|self#0@@176| T@U) (|it#0@@33| T@U) (|m#0@@87| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@5) TyType) (= (type $ly@@451) LayerTypeType)) (= (type |self#0@@176|) DatatypeTypeType)) (= (type |it#0@@33|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@87|)) (and (and (and ($Is |self#0@@176| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@5)) ($Is |it#0@@33| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@5))) (and (<= (LitInt 0) |m#0@@87|) (< |m#0@@87| 18446744073709551616))) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|)))))) (forall ((|key#6| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#6|) (< |key#6| 18446744073709551616)) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@33|))) ($Box (int_2_U |key#6|))))) (<= |key#6| (LitInt |m#0@@87|))) :qid |MutableM.1689:19| :skolemid |2418| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@33|) ($Box (int_2_U |key#6|)))) )))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@33|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|)))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@33|)) (let ((|key#7| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|))))))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@5 StartFuel_MutableMapModel._default.IterInc (Lit |self#0@@176|) (Lit |it#0@@33|)) (ite (< |m#0@@87| |key#7|) |key#7| |m#0@@87|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@451) (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@87|)) (ite (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|)))) |m#0@@87| (let ((|key#7@@0| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|))))))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@451) (Lit |self#0@@176|) (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@5 StartFuel_MutableMapModel._default.IterInc (Lit |self#0@@176|) (Lit |it#0@@33|)) (ite (< |m#0@@87| |key#7@@0|) |key#7@@0| |m#0@@87|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2419| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@451) (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@87|))) ))))
(assert (forall ((MutableMapModel._default.MaxKey$V T@U) ($ly@@452 T@U) (|self#0@@177| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MaxKey$V) TyType) (= (type $ly@@452) LayerTypeType)) (= (type |self#0@@177|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V ($LS $ly@@452) |self#0@@177|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V $ly@@452 |self#0@@177|))) :qid |unknown.0:0| :skolemid |2420| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V ($LS $ly@@452) |self#0@@177|)) )))
(assert (forall ((MutableMapModel._default.MaxKey$V@@0 T@U) ($ly@@453 T@U) (|self#0@@178| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MaxKey$V@@0) TyType) (= (type $ly@@453) LayerTypeType)) (= (type |self#0@@178|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 $ly@@453 |self#0@@178|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 $LZ |self#0@@178|))) :qid |unknown.0:0| :skolemid |2421| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 (AsFuelBottom $ly@@453) |self#0@@178|)) )))
(assert  (=> true (forall ((MutableMapModel._default.MaxKey$V@@1 T@U) ($ly@@454 T@U) (|self#0@@179| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@1) TyType) (= (type $ly@@454) LayerTypeType)) (= (type |self#0@@179|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@1 |self#0@@179|) (and ($Is |self#0@@179| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@1 |self#0@@179|)))) (and (forall ((|key#0@@110| T@U) ) (!  (=> (= (type |key#0@@110|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#0@@110|)) (< (U_2_int |key#0@@110|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@179|)) ($Box |key#0@@110|)))) (<= (U_2_int |key#0@@110|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@454 |self#0@@179|)))) :qid |MutableM.1703:18| :skolemid |2422| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@179|)) ($Box |key#0@@110|))) )) (and (<= (LitInt 0) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@454 |self#0@@179|)) (< (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@454 |self#0@@179|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2423| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@454 |self#0@@179|)) ))))
(assert (forall ((MutableMapModel._default.MaxKey$V@@2 T@U) ($ly@@455 T@U) (|self#0@@180| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@2) TyType) (= (type $ly@@455) LayerTypeType)) (= (type |self#0@@180|) DatatypeTypeType)) ($Is |self#0@@180| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@2))) (and (=> (|MutableMapModel.__default.MaxKey#requires| MutableMapModel._default.MaxKey$V@@2 $ly@@455 |self#0@@180|) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@2 |self#0@@180|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@2 |self#0@@180|) (|MutableMapModel.__default.MaxKey#requires| MutableMapModel._default.MaxKey$V@@2 $ly@@455 |self#0@@180|)))) :qid |unknown.0:0| :skolemid |2424| :pattern ( (|MutableMapModel.__default.MaxKey#requires| MutableMapModel._default.MaxKey$V@@2 $ly@@455 |self#0@@180|)) )))
(assert (= (type StartFuel_MutableMapModel._default.IterStart) LayerTypeType))
(assert  (=> true (forall ((MutableMapModel._default.MaxKey$V@@3 T@U) ($ly@@456 T@U) (|self#0@@181| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@3) TyType) (= (type $ly@@456) LayerTypeType)) (= (type |self#0@@181|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181|) (and ($Is |self#0@@181| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@3 |self#0@@181|)))) (and (and (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181|) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181| (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@3 StartFuel_MutableMapModel._default.IterStart |self#0@@181|) (LitInt 0))) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@3 ($LS $ly@@456) |self#0@@181|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKey$V@@3 ($LS $LZ) |self#0@@181| (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@3 StartFuel_MutableMapModel._default.IterStart |self#0@@181|) (LitInt 0))))) :qid |unknown.0:0| :skolemid |2425| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@3 ($LS $ly@@456) |self#0@@181|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.MaxKey$V@@4 T@U) ($ly@@457 T@U) (|self#0@@182| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@4) TyType) (= (type $ly@@457) LayerTypeType)) (= (type |self#0@@182|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|)) (and ($Is |self#0@@182| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|)))))))) (and (and (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|) (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@4 StartFuel_MutableMapModel._default.IterStart (Lit |self#0@@182|)) (LitInt 0))) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@4 ($LS $ly@@457) (Lit |self#0@@182|)) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKey$V@@4 ($LS $LZ) (Lit |self#0@@182|) (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@4 StartFuel_MutableMapModel._default.IterStart (Lit |self#0@@182|)) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2426| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@4 ($LS $ly@@457) (Lit |self#0@@182|))) ))))
(assert (forall ((arg0@@357 T@U) (arg1@@209 T@U) (arg2@@149 T@U) (arg3@@95 T@U) (arg4@@63 T@U) ) (! (= (type (MutableMapModel.__default.UpdateByIter arg0@@357 arg1@@209 arg2@@149 arg3@@95 arg4@@63)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.UpdateByIter| :pattern ( (MutableMapModel.__default.UpdateByIter arg0@@357 arg1@@209 arg2@@149 arg3@@95 arg4@@63)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V T@U) ($ly@@458 T@U) (|self#0@@183| T@U) (|it#0@@34| T@U) (|value#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V) TyType) (= (type $ly@@458) LayerTypeType)) (= (type |self#0@@183|) DatatypeTypeType)) (= (type |it#0@@34|) DatatypeTypeType)) (= (type |value#0@@25|) BoxType)) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V ($LS $ly@@458) |self#0@@183| |it#0@@34| |value#0@@25|) (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V $ly@@458 |self#0@@183| |it#0@@34| |value#0@@25|))) :qid |unknown.0:0| :skolemid |2427| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V ($LS $ly@@458) |self#0@@183| |it#0@@34| |value#0@@25|)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@0 T@U) ($ly@@459 T@U) (|self#0@@184| T@U) (|it#0@@35| T@U) (|value#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@0) TyType) (= (type $ly@@459) LayerTypeType)) (= (type |self#0@@184|) DatatypeTypeType)) (= (type |it#0@@35|) DatatypeTypeType)) (= (type |value#0@@26|) BoxType)) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 $ly@@459 |self#0@@184| |it#0@@35| |value#0@@26|) (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 $LZ |self#0@@184| |it#0@@35| |value#0@@26|))) :qid |unknown.0:0| :skolemid |2428| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 (AsFuelBottom $ly@@459) |self#0@@184| |it#0@@35| |value#0@@26|)) )))
(assert  (=> true (forall ((MutableMapModel._default.UpdateByIter$V@@1 T@U) ($ly@@460 T@U) (|self#0@@185| T@U) (|it#0@@36| T@U) (|value#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@1) TyType) (= (type $ly@@460) LayerTypeType)) (= (type |self#0@@185|) DatatypeTypeType)) (= (type |it#0@@36|) DatatypeTypeType)) (= (type |value#0@@27|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36| |value#0@@27|) (and (and (and ($Is |self#0@@185| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@1)) ($Is |it#0@@36| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@27| MutableMapModel._default.UpdateByIter$V@@1)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|)))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@1 (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@460 |self#0@@185| |it#0@@36| |value#0@@27|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@460 |self#0@@185| |it#0@@36| |value#0@@27|)) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@185|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|)))) |value#0@@27|))) (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@460 |self#0@@185| |it#0@@36| |value#0@@27|)) (MutableMapModel.LinearHashMap.count |self#0@@185|))) ($Is (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@460 |self#0@@185| |it#0@@36| |value#0@@27|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@1)))) :qid |unknown.0:0| :skolemid |2429| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@460 |self#0@@185| |it#0@@36| |value#0@@27|)) ))))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@2 T@U) ($ly@@461 T@U) (|self#0@@186| T@U) (|it#0@@37| T@U) (|value#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@2) TyType) (= (type $ly@@461) LayerTypeType)) (= (type |self#0@@186|) DatatypeTypeType)) (= (type |it#0@@37|) DatatypeTypeType)) (= (type |value#0@@28|) BoxType)) (and (and ($Is |self#0@@186| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@2)) ($Is |it#0@@37| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@28| MutableMapModel._default.UpdateByIter$V@@2))) (and (=> (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@2 $ly@@461 |self#0@@186| |it#0@@37| |value#0@@28|) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|)))) (=> (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|))) (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@2 $ly@@461 |self#0@@186| |it#0@@37| |value#0@@28|)))) :qid |unknown.0:0| :skolemid |2430| :pattern ( (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@2 $ly@@461 |self#0@@186| |it#0@@37| |value#0@@28|)) )))
(assert  (=> true (forall ((MutableMapModel._default.UpdateByIter$V@@3 T@U) ($ly@@462 T@U) (|self#0@@187| T@U) (|it#0@@38| T@U) (|value#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@3) TyType) (= (type $ly@@462) LayerTypeType)) (= (type |self#0@@187|) DatatypeTypeType)) (= (type |it#0@@38|) DatatypeTypeType)) (= (type |value#0@@29|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38| |value#0@@29|) (and (and (and ($Is |self#0@@187| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@3)) ($Is |it#0@@38| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@29| MutableMapModel._default.UpdateByIter$V@@3)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@38|)) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@187|) (MutableMapModel.SimpleIterator.i |it#0@@38|) |value#0@@29|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@3 ($LS $ly@@462) |self#0@@187| |it#0@@38| |value#0@@29|) (let ((|underlying#0@@7| (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@187|) (MutableMapModel.SimpleIterator.i |it#0@@38|) |value#0@@29|))) (let ((|self'#0@@4| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#0@@7| (MutableMapModel.LinearHashMap.count |self#0@@187|) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@187|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)))) |value#0@@29|)))) |self'#0@@4|))))) :qid |unknown.0:0| :skolemid |2431| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@3 ($LS $ly@@462) |self#0@@187| |it#0@@38| |value#0@@29|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.UpdateByIter$V@@4 T@U) ($ly@@463 T@U) (|self#0@@188| T@U) (|it#0@@39| T@U) (|value#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@4) TyType) (= (type $ly@@463) LayerTypeType)) (= (type |self#0@@188|) DatatypeTypeType)) (= (type |it#0@@39|) DatatypeTypeType)) (= (type |value#0@@30|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|) (and (and (and ($Is |self#0@@188| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@4)) ($Is |it#0@@39| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@30| MutableMapModel._default.UpdateByIter$V@@4)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|))))))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@39|))) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@188|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@39|))) |value#0@@30|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|))))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@4 ($LS $ly@@463) (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|) (let ((|underlying#1| (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@188|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@39|))) |value#0@@30|))) (let ((|self'#1@@4| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#1| (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@188|))) (|Map#Build| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@188|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|))))))) |value#0@@30|)))) |self'#1@@4|))))) :qid |unknown.0:0| :weight 3 :skolemid |2432| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@4 ($LS $ly@@463) (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.UpdateByIter$V@@5 T@U) ($ly@@464 T@U) (|self#0@@189| T@U) (|it#0@@40| T@U) (|value#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@5) TyType) (= (type $ly@@464) LayerTypeType)) (= (type |self#0@@189|) DatatypeTypeType)) (= (type |it#0@@40|) DatatypeTypeType)) (= (type |value#0@@31|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|)) (and (and (and ($Is |self#0@@189| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@5)) ($Is |it#0@@40| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@31| MutableMapModel._default.UpdateByIter$V@@5)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|))))))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@40|))) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@189|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@40|))) (Lit |value#0@@31|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|))))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@5 ($LS $ly@@464) (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|)) (let ((|underlying#2| (Lit (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@5 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@189|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@40|))) (Lit |value#0@@31|))))) (let ((|self'#2@@2| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#2| (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@189|))) (|Map#Build| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@189|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|))))))) (Lit |value#0@@31|))))) |self'#2@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |2433| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@5 ($LS $ly@@464) (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|))) ))))
(assert (forall ((arg0@@358 T@U) (arg1@@210 T@U) (arg2@@150 Int) ) (! (= (type (MutableMapModel.__default.setUpTo arg0@@358 arg1@@210 arg2@@150)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.setUpTo| :pattern ( (MutableMapModel.__default.setUpTo arg0@@358 arg1@@210 arg2@@150)) )))
(assert  (=> true (forall ((MutableMapModel._default.setUpTo$V T@U) (|self#0@@190| T@U) (|i#0@@114| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V) TyType) (= (type |self#0@@190|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@114|) (and ($Is |self#0@@190| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V)) (and (<= (LitInt 0) |i#0@@114|) (<= |i#0@@114| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@190|)))))))) ($Is (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@114|) (TSet Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |2434| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@114|)) ))))
(assert (forall ((MutableMapModel._default.setUpTo$V@@0 T@U) (|self#0@@191| T@U) (|i#0@@115| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@0) TyType) (= (type |self#0@@191|) DatatypeTypeType)) ($Is |self#0@@191| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@0))) (and (=> (|MutableMapModel.__default.setUpTo#requires| MutableMapModel._default.setUpTo$V@@0 |self#0@@191| |i#0@@115|) (and (<= (LitInt 0) |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@191|)))))) (=> (and (<= (LitInt 0) |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@191|))))) (|MutableMapModel.__default.setUpTo#requires| MutableMapModel._default.setUpTo$V@@0 |self#0@@191| |i#0@@115|)))) :qid |unknown.0:0| :skolemid |2435| :pattern ( (|MutableMapModel.__default.setUpTo#requires| MutableMapModel._default.setUpTo$V@@0 |self#0@@191| |i#0@@115|)) )))
(assert (forall ((arg0@@359 Int) (arg1@@211 Int) (arg2@@151 T@U) (arg3@@96 T@U) (arg4@@64 T@U) ) (! (= (type (|lambda#101| arg0@@359 arg1@@211 arg2@@151 arg3@@96 arg4@@64)) (MapType0Type BoxType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@359 arg1@@211 arg2@@151 arg3@@96 arg4@@64)) )))
(assert  (=> true (forall ((MutableMapModel._default.setUpTo$V@@1 T@U) (|self#0@@192| T@U) (|i#0@@116| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@1) TyType) (= (type |self#0@@192|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@116|) (and ($Is |self#0@@192| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@1)) (and (<= (LitInt 0) |i#0@@116|) (<= |i#0@@116| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)))))))) (and (forall ((|j#0@@20| Int) ) (!  (and (=> (< |j#0@@20| |i#0@@116|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@192|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@192|)))) (=> (and (and (<= (LitInt 0) |j#0@@20|) (< |j#0@@20| |i#0@@116|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) |j#0@@20|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@192|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@192|))))) :qid |MutableM.1757:9| :skolemid |2436| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) |j#0@@20|))) )) (= (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@116|) (|lambda#101| (LitInt 0) |i#0@@116| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)))))) :qid |unknown.0:0| :skolemid |2438| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@116|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.setUpTo$V@@2 T@U) (|self#0@@193| T@U) (|i#0@@117| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@2) TyType) (= (type |self#0@@193|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@117|)) (and ($Is |self#0@@193| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@2)) (and (<= (LitInt 0) (LitInt |i#0@@117|)) (<= (LitInt |i#0@@117|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))))))))) (and (forall ((|j#1@@10| Int) ) (!  (and (=> (< |j#1@@10| |i#0@@117|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@193|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|)))))) (=> (and (and (<= (LitInt 0) |j#1@@10|) (< |j#1@@10| |i#0@@117|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) |j#1@@10|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@193|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))))) :qid |MutableM.1757:9| :skolemid |2439| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@193|)) |j#1@@10|))) )) (= (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@117|)) (|lambda#101| (LitInt 0) |i#0@@117| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@193|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2441| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@117|))) ))))
(assert (forall ((arg0@@360 T@U) (arg1@@212 T@U) (arg2@@152 T@U) (arg3@@97 Int) ) (! (= (type (MutableMapModel.__default.FindSimpleIter arg0@@360 arg1@@212 arg2@@152 arg3@@97)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FindSimpleIter| :pattern ( (MutableMapModel.__default.FindSimpleIter arg0@@360 arg1@@212 arg2@@152 arg3@@97)) )))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V T@U) ($ly@@465 T@U) (|self#0@@194| T@U) (|key#0@@111| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FindSimpleIter$V) TyType) (= (type $ly@@465) LayerTypeType)) (= (type |self#0@@194|) DatatypeTypeType)) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V ($LS $ly@@465) |self#0@@194| |key#0@@111|) (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V $ly@@465 |self#0@@194| |key#0@@111|))) :qid |unknown.0:0| :skolemid |2442| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V ($LS $ly@@465) |self#0@@194| |key#0@@111|)) )))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V@@0 T@U) ($ly@@466 T@U) (|self#0@@195| T@U) (|key#0@@112| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@0) TyType) (= (type $ly@@466) LayerTypeType)) (= (type |self#0@@195|) DatatypeTypeType)) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 $ly@@466 |self#0@@195| |key#0@@112|) (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 $LZ |self#0@@195| |key#0@@112|))) :qid |unknown.0:0| :skolemid |2443| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 (AsFuelBottom $ly@@466) |self#0@@195| |key#0@@112|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FindSimpleIter$V@@1 T@U) ($ly@@467 T@U) (|self#0@@196| T@U) (|key#0@@113| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@1) TyType) (= (type $ly@@467) LayerTypeType)) (= (type |self#0@@196|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| |key#0@@113|) (and (and ($Is |self#0@@196| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@1)) (and (<= (LitInt 0) |key#0@@113|) (< |key#0@@113| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196|)))) (and (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@467 |self#0@@196| |key#0@@113|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@113|)))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@467 |self#0@@196| |key#0@@113|)) (|#MutableMapModel.IteratorOutput.Next| |key#0@@113| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@113|))))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@113|))))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@467 |self#0@@196| |key#0@@113|)) |#MutableMapModel.IteratorOutput.Done|))) ($Is (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@467 |self#0@@196| |key#0@@113|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |2444| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@467 |self#0@@196| |key#0@@113|)) ))))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V@@2 T@U) ($ly@@468 T@U) (|self#0@@197| T@U) (|key#0@@114| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@2) TyType) (= (type $ly@@468) LayerTypeType)) (= (type |self#0@@197|) DatatypeTypeType)) (and ($Is |self#0@@197| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@2)) (and (<= (LitInt 0) |key#0@@114|) (< |key#0@@114| 18446744073709551616)))) (and (=> (|MutableMapModel.__default.FindSimpleIter#requires| MutableMapModel._default.FindSimpleIter$V@@2 $ly@@468 |self#0@@197| |key#0@@114|) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@2 |self#0@@197|)) (=> (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@2 |self#0@@197|) (|MutableMapModel.__default.FindSimpleIter#requires| MutableMapModel._default.FindSimpleIter$V@@2 $ly@@468 |self#0@@197| |key#0@@114|)))) :qid |unknown.0:0| :skolemid |2445| :pattern ( (|MutableMapModel.__default.FindSimpleIter#requires| MutableMapModel._default.FindSimpleIter$V@@2 $ly@@468 |self#0@@197| |key#0@@114|)) )))
(assert  (=> true (forall ((MutableMapModel._default.FindSimpleIter$V@@3 T@U) ($ly@@469 T@U) (|self#0@@198| T@U) (|key#0@@115| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@3) TyType) (= (type $ly@@469) LayerTypeType)) (= (type |self#0@@198|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |key#0@@115|) (and (and ($Is |self#0@@198| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@3)) (and (<= (LitInt 0) |key#0@@115|) (< |key#0@@115| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198|)))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FindSimpleIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@115|)) (let ((|idx#0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@3 StartFuel_MutableMapModel._default.Probe (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@115|))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|))))) (let ((|i#0@@118| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0|))) |idx#0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))) (and (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |i#0@@118|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))))) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@3 ($LS $ly@@469) |self#0@@198| |key#0@@115|) (let ((|idx#0@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@3 StartFuel_MutableMapModel._default.Probe (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@115|))) (let ((|i#0@@119| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0@@0|))) |idx#0@@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))) (let ((|it#0@@41| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@119| (MutableMapModel.__default.setUpTo MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |i#0@@119|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|))) |i#0@@119|))))) |it#0@@41|)))))) :qid |unknown.0:0| :skolemid |2446| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@3 ($LS $ly@@469) |self#0@@198| |key#0@@115|)) ))))
(assert  (=> true (forall ((MutableMapModel._default.FindSimpleIter$V@@4 T@U) ($ly@@470 T@U) (|self#0@@199| T@U) (|key#0@@116| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@4) TyType) (= (type $ly@@470) LayerTypeType)) (= (type |self#0@@199|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) (LitInt |key#0@@116|)) (and (and ($Is |self#0@@199| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@4)) (and (<= (LitInt 0) |key#0@@116|) (< |key#0@@116| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@116|))) (let ((|idx#1| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@4 StartFuel_MutableMapModel._default.Probe (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@116|)))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))) (let ((|i#1@@22| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1|))) |idx#1| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))))) (and (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) |i#1@@22|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|)))))))))) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@4 ($LS $ly@@470) (Lit |self#0@@199|) (LitInt |key#0@@116|)) (let ((|idx#1@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@4 StartFuel_MutableMapModel._default.Probe (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@116|)))) (let ((|i#1@@23| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1@@0|))) |idx#1@@0| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))))) (let ((|it#1| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@23| (MutableMapModel.__default.setUpTo MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) |i#1@@23|) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|)))))) |i#1@@23|))))) |it#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2447| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@4 ($LS $ly@@470) (Lit |self#0@@199|) (LitInt |key#0@@116|))) ))))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (Tclass.MutableMap.FixedSizeHashMap? arg0@@361)) TyType) :qid |funType:Tclass.MutableMap.FixedSizeHashMap?| :pattern ( (Tclass.MutableMap.FixedSizeHashMap? arg0@@361)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V T@U) ) (!  (=> (= (type MutableMap.FixedSizeHashMap$V) TyType) (= (Tag (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V)) Tagclass.MutableMap.FixedSizeHashMap?)) :qid |unknown.0:0| :skolemid |2448| :pattern ( (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass.MutableMap.FixedSizeHashMap?_0 arg0@@362)) TyType) :qid |funType:Tclass.MutableMap.FixedSizeHashMap?_0| :pattern ( (Tclass.MutableMap.FixedSizeHashMap?_0 arg0@@362)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMap.FixedSizeHashMap$V@@0) TyType) (= (Tclass.MutableMap.FixedSizeHashMap?_0 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@0)) MutableMap.FixedSizeHashMap$V@@0)) :qid |unknown.0:0| :skolemid |2449| :pattern ( (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@0)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@1 T@U) (bx@@120 T@U) ) (!  (=> (and (and (= (type MutableMap.FixedSizeHashMap$V@@1) TyType) (= (type bx@@120) BoxType)) ($IsBox bx@@120 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@1))) (and (= ($Box ($Unbox refType bx@@120)) bx@@120) ($Is ($Unbox refType bx@@120) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |2450| :pattern ( ($IsBox bx@@120 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@1))) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@2 T@U) ($o@@71 T@U) ) (!  (=> (and (= (type MutableMap.FixedSizeHashMap$V@@2) TyType) (= (type $o@@71) refType)) (and (=> ($Is $o@@71 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@2)) (or (= $o@@71 null) (= (dtype $o@@71) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@2)))) (=> (or (= $o@@71 null) (= (dtype $o@@71) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@2))) ($Is $o@@71 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@2))))) :qid |unknown.0:0| :skolemid |2451| :pattern ( ($Is $o@@71 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@2))) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@3 T@U) ($o@@72 T@U) ($h@@113 T@U) ) (!  (=> (and (and (= (type MutableMap.FixedSizeHashMap$V@@3) TyType) (= (type $o@@72) refType)) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@72 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@3) $h@@113) (or (= $o@@72 null) (U_2_bool (MapType1Select (MapType0Select $h@@113 $o@@72) alloc)))) (=> (or (= $o@@72 null) (U_2_bool (MapType1Select (MapType0Select $h@@113 $o@@72) alloc))) ($IsAlloc $o@@72 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@3) $h@@113)))) :qid |unknown.0:0| :skolemid |2452| :pattern ( ($IsAlloc $o@@72 (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@3) $h@@113)) )))
(assert (= (type MutableMap.FixedSizeHashMap.Storage) (FieldType refType)))
(assert (= (FDim MutableMap.FixedSizeHashMap.Storage) 0))
(assert (= (FieldOfDecl refType class.MutableMap.FixedSizeHashMap? field$Storage) MutableMap.FixedSizeHashMap.Storage))
(assert  (not ($IsGhostField MutableMap.FixedSizeHashMap.Storage)))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@4 T@U) ($h@@114 T@U) ($o@@73 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@4) TyType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (= (type $o@@73) refType)) (and ($IsGoodHeap $h@@114) (and (not (= $o@@73 null)) (= (dtype $o@@73) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@4))))) ($Is (MapType1Select (MapType0Select $h@@114 $o@@73) MutableMap.FixedSizeHashMap.Storage) (Tclass._System.array (Tclass.MutableMapModel.Item MutableMap.FixedSizeHashMap$V@@4)))) :qid |unknown.0:0| :skolemid |2453| :pattern ( (MapType1Select (MapType0Select $h@@114 $o@@73) MutableMap.FixedSizeHashMap.Storage) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@4)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@5 T@U) ($h@@115 T@U) ($o@@74 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@5) TyType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (= (type $o@@74) refType)) (and (and ($IsGoodHeap $h@@115) (and (not (= $o@@74 null)) (= (dtype $o@@74) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@5)))) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@74) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@115 $o@@74) MutableMap.FixedSizeHashMap.Storage) (Tclass._System.array (Tclass.MutableMapModel.Item MutableMap.FixedSizeHashMap$V@@5)) $h@@115)) :qid |unknown.0:0| :skolemid |2454| :pattern ( (MapType1Select (MapType0Select $h@@115 $o@@74) MutableMap.FixedSizeHashMap.Storage) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@5)) )))
(assert (= (type MutableMap.FixedSizeHashMap.Count) (FieldType intType)))
(assert (= (FDim MutableMap.FixedSizeHashMap.Count) 0))
(assert (= (FieldOfDecl intType class.MutableMap.FixedSizeHashMap? field$Count) MutableMap.FixedSizeHashMap.Count))
(assert  (not ($IsGhostField MutableMap.FixedSizeHashMap.Count)))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@6 T@U) ($h@@116 T@U) ($o@@75 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@6) TyType) (= (type $h@@116) (MapType0Type refType MapType1Type))) (= (type $o@@75) refType)) (and ($IsGoodHeap $h@@116) (and (not (= $o@@75 null)) (= (dtype $o@@75) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@6))))) ($Is (MapType1Select (MapType0Select $h@@116 $o@@75) MutableMap.FixedSizeHashMap.Count) Tclass.NativeTypes.uint64)) :qid |unknown.0:0| :skolemid |2455| :pattern ( (MapType1Select (MapType0Select $h@@116 $o@@75) MutableMap.FixedSizeHashMap.Count) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@6)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@7 T@U) ($h@@117 T@U) ($o@@76 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@7) TyType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (= (type $o@@76) refType)) (and (and ($IsGoodHeap $h@@117) (and (not (= $o@@76 null)) (= (dtype $o@@76) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@117 $o@@76) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@117 $o@@76) MutableMap.FixedSizeHashMap.Count) Tclass.NativeTypes.uint64 $h@@117)) :qid |unknown.0:0| :skolemid |2456| :pattern ( (MapType1Select (MapType0Select $h@@117 $o@@76) MutableMap.FixedSizeHashMap.Count) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@7)) )))
(assert (= (type MutableMap.FixedSizeHashMap.Contents) (FieldType (MapType BoxType BoxType))))
(assert (= (FDim MutableMap.FixedSizeHashMap.Contents) 0))
(assert (= (FieldOfDecl (MapType BoxType BoxType) class.MutableMap.FixedSizeHashMap? field$Contents) MutableMap.FixedSizeHashMap.Contents))
(assert ($IsGhostField MutableMap.FixedSizeHashMap.Contents))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@8 T@U) ($h@@118 T@U) ($o@@77 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@8) TyType) (= (type $h@@118) (MapType0Type refType MapType1Type))) (= (type $o@@77) refType)) (and ($IsGoodHeap $h@@118) (and (not (= $o@@77 null)) (= (dtype $o@@77) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@8))))) ($Is (MapType1Select (MapType0Select $h@@118 $o@@77) MutableMap.FixedSizeHashMap.Contents) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMap.FixedSizeHashMap$V@@8)))) :qid |unknown.0:0| :skolemid |2457| :pattern ( (MapType1Select (MapType0Select $h@@118 $o@@77) MutableMap.FixedSizeHashMap.Contents) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@8)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@9 T@U) ($h@@119 T@U) ($o@@78 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@9) TyType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (= (type $o@@78) refType)) (and (and ($IsGoodHeap $h@@119) (and (not (= $o@@78 null)) (= (dtype $o@@78) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@9)))) (U_2_bool (MapType1Select (MapType0Select $h@@119 $o@@78) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@119 $o@@78) MutableMap.FixedSizeHashMap.Contents) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMap.FixedSizeHashMap$V@@9)) $h@@119)) :qid |unknown.0:0| :skolemid |2458| :pattern ( (MapType1Select (MapType0Select $h@@119 $o@@78) MutableMap.FixedSizeHashMap.Contents) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@9)) )))
(assert (= (type MutableMap.FixedSizeHashMap.Repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim MutableMap.FixedSizeHashMap.Repr) 0))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.MutableMap.FixedSizeHashMap? field$Repr) MutableMap.FixedSizeHashMap.Repr))
(assert ($IsGhostField MutableMap.FixedSizeHashMap.Repr))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@10 T@U) ($h@@120 T@U) ($o@@79 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@10) TyType) (= (type $h@@120) (MapType0Type refType MapType1Type))) (= (type $o@@79) refType)) (and ($IsGoodHeap $h@@120) (and (not (= $o@@79 null)) (= (dtype $o@@79) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@10))))) ($Is (MapType1Select (MapType0Select $h@@120 $o@@79) MutableMap.FixedSizeHashMap.Repr) (TSet Tclass._System.object))) :qid |unknown.0:0| :skolemid |2459| :pattern ( (MapType1Select (MapType0Select $h@@120 $o@@79) MutableMap.FixedSizeHashMap.Repr) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@10)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@11 T@U) ($h@@121 T@U) ($o@@80 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@11) TyType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (= (type $o@@80) refType)) (and (and ($IsGoodHeap $h@@121) (and (not (= $o@@80 null)) (= (dtype $o@@80) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@11)))) (U_2_bool (MapType1Select (MapType0Select $h@@121 $o@@80) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@121 $o@@80) MutableMap.FixedSizeHashMap.Repr) (TSet Tclass._System.object) $h@@121)) :qid |unknown.0:0| :skolemid |2460| :pattern ( (MapType1Select (MapType0Select $h@@121 $o@@80) MutableMap.FixedSizeHashMap.Repr) (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@11)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass.MutableMap.FixedSizeHashMap arg0@@363)) TyType) :qid |funType:Tclass.MutableMap.FixedSizeHashMap| :pattern ( (Tclass.MutableMap.FixedSizeHashMap arg0@@363)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@12 T@U) ) (!  (=> (= (type MutableMap.FixedSizeHashMap$V@@12) TyType) (= (Tag (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@12)) Tagclass.MutableMap.FixedSizeHashMap)) :qid |unknown.0:0| :skolemid |2462| :pattern ( (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@12)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (Tclass.MutableMap.FixedSizeHashMap_0 arg0@@364)) TyType) :qid |funType:Tclass.MutableMap.FixedSizeHashMap_0| :pattern ( (Tclass.MutableMap.FixedSizeHashMap_0 arg0@@364)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@13 T@U) ) (!  (=> (= (type MutableMap.FixedSizeHashMap$V@@13) TyType) (= (Tclass.MutableMap.FixedSizeHashMap_0 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@13)) MutableMap.FixedSizeHashMap$V@@13)) :qid |unknown.0:0| :skolemid |2463| :pattern ( (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@13)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@14 T@U) (bx@@121 T@U) ) (!  (=> (and (and (= (type MutableMap.FixedSizeHashMap$V@@14) TyType) (= (type bx@@121) BoxType)) ($IsBox bx@@121 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@14))) (and (= ($Box ($Unbox refType bx@@121)) bx@@121) ($Is ($Unbox refType bx@@121) (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@14)))) :qid |unknown.0:0| :skolemid |2464| :pattern ( ($IsBox bx@@121 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@14))) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@15 T@U) ($h0@@5 T@U) ($h1@@5 T@U) (this@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@15) TyType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type this@@3) refType)) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (and (not (= this@@3 null)) ($Is this@@3 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@15)))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@81 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@81) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@81 null)) (= $o@@81 this@@3))) (= (MapType1Select (MapType0Select $h0@@5 $o@@81) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@81) $f@@5)))) :qid |unknown.0:0| :skolemid |2461| :no-pattern (type $o@@81) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@81) :no-pattern (U_2_bool $o@@81) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (and (=> (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@15 $h0@@5 this@@3) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@15 $h1@@5 this@@3)) (=> (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@15 $h1@@5 this@@3) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@15 $h0@@5 this@@3)))) :qid |unknown.0:0| :skolemid |2465| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@15 $h1@@5 this@@3)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@16 T@U) ($Heap@@39 T@U) (this@@4 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@16) TyType) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type this@@4) refType)) (or (|MutableMap.FixedSizeHashMap.WF#canCall| MutableMap.FixedSizeHashMap$V@@16 $Heap@@39 this@@4) (and ($IsGoodHeap $Heap@@39) (and (not (= this@@4 null)) (and ($Is this@@4 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@16)) ($IsAlloc this@@4 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@16) $Heap@@39)))))) true) :qid |unknown.0:0| :skolemid |2466| :pattern ( (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@16 $Heap@@39 this@@4)) ))))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@17 T@U) ($Heap@@40 T@U) (this@@5 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@17) TyType) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type this@@5) refType)) (and ($IsGoodHeap $Heap@@40) (and (not (= this@@5 null)) (and ($Is this@@5 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@17)) ($IsAlloc this@@5 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@17) $Heap@@40))))) (and (=> (|MutableMap.FixedSizeHashMap.WF#requires| MutableMap.FixedSizeHashMap$V@@17 $Heap@@40 this@@5) true) (=> true (|MutableMap.FixedSizeHashMap.WF#requires| MutableMap.FixedSizeHashMap$V@@17 $Heap@@40 this@@5)))) :qid |unknown.0:0| :skolemid |2467| :pattern ( (|MutableMap.FixedSizeHashMap.WF#requires| MutableMap.FixedSizeHashMap$V@@17 $Heap@@40 this@@5)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@18 T@U) ($Heap@@41 T@U) (this@@6 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@18) TyType) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type this@@6) refType)) (or (|MutableMap.FixedSizeHashMap.WF#canCall| MutableMap.FixedSizeHashMap$V@@18 $Heap@@41 this@@6) (and ($IsGoodHeap $Heap@@41) (and (not (= this@@6 null)) (and ($Is this@@6 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@18)) ($IsAlloc this@@6 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@18) $Heap@@41)))))) (and (=> (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@18 $Heap@@41 this@@6) (and true (|Set#Equal| (MapType1Select (MapType0Select $Heap@@41 this@@6) MutableMap.FixedSizeHashMap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@6)) ($Box (MapType1Select (MapType0Select $Heap@@41 this@@6) MutableMap.FixedSizeHashMap.Storage)))))) (=> (and true (|Set#Equal| (MapType1Select (MapType0Select $Heap@@41 this@@6) MutableMap.FixedSizeHashMap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@6)) ($Box (MapType1Select (MapType0Select $Heap@@41 this@@6) MutableMap.FixedSizeHashMap.Storage))))) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@18 $Heap@@41 this@@6)))) :qid |unknown.0:0| :skolemid |2468| :pattern ( (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@18 $Heap@@41 this@@6)) ))))
(assert (forall ((arg0@@365 T@U) (arg1@@213 T@U) (arg2@@153 T@U) ) (! (= (type (MutableMap.FixedSizeHashMap.ModelI arg0@@365 arg1@@213 arg2@@153)) DatatypeTypeType) :qid |funType:MutableMap.FixedSizeHashMap.ModelI| :pattern ( (MutableMap.FixedSizeHashMap.ModelI arg0@@365 arg1@@213 arg2@@153)) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@19 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (|self#0@@200| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@19) TyType) (= (type $h0@@6) (MapType0Type refType MapType1Type))) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |self#0@@200|) refType)) (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|MutableMap.FixedSizeHashMap.ModelI#canCall| MutableMap.FixedSizeHashMap$V@@19 $h0@@6 |self#0@@200|) ($Is |self#0@@200| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@19)))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6)))) (forall (($o@@82 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@82) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@82 null)) (or (= $o@@82 |self#0@@200|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@6 |self#0@@200|) MutableMap.FixedSizeHashMap.Repr) ($Box $o@@82)))))) (= (MapType1Select (MapType0Select $h0@@6 $o@@82) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@82) $f@@6)))) :qid |unknown.0:0| :skolemid |2469| :no-pattern (type $o@@82) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@82) :no-pattern (U_2_bool $o@@82) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) ))) (= (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@19 $h0@@6 |self#0@@200|) (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@19 $h1@@6 |self#0@@200|))) :qid |unknown.0:0| :skolemid |2470| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@19 $h1@@6 |self#0@@200|)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@20 T@U) ($Heap@@42 T@U) (|self#0@@201| T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@20) TyType) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |self#0@@201|) refType)) (or (|MutableMap.FixedSizeHashMap.ModelI#canCall| MutableMap.FixedSizeHashMap$V@@20 $Heap@@42 |self#0@@201|) (and (and ($IsGoodHeap $Heap@@42) ($Is |self#0@@201| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@20))) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@20 $Heap@@42 |self#0@@201|)))) (and (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@20 $Heap@@42 |self#0@@201|)) (MapType1Select (MapType0Select $Heap@@42 |self#0@@201|) MutableMap.FixedSizeHashMap.Contents)) ($Is (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@20 $Heap@@42 |self#0@@201|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMap.FixedSizeHashMap$V@@20)))) :qid |unknown.0:0| :skolemid |2471| :pattern ( (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@20 $Heap@@42 |self#0@@201|)) ))))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@21 T@U) ($Heap@@43 T@U) (|self#0@@202| T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@21) TyType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |self#0@@202|) refType)) (and ($IsGoodHeap $Heap@@43) ($Is |self#0@@202| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@21)))) (and (=> (|MutableMap.FixedSizeHashMap.ModelI#requires| MutableMap.FixedSizeHashMap$V@@21 $Heap@@43 |self#0@@202|) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@21 $Heap@@43 |self#0@@202|)) (=> (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@21 $Heap@@43 |self#0@@202|) (|MutableMap.FixedSizeHashMap.ModelI#requires| MutableMap.FixedSizeHashMap$V@@21 $Heap@@43 |self#0@@202|)))) :qid |unknown.0:0| :skolemid |2472| :pattern ( (|MutableMap.FixedSizeHashMap.ModelI#requires| MutableMap.FixedSizeHashMap$V@@21 $Heap@@43 |self#0@@202|)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@22 T@U) ($Heap@@44 T@U) (|self#0@@203| T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@22) TyType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |self#0@@203|) refType)) (or (|MutableMap.FixedSizeHashMap.ModelI#canCall| MutableMap.FixedSizeHashMap$V@@22 $Heap@@44 |self#0@@203|) (and (and ($IsGoodHeap $Heap@@44) ($Is |self#0@@203| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@22))) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@22 $Heap@@44 |self#0@@203|)))) true) :qid |unknown.0:0| :skolemid |2473| :pattern ( (MutableMap.FixedSizeHashMap.ModelI MutableMap.FixedSizeHashMap$V@@22 $Heap@@44 |self#0@@203|)) ))))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@23 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (this@@7 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@23) TyType) (= (type $h0@@7) (MapType0Type refType MapType1Type))) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type this@@7) refType)) (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (and (not (= this@@7 null)) ($Is this@@7 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@23)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7)))) (forall (($o@@83 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@83) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@83 null)) (or (= $o@@83 this@@7) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@7 this@@7) MutableMap.FixedSizeHashMap.Repr) ($Box $o@@83)))))) (= (MapType1Select (MapType0Select $h0@@7 $o@@83) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@83) $f@@7)))) :qid |unknown.0:0| :skolemid |2474| :no-pattern (type $o@@83) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@83) :no-pattern (U_2_bool $o@@83) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) ))) (and (=> (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@23 $h0@@7 this@@7) (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@23 $h1@@7 this@@7)) (=> (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@23 $h1@@7 this@@7) (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@23 $h0@@7 this@@7)))) :qid |unknown.0:0| :skolemid |2475| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@23 $h1@@7 this@@7)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@24 T@U) ($Heap@@45 T@U) (this@@8 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@24) TyType) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type this@@8) refType)) (or (|MutableMap.FixedSizeHashMap.Inv#canCall| MutableMap.FixedSizeHashMap$V@@24 $Heap@@45 this@@8) (and (and ($IsGoodHeap $Heap@@45) (and (not (= this@@8 null)) (and ($Is this@@8 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@24)) ($IsAlloc this@@8 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@24) $Heap@@45)))) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@24 $Heap@@45 this@@8)))) true) :qid |unknown.0:0| :skolemid |2476| :pattern ( (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@24 $Heap@@45 this@@8)) ))))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@25 T@U) ($Heap@@46 T@U) (this@@9 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@25) TyType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type this@@9) refType)) (and ($IsGoodHeap $Heap@@46) (and (not (= this@@9 null)) (and ($Is this@@9 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@25)) ($IsAlloc this@@9 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@25) $Heap@@46))))) (and (=> (|MutableMap.FixedSizeHashMap.Inv#requires| MutableMap.FixedSizeHashMap$V@@25 $Heap@@46 this@@9) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@25 $Heap@@46 this@@9)) (=> (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@25 $Heap@@46 this@@9) (|MutableMap.FixedSizeHashMap.Inv#requires| MutableMap.FixedSizeHashMap$V@@25 $Heap@@46 this@@9)))) :qid |unknown.0:0| :skolemid |2477| :pattern ( (|MutableMap.FixedSizeHashMap.Inv#requires| MutableMap.FixedSizeHashMap$V@@25 $Heap@@46 this@@9)) )))
(assert  (=> true (forall ((MutableMap.FixedSizeHashMap$V@@26 T@U) ($Heap@@47 T@U) (this@@10 T@U) ) (!  (=> (and (and (and (= (type MutableMap.FixedSizeHashMap$V@@26) TyType) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type this@@10) refType)) (or (|MutableMap.FixedSizeHashMap.Inv#canCall| MutableMap.FixedSizeHashMap$V@@26 $Heap@@47 this@@10) (and (and ($IsGoodHeap $Heap@@47) (and (not (= this@@10 null)) (and ($Is this@@10 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@26)) ($IsAlloc this@@10 (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@26) $Heap@@47)))) (MutableMap.FixedSizeHashMap.WF MutableMap.FixedSizeHashMap$V@@26 $Heap@@47 this@@10)))) true) :qid |unknown.0:0| :skolemid |2478| :pattern ( (MutableMap.FixedSizeHashMap.Inv MutableMap.FixedSizeHashMap$V@@26 $Heap@@47 this@@10)) ))))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@27 T@U) (|c#0@@16| T@U) ) (!  (=> (and (= (type MutableMap.FixedSizeHashMap$V@@27) TyType) (= (type |c#0@@16|) refType)) (and (=> ($Is |c#0@@16| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@27)) (and ($Is |c#0@@16| (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@27)) (not (= |c#0@@16| null)))) (=> (and ($Is |c#0@@16| (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@27)) (not (= |c#0@@16| null))) ($Is |c#0@@16| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@27))))) :qid |unknown.0:0| :skolemid |2479| :pattern ( ($Is |c#0@@16| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@27))) )))
(assert (forall ((MutableMap.FixedSizeHashMap$V@@28 T@U) (|c#0@@17| T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type MutableMap.FixedSizeHashMap$V@@28) TyType) (= (type |c#0@@17|) refType)) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@17| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@28) $h@@122) ($IsAlloc |c#0@@17| (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@28) $h@@122)) (=> ($IsAlloc |c#0@@17| (Tclass.MutableMap.FixedSizeHashMap? MutableMap.FixedSizeHashMap$V@@28) $h@@122) ($IsAlloc |c#0@@17| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@28) $h@@122)))) :qid |unknown.0:0| :skolemid |2480| :pattern ( ($IsAlloc |c#0@@17| (Tclass.MutableMap.FixedSizeHashMap MutableMap.FixedSizeHashMap$V@@28) $h@@122)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass.MutableMap.ResizingHashMap? arg0@@366)) TyType) :qid |funType:Tclass.MutableMap.ResizingHashMap?| :pattern ( (Tclass.MutableMap.ResizingHashMap? arg0@@366)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@2 T@U) ) (!  (=> (= (type MutableMap.ResizingHashMap$V@@2) TyType) (= (Tag (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@2)) Tagclass.MutableMap.ResizingHashMap?)) :qid |unknown.0:0| :skolemid |2481| :pattern ( (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@2)) )))
(assert (forall ((arg0@@367 T@U) ) (! (= (type (Tclass.MutableMap.ResizingHashMap?_0 arg0@@367)) TyType) :qid |funType:Tclass.MutableMap.ResizingHashMap?_0| :pattern ( (Tclass.MutableMap.ResizingHashMap?_0 arg0@@367)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@3 T@U) ) (!  (=> (= (type MutableMap.ResizingHashMap$V@@3) TyType) (= (Tclass.MutableMap.ResizingHashMap?_0 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@3)) MutableMap.ResizingHashMap$V@@3)) :qid |unknown.0:0| :skolemid |2482| :pattern ( (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@3)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@4 T@U) (bx@@122 T@U) ) (!  (=> (and (and (= (type MutableMap.ResizingHashMap$V@@4) TyType) (= (type bx@@122) BoxType)) ($IsBox bx@@122 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@4))) (and (= ($Box ($Unbox refType bx@@122)) bx@@122) ($Is ($Unbox refType bx@@122) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@4)))) :qid |unknown.0:0| :skolemid |2483| :pattern ( ($IsBox bx@@122 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@4))) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@5 T@U) ($o@@84 T@U) ) (!  (=> (and (= (type MutableMap.ResizingHashMap$V@@5) TyType) (= (type $o@@84) refType)) (and (=> ($Is $o@@84 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@5)) (or (= $o@@84 null) (= (dtype $o@@84) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@5)))) (=> (or (= $o@@84 null) (= (dtype $o@@84) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@5))) ($Is $o@@84 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@5))))) :qid |unknown.0:0| :skolemid |2484| :pattern ( ($Is $o@@84 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@5))) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@6 T@U) ($o@@85 T@U) ($h@@123 T@U) ) (!  (=> (and (and (= (type MutableMap.ResizingHashMap$V@@6) TyType) (= (type $o@@85) refType)) (= (type $h@@123) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@85 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@6) $h@@123) (or (= $o@@85 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@85) alloc)))) (=> (or (= $o@@85 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@85) alloc))) ($IsAlloc $o@@85 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@6) $h@@123)))) :qid |unknown.0:0| :skolemid |2485| :pattern ( ($IsAlloc $o@@85 (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@6) $h@@123)) )))
(assert (= (type MutableMap.ResizingHashMap.Underlying) (FieldType refType)))
(assert (= (FDim MutableMap.ResizingHashMap.Underlying) 0))
(assert (= (FieldOfDecl refType class.MutableMap.ResizingHashMap? field$Underlying) MutableMap.ResizingHashMap.Underlying))
(assert  (not ($IsGhostField MutableMap.ResizingHashMap.Underlying)))
(assert (forall ((MutableMap.ResizingHashMap$V@@7 T@U) ($h@@124 T@U) ($o@@86 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@7) TyType) (= (type $h@@124) (MapType0Type refType MapType1Type))) (= (type $o@@86) refType)) (and ($IsGoodHeap $h@@124) (and (not (= $o@@86 null)) (= (dtype $o@@86) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@7))))) ($Is (MapType1Select (MapType0Select $h@@124 $o@@86) MutableMap.ResizingHashMap.Underlying) (Tclass.MutableMap.FixedSizeHashMap MutableMap.ResizingHashMap$V@@7))) :qid |unknown.0:0| :skolemid |2486| :pattern ( (MapType1Select (MapType0Select $h@@124 $o@@86) MutableMap.ResizingHashMap.Underlying) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@7)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@8 T@U) ($h@@125 T@U) ($o@@87 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@8) TyType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (= (type $o@@87) refType)) (and (and ($IsGoodHeap $h@@125) (and (not (= $o@@87 null)) (= (dtype $o@@87) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@8)))) (U_2_bool (MapType1Select (MapType0Select $h@@125 $o@@87) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@125 $o@@87) MutableMap.ResizingHashMap.Underlying) (Tclass.MutableMap.FixedSizeHashMap MutableMap.ResizingHashMap$V@@8) $h@@125)) :qid |unknown.0:0| :skolemid |2487| :pattern ( (MapType1Select (MapType0Select $h@@125 $o@@87) MutableMap.ResizingHashMap.Underlying) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@8)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@9 T@U) ($h@@126 T@U) ($o@@88 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@9) TyType) (= (type $h@@126) (MapType0Type refType MapType1Type))) (= (type $o@@88) refType)) (and ($IsGoodHeap $h@@126) (and (not (= $o@@88 null)) (= (dtype $o@@88) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@9))))) ($Is (MapType1Select (MapType0Select $h@@126 $o@@88) MutableMap.ResizingHashMap.Count) Tclass.NativeTypes.uint64)) :qid |unknown.0:0| :skolemid |2488| :pattern ( (MapType1Select (MapType0Select $h@@126 $o@@88) MutableMap.ResizingHashMap.Count) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@9)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@10 T@U) ($h@@127 T@U) ($o@@89 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@10) TyType) (= (type $h@@127) (MapType0Type refType MapType1Type))) (= (type $o@@89) refType)) (and (and ($IsGoodHeap $h@@127) (and (not (= $o@@89 null)) (= (dtype $o@@89) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@10)))) (U_2_bool (MapType1Select (MapType0Select $h@@127 $o@@89) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@127 $o@@89) MutableMap.ResizingHashMap.Count) Tclass.NativeTypes.uint64 $h@@127)) :qid |unknown.0:0| :skolemid |2489| :pattern ( (MapType1Select (MapType0Select $h@@127 $o@@89) MutableMap.ResizingHashMap.Count) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@10)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@11 T@U) ($h@@128 T@U) ($o@@90 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@11) TyType) (= (type $h@@128) (MapType0Type refType MapType1Type))) (= (type $o@@90) refType)) (and ($IsGoodHeap $h@@128) (and (not (= $o@@90 null)) (= (dtype $o@@90) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@11))))) ($Is (MapType1Select (MapType0Select $h@@128 $o@@90) MutableMap.ResizingHashMap.Contents) (TMap Tclass.NativeTypes.uint64 MutableMap.ResizingHashMap$V@@11))) :qid |unknown.0:0| :skolemid |2490| :pattern ( (MapType1Select (MapType0Select $h@@128 $o@@90) MutableMap.ResizingHashMap.Contents) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@11)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@12 T@U) ($h@@129 T@U) ($o@@91 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@12) TyType) (= (type $h@@129) (MapType0Type refType MapType1Type))) (= (type $o@@91) refType)) (and (and ($IsGoodHeap $h@@129) (and (not (= $o@@91 null)) (= (dtype $o@@91) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@12)))) (U_2_bool (MapType1Select (MapType0Select $h@@129 $o@@91) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@129 $o@@91) MutableMap.ResizingHashMap.Contents) (TMap Tclass.NativeTypes.uint64 MutableMap.ResizingHashMap$V@@12) $h@@129)) :qid |unknown.0:0| :skolemid |2491| :pattern ( (MapType1Select (MapType0Select $h@@129 $o@@91) MutableMap.ResizingHashMap.Contents) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@12)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@13 T@U) ($h@@130 T@U) ($o@@92 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@13) TyType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (= (type $o@@92) refType)) (and ($IsGoodHeap $h@@130) (and (not (= $o@@92 null)) (= (dtype $o@@92) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@13))))) ($Is (MapType1Select (MapType0Select $h@@130 $o@@92) MutableMap.ResizingHashMap.Repr) (TSet Tclass._System.object))) :qid |unknown.0:0| :skolemid |2492| :pattern ( (MapType1Select (MapType0Select $h@@130 $o@@92) MutableMap.ResizingHashMap.Repr) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@13)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@14 T@U) ($h@@131 T@U) ($o@@93 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@14) TyType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (= (type $o@@93) refType)) (and (and ($IsGoodHeap $h@@131) (and (not (= $o@@93 null)) (= (dtype $o@@93) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@14)))) (U_2_bool (MapType1Select (MapType0Select $h@@131 $o@@93) alloc)))) ($IsAlloc (MapType1Select (MapType0Select $h@@131 $o@@93) MutableMap.ResizingHashMap.Repr) (TSet Tclass._System.object) $h@@131)) :qid |unknown.0:0| :skolemid |2493| :pattern ( (MapType1Select (MapType0Select $h@@131 $o@@93) MutableMap.ResizingHashMap.Repr) (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@14)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@15 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (this@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.ResizingHashMap$V@@15) TyType) (= (type $h0@@8) (MapType0Type refType MapType1Type))) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type this@@11) refType)) (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (and (not (= this@@11 null)) ($Is this@@11 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@15)))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8)))) (forall (($o@@94 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@94) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@94 null)) (or (= $o@@94 this@@11) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@8 this@@11) MutableMap.ResizingHashMap.Repr) ($Box $o@@94)))))) (= (MapType1Select (MapType0Select $h0@@8 $o@@94) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@94) $f@@8)))) :qid |unknown.0:0| :skolemid |2494| :no-pattern (type $o@@94) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@94) :no-pattern (U_2_bool $o@@94) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) ))) (and (=> (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@15 $h0@@8 this@@11) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@15 $h1@@8 this@@11)) (=> (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@15 $h1@@8 this@@11) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@15 $h0@@8 this@@11)))) :qid |unknown.0:0| :skolemid |2495| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@15 $h1@@8 this@@11)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@16 T@U) ($Heap@@48 T@U) (this@@12 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@16) TyType) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type this@@12) refType)) (or (|MutableMap.ResizingHashMap.ReprInv#canCall| MutableMap.ResizingHashMap$V@@16 $Heap@@48 this@@12) (and ($IsGoodHeap $Heap@@48) (and (not (= this@@12 null)) (and ($Is this@@12 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@16)) ($IsAlloc this@@12 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@16) $Heap@@48)))))) true) :qid |unknown.0:0| :skolemid |2496| :pattern ( (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@16 $Heap@@48 this@@12)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@17 T@U) ($Heap@@49 T@U) (this@@13 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@17) TyType) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type this@@13) refType)) (and ($IsGoodHeap $Heap@@49) (and (not (= this@@13 null)) (and ($Is this@@13 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@17)) ($IsAlloc this@@13 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@17) $Heap@@49))))) (and (=> (|MutableMap.ResizingHashMap.ReprInv#requires| MutableMap.ResizingHashMap$V@@17 $Heap@@49 this@@13) true) (=> true (|MutableMap.ResizingHashMap.ReprInv#requires| MutableMap.ResizingHashMap$V@@17 $Heap@@49 this@@13)))) :qid |unknown.0:0| :skolemid |2497| :pattern ( (|MutableMap.ResizingHashMap.ReprInv#requires| MutableMap.ResizingHashMap$V@@17 $Heap@@49 this@@13)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@18 T@U) ($Heap@@50 T@U) (this@@14 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@18) TyType) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type this@@14) refType)) (or (|MutableMap.ResizingHashMap.ReprInv#canCall| MutableMap.ResizingHashMap$V@@18 $Heap@@50 this@@14) (and ($IsGoodHeap $Heap@@50) (and (not (= this@@14 null)) (and ($Is this@@14 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@18)) ($IsAlloc this@@14 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@18) $Heap@@50)))))) (and (=> (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@18 $Heap@@50 this@@14) (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@14)) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Repr)) (|Set#Equal| (|Set#Union| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@14)) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Repr)) (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Repr))) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) ($Box (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Storage)))))) (=> (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@14)) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Repr)) (|Set#Equal| (|Set#Union| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@14)) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Repr)) (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Repr))) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying))) ($Box (MapType1Select (MapType0Select $Heap@@50 (MapType1Select (MapType0Select $Heap@@50 this@@14) MutableMap.ResizingHashMap.Underlying)) MutableMap.FixedSizeHashMap.Storage))))) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@18 $Heap@@50 this@@14)))) :qid |unknown.0:0| :skolemid |2498| :pattern ( (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@18 $Heap@@50 this@@14)) ))))
(assert (forall ((arg0@@368 T@U) (arg1@@214 T@U) (arg2@@154 T@U) ) (! (= (type (MutableMap.ResizingHashMap.ModelI arg0@@368 arg1@@214 arg2@@154)) DatatypeTypeType) :qid |funType:MutableMap.ResizingHashMap.ModelI| :pattern ( (MutableMap.ResizingHashMap.ModelI arg0@@368 arg1@@214 arg2@@154)) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@19 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (|self#0@@204| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.ResizingHashMap$V@@19) TyType) (= (type $h0@@9) (MapType0Type refType MapType1Type))) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |self#0@@204|) refType)) (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|MutableMap.ResizingHashMap.ModelI#canCall| MutableMap.ResizingHashMap$V@@19 $h0@@9 |self#0@@204|) ($Is |self#0@@204| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@19)))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9)))) (forall (($o@@95 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@95) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@95 null)) (or (= $o@@95 |self#0@@204|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@9 |self#0@@204|) MutableMap.ResizingHashMap.Repr) ($Box $o@@95)))))) (= (MapType1Select (MapType0Select $h0@@9 $o@@95) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@95) $f@@9)))) :qid |unknown.0:0| :skolemid |2499| :no-pattern (type $o@@95) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@95) :no-pattern (U_2_bool $o@@95) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) ))) (= (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@19 $h0@@9 |self#0@@204|) (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@19 $h1@@9 |self#0@@204|))) :qid |unknown.0:0| :skolemid |2500| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@19 $h1@@9 |self#0@@204|)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@20 T@U) ($Heap@@51 T@U) (|self#0@@205| T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@20) TyType) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |self#0@@205|) refType)) (or (|MutableMap.ResizingHashMap.ModelI#canCall| MutableMap.ResizingHashMap$V@@20 $Heap@@51 |self#0@@205|) (and (and ($IsGoodHeap $Heap@@51) ($Is |self#0@@205| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@20))) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@20 $Heap@@51 |self#0@@205|)))) (and (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@20 $Heap@@51 |self#0@@205|)) (MapType1Select (MapType0Select $Heap@@51 |self#0@@205|) MutableMap.ResizingHashMap.Contents)) ($Is (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@20 $Heap@@51 |self#0@@205|) (Tclass.MutableMapModel.LinearHashMap MutableMap.ResizingHashMap$V@@20)))) :qid |unknown.0:0| :skolemid |2501| :pattern ( (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@20 $Heap@@51 |self#0@@205|)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@21 T@U) ($Heap@@52 T@U) (|self#0@@206| T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@21) TyType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |self#0@@206|) refType)) (and ($IsGoodHeap $Heap@@52) ($Is |self#0@@206| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@21)))) (and (=> (|MutableMap.ResizingHashMap.ModelI#requires| MutableMap.ResizingHashMap$V@@21 $Heap@@52 |self#0@@206|) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@21 $Heap@@52 |self#0@@206|)) (=> (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@21 $Heap@@52 |self#0@@206|) (|MutableMap.ResizingHashMap.ModelI#requires| MutableMap.ResizingHashMap$V@@21 $Heap@@52 |self#0@@206|)))) :qid |unknown.0:0| :skolemid |2502| :pattern ( (|MutableMap.ResizingHashMap.ModelI#requires| MutableMap.ResizingHashMap$V@@21 $Heap@@52 |self#0@@206|)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@22 T@U) ($Heap@@53 T@U) (|self#0@@207| T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@22) TyType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |self#0@@207|) refType)) (or (|MutableMap.ResizingHashMap.ModelI#canCall| MutableMap.ResizingHashMap$V@@22 $Heap@@53 |self#0@@207|) (and (and ($IsGoodHeap $Heap@@53) ($Is |self#0@@207| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@22))) (MutableMap.ResizingHashMap.ReprInv MutableMap.ResizingHashMap$V@@22 $Heap@@53 |self#0@@207|)))) true) :qid |unknown.0:0| :skolemid |2503| :pattern ( (MutableMap.ResizingHashMap.ModelI MutableMap.ResizingHashMap$V@@22 $Heap@@53 |self#0@@207|)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@23 T@U) ($h0@@10 T@U) ($h1@@10 T@U) (this@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.ResizingHashMap$V@@23) TyType) (= (type $h0@@10) (MapType0Type refType MapType1Type))) (= (type $h1@@10) (MapType0Type refType MapType1Type))) (= (type this@@15) refType)) (and (and (and ($IsGoodHeap $h0@@10) ($IsGoodHeap $h1@@10)) (and (not (= this@@15 null)) ($Is this@@15 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@23)))) (and ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10)))) (forall (($o@@96 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (= (type $o@@96) refType) (= (type $f@@10) (FieldType alpha@@17))) (and (not (= $o@@96 null)) (or (= $o@@96 this@@15) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@10 this@@15) MutableMap.ResizingHashMap.Repr) ($Box $o@@96)))))) (= (MapType1Select (MapType0Select $h0@@10 $o@@96) $f@@10) (MapType1Select (MapType0Select $h1@@10 $o@@96) $f@@10)))) :qid |unknown.0:0| :skolemid |2504| :no-pattern (type $o@@96) :no-pattern (type $f@@10) :no-pattern (U_2_int $o@@96) :no-pattern (U_2_bool $o@@96) :no-pattern (U_2_int $f@@10) :no-pattern (U_2_bool $f@@10) ))) (and (=> (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@23 $h0@@10 this@@15) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@23 $h1@@10 this@@15)) (=> (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@23 $h1@@10 this@@15) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@23 $h0@@10 this@@15)))) :qid |unknown.0:0| :skolemid |2505| :pattern ( ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@23 $h1@@10 this@@15)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@24 T@U) ($Heap@@54 T@U) (this@@16 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@24) TyType) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type this@@16) refType)) (or (|MutableMap.ResizingHashMap.Inv#canCall| MutableMap.ResizingHashMap$V@@24 $Heap@@54 this@@16) (and ($IsGoodHeap $Heap@@54) (and (not (= this@@16 null)) (and ($Is this@@16 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@24)) ($IsAlloc this@@16 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@24) $Heap@@54)))))) (and (=> (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@24 $Heap@@54 this@@16) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@54 this@@16) MutableMap.ResizingHashMap.Repr) ($Box this@@16)))) (=> (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@24 $Heap@@54 this@@16) (= (|Map#Card| (MapType1Select (MapType0Select $Heap@@54 this@@16) MutableMap.ResizingHashMap.Contents)) (U_2_int (MapType1Select (MapType0Select $Heap@@54 this@@16) MutableMap.ResizingHashMap.Count)))))) :qid |unknown.0:0| :skolemid |2506| :pattern ( (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@24 $Heap@@54 this@@16)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@25 T@U) ($Heap@@55 T@U) (this@@17 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@25) TyType) (= (type $Heap@@55) (MapType0Type refType MapType1Type))) (= (type this@@17) refType)) (and ($IsGoodHeap $Heap@@55) (and (not (= this@@17 null)) (and ($Is this@@17 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@25)) ($IsAlloc this@@17 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@25) $Heap@@55))))) (and (=> (|MutableMap.ResizingHashMap.Inv#requires| MutableMap.ResizingHashMap$V@@25 $Heap@@55 this@@17) true) (=> true (|MutableMap.ResizingHashMap.Inv#requires| MutableMap.ResizingHashMap$V@@25 $Heap@@55 this@@17)))) :qid |unknown.0:0| :skolemid |2507| :pattern ( (|MutableMap.ResizingHashMap.Inv#requires| MutableMap.ResizingHashMap$V@@25 $Heap@@55 this@@17)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@26 T@U) ($Heap@@56 T@U) (this@@18 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@26) TyType) (= (type $Heap@@56) (MapType0Type refType MapType1Type))) (= (type this@@18) refType)) (or (|MutableMap.ResizingHashMap.Inv#canCall| MutableMap.ResizingHashMap$V@@26 $Heap@@56 this@@18) (and ($IsGoodHeap $Heap@@56) (and (not (= this@@18 null)) (and ($Is this@@18 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@26)) ($IsAlloc this@@18 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@26) $Heap@@56)))))) true) :qid |unknown.0:0| :skolemid |2508| :pattern ( (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@26 $Heap@@56 this@@18)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@27 T@U) ($h0@@11 T@U) ($h1@@11 T@U) (this@@19 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMap.ResizingHashMap$V@@27) TyType) (= (type $h0@@11) (MapType0Type refType MapType1Type))) (= (type $h1@@11) (MapType0Type refType MapType1Type))) (= (type this@@19) refType)) (and (and (and ($IsGoodHeap $h0@@11) ($IsGoodHeap $h1@@11)) (and (not (= this@@19 null)) ($Is this@@19 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@27)))) (and ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11)))) (forall (($o@@97 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (= (type $o@@97) refType) (= (type $f@@11) (FieldType alpha@@18))) (and (not (= $o@@97 null)) (or (= $o@@97 this@@19) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@11 this@@19) MutableMap.ResizingHashMap.Repr) ($Box $o@@97)))))) (= (MapType1Select (MapType0Select $h0@@11 $o@@97) $f@@11) (MapType1Select (MapType0Select $h1@@11 $o@@97) $f@@11)))) :qid |unknown.0:0| :skolemid |2509| :no-pattern (type $o@@97) :no-pattern (type $f@@11) :no-pattern (U_2_int $o@@97) :no-pattern (U_2_bool $o@@97) :no-pattern (U_2_int $f@@11) :no-pattern (U_2_bool $f@@11) ))) (= (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@27 $h0@@11 this@@19) (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@27 $h1@@11 this@@19))) :qid |unknown.0:0| :skolemid |2510| :pattern ( ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11) (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@27 $h1@@11 this@@19)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@28 T@U) ($Heap@@57 T@U) (this@@20 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@28) TyType) (= (type $Heap@@57) (MapType0Type refType MapType1Type))) (= (type this@@20) refType)) (or (|MutableMap.ResizingHashMap.I#canCall| MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20) (and (and ($IsGoodHeap $Heap@@57) (and (not (= this@@20 null)) (and ($Is this@@20 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@28)) ($IsAlloc this@@20 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@28) $Heap@@57)))) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20)))) (and (and (and (MutableMapModel.__default.Inv MutableMap.ResizingHashMap$V@@28 (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20)) (= (MutableMapModel.LinearHashMap.count (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20)) (U_2_int (MapType1Select (MapType0Select $Heap@@57 this@@20) MutableMap.ResizingHashMap.Count)))) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20)) (MapType1Select (MapType0Select $Heap@@57 this@@20) MutableMap.ResizingHashMap.Contents))) ($Is (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20) (Tclass.MutableMapModel.LinearHashMap MutableMap.ResizingHashMap$V@@28)))) :qid |unknown.0:0| :skolemid |2511| :pattern ( (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@28 $Heap@@57 this@@20)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@29 T@U) ($Heap@@58 T@U) (this@@21 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@29) TyType) (= (type $Heap@@58) (MapType0Type refType MapType1Type))) (= (type this@@21) refType)) (and ($IsGoodHeap $Heap@@58) (and (not (= this@@21 null)) (and ($Is this@@21 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@29)) ($IsAlloc this@@21 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@29) $Heap@@58))))) (and (=> (|MutableMap.ResizingHashMap.I#requires| MutableMap.ResizingHashMap$V@@29 $Heap@@58 this@@21) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@29 $Heap@@58 this@@21)) (=> (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@29 $Heap@@58 this@@21) (|MutableMap.ResizingHashMap.I#requires| MutableMap.ResizingHashMap$V@@29 $Heap@@58 this@@21)))) :qid |unknown.0:0| :skolemid |2512| :pattern ( (|MutableMap.ResizingHashMap.I#requires| MutableMap.ResizingHashMap$V@@29 $Heap@@58 this@@21)) )))
(assert  (=> true (forall ((MutableMap.ResizingHashMap$V@@30 T@U) ($Heap@@59 T@U) (this@@22 T@U) ) (!  (=> (and (and (and (= (type MutableMap.ResizingHashMap$V@@30) TyType) (= (type $Heap@@59) (MapType0Type refType MapType1Type))) (= (type this@@22) refType)) (or (|MutableMap.ResizingHashMap.I#canCall| MutableMap.ResizingHashMap$V@@30 $Heap@@59 this@@22) (and (and ($IsGoodHeap $Heap@@59) (and (not (= this@@22 null)) (and ($Is this@@22 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@30)) ($IsAlloc this@@22 (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@30) $Heap@@59)))) (MutableMap.ResizingHashMap.Inv MutableMap.ResizingHashMap$V@@30 $Heap@@59 this@@22)))) true) :qid |unknown.0:0| :skolemid |2513| :pattern ( (MutableMap.ResizingHashMap.I MutableMap.ResizingHashMap$V@@30 $Heap@@59 this@@22)) ))))
(assert (forall ((MutableMap.ResizingHashMap$V@@31 T@U) (|c#0@@18| T@U) ) (!  (=> (and (= (type MutableMap.ResizingHashMap$V@@31) TyType) (= (type |c#0@@18|) refType)) (and (=> ($Is |c#0@@18| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@31)) (and ($Is |c#0@@18| (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@31)) (not (= |c#0@@18| null)))) (=> (and ($Is |c#0@@18| (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@31)) (not (= |c#0@@18| null))) ($Is |c#0@@18| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@31))))) :qid |unknown.0:0| :skolemid |2520| :pattern ( ($Is |c#0@@18| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@31))) )))
(assert (forall ((MutableMap.ResizingHashMap$V@@32 T@U) (|c#0@@19| T@U) ($h@@132 T@U) ) (!  (=> (and (and (= (type MutableMap.ResizingHashMap$V@@32) TyType) (= (type |c#0@@19|) refType)) (= (type $h@@132) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@19| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@32) $h@@132) ($IsAlloc |c#0@@19| (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@32) $h@@132)) (=> ($IsAlloc |c#0@@19| (Tclass.MutableMap.ResizingHashMap? MutableMap.ResizingHashMap$V@@32) $h@@132) ($IsAlloc |c#0@@19| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@32) $h@@132)))) :qid |unknown.0:0| :skolemid |2521| :pattern ( ($IsAlloc |c#0@@19| (Tclass.MutableMap.ResizingHashMap MutableMap.ResizingHashMap$V@@32) $h@@132)) )))
(assert (= (type Tclass.MutableMap.__default) TyType))
(assert (= (Tag Tclass.MutableMap.__default) Tagclass.MutableMap.__default))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.MutableMap.__default)) (and (= ($Box ($Unbox refType bx@@123)) bx@@123) ($Is ($Unbox refType bx@@123) Tclass.MutableMap.__default))) :qid |unknown.0:0| :skolemid |2522| :pattern ( ($IsBox bx@@123 Tclass.MutableMap.__default)) )))
(assert (forall (($o@@98 T@U) ) (!  (=> (= (type $o@@98) refType) (and (=> ($Is $o@@98 Tclass.MutableMap.__default) (or (= $o@@98 null) (= (dtype $o@@98) Tclass.MutableMap.__default))) (=> (or (= $o@@98 null) (= (dtype $o@@98) Tclass.MutableMap.__default)) ($Is $o@@98 Tclass.MutableMap.__default)))) :qid |unknown.0:0| :skolemid |2523| :pattern ( ($Is $o@@98 Tclass.MutableMap.__default)) )))
(assert (forall (($o@@99 T@U) ($h@@133 T@U) ) (!  (=> (and (= (type $o@@99) refType) (= (type $h@@133) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@99 Tclass.MutableMap.__default $h@@133) (or (= $o@@99 null) (U_2_bool (MapType1Select (MapType0Select $h@@133 $o@@99) alloc)))) (=> (or (= $o@@99 null) (U_2_bool (MapType1Select (MapType0Select $h@@133 $o@@99) alloc))) ($IsAlloc $o@@99 Tclass.MutableMap.__default $h@@133)))) :qid |unknown.0:0| :skolemid |2524| :pattern ( ($IsAlloc $o@@99 Tclass.MutableMap.__default $h@@133)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@369 T@T) (arg1@@215 T@T) ) (! (= (Ctor (MapType6Type arg0@@369 arg1@@215)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@370 T@T) (arg1@@216 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@370 arg1@@216)) arg0@@370) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@370 arg1@@216)) ))) (forall ((arg0@@371 T@T) (arg1@@217 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@371 arg1@@217)) arg1@@217) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@371 arg1@@217)) ))) (forall ((arg0@@372 T@U) (arg1@@218 T@U) (arg2@@155 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@372)))) (= (type (MapType6Select arg0@@372 arg1@@218 arg2@@155)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@372 arg1@@218 arg2@@155)) ))) (forall ((arg0@@373 T@U) (arg1@@219 T@U) (arg2@@156 T@U) (arg3@@98 T@U) ) (! (let ((aVar1@@7 (type arg3@@98))) (let ((aVar0@@4 (type arg1@@219))) (= (type (MapType6Store arg0@@373 arg1@@219 arg2@@156 arg3@@98)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@373 arg1@@219 arg2@@156 arg3@@98)) ))) (forall ((m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@49)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@49 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@50 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@50 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@51 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@52 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@374 T@U) (arg1@@220 T@U) (arg2@@157 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#0| arg0@@374 arg1@@220 arg2@@157 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@374 arg1@@220 arg2@@157 arg3@@99)) ))))
(assert (forall (($o@@100 T@U) ($f@@12 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@100) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@100 $f@@12))  (=> (and (not (= $o@@100 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@100) |l#2|))) |l#3|)))) :qid |LruImpli.66:5| :skolemid |2525| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@100 $f@@12)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@221 T@U) (arg2@@158 T@U) (arg3@@100 T@U) (arg4@@65 T@U) ) (! (= (type (|lambda#1| arg0@@375 arg1@@221 arg2@@158 arg3@@100 arg4@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@375 arg1@@221 arg2@@158 arg3@@100 arg4@@65)) )))
(assert (forall (($o@@101 T@U) ($f@@13 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| T@U) (|l#4| T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (and (and (= (type $o@@101) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type |l#3@@0|) refType)) (= (type |l#4|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0| |l#4|) $o@@101 $f@@13))  (=> (and (not (= $o@@101 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@101) |l#2@@0|))) (or (= $o@@101 |l#3@@0|) (U_2_bool (MapType0Select |l#4| ($Box $o@@101)))))))) :qid |LruImpli.85:25| :skolemid |2526| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0| |l#4|) $o@@101 $f@@13)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@222 T@U) (arg2@@159 T@U) (arg3@@101 T@U) (arg4@@66 T@U) ) (! (= (type (|lambda#2| arg0@@376 arg1@@222 arg2@@159 arg3@@101 arg4@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@376 arg1@@222 arg2@@159 arg3@@101 arg4@@66)) )))
(assert (forall (($o@@102 T@U) ($f@@14 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| T@U) (|l#4@@0| T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (and (and (= (type $o@@102) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type |l#3@@1|) refType)) (= (type |l#4@@0|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@0|) $o@@102 $f@@14))  (=> (and (not (= $o@@102 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@102) |l#2@@1|))) (or (= $o@@102 |l#3@@1|) (U_2_bool (MapType0Select |l#4@@0| ($Box $o@@102)))))))) :qid |LruImpli.85:25| :skolemid |2527| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@0|) $o@@102 $f@@14)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@223 T@U) (arg2@@160 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#3| arg0@@377 arg1@@223 arg2@@160 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@377 arg1@@223 arg2@@160 arg3@@102)) )))
(assert (forall (($o@@103 T@U) ($f@@15 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@103) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@103 $f@@15))  (=> (and (not (= $o@@103 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@103) |l#2@@2|))) |l#3@@2|)))) :qid |LruImpli.118:5| :skolemid |2528| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@103 $f@@15)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@224 T@U) (arg2@@161 T@U) (arg3@@103 T@U) (arg4@@67 T@U) ) (! (= (type (|lambda#4| arg0@@378 arg1@@224 arg2@@161 arg3@@103 arg4@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@378 arg1@@224 arg2@@161 arg3@@103 arg4@@67)) )))
(assert (forall (($o@@104 T@U) ($f@@16 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| T@U) (|l#4@@1| T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (and (and (= (type $o@@104) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type |l#3@@3|) refType)) (= (type |l#4@@1|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3| |l#4@@1|) $o@@104 $f@@16))  (=> (and (not (= $o@@104 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@104) |l#2@@3|))) (or (= $o@@104 |l#3@@3|) (U_2_bool (MapType0Select |l#4@@1| ($Box $o@@104)))))))) :qid |LruImpli.133:12| :skolemid |2529| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3| |l#4@@1|) $o@@104 $f@@16)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@225 T@U) (arg2@@162 T@U) (arg3@@104 T@U) (arg4@@68 T@U) ) (! (= (type (|lambda#5| arg0@@379 arg1@@225 arg2@@162 arg3@@104 arg4@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@379 arg1@@225 arg2@@162 arg3@@104 arg4@@68)) )))
(assert (forall (($o@@105 T@U) ($f@@17 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| T@U) (|l#4@@2| T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (and (and (= (type $o@@105) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type |l#3@@4|) refType)) (= (type |l#4@@2|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4| |l#4@@2|) $o@@105 $f@@17))  (=> (and (not (= $o@@105 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@105) |l#2@@4|))) (or (= $o@@105 |l#3@@4|) (U_2_bool (MapType0Select |l#4@@2| ($Box $o@@105)))))))) :qid |LruImpli.133:12| :skolemid |2530| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4| |l#4@@2|) $o@@105 $f@@17)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@226 T@U) (arg2@@163 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#6| arg0@@380 arg1@@226 arg2@@163 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@380 arg1@@226 arg2@@163 arg3@@105)) )))
(assert (forall (($o@@106 T@U) ($f@@18 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@106) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@106 $f@@18))  (=> (and (not (= $o@@106 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@106) |l#2@@5|))) |l#3@@5|)))) :qid |LruImpli.240:11| :skolemid |2531| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@106 $f@@18)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@227 T@U) (arg2@@164 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#7| arg0@@381 arg1@@227 arg2@@164 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@381 arg1@@227 arg2@@164 arg3@@106)) )))
(assert (forall (($o@@107 T@U) ($f@@19 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@107) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@107 $f@@19))  (=> (and (not (= $o@@107 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@107) |l#2@@6|))) |l#3@@6|)))) :qid |LruImpli.240:11| :skolemid |2532| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@107 $f@@19)) )))
(assert (forall ((arg0@@382 T@U) (arg1@@228 T@U) (arg2@@165 T@U) (arg3@@107 T@U) (arg4@@69 T@U) ) (! (= (type (|lambda#8| arg0@@382 arg1@@228 arg2@@165 arg3@@107 arg4@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@382 arg1@@228 arg2@@165 arg3@@107 arg4@@69)) )))
(assert (forall (($o@@108 T@U) ($f@@20 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| T@U) (|l#4@@3| T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (and (and (= (type $o@@108) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type |l#3@@7|) refType)) (= (type |l#4@@3|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7| |l#4@@3|) $o@@108 $f@@20))  (=> (and (not (= $o@@108 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@108) |l#2@@7|))) (or (= $o@@108 |l#3@@7|) (U_2_bool (MapType0Select |l#4@@3| ($Box $o@@108)))))))) :qid |LruImpli.251:12| :skolemid |2533| :pattern ( (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7| |l#4@@3|) $o@@108 $f@@20)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@229 T@U) (arg2@@166 T@U) (arg3@@108 T@U) (arg4@@70 T@U) ) (! (= (type (|lambda#9| arg0@@383 arg1@@229 arg2@@166 arg3@@108 arg4@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@383 arg1@@229 arg2@@166 arg3@@108 arg4@@70)) )))
(assert (forall (($o@@109 T@U) ($f@@21 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| T@U) (|l#4@@4| T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (and (and (= (type $o@@109) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type |l#3@@8|) refType)) (= (type |l#4@@4|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8| |l#4@@4|) $o@@109 $f@@21))  (=> (and (not (= $o@@109 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@109) |l#2@@8|))) (or (= $o@@109 |l#3@@8|) (U_2_bool (MapType0Select |l#4@@4| ($Box $o@@109)))))))) :qid |LruImpli.251:12| :skolemid |2534| :pattern ( (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8| |l#4@@4|) $o@@109 $f@@21)) )))
(assert (forall ((arg0@@384 T@U) (arg1@@230 T@U) (arg2@@167 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#10| arg0@@384 arg1@@230 arg2@@167 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@384 arg1@@230 arg2@@167 arg3@@109)) )))
(assert (forall (($o@@110 T@U) ($f@@22 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@110) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@110 $f@@22))  (=> (and (not (= $o@@110 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@110) |l#2@@9|))) |l#3@@9|)))) :qid |LruImpli.364:12| :skolemid |2535| :pattern ( (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@110 $f@@22)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@231 T@U) (arg2@@168 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#11| arg0@@385 arg1@@231 arg2@@168 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@385 arg1@@231 arg2@@168 arg3@@110)) )))
(assert (forall (($o@@111 T@U) ($f@@23 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@111) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@111 $f@@23))  (=> (and (not (= $o@@111 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@111) |l#2@@10|))) |l#3@@10|)))) :qid |LruImpli.364:12| :skolemid |2536| :pattern ( (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@111 $f@@23)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@232 T@U) (arg2@@169 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#12| arg0@@386 arg1@@232 arg2@@169 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@386 arg1@@232 arg2@@169 arg3@@111)) )))
(assert (forall (($o@@112 T@U) ($f@@24 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@112) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@112 $f@@24))  (=> (and (not (= $o@@112 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@112) |l#2@@11|))) |l#3@@11|)))) :qid |LruImpli.375:12| :skolemid |2537| :pattern ( (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@112 $f@@24)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@233 T@U) (arg2@@170 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#13| arg0@@387 arg1@@233 arg2@@170 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@387 arg1@@233 arg2@@170 arg3@@112)) )))
(assert (forall (($o@@113 T@U) ($f@@25 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@113) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@113 $f@@25))  (=> (and (not (= $o@@113 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@113) |l#2@@12|))) |l#3@@12|)))) :qid |LruImpli.390:12| :skolemid |2538| :pattern ( (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@113 $f@@25)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@234 T@U) (arg2@@171 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#14| arg0@@388 arg1@@234 arg2@@171 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@388 arg1@@234 arg2@@171 arg3@@113)) )))
(assert (forall (($o@@114 T@U) ($f@@26 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@114) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@114 $f@@26))  (=> (and (not (= $o@@114 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@114) |l#2@@13|))) |l#3@@13|)))) :qid |LruImpli.406:12| :skolemid |2539| :pattern ( (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@114 $f@@26)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@235 T@U) (arg2@@172 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#15| arg0@@389 arg1@@235 arg2@@172 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@389 arg1@@235 arg2@@172 arg3@@114)) )))
(assert (forall (($o@@115 T@U) ($f@@27 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@115) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@115 $f@@27))  (=> (and (not (= $o@@115 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@115) |l#2@@14|))) |l#3@@14|)))) :qid |LruImpli.15:9| :skolemid |2540| :pattern ( (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@115 $f@@27)) )))
(assert (forall ((arg0@@390 T@U) (arg1@@236 T@U) (arg2@@173 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#16| arg0@@390 arg1@@236 arg2@@173 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@390 arg1@@236 arg2@@173 arg3@@115)) )))
(assert (forall (($o@@116 T@U) ($f@@28 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@116) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@116 $f@@28))  (=> (and (not (= $o@@116 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@116) |l#2@@15|))) |l#3@@15|)))) :qid |LruImpli.26:9| :skolemid |2541| :pattern ( (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@116 $f@@28)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@237 T@U) (arg2@@174 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#17| arg0@@391 arg1@@237 arg2@@174 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@391 arg1@@237 arg2@@174 arg3@@116)) )))
(assert (forall (($o@@117 T@U) ($f@@29 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@117) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@117 $f@@29))  (=> (and (not (= $o@@117 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@117) |l#2@@16|))) |l#3@@16|)))) :qid |LruImpli.43:9| :skolemid |2542| :pattern ( (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@117 $f@@29)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@238 T@U) (arg2@@175 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#18| arg0@@392 arg1@@238 arg2@@175 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@392 arg1@@238 arg2@@175 arg3@@117)) )))
(assert (forall (($o@@118 T@U) ($f@@30 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@118) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@118 $f@@30))  (=> (and (not (= $o@@118 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@118) |l#2@@17|))) |l#3@@17|)))) :qid |LruImpli.43:9| :skolemid |2543| :pattern ( (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@118 $f@@30)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@18|) TyType)) (= (type |l#1@@18|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@18|) (> (U_2_int (MapType0Select |l#1@@18| |$y#0|)) |l#2@@18|)))) :qid |sequence.28:5| :skolemid |2544| :pattern ( (MapType0Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18|) |$y#0|)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) ) (!  (=> (and (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@19|) TyType)) (= (type |l#1@@19|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#23| |l#0@@19| |l#1@@19|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@19|) (|Seq#Contains| |l#1@@19| |$y#0@@0|)))) :qid |LruModel.35:5| :skolemid |2545| :pattern ( (MapType0Select (|lambda#23| |l#0@@19| |l#1@@19|) |$y#0@@0|)) )))
(assert (forall ((|$y#0@@1| T@U) (|l#0@@20| T@U) (|l#1@@20| Int) (|l#2@@19| Int) ) (!  (=> (and (= (type |$y#0@@1|) BoxType) (= (type |l#0@@20|) TyType)) (= (U_2_bool (MapType0Select (|lambda#25| |l#0@@20| |l#1@@20| |l#2@@19|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@20|) (and (<= |l#1@@20| (U_2_int ($Unbox intType |$y#0@@1|))) (< (U_2_int ($Unbox intType |$y#0@@1|)) |l#2@@19|))))) :qid |Setsidfy.34:5| :skolemid |2546| :pattern ( (MapType0Select (|lambda#25| |l#0@@20| |l#1@@20| |l#2@@19|) |$y#0@@1|)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@20| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@21|) TyType)) (= (type |l#1@@21|) (MapType0Type BoxType boolType))) (= (type |l#2@@20|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#27| |l#0@@21| |l#1@@21| |l#2@@20|) |$w#1|))  (and ($IsBox |$w#1| |l#0@@21|) (and (U_2_bool (MapType0Select |l#1@@21| |$w#1|)) (not (U_2_bool (MapType0Select |l#2@@20| |$w#1|))))))) :qid |Mapssdfy.43:14| :skolemid |2547| :pattern ( (MapType0Select (|lambda#27| |l#0@@21| |l#1@@21| |l#2@@20|) |$w#1|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@22| T@U) ) (!  (=> (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@22|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#28| |l#0@@22|) |$w#1@@0|) (MapType0Select |l#0@@22| |$w#1@@0|))) :qid |Mapssdfy.43:14| :skolemid |2548| :pattern ( (MapType0Select (|lambda#28| |l#0@@22|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@23| T@U) (|l#1@@22| T@U) (|l#2@@21| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@23|) TyType)) (= (type |l#1@@22|) (MapType0Type BoxType boolType))) (= (type |l#2@@21|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#31| |l#0@@23| |l#1@@22| |l#2@@21|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@23|) (and (U_2_bool (MapType0Select |l#1@@22| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@21|)))))) :qid |Mapssdfy.66:15| :skolemid |2549| :pattern ( (MapType0Select (|lambda#31| |l#0@@23| |l#1@@22| |l#2@@21|) |$w#1@@1|)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@24| T@U) (|l#1@@23| T@U) (|l#2@@22| T@U) ) (!  (=> (and (and (and (= (type |$w#0|) BoxType) (= (type |l#0@@24|) TyType)) (= (type |l#1@@23|) (MapType0Type BoxType boolType))) (= (type |l#2@@22|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#45| |l#0@@24| |l#1@@23| |l#2@@22|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@24|) (and (U_2_bool (MapType0Select |l#1@@23| |$w#0|)) (U_2_bool (MapType0Select |l#2@@22| |$w#0|)))))) :qid |Mapssdfy.99:5| :skolemid |2550| :pattern ( (MapType0Select (|lambda#45| |l#0@@24| |l#1@@23| |l#2@@22|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@25| T@U) (|l#1@@24| T@U) (|l#2@@23| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@25|) TyType)) (= (type |l#1@@24|) (MapType0Type BoxType boolType))) (= (type |l#2@@23|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#59| |l#0@@25| |l#1@@24| |l#2@@23|) |$w#0@@0|))  (and ($IsBox |$w#0@@0| |l#0@@25|) (or (U_2_bool (MapType0Select |l#1@@24| |$w#0@@0|)) (U_2_bool (MapType0Select |l#2@@23| |$w#0@@0|)))))) :qid |Mapssdfy.117:3| :skolemid |2551| :pattern ( (MapType0Select (|lambda#59| |l#0@@25| |l#1@@24| |l#2@@23|) |$w#0@@0|)) )))
(assert (forall ((|$w#0@@1| T@U) (|l#0@@26| T@U) (|l#1@@25| T@U) (|l#2@@24| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@1|) BoxType) (= (type |l#0@@26|) (MapType0Type BoxType boolType))) (= (type |l#1@@25|) (MapType0Type BoxType BoxType))) (= (type |l#2@@24|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#60| |l#0@@26| |l#1@@25| |l#2@@24|) |$w#0@@1|) (ite (U_2_bool (MapType0Select |l#0@@26| |$w#0@@1|)) (MapType0Select |l#1@@25| |$w#0@@1|) (MapType0Select |l#2@@24| |$w#0@@1|)))) :qid |Mapssdfy.117:3| :skolemid |2552| :pattern ( (MapType0Select (|lambda#60| |l#0@@26| |l#1@@25| |l#2@@24|) |$w#0@@1|)) )))
(assert (forall ((|$w#0@@2| T@U) (|l#0@@27| T@U) (|l#1@@26| T@U) (|l#2@@25| T@U) (|l#3@@18| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@2|) BoxType) (= (type |l#0@@27|) TyType)) (= (type |l#1@@26|) (MapType0Type BoxType boolType))) (= (type |l#2@@25|) (MapType0Type BoxType boolType))) (= (type |l#3@@18|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#79| |l#0@@27| |l#1@@26| |l#2@@25| |l#3@@18|) |$w#0@@2|))  (and ($IsBox |$w#0@@2| |l#0@@27|) (or (or (U_2_bool (MapType0Select |l#1@@26| |$w#0@@2|)) (U_2_bool (MapType0Select |l#2@@25| |$w#0@@2|))) (U_2_bool (MapType0Select |l#3@@18| |$w#0@@2|)))))) :qid |Mapssdfy.191:3| :skolemid |2553| :pattern ( (MapType0Select (|lambda#79| |l#0@@27| |l#1@@26| |l#2@@25| |l#3@@18|) |$w#0@@2|)) )))
(assert (forall ((|$w#0@@3| T@U) (|l#0@@28| T@U) (|l#1@@27| T@U) (|l#2@@26| T@U) (|l#3@@19| T@U) (|l#4@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@3|) BoxType) (= (type |l#0@@28|) (MapType0Type BoxType boolType))) (= (type |l#1@@27|) (MapType0Type BoxType BoxType))) (= (type |l#2@@26|) (MapType0Type BoxType boolType))) (= (type |l#3@@19|) (MapType0Type BoxType BoxType))) (= (type |l#4@@5|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#80| |l#0@@28| |l#1@@27| |l#2@@26| |l#3@@19| |l#4@@5|) |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#0@@28| |$w#0@@3|)) (MapType0Select |l#1@@27| |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#2@@26| |$w#0@@3|)) (MapType0Select |l#3@@19| |$w#0@@3|) (MapType0Select |l#4@@5| |$w#0@@3|))))) :qid |Mapssdfy.191:3| :skolemid |2554| :pattern ( (MapType0Select (|lambda#80| |l#0@@28| |l#1@@27| |l#2@@26| |l#3@@19| |l#4@@5|) |$w#0@@3|)) )))
(assert (forall ((|$w#0@@4| T@U) (|l#0@@29| T@U) (|l#1@@28| T@U) ) (!  (=> (and (and (= (type |$w#0@@4|) BoxType) (= (type |l#0@@29|) TyType)) (= (type |l#1@@28|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#83| |l#0@@29| |l#1@@28|) |$w#0@@4|))  (and ($IsBox |$w#0@@4| |l#0@@29|) (U_2_bool (MapType0Select |l#1@@28| |$w#0@@4|))))) :qid |Mapssdfy.198:4| :skolemid |2555| :pattern ( (MapType0Select (|lambda#83| |l#0@@29| |l#1@@28|) |$w#0@@4|)) )))
(assert (forall ((|$y#0@@2| T@U) (|l#0@@30| T@U) (|l#1@@29| Int) (|l#2@@27| Int) (|l#3@@20| T@U) (|l#4@@6| T@U) ) (!  (=> (and (and (and (= (type |$y#0@@2|) BoxType) (= (type |l#0@@30|) TyType)) (= (type |l#3@@20|) (SeqType BoxType))) (= (type |l#4@@6|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#87| |l#0@@30| |l#1@@29| |l#2@@27| |l#3@@20| |l#4@@6|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@30|) (and (and (<= |l#1@@29| (U_2_int ($Unbox intType |$y#0@@2|))) (< (U_2_int ($Unbox intType |$y#0@@2|)) |l#2@@27|)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@20| (U_2_int ($Unbox intType |$y#0@@2|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@6| (U_2_int ($Unbox intType |$y#0@@2|)))))))))) :qid |MutableM.300:5| :skolemid |2556| :pattern ( (MapType0Select (|lambda#87| |l#0@@30| |l#1@@29| |l#2@@27| |l#3@@20| |l#4@@6|) |$y#0@@2|)) )))
(assert (forall ((|$w#1@@2| T@U) (|l#0@@31| Int) (|l#1@@30| Int) (|l#2@@28| T@U) (|l#3@@21| Int) ) (!  (=> (and (= (type |$w#1@@2|) BoxType) (= (type |l#2@@28|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#89| |l#0@@31| |l#1@@30| |l#2@@28| |l#3@@21|) |$w#1@@2|))  (and (and (<= |l#0@@31| (U_2_int ($Unbox intType |$w#1@@2|))) (< (U_2_int ($Unbox intType |$w#1@@2|)) |l#1@@30|)) (and (U_2_bool (MapType0Select |l#2@@28| |$w#1@@2|)) (not (= (U_2_int ($Unbox intType |$w#1@@2|)) |l#3@@21|)))))) :qid |MutableM.1313:21| :skolemid |2557| :pattern ( (MapType0Select (|lambda#89| |l#0@@31| |l#1@@30| |l#2@@28| |l#3@@21|) |$w#1@@2|)) )))
(assert (forall ((|$y#0@@3| T@U) (|l#0@@32| Int) (|l#1@@31| Int) (|l#2@@29| T@U) (|l#3@@22| T@U) (|l#4@@7| T@U) ) (!  (=> (and (and (and (= (type |$y#0@@3|) BoxType) (= (type |l#2@@29|) (SeqType BoxType))) (= (type |l#3@@22|) (SeqType BoxType))) (= (type |l#4@@7|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#101| |l#0@@32| |l#1@@31| |l#2@@29| |l#3@@22| |l#4@@7|) |$y#0@@3|)) (exists ((|j#0@@21| Int) ) (!  (and (and (and (<= |l#0@@32| |j#0@@21|) (< |j#0@@21| |l#1@@31|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |l#2@@29| |j#0@@21|)))) (= |$y#0@@3| ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@22| |j#0@@21|))))))) :qid |MutableM.1757:9| :skolemid |2437| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@7| |j#0@@21|))) )))) :qid |MutableM.1757:5| :skolemid |2558| :pattern ( (MapType0Select (|lambda#101| |l#0@@32| |l#1@@31| |l#2@@29| |l#3@@22| |l#4@@7|) |$y#0@@3|)) )))
(declare-fun $Heap@11 () T@U)
(declare-fun this@@23 () T@U)
(declare-fun $Heap@28 () T@U)
(declare-fun $Heap@@60 () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun |oldQueue#0@0| () T@U)
(declare-fun $Heap@27 () T@U)
(declare-fun $Heap@26 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun call5formal@this@0 () T@U)
(declare-fun |value##0@0| () T@U)
(declare-fun call0formal@MutableMap.ResizingHashMap$V@0 () T@U)
(declare-fun call1formal@this@0 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun StartFuel_MutableMapModel._default.Insert () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Insert () T@U)
(declare-fun |$rhs#2@0| () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |$rhs#3@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |call5formal@found#0@0| () T@U)
(declare-fun |q##0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |p##0@0| () T@U)
(declare-fun call5formal@this () T@U)
(declare-fun |next#0_0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs#0_0@0| () T@U)
(declare-fun $Heap@12 () T@U)
(declare-fun |##q#0_0@0| () T@U)
(declare-fun |$rhs#0_1@0| () T@U)
(declare-fun $Heap@13 () T@U)
(declare-fun $Heap@25 () T@U)
(declare-fun |$rhs#0_2_5@0| () T@U)
(declare-fun $Heap@23 () T@U)
(declare-fun $Heap@22 () T@U)
(declare-fun |$rhs#0_2_6@0| () T@U)
(declare-fun $Heap@24 () T@U)
(declare-fun |##q#0_2_0@0| () T@U)
(declare-fun |$rhs#0_2_7@0| () T@U)
(declare-fun $Heap@19 () T@U)
(declare-fun |$rhs#0_2_1_0@0| () T@U)
(declare-fun $Heap@20 () T@U)
(declare-fun |$rhs#0_2_4@0| () T@U)
(declare-fun $Heap@21 () T@U)
(declare-fun $Heap@17 () T@U)
(declare-fun $Heap@16 () T@U)
(declare-fun |prev#0_0@0| () T@U)
(declare-fun |$rhs#0_2_2@0| () T@U)
(declare-fun $Heap@18 () T@U)
(declare-fun $Heap@14 () T@U)
(declare-fun $Heap@15 () T@U)
(declare-fun |oldContents#0@0| () T@U)
(declare-fun |q##0_0@0| () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_LruModel._default.NextOpt () T@U)
(declare-fun StartFuelAssert_LruModel._default.NextOpt () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.lshift () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.rshift () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.bitnot () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.bitxor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.hash64 () T@U)
(declare-fun StartFuel_MutableMapModel._default.getEmptyWitness () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.getEmptyWitness () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Probe () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeInsert () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeGet () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeRemove () T@U)
(declare-fun StartFuel_MutableMapModel._default.Constructor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Constructor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.ReallocInternal () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.InsertAndGetOld () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.IterStart () T@U)
(declare-fun StartFuel_MutableMapModel._default.SimpleIterStart () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.SimpleIterStart () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.IterInc () T@U)
(declare-fun StartFuel_MutableMapModel._default.SimpleIterInc () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.SimpleIterInc () T@U)
(declare-fun StartFuel_MutableMapModel._default.MaxKey () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.MaxKey () T@U)
(declare-fun StartFuel_MutableMapModel._default.UpdateByIter () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.UpdateByIter () T@U)
(declare-fun StartFuel_MutableMapModel._default.FindSimpleIter () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FindSimpleIter () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |call5formal@found#0| () T@U)
(declare-fun call0formal@MutableMap.ResizingHashMap$V () T@U)
(declare-fun call0formal@MutableMap.ResizingHashMap$V@0@@0 () T@U)
(declare-fun call1formal@this@0@@0 () T@U)
(declare-fun |oldContents#0| () T@U)
(declare-fun |oldQueue#0| () T@U)
(declare-fun |node#0| () T@U)
(declare-fun |$rhs##0| () T@U)
(declare-fun |prev#0_0| () T@U)
(declare-fun |next#0_0| () T@U)
(declare-fun |$rhs#0_2_0_0| () T@U)
(declare-fun |$rhs#0_2_0| () T@U)
(declare-fun |$rhs#0_2_1| () T@U)
(declare-fun |$rhs#0_2_2| () T@U)
(declare-fun |$rhs#0_2_3| () T@U)
(declare-fun |$rhs#0_2_1_0| () T@U)
(declare-fun |$rhs#0_2_4| () T@U)
(declare-fun |$rhs#0_2_5| () T@U)
(declare-fun |$rhs#0_2_6| () T@U)
(declare-fun |$rhs#0_2_7| () T@U)
(declare-fun |$rhs#0_0| () T@U)
(declare-fun |$rhs#0_1| () T@U)
(declare-fun |newnode#0| () T@U)
(declare-fun |$rhs#1_0| () T@U)
(declare-fun |$rhs#0| () T@U)
(declare-fun |$rhs#1| () T@U)
(declare-fun |$rhs#2| () T@U)
(declare-fun |$rhs#3| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun |i#0_2_0@0| () Int)
(declare-fun %lbl%+2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun %lbl%+19 () Bool)
(declare-fun %lbl%+20 () Bool)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%@33 () Bool)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun %lbl%+36 () Bool)
(declare-fun |call4formal@j#0@0| () Int)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun %lbl%@41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%@43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun %lbl%@45 () Bool)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%+50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%@54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun %lbl%@56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%@58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%@60 () Bool)
(declare-fun %lbl%+61 () Bool)
(declare-fun %lbl%+62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun %lbl%@64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%@66 () Bool)
(declare-fun %lbl%@67 () Bool)
(declare-fun %lbl%@68 () Bool)
(declare-fun %lbl%@69 () Bool)
(declare-fun %lbl%@70 () Bool)
(declare-fun %lbl%@71 () Bool)
(declare-fun %lbl%@72 () Bool)
(declare-fun %lbl%+73 () Bool)
(declare-fun %lbl%+74 () Bool)
(declare-fun %lbl%@75 () Bool)
(declare-fun %lbl%@76 () Bool)
(declare-fun %lbl%@77 () Bool)
(declare-fun %lbl%@78 () Bool)
(declare-fun %lbl%@79 () Bool)
(declare-fun %lbl%@80 () Bool)
(declare-fun %lbl%@81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%@83 () Bool)
(declare-fun %lbl%@84 () Bool)
(declare-fun %lbl%+85 () Bool)
(declare-fun %lbl%+86 () Bool)
(declare-fun %lbl%+87 () Bool)
(declare-fun %lbl%+88 () Bool)
(declare-fun %lbl%+89 () Bool)
(declare-fun %lbl%@90 () Bool)
(declare-fun |k#0_2_0@0| () Int)
(declare-fun %lbl%+91 () Bool)
(declare-fun %lbl%@92 () Bool)
(declare-fun %lbl%@93 () Bool)
(declare-fun %lbl%@94 () Bool)
(declare-fun %lbl%@95 () Bool)
(declare-fun %lbl%@96 () Bool)
(declare-fun %lbl%@97 () Bool)
(declare-fun %lbl%@98 () Bool)
(declare-fun %lbl%@99 () Bool)
(declare-fun %lbl%@100 () Bool)
(declare-fun %lbl%@101 () Bool)
(declare-fun %lbl%+102 () Bool)
(declare-fun %lbl%@103 () Bool)
(declare-fun %lbl%@104 () Bool)
(declare-fun %lbl%@105 () Bool)
(declare-fun %lbl%@106 () Bool)
(declare-fun %lbl%@107 () Bool)
(declare-fun %lbl%@108 () Bool)
(declare-fun %lbl%@109 () Bool)
(declare-fun %lbl%@110 () Bool)
(declare-fun %lbl%@111 () Bool)
(declare-fun %lbl%@112 () Bool)
(declare-fun %lbl%+113 () Bool)
(declare-fun %lbl%+114 () Bool)
(declare-fun %lbl%@115 () Bool)
(declare-fun %lbl%@116 () Bool)
(declare-fun %lbl%@117 () Bool)
(declare-fun %lbl%@118 () Bool)
(declare-fun %lbl%@119 () Bool)
(declare-fun %lbl%@120 () Bool)
(declare-fun %lbl%@121 () Bool)
(declare-fun %lbl%@122 () Bool)
(declare-fun %lbl%@123 () Bool)
(declare-fun %lbl%@124 () Bool)
(declare-fun %lbl%+125 () Bool)
(declare-fun %lbl%+126 () Bool)
(declare-fun %lbl%+127 () Bool)
(declare-fun %lbl%+128 () Bool)
(declare-fun %lbl%+129 () Bool)
(declare-fun %lbl%@130 () Bool)
(declare-fun |i#6@0| () Int)
(declare-fun %lbl%+131 () Bool)
(declare-fun %lbl%+132 () Bool)
(declare-fun %lbl%+133 () Bool)
(declare-fun %lbl%+134 () Bool)
(declare-fun %lbl%+135 () Bool)
(declare-fun %lbl%+136 () Bool)
(declare-fun %lbl%+137 () Bool)
(declare-fun %lbl%@138 () Bool)
(declare-fun %lbl%@139 () Bool)
(declare-fun %lbl%@140 () Bool)
(declare-fun %lbl%@141 () Bool)
(declare-fun %lbl%@142 () Bool)
(declare-fun %lbl%@143 () Bool)
(declare-fun %lbl%@144 () Bool)
(declare-fun %lbl%@145 () Bool)
(declare-fun %lbl%@146 () Bool)
(declare-fun %lbl%@147 () Bool)
(declare-fun %lbl%@148 () Bool)
(declare-fun %lbl%@149 () Bool)
(declare-fun %lbl%@150 () Bool)
(declare-fun %lbl%@151 () Bool)
(declare-fun %lbl%@152 () Bool)
(declare-fun %lbl%@153 () Bool)
(declare-fun %lbl%@154 () Bool)
(declare-fun %lbl%@155 () Bool)
(declare-fun %lbl%@156 () Bool)
(declare-fun %lbl%@157 () Bool)
(declare-fun %lbl%@158 () Bool)
(declare-fun |x#0@@11| () Int)
(declare-fun %lbl%@159 () Bool)
(declare-fun %lbl%+160 () Bool)
(declare-fun %lbl%@161 () Bool)
(declare-fun $o@@119 () T@U)
(declare-fun $f@@31 () T@U)
(declare-fun %lbl%@162 () Bool)
(declare-fun %lbl%+163 () Bool)
(declare-fun %lbl%+164 () Bool)
(declare-fun %lbl%+165 () Bool)
(declare-fun %lbl%@166 () Bool)
(declare-fun %lbl%@167 () Bool)
(declare-fun %lbl%@168 () Bool)
(declare-fun %lbl%@169 () Bool)
(declare-fun %lbl%@170 () Bool)
(declare-fun %lbl%@171 () Bool)
(declare-fun %lbl%@172 () Bool)
(declare-fun %lbl%+173 () Bool)
(declare-fun %lbl%@174 () Bool)
(declare-fun %lbl%@175 () Bool)
(declare-fun %lbl%+176 () Bool)
(declare-fun %lbl%@177 () Bool)
(declare-fun %lbl%@178 () Bool)
(declare-fun %lbl%@179 () Bool)
(declare-fun %lbl%+180 () Bool)
(declare-fun %lbl%@181 () Bool)
(declare-fun %lbl%@182 () Bool)
(declare-fun %lbl%@183 () Bool)
(declare-fun %lbl%@184 () Bool)
(declare-fun %lbl%@185 () Bool)
(declare-fun %lbl%@186 () Bool)
(declare-fun %lbl%@187 () Bool)
(declare-fun %lbl%@188 () Bool)
(declare-fun %lbl%+189 () Bool)
(declare-fun %lbl%@190 () Bool)
(declare-fun %lbl%@191 () Bool)
(declare-fun %lbl%+192 () Bool)
(declare-fun %lbl%@193 () Bool)
(declare-fun %lbl%+194 () Bool)
(declare-fun %lbl%+195 () Bool)
(declare-fun %lbl%@196 () Bool)
(declare-fun %lbl%@197 () Bool)
(declare-fun %lbl%@198 () Bool)
(declare-fun %lbl%@199 () Bool)
(declare-fun %lbl%@200 () Bool)
(declare-fun %lbl%+201 () Bool)
(declare-fun %lbl%+202 () Bool)
(declare-fun %lbl%+203 () Bool)
(declare-fun %lbl%@204 () Bool)
(declare-fun %lbl%@205 () Bool)
(declare-fun %lbl%@206 () Bool)
(declare-fun %lbl%@207 () Bool)
(declare-fun %lbl%@208 () Bool)
(declare-fun %lbl%+209 () Bool)
(declare-fun %lbl%+210 () Bool)
(declare-fun %lbl%+211 () Bool)
(declare-fun %lbl%@212 () Bool)
(declare-fun %lbl%@213 () Bool)
(declare-fun %lbl%@214 () Bool)
(declare-fun %lbl%@215 () Bool)
(declare-fun %lbl%@216 () Bool)
(declare-fun %lbl%+217 () Bool)
(declare-fun %lbl%@218 () Bool)
(declare-fun %lbl%@219 () Bool)
(declare-fun %lbl%@220 () Bool)
(declare-fun %lbl%@221 () Bool)
(declare-fun %lbl%@222 () Bool)
(declare-fun $o@@120 () T@U)
(declare-fun $f@@32 () T@U)
(declare-fun %lbl%@223 () Bool)
(declare-fun %lbl%@224 () Bool)
(declare-fun %lbl%+225 () Bool)
(declare-fun %lbl%+226 () Bool)
(declare-fun %lbl%+227 () Bool)
(declare-fun |ref#4@0| () Int)
(declare-fun %lbl%@228 () Bool)
(declare-fun %lbl%@229 () Bool)
(declare-fun %lbl%@230 () Bool)
(declare-fun %lbl%+231 () Bool)
(declare-fun %lbl%@232 () Bool)
(declare-fun %lbl%@233 () Bool)
(declare-fun %lbl%@234 () Bool)
(declare-fun $o@@121 () T@U)
(declare-fun $f@@33 () T@U)
(declare-fun %lbl%@235 () Bool)
(declare-fun %lbl%@236 () Bool)
(declare-fun %lbl%@237 () Bool)
(declare-fun %lbl%@238 () Bool)
(declare-fun %lbl%@239 () Bool)
(declare-fun %lbl%@240 () Bool)
(declare-fun %lbl%@241 () Bool)
(declare-fun %lbl%@242 () Bool)
(declare-fun %lbl%@243 () Bool)
(declare-fun %lbl%@244 () Bool)
(declare-fun %lbl%@245 () Bool)
(declare-fun %lbl%@246 () Bool)
(declare-fun %lbl%@247 () Bool)
(declare-fun %lbl%@248 () Bool)
(declare-fun %lbl%@249 () Bool)
(declare-fun %lbl%@250 () Bool)
(declare-fun %lbl%@251 () Bool)
(declare-fun %lbl%@252 () Bool)
(declare-fun %lbl%@253 () Bool)
(declare-fun %lbl%@254 () Bool)
(declare-fun %lbl%@255 () Bool)
(declare-fun %lbl%+256 () Bool)
(declare-fun %lbl%@257 () Bool)
(declare-fun %lbl%+258 () Bool)
(declare-fun %lbl%@259 () Bool)
(declare-fun %lbl%@260 () Bool)
(declare-fun %lbl%+261 () Bool)
(declare-fun %lbl%@262 () Bool)
(declare-fun $o@@122 () T@U)
(declare-fun $f@@34 () T@U)
(declare-fun %lbl%@263 () Bool)
(declare-fun %lbl%@264 () Bool)
(declare-fun %lbl%@265 () Bool)
(declare-fun $o@@123 () T@U)
(declare-fun $f@@35 () T@U)
(declare-fun %lbl%@266 () Bool)
(declare-fun %lbl%@267 () Bool)
(declare-fun %lbl%+268 () Bool)
(declare-fun %lbl%@269 () Bool)
(declare-fun %lbl%@270 () Bool)
(declare-fun %lbl%@271 () Bool)
(declare-fun $o@@124 () T@U)
(declare-fun $f@@36 () T@U)
(declare-fun %lbl%@272 () Bool)
(declare-fun %lbl%@273 () Bool)
(declare-fun %lbl%@274 () Bool)
(declare-fun $o@@125 () T@U)
(declare-fun $f@@37 () T@U)
(declare-fun %lbl%@275 () Bool)
(declare-fun %lbl%+276 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $Heap@11) (MapType0Type refType MapType1Type)) (= (type this@@23) refType)) (= (type $Heap@28) (MapType0Type refType MapType1Type))) (= (type $Heap@@60) (MapType0Type refType MapType1Type))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (Ctor TType) 26)) (forall ((arg0@@393 T@U) ) (! (= (type (type@@0 arg0@@393)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@393)) ))) (= (type |oldQueue#0@0|) (SeqType BoxType))) (= (type $Heap@27) (MapType0Type refType MapType1Type))) (= (type $Heap@26) (MapType0Type refType MapType1Type))) (= (type $Heap@8) (MapType0Type refType MapType1Type))) (= (type $Heap@7) (MapType0Type refType MapType1Type))) (= (type call5formal@this@0) refType)) (= (type |value##0@0|) BoxType)) (= (type call0formal@MutableMap.ResizingHashMap$V@0) TyType)) (= (type call1formal@this@0) refType)) (= (type $Heap@9) (MapType0Type refType MapType1Type))) (= (type StartFuel_MutableMapModel._default.Insert) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Insert) LayerTypeType)) (= (type |$rhs#2@0|) (MapType0Type BoxType boolType))) (= (type $Heap@10) (MapType0Type refType MapType1Type))) (= (type |$rhs#3@0|) (SeqType BoxType))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type |call5formal@found#0@0|) DatatypeTypeType)) (= (type |q##0@0|) (SeqType BoxType))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |p##0@0|) refType)) (= (type call5formal@this) refType)) (= (type |next#0_0@0|) refType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |$rhs#0_0@0|) (MapType0Type BoxType boolType))) (= (type $Heap@12) (MapType0Type refType MapType1Type))) (= (type |##q#0_0@0|) (SeqType BoxType))) (= (type |$rhs#0_1@0|) (SeqType BoxType))) (= (type $Heap@13) (MapType0Type refType MapType1Type))) (= (type $Heap@25) (MapType0Type refType MapType1Type))) (= (type |$rhs#0_2_5@0|) refType)) (= (type $Heap@23) (MapType0Type refType MapType1Type))) (= (type $Heap@22) (MapType0Type refType MapType1Type))) (= (type |$rhs#0_2_6@0|) (MapType0Type BoxType boolType))) (= (type $Heap@24) (MapType0Type refType MapType1Type))) (= (type |##q#0_2_0@0|) (SeqType BoxType))) (= (type |$rhs#0_2_7@0|) (SeqType BoxType))) (= (type $Heap@19) (MapType0Type refType MapType1Type))) (= (type |$rhs#0_2_1_0@0|) refType)) (= (type $Heap@20) (MapType0Type refType MapType1Type))) (= (type |$rhs#0_2_4@0|) refType)) (= (type $Heap@21) (MapType0Type refType MapType1Type))) (= (type $Heap@17) (MapType0Type refType MapType1Type))) (= (type $Heap@16) (MapType0Type refType MapType1Type))) (= (type |prev#0_0@0|) refType)) (= (type |$rhs#0_2_2@0|) refType)) (= (type $Heap@18) (MapType0Type refType MapType1Type))) (= (type $Heap@14) (MapType0Type refType MapType1Type))) (= (type $Heap@15) (MapType0Type refType MapType1Type))) (= (type |oldContents#0@0|) (MapType BoxType BoxType))) (= (type |q##0_0@0|) (SeqType BoxType))) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_LruModel._default.NextOpt) LayerTypeType)) (= (type StartFuelAssert_LruModel._default.NextOpt) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.lshift) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.rshift) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.bitnot) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.bitxor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.hash64) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.getEmptyWitness) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.getEmptyWitness) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Probe) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeInsert) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeGet) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeRemove) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.Constructor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Constructor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.ReallocInternal) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.InsertAndGetOld) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.IterStart) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.SimpleIterStart) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.SimpleIterStart) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.IterInc) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.SimpleIterInc) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.SimpleIterInc) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.MaxKey) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.MaxKey) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.UpdateByIter) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.UpdateByIter) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.FindSimpleIter) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FindSimpleIter) LayerTypeType)) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |call5formal@found#0|) DatatypeTypeType)) (= (type call0formal@MutableMap.ResizingHashMap$V) TyType)) (= (type call0formal@MutableMap.ResizingHashMap$V@0@@0) TyType)) (= (type call1formal@this@0@@0) refType)) (= (type |oldContents#0|) (MapType BoxType BoxType))) (= (type |oldQueue#0|) (SeqType BoxType))) (= (type |node#0|) DatatypeTypeType)) (= (type |$rhs##0|) DatatypeTypeType)) (= (type |prev#0_0|) refType)) (= (type |next#0_0|) refType)) (= (type |$rhs#0_2_0_0|) refType)) (= (type |$rhs#0_2_0|) refType)) (= (type |$rhs#0_2_1|) refType)) (= (type |$rhs#0_2_2|) refType)) (= (type |$rhs#0_2_3|) refType)) (= (type |$rhs#0_2_1_0|) refType)) (= (type |$rhs#0_2_4|) refType)) (= (type |$rhs#0_2_5|) refType)) (= (type |$rhs#0_2_6|) (MapType0Type BoxType boolType))) (= (type |$rhs#0_2_7|) (SeqType BoxType))) (= (type |$rhs#0_0|) (MapType0Type BoxType boolType))) (= (type |$rhs#0_1|) (SeqType BoxType))) (= (type |newnode#0|) refType)) (= (type |$rhs#1_0|) refType)) (= (type |$rhs#0|) refType)) (= (type |$rhs#1|) refType)) (= (type |$rhs#2|) (MapType0Type BoxType boolType))) (= (type |$rhs#3|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$LruImpl.LruImplQueue.Use)
(assert (not (let ((anon28_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (! (or %lbl%@1 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) :lblneg @1)))) (let ((anon27_correct  (=> (! (and %lbl%+2 true) :lblpos +2) (=> (and (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))))) (=> (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next)) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))))))) (=> (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))))) (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))))) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))))) (and (! (or %lbl%@3 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next))) :lblneg @3) (and (! (or %lbl%@4 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))))) :lblneg @4) (and (! (or %lbl%@5 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) :lblneg @5) (=> (and (and (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next)) (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) anon28_correct)))))))) (let ((anon70_Else_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> (not (and (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next)) (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2))))))) anon27_correct)))) (let ((anon70_Then_correct  (=> (! (and %lbl%+7 true) :lblpos +7) (=> (and (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next)) (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2)))))) (and (! (or %lbl%@8 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @8) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@9 (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @9) (and (! (or %lbl%@10 ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60)) :lblneg @10) (=> ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60) (and (! (or %lbl%@11 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @11) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@12 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @12) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@13  (and (<= 0 (+ |i#0_2_0@0| 2)) (< (+ |i#0_2_0@0| 2) (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @13) (and (! (or %lbl%@14 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2))))) :lblneg @14) (and (! (or %lbl%@15 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @15) (and (! (or %lbl%@16 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @16) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@17  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @17) (and (! (or %lbl%@18 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @18) anon27_correct)))))))))))))))))))))) (let ((anon69_Else_correct  (=> (! (and %lbl%+19 true) :lblpos +19) (=> (not (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next))) (and anon70_Then_correct anon70_Else_correct))))) (let ((anon69_Then_correct  (=> (! (and %lbl%+20 true) :lblpos +20) (=> (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) LruImpl.Node.next)) (and (! (or %lbl%@21 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @21) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@22 (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @22) (and (! (or %lbl%@23 ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60)) :lblneg @23) (=> ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60) (and (! (or %lbl%@24 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @24) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@25 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @25) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@26  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @26) (and (! (or %lbl%@27 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @27) (and (! (or %lbl%@28 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))) null))) :lblneg @28) (and (! (or %lbl%@29 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @29) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@30 (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @30) (and (! (or %lbl%@31 ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60)) :lblneg @31) (=> ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60) (and (! (or %lbl%@32 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @32) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@33 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @33) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@34  (and (<= 0 (+ |i#0_2_0@0| 2)) (< (+ |i#0_2_0@0| 2) (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @34) (and (! (or %lbl%@35 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 2))))) :lblneg @35) (and anon70_Then_correct anon70_Else_correct)))))))))))))))))))))))))))))) (let ((anon68_Else_correct  (=> (! (and %lbl%+36 true) :lblpos +36) (=> (<= (- |call4formal@j#0@0| 1) |i#0_2_0@0|) (and (! (or %lbl%@37 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @37) (and (! (or %lbl%@38 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @38) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@39  (and (<= 0 |i#0_2_0@0|) (< |i#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @39) (and (! (or %lbl%@40 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) :lblneg @40) (and (! (or %lbl%@41 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|))) null))) :lblneg @41) (and (! (or %lbl%@42 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @42) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@43 (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @43) (and (! (or %lbl%@44 ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60)) :lblneg @44) (=> ($IsAlloc (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) (Tclass.MutableMap.ResizingHashMap Tclass.LruImpl.Node) $Heap@@60) (and (! (or %lbl%@45 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @45) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@46 ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60)) :lblneg @46) (=> ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60) (and (! (or %lbl%@47  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @47) (and (! (or %lbl%@48 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @48) (and (! (or %lbl%@49 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))) null))) :lblneg @49) (and anon69_Then_correct anon69_Else_correct))))))))))))))))))))))))) (let ((anon68_Then_correct  (=> (! (and %lbl%+50 true) :lblpos +50) (=> (< |i#0_2_0@0| (- |call4formal@j#0@0| 1)) (and (! (or %lbl%@51 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @51) (and (! (or %lbl%@52 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @52) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@53  (and (<= 0 |i#0_2_0@0|) (< |i#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @53) (and (! (or %lbl%@54 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) :lblneg @54) (and (! (or %lbl%@55 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|))) null))) :lblneg @55) (and (! (or %lbl%@56 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @56) (and (! (or %lbl%@57 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @57) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@58  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @58) (and (! (or %lbl%@59 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @59) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@60 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) :lblneg @60) (=> (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) anon28_correct)))))))))))))))))))) (let ((anon67_Else_correct  (=> (! (and %lbl%+61 true) :lblpos +61) (=> (not (= |i#0_2_0@0| (- |call4formal@j#0@0| 1))) (and anon68_Then_correct anon68_Else_correct))))) (let ((anon67_Then_correct  (=> (! (and %lbl%+62 true) :lblpos +62) (=> (= |i#0_2_0@0| (- |call4formal@j#0@0| 1)) (and (! (or %lbl%@63 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @63) (and (! (or %lbl%@64 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @64) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@65  (and (<= 0 |i#0_2_0@0|) (< |i#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @65) (and (! (or %lbl%@66 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) :lblneg @66) (and (! (or %lbl%@67 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|))) null))) :lblneg @67) (and (! (or %lbl%@68 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @68) (and (! (or %lbl%@69 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @69) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@70  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @70) (and (! (or %lbl%@71 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @71) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@72 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) :lblneg @72) (=> (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) anon28_correct)))))))))))))))))))) (let ((anon66_Else_correct  (=> (! (and %lbl%+73 true) :lblpos +73) (=> (not (= |i#0_2_0@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 2))) (and anon67_Then_correct anon67_Else_correct))))) (let ((anon66_Then_correct  (=> (! (and %lbl%+74 true) :lblpos +74) (=> (= |i#0_2_0@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 2)) (and (! (or %lbl%@75 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @75) (and (! (or %lbl%@76 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @76) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@77  (and (<= 0 |i#0_2_0@0|) (< |i#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @77) (and (! (or %lbl%@78 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) :lblneg @78) (and (! (or %lbl%@79 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|))) null))) :lblneg @79) (and (! (or %lbl%@80 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @80) (and (! (or %lbl%@81 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @81) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@82  (and (<= 0 (+ |i#0_2_0@0| 1)) (< (+ |i#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @82) (and (! (or %lbl%@83 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) :lblneg @83) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@84 (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1)))))) :lblneg @84) (=> (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_0@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |i#0_2_0@0| 1))))) anon28_correct)))))))))))))))))))) (let ((anon17_correct  (=> (! (and %lbl%+85 true) :lblpos +85) (=> (and (<= (LitInt 0) |i#0_2_0@0|) (< |i#0_2_0@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (and anon66_Then_correct anon66_Else_correct))))) (let ((anon65_Else_correct  (=> (! (and %lbl%+86 true) :lblpos +86) (=> (< |i#0_2_0@0| (LitInt 0)) anon17_correct)))) (let ((anon65_Then_correct  (=> (! (and %lbl%+87 true) :lblpos +87) (=> (<= (LitInt 0) |i#0_2_0@0|) anon17_correct)))) (let ((anon64_Then_correct  (=> (! (and %lbl%+88 true) :lblpos +88) (and anon65_Then_correct anon65_Else_correct)))) (let ((anon38_correct  (=> (! (and %lbl%+89 true) :lblpos +89) (! (or %lbl%@90 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev))) :lblneg @90)))) (let ((anon74_Else_correct  (=> (! (and %lbl%+91 true) :lblpos +91) (=> (not (= |k#0_2_0@0| (- |call4formal@j#0@0| 1))) (and (! (or %lbl%@92 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @92) (and (! (or %lbl%@93 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @93) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@94  (and (<= 0 |k#0_2_0@0|) (< |k#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @94) (and (! (or %lbl%@95 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|)))) :lblneg @95) (and (! (or %lbl%@96 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @96) (and (! (or %lbl%@97 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @97) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@98  (and (<= 0 (+ |k#0_2_0@0| 1)) (< (+ |k#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @98) (and (! (or %lbl%@99 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) :lblneg @99) (and (! (or %lbl%@100 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1)))) null))) :lblneg @100) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@101 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev))) :lblneg @101) (=> (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev)) anon38_correct)))))))))))))))))))) (let ((anon74_Then_correct  (=> (! (and %lbl%+102 true) :lblpos +102) (=> (= |k#0_2_0@0| (- |call4formal@j#0@0| 1)) (and (! (or %lbl%@103 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @103) (and (! (or %lbl%@104 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @104) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@105  (and (<= 0 |k#0_2_0@0|) (< |k#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @105) (and (! (or %lbl%@106 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|)))) :lblneg @106) (and (! (or %lbl%@107 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @107) (and (! (or %lbl%@108 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @108) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@109  (and (<= 0 (+ |k#0_2_0@0| 1)) (< (+ |k#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @109) (and (! (or %lbl%@110 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) :lblneg @110) (and (! (or %lbl%@111 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1)))) null))) :lblneg @111) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@112 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev))) :lblneg @112) (=> (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev)) anon38_correct)))))))))))))))))))) (let ((anon73_Else_correct  (=> (! (and %lbl%+113 true) :lblpos +113) (=> (<= (- |call4formal@j#0@0| 1) |k#0_2_0@0|) (and anon74_Then_correct anon74_Else_correct))))) (let ((anon73_Then_correct  (=> (! (and %lbl%+114 true) :lblpos +114) (=> (< |k#0_2_0@0| (- |call4formal@j#0@0| 1)) (and (! (or %lbl%@115 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @115) (and (! (or %lbl%@116 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @116) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@117  (and (<= 0 |k#0_2_0@0|) (< |k#0_2_0@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @117) (and (! (or %lbl%@118 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|)))) :lblneg @118) (and (! (or %lbl%@119 (not (= (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @119) (and (! (or %lbl%@120 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @120) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@121  (and (<= 0 (+ |k#0_2_0@0| 1)) (< (+ |k#0_2_0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @121) (and (! (or %lbl%@122 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) :lblneg @122) (and (! (or %lbl%@123 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1)))) null))) :lblneg @123) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (! (or %lbl%@124 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev))) :lblneg @124) (=> (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_0@0|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) (+ |k#0_2_0@0| 1))))) LruImpl.Node.prev)) anon38_correct)))))))))))))))))))) (let ((anon33_correct  (=> (! (and %lbl%+125 true) :lblpos +125) (=> (and (<= (LitInt 0) |k#0_2_0@0|) (< |k#0_2_0@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (and anon73_Then_correct anon73_Else_correct))))) (let ((anon72_Else_correct  (=> (! (and %lbl%+126 true) :lblpos +126) (=> (< |k#0_2_0@0| (LitInt 0)) anon33_correct)))) (let ((anon72_Then_correct  (=> (! (and %lbl%+127 true) :lblpos +127) (=> (<= (LitInt 0) |k#0_2_0@0|) anon33_correct)))) (let ((anon71_Then_correct  (=> (! (and %lbl%+128 true) :lblpos +128) (and anon72_Then_correct anon72_Else_correct)))) (let ((anon54_correct  (=> (! (and %lbl%+129 true) :lblpos +129) (! (or %lbl%@130 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) |i#6@0|)))) :lblneg @130)))) (let ((anon79_Else_correct  (=> (! (and %lbl%+131 true) :lblpos +131) (=> (not (= |i#6@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1))) anon54_correct)))) (let ((anon79_Then_correct  (=> (! (and %lbl%+132 true) :lblpos +132) (=> (= |i#6@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)) anon54_correct)))) (let ((anon51_correct  (=> (! (and %lbl%+133 true) :lblpos +133) (=> (and (<= (LitInt 0) |i#6@0|) (< |i#6@0| (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)))) (and anon79_Then_correct anon79_Else_correct))))) (let ((anon78_Else_correct  (=> (! (and %lbl%+134 true) :lblpos +134) (=> (< |i#6@0| (LitInt 0)) anon51_correct)))) (let ((anon78_Then_correct  (=> (! (and %lbl%+135 true) :lblpos +135) (=> (<= (LitInt 0) |i#6@0|) anon51_correct)))) (let ((anon77_Then_correct  (=> (! (and %lbl%+136 true) :lblpos +136) (and anon78_Then_correct anon78_Else_correct)))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+137 true) :lblpos +137) (and (! (or %lbl%@138  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) ($Box (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))))))) :lblneg @138) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) ($Box (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))))) (and (! (or %lbl%@139  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Subset| (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr))))) :lblneg @139) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Subset| (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr)))) (and (! (or %lbl%@140  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))))) :lblneg @140) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@141  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Equal| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))))))))) :lblneg @141) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Equal| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))))))) (and (! (or %lbl%@142  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@23))))))) :lblneg @142) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@23)))))) (and (! (or %lbl%@143  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr))))) :lblneg @143) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)))) (and (! (or %lbl%@144  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.head__node) null))))) :lblneg @144) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.head__node) null)))) (and (! (or %lbl%@145  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.tail__node) null))))) :lblneg @145) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.tail__node) null)))) (and (! (or %lbl%@146  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType)))))) :lblneg @146) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType))))) (and (! (or %lbl%@147  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#3@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#3@@5|)))) :qid |LruImpli.101:18| :skolemid |1134| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#3@@5|))) ))))) :lblneg @147) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#3@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#3@@6|)))) :qid |LruImpli.101:18| :skolemid |1134| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#3@@6|))) )))) (and (! (or %lbl%@148  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|ref#2| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#2|) (< |ref#2| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#2|))))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#2|)))) :qid |LruImpli.102:18| :skolemid |1135| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) ($Box (int_2_U |ref#2|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#2|)))) ))))) :lblneg @148) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|ref#2@@0| T@U) ) (!  (=> (= (type |ref#2@@0|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#2@@0|)) (< (U_2_int |ref#2@@0|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#2@@0|)))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) ($Box |ref#2@@0|)))) :qid |LruImpli.102:18| :skolemid |1135| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) ($Box |ref#2@@0|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#2@@0|))) )))) (and (! (or %lbl%@149  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|ref#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |ref#3|) (< |ref#3| 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#3|))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#3|))))) LruImpl.Node.value)) |ref#3|)) :qid |LruImpli.103:18| :skolemid |1136| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#3|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#3|)))) ))))) :lblneg @149) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|ref#3@@0| T@U) ) (!  (=> (= (type |ref#3@@0|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#3@@0|)) (< (U_2_int |ref#3@@0|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#3@@0|)))) (= (U_2_int (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#3@@0|)))) LruImpl.Node.value)) (U_2_int |ref#3@@0|)))) :qid |LruImpli.103:18| :skolemid |1136| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#3@@0|))) )))) (and (! (or %lbl%@150  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0))))))))) :lblneg @150) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0)))))))) (and (! (or %lbl%@151  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))))))))) :lblneg @151) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1)))))))) (and (! (or %lbl%@152  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null))))) :lblneg @152) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)))) (and (! (or %lbl%@153  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null))))) :lblneg @153) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 0) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)))) (and (! (or %lbl%@154  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#4| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#4| 1)) (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#4|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#2|)))))) :qid |LruImpli.110:18| :skolemid |1137| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#2|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#4|))) ))))) :lblneg @154) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#4@@0| Int) (|_t#0#2@@0| Int) ) (!  (=> (= |_t#0#2@@0| (+ |i#4@@0| 1)) (=> (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#4@@0|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#2@@0|)))))) :qid |LruImpli.110:18| :skolemid |1137| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#2@@0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#4@@0|))) )))) (and (! (or %lbl%@155  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#5| Int) (|_t#0#3| Int) ) (!  (=> (= |_t#0#3| (+ |i#5| 1)) (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#5|))) (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#3|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |1138| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#3|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#5|))) ))))) :lblneg @155) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (forall ((|i#5@@0| Int) (|_t#0#3@@0| Int) ) (!  (=> (= |_t#0#3@@0| (+ |i#5@@0| 1)) (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#5@@0|))) (MapType1Select (MapType0Select $Heap@28 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#3@@0|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |1138| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#3@@0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) |i#5@@0|))) )))) (and (! (or %lbl%@156  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)))))))) :lblneg @156) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@28 (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.nodemap))))))) (and (! (or %lbl%@157  (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @157) (=> (=> (|LruImpl.LruImplQueue.Inv#canCall| $Heap@28 this@@23) (or (LruImpl.LruImplQueue.Inv $Heap@28 this@@23) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue)))) (and (! (or %lbl%@158 (|Seq#Equal| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LruModel.__default.Use (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|))) :lblneg @158) (=> (|Seq#Equal| (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Queue) (LruModel.__default.Use (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|)) (! (or %lbl%@159 (forall ((|x#2| T@U) ) (!  (=> (= (type |x#2|) refType) (=> (and ($Is |x#2| Tclass._System.object) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) ($Box |x#2|)))) (or (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr) ($Box |x#2|))) (and (not (= |x#2| null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@@60 |x#2|) alloc))))))) :qid |LruImpli.256:20| :skolemid |1144| :pattern ( (MapType0Select (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr) ($Box |x#2|))) :pattern ( (MapType0Select (MapType1Select (MapType0Select $Heap@28 this@@23) LruImpl.LruImplQueue.Repr) ($Box |x#2|))) ))) :lblneg @159)))))))))))))))))))))))))))))))))))))))))))))) (let ((anon57_correct  (=> (! (and %lbl%+160 true) :lblpos +160) (and (! (or %lbl%@161 (forall (($o@@126 T@U) ($f@@38 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (= (type $o@@126) refType) (= (type $f@@38) (FieldType alpha@@38))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@126 $f@@38)))) :qid |LruImpli.361:13| :skolemid |1156| :no-pattern (type $o@@126) :no-pattern (type $f@@38) :no-pattern (U_2_int $o@@126) :no-pattern (U_2_bool $o@@126) :no-pattern (U_2_int $f@@38) :no-pattern (U_2_bool $f@@38) ))) :lblneg @161) (=> (forall (($o@@127 T@U) ($f@@39 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (= (type $o@@127) refType) (= (type $f@@39) (FieldType alpha@@39))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@127 $f@@39)))) :qid |LruImpli.361:13| :skolemid |1156| :no-pattern (type@@0 $o@@119) :no-pattern (type@@0 $f@@31) :no-pattern (type $o@@127) :no-pattern (type $f@@39) :no-pattern (U_2_int $o@@127) :no-pattern (U_2_bool $o@@127) :no-pattern (U_2_int $f@@39) :no-pattern (U_2_bool $f@@39) )) (and (! (or %lbl%@162  (=> (|LruModel.__default.WF#canCall| |oldQueue#0@0|) (or (LruModel.__default.WF |oldQueue#0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |oldQueue#0@0|)))) :lblneg @162) (=> (=> (|LruModel.__default.WF#canCall| |oldQueue#0@0|) (or (LruModel.__default.WF |oldQueue#0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |oldQueue#0@0|))) (=> (and ($IsGoodHeap $Heap@27) ($IsHeapAnchor $Heap@27)) (=> (and (and (|LruModel.__default.Use#canCall| |oldQueue#0@0| |x#0@@11|) (|LruModel.__default.WF#canCall| (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|))) (and (|LruModel.__default.WF#canCall| (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|)) (and (and (LruModel.__default.WF (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|)) ($Is (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|) (TSeq Tclass.NativeTypes.uint64))) (LruModel.__default.distinct StartFuel_LruModel._default.distinct (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|))))) (=> (and (and (and (and (|LruModel.__default.Use#canCall| |oldQueue#0@0| |x#0@@11|) (|LruModel.__default.I#canCall| (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|))) (|LruModel.__default.I#canCall| |oldQueue#0@0|)) (|Set#Equal| (LruModel.__default.I (LruModel.__default.Use |oldQueue#0@0| |x#0@@11|)) (|Set#Union| (LruModel.__default.I |oldQueue#0@0|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |x#0@@11|)))))) (and (= $Heap@26 $Heap@27) (= $Heap@28 $Heap@27))) GeneratedUnifiedExit_correct)))))))))) (let ((anon71_Else_correct  (=> (! (and %lbl%+163 true) :lblpos +163) (=> (and (forall ((|k#0_2_1| Int) (|_t#0#0_2_1| Int) ) (!  (=> (= |_t#0#0_2_1| (+ |k#0_2_1| 1)) (=> (and (<= (LitInt 0) |k#0_2_1|) (< |k#0_2_1| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_1|))) (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0_2_1|)))) LruImpl.Node.prev)))) :qid |LruImpli.314:18| :skolemid |1150| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0_2_1|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |k#0_2_1|))) )) (= $Heap@26 $Heap@25)) anon57_correct)))) (let ((anon64_Else_correct  (=> (! (and %lbl%+164 true) :lblpos +164) (=> (forall ((|i#0_2_1| Int) (|_t#0#0_2_0| Int) ) (!  (=> (= |_t#0#0_2_0| (+ |i#0_2_1| 1)) (=> (and (<= (LitInt 0) |i#0_2_1|) (< |i#0_2_1| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@25 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_1|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@25 (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0_2_0|)))))) :qid |LruImpli.297:18| :skolemid |1149| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0_2_0|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@25 this@@23) LruImpl.LruImplQueue.Queue) |i#0_2_1|))) )) (and anon71_Then_correct anon71_Else_correct))))) (let ((anon14_correct  (=> (! (and %lbl%+165 true) :lblpos +165) (and (! (or %lbl%@166 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.tail__node))) :lblneg @166) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.tail__node)) (and (! (or %lbl%@167 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @167) (=> (Options.Option.Some_q |call5formal@found#0@0|) (=> (= |$rhs#0_2_5@0| ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) (=> (and (= $Heap@23 (MapType0Store $Heap@22 this@@23 (MapType1Store (MapType0Select $Heap@22 this@@23) LruImpl.LruImplQueue.tail__node |$rhs#0_2_5@0|))) ($IsGoodHeap $Heap@23)) (and (! (or %lbl%@168 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr))) :lblneg @168) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr)) (and (! (or %lbl%@169 (not (= (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @169) (=> (not (= (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@170 (not (= (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @170) (=> (not (= (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@171 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @171) (=> (and (and (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap)) (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap))))) (=> (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap)))) (= |$rhs#0_2_6@0| (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@23 (MapType1Select (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.nodemap))))))) (and (= $Heap@24 (MapType0Store $Heap@23 this@@23 (MapType1Store (MapType0Select $Heap@23 this@@23) LruImpl.LruImplQueue.Repr |$rhs#0_2_6@0|))) ($IsGoodHeap $Heap@24))) (and (! (or %lbl%@172 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue))) :lblneg @172) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue)) (=> (and (and (and (= |##q#0_2_0@0| (MapType1Select (MapType0Select $Heap@24 this@@23) LruImpl.LruImplQueue.Queue)) ($IsAlloc |##q#0_2_0@0| (TSeq Tclass.NativeTypes.uint64) $Heap@24)) (and ($IsAlloc (int_2_U |x#0@@11|) Tclass.NativeTypes.uint64 $Heap@24) (|LruModel.__default.Remove#canCall| (MapType1Select (MapType0Select $Heap@24 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|))) (and (and (|LruModel.__default.Remove#canCall| (MapType1Select (MapType0Select $Heap@24 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|) (= |$rhs#0_2_7@0| (|Seq#Append| (LruModel.__default.Remove ($LS $LZ) (MapType1Select (MapType0Select $Heap@24 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |x#0@@11|)))))) (and (= $Heap@25 (MapType0Store $Heap@24 this@@23 (MapType1Store (MapType0Select $Heap@24 this@@23) LruImpl.LruImplQueue.Queue |$rhs#0_2_7@0|))) ($IsGoodHeap $Heap@25)))) (and anon64_Then_correct anon64_Else_correct)))))))))))))))))))))) (let ((anon63_Else_correct  (=> (! (and %lbl%+173 true) :lblpos +173) (=> (= (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) null) (and (! (or %lbl%@174 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node))) :lblneg @174) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node)) (and (! (or %lbl%@175 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @175) (=> (Options.Option.Some_q |call5formal@found#0@0|) (=> (and (and (= |$rhs#0_2_4@0| ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) (= $Heap@21 (MapType0Store $Heap@19 this@@23 (MapType1Store (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.head__node |$rhs#0_2_4@0|)))) (and ($IsGoodHeap $Heap@21) (= $Heap@22 $Heap@21))) anon14_correct))))))))) (let ((anon63_Then_correct  (=> (! (and %lbl%+176 true) :lblpos +176) (=> (not (= (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) null)) (and (! (or %lbl%@177 (not (= (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) null))) :lblneg @177) (=> (not (= (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) null)) (and (! (or %lbl%@178 (U_2_bool (MapType6Select $_Frame@0 (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) LruImpl.Node.next))) :lblneg @178) (=> (U_2_bool (MapType6Select $_Frame@0 (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) LruImpl.Node.next)) (and (! (or %lbl%@179 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @179) (=> (Options.Option.Some_q |call5formal@found#0@0|) (=> (and (and (= |$rhs#0_2_1_0@0| ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) (= $Heap@20 (MapType0Store $Heap@19 (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node) (MapType1Store (MapType0Select $Heap@19 (MapType1Select (MapType0Select $Heap@19 this@@23) LruImpl.LruImplQueue.tail__node)) LruImpl.Node.next |$rhs#0_2_1_0@0|)))) (and ($IsGoodHeap $Heap@20) (= $Heap@22 $Heap@20))) anon14_correct))))))))))) (let ((anon11_correct  (=> (! (and %lbl%+180 true) :lblpos +180) (and (! (or %lbl%@181 (not (= |next#0_0@0| null))) :lblneg @181) (=> (not (= |next#0_0@0| null)) (and (! (or %lbl%@182 (U_2_bool (MapType6Select $_Frame@0 |next#0_0@0| LruImpl.Node.prev))) :lblneg @182) (=> (U_2_bool (MapType6Select $_Frame@0 |next#0_0@0| LruImpl.Node.prev)) (=> (and (= $Heap@17 (MapType0Store $Heap@16 |next#0_0@0| (MapType1Store (MapType0Select $Heap@16 |next#0_0@0|) LruImpl.Node.prev |prev#0_0@0|))) ($IsGoodHeap $Heap@17)) (and (! (or %lbl%@183 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @183) (=> (Options.Option.Some_q |call5formal@found#0@0|) (and (! (or %lbl%@184 (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null))) :lblneg @184) (=> (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null)) (and (! (or %lbl%@185 (U_2_bool (MapType6Select $_Frame@0 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) LruImpl.Node.prev))) :lblneg @185) (=> (U_2_bool (MapType6Select $_Frame@0 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) LruImpl.Node.prev)) (=> (= |$rhs#0_2_2@0| (MapType1Select (MapType0Select $Heap@17 this@@23) LruImpl.LruImplQueue.tail__node)) (=> (and (= $Heap@18 (MapType0Store $Heap@17 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) (MapType1Store (MapType0Select $Heap@17 ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) LruImpl.Node.prev |$rhs#0_2_2@0|))) ($IsGoodHeap $Heap@18)) (and (! (or %lbl%@186 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @186) (=> (Options.Option.Some_q |call5formal@found#0@0|) (and (! (or %lbl%@187 (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null))) :lblneg @187) (=> (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null)) (and (! (or %lbl%@188 (U_2_bool (MapType6Select $_Frame@0 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) LruImpl.Node.next))) :lblneg @188) (=> (U_2_bool (MapType6Select $_Frame@0 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) LruImpl.Node.next)) (=> (and (= $Heap@19 (MapType0Store $Heap@18 ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) (MapType1Store (MapType0Select $Heap@18 ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) LruImpl.Node.next null))) ($IsGoodHeap $Heap@19)) (and anon63_Then_correct anon63_Else_correct)))))))))))))))))))))))) (let ((anon62_Else_correct  (=> (! (and %lbl%+189 true) :lblpos +189) (=> (not (= |prev#0_0@0| null)) (and (! (or %lbl%@190 (not (= |prev#0_0@0| null))) :lblneg @190) (=> (not (= |prev#0_0@0| null)) (and (! (or %lbl%@191 (U_2_bool (MapType6Select $_Frame@0 |prev#0_0@0| LruImpl.Node.next))) :lblneg @191) (=> (U_2_bool (MapType6Select $_Frame@0 |prev#0_0@0| LruImpl.Node.next)) (=> (= $Heap@15 (MapType0Store $Heap@2 |prev#0_0@0| (MapType1Store (MapType0Select $Heap@2 |prev#0_0@0|) LruImpl.Node.next |next#0_0@0|))) (=> (and ($IsGoodHeap $Heap@15) (= $Heap@16 $Heap@15)) anon11_correct)))))))))) (let ((anon62_Then_correct  (=> (! (and %lbl%+192 true) :lblpos +192) (=> (= |prev#0_0@0| null) (and (! (or %lbl%@193 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node))) :lblneg @193) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node)) (=> (= $Heap@14 (MapType0Store $Heap@2 this@@23 (MapType1Store (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.head__node |next#0_0@0|))) (=> (and ($IsGoodHeap $Heap@14) (= $Heap@16 $Heap@14)) anon11_correct)))))))) (let ((anon61_Then_correct  (=> (! (and %lbl%+194 true) :lblpos +194) (=> (not (= |next#0_0@0| null)) (and anon62_Then_correct anon62_Else_correct))))) (let ((anon61_Else_correct  (=> (! (and %lbl%+195 true) :lblpos +195) (=> (= |next#0_0@0| null) (and (! (or %lbl%@196 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr))) :lblneg @196) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr)) (and (! (or %lbl%@197 (not (= (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @197) (=> (not (= (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@198 (not (= (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @198) (=> (not (= (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@199 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @199) (=> (and (and (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap)) (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap))))) (=> (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap)))) (= |$rhs#0_0@0| (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@2 (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.nodemap))))))) (and (= $Heap@12 (MapType0Store $Heap@2 this@@23 (MapType1Store (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Repr |$rhs#0_0@0|))) ($IsGoodHeap $Heap@12))) (and (! (or %lbl%@200 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue))) :lblneg @200) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue)) (=> (= |##q#0_0@0| (MapType1Select (MapType0Select $Heap@12 this@@23) LruImpl.LruImplQueue.Queue)) (=> (and (and (and ($IsAlloc |##q#0_0@0| (TSeq Tclass.NativeTypes.uint64) $Heap@12) ($IsAlloc (int_2_U |x#0@@11|) Tclass.NativeTypes.uint64 $Heap@12)) (and (|LruModel.__default.Remove#canCall| (MapType1Select (MapType0Select $Heap@12 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|) (|LruModel.__default.Remove#canCall| (MapType1Select (MapType0Select $Heap@12 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|))) (and (and (= |$rhs#0_1@0| (|Seq#Append| (LruModel.__default.Remove ($LS $LZ) (MapType1Select (MapType0Select $Heap@12 this@@23) LruImpl.LruImplQueue.Queue) |x#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |x#0@@11|))))) (= $Heap@13 (MapType0Store $Heap@12 this@@23 (MapType1Store (MapType0Select $Heap@12 this@@23) LruImpl.LruImplQueue.Queue |$rhs#0_1@0|)))) (and ($IsGoodHeap $Heap@13) (= $Heap@26 $Heap@13)))) anon57_correct))))))))))))))))) (let ((anon7_correct  (=> (! (and %lbl%+201 true) :lblpos +201) (and anon61_Then_correct anon61_Else_correct)))) (let ((anon60_Else_correct  (=> (! (and %lbl%+202 true) :lblpos +202) (=> (<= (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue)) 1) |call4formal@j#0@0|) anon7_correct)))) (let ((anon60_Then_correct  (=> (! (and %lbl%+203 true) :lblpos +203) (=> (< |call4formal@j#0@0| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue)) 1)) (and (! (or %lbl%@204 (U_2_bool (MapType0Select (|Map#Domain| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) :lblneg @204) (and (! (or %lbl%@205 (not (= ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|)))) null))) :lblneg @205) (and (! (or %lbl%@206  (and (<= 0 (+ |call4formal@j#0@0| 1)) (< (+ |call4formal@j#0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @206) (and (! (or %lbl%@207 (U_2_bool (MapType0Select (|Map#Domain| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (+ |call4formal@j#0@0| 1))))) :lblneg @207) (and (! (or %lbl%@208 (= (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (+ |call4formal@j#0@0| 1)))))) :lblneg @208) (=> (= (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (+ |call4formal@j#0@0| 1))))) anon7_correct)))))))))) (let ((anon4_correct  (=> (! (and %lbl%+209 true) :lblpos +209) (and anon60_Then_correct anon60_Else_correct)))) (let ((anon59_Else_correct  (=> (! (and %lbl%+210 true) :lblpos +210) (=> (>= 0 |call4formal@j#0@0|) anon4_correct)))) (let ((anon59_Then_correct  (=> (! (and %lbl%+211 true) :lblpos +211) (=> (> |call4formal@j#0@0| 0) (and (! (or %lbl%@212 (U_2_bool (MapType0Select (|Map#Domain| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) :lblneg @212) (and (! (or %lbl%@213 (not (= ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|)))) null))) :lblneg @213) (and (! (or %lbl%@214  (and (<= 0 (- |call4formal@j#0@0| 1)) (< (- |call4formal@j#0@0| 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @214) (and (! (or %lbl%@215 (U_2_bool (MapType0Select (|Map#Domain| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (- |call4formal@j#0@0| 1))))) :lblneg @215) (and (! (or %lbl%@216 (= (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) LruImpl.Node.prev) ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (- |call4formal@j#0@0| 1)))))) :lblneg @216) (=> (= (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) ($Box (int_2_U |x#0@@11|))))) LruImpl.Node.prev) ($Unbox refType (MapType0Select (|Map#Elements| |oldContents#0@0|) (|Seq#Index| (MapType1Select (MapType0Select $Heap@2 this@@23) LruImpl.LruImplQueue.Queue) (- |call4formal@j#0@0| 1))))) anon4_correct)))))))))) (let ((anon58_Then_correct  (=> (! (and %lbl%+217 true) :lblpos +217) (=> (Options.Option.Some_q |call5formal@found#0@0|) (and (! (or %lbl%@218 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @218) (=> (Options.Option.Some_q |call5formal@found#0@0|) (and (! (or %lbl%@219 (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null))) :lblneg @219) (=> (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null)) (=> (= |prev#0_0@0| (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) LruImpl.Node.prev)) (and (! (or %lbl%@220 (Options.Option.Some_q |call5formal@found#0@0|)) :lblneg @220) (=> (Options.Option.Some_q |call5formal@found#0@0|) (and (! (or %lbl%@221 (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null))) :lblneg @221) (=> (not (= ($Unbox refType (Options.Option.value |call5formal@found#0@0|)) null)) (=> (and (= |next#0_0@0| (MapType1Select (MapType0Select $Heap@1 ($Unbox refType (Options.Option.value |call5formal@found#0@0|))) LruImpl.Node.next)) (= |q##0_0@0| (MapType1Select (MapType0Select $Heap@1 this@@23) LruImpl.LruImplQueue.Queue))) (and (! (or %lbl%@222 (forall (($o@@128 T@U) ($f@@40 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (= (type $o@@128) refType) (= (type $f@@40) (FieldType alpha@@40))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@128 $f@@40)))) :qid |LruImpli.268:48| :skolemid |1148| :no-pattern (type $o@@128) :no-pattern (type $f@@40) :no-pattern (U_2_int $o@@128) :no-pattern (U_2_bool $o@@128) :no-pattern (U_2_int $f@@40) :no-pattern (U_2_bool $f@@40) ))) :lblneg @222) (=> (forall (($o@@129 T@U) ($f@@41 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (= (type $o@@129) refType) (= (type $f@@41) (FieldType alpha@@41))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@129 $f@@41)))) :qid |LruImpli.268:48| :skolemid |1148| :no-pattern (type@@0 $o@@120) :no-pattern (type@@0 $f@@32) :no-pattern (type $o@@129) :no-pattern (type $f@@41) :no-pattern (U_2_int $o@@129) :no-pattern (U_2_bool $o@@129) :no-pattern (U_2_int $f@@41) :no-pattern (U_2_bool $f@@41) )) (and (! (or %lbl%@223 (|Seq#Contains| |q##0_0@0| ($Box (int_2_U |x#0@@11|)))) :lblneg @223) (=> (|Seq#Contains| |q##0_0@0| ($Box (int_2_U |x#0@@11|))) (and (! (or %lbl%@224  (=> (|LruModel.__default.WF#canCall| |q##0_0@0|) (or (LruModel.__default.WF |q##0_0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |q##0_0@0|)))) :lblneg @224) (=> (=> (|LruModel.__default.WF#canCall| |q##0_0@0|) (or (LruModel.__default.WF |q##0_0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |q##0_0@0|))) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (<= (LitInt 0) |call4formal@j#0@0|) (< |call4formal@j#0@0| (|Seq#Length| |q##0_0@0|)))) (and (and (= (U_2_int ($Unbox intType (|Seq#Index| |q##0_0@0| |call4formal@j#0@0|))) |x#0@@11|) (|LruModel.__default.Remove#canCall| |q##0_0@0| |x#0@@11|)) (and (|Seq#Equal| (LruModel.__default.Remove ($LS ($LS $LZ)) |q##0_0@0| |x#0@@11|) (|Seq#Append| (|Seq#Take| |q##0_0@0| |call4formal@j#0@0|) (|Seq#Drop| |q##0_0@0| (+ |call4formal@j#0@0| 1)))) (= $Heap@1 $Heap@2)))) (and anon59_Then_correct anon59_Else_correct)))))))))))))))))))))) (let ((anon77_Else_correct  (=> (! (and %lbl%+225 true) :lblpos +225) (=> (and (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) |i#7|)))) :qid |LruImpli.353:16| :skolemid |1155| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) |i#7|))) )) (= $Heap@26 $Heap@11)) anon57_correct)))) (let ((anon76_Else_correct  (=> (! (and %lbl%+226 true) :lblpos +226) (=> (forall ((|ref#5| T@U) ) (!  (=> (= (type |ref#5|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#5|)) (< (U_2_int |ref#5|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#5|)))) (= (U_2_int (MapType1Select (MapType0Select $Heap@11 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#5|)))) LruImpl.Node.value)) (U_2_int |ref#5|)))) :qid |LruImpli.350:16| :skolemid |1154| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#5|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#5|))) )) (and anon77_Then_correct anon77_Else_correct))))) (let ((anon76_Then_correct  (=> (! (and %lbl%+227 true) :lblpos +227) (=> (and (<= (LitInt 0) |ref#4@0|) (< |ref#4@0| 18446744073709551616)) (and (! (or %lbl%@228 (not (= (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @228) (and (! (or %lbl%@229 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @229) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (=> (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#4@0|))))) (! (or %lbl%@230 (= (U_2_int (MapType1Select (MapType0Select $Heap@11 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |ref#4@0|))))) LruImpl.Node.value)) |ref#4@0|)) :lblneg @230)))))))))) (let ((anon45_correct  (=> (! (and %lbl%+231 true) :lblpos +231) (and (! (or %lbl%@232 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.tail__node))) :lblneg @232) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.tail__node)) (=> (and (= $Heap@8 (MapType0Store $Heap@7 this@@23 (MapType1Store (MapType0Select $Heap@7 this@@23) LruImpl.LruImplQueue.tail__node call5formal@this@0))) ($IsGoodHeap $Heap@8)) (and (! (or %lbl%@233 (not (= (MapType1Select (MapType0Select $Heap@8 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @233) (=> (not (= (MapType1Select (MapType0Select $Heap@8 this@@23) LruImpl.LruImplQueue.nodemap) null)) (=> (= |value##0@0| ($Box call5formal@this@0)) (and (! (or %lbl%@234 (forall (($o@@130 T@U) ($f@@42 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@42)))) (=> (and (= (type $o@@130) refType) (= (type $f@@42) (FieldType alpha@@42))) (=> (and (and (not (= $o@@130 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@8 $o@@130) alloc))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@8 (MapType1Select (MapType0Select $Heap@8 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box $o@@130)))) (U_2_bool (MapType6Select $_Frame@0 $o@@130 $f@@42))))) :qid |LruImpli.341:23| :skolemid |1153| :no-pattern (type $o@@130) :no-pattern (type $f@@42) :no-pattern (U_2_int $o@@130) :no-pattern (U_2_bool $o@@130) :no-pattern (U_2_int $f@@42) :no-pattern (U_2_bool $f@@42) ))) :lblneg @234) (=> (forall (($o@@131 T@U) ($f@@43 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@43)))) (=> (and (= (type $o@@131) refType) (= (type $f@@43) (FieldType alpha@@43))) (=> (and (and (not (= $o@@131 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@8 $o@@131) alloc))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@8 (MapType1Select (MapType0Select $Heap@8 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box $o@@131)))) (U_2_bool (MapType6Select $_Frame@0 $o@@131 $f@@43))))) :qid |LruImpli.341:23| :skolemid |1153| :no-pattern (type@@0 $o@@121) :no-pattern (type@@0 $f@@33) :no-pattern (type $o@@131) :no-pattern (type $f@@43) :no-pattern (U_2_int $o@@131) :no-pattern (U_2_bool $o@@131) :no-pattern (U_2_int $f@@43) :no-pattern (U_2_bool $f@@43) )) (=> (and (= call0formal@MutableMap.ResizingHashMap$V@0 Tclass.LruImpl.Node) (= call1formal@this@0 (MapType1Select (MapType0Select $Heap@8 this@@23) LruImpl.LruImplQueue.nodemap))) (and (! (or %lbl%@235 (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0)) :lblneg @235) (=> (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0) (and (! (or %lbl%@236 (< (U_2_int (MapType1Select (MapType0Select $Heap@8 call1formal@this@0) MutableMap.ResizingHashMap.Count)) (Div 18446744073709551616 (LitInt 8)))) :lblneg @236) (=> (< (U_2_int (MapType1Select (MapType0Select $Heap@8 call1formal@this@0) MutableMap.ResizingHashMap.Count)) (Div 18446744073709551616 (LitInt 8))) (=> (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (|MutableMap.ResizingHashMap.Inv#canCall| call0formal@MutableMap.ResizingHashMap$V@0 $Heap@9 call1formal@this@0) (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0 $Heap@9 call1formal@this@0))) (=> (and (and (and (|$IsA#MutableMapModel.LinearHashMap| (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0 $Heap@9 call1formal@this@0)) (|$IsA#MutableMapModel.LinearHashMap| (MutableMapModel.__default.Insert call0formal@MutableMap.ResizingHashMap$V@0 StartFuel_MutableMapModel._default.Insert (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0) |x#0@@11| |value##0@0|))) (and (|MutableMap.ResizingHashMap.I#canCall| call0formal@MutableMap.ResizingHashMap$V@0 $Heap@9 call1formal@this@0) (and (|MutableMap.ResizingHashMap.I#canCall| call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0) (|MutableMapModel.__default.Insert#canCall| call0formal@MutableMap.ResizingHashMap$V@0 (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0) |x#0@@11| |value##0@0|)))) (and (and (|MutableMapModel.LinearHashMap#Equal| (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0 $Heap@9 call1formal@this@0) (MutableMapModel.__default.Insert call0formal@MutableMap.ResizingHashMap$V@0 StartFuelAssert_MutableMapModel._default.Insert (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0 $Heap@8 call1formal@this@0) |x#0@@11| |value##0@0|)) (forall ((|r#0| T@U) ) (!  (=> (and (and (= (type |r#0|) refType) ($Is |r#0| Tclass._System.object)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@9 call1formal@this@0) MutableMap.ResizingHashMap.Repr) ($Box |r#0|)))) (or (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@8 call1formal@this@0) MutableMap.ResizingHashMap.Repr) ($Box |r#0|))) (and (not (= |r#0| null)) (not (U_2_bool (MapType1Select (MapType0Select $Heap@8 |r#0|) alloc)))))) :qid |MutableM.412:22| :skolemid |2516| :pattern ( (MapType0Select (MapType1Select (MapType0Select $Heap@8 call1formal@this@0) MutableMap.ResizingHashMap.Repr) ($Box |r#0|))) :pattern ( (MapType0Select (MapType1Select (MapType0Select $Heap@9 call1formal@this@0) MutableMap.ResizingHashMap.Repr) ($Box |r#0|))) ))) (and (forall (($o@@132 T@U) ) (!  (=> (= (type $o@@132) refType) (=> (and (not (= $o@@132 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@8 $o@@132) alloc))) (or (= (MapType0Select $Heap@9 $o@@132) (MapType0Select $Heap@8 $o@@132)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@8 call1formal@this@0) MutableMap.ResizingHashMap.Repr) ($Box $o@@132)))))) :qid |MutableM.407:12| :skolemid |2517| :pattern ( (MapType0Select $Heap@9 $o@@132)) )) ($HeapSucc $Heap@8 $Heap@9)))) (and (! (or %lbl%@237 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr))) :lblneg @237) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Repr)) (and (! (or %lbl%@238 (not (= (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @238) (=> (not (= (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@239 (not (= (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @239) (=> (not (= (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@240 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @240) (=> (and (and (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap)) (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap))))) (=> (and (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap)))) (= |$rhs#2@0| (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@9 (MapType1Select (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.nodemap))))))) (and (= $Heap@10 (MapType0Store $Heap@9 this@@23 (MapType1Store (MapType0Select $Heap@9 this@@23) LruImpl.LruImplQueue.Repr |$rhs#2@0|))) ($IsGoodHeap $Heap@10))) (and (! (or %lbl%@241 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue))) :lblneg @241) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.Queue)) (=> (= |$rhs#3@0| (|Seq#Append| |oldQueue#0@0| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |x#0@@11|))))) (=> (and (= $Heap@11 (MapType0Store $Heap@10 this@@23 (MapType1Store (MapType0Select $Heap@10 this@@23) LruImpl.LruImplQueue.Queue |$rhs#3@0|))) ($IsGoodHeap $Heap@11)) (and (! (or %lbl%@242  (and (<= 0 (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)) (< (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @242) (and (! (or %lbl%@243 (= (U_2_int ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)))) |x#0@@11|)) :lblneg @243) (=> (= (U_2_int ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)))) |x#0@@11|) (and (! (or %lbl%@244 (not (= (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @244) (and (! (or %lbl%@245 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @245) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@246 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |x#0@@11|))))) :lblneg @246) (=> (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@247 (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |x#0@@11|)))) call5formal@this@0)) :lblneg @247) (=> (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box (int_2_U |x#0@@11|)))) call5formal@this@0) (and (! (or %lbl%@248 (not (= call5formal@this@0 null))) :lblneg @248) (and (! (or %lbl%@249 (= (MapType1Select (MapType0Select $Heap@11 call5formal@this@0) LruImpl.Node.next) null)) :lblneg @249) (=> (= (MapType1Select (MapType0Select $Heap@11 call5formal@this@0) LruImpl.Node.next) null) (and (! (or %lbl%@250 (not (= (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @250) (and (! (or %lbl%@251 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @251) (=> (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@252  (and (<= 0 (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)) (< (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1) (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue))))) :lblneg @252) (and (! (or %lbl%@253 (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) :lblneg @253) (and (! (or %lbl%@254 (not (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1)))) null))) :lblneg @254) (=> (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@255 (= (MapType1Select (MapType0Select $Heap@11 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)) :lblneg @255) (=> (= (MapType1Select (MapType0Select $Heap@11 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@11 (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@11 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null) (and anon76_Then_correct anon76_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon75_Else_correct  (=> (! (and %lbl%+256 true) :lblpos +256) (=> (= (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) null) (and (! (or %lbl%@257 (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node))) :lblneg @257) (=> (U_2_bool (MapType6Select $_Frame@0 this@@23 LruImpl.LruImplQueue.head__node)) (=> (= $Heap@6 (MapType0Store $Heap@4 this@@23 (MapType1Store (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.head__node call5formal@this@0))) (=> (and ($IsGoodHeap $Heap@6) (= $Heap@7 $Heap@6)) anon45_correct)))))))) (let ((anon75_Then_correct  (=> (! (and %lbl%+258 true) :lblpos +258) (=> (not (= (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) null)) (and (! (or %lbl%@259 (not (= (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) null))) :lblneg @259) (=> (not (= (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) null)) (and (! (or %lbl%@260 (U_2_bool (MapType6Select $_Frame@0 (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) LruImpl.Node.next))) :lblneg @260) (=> (U_2_bool (MapType6Select $_Frame@0 (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) LruImpl.Node.next)) (=> (= $Heap@5 (MapType0Store $Heap@4 (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node) (MapType1Store (MapType0Select $Heap@4 (MapType1Select (MapType0Select $Heap@4 this@@23) LruImpl.LruImplQueue.tail__node)) LruImpl.Node.next call5formal@this@0))) (=> (and ($IsGoodHeap $Heap@5) (= $Heap@7 $Heap@5)) anon45_correct)))))))))) (let ((anon58_Else_correct  (=> (! (and %lbl%+261 true) :lblpos +261) (=> (and (not (Options.Option.Some_q |call5formal@found#0@0|)) (= |q##0@0| (MapType1Select (MapType0Select $Heap@1 this@@23) LruImpl.LruImplQueue.Queue))) (and (! (or %lbl%@262 (forall (($o@@133 T@U) ($f@@44 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (= (type $o@@133) refType) (= (type $f@@44) (FieldType alpha@@44))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@133 $f@@44)))) :qid |LruImpli.330:42| :skolemid |1151| :no-pattern (type $o@@133) :no-pattern (type $f@@44) :no-pattern (U_2_int $o@@133) :no-pattern (U_2_bool $o@@133) :no-pattern (U_2_int $f@@44) :no-pattern (U_2_bool $f@@44) ))) :lblneg @262) (=> (forall (($o@@134 T@U) ($f@@45 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (= (type $o@@134) refType) (= (type $f@@45) (FieldType alpha@@45))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@134 $f@@45)))) :qid |LruImpli.330:42| :skolemid |1151| :no-pattern (type@@0 $o@@122) :no-pattern (type@@0 $f@@34) :no-pattern (type $o@@134) :no-pattern (type $f@@45) :no-pattern (U_2_int $o@@134) :no-pattern (U_2_bool $o@@134) :no-pattern (U_2_int $f@@45) :no-pattern (U_2_bool $f@@45) )) (and (! (or %lbl%@263  (not (|Seq#Contains| |q##0@0| ($Box (int_2_U |x#0@@11|))))) :lblneg @263) (=> (not (|Seq#Contains| |q##0@0| ($Box (int_2_U |x#0@@11|)))) (and (! (or %lbl%@264  (=> (|LruModel.__default.WF#canCall| |q##0@0|) (or (LruModel.__default.WF |q##0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |q##0@0|)))) :lblneg @264) (=> (=> (|LruModel.__default.WF#canCall| |q##0@0|) (or (LruModel.__default.WF |q##0@0|) (LruModel.__default.distinct StartFuelAssert_LruModel._default.distinct |q##0@0|))) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (|LruModel.__default.Remove#canCall| |q##0@0| |x#0@@11|) (|Seq#Equal| (LruModel.__default.Remove ($LS ($LS $LZ)) |q##0@0| |x#0@@11|) |q##0@0|)) (and (= $Heap@1 $Heap@3) (= |p##0@0| (MapType1Select (MapType0Select $Heap@3 this@@23) LruImpl.LruImplQueue.tail__node)))) (and (! (or %lbl%@265 (forall (($o@@135 T@U) ($f@@46 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (= (type $o@@135) refType) (= (type $f@@46) (FieldType alpha@@46))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@135 $f@@46)))) :qid |LruImpli.332:24| :skolemid |1152| :no-pattern (type $o@@135) :no-pattern (type $f@@46) :no-pattern (U_2_int $o@@135) :no-pattern (U_2_bool $o@@135) :no-pattern (U_2_int $f@@46) :no-pattern (U_2_bool $f@@46) ))) :lblneg @265) (=> (forall (($o@@136 T@U) ($f@@47 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (= (type $o@@136) refType) (= (type $f@@47) (FieldType alpha@@47))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@136 $f@@47)))) :qid |LruImpli.332:24| :skolemid |1152| :no-pattern (type@@0 $o@@123) :no-pattern (type@@0 $f@@35) :no-pattern (type $o@@136) :no-pattern (type $f@@47) :no-pattern (U_2_int $o@@136) :no-pattern (U_2_bool $o@@136) :no-pattern (U_2_int $f@@47) :no-pattern (U_2_bool $f@@47) )) (=> (and (and (not (= call5formal@this null)) (and ($Is call5formal@this Tclass.LruImpl.Node) ($IsAlloc call5formal@this Tclass.LruImpl.Node $Heap@@60))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4))) (=> (and (and (and (not (= call5formal@this@0 null)) (and ($Is call5formal@this@0 Tclass.LruImpl.Node) ($IsAlloc call5formal@this@0 Tclass.LruImpl.Node $Heap@4))) (and (= (MapType1Select (MapType0Select $Heap@4 call5formal@this@0) LruImpl.Node.prev) |p##0@0|) (= (MapType1Select (MapType0Select $Heap@4 call5formal@this@0) LruImpl.Node.next) null))) (and (and (= (U_2_int (MapType1Select (MapType0Select $Heap@4 call5formal@this@0) LruImpl.Node.value)) |x#0@@11|) (not (U_2_bool (MapType1Select (MapType0Select $Heap@3 call5formal@this@0) alloc)))) (and (forall (($o@@137 T@U) ) (!  (=> (= (type $o@@137) refType) (=> (and (not (= $o@@137 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@3 $o@@137) alloc))) (= (MapType0Select $Heap@4 $o@@137) (MapType0Select $Heap@3 $o@@137)))) :qid |LruImpli.66:5| :skolemid |951| :pattern ( (MapType0Select $Heap@4 $o@@137)) )) ($HeapSucc $Heap@3 $Heap@4)))) (and (! (or %lbl%@266 (not (= call5formal@this@0 null))) :lblneg @266) (and (! (or %lbl%@267 (= (MapType1Select (MapType0Select $Heap@4 call5formal@this@0) LruImpl.Node.next) null)) :lblneg @267) (=> (= (MapType1Select (MapType0Select $Heap@4 call5formal@this@0) LruImpl.Node.next) null) (and anon75_Then_correct anon75_Else_correct)))))))))))))))))))) (let ((anon0_correct  (=> (! (and %lbl%+268 true) :lblpos +268) (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_LruModel._default.distinct) StartFuel_LruModel._default.distinct))) (and (and (= (AsFuelBottom StartFuelAssert_LruModel._default.distinct) StartFuelAssert_LruModel._default.distinct) (= (AsFuelBottom StartFuel_LruModel._default.NextOpt) StartFuel_LruModel._default.NextOpt)) (and (= (AsFuelBottom StartFuelAssert_LruModel._default.NextOpt) StartFuelAssert_LruModel._default.NextOpt) (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte)))) (and (and (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_MutableMapModel._default.lshift) StartFuel_MutableMapModel._default.lshift)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.lshift) StartFuelAssert_MutableMapModel._default.lshift) (= (AsFuelBottom StartFuel_MutableMapModel._default.rshift) StartFuel_MutableMapModel._default.rshift)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.rshift) StartFuelAssert_MutableMapModel._default.rshift) (= (AsFuelBottom StartFuel_MutableMapModel._default.bitnot) StartFuel_MutableMapModel._default.bitnot)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.bitnot) StartFuelAssert_MutableMapModel._default.bitnot) (= (AsFuelBottom StartFuel_MutableMapModel._default.bitxor) StartFuel_MutableMapModel._default.bitxor))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.bitxor) StartFuelAssert_MutableMapModel._default.bitxor) (= (AsFuelBottom StartFuel_MutableMapModel._default.hash64) StartFuel_MutableMapModel._default.hash64)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.hash64) StartFuelAssert_MutableMapModel._default.hash64) (= (AsFuelBottom StartFuel_MutableMapModel._default.getEmptyWitness) StartFuel_MutableMapModel._default.getEmptyWitness)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.getEmptyWitness) StartFuelAssert_MutableMapModel._default.getEmptyWitness) (= (AsFuelBottom StartFuel_MutableMapModel._default.Probe) StartFuel_MutableMapModel._default.Probe)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Probe) StartFuelAssert_MutableMapModel._default.Probe) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeInsert) StartFuel_MutableMapModel._default.FixedSizeInsert))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeInsert) StartFuelAssert_MutableMapModel._default.FixedSizeInsert) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeGet) StartFuel_MutableMapModel._default.FixedSizeGet)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeGet) StartFuelAssert_MutableMapModel._default.FixedSizeGet) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeRemove) StartFuel_MutableMapModel._default.FixedSizeRemove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeRemove) StartFuelAssert_MutableMapModel._default.FixedSizeRemove) (= (AsFuelBottom StartFuel_MutableMapModel._default.Constructor) StartFuel_MutableMapModel._default.Constructor)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Constructor) StartFuelAssert_MutableMapModel._default.Constructor) (= (AsFuelBottom StartFuel_MutableMapModel._default.ReallocInternal) StartFuel_MutableMapModel._default.ReallocInternal))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.ReallocInternal) StartFuelAssert_MutableMapModel._default.ReallocInternal) (= (AsFuelBottom StartFuel_MutableMapModel._default.InsertAndGetOld) StartFuel_MutableMapModel._default.InsertAndGetOld)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.InsertAndGetOld) StartFuelAssert_MutableMapModel._default.InsertAndGetOld) (= (AsFuelBottom StartFuel_MutableMapModel._default.Insert) StartFuel_MutableMapModel._default.Insert))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Insert) StartFuelAssert_MutableMapModel._default.Insert) (= (AsFuelBottom StartFuel_MutableMapModel._default.IterStart) StartFuel_MutableMapModel._default.IterStart)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.IterStart) StartFuelAssert_MutableMapModel._default.IterStart) (= (AsFuelBottom StartFuel_MutableMapModel._default.SimpleIterStart) StartFuel_MutableMapModel._default.SimpleIterStart))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.SimpleIterStart) StartFuelAssert_MutableMapModel._default.SimpleIterStart) (= (AsFuelBottom StartFuel_MutableMapModel._default.IterInc) StartFuel_MutableMapModel._default.IterInc)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.IterInc) StartFuelAssert_MutableMapModel._default.IterInc) (= (AsFuelBottom StartFuel_MutableMapModel._default.SimpleIterInc) StartFuel_MutableMapModel._default.SimpleIterInc)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.SimpleIterInc) StartFuelAssert_MutableMapModel._default.SimpleIterInc) (= (AsFuelBottom StartFuel_MutableMapModel._default.MaxKey) StartFuel_MutableMapModel._default.MaxKey)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.MaxKey) StartFuelAssert_MutableMapModel._default.MaxKey) (= (AsFuelBottom StartFuel_MutableMapModel._default.UpdateByIter) StartFuel_MutableMapModel._default.UpdateByIter))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.UpdateByIter) StartFuelAssert_MutableMapModel._default.UpdateByIter) (= (AsFuelBottom StartFuel_MutableMapModel._default.FindSimpleIter) StartFuel_MutableMapModel._default.FindSimpleIter)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FindSimpleIter) StartFuelAssert_MutableMapModel._default.FindSimpleIter) (= $_Frame@0 (|lambda#9| null $Heap@@60 alloc this@@23 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr))))))))) (and (! (or %lbl%@269 (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @269) (=> (not (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@270 (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) :lblneg @270) (=> (and (and (and (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))))) (and (and (|MutableMap.ResizingHashMap.I#canCall| Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) (MutableMapModel.LinearHashMap.LinearHashMap_q (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (= |oldContents#0@0| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (= |oldQueue#0@0| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) (and (! (or %lbl%@271 (forall (($o@@138 T@U) ($f@@48 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (= (type $o@@138) refType) (= (type $f@@48) (FieldType alpha@@48))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@138 $f@@48)))) :qid |LruImpli.261:33| :skolemid |1146| :no-pattern (type $o@@138) :no-pattern (type $f@@48) :no-pattern (U_2_int $o@@138) :no-pattern (U_2_bool $o@@138) :no-pattern (U_2_int $f@@48) :no-pattern (U_2_bool $f@@48) ))) :lblneg @271) (=> (forall (($o@@139 T@U) ($f@@49 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (= (type $o@@139) refType) (= (type $f@@49) (FieldType alpha@@49))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@139 $f@@49)))) :qid |LruImpli.261:33| :skolemid |1146| :no-pattern (type@@0 $o@@124) :no-pattern (type@@0 $f@@36) :no-pattern (type $o@@139) :no-pattern (type $f@@49) :no-pattern (U_2_int $o@@139) :no-pattern (U_2_bool $o@@139) :no-pattern (U_2_int $f@@49) :no-pattern (U_2_bool $f@@49) )) (and (! (or %lbl%@272 (LruImpl.LruImplQueue.Inv $Heap@@60 this@@23)) :lblneg @272) (=> (LruImpl.LruImplQueue.Inv $Heap@@60 this@@23) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (|LruModel.__default.I#canCall| (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.Queue))) (and (= (|Set#Card| (LruModel.__default.I (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.Queue))) (U_2_int (MapType1Select (MapType0Select $Heap@0 (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Count))) (= $Heap@@60 $Heap@0))) (and (! (or %lbl%@273 (not (= (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.nodemap) null))) :lblneg @273) (=> (not (= (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.nodemap) null)) (and (! (or %lbl%@274 (forall (($o@@140 T@U) ($f@@50 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (= (type $o@@140) refType) (= (type $f@@50) (FieldType alpha@@50))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@140 $f@@50)))) :qid |LruImpli.263:30| :skolemid |1147| :no-pattern (type $o@@140) :no-pattern (type $f@@50) :no-pattern (U_2_int $o@@140) :no-pattern (U_2_bool $o@@140) :no-pattern (U_2_int $f@@50) :no-pattern (U_2_bool $f@@50) ))) :lblneg @274) (=> (forall (($o@@141 T@U) ($f@@51 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (= (type $o@@141) refType) (= (type $f@@51) (FieldType alpha@@51))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@141 $f@@51)))) :qid |LruImpli.263:30| :skolemid |1147| :no-pattern (type@@0 $o@@125) :no-pattern (type@@0 $f@@37) :no-pattern (type $o@@141) :no-pattern (type $f@@51) :no-pattern (U_2_int $o@@141) :no-pattern (U_2_bool $o@@141) :no-pattern (U_2_int $f@@51) :no-pattern (U_2_bool $f@@51) )) (=> (and (and ($Is |call5formal@found#0| (Tclass.Options.Option call0formal@MutableMap.ResizingHashMap$V)) ($IsAlloc |call5formal@found#0| (Tclass.Options.Option call0formal@MutableMap.ResizingHashMap$V) $Heap@@60)) (and (= call0formal@MutableMap.ResizingHashMap$V@0@@0 Tclass.LruImpl.Node) (= call1formal@this@0@@0 (MapType1Select (MapType0Select $Heap@0 this@@23) LruImpl.LruImplQueue.nodemap)))) (and (! (or %lbl%@275 (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0)) :lblneg @275) (=> (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and ($Is |call5formal@found#0@0| (Tclass.Options.Option call0formal@MutableMap.ResizingHashMap$V@0@@0)) ($IsAlloc |call5formal@found#0@0| (Tclass.Options.Option call0formal@MutableMap.ResizingHashMap$V@0@@0) $Heap@1)) (and (|MutableMap.ResizingHashMap.Inv#canCall| call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@1 call1formal@this@0@@0) (MutableMap.ResizingHashMap.Inv call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@1 call1formal@this@0@@0))) (=> (and (and (and (and (|$IsA#Options.Option| |call5formal@found#0@0|) (|$IsA#Options.Option| (MutableMapModel.__default.Get call0formal@MutableMap.ResizingHashMap$V@0@@0 (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0) |x#0@@11|))) (and (|MutableMap.ResizingHashMap.I#canCall| call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0) (|MutableMapModel.__default.Get#canCall| call0formal@MutableMap.ResizingHashMap$V@0@@0 (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0) |x#0@@11|))) (|Options.Option#Equal| |call5formal@found#0@0| (MutableMapModel.__default.Get call0formal@MutableMap.ResizingHashMap$V@0@@0 (MutableMap.ResizingHashMap.I call0formal@MutableMap.ResizingHashMap$V@0@@0 $Heap@0 call1formal@this@0@@0) |x#0@@11|))) (and (forall (($o@@142 T@U) ) (!  (=> (= (type $o@@142) refType) (=> (and (not (= $o@@142 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@142) alloc))) (= (MapType0Select $Heap@1 $o@@142) (MapType0Select $Heap@0 $o@@142)))) :qid |MutableM.453:12| :skolemid |2519| :pattern ( (MapType0Select $Heap@1 $o@@142)) )) ($HeapSucc $Heap@0 $Heap@1))) (and anon58_Then_correct anon58_Else_correct)))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+276 true) :lblpos +276) (=> (and ($IsGoodHeap $Heap@@60) ($IsHeapAnchor $Heap@@60)) (=> (and (and (and (not (= this@@23 null)) (and ($Is this@@23 Tclass.LruImpl.LruImplQueue) ($IsAlloc this@@23 Tclass.LruImpl.LruImplQueue $Heap@@60))) (and (<= (LitInt 0) |x#0@@11|) (< |x#0@@11| 18446744073709551616))) (and (and ($Is |oldContents#0| (TMap Tclass.NativeTypes.uint64 Tclass.LruImpl.Node)) ($IsAlloc |oldContents#0| (TMap Tclass.NativeTypes.uint64 Tclass.LruImpl.Node) $Heap@@60)) (and ($Is |oldQueue#0| (TSeq Tclass.NativeTypes.uint64)) ($IsAlloc |oldQueue#0| (TSeq Tclass.NativeTypes.uint64) $Heap@@60)))) (=> (and (and (and (and (and ($Is |node#0| (Tclass.Options.Option Tclass.LruImpl.Node)) ($IsAlloc |node#0| (Tclass.Options.Option Tclass.LruImpl.Node) $Heap@@60)) (and ($Is |$rhs##0| (Tclass.Options.Option Tclass.LruImpl.Node)) ($IsAlloc |$rhs##0| (Tclass.Options.Option Tclass.LruImpl.Node) $Heap@@60))) (and (and ($Is |prev#0_0| Tclass.LruImpl.Node?) ($IsAlloc |prev#0_0| Tclass.LruImpl.Node? $Heap@@60)) (and ($Is |next#0_0| Tclass.LruImpl.Node?) ($IsAlloc |next#0_0| Tclass.LruImpl.Node? $Heap@@60)))) (and (and (and ($Is |$rhs#0_2_0_0| Tclass.LruImpl.Node?) ($Is |$rhs#0_2_0| Tclass.LruImpl.Node?)) (and ($Is |$rhs#0_2_1| Tclass.LruImpl.Node?) ($Is |$rhs#0_2_2| Tclass.LruImpl.Node?))) (and (and ($Is |$rhs#0_2_3| Tclass.LruImpl.Node?) ($Is |$rhs#0_2_1_0| Tclass.LruImpl.Node?)) (and ($Is |$rhs#0_2_4| Tclass.LruImpl.Node?) ($Is |$rhs#0_2_5| Tclass.LruImpl.Node?))))) (and (and (and (and ($Is |$rhs#0_2_6| (TSet Tclass._System.object)) ($Is |$rhs#0_2_7| (TSeq Tclass.NativeTypes.uint64))) (and ($Is |$rhs#0_0| (TSet Tclass._System.object)) ($Is |$rhs#0_1| (TSeq Tclass.NativeTypes.uint64)))) (and (and ($Is |newnode#0| Tclass.LruImpl.Node) ($IsAlloc |newnode#0| Tclass.LruImpl.Node $Heap@@60)) (and ($Is |$rhs#1_0| Tclass.LruImpl.Node?) ($Is |$rhs#0| Tclass.LruImpl.Node?)))) (and (and (and ($Is |$rhs#1| Tclass.LruImpl.Node?) ($Is |$rhs#2| (TSet Tclass._System.object))) (and ($Is |$rhs#3| (TSeq Tclass.NativeTypes.uint64)) (= 9 $FunctionContextHeight))) (and (and (|LruImpl.LruImplQueue.Inv#canCall| $Heap@@60 this@@23) (and (LruImpl.LruImplQueue.Inv $Heap@@60 this@@23) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr) ($Box (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Set#Subset| (MapType1Select (MapType0Select $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr))) (MutableMap.ResizingHashMap.Inv Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Repr) (|Set#Union| (|Set#Union| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@23)) (MapType1Select (MapType0Select $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr)) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))))))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) ($Box this@@23))))) (|Set#Disjoint| (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (MapType1Select (MapType0Select $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr))) (=> (= (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) (LitInt 0)) (and (and (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.head__node) null) (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.tail__node) null)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap))) (|Map#Empty| BoxType BoxType))))) (forall ((|i#0@@120| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@120|) (< |i#0@@120| (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#0@@120|)))) :qid |LruImpli.101:18| :skolemid |1129| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#0@@120|))) ))) (forall ((|ref#0@@2| T@U) ) (!  (=> (= (type |ref#0@@2|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#0@@2|)) (< (U_2_int |ref#0@@2|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#0@@2|)))) (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) ($Box |ref#0@@2|)))) :qid |LruImpli.102:18| :skolemid |1130| :pattern ( (|Seq#Contains| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) ($Box |ref#0@@2|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#0@@2|))) ))) (forall ((|ref#1@@4| T@U) ) (!  (=> (= (type |ref#1@@4|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |ref#1@@4|)) (< (U_2_int |ref#1@@4|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@4|)))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@60 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@4|)))) LruImpl.Node.value)) (U_2_int |ref#1@@4|)))) :qid |LruImpli.103:18| :skolemid |1131| :pattern ( ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@4|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) ($Box |ref#1@@4|))) ))) (=> (> (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) 0) (and (and (and (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.head__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0))))) (= (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.tail__node) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) 1)))))) (= (MapType1Select (MapType0Select $Heap@@60 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (LitInt 0))))) LruImpl.Node.prev) null)) (= (MapType1Select (MapType0Select $Heap@@60 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) 1))))) LruImpl.Node.next) null)))) (forall ((|i#1@@24| Int) (|_t#0#0@@4| Int) ) (!  (=> (= |_t#0#0@@4| (+ |i#1@@24| 1)) (=> (and (<= (LitInt 0) |i#1@@24|) (< |i#1@@24| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= (MapType1Select (MapType0Select $Heap@@60 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#1@@24|)))) LruImpl.Node.next) ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0@@4|)))))) :qid |LruImpli.110:18| :skolemid |1132| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#0@@4|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#1@@24|))) ))) (forall ((|i#2@@10| Int) (|_t#0#1@@4| Int) ) (!  (=> (= |_t#0#1@@4| (+ |i#2@@10| 1)) (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (- (|Seq#Length| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue)) 1))) (= ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#2@@10|))) (MapType1Select (MapType0Select $Heap@@60 ($Unbox refType (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))) (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#1@@4|)))) LruImpl.Node.prev)))) :qid |LruImpli.112:18| :skolemid |1133| :pattern ( ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |_t#0#1@@4|)) ($Unbox intType (|Seq#Index| (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue) |i#2@@10|))) ))) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)) MutableMap.ResizingHashMap.Repr) (|Map#Values| (MutableMapModel.LinearHashMap.contents (MutableMap.ResizingHashMap.I Tclass.LruImpl.Node $Heap@@60 (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.nodemap)))))) (LruModel.__default.WF (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))))) (<= (|Set#Card| (LruModel.__default.I (MapType1Select (MapType0Select $Heap@@60 this@@23) LruImpl.LruImplQueue.Queue))) (LitInt 4294967296)))))) anon0_correct)))))) PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
