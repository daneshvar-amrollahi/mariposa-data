(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.BitmapImpl.Bitmap? () T@U)
(declare-fun Tagclass.BitmapImpl.Bitmap? () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.BitmapImpl.Bitmap () T@U)
(declare-fun Tagclass.DebugAccumulator.AccRec () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun class.BitmapImpl.__default () T@U)
(declare-fun Tagclass.BitmapImpl.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.DebugAccumulator.AccRec? () T@U)
(declare-fun Tagclass.DebugAccumulator.AccRec? () T@U)
(declare-fun class.DebugAccumulator.__default () T@U)
(declare-fun Tagclass.DebugAccumulator.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.MathAxioms.__default () T@U)
(declare-fun Tagclass.MathAxioms.__default () T@U)
(declare-fun class.BitsetLemmas.__default () T@U)
(declare-fun Tagclass.BitsetLemmas.__default () T@U)
(declare-fun class.BitmapModel.__default () T@U)
(declare-fun Tagclass.BitmapModel.__default () T@U)
(declare-fun field$bits () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$key () T@U)
(declare-fun field$count () T@U)
(declare-fun field$unit () T@U)
(declare-fun field$index () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun nat_from_bv64 ((_ BitVec 64)) Int)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3TypeInv4 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BitmapImpl.Bitmap? () T@U)
(declare-fun BitmapImpl.Bitmap.bits () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.BitmapImpl.Bitmap () T@U)
(declare-fun Tclass.DebugAccumulator.AccRec () T@U)
(declare-fun BitmapImpl.Bitmap.Repr () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun BitmapImpl.Bitmap.BitBSet (Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitBSet#canCall| (Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitBSet#requires| (Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.in_set_uint64 () T@U)
(declare-fun |BitsetLemmas.__default.in__set__uint64#canCall| (Int Int) Bool)
(declare-fun BitsetLemmas.__default.in__set__uint64 (T@U Int Int) Bool)
(declare-fun BitmapImpl.Bitmap.BitsSetAtIB (T@U Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitsSetAtIB#canCall| (T@U Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitsSetAtIB#requires| (T@U Int Int) Bool)
(declare-fun BitmapImpl.Bitmap.BitsSetAtC (T@U Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitsSetAtC#canCall| (T@U Int) Bool)
(declare-fun |BitmapImpl.Bitmap.BitsSetAtC#requires| (T@U Int) Bool)
(declare-fun BitmapImpl.Bitmap.ITimes64WithinUint64 (Int) Bool)
(declare-fun |BitmapImpl.Bitmap.ITimes64WithinUint64#canCall| (Int) Bool)
(declare-fun |BitmapImpl.Bitmap.ITimes64WithinUint64#requires| (Int) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun BitmapImpl.Bitmap.ReprInv (T@U T@U) Bool)
(declare-fun |BitmapImpl.Bitmap.ReprInv#canCall| (T@U T@U) Bool)
(declare-fun |BitmapImpl.Bitmap.ReprInv#requires| (T@U T@U) Bool)
(declare-fun BitmapImpl.Bitmap.Inv (T@U T@U) Bool)
(declare-fun |BitmapImpl.Bitmap.Inv#canCall| (T@U T@U) Bool)
(declare-fun |BitmapImpl.Bitmap.Inv#requires| (T@U T@U) Bool)
(declare-fun BitmapImpl.Bitmap.IPrefix (T@U T@U Int) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |BitmapImpl.Bitmap.IPrefix#canCall| (T@U Int) Bool)
(declare-fun |BitmapImpl.Bitmap.IPrefix#requires| (T@U T@U Int) Bool)
(declare-fun BitmapImpl.Bitmap.I (T@U T@U) T@U)
(declare-fun |BitmapImpl.Bitmap.I#canCall| (T@U T@U) Bool)
(declare-fun |BitmapImpl.Bitmap.I#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BitmapImpl.Bitmap.IPrefix () T@U)
(declare-fun BitmapImpl.Bitmap.SetBit (Int Int) Int)
(declare-fun |BitmapImpl.Bitmap.SetBit#canCall| (Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.SetBit#requires| (Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.set_bit_to_1_uint64 () T@U)
(declare-fun |BitsetLemmas.__default.set__bit__to__1__uint64#canCall| (Int Int) Bool)
(declare-fun BitsetLemmas.__default.set__bit__to__1__uint64 (T@U Int Int) Int)
(declare-fun BitmapImpl.Bitmap.UnsetBit (Int Int) Int)
(declare-fun |BitmapImpl.Bitmap.UnsetBit#canCall| (Int Int) Bool)
(declare-fun |BitmapImpl.Bitmap.UnsetBit#requires| (Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.set_bit_to_0_uint64 () T@U)
(declare-fun |BitsetLemmas.__default.set__bit__to__0__uint64#canCall| (Int Int) Bool)
(declare-fun BitsetLemmas.__default.set__bit__to__0__uint64 (T@U Int Int) Int)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.BitmapImpl.__default () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.DebugAccumulator.AccRec? () T@U)
(declare-fun DebugAccumulator.AccRec.key () T@U)
(declare-fun DebugAccumulator.AccRec.count () T@U)
(declare-fun DebugAccumulator.AccRec.unit () T@U)
(declare-fun DebugAccumulator.AccRec.index () T@U)
(declare-fun Tclass.DebugAccumulator.__default () T@U)
(declare-fun DebugAccumulator.__default.EmptyAccumulator () T@U)
(declare-fun |DebugAccumulator.__default.EmptyAccumulator#requires| () Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.MathAxioms.__default () T@U)
(declare-fun Tclass.BitsetLemmas.__default () T@U)
(declare-fun BitsetLemmas.__default.bit (T@U Int) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.bit#canCall| (Int) Bool)
(declare-fun |BitsetLemmas.__default.bit#requires| (T@U Int) Bool)
(declare-fun BitsetLemmas.__default.bit__and (T@U (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.bit__and#requires| (T@U (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun bv64_2_U ((_ BitVec 64)) T@U)
(declare-fun U_2_bv64 (T@U) (_ BitVec 64))
(declare-fun bv64Type () T@T)
(declare-fun BitsetLemmas.__default.bit__or (T@U (_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.bit__or#requires| (T@U (_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun BitsetLemmas.__default.bit__comp (T@U (_ BitVec 64)) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.bit__comp#requires| (T@U (_ BitVec 64)) Bool)
(declare-fun BitsetLemmas.__default.in__set (T@U Int (_ BitVec 64)) Bool)
(declare-fun |BitsetLemmas.__default.in__set#canCall| (Int (_ BitVec 64)) Bool)
(declare-fun |BitsetLemmas.__default.in__set#requires| (T@U Int (_ BitVec 64)) Bool)
(declare-fun StartFuel_BitsetLemmas._default.bit () T@U)
(declare-fun StartFuel_BitsetLemmas._default.bit_and () T@U)
(declare-fun |BitsetLemmas.__default.bit__and#canCall| ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun BitsetLemmas.__default.set__bit__to__1 (T@U (_ BitVec 64) Int) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.set__bit__to__1#canCall| ((_ BitVec 64) Int) Bool)
(declare-fun |BitsetLemmas.__default.set__bit__to__1#requires| (T@U (_ BitVec 64) Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.bit_or () T@U)
(declare-fun |BitsetLemmas.__default.bit__or#canCall| ((_ BitVec 64) (_ BitVec 64)) Bool)
(declare-fun BitsetLemmas.__default.set__bit__to__0 (T@U (_ BitVec 64) Int) (_ BitVec 64))
(declare-fun |BitsetLemmas.__default.set__bit__to__0#canCall| ((_ BitVec 64) Int) Bool)
(declare-fun |BitsetLemmas.__default.set__bit__to__0#requires| (T@U (_ BitVec 64) Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.bit_comp () T@U)
(declare-fun |BitsetLemmas.__default.bit__comp#canCall| ((_ BitVec 64)) Bool)
(declare-fun BitsetLemmas.__default.bit__or__uint64 (T@U Int Int) Int)
(declare-fun |BitsetLemmas.__default.bit__or__uint64#canCall| (Int Int) Bool)
(declare-fun |BitsetLemmas.__default.bit__or__uint64#requires| (T@U Int Int) Bool)
(declare-fun |BitsetLemmas.__default.in__set__uint64#requires| (T@U Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.in_set () T@U)
(declare-fun |BitsetLemmas.__default.set__bit__to__1__uint64#requires| (T@U Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.set_bit_to_1 () T@U)
(declare-fun |BitsetLemmas.__default.set__bit__to__0__uint64#requires| (T@U Int Int) Bool)
(declare-fun StartFuel_BitsetLemmas._default.set_bit_to_0 () T@U)
(declare-fun Tclass.BitmapModel.__default () T@U)
(declare-fun BitmapModel.__default.Len (T@U) Int)
(declare-fun |BitmapModel.__default.Len#canCall| (T@U) Bool)
(declare-fun |BitmapModel.__default.Len#requires| (T@U) Bool)
(declare-fun BitmapModel.__default.BitSet (T@U T@U Int) T@U)
(declare-fun |BitmapModel.__default.BitSet#canCall| (T@U Int) Bool)
(declare-fun |BitmapModel.__default.BitSet#requires| (T@U T@U Int) Bool)
(declare-fun BitmapModel.__default.BitUnset (T@U T@U Int) T@U)
(declare-fun |BitmapModel.__default.BitUnset#canCall| (T@U Int) Bool)
(declare-fun |BitmapModel.__default.BitUnset#requires| (T@U T@U Int) Bool)
(declare-fun BitmapModel.__default.IsSet (T@U T@U Int) Bool)
(declare-fun |BitmapModel.__default.IsSet#canCall| (T@U Int) Bool)
(declare-fun |BitmapModel.__default.IsSet#requires| (T@U T@U Int) Bool)
(declare-fun BitmapModel.__default.EmptyBitmap (T@U Int) T@U)
(declare-fun StartFuel_BitmapModel._default.IsSet () T@U)
(declare-fun |BitmapModel.__default.EmptyBitmap#canCall| (Int) Bool)
(declare-fun |BitmapModel.__default.EmptyBitmap#requires| (T@U Int) Bool)
(declare-fun BitmapModel.__default.BitAllocIter (T@U T@U Int) T@U)
(declare-fun |BitmapModel.__default.BitAllocIter#canCall| (T@U Int) Bool)
(declare-fun |BitmapModel.__default.BitAllocIter#requires| (T@U T@U Int) Bool)
(declare-fun BitmapModel.__default.BitAlloc (T@U T@U) T@U)
(declare-fun |BitmapModel.__default.BitAlloc#canCall| (T@U) Bool)
(declare-fun |BitmapModel.__default.BitAlloc#requires| (T@U T@U) Bool)
(declare-fun BitmapModel.__default.BitUnion (T@U T@U T@U) T@U)
(declare-fun |BitmapModel.__default.BitUnion#canCall| (T@U T@U) Bool)
(declare-fun |BitmapModel.__default.BitUnion#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_BitmapModel._default.IsSet0 () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.IsSet () T@U)
(declare-fun MoreFuel_BitmapModel._default.IsSet1 () T@U)
(declare-fun MapType5Type (T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#10| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#12| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#16| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#22| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#26| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.BitmapImpl.Bitmap?) ClassNameType)) (= (type Tagclass.BitmapImpl.Bitmap?) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.BitmapImpl.Bitmap) TyTagType)) (= (type Tagclass.DebugAccumulator.AccRec) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type class.BitmapImpl.__default) ClassNameType)) (= (type Tagclass.BitmapImpl.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.DebugAccumulator.AccRec?) ClassNameType)) (= (type Tagclass.DebugAccumulator.AccRec?) TyTagType)) (= (type class.DebugAccumulator.__default) ClassNameType)) (= (type Tagclass.DebugAccumulator.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.MathAxioms.__default) ClassNameType)) (= (type Tagclass.MathAxioms.__default) TyTagType)) (= (type class.BitsetLemmas.__default) ClassNameType)) (= (type Tagclass.BitsetLemmas.__default) TyTagType)) (= (type class.BitmapModel.__default) ClassNameType)) (= (type Tagclass.BitmapModel.__default) TyTagType)) (= (type field$bits) NameFamilyType)) (= (type field$Repr) NameFamilyType)) (= (type field$key) NameFamilyType)) (= (type field$count) NameFamilyType)) (= (type field$unit) NameFamilyType)) (= (type field$index) NameFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.BitmapImpl.Bitmap? Tagclass.BitmapImpl.Bitmap? Tagclass.NativeTypes.uint64 Tagclass.BitmapImpl.Bitmap Tagclass.DebugAccumulator.AccRec Tagclass.Options.Option class.BitmapImpl.__default Tagclass.BitmapImpl.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.DebugAccumulator.AccRec? Tagclass.DebugAccumulator.AccRec? class.DebugAccumulator.__default Tagclass.DebugAccumulator.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.MathAxioms.__default Tagclass.MathAxioms.__default class.BitsetLemmas.__default Tagclass.BitsetLemmas.__default class.BitmapModel.__default Tagclass.BitmapModel.__default field$bits field$Repr field$key field$count field$unit field$index) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (forall ((b@@61 (_ BitVec 64)) ) (!  (and (and (<= 0 (nat_from_bv64 b@@61)) (< (nat_from_bv64 b@@61) 18446744073709551616)) (= (nat_from_bv64 b@@61) (bv2int b@@61))) :qid |unknown.0:0| :skolemid |638| :pattern ( (nat_from_bv64 b@@61)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |640| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |642| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |643| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |647| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |649| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |650| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |652| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |654| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |656| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |658| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |661| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |663| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |664| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |666| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |667| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |668| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |669| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |670| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |671| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |672| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |673| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |674| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |675| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |676| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |677| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |678| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |679| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |681| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |682| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |682| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |683| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |684| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |685| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |686| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |686| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |688| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |690| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |693| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |695| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |702| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |703| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |707| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |709| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |710| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |711| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |712| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |713| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |714| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |716| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |717| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |718| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |719| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |720| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |721| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |722| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |723| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |725| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |726| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |726| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |730| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |732| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |733| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |732| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |733| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |734| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |735| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |736| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |740| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |742| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |742| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |744| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |749| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |750| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |750| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |752| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) (arg2@@24 T@U) (arg3@@10 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@139 arg1@@63 arg2@@24 arg3@@10)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@139 arg1@@63 arg2@@24 arg3@@10)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@18| |#$T1@@18| |#$T2| |#$R@@31|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc3 |#$T0@@18| |#$T1@@18| |#$T2| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@32| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@19| |#$T1@@19| |#$T2@@0| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc3 |#$T0@@19| |#$T1@@19| |#$T2@@0| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@20| |#$T1@@20| |#$T2@@1| |#$R@@33|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hFunc3 |#$T0@@20| |#$T1@@20| |#$T2@@1| |#$R@@33|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@142)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@142)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@21| |#$T1@@21| |#$T2@@2| |#$R@@34|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hFunc3 |#$T0@@21| |#$T1@@21| |#$T2@@2| |#$R@@34|)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@143)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@143)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@22| |#$T1@@22| |#$T2@@3| |#$R@@35|)) |#$R@@35|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hFunc3 |#$T0@@22| |#$T1@@22| |#$T2@@3| |#$R@@35|)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@36| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@36|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc3 |#$T0@@23| |#$T1@@23| |#$T2@@4| |#$R@@36|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc3 |#$T0@@23| |#$T1@@23| |#$T2@@4| |#$R@@36|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc3 |#$T0@@23| |#$T1@@23| |#$T2@@4| |#$R@@36|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@144 T@T) (arg1@@64 T@T) (arg2@@25 T@T) (arg3@@11 T@T) (arg4@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@144 arg1@@64 arg2@@25 arg3@@11 arg4@@3)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@145 T@T) (arg1@@65 T@T) (arg2@@26 T@T) (arg3@@12 T@T) (arg4@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@145 arg1@@65 arg2@@26 arg3@@12 arg4@@4)) arg0@@145) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@145 arg1@@65 arg2@@26 arg3@@12 arg4@@4)) ))) (forall ((arg0@@146 T@T) (arg1@@66 T@T) (arg2@@27 T@T) (arg3@@13 T@T) (arg4@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@146 arg1@@66 arg2@@27 arg3@@13 arg4@@5)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@146 arg1@@66 arg2@@27 arg3@@13 arg4@@5)) ))) (forall ((arg0@@147 T@T) (arg1@@67 T@T) (arg2@@28 T@T) (arg3@@14 T@T) (arg4@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@147 arg1@@67 arg2@@28 arg3@@14 arg4@@6)) arg2@@28) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@147 arg1@@67 arg2@@28 arg3@@14 arg4@@6)) ))) (forall ((arg0@@148 T@T) (arg1@@68 T@T) (arg2@@29 T@T) (arg3@@15 T@T) (arg4@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@148 arg1@@68 arg2@@29 arg3@@15 arg4@@7)) arg3@@15) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@148 arg1@@68 arg2@@29 arg3@@15 arg4@@7)) ))) (forall ((arg0@@149 T@T) (arg1@@69 T@T) (arg2@@30 T@T) (arg3@@16 T@T) (arg4@@8 T@T) ) (! (= (MapType3TypeInv4 (MapType3Type arg0@@149 arg1@@69 arg2@@30 arg3@@16 arg4@@8)) arg4@@8) :qid |typeInv:MapType3TypeInv4| :pattern ( (MapType3Type arg0@@149 arg1@@69 arg2@@30 arg3@@16 arg4@@8)) ))) (forall ((arg0@@150 T@U) (arg1@@70 T@U) (arg2@@31 T@U) (arg3@@17 T@U) (arg4@@9 T@U) ) (! (let ((aVar4 (MapType3TypeInv4 (type arg0@@150)))) (= (type (MapType3Select arg0@@150 arg1@@70 arg2@@31 arg3@@17 arg4@@9)) aVar4)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@150 arg1@@70 arg2@@31 arg3@@17 arg4@@9)) ))) (forall ((arg0@@151 T@U) (arg1@@71 T@U) (arg2@@32 T@U) (arg3@@18 T@U) (arg4@@10 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@10))) (let ((aVar2@@0 (type arg3@@18))) (let ((aVar1@@3 (type arg2@@32))) (let ((aVar0@@1 (type arg1@@71))) (= (type (MapType3Store arg0@@151 arg1@@71 arg2@@32 arg3@@18 arg4@@10 arg5@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@0 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@151 arg1@@71 arg2@@32 arg3@@18 arg4@@10 arg5@@1)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@4 T@U) (x3 T@U) (val@@11 T@U) ) (! (let ((aVar4@@1 (MapType3TypeInv4 (type m@@32)))) (=> (= (type val@@11) aVar4@@1) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 x2@@4 x3 val@@11) x0@@10 x1@@4 x2@@4 x3) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 x2@@5 x3@@0 val@@12) y0@@7 y1@@3 y2@@3 y3) (MapType3Select m@@33 y0@@7 y1@@3 y2@@3 y3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 x2@@6 x3@@1 val@@13) y0@@8 y1@@4 y2@@4 y3@@0) (MapType3Select m@@34 y0@@8 y1@@4 y2@@4 y3@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 x2@@7 x3@@2 val@@14) y0@@9 y1@@5 y2@@5 y3@@1) (MapType3Select m@@35 y0@@9 y1@@5 y2@@5 y3@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@15 T@U) (m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType3Select (MapType3Store m@@36 x0@@14 x1@@8 x2@@8 x3@@3 val@@15) y0@@10 y1@@6 y2@@6 y3@@2) (MapType3Select m@@36 y0@@10 y1@@6 y2@@6 y3@@2))) :qid |mapAx1:MapType3Select:3| :weight 0 ))) (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@37 x0@@15 x1@@9 x2@@9 x3@@4 val@@16) y0@@11 y1@@7 y2@@7 y3@@3) (MapType3Select m@@37 y0@@11 y1@@7 y2@@7 y3@@3))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@152 T@U) (arg1@@72 T@U) (arg2@@33 T@U) (arg3@@19 T@U) (arg4@@11 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@152 arg1@@72 arg2@@33 arg3@@19 arg4@@11 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@152 arg1@@72 arg2@@33 arg3@@19 arg4@@11 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@153 T@U) (arg1@@73 T@U) (arg2@@34 T@U) ) (! (= (type (Handle3 arg0@@153 arg1@@73 arg2@@34)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@153 arg1@@73 arg2@@34)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (t2@@14 T@U) (t3 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@42 t1@@18 t2@@14 t3 heap@@11 (Handle3 h@@34 r@@16 rd@@5) bx0@@15 bx1@@15 bx2) (MapType3Select h@@34 heap@@11 bx0@@15 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |759| :pattern ( (Apply3 t0@@42 t1@@18 t2@@14 t3 heap@@11 (Handle3 h@@34 r@@16 rd@@5) bx0@@15 bx1@@15 bx2)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16 bx1@@16 bx2@@0))) (Requires3 t0@@43 t1@@19 t2@@15 t3@@0 heap@@12 (Handle3 h@@35 r@@17 rd@@6) bx0@@16 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |760| :pattern ( (Requires3 t0@@43 t1@@19 t2@@15 t3@@0 heap@@12 (Handle3 h@@35 r@@17 rd@@6) bx0@@16 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@154 T@U) (arg1@@74 T@U) (arg2@@35 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@154 arg1@@74 arg2@@35 arg3@@20 arg4@@12 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@154 arg1@@74 arg2@@35 arg3@@20 arg4@@12 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@44 t1@@20 t2@@16 t3@@1 heap@@13 (Handle3 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17 bx1@@17 bx2@@1) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17 bx1@@17 bx2@@1) bx@@53)) (U_2_bool (MapType0Select (Reads3 t0@@44 t1@@20 t2@@16 t3@@1 heap@@13 (Handle3 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1) bx@@53))))) :qid |unknown.0:0| :skolemid |761| :pattern ( (MapType0Select (Reads3 t0@@44 t1@@20 t2@@16 t3@@1 heap@@13 (Handle3 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and (and ($IsBox bx0@@18 t0@@45) ($IsBox bx1@@18 t1@@21)) ($IsBox bx2@@2 t2@@17)) ($Is f@@29 (Tclass._System.___hFunc3 t0@@45 t1@@21 t2@@17 t3@@2)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@45 t1@@21 t2@@17 t3@@2 h0@@12 f@@29 bx0@@18 bx1@@18 bx2@@2) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |762| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads3 t0@@45 t1@@21 t2@@17 t3@@2 h0@@12 f@@29 bx0@@18 bx1@@18 bx2@@2) (Reads3 t0@@45 t1@@21 t2@@17 t3@@2 h1@@12 f@@29 bx0@@18 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |763| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads3 t0@@45 t1@@21 t2@@17 t3@@2 h1@@12 f@@29 bx0@@18 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and (and ($IsBox bx0@@19 t0@@46) ($IsBox bx1@@19 t1@@22)) ($IsBox bx2@@3 t2@@18)) ($Is f@@30 (Tclass._System.___hFunc3 t0@@46 t1@@22 t2@@18 t3@@3)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@46 t1@@22 t2@@18 t3@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |764| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads3 t0@@46 t1@@22 t2@@18 t3@@3 h0@@13 f@@30 bx0@@19 bx1@@19 bx2@@3) (Reads3 t0@@46 t1@@22 t2@@18 t3@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads3 t0@@46 t1@@22 t2@@18 t3@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and (and ($IsBox bx0@@20 t0@@47) ($IsBox bx1@@20 t1@@23)) ($IsBox bx2@@4 t2@@19)) ($Is f@@31 (Tclass._System.___hFunc3 t0@@47 t1@@23 t2@@19 t3@@4)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads3 t0@@47 t1@@23 t2@@19 t3@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |766| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires3 t0@@47 t1@@23 t2@@19 t3@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4) (Requires3 t0@@47 t1@@23 t2@@19 t3@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4)) (=> (Requires3 t0@@47 t1@@23 t2@@19 t3@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4) (Requires3 t0@@47 t1@@23 t2@@19 t3@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |767| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires3 t0@@47 t1@@23 t2@@19 t3@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and (and ($IsBox bx0@@21 t0@@48) ($IsBox bx1@@21 t1@@24)) ($IsBox bx2@@5 t2@@20)) ($Is f@@32 (Tclass._System.___hFunc3 t0@@48 t1@@24 t2@@20 t3@@5)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads3 t0@@48 t1@@24 t2@@20 t3@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires3 t0@@48 t1@@24 t2@@20 t3@@5 h0@@15 f@@32 bx0@@21 bx1@@21 bx2@@5) (Requires3 t0@@48 t1@@24 t2@@20 t3@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5)) (=> (Requires3 t0@@48 t1@@24 t2@@20 t3@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5) (Requires3 t0@@48 t1@@24 t2@@20 t3@@5 h0@@15 f@@32 bx0@@21 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires3 t0@@48 t1@@24 t2@@20 t3@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and (and ($IsBox bx0@@22 t0@@49) ($IsBox bx1@@22 t1@@25)) ($IsBox bx2@@6 t2@@21)) ($Is f@@33 (Tclass._System.___hFunc3 t0@@49 t1@@25 t2@@21 t3@@6)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads3 t0@@49 t1@@25 t2@@21 t3@@6 h0@@16 f@@33 bx0@@22 bx1@@22 bx2@@6) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply3 t0@@49 t1@@25 t2@@21 t3@@6 h0@@16 f@@33 bx0@@22 bx1@@22 bx2@@6) (Apply3 t0@@49 t1@@25 t2@@21 t3@@6 h1@@16 f@@33 bx0@@22 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply3 t0@@49 t1@@25 t2@@21 t3@@6 h1@@16 f@@33 bx0@@22 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and (and ($IsBox bx0@@23 t0@@50) ($IsBox bx1@@23 t1@@26)) ($IsBox bx2@@7 t2@@22)) ($Is f@@34 (Tclass._System.___hFunc3 t0@@50 t1@@26 t2@@22 t3@@7)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads3 t0@@50 t1@@26 t2@@22 t3@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply3 t0@@50 t1@@26 t2@@22 t3@@7 h0@@17 f@@34 bx0@@23 bx1@@23 bx2@@7) (Apply3 t0@@50 t1@@26 t2@@22 t3@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply3 t0@@50 t1@@26 t2@@22 t3@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and (and ($IsBox bx0@@24 t0@@51) ($IsBox bx1@@24 t1@@27)) ($IsBox bx2@@8 t2@@23)) ($Is f@@35 (Tclass._System.___hFunc3 t0@@51 t1@@27 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |774| :pattern ( (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads3 t0@@51 t1@@27 t2@@23 t3@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and (and ($IsBox bx0@@25 t0@@52) ($IsBox bx1@@25 t1@@28)) ($IsBox bx2@@9 t2@@24)) ($Is f@@36 (Tclass._System.___hFunc3 t0@@52 t1@@28 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@52 t1@@28 t2@@24 t3@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9) (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9)) (=> (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9) (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |775| :pattern ( (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires3 t0@@52 t1@@28 t2@@24 t3@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc3 t0@@53 t1@@29 t2@@25 t3@@10)) (forall ((h@@37 T@U) (bx0@@26 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@37) (and (and ($IsBox bx0@@26 t0@@53) ($IsBox bx1@@26 t1@@29)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@53 t1@@29 t2@@25 t3@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@53 t1@@29 t2@@25 t3@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |776| :pattern ( (Apply3 t0@@53 t1@@29 t2@@25 t3@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@38) (and (and ($IsBox bx0@@27 t0@@53) ($IsBox bx1@@27 t1@@29)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@53 t1@@29 t2@@25 t3@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@53 t1@@29 t2@@25 t3@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |776| :pattern ( (Apply3 t0@@53 t1@@29 t2@@25 t3@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11)) )) ($Is f@@37 (Tclass._System.___hFunc3 t0@@53 t1@@29 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@37 (Tclass._System.___hFunc3 t0@@53 t1@@29 t2@@25 t3@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@38 (Tclass._System.___hFunc3 t0@@54 t1@@30 t2@@26 t3@@11)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |778| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u1@@0)) ($IsBox bx@@55 t1@@30)) :qid |unknown.0:0| :skolemid |779| :pattern ( ($IsBox bx@@55 u1@@0)) :pattern ( ($IsBox bx@@55 t1@@30)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 u2@@0)) ($IsBox bx@@56 t2@@26)) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsBox bx@@56 u2@@0)) :pattern ( ($IsBox bx@@56 t2@@26)) ))) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 t3@@11)) ($IsBox bx@@57 u3)) :qid |unknown.0:0| :skolemid |781| :pattern ( ($IsBox bx@@57 t3@@11)) :pattern ( ($IsBox bx@@57 u3)) )))) ($Is f@@38 (Tclass._System.___hFunc3 u0@@1 u1@@0 u2@@0 u3))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($Is f@@38 (Tclass._System.___hFunc3 t0@@54 t1@@30 t2@@26 t3@@11)) ($Is f@@38 (Tclass._System.___hFunc3 u0@@1 u1@@0 u2@@0 u3))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc3 t0@@55 t1@@31 t2@@27 t3@@12) h@@39) (forall ((bx0@@28 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@28) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (and ($IsBox bx1@@28 t1@@31) ($IsAllocBox bx1@@28 t1@@31 h@@39))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@39))) (Requires3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |783| :pattern ( (MapType0Select (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |784| :pattern ( (Apply3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@29 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@29) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (and ($IsBox bx1@@29 t1@@31) ($IsAllocBox bx1@@29 t1@@31 h@@39))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@39))) (Requires3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |783| :pattern ( (MapType0Select (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |784| :pattern ( (Apply3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@55 t1@@31 t2@@27 t3@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc3 t0@@55 t1@@31 t2@@27 t3@@12) h@@39)))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc3 t0@@55 t1@@31 t2@@27 t3@@12) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc3 t0@@56 t1@@32 t2@@28 t3@@13) h@@40))) (forall ((bx0@@30 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@30) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@30 t0@@56 h@@40) ($IsAllocBox bx1@@30 t1@@32 h@@40)) ($IsAllocBox bx2@@14 t2@@28 h@@40)) (Requires3 t0@@56 t1@@32 t2@@28 t3@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@56 t1@@32 t2@@28 t3@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14) t3@@13 h@@40))) :qid |unknown.0:0| :skolemid |786| :pattern ( (Apply3 t0@@56 t1@@32 t2@@28 t3@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc3 t0@@56 t1@@32 t2@@28 t3@@13) h@@40)) )))
(assert (forall ((arg0@@155 T@U) (arg1@@75 T@U) (arg2@@36 T@U) (arg3@@21 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@155 arg1@@75 arg2@@36 arg3@@21)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@155 arg1@@75 arg2@@36 arg3@@21)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@37| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@37|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@24| |#$T1@@24| |#$T2@@5| |#$R@@37|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |788| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@24| |#$T1@@24| |#$T2@@5| |#$R@@37|)) )))
(assert (forall ((arg0@@156 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@156)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@156)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@38| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@38|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@25| |#$T1@@25| |#$T2@@6| |#$R@@38|)) |#$T0@@25|)) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@25| |#$T1@@25| |#$T2@@6| |#$R@@38|)) )))
(assert (forall ((arg0@@157 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@157)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@157)) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@39| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@39|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@26| |#$T1@@26| |#$T2@@7| |#$R@@39|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@26| |#$T1@@26| |#$T2@@7| |#$R@@39|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@158)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@158)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@40|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@27| |#$T1@@27| |#$T2@@8| |#$R@@40|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@27| |#$T1@@27| |#$T2@@8| |#$R@@40|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@159)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@159)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@28| |#$T1@@28| |#$T2@@9| |#$R@@41|)) |#$R@@41|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@28| |#$T1@@28| |#$T2@@9| |#$R@@41|)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@42| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@42|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hPartialFunc3 |#$T0@@29| |#$T1@@29| |#$T2@@10| |#$R@@42|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hPartialFunc3 |#$T0@@29| |#$T1@@29| |#$T2@@10| |#$R@@42|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@58 (Tclass._System.___hPartialFunc3 |#$T0@@29| |#$T1@@29| |#$T2@@10| |#$R@@42|))) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@43| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@43|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43|)) (forall ((|x0#0@@3| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@3| |#$T0@@30|) ($IsBox |x1#0@@3| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43| $OneHeap |f#0@@7| |x0#0@@3| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43|)) (forall ((|x0#0@@4| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@4| |#$T0@@30|) ($IsBox |x1#0@@4| |#$T1@@30|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43| $OneHeap |f#0@@7| |x0#0@@4| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc3 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$R@@43|))) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@44| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@44|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc3 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$R@@44|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc3 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$R@@44|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc3 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$R@@44|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc3 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$R@@44|) $h@@12)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc3 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$R@@44|) $h@@12)) )))
(assert (forall ((arg0@@160 T@U) (arg1@@76 T@U) (arg2@@37 T@U) (arg3@@22 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@160 arg1@@76 arg2@@37 arg3@@22)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@160 arg1@@76 arg2@@37 arg3@@22)) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@45| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@45|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$R@@45|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |797| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$R@@45|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@161)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@161)) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@46| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@46|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$R@@46|)) |#$T0@@33|)) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$R@@46|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@162)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@162)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@34| |#$T1@@34| |#$T2@@15| |#$R@@47|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@34| |#$T1@@34| |#$T2@@15| |#$R@@47|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@163)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@163)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@35| |#$T1@@35| |#$T2@@16| |#$R@@48|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@35| |#$T1@@35| |#$T2@@16| |#$R@@48|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@164)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@36| |#$T1@@36| |#$T2@@17| |#$R@@49|)) |#$R@@49|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@36| |#$T1@@36| |#$T2@@17| |#$R@@49|)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@50| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@50|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hTotalFunc3 |#$T0@@37| |#$T1@@37| |#$T2@@18| |#$R@@50|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hTotalFunc3 |#$T0@@37| |#$T1@@37| |#$T2@@18| |#$R@@50|)))) :qid |unknown.0:0| :skolemid |802| :pattern ( ($IsBox bx@@59 (Tclass._System.___hTotalFunc3 |#$T0@@37| |#$T1@@37| |#$T2@@18| |#$R@@50|))) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@51| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@51|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51|)) (forall ((|x0#0@@5| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@38|) ($IsBox |x1#0@@5| |#$T1@@38|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51| $OneHeap |f#0@@9| |x0#0@@5| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |803| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51|)) (forall ((|x0#0@@6| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@38|) ($IsBox |x1#0@@6| |#$T1@@38|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51| $OneHeap |f#0@@9| |x0#0@@6| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |803| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51|))))) :qid |unknown.0:0| :skolemid |804| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc3 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$R@@51|))) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@52| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@52|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc3 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$R@@52|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc3 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$R@@52|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc3 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$R@@52|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc3 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$R@@52|) $h@@13)))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc3 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$R@@52|) $h@@13)) )))
(assert (forall ((arg0@@165 T@U) (arg1@@77 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@165 arg1@@77)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@165 arg1@@77)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$R@@53| T@U) ) (!  (=> (and (= (type |#$T0@@40|) TyType) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@40| |#$R@@53|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc1 |#$T0@@40| |#$R@@53|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@166)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@166)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$R@@54| T@U) ) (!  (=> (and (= (type |#$T0@@41|) TyType) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@41| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc1 |#$T0@@41| |#$R@@54|)) )))
(assert (forall ((arg0@@167 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@167)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@167)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$R@@55| T@U) ) (!  (=> (and (= (type |#$T0@@42|) TyType) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@42| |#$R@@55|)) |#$R@@55|)) :qid |unknown.0:0| :skolemid |808| :pattern ( (Tclass._System.___hFunc1 |#$T0@@42| |#$R@@55|)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$R@@56| T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$R@@56|) TyType)) (= (type bx@@60) BoxType)) ($IsBox bx@@60 (Tclass._System.___hFunc1 |#$T0@@43| |#$R@@56|))) (and (= ($Box ($Unbox HandleTypeType bx@@60)) bx@@60) ($Is ($Unbox HandleTypeType bx@@60) (Tclass._System.___hFunc1 |#$T0@@43| |#$R@@56|)))) :qid |unknown.0:0| :skolemid |809| :pattern ( ($IsBox bx@@60 (Tclass._System.___hFunc1 |#$T0@@43| |#$R@@56|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@168 T@T) (arg1@@78 T@T) (arg2@@38 T@T) ) (! (= (Ctor (MapType4Type arg0@@168 arg1@@78 arg2@@38)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@169 T@T) (arg1@@79 T@T) (arg2@@39 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@169 arg1@@79 arg2@@39)) arg0@@169) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@169 arg1@@79 arg2@@39)) ))) (forall ((arg0@@170 T@T) (arg1@@80 T@T) (arg2@@40 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@170 arg1@@80 arg2@@40)) arg1@@80) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@170 arg1@@80 arg2@@40)) ))) (forall ((arg0@@171 T@T) (arg1@@81 T@T) (arg2@@41 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@171 arg1@@81 arg2@@41)) arg2@@41) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@171 arg1@@81 arg2@@41)) ))) (forall ((arg0@@172 T@U) (arg1@@82 T@U) (arg2@@42 T@U) ) (! (let ((aVar2@@1 (MapType4TypeInv2 (type arg0@@172)))) (= (type (MapType4Select arg0@@172 arg1@@82 arg2@@42)) aVar2@@1)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@172 arg1@@82 arg2@@42)) ))) (forall ((arg0@@173 T@U) (arg1@@83 T@U) (arg2@@43 T@U) (arg3@@23 T@U) ) (! (let ((aVar2@@2 (type arg3@@23))) (let ((aVar1@@4 (type arg2@@43))) (let ((aVar0@@2 (type arg1@@83))) (= (type (MapType4Store arg0@@173 arg1@@83 arg2@@43 arg3@@23)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@2))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@173 arg1@@83 arg2@@43 arg3@@23)) ))) (forall ((m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (val@@17 T@U) ) (! (let ((aVar2@@3 (MapType4TypeInv2 (type m@@38)))) (=> (= (type val@@17) aVar2@@3) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 val@@17) x0@@16 x1@@10) val@@17))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (y0@@12 T@U) (y1@@8 T@U) ) (!  (or (= x0@@17 y0@@12) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 val@@18) y0@@12 y1@@8) (MapType4Select m@@39 y0@@12 y1@@8))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (y0@@13 T@U) (y1@@9 T@U) ) (!  (or (= x1@@12 y1@@9) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 val@@19) y0@@13 y1@@9) (MapType4Select m@@40 y0@@13 y1@@9))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (y0@@14 T@U) (y1@@10 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 val@@20) y0@@14 y1@@10) (MapType4Select m@@41 y0@@14 y1@@10))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@174 T@U) (arg1@@84 T@U) (arg2@@44 T@U) ) (! (= (type (Handle1 arg0@@174 arg1@@84 arg2@@44)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@174 arg1@@84 arg2@@44)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (Apply1 t0@@57 t1@@33 heap@@16 (Handle1 h@@41 r@@21 rd@@8) bx0@@31) (MapType4Select h@@41 heap@@16 bx0@@31))) :qid |unknown.0:0| :skolemid |810| :pattern ( (Apply1 t0@@57 t1@@33 heap@@16 (Handle1 h@@41 r@@21 rd@@8) bx0@@31)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32))) (Requires1 t0@@58 t1@@34 heap@@17 (Handle1 h@@42 r@@22 rd@@9) bx0@@32)) :qid |unknown.0:0| :skolemid |811| :pattern ( (Requires1 t0@@58 t1@@34 heap@@17 (Handle1 h@@42 r@@22 rd@@9) bx0@@32)) )))
(assert (forall ((arg0@@175 T@U) (arg1@@85 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@13 T@U) ) (! (= (type (Reads1 arg0@@175 arg1@@85 arg2@@45 arg3@@24 arg4@@13)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@175 arg1@@85 arg2@@45 arg3@@24 arg4@@13)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx@@61) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@59 t1@@35 heap@@18 (Handle1 h@@43 r@@23 rd@@10) bx0@@33) bx@@61)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33) bx@@61))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33) bx@@61)) (U_2_bool (MapType0Select (Reads1 t0@@59 t1@@35 heap@@18 (Handle1 h@@43 r@@23 rd@@10) bx0@@33) bx@@61))))) :qid |unknown.0:0| :skolemid |812| :pattern ( (MapType0Select (Reads1 t0@@59 t1@@35 heap@@18 (Handle1 h@@43 r@@23 rd@@10) bx0@@33) bx@@61)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and ($IsBox bx0@@34 t0@@60) ($Is f@@41 (Tclass._System.___hFunc1 t0@@60 t1@@36)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads1 t0@@60 t1@@36 h0@@18 f@@41 bx0@@34) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |813| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads1 t0@@60 t1@@36 h0@@18 f@@41 bx0@@34) (Reads1 t0@@60 t1@@36 h1@@18 f@@41 bx0@@34))) :qid |unknown.0:0| :skolemid |814| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads1 t0@@60 t1@@36 h1@@18 f@@41 bx0@@34)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and ($IsBox bx0@@35 t0@@61) ($Is f@@42 (Tclass._System.___hFunc1 t0@@61 t1@@37)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads1 t0@@61 t1@@37 h1@@19 f@@42 bx0@@35) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |815| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads1 t0@@61 t1@@37 h0@@19 f@@42 bx0@@35) (Reads1 t0@@61 t1@@37 h1@@19 f@@42 bx0@@35))) :qid |unknown.0:0| :skolemid |816| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads1 t0@@61 t1@@37 h1@@19 f@@42 bx0@@35)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and ($IsBox bx0@@36 t0@@62) ($Is f@@43 (Tclass._System.___hFunc1 t0@@62 t1@@38)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads1 t0@@62 t1@@38 h0@@20 f@@43 bx0@@36) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |817| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires1 t0@@62 t1@@38 h0@@20 f@@43 bx0@@36) (Requires1 t0@@62 t1@@38 h1@@20 f@@43 bx0@@36)) (=> (Requires1 t0@@62 t1@@38 h1@@20 f@@43 bx0@@36) (Requires1 t0@@62 t1@@38 h0@@20 f@@43 bx0@@36)))) :qid |unknown.0:0| :skolemid |818| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires1 t0@@62 t1@@38 h1@@20 f@@43 bx0@@36)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and ($IsBox bx0@@37 t0@@63) ($Is f@@44 (Tclass._System.___hFunc1 t0@@63 t1@@39)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads1 t0@@63 t1@@39 h1@@21 f@@44 bx0@@37) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |819| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires1 t0@@63 t1@@39 h0@@21 f@@44 bx0@@37) (Requires1 t0@@63 t1@@39 h1@@21 f@@44 bx0@@37)) (=> (Requires1 t0@@63 t1@@39 h1@@21 f@@44 bx0@@37) (Requires1 t0@@63 t1@@39 h0@@21 f@@44 bx0@@37)))) :qid |unknown.0:0| :skolemid |820| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires1 t0@@63 t1@@39 h1@@21 f@@44 bx0@@37)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and ($IsBox bx0@@38 t0@@64) ($Is f@@45 (Tclass._System.___hFunc1 t0@@64 t1@@40)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads1 t0@@64 t1@@40 h0@@22 f@@45 bx0@@38) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |821| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply1 t0@@64 t1@@40 h0@@22 f@@45 bx0@@38) (Apply1 t0@@64 t1@@40 h1@@22 f@@45 bx0@@38))) :qid |unknown.0:0| :skolemid |822| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply1 t0@@64 t1@@40 h1@@22 f@@45 bx0@@38)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and ($IsBox bx0@@39 t0@@65) ($Is f@@46 (Tclass._System.___hFunc1 t0@@65 t1@@41)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads1 t0@@65 t1@@41 h1@@23 f@@46 bx0@@39) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |823| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply1 t0@@65 t1@@41 h0@@23 f@@46 bx0@@39) (Apply1 t0@@65 t1@@41 h1@@23 f@@46 bx0@@39))) :qid |unknown.0:0| :skolemid |824| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply1 t0@@65 t1@@41 h1@@23 f@@46 bx0@@39)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (and ($IsGoodHeap heap@@19) (and ($IsBox bx0@@40 t0@@66) ($Is f@@47 (Tclass._System.___hFunc1 t0@@66 t1@@42))))) (and (=> (|Set#Equal| (Reads1 t0@@66 t1@@42 $OneHeap f@@47 bx0@@40) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@66 t1@@42 heap@@19 f@@47 bx0@@40) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@66 t1@@42 heap@@19 f@@47 bx0@@40) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@66 t1@@42 $OneHeap f@@47 bx0@@40) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Reads1 t0@@66 t1@@42 $OneHeap f@@47 bx0@@40) ($IsGoodHeap heap@@19)) :pattern ( (Reads1 t0@@66 t1@@42 heap@@19 f@@47 bx0@@40)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (and (and ($IsGoodHeap heap@@20) (and ($IsBox bx0@@41 t0@@67) ($Is f@@48 (Tclass._System.___hFunc1 t0@@67 t1@@43)))) (|Set#Equal| (Reads1 t0@@67 t1@@43 $OneHeap f@@48 bx0@@41) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@67 t1@@43 $OneHeap f@@48 bx0@@41) (Requires1 t0@@67 t1@@43 heap@@20 f@@48 bx0@@41)) (=> (Requires1 t0@@67 t1@@43 heap@@20 f@@48 bx0@@41) (Requires1 t0@@67 t1@@43 $OneHeap f@@48 bx0@@41)))) :qid |unknown.0:0| :skolemid |826| :pattern ( (Requires1 t0@@67 t1@@43 $OneHeap f@@48 bx0@@41) ($IsGoodHeap heap@@20)) :pattern ( (Requires1 t0@@67 t1@@43 heap@@20 f@@48 bx0@@41)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) ) (!  (=> (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc1 t0@@68 t1@@44)) (forall ((h@@44 T@U) (bx0@@42 T@U) ) (!  (=> (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (=> (and (and ($IsGoodHeap h@@44) ($IsBox bx0@@42 t0@@68)) (Requires1 t0@@68 t1@@44 h@@44 f@@49 bx0@@42)) ($IsBox (Apply1 t0@@68 t1@@44 h@@44 f@@49 bx0@@42) t1@@44))) :qid |DafnyPre.521:12| :skolemid |827| :pattern ( (Apply1 t0@@68 t1@@44 h@@44 f@@49 bx0@@42)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) ) (!  (=> (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (=> (and (and ($IsGoodHeap h@@45) ($IsBox bx0@@43 t0@@68)) (Requires1 t0@@68 t1@@44 h@@45 f@@49 bx0@@43)) ($IsBox (Apply1 t0@@68 t1@@44 h@@45 f@@49 bx0@@43) t1@@44))) :qid |DafnyPre.521:12| :skolemid |827| :pattern ( (Apply1 t0@@68 t1@@44 h@@45 f@@49 bx0@@43)) )) ($Is f@@49 (Tclass._System.___hFunc1 t0@@68 t1@@44))))) :qid |unknown.0:0| :skolemid |828| :pattern ( ($Is f@@49 (Tclass._System.___hFunc1 t0@@68 t1@@44))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (u0@@2 T@U) (u1@@1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (and (and ($Is f@@50 (Tclass._System.___hFunc1 t0@@69 t1@@45)) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u0@@2)) ($IsBox bx@@62 t0@@69)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@62 u0@@2)) :pattern ( ($IsBox bx@@62 t0@@69)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 t1@@45)) ($IsBox bx@@63 u1@@1)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@63 t1@@45)) :pattern ( ($IsBox bx@@63 u1@@1)) )))) ($Is f@@50 (Tclass._System.___hFunc1 u0@@2 u1@@1))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@50 (Tclass._System.___hFunc1 t0@@69 t1@@45)) ($Is f@@50 (Tclass._System.___hFunc1 u0@@2 u1@@1))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc1 t0@@70 t1@@46) h@@46) (forall ((bx0@@44 T@U) ) (!  (=> (= (type bx0@@44) BoxType) (=> (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (Requires1 t0@@70 t1@@46 h@@46 f@@51 bx0@@44)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@44) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@44) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply1 t0@@70 t1@@46 h@@46 f@@51 bx0@@44)) :pattern ( (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@44)) ))) (=> (forall ((bx0@@45 T@U) ) (!  (=> (= (type bx0@@45) BoxType) (=> (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (Requires1 t0@@70 t1@@46 h@@46 f@@51 bx0@@45)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@45) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@45) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply1 t0@@70 t1@@46 h@@46 f@@51 bx0@@45)) :pattern ( (Reads1 t0@@70 t1@@46 h@@46 f@@51 bx0@@45)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc1 t0@@70 t1@@46) h@@46)))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc1 t0@@70 t1@@46) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc1 t0@@71 t1@@47) h@@47))) (forall ((bx0@@46 T@U) ) (!  (=> (= (type bx0@@46) BoxType) (=> (and ($IsAllocBox bx0@@46 t0@@71 h@@47) (Requires1 t0@@71 t1@@47 h@@47 f@@52 bx0@@46)) ($IsAllocBox (Apply1 t0@@71 t1@@47 h@@47 f@@52 bx0@@46) t1@@47 h@@47))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply1 t0@@71 t1@@47 h@@47 f@@52 bx0@@46)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc1 t0@@71 t1@@47) h@@47)) )))
(assert (forall ((arg0@@176 T@U) (arg1@@86 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@176 arg1@@86)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@176 arg1@@86)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$R@@57| T@U) ) (!  (=> (and (= (type |#$T0@@44|) TyType) (= (type |#$R@@57|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@44| |#$R@@57|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@44| |#$R@@57|)) )))
(assert (forall ((arg0@@177 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@177)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@177)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$R@@58| T@U) ) (!  (=> (and (= (type |#$T0@@45|) TyType) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@45| |#$R@@58|)) |#$T0@@45|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@45| |#$R@@58|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@178)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$R@@59| T@U) ) (!  (=> (and (= (type |#$T0@@46|) TyType) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@46| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@46| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$R@@60| T@U) (bx@@64 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$R@@60|) TyType)) (= (type bx@@64) BoxType)) ($IsBox bx@@64 (Tclass._System.___hPartialFunc1 |#$T0@@47| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@64)) bx@@64) ($Is ($Unbox HandleTypeType bx@@64) (Tclass._System.___hPartialFunc1 |#$T0@@47| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsBox bx@@64 (Tclass._System.___hPartialFunc1 |#$T0@@47| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (= (type |#$T0@@48|) TyType) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc1 |#$T0@@48| |#$R@@61|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc1 |#$T0@@48| |#$R@@61|)) (forall ((|x0#0@@7| T@U) ) (!  (=> (and (= (type |x0#0@@7|) BoxType) ($IsBox |x0#0@@7| |#$T0@@48|)) (|Set#Equal| (Reads1 |#$T0@@48| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |841| :no-pattern (type |x0#0@@7|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc1 |#$T0@@48| |#$R@@61|)) (forall ((|x0#0@@8| T@U) ) (!  (=> (and (= (type |x0#0@@8|) BoxType) ($IsBox |x0#0@@8| |#$T0@@48|)) (|Set#Equal| (Reads1 |#$T0@@48| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@8|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |841| :no-pattern (type |x0#0@@8|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc1 |#$T0@@48| |#$R@@61|))))) :qid |unknown.0:0| :skolemid |842| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc1 |#$T0@@48| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc1 |#$T0@@49| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc1 |#$T0@@49| |#$R@@62|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc1 |#$T0@@49| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc1 |#$T0@@49| |#$R@@62|) $h@@14)))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc1 |#$T0@@49| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@179 T@U) (arg1@@87 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@179 arg1@@87)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@179 arg1@@87)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$R@@63| T@U) ) (!  (=> (and (= (type |#$T0@@50|) TyType) (= (type |#$R@@63|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@50| |#$R@@63|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@50| |#$R@@63|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@180)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@180)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$R@@64| T@U) ) (!  (=> (and (= (type |#$T0@@51|) TyType) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@51| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@51| |#$R@@64|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@181)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$R@@65| T@U) ) (!  (=> (and (= (type |#$T0@@52|) TyType) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@52| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@52| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$R@@66| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$R@@66|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hTotalFunc1 |#$T0@@53| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hTotalFunc1 |#$T0@@53| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |847| :pattern ( ($IsBox bx@@65 (Tclass._System.___hTotalFunc1 |#$T0@@53| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@54|) TyType) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc1 |#$T0@@54| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc1 |#$T0@@54| |#$R@@67|)) (forall ((|x0#0@@9| T@U) ) (!  (=> (and (= (type |x0#0@@9|) BoxType) ($IsBox |x0#0@@9| |#$T0@@54|)) (Requires1 |#$T0@@54| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9|)) :qid |unknown.0:0| :skolemid |848| :no-pattern (type |x0#0@@9|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc1 |#$T0@@54| |#$R@@67|)) (forall ((|x0#0@@10| T@U) ) (!  (=> (and (= (type |x0#0@@10|) BoxType) ($IsBox |x0#0@@10| |#$T0@@54|)) (Requires1 |#$T0@@54| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10|)) :qid |unknown.0:0| :skolemid |848| :no-pattern (type |x0#0@@10|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc1 |#$T0@@54| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc1 |#$T0@@54| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc1 |#$T0@@55| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc1 |#$T0@@55| |#$R@@68|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc1 |#$T0@@55| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc1 |#$T0@@55| |#$R@@68|) $h@@15)))) :qid |unknown.0:0| :skolemid |850| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc1 |#$T0@@55| |#$R@@68|) $h@@15)) )))
(assert  (and (forall ((arg0@@182 T@U) (arg1@@88 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@182 arg1@@88)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@182 arg1@@88)) )) (forall ((arg0@@183 T@U) ) (! (= (type (DatatypeCtorId arg0@@183)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@183)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |852| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |853| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |854| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@184 T@U) (arg1@@89 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@184 arg1@@89)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@184 arg1@@89)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) ) (!  (=> (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@56| |#$T1@@40|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.Tuple2 |#$T0@@56| |#$T1@@40|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@185)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@185)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) ) (!  (=> (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@57| |#$T1@@41|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.Tuple2 |#$T0@@57| |#$T1@@41|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@186)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@186)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) ) (!  (=> (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@58| |#$T1@@42|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.Tuple2 |#$T0@@58| |#$T1@@42|)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.Tuple2 |#$T0@@59| |#$T1@@43|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@66)) bx@@66) ($Is ($Unbox DatatypeTypeType bx@@66) (Tclass._System.Tuple2 |#$T0@@59| |#$T1@@43|)))) :qid |unknown.0:0| :skolemid |858| :pattern ( ($IsBox bx@@66 (Tclass._System.Tuple2 |#$T0@@59| |#$T1@@43|))) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@60| |#$T1@@44|)) (and ($IsBox |a#2#0#0| |#$T0@@60|) ($IsBox |a#2#1#0| |#$T1@@44|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@60|) ($IsBox |a#2#1#0| |#$T1@@44|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@60| |#$T1@@44|))))) :qid |unknown.0:0| :skolemid |859| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@60| |#$T1@@44|))) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@16)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@61| |#$T1@@45|) $h@@16) (and ($IsAllocBox |a#3#0#0| |#$T0@@61| $h@@16) ($IsAllocBox |a#3#1#0| |#$T1@@45| $h@@16))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@61| $h@@16) ($IsAllocBox |a#3#1#0| |#$T1@@45| $h@@16)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@61| |#$T1@@45|) $h@@16)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@61| |#$T1@@45|) $h@@16)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@62| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@62|) TyType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@17) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@46| T@U) ) (!  (and (= (type |#$T1@@46|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@62| |#$T1@@46|) $h@@17)) :qid |unknown.0:0| :skolemid |861| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@62| |#$T1@@46|) $h@@17)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@62| $h@@17)) :qid |unknown.0:0| :skolemid |862| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@62| $h@@17)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@47| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@47|) TyType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@18) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@63| T@U) ) (!  (and (= (type |#$T0@@63|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@63| |#$T1@@47|) $h@@18)) :qid |unknown.0:0| :skolemid |863| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@63| |#$T1@@47|) $h@@18)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@47| $h@@18)) :qid |unknown.0:0| :skolemid |864| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@47| $h@@18)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |865| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |866| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |867| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |868| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |869| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |870| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@64| |#$T1@@48|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |871| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@64| |#$T1@@48|))) )))
(assert (forall ((a@@106 T@U) (b@@62 T@U) ) (!  (=> (and (and (= (type a@@106) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@106 b@@62) (and (= (_System.Tuple2._0 a@@106) (_System.Tuple2._0 b@@62)) (= (_System.Tuple2._1 a@@106) (_System.Tuple2._1 b@@62)))) (=> (and (= (_System.Tuple2._0 a@@106) (_System.Tuple2._0 b@@62)) (= (_System.Tuple2._1 a@@106) (_System.Tuple2._1 b@@62))) (|_System.Tuple2#Equal| a@@106 b@@62)))) :qid |unknown.0:0| :skolemid |872| :pattern ( (|_System.Tuple2#Equal| a@@106 b@@62)) )))
(assert (forall ((a@@107 T@U) (b@@63 T@U) ) (!  (=> (and (= (type a@@107) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@107 b@@63) (= a@@107 b@@63)) (=> (= a@@107 b@@63) (|_System.Tuple2#Equal| a@@107 b@@63)))) :qid |unknown.0:0| :skolemid |873| :pattern ( (|_System.Tuple2#Equal| a@@107 b@@63)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |874| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |875| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@67 T@U) ) (!  (=> (and (= (type bx@@67) BoxType) ($IsBox bx@@67 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |876| :pattern ( ($IsBox bx@@67 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@19 T@U) ) (!  (=> (and (= (type $h@@19) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@19)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@19)) :qid |DafnyPre.521:12| :skolemid |877| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@19)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |878| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |879| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@108 T@U) (b@@64 T@U) ) (!  (=> (and (and (= (type a@@108) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@108 b@@64) true) (=> true (|_System.Tuple0#Equal| a@@108 b@@64)))) :qid |unknown.0:0| :skolemid |880| :pattern ( (|_System.Tuple0#Equal| a@@108 b@@64)) )))
(assert (forall ((a@@109 T@U) (b@@65 T@U) ) (!  (=> (and (= (type a@@109) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@109 b@@65) (= a@@109 b@@65)) (=> (= a@@109 b@@65) (|_System.Tuple0#Equal| a@@109 b@@65)))) :qid |unknown.0:0| :skolemid |881| :pattern ( (|_System.Tuple0#Equal| a@@109 b@@65)) )))
(assert (= (type Tclass.BitmapImpl.Bitmap?) TyType))
(assert (= (Tag Tclass.BitmapImpl.Bitmap?) Tagclass.BitmapImpl.Bitmap?))
(assert (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 Tclass.BitmapImpl.Bitmap?)) (and (= ($Box ($Unbox refType bx@@68)) bx@@68) ($Is ($Unbox refType bx@@68) Tclass.BitmapImpl.Bitmap?))) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@68 Tclass.BitmapImpl.Bitmap?)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.BitmapImpl.Bitmap?) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BitmapImpl.Bitmap?))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BitmapImpl.Bitmap?)) ($Is $o@@9 Tclass.BitmapImpl.Bitmap?)))) :qid |unknown.0:0| :skolemid |883| :pattern ( ($Is $o@@9 Tclass.BitmapImpl.Bitmap?)) )))
(assert (forall (($o@@10 T@U) ($h@@20 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.BitmapImpl.Bitmap? $h@@20) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@20 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@20 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.BitmapImpl.Bitmap? $h@@20)))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsAlloc $o@@10 Tclass.BitmapImpl.Bitmap? $h@@20)) )))
(assert (= (type BitmapImpl.Bitmap.bits) (FieldType refType)))
(assert (= (FDim BitmapImpl.Bitmap.bits) 0))
(assert (= (FieldOfDecl refType class.BitmapImpl.Bitmap? field$bits) BitmapImpl.Bitmap.bits))
(assert  (not ($IsGhostField BitmapImpl.Bitmap.bits)))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@69)) bx@@69) ($Is ($Unbox intType bx@@69) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsBox bx@@69 Tclass.NativeTypes.uint64)) )))
(assert (forall (($h@@21 T@U) ($o@@11 T@U) ) (!  (=> (and (and (= (type $h@@21) (MapType0Type refType MapType1Type)) (= (type $o@@11) refType)) (and ($IsGoodHeap $h@@21) (and (not (= $o@@11 null)) (= (dtype $o@@11) Tclass.BitmapImpl.Bitmap?)))) ($Is (MapType1Select (MapType0Select $h@@21 $o@@11) BitmapImpl.Bitmap.bits) (Tclass._System.array Tclass.NativeTypes.uint64))) :qid |DafnyPre.521:12| :skolemid |886| :pattern ( (MapType1Select (MapType0Select $h@@21 $o@@11) BitmapImpl.Bitmap.bits)) )))
(assert (forall (($h@@22 T@U) ($o@@12 T@U) ) (!  (=> (and (= (type $h@@22) (MapType0Type refType MapType1Type)) (= (type $o@@12) refType)) (=> (and (and ($IsGoodHeap $h@@22) (and (not (= $o@@12 null)) (= (dtype $o@@12) Tclass.BitmapImpl.Bitmap?))) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@12) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@22 $o@@12) BitmapImpl.Bitmap.bits) (Tclass._System.array Tclass.NativeTypes.uint64) $h@@22))) :qid |DafnyPre.521:12| :skolemid |887| :pattern ( (MapType1Select (MapType0Select $h@@22 $o@@12) BitmapImpl.Bitmap.bits)) )))
(assert (= (type Tclass.BitmapImpl.Bitmap) TyType))
(assert (= (Tag Tclass.BitmapImpl.Bitmap) Tagclass.BitmapImpl.Bitmap))
(assert (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 Tclass.BitmapImpl.Bitmap)) (and (= ($Box ($Unbox refType bx@@70)) bx@@70) ($Is ($Unbox refType bx@@70) Tclass.BitmapImpl.Bitmap))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($IsBox bx@@70 Tclass.BitmapImpl.Bitmap)) )))
(assert (= (type Tclass.DebugAccumulator.AccRec) TyType))
(assert (= (Tag Tclass.DebugAccumulator.AccRec) Tagclass.DebugAccumulator.AccRec))
(assert (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 Tclass.DebugAccumulator.AccRec)) (and (= ($Box ($Unbox refType bx@@71)) bx@@71) ($Is ($Unbox refType bx@@71) Tclass.DebugAccumulator.AccRec))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsBox bx@@71 Tclass.DebugAccumulator.AccRec)) )))
(assert (= (type BitmapImpl.Bitmap.Repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim BitmapImpl.Bitmap.Repr) 0))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.BitmapImpl.Bitmap? field$Repr) BitmapImpl.Bitmap.Repr))
(assert ($IsGhostField BitmapImpl.Bitmap.Repr))
(assert (forall (($h@@23 T@U) ($o@@13 T@U) ) (!  (=> (and (and (= (type $h@@23) (MapType0Type refType MapType1Type)) (= (type $o@@13) refType)) (and ($IsGoodHeap $h@@23) (and (not (= $o@@13 null)) (= (dtype $o@@13) Tclass.BitmapImpl.Bitmap?)))) ($Is (MapType1Select (MapType0Select $h@@23 $o@@13) BitmapImpl.Bitmap.Repr) (TSet Tclass._System.object))) :qid |DafnyPre.521:12| :skolemid |895| :pattern ( (MapType1Select (MapType0Select $h@@23 $o@@13) BitmapImpl.Bitmap.Repr)) )))
(assert (forall (($h@@24 T@U) ($o@@14 T@U) ) (!  (=> (and (= (type $h@@24) (MapType0Type refType MapType1Type)) (= (type $o@@14) refType)) (=> (and (and ($IsGoodHeap $h@@24) (and (not (= $o@@14 null)) (= (dtype $o@@14) Tclass.BitmapImpl.Bitmap?))) (U_2_bool (MapType1Select (MapType0Select $h@@24 $o@@14) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@24 $o@@14) BitmapImpl.Bitmap.Repr) (TSet Tclass._System.object) $h@@24))) :qid |DafnyPre.521:12| :skolemid |896| :pattern ( (MapType1Select (MapType0Select $h@@24 $o@@14) BitmapImpl.Bitmap.Repr)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|word#0| Int) (|b#0@@1| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.BitBSet#canCall| |word#0| |b#0@@1|) (and (not (= 4 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0|) (< |word#0| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@1|) (< |b#0@@1| 18446744073709551616))) (< |b#0@@1| 64)))) true) :qid |BitmapIm.30:30| :skolemid |897| :pattern ( (BitmapImpl.Bitmap.BitBSet |word#0| |b#0@@1|)) ))))
(assert (forall ((|word#0@@0| Int) (|b#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |word#0@@0|) (< |word#0@@0| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@2|) (< |b#0@@2| 18446744073709551616))) (and (=> (|BitmapImpl.Bitmap.BitBSet#requires| |word#0@@0| |b#0@@2|) (< |b#0@@2| 64)) (=> (< |b#0@@2| 64) (|BitmapImpl.Bitmap.BitBSet#requires| |word#0@@0| |b#0@@2|)))) :qid |BitmapIm.30:30| :skolemid |898| :pattern ( (|BitmapImpl.Bitmap.BitBSet#requires| |word#0@@0| |b#0@@2|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.in_set_uint64) LayerTypeType))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|word#0@@1| Int) (|b#0@@3| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.BitBSet#canCall| |word#0@@1| |b#0@@3|) (and (not (= 4 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@1|) (< |word#0@@1| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@3|) (< |b#0@@3| 18446744073709551616))) (< |b#0@@3| 64)))) (and (|BitsetLemmas.__default.in__set__uint64#canCall| |b#0@@3| |word#0@@1|) (and (=> (BitmapImpl.Bitmap.BitBSet |word#0@@1| |b#0@@3|) (BitsetLemmas.__default.in__set__uint64 StartFuel_BitsetLemmas._default.in_set_uint64 |b#0@@3| |word#0@@1|)) (=> (BitsetLemmas.__default.in__set__uint64 StartFuel_BitsetLemmas._default.in_set_uint64 |b#0@@3| |word#0@@1|) (BitmapImpl.Bitmap.BitBSet |word#0@@1| |b#0@@3|))))) :qid |BitmapIm.30:30| :skolemid |899| :pattern ( (BitmapImpl.Bitmap.BitBSet |word#0@@1| |b#0@@3|)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|word#0@@2| Int) (|b#0@@4| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.BitBSet#canCall| (LitInt |word#0@@2|) (LitInt |b#0@@4|)) (and (not (= 4 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@2|) (< |word#0@@2| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@4|) (< |b#0@@4| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |b#0@@4| 64))))))) (and (|BitsetLemmas.__default.in__set__uint64#canCall| (LitInt |b#0@@4|) (LitInt |word#0@@2|)) (and (=> (BitmapImpl.Bitmap.BitBSet (LitInt |word#0@@2|) (LitInt |b#0@@4|)) (BitsetLemmas.__default.in__set__uint64 StartFuel_BitsetLemmas._default.in_set_uint64 (LitInt |b#0@@4|) (LitInt |word#0@@2|))) (=> (BitsetLemmas.__default.in__set__uint64 StartFuel_BitsetLemmas._default.in_set_uint64 (LitInt |b#0@@4|) (LitInt |word#0@@2|)) (BitmapImpl.Bitmap.BitBSet (LitInt |word#0@@2|) (LitInt |b#0@@4|)))))) :qid |BitmapIm.30:30| :weight 3 :skolemid |900| :pattern ( (BitmapImpl.Bitmap.BitBSet (LitInt |word#0@@2|) (LitInt |b#0@@4|))) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|bitsSeq#0| T@U) (|i#0| Int) (|b#0@@5| Int) ) (!  (=> (and (= (type |bitsSeq#0|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtIB#canCall| |bitsSeq#0| |i#0| |b#0@@5|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |bitsSeq#0| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |i#0|)) (and (<= (LitInt 0) |b#0@@5|) (< |b#0@@5| 18446744073709551616))) (and (< |i#0| (|Seq#Length| |bitsSeq#0|)) (< |b#0@@5| 64)))))) true) :qid |BitmapIm.45:34| :skolemid |905| :pattern ( (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0| |i#0| |b#0@@5|)) ))))
(assert (forall ((|bitsSeq#0@@0| T@U) (|i#0@@0| Int) (|b#0@@6| Int) ) (!  (=> (= (type |bitsSeq#0@@0|) (SeqType BoxType)) (=> (and (and ($Is |bitsSeq#0@@0| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |i#0@@0|)) (and (<= (LitInt 0) |b#0@@6|) (< |b#0@@6| 18446744073709551616))) (and (=> (|BitmapImpl.Bitmap.BitsSetAtIB#requires| |bitsSeq#0@@0| |i#0@@0| |b#0@@6|) (and (< |i#0@@0| (|Seq#Length| |bitsSeq#0@@0|)) (< |b#0@@6| 64))) (=> (and (< |i#0@@0| (|Seq#Length| |bitsSeq#0@@0|)) (< |b#0@@6| 64)) (|BitmapImpl.Bitmap.BitsSetAtIB#requires| |bitsSeq#0@@0| |i#0@@0| |b#0@@6|))))) :qid |BitmapIm.45:34| :skolemid |906| :pattern ( (|BitmapImpl.Bitmap.BitsSetAtIB#requires| |bitsSeq#0@@0| |i#0@@0| |b#0@@6|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|bitsSeq#0@@1| T@U) (|i#0@@1| Int) (|b#0@@7| Int) ) (!  (=> (and (= (type |bitsSeq#0@@1|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtIB#canCall| |bitsSeq#0@@1| |i#0@@1| |b#0@@7|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |bitsSeq#0@@1| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |i#0@@1|)) (and (<= (LitInt 0) |b#0@@7|) (< |b#0@@7| 18446744073709551616))) (and (< |i#0@@1| (|Seq#Length| |bitsSeq#0@@1|)) (< |b#0@@7| 64)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (|BitmapImpl.Bitmap.BitBSet#canCall| (U_2_int ($Unbox intType (|Seq#Index| |bitsSeq#0@@1| |i#0@@1|))) |b#0@@7|)) (and (=> (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0@@1| |i#0@@1| |b#0@@7|) (and true (BitmapImpl.Bitmap.BitBSet (U_2_int ($Unbox intType (|Seq#Index| |bitsSeq#0@@1| |i#0@@1|))) |b#0@@7|))) (=> (and true (BitmapImpl.Bitmap.BitBSet (U_2_int ($Unbox intType (|Seq#Index| |bitsSeq#0@@1| |i#0@@1|))) |b#0@@7|)) (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0@@1| |i#0@@1| |b#0@@7|))))) :qid |BitmapIm.45:34| :skolemid |907| :pattern ( (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0@@1| |i#0@@1| |b#0@@7|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|bitsSeq#0@@2| T@U) (|i#0@@2| Int) (|b#0@@8| Int) ) (!  (=> (and (= (type |bitsSeq#0@@2|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtIB#canCall| (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|) (LitInt |b#0@@8|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |bitsSeq#0@@2| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |i#0@@2|)) (and (<= (LitInt 0) |b#0@@8|) (< |b#0@@8| 18446744073709551616))) (and (< |i#0@@2| (|Seq#Length| (Lit |bitsSeq#0@@2|))) (U_2_bool (Lit (bool_2_U (< |b#0@@8| 64))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (|BitmapImpl.Bitmap.BitBSet#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|)))) (LitInt |b#0@@8|))) (and (=> (BitmapImpl.Bitmap.BitsSetAtIB (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|) (LitInt |b#0@@8|)) (and true (BitmapImpl.Bitmap.BitBSet (U_2_int ($Unbox intType (|Seq#Index| (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|)))) (LitInt |b#0@@8|)))) (=> (and true (BitmapImpl.Bitmap.BitBSet (U_2_int ($Unbox intType (|Seq#Index| (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|)))) (LitInt |b#0@@8|))) (BitmapImpl.Bitmap.BitsSetAtIB (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|) (LitInt |b#0@@8|)))))) :qid |BitmapIm.45:34| :weight 3 :skolemid |908| :pattern ( (BitmapImpl.Bitmap.BitsSetAtIB (Lit |bitsSeq#0@@2|) (LitInt |i#0@@2|) (LitInt |b#0@@8|))) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|bitsSeq#0@@3| T@U) (|c#0@@3| Int) ) (!  (=> (and (= (type |bitsSeq#0@@3|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtC#canCall| |bitsSeq#0@@3| |c#0@@3|) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |bitsSeq#0@@3| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |c#0@@3|)) (< |c#0@@3| (Mul (LitInt 64) (|Seq#Length| |bitsSeq#0@@3|))))))) true) :qid |BitmapIm.52:33| :skolemid |910| :pattern ( (BitmapImpl.Bitmap.BitsSetAtC |bitsSeq#0@@3| |c#0@@3|)) ))))
(assert (forall ((|bitsSeq#0@@4| T@U) (|c#0@@4| Int) ) (!  (=> (= (type |bitsSeq#0@@4|) (SeqType BoxType)) (=> (and ($Is |bitsSeq#0@@4| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |c#0@@4|)) (and (=> (|BitmapImpl.Bitmap.BitsSetAtC#requires| |bitsSeq#0@@4| |c#0@@4|) (< |c#0@@4| (Mul (LitInt 64) (|Seq#Length| |bitsSeq#0@@4|)))) (=> (< |c#0@@4| (Mul (LitInt 64) (|Seq#Length| |bitsSeq#0@@4|))) (|BitmapImpl.Bitmap.BitsSetAtC#requires| |bitsSeq#0@@4| |c#0@@4|))))) :qid |BitmapIm.52:33| :skolemid |911| :pattern ( (|BitmapImpl.Bitmap.BitsSetAtC#requires| |bitsSeq#0@@4| |c#0@@4|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|bitsSeq#0@@5| T@U) (|c#0@@5| Int) ) (!  (=> (and (= (type |bitsSeq#0@@5|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtC#canCall| |bitsSeq#0@@5| |c#0@@5|) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |bitsSeq#0@@5| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |c#0@@5|)) (< |c#0@@5| (Mul (LitInt 64) (|Seq#Length| |bitsSeq#0@@5|))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (|BitmapImpl.Bitmap.BitsSetAtIB#canCall| |bitsSeq#0@@5| (Div |c#0@@5| (LitInt 64)) (Mod |c#0@@5| (LitInt 64)))) (and (=> (BitmapImpl.Bitmap.BitsSetAtC |bitsSeq#0@@5| |c#0@@5|) (and true (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0@@5| (Div |c#0@@5| (LitInt 64)) (Mod |c#0@@5| (LitInt 64))))) (=> (and true (BitmapImpl.Bitmap.BitsSetAtIB |bitsSeq#0@@5| (Div |c#0@@5| (LitInt 64)) (Mod |c#0@@5| (LitInt 64)))) (BitmapImpl.Bitmap.BitsSetAtC |bitsSeq#0@@5| |c#0@@5|))))) :qid |BitmapIm.52:33| :skolemid |912| :pattern ( (BitmapImpl.Bitmap.BitsSetAtC |bitsSeq#0@@5| |c#0@@5|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|bitsSeq#0@@6| T@U) (|c#0@@6| Int) ) (!  (=> (and (= (type |bitsSeq#0@@6|) (SeqType BoxType)) (or (|BitmapImpl.Bitmap.BitsSetAtC#canCall| (Lit |bitsSeq#0@@6|) (LitInt |c#0@@6|)) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |bitsSeq#0@@6| (TSeq Tclass.NativeTypes.uint64)) (<= (LitInt 0) |c#0@@6|)) (< |c#0@@6| (Mul (LitInt 64) (|Seq#Length| (Lit |bitsSeq#0@@6|)))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (|BitmapImpl.Bitmap.BitsSetAtIB#canCall| (Lit |bitsSeq#0@@6|) (LitInt (Div |c#0@@6| (LitInt 64))) (LitInt (Mod |c#0@@6| (LitInt 64))))) (and (=> (BitmapImpl.Bitmap.BitsSetAtC (Lit |bitsSeq#0@@6|) (LitInt |c#0@@6|)) (U_2_bool (Lit (bool_2_U  (and true (BitmapImpl.Bitmap.BitsSetAtIB (Lit |bitsSeq#0@@6|) (LitInt (Div |c#0@@6| (LitInt 64))) (LitInt (Mod |c#0@@6| (LitInt 64))))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (BitmapImpl.Bitmap.BitsSetAtIB (Lit |bitsSeq#0@@6|) (LitInt (Div |c#0@@6| (LitInt 64))) (LitInt (Mod |c#0@@6| (LitInt 64)))))))) (BitmapImpl.Bitmap.BitsSetAtC (Lit |bitsSeq#0@@6|) (LitInt |c#0@@6|)))))) :qid |BitmapIm.52:33| :weight 3 :skolemid |913| :pattern ( (BitmapImpl.Bitmap.BitsSetAtC (Lit |bitsSeq#0@@6|) (LitInt |c#0@@6|))) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|i#0@@3| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.ITimes64WithinUint64#canCall| |i#0@@3|) (and (not (= 9 $FunctionContextHeight)) (<= (LitInt 0) |i#0@@3|))) true) :qid |BitmapIm.58:43| :skolemid |915| :pattern ( (BitmapImpl.Bitmap.ITimes64WithinUint64 |i#0@@3|)) ))))
(assert (forall ((|i#0@@4| Int) ) (!  (=> (<= (LitInt 0) |i#0@@4|) (and (=> (|BitmapImpl.Bitmap.ITimes64WithinUint64#requires| |i#0@@4|) true) (=> true (|BitmapImpl.Bitmap.ITimes64WithinUint64#requires| |i#0@@4|)))) :qid |BitmapIm.58:43| :skolemid |916| :pattern ( (|BitmapImpl.Bitmap.ITimes64WithinUint64#requires| |i#0@@4|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|i#0@@5| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.ITimes64WithinUint64#canCall| |i#0@@5|) (and (not (= 9 $FunctionContextHeight)) (<= (LitInt 0) |i#0@@5|))) (and (=> (BitmapImpl.Bitmap.ITimes64WithinUint64 |i#0@@5|) (and true (< (Mul |i#0@@5| (LitInt 64)) 18446744073709551616))) (=> (and true (< (Mul |i#0@@5| (LitInt 64)) 18446744073709551616)) (BitmapImpl.Bitmap.ITimes64WithinUint64 |i#0@@5|)))) :qid |BitmapIm.58:43| :skolemid |917| :pattern ( (BitmapImpl.Bitmap.ITimes64WithinUint64 |i#0@@5|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|i#0@@6| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.ITimes64WithinUint64#canCall| (LitInt |i#0@@6|)) (and (not (= 9 $FunctionContextHeight)) (<= (LitInt 0) |i#0@@6|))) (and (=> (BitmapImpl.Bitmap.ITimes64WithinUint64 (LitInt |i#0@@6|)) (U_2_bool (Lit (bool_2_U  (and true (< (Mul (LitInt |i#0@@6|) (LitInt 64)) 18446744073709551616)))))) (=> (U_2_bool (Lit (bool_2_U  (and true (< (Mul (LitInt |i#0@@6|) (LitInt 64)) 18446744073709551616))))) (BitmapImpl.Bitmap.ITimes64WithinUint64 (LitInt |i#0@@6|))))) :qid |BitmapIm.58:43| :weight 3 :skolemid |918| :pattern ( (BitmapImpl.Bitmap.ITimes64WithinUint64 (LitInt |i#0@@6|))) ))))
(assert (forall (($h0 T@U) ($h1 T@U) (this T@U) ) (!  (=> (and (and (= (type $h0) (MapType0Type refType MapType1Type)) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type this) refType)) (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (not (= this null)) ($Is this Tclass.BitmapImpl.Bitmap))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@15 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@15) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@15 null)) (or (= $o@@15 this) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0 this) BitmapImpl.Bitmap.Repr) ($Box $o@@15)))))) (= (MapType1Select (MapType0Select $h0 $o@@15) $f) (MapType1Select (MapType0Select $h1 $o@@15) $f)))) :qid |unknown.0:0| :skolemid |919| :no-pattern (type $o@@15) :no-pattern (type $f) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) )) (and (=> (BitmapImpl.Bitmap.ReprInv $h0 this) (BitmapImpl.Bitmap.ReprInv $h1 this)) (=> (BitmapImpl.Bitmap.ReprInv $h1 this) (BitmapImpl.Bitmap.ReprInv $h0 this)))))) :qid |DafnyPre.521:12| :skolemid |920| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (BitmapImpl.Bitmap.ReprInv $h1 this)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall (($Heap T@U) (this@@0 T@U) ) (!  (=> (and (and (= (type $Heap) (MapType0Type refType MapType1Type)) (= (type this@@0) refType)) (or (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap this@@0) (and (not (= 12 $FunctionContextHeight)) (and ($IsGoodHeap $Heap) (and (not (= this@@0 null)) (and ($Is this@@0 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@0 Tclass.BitmapImpl.Bitmap $Heap))))))) true) :qid |BitmapIm.63:15| :skolemid |921| :pattern ( (BitmapImpl.Bitmap.ReprInv $Heap this@@0)) ))))
(assert (forall (($Heap@@0 T@U) (this@@1 T@U) ) (!  (=> (and (and (= (type $Heap@@0) (MapType0Type refType MapType1Type)) (= (type this@@1) refType)) (and ($IsGoodHeap $Heap@@0) (and (not (= this@@1 null)) (and ($Is this@@1 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@1 Tclass.BitmapImpl.Bitmap $Heap@@0))))) (and (=> (|BitmapImpl.Bitmap.ReprInv#requires| $Heap@@0 this@@1) true) (=> true (|BitmapImpl.Bitmap.ReprInv#requires| $Heap@@0 this@@1)))) :qid |BitmapIm.63:15| :skolemid |922| :pattern ( (|BitmapImpl.Bitmap.ReprInv#requires| $Heap@@0 this@@1)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall (($Heap@@1 T@U) (this@@2 T@U) ) (!  (=> (and (and (= (type $Heap@@1) (MapType0Type refType MapType1Type)) (= (type this@@2) refType)) (or (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@1 this@@2) (and (not (= 12 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@1) (and (not (= this@@2 null)) (and ($Is this@@2 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@2 Tclass.BitmapImpl.Bitmap $Heap@@1))))))) (and (=> (BitmapImpl.Bitmap.ReprInv $Heap@@1 this@@2) (and true (|Set#Equal| (MapType1Select (MapType0Select $Heap@@1 this@@2) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@2)) ($Box (MapType1Select (MapType0Select $Heap@@1 this@@2) BitmapImpl.Bitmap.bits)))))) (=> (and true (|Set#Equal| (MapType1Select (MapType0Select $Heap@@1 this@@2) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@2)) ($Box (MapType1Select (MapType0Select $Heap@@1 this@@2) BitmapImpl.Bitmap.bits))))) (BitmapImpl.Bitmap.ReprInv $Heap@@1 this@@2)))) :qid |BitmapIm.63:15| :skolemid |923| :pattern ( (BitmapImpl.Bitmap.ReprInv $Heap@@1 this@@2)) ))))
(assert (forall (($h0@@0 T@U) ($h1@@0 T@U) (this@@3 T@U) ) (!  (=> (and (and (= (type $h0@@0) (MapType0Type refType MapType1Type)) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type this@@3) refType)) (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (not (= this@@3 null)) ($Is this@@3 Tclass.BitmapImpl.Bitmap))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@16 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@16 null)) (or (= $o@@16 this@@3) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@0 this@@3) BitmapImpl.Bitmap.Repr) ($Box $o@@16)))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@16) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@16) $f@@0)))) :qid |unknown.0:0| :skolemid |924| :no-pattern (type $o@@16) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) )) (and (=> (BitmapImpl.Bitmap.Inv $h0@@0 this@@3) (BitmapImpl.Bitmap.Inv $h1@@0 this@@3)) (=> (BitmapImpl.Bitmap.Inv $h1@@0 this@@3) (BitmapImpl.Bitmap.Inv $h0@@0 this@@3)))))) :qid |DafnyPre.521:12| :skolemid |925| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (BitmapImpl.Bitmap.Inv $h1@@0 this@@3)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($Heap@@2 T@U) (this@@4 T@U) ) (!  (=> (and (and (and (= (type $Heap@@2) (MapType0Type refType MapType1Type)) (= (type this@@4) refType)) (or (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@2 this@@4) (and (not (= 13 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@2) (and (not (= this@@4 null)) (and ($Is this@@4 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@4 Tclass.BitmapImpl.Bitmap $Heap@@2))))))) (BitmapImpl.Bitmap.Inv $Heap@@2 this@@4)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@2 this@@4) BitmapImpl.Bitmap.Repr) ($Box this@@4)))) :qid |BitmapIm.69:25| :skolemid |926| :pattern ( (BitmapImpl.Bitmap.Inv $Heap@@2 this@@4)) ))))
(assert (forall (($Heap@@3 T@U) (this@@5 T@U) ) (!  (=> (and (and (= (type $Heap@@3) (MapType0Type refType MapType1Type)) (= (type this@@5) refType)) (and ($IsGoodHeap $Heap@@3) (and (not (= this@@5 null)) (and ($Is this@@5 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@5 Tclass.BitmapImpl.Bitmap $Heap@@3))))) (and (=> (|BitmapImpl.Bitmap.Inv#requires| $Heap@@3 this@@5) true) (=> true (|BitmapImpl.Bitmap.Inv#requires| $Heap@@3 this@@5)))) :qid |BitmapIm.69:25| :skolemid |927| :pattern ( (|BitmapImpl.Bitmap.Inv#requires| $Heap@@3 this@@5)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($Heap@@4 T@U) (this@@6 T@U) ) (!  (=> (and (and (= (type $Heap@@4) (MapType0Type refType MapType1Type)) (= (type this@@6) refType)) (or (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@4 this@@6) (and (not (= 13 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@4) (and (not (= this@@6 null)) (and ($Is this@@6 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@6 Tclass.BitmapImpl.Bitmap $Heap@@4))))))) (and (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@4 this@@6) (and (=> (BitmapImpl.Bitmap.Inv $Heap@@4 this@@6) (and (BitmapImpl.Bitmap.ReprInv $Heap@@4 this@@6) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@4 this@@6) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128))))) (=> (and (BitmapImpl.Bitmap.ReprInv $Heap@@4 this@@6) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@4 this@@6) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))) (BitmapImpl.Bitmap.Inv $Heap@@4 this@@6))))) :qid |BitmapIm.69:25| :skolemid |928| :pattern ( (BitmapImpl.Bitmap.Inv $Heap@@4 this@@6)) ))))
(assert (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@46 Int) ) (! (= (type (BitmapImpl.Bitmap.IPrefix arg0@@187 arg1@@90 arg2@@46)) (SeqType BoxType)) :qid |funType:BitmapImpl.Bitmap.IPrefix| :pattern ( (BitmapImpl.Bitmap.IPrefix arg0@@187 arg1@@90 arg2@@46)) )))
(assert (forall (($ly T@U) (|bits#0| T@U) (|i#0@@7| Int) ) (!  (=> (and (= (type $ly) LayerTypeType) (= (type |bits#0|) (SeqType BoxType))) (= (BitmapImpl.Bitmap.IPrefix ($LS $ly) |bits#0| |i#0@@7|) (BitmapImpl.Bitmap.IPrefix $ly |bits#0| |i#0@@7|))) :qid |BitmapIm.77:31| :skolemid |930| :pattern ( (BitmapImpl.Bitmap.IPrefix ($LS $ly) |bits#0| |i#0@@7|)) )))
(assert  (and (forall ((arg0@@188 T@U) ) (! (= (type (AsFuelBottom arg0@@188)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@188)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|bits#0@@0| T@U) (|i#0@@8| Int) ) (!  (=> (and (= (type $ly@@0) LayerTypeType) (= (type |bits#0@@0|) (SeqType BoxType))) (= (BitmapImpl.Bitmap.IPrefix $ly@@0 |bits#0@@0| |i#0@@8|) (BitmapImpl.Bitmap.IPrefix $LZ |bits#0@@0| |i#0@@8|))) :qid |BitmapIm.77:31| :skolemid |931| :pattern ( (BitmapImpl.Bitmap.IPrefix (AsFuelBottom $ly@@0) |bits#0@@0| |i#0@@8|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@1 T@U) (|bits#0@@1| T@U) (|i#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@1) LayerTypeType) (= (type |bits#0@@1|) (SeqType BoxType))) (or (|BitmapImpl.Bitmap.IPrefix#canCall| |bits#0@@1| |i#0@@9|) (and (not (= 11 $FunctionContextHeight)) (and ($Is |bits#0@@1| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |i#0@@9|) (<= |i#0@@9| (Mul (LitInt 64) (|Seq#Length| |bits#0@@1|)))))))) (and (and (= (|Seq#Length| (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|)) |i#0@@9|) (forall ((|j#0| Int) ) (!  (=> (and (<= (LitInt 0) |j#0|) (< |j#0| |i#0@@9|)) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|) |j#0|))) (BitmapImpl.Bitmap.BitsSetAtC |bits#0@@1| |j#0|)) (=> (BitmapImpl.Bitmap.BitsSetAtC |bits#0@@1| |j#0|) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|) |j#0|)))))) :qid |BitmapIm.80:20| :skolemid |932| :pattern ( (BitmapImpl.Bitmap.BitsSetAtC |bits#0@@1| |j#0|)) :pattern ( ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|) |j#0|))) ))) ($Is (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|) (TSeq TBool)))) :qid |BitmapIm.77:31| :skolemid |933| :pattern ( (BitmapImpl.Bitmap.IPrefix $ly@@1 |bits#0@@1| |i#0@@9|)) ))))
(assert (forall (($ly@@2 T@U) (|bits#0@@2| T@U) (|i#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@2) LayerTypeType) (= (type |bits#0@@2|) (SeqType BoxType))) ($Is |bits#0@@2| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|BitmapImpl.Bitmap.IPrefix#requires| $ly@@2 |bits#0@@2| |i#0@@10|) (and (<= (LitInt 0) |i#0@@10|) (<= |i#0@@10| (Mul (LitInt 64) (|Seq#Length| |bits#0@@2|))))) (=> (and (<= (LitInt 0) |i#0@@10|) (<= |i#0@@10| (Mul (LitInt 64) (|Seq#Length| |bits#0@@2|)))) (|BitmapImpl.Bitmap.IPrefix#requires| $ly@@2 |bits#0@@2| |i#0@@10|)))) :qid |BitmapIm.77:31| :skolemid |934| :pattern ( (|BitmapImpl.Bitmap.IPrefix#requires| $ly@@2 |bits#0@@2| |i#0@@10|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@3 T@U) (|bits#0@@3| T@U) (|i#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@3) LayerTypeType) (= (type |bits#0@@3|) (SeqType BoxType))) (or (|BitmapImpl.Bitmap.IPrefix#canCall| |bits#0@@3| |i#0@@11|) (and (not (= 11 $FunctionContextHeight)) (and ($Is |bits#0@@3| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |i#0@@11|) (<= |i#0@@11| (Mul (LitInt 64) (|Seq#Length| |bits#0@@3|)))))))) (and (=> (not (= |i#0@@11| (LitInt 0))) (and (|BitmapImpl.Bitmap.IPrefix#canCall| |bits#0@@3| (- |i#0@@11| 1)) (|BitmapImpl.Bitmap.BitsSetAtC#canCall| |bits#0@@3| (- |i#0@@11| 1)))) (= (BitmapImpl.Bitmap.IPrefix ($LS $ly@@3) |bits#0@@3| |i#0@@11|) (ite (= |i#0@@11| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BitmapImpl.Bitmap.IPrefix $ly@@3 |bits#0@@3| (- |i#0@@11| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (BitmapImpl.Bitmap.BitsSetAtC |bits#0@@3| (- |i#0@@11| 1)))))))))) :qid |BitmapIm.77:31| :skolemid |935| :pattern ( (BitmapImpl.Bitmap.IPrefix ($LS $ly@@3) |bits#0@@3| |i#0@@11|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@4 T@U) (|bits#0@@4| T@U) (|i#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@4) LayerTypeType) (= (type |bits#0@@4|) (SeqType BoxType))) (or (|BitmapImpl.Bitmap.IPrefix#canCall| (Lit |bits#0@@4|) (LitInt |i#0@@12|)) (and (not (= 11 $FunctionContextHeight)) (and ($Is |bits#0@@4| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) (LitInt |i#0@@12|)) (<= (LitInt |i#0@@12|) (Mul (LitInt 64) (|Seq#Length| (Lit |bits#0@@4|))))))))) (and (=> (not (= (LitInt |i#0@@12|) (LitInt 0))) (and (|BitmapImpl.Bitmap.IPrefix#canCall| (Lit |bits#0@@4|) (LitInt (- |i#0@@12| 1))) (|BitmapImpl.Bitmap.BitsSetAtC#canCall| (Lit |bits#0@@4|) (LitInt (- |i#0@@12| 1))))) (= (BitmapImpl.Bitmap.IPrefix ($LS $ly@@4) (Lit |bits#0@@4|) (LitInt |i#0@@12|)) (ite (= (LitInt |i#0@@12|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BitmapImpl.Bitmap.IPrefix ($LS $ly@@4) (Lit |bits#0@@4|) (LitInt (- |i#0@@12| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U (BitmapImpl.Bitmap.BitsSetAtC (Lit |bits#0@@4|) (LitInt (- |i#0@@12| 1)))))))))))) :qid |BitmapIm.77:31| :weight 3 :skolemid |936| :pattern ( (BitmapImpl.Bitmap.IPrefix ($LS $ly@@4) (Lit |bits#0@@4|) (LitInt |i#0@@12|))) ))))
(assert (forall ((arg0@@189 T@U) (arg1@@91 T@U) ) (! (= (type (BitmapImpl.Bitmap.I arg0@@189 arg1@@91)) (SeqType BoxType)) :qid |funType:BitmapImpl.Bitmap.I| :pattern ( (BitmapImpl.Bitmap.I arg0@@189 arg1@@91)) )))
(assert (forall (($h0@@1 T@U) ($h1@@1 T@U) (this@@7 T@U) ) (!  (=> (and (and (= (type $h0@@1) (MapType0Type refType MapType1Type)) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type this@@7) refType)) (=> (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (and (not (= this@@7 null)) ($Is this@@7 Tclass.BitmapImpl.Bitmap))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1))) (=> (forall (($o@@17 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@17) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@17 null)) (or (= $o@@17 this@@7) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@1 this@@7) BitmapImpl.Bitmap.Repr) ($Box $o@@17)))))) (= (MapType1Select (MapType0Select $h0@@1 $o@@17) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@17) $f@@1)))) :qid |unknown.0:0| :skolemid |941| :no-pattern (type $o@@17) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@17) :no-pattern (U_2_bool $o@@17) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) )) (= (BitmapImpl.Bitmap.I $h0@@1 this@@7) (BitmapImpl.Bitmap.I $h1@@1 this@@7))))) :qid |DafnyPre.521:12| :skolemid |942| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (BitmapImpl.Bitmap.I $h1@@1 this@@7)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($Heap@@5 T@U) (this@@8 T@U) ) (!  (=> (and (and (= (type $Heap@@5) (MapType0Type refType MapType1Type)) (= (type this@@8) refType)) (or (|BitmapImpl.Bitmap.I#canCall| $Heap@@5 this@@8) (and (not (= 14 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@5) (and (not (= this@@8 null)) (and ($Is this@@8 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@8 Tclass.BitmapImpl.Bitmap $Heap@@5)))) (BitmapImpl.Bitmap.Inv $Heap@@5 this@@8))))) ($Is (BitmapImpl.Bitmap.I $Heap@@5 this@@8) (TSeq TBool))) :qid |BitmapIm.85:24| :skolemid |943| :pattern ( (BitmapImpl.Bitmap.I $Heap@@5 this@@8)) ))))
(assert (forall (($Heap@@6 T@U) (this@@9 T@U) ) (!  (=> (and (and (= (type $Heap@@6) (MapType0Type refType MapType1Type)) (= (type this@@9) refType)) (and ($IsGoodHeap $Heap@@6) (and (not (= this@@9 null)) (and ($Is this@@9 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@9 Tclass.BitmapImpl.Bitmap $Heap@@6))))) (and (=> (|BitmapImpl.Bitmap.I#requires| $Heap@@6 this@@9) (BitmapImpl.Bitmap.Inv $Heap@@6 this@@9)) (=> (BitmapImpl.Bitmap.Inv $Heap@@6 this@@9) (|BitmapImpl.Bitmap.I#requires| $Heap@@6 this@@9)))) :qid |BitmapIm.85:24| :skolemid |944| :pattern ( (|BitmapImpl.Bitmap.I#requires| $Heap@@6 this@@9)) )))
(assert (= (type StartFuel_BitmapImpl.Bitmap.IPrefix) LayerTypeType))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($Heap@@7 T@U) (this@@10 T@U) ) (!  (=> (and (and (= (type $Heap@@7) (MapType0Type refType MapType1Type)) (= (type this@@10) refType)) (or (|BitmapImpl.Bitmap.I#canCall| $Heap@@7 this@@10) (and (not (= 14 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@7) (and (not (= this@@10 null)) (and ($Is this@@10 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@10 Tclass.BitmapImpl.Bitmap $Heap@@7)))) (BitmapImpl.Bitmap.Inv $Heap@@7 this@@10))))) (and (|BitmapImpl.Bitmap.IPrefix#canCall| (|Seq#FromArray| $Heap@@7 (MapType1Select (MapType0Select $Heap@@7 this@@10) BitmapImpl.Bitmap.bits)) (Mul (LitInt 64) (_System.array.Length (MapType1Select (MapType0Select $Heap@@7 this@@10) BitmapImpl.Bitmap.bits)))) (= (BitmapImpl.Bitmap.I $Heap@@7 this@@10) (BitmapImpl.Bitmap.IPrefix StartFuel_BitmapImpl.Bitmap.IPrefix (|Seq#FromArray| $Heap@@7 (MapType1Select (MapType0Select $Heap@@7 this@@10) BitmapImpl.Bitmap.bits)) (Mul (LitInt 64) (_System.array.Length (MapType1Select (MapType0Select $Heap@@7 this@@10) BitmapImpl.Bitmap.bits))))))) :qid |BitmapIm.85:24| :skolemid |945| :pattern ( (BitmapImpl.Bitmap.I $Heap@@7 this@@10)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|word#0@@3| Int) (|b#0@@9| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.SetBit#canCall| |word#0@@3| |b#0@@9|) (and (not (= 16 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@3|) (< |word#0@@3| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@9|) (< |b#0@@9| 18446744073709551616))) (< |b#0@@9| 64)))) (and (<= (LitInt 0) (BitmapImpl.Bitmap.SetBit |word#0@@3| |b#0@@9|)) (< (BitmapImpl.Bitmap.SetBit |word#0@@3| |b#0@@9|) 18446744073709551616))) :qid |BitmapIm.118:35| :skolemid |959| :pattern ( (BitmapImpl.Bitmap.SetBit |word#0@@3| |b#0@@9|)) ))))
(assert (forall ((|word#0@@4| Int) (|b#0@@10| Int) ) (!  (=> (and (and (<= (LitInt 0) |word#0@@4|) (< |word#0@@4| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@10|) (< |b#0@@10| 18446744073709551616))) (and (=> (|BitmapImpl.Bitmap.SetBit#requires| |word#0@@4| |b#0@@10|) (< |b#0@@10| 64)) (=> (< |b#0@@10| 64) (|BitmapImpl.Bitmap.SetBit#requires| |word#0@@4| |b#0@@10|)))) :qid |BitmapIm.118:35| :skolemid |960| :pattern ( (|BitmapImpl.Bitmap.SetBit#requires| |word#0@@4| |b#0@@10|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.set_bit_to_1_uint64) LayerTypeType))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|word#0@@5| Int) (|b#0@@11| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.SetBit#canCall| |word#0@@5| |b#0@@11|) (and (not (= 16 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@5|) (< |word#0@@5| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@11|) (< |b#0@@11| 18446744073709551616))) (< |b#0@@11| 64)))) (and (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| |word#0@@5| |b#0@@11|) (= (BitmapImpl.Bitmap.SetBit |word#0@@5| |b#0@@11|) (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuel_BitsetLemmas._default.set_bit_to_1_uint64 |word#0@@5| |b#0@@11|)))) :qid |BitmapIm.118:35| :skolemid |961| :pattern ( (BitmapImpl.Bitmap.SetBit |word#0@@5| |b#0@@11|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|word#0@@6| Int) (|b#0@@12| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.SetBit#canCall| (LitInt |word#0@@6|) (LitInt |b#0@@12|)) (and (not (= 16 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@6|) (< |word#0@@6| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@12|) (< |b#0@@12| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |b#0@@12| 64))))))) (and (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| (LitInt |word#0@@6|) (LitInt |b#0@@12|)) (= (BitmapImpl.Bitmap.SetBit (LitInt |word#0@@6|) (LitInt |b#0@@12|)) (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuel_BitsetLemmas._default.set_bit_to_1_uint64 (LitInt |word#0@@6|) (LitInt |b#0@@12|))))) :qid |BitmapIm.118:35| :weight 3 :skolemid |962| :pattern ( (BitmapImpl.Bitmap.SetBit (LitInt |word#0@@6|) (LitInt |b#0@@12|))) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|word#0@@7| Int) (|b#0@@13| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.UnsetBit#canCall| |word#0@@7| |b#0@@13|) (and (not (= 18 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@7|) (< |word#0@@7| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@13|) (< |b#0@@13| 18446744073709551616))) (< |b#0@@13| 64)))) (and (<= (LitInt 0) (BitmapImpl.Bitmap.UnsetBit |word#0@@7| |b#0@@13|)) (< (BitmapImpl.Bitmap.UnsetBit |word#0@@7| |b#0@@13|) 18446744073709551616))) :qid |BitmapIm.162:37| :skolemid |972| :pattern ( (BitmapImpl.Bitmap.UnsetBit |word#0@@7| |b#0@@13|)) ))))
(assert (forall ((|word#0@@8| Int) (|b#0@@14| Int) ) (!  (=> (and (and (<= (LitInt 0) |word#0@@8|) (< |word#0@@8| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@14|) (< |b#0@@14| 18446744073709551616))) (and (=> (|BitmapImpl.Bitmap.UnsetBit#requires| |word#0@@8| |b#0@@14|) (< |b#0@@14| 64)) (=> (< |b#0@@14| 64) (|BitmapImpl.Bitmap.UnsetBit#requires| |word#0@@8| |b#0@@14|)))) :qid |BitmapIm.162:37| :skolemid |973| :pattern ( (|BitmapImpl.Bitmap.UnsetBit#requires| |word#0@@8| |b#0@@14|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.set_bit_to_0_uint64) LayerTypeType))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|word#0@@9| Int) (|b#0@@15| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.UnsetBit#canCall| |word#0@@9| |b#0@@15|) (and (not (= 18 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@9|) (< |word#0@@9| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@15|) (< |b#0@@15| 18446744073709551616))) (< |b#0@@15| 64)))) (and (|BitsetLemmas.__default.set__bit__to__0__uint64#canCall| |word#0@@9| |b#0@@15|) (= (BitmapImpl.Bitmap.UnsetBit |word#0@@9| |b#0@@15|) (BitsetLemmas.__default.set__bit__to__0__uint64 StartFuel_BitsetLemmas._default.set_bit_to_0_uint64 |word#0@@9| |b#0@@15|)))) :qid |BitmapIm.162:37| :skolemid |974| :pattern ( (BitmapImpl.Bitmap.UnsetBit |word#0@@9| |b#0@@15|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|word#0@@10| Int) (|b#0@@16| Int) ) (!  (=> (or (|BitmapImpl.Bitmap.UnsetBit#canCall| (LitInt |word#0@@10|) (LitInt |b#0@@16|)) (and (not (= 18 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |word#0@@10|) (< |word#0@@10| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@16|) (< |b#0@@16| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |b#0@@16| 64))))))) (and (|BitsetLemmas.__default.set__bit__to__0__uint64#canCall| (LitInt |word#0@@10|) (LitInt |b#0@@16|)) (= (BitmapImpl.Bitmap.UnsetBit (LitInt |word#0@@10|) (LitInt |b#0@@16|)) (BitsetLemmas.__default.set__bit__to__0__uint64 StartFuel_BitsetLemmas._default.set_bit_to_0_uint64 (LitInt |word#0@@10|) (LitInt |b#0@@16|))))) :qid |BitmapIm.162:37| :weight 3 :skolemid |975| :pattern ( (BitmapImpl.Bitmap.UnsetBit (LitInt |word#0@@10|) (LitInt |b#0@@16|))) ))))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass.Options.Option arg0@@190)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@190)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1011| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@191)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@191)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1012| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@72 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@72) BoxType)) ($IsBox bx@@72 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@72)) bx@@72) ($Is ($Unbox DatatypeTypeType bx@@72) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1013| :pattern ( ($IsBox bx@@72 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((|c#0@@7| T@U) ) (!  (=> (= (type |c#0@@7|) refType) (and (=> ($Is |c#0@@7| Tclass.BitmapImpl.Bitmap) (and ($Is |c#0@@7| Tclass.BitmapImpl.Bitmap?) (not (= |c#0@@7| null)))) (=> (and ($Is |c#0@@7| Tclass.BitmapImpl.Bitmap?) (not (= |c#0@@7| null))) ($Is |c#0@@7| Tclass.BitmapImpl.Bitmap)))) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($Is |c#0@@7| Tclass.BitmapImpl.Bitmap)) )))
(assert (forall ((|c#0@@8| T@U) ($h@@25 T@U) ) (!  (=> (and (= (type |c#0@@8|) refType) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@8| Tclass.BitmapImpl.Bitmap $h@@25) ($IsAlloc |c#0@@8| Tclass.BitmapImpl.Bitmap? $h@@25)) (=> ($IsAlloc |c#0@@8| Tclass.BitmapImpl.Bitmap? $h@@25) ($IsAlloc |c#0@@8| Tclass.BitmapImpl.Bitmap $h@@25)))) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsAlloc |c#0@@8| Tclass.BitmapImpl.Bitmap $h@@25)) )))
(assert (= (type Tclass.BitmapImpl.__default) TyType))
(assert (= (Tag Tclass.BitmapImpl.__default) Tagclass.BitmapImpl.__default))
(assert (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 Tclass.BitmapImpl.__default)) (and (= ($Box ($Unbox refType bx@@73)) bx@@73) ($Is ($Unbox refType bx@@73) Tclass.BitmapImpl.__default))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($IsBox bx@@73 Tclass.BitmapImpl.__default)) )))
(assert (forall (($o@@18 T@U) ) (!  (=> (= (type $o@@18) refType) (and (=> ($Is $o@@18 Tclass.BitmapImpl.__default) (or (= $o@@18 null) (= (dtype $o@@18) Tclass.BitmapImpl.__default))) (=> (or (= $o@@18 null) (= (dtype $o@@18) Tclass.BitmapImpl.__default)) ($Is $o@@18 Tclass.BitmapImpl.__default)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( ($Is $o@@18 Tclass.BitmapImpl.__default)) )))
(assert (forall (($o@@19 T@U) ($h@@26 T@U) ) (!  (=> (and (= (type $o@@19) refType) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@19 Tclass.BitmapImpl.__default $h@@26) (or (= $o@@19 null) (U_2_bool (MapType1Select (MapType0Select $h@@26 $o@@19) alloc)))) (=> (or (= $o@@19 null) (U_2_bool (MapType1Select (MapType0Select $h@@26 $o@@19) alloc))) ($IsAlloc $o@@19 Tclass.BitmapImpl.__default $h@@26)))) :qid |unknown.0:0| :skolemid |1061| :pattern ( ($IsAlloc $o@@19 Tclass.BitmapImpl.__default $h@@26)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@74)) bx@@74) ($Is ($Unbox intType bx@@74) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsBox bx@@74 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (and (=> ($Is |i#0@@13| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 128)) ($Is |i#0@@13| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@27 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@27) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.sbyte $h@@27)) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.sbyte $h@@27)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@75 T@U) ) (!  (=> (and (= (type bx@@75) BoxType) ($IsBox bx@@75 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@75)) bx@@75) ($Is ($Unbox intType bx@@75) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1065| :pattern ( ($IsBox bx@@75 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (and (=> ($Is |i#0@@15| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 256)) ($Is |i#0@@15| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1066| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.byte $h@@28)) :qid |unknown.0:0| :skolemid |1067| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.byte $h@@28)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@76)) bx@@76) ($Is ($Unbox intType bx@@76) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1068| :pattern ( ($IsBox bx@@76 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (and (=> ($Is |i#0@@17| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)) ($Is |i#0@@17| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1069| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.int16 $h@@29)) :qid |unknown.0:0| :skolemid |1070| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.int16 $h@@29)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@77)) bx@@77) ($Is ($Unbox intType bx@@77) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1071| :pattern ( ($IsBox bx@@77 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (and (=> ($Is |i#0@@19| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 65536)) ($Is |i#0@@19| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1072| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint16 $h@@30)) :qid |unknown.0:0| :skolemid |1073| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint16 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@78)) bx@@78) ($Is ($Unbox intType bx@@78) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1074| :pattern ( ($IsBox bx@@78 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (and (=> ($Is |i#0@@21| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 2147483648)) ($Is |i#0@@21| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.int32 $h@@31)) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.int32 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@79)) bx@@79) ($Is ($Unbox intType bx@@79) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1077| :pattern ( ($IsBox bx@@79 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (and (=> ($Is |i#0@@23| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 4294967296)) ($Is |i#0@@23| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1078| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint32 $h@@32)) :qid |unknown.0:0| :skolemid |1079| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint32 $h@@32)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1080| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (and (=> ($Is |i#0@@25| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 9223372036854775808)) ($Is |i#0@@25| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1081| :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@26| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.int64 $h@@33)) :qid |unknown.0:0| :skolemid |1082| :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.int64 $h@@33)) )))
(assert (forall ((|i#0@@27| T@U) ) (!  (=> (= (type |i#0@@27|) intType) (and (=> ($Is |i#0@@27| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 18446744073709551616)) ($Is |i#0@@27| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1083| :pattern ( ($Is |i#0@@27| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@28| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@28|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@28| Tclass.NativeTypes.uint64 $h@@34)) :qid |unknown.0:0| :skolemid |1084| :pattern ( ($IsAlloc |i#0@@28| Tclass.NativeTypes.uint64 $h@@34)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@29| T@U) ) (!  (=> (= (type |i#0@@29|) intType) (and (=> ($Is |i#0@@29| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 128)) ($Is |i#0@@29| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1086| :pattern ( ($Is |i#0@@29| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@30| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@30|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat8 $h@@35)) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat8 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@31| T@U) ) (!  (=> (= (type |i#0@@31|) intType) (and (=> ($Is |i#0@@31| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 32768)) ($Is |i#0@@31| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1089| :pattern ( ($Is |i#0@@31| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@32| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@32|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat16 $h@@36)) :qid |unknown.0:0| :skolemid |1090| :pattern ( ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat16 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1091| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@33| T@U) ) (!  (=> (= (type |i#0@@33|) intType) (and (=> ($Is |i#0@@33| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648)) ($Is |i#0@@33| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1092| :pattern ( ($Is |i#0@@33| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@34| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@34|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat32 $h@@37)) :qid |unknown.0:0| :skolemid |1093| :pattern ( ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat32 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1094| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@35| T@U) ) (!  (=> (= (type |i#0@@35|) intType) (and (=> ($Is |i#0@@35| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 9223372036854775808)) ($Is |i#0@@35| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1095| :pattern ( ($Is |i#0@@35| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@36| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@36|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@36| Tclass.NativeTypes.nat64 $h@@38)) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsAlloc |i#0@@36| Tclass.NativeTypes.nat64 $h@@38)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@85)) bx@@85) ($Is ($Unbox refType bx@@85) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@20 T@U) ) (!  (=> (= (type $o@@20) refType) (and (=> ($Is $o@@20 Tclass.NativeTypes.__default) (or (= $o@@20 null) (= (dtype $o@@20) Tclass.NativeTypes.__default))) (=> (or (= $o@@20 null) (= (dtype $o@@20) Tclass.NativeTypes.__default)) ($Is $o@@20 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( ($Is $o@@20 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@21 T@U) ($h@@39 T@U) ) (!  (=> (and (= (type $o@@21) refType) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@21 Tclass.NativeTypes.__default $h@@39) (or (= $o@@21 null) (U_2_bool (MapType1Select (MapType0Select $h@@39 $o@@21) alloc)))) (=> (or (= $o@@21 null) (U_2_bool (MapType1Select (MapType0Select $h@@39 $o@@21) alloc))) ($IsAlloc $o@@21 Tclass.NativeTypes.__default $h@@39)))) :qid |unknown.0:0| :skolemid |1099| :pattern ( ($IsAlloc $o@@21 Tclass.NativeTypes.__default $h@@39)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.DebugAccumulator.AccRec?) TyType))
(assert (= (Tag Tclass.DebugAccumulator.AccRec?) Tagclass.DebugAccumulator.AccRec?))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.DebugAccumulator.AccRec?)) (and (= ($Box ($Unbox refType bx@@86)) bx@@86) ($Is ($Unbox refType bx@@86) Tclass.DebugAccumulator.AccRec?))) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($IsBox bx@@86 Tclass.DebugAccumulator.AccRec?)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (and (=> ($Is $o@@22 Tclass.DebugAccumulator.AccRec?) (or (= $o@@22 null) (= (dtype $o@@22) Tclass.DebugAccumulator.AccRec?))) (=> (or (= $o@@22 null) (= (dtype $o@@22) Tclass.DebugAccumulator.AccRec?)) ($Is $o@@22 Tclass.DebugAccumulator.AccRec?)))) :qid |unknown.0:0| :skolemid |1101| :pattern ( ($Is $o@@22 Tclass.DebugAccumulator.AccRec?)) )))
(assert (forall (($o@@23 T@U) ($h@@40 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@23 Tclass.DebugAccumulator.AccRec? $h@@40) (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@23) alloc)))) (=> (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@23) alloc))) ($IsAlloc $o@@23 Tclass.DebugAccumulator.AccRec? $h@@40)))) :qid |unknown.0:0| :skolemid |1102| :pattern ( ($IsAlloc $o@@23 Tclass.DebugAccumulator.AccRec? $h@@40)) )))
(assert (= (type DebugAccumulator.AccRec.key) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.key) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$key) DebugAccumulator.AccRec.key))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.key)))
(assert (forall (($h@@41 T@U) ($o@@24 T@U) ) (!  (=> (and (and (= (type $h@@41) (MapType0Type refType MapType1Type)) (= (type $o@@24) refType)) (and ($IsGoodHeap $h@@41) (and (not (= $o@@24 null)) (= (dtype $o@@24) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@41 $o@@24) DebugAccumulator.AccRec.key) (TSeq TChar))) :qid |DafnyPre.521:12| :skolemid |1103| :pattern ( (MapType1Select (MapType0Select $h@@41 $o@@24) DebugAccumulator.AccRec.key)) )))
(assert (forall (($h@@42 T@U) ($o@@25 T@U) ) (!  (=> (and (= (type $h@@42) (MapType0Type refType MapType1Type)) (= (type $o@@25) refType)) (=> (and (and ($IsGoodHeap $h@@42) (and (not (= $o@@25 null)) (= (dtype $o@@25) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@25) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@42 $o@@25) DebugAccumulator.AccRec.key) (TSeq TChar) $h@@42))) :qid |DafnyPre.521:12| :skolemid |1104| :pattern ( (MapType1Select (MapType0Select $h@@42 $o@@25) DebugAccumulator.AccRec.key)) )))
(assert (= (type DebugAccumulator.AccRec.count) (FieldType intType)))
(assert (= (FDim DebugAccumulator.AccRec.count) 0))
(assert (= (FieldOfDecl intType class.DebugAccumulator.AccRec? field$count) DebugAccumulator.AccRec.count))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.count)))
(assert (forall (($h@@43 T@U) ($o@@26 T@U) ) (!  (=> (and (and (= (type $h@@43) (MapType0Type refType MapType1Type)) (= (type $o@@26) refType)) (and ($IsGoodHeap $h@@43) (and (not (= $o@@26 null)) (= (dtype $o@@26) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@43 $o@@26) DebugAccumulator.AccRec.count) Tclass.NativeTypes.uint64)) :qid |DafnyPre.521:12| :skolemid |1105| :pattern ( (MapType1Select (MapType0Select $h@@43 $o@@26) DebugAccumulator.AccRec.count)) )))
(assert (forall (($h@@44 T@U) ($o@@27 T@U) ) (!  (=> (and (= (type $h@@44) (MapType0Type refType MapType1Type)) (= (type $o@@27) refType)) (=> (and (and ($IsGoodHeap $h@@44) (and (not (= $o@@27 null)) (= (dtype $o@@27) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@44 $o@@27) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@44 $o@@27) DebugAccumulator.AccRec.count) Tclass.NativeTypes.uint64 $h@@44))) :qid |DafnyPre.521:12| :skolemid |1106| :pattern ( (MapType1Select (MapType0Select $h@@44 $o@@27) DebugAccumulator.AccRec.count)) )))
(assert (= (type DebugAccumulator.AccRec.unit) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.unit) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$unit) DebugAccumulator.AccRec.unit))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.unit)))
(assert (forall (($h@@45 T@U) ($o@@28 T@U) ) (!  (=> (and (and (= (type $h@@45) (MapType0Type refType MapType1Type)) (= (type $o@@28) refType)) (and ($IsGoodHeap $h@@45) (and (not (= $o@@28 null)) (= (dtype $o@@28) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@45 $o@@28) DebugAccumulator.AccRec.unit) (TSeq TChar))) :qid |DafnyPre.521:12| :skolemid |1107| :pattern ( (MapType1Select (MapType0Select $h@@45 $o@@28) DebugAccumulator.AccRec.unit)) )))
(assert (forall (($h@@46 T@U) ($o@@29 T@U) ) (!  (=> (and (= (type $h@@46) (MapType0Type refType MapType1Type)) (= (type $o@@29) refType)) (=> (and (and ($IsGoodHeap $h@@46) (and (not (= $o@@29 null)) (= (dtype $o@@29) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@46 $o@@29) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@46 $o@@29) DebugAccumulator.AccRec.unit) (TSeq TChar) $h@@46))) :qid |DafnyPre.521:12| :skolemid |1108| :pattern ( (MapType1Select (MapType0Select $h@@46 $o@@29) DebugAccumulator.AccRec.unit)) )))
(assert (= (type DebugAccumulator.AccRec.index) (FieldType (SeqType BoxType))))
(assert (= (FDim DebugAccumulator.AccRec.index) 0))
(assert (= (FieldOfDecl (SeqType BoxType) class.DebugAccumulator.AccRec? field$index) DebugAccumulator.AccRec.index))
(assert  (not ($IsGhostField DebugAccumulator.AccRec.index)))
(assert (forall (($h@@47 T@U) ($o@@30 T@U) ) (!  (=> (and (and (= (type $h@@47) (MapType0Type refType MapType1Type)) (= (type $o@@30) refType)) (and ($IsGoodHeap $h@@47) (and (not (= $o@@30 null)) (= (dtype $o@@30) Tclass.DebugAccumulator.AccRec?)))) ($Is (MapType1Select (MapType0Select $h@@47 $o@@30) DebugAccumulator.AccRec.index) (TSeq Tclass.DebugAccumulator.AccRec))) :qid |DafnyPre.521:12| :skolemid |1109| :pattern ( (MapType1Select (MapType0Select $h@@47 $o@@30) DebugAccumulator.AccRec.index)) )))
(assert (forall (($h@@48 T@U) ($o@@31 T@U) ) (!  (=> (and (= (type $h@@48) (MapType0Type refType MapType1Type)) (= (type $o@@31) refType)) (=> (and (and ($IsGoodHeap $h@@48) (and (not (= $o@@31 null)) (= (dtype $o@@31) Tclass.DebugAccumulator.AccRec?))) (U_2_bool (MapType1Select (MapType0Select $h@@48 $o@@31) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@48 $o@@31) DebugAccumulator.AccRec.index) (TSeq Tclass.DebugAccumulator.AccRec) $h@@48))) :qid |DafnyPre.521:12| :skolemid |1110| :pattern ( (MapType1Select (MapType0Select $h@@48 $o@@31) DebugAccumulator.AccRec.index)) )))
(assert (forall ((|c#0@@9| T@U) ) (!  (=> (= (type |c#0@@9|) refType) (and (=> ($Is |c#0@@9| Tclass.DebugAccumulator.AccRec) (and ($Is |c#0@@9| Tclass.DebugAccumulator.AccRec?) (not (= |c#0@@9| null)))) (=> (and ($Is |c#0@@9| Tclass.DebugAccumulator.AccRec?) (not (= |c#0@@9| null))) ($Is |c#0@@9| Tclass.DebugAccumulator.AccRec)))) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($Is |c#0@@9| Tclass.DebugAccumulator.AccRec)) )))
(assert (forall ((|c#0@@10| T@U) ($h@@49 T@U) ) (!  (=> (and (= (type |c#0@@10|) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@10| Tclass.DebugAccumulator.AccRec $h@@49) ($IsAlloc |c#0@@10| Tclass.DebugAccumulator.AccRec? $h@@49)) (=> ($IsAlloc |c#0@@10| Tclass.DebugAccumulator.AccRec? $h@@49) ($IsAlloc |c#0@@10| Tclass.DebugAccumulator.AccRec $h@@49)))) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsAlloc |c#0@@10| Tclass.DebugAccumulator.AccRec $h@@49)) )))
(assert (= (type Tclass.DebugAccumulator.__default) TyType))
(assert (= (Tag Tclass.DebugAccumulator.__default) Tagclass.DebugAccumulator.__default))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.DebugAccumulator.__default)) (and (= ($Box ($Unbox refType bx@@87)) bx@@87) ($Is ($Unbox refType bx@@87) Tclass.DebugAccumulator.__default))) :qid |unknown.0:0| :skolemid |1114| :pattern ( ($IsBox bx@@87 Tclass.DebugAccumulator.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.DebugAccumulator.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.DebugAccumulator.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.DebugAccumulator.__default)) ($Is $o@@32 Tclass.DebugAccumulator.__default)))) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($Is $o@@32 Tclass.DebugAccumulator.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@50 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.DebugAccumulator.__default $h@@50) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.DebugAccumulator.__default $h@@50)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsAlloc $o@@33 Tclass.DebugAccumulator.__default $h@@50)) )))
(assert (= (type DebugAccumulator.__default.EmptyAccumulator) (SeqType BoxType)))
(assert  (=> true (=> true ($Is DebugAccumulator.__default.EmptyAccumulator (TSeq Tclass.DebugAccumulator.AccRec)))))
(assert  (=> |DebugAccumulator.__default.EmptyAccumulator#requires| true))
(assert  (=> true |DebugAccumulator.__default.EmptyAccumulator#requires|))
(assert  (=> true (=> true (= DebugAccumulator.__default.EmptyAccumulator (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= DebugAccumulator.__default.EmptyAccumulator (Lit (|Seq#Empty| BoxType))))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (Options.Option.None_q d@@10) (= (DatatypeCtorId d@@10) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@10) |##Options.Option.None|) (Options.Option.None_q d@@10)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( (Options.Option.None_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (Options.Option.None_q d@@11)) (= d@@11 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Options.Option.None_q d@@11)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@51) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@51)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@51)) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@51)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@192)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@192)) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |1122| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@12) (= (DatatypeCtorId d@@12) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@12) |##Options.Option.Some|) (Options.Option.Some_q d@@12)))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (Options.Option.Some_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (Options.Option.Some_q d@@13)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@13 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |1124| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Options.Option.Some_q d@@13)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |1126| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@52 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@52)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@52) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@52)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@52) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@52)))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@52)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Options.Option.value arg0@@193)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@193)) )))
(assert (forall ((d@@14 T@U) (Options.Option$V@@6 T@U) ($h@@53 T@U) ) (!  (=> (and (and (and (= (type d@@14) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@53) (and (Options.Option.Some_q d@@14) ($IsAlloc d@@14 (Tclass.Options.Option Options.Option$V@@6) $h@@53)))) ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@53)) :qid |unknown.0:0| :skolemid |1128| :pattern ( ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@53)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |1129| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |1130| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |1131| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#Options.Option| d@@15)) (or (Options.Option.None_q d@@15) (Options.Option.Some_q d@@15))) :qid |unknown.0:0| :skolemid |1132| :pattern ( (|$IsA#Options.Option| d@@15)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@16 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@16) DatatypeTypeType)) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@16) (Options.Option.Some_q d@@16))) :qid |unknown.0:0| :skolemid |1133| :pattern ( (Options.Option.Some_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@110 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@110) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (Options.Option.None_q a@@110) (Options.Option.None_q b@@66))) (and (=> (|Options.Option#Equal| a@@110 b@@66) true) (=> true (|Options.Option#Equal| a@@110 b@@66)))) :qid |unknown.0:0| :skolemid |1134| :pattern ( (|Options.Option#Equal| a@@110 b@@66) (Options.Option.None_q a@@110)) :pattern ( (|Options.Option#Equal| a@@110 b@@66) (Options.Option.None_q b@@66)) )))
(assert (forall ((a@@111 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@111) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.Some_q a@@111) (Options.Option.Some_q b@@67))) (and (=> (|Options.Option#Equal| a@@111 b@@67) (= (Options.Option.value a@@111) (Options.Option.value b@@67))) (=> (= (Options.Option.value a@@111) (Options.Option.value b@@67)) (|Options.Option#Equal| a@@111 b@@67)))) :qid |unknown.0:0| :skolemid |1135| :pattern ( (|Options.Option#Equal| a@@111 b@@67) (Options.Option.Some_q a@@111)) :pattern ( (|Options.Option#Equal| a@@111 b@@67) (Options.Option.Some_q b@@67)) )))
(assert (forall ((a@@112 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@112) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@112 b@@68) (= a@@112 b@@68)) (=> (= a@@112 b@@68) (|Options.Option#Equal| a@@112 b@@68)))) :qid |unknown.0:0| :skolemid |1136| :pattern ( (|Options.Option#Equal| a@@112 b@@68)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@88)) bx@@88) ($Is ($Unbox refType bx@@88) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1137| :pattern ( ($IsBox bx@@88 Tclass.Options.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.Options.__default) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Options.__default))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Options.__default)) ($Is $o@@34 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1138| :pattern ( ($Is $o@@34 Tclass.Options.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@54 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.Options.__default $h@@54) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.Options.__default $h@@54)))) :qid |unknown.0:0| :skolemid |1139| :pattern ( ($IsAlloc $o@@35 Tclass.Options.__default $h@@54)) )))
(assert (forall ((arg0@@194 T@U) (arg1@@92 T@U) (arg2@@47 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Options.__default.MapOption arg0@@194 arg1@@92 arg2@@47 arg3@@25 arg4@@14)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@194 arg1@@92 arg2@@47 arg3@@25 arg4@@14)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|opt#0| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@15|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |opt#0| |f#0@@15|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@15| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@36 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@36) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@36 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |f#0@@15| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@36))))) (= (MapType1Select (MapType0Select $h0@@2 $o@@36) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@36) $f@@2)))) :qid |unknown.0:0| :skolemid |1140| :no-pattern (type $o@@36) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@36) :no-pattern (U_2_bool $o@@36) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |opt#0| |f#0@@15|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@2 |opt#0| |f#0@@15|))) :qid |unknown.0:0| :skolemid |1141| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@2 |opt#0| |f#0@@15|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@8 T@U) (|opt#0@@0| T@U) (|f#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@16|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@16| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |f#0@@16| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |f#0@@16| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1142| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@8 |opt#0@@0| |f#0@@16|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@9 T@U) (|opt#0@@1| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@17|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@9) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@17| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@17|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |f#0@@17| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |f#0@@17| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@17|)))) :qid |unknown.0:0| :skolemid |1143| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@9 |opt#0@@1| |f#0@@17|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@10 T@U) (|opt#0@@2| T@U) (|f#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@18|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@18|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@18| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |f#0@@18| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@18|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |f#0@@18| |v#1|)))))) :qid |unknown.0:0| :skolemid |1144| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@10 |opt#0@@2| |f#0@@18|)) ))))
(assert (forall ((arg0@@195 T@U) (arg1@@93 T@U) (arg2@@48 T@U) (arg3@@26 T@U) (arg4@@15 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@195 arg1@@93 arg2@@48 arg3@@26 arg4@@15)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@195 arg1@@93 arg2@@48 arg3@@26 arg4@@15)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|opt#0@@3| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@3 |opt#0@@3| |f#0@@19|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@37 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@37) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@37 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@3 |f#0@@19| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@37))))) (= (MapType1Select (MapType0Select $h0@@3 $o@@37) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@37) $f@@3)))) :qid |unknown.0:0| :skolemid |1145| :no-pattern (type $o@@37) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@37) :no-pattern (U_2_bool $o@@37) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@3 |opt#0@@3| |f#0@@19|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@3 |opt#0@@3| |f#0@@19|))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@3 |opt#0@@3| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@11 T@U) (|opt#0@@4| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@20| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@20| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@20|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@20| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@20|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@11 |f#0@@20| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@20|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1147| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@11 |opt#0@@4| |f#0@@20|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@12 T@U) (|opt#0@@5| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@12) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@12 |f#0@@21| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@12 |f#0@@21| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |1148| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@12 |opt#0@@5| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@13 T@U) (|opt#0@@6| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@13 |f#0@@22| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@13 |f#0@@22| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@13 |opt#0@@6| |f#0@@22|)) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@89)) bx@@89) ($Is ($Unbox refType bx@@89) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |1150| :pattern ( ($IsBox bx@@89 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (and (=> ($Is $o@@38 Tclass.SeqComparison.__default) (or (= $o@@38 null) (= (dtype $o@@38) Tclass.SeqComparison.__default))) (=> (or (= $o@@38 null) (= (dtype $o@@38) Tclass.SeqComparison.__default)) ($Is $o@@38 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |1151| :pattern ( ($Is $o@@38 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@55 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@39 Tclass.SeqComparison.__default $h@@55) (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@39) alloc)))) (=> (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@39) alloc))) ($IsAlloc $o@@39 Tclass.SeqComparison.__default $h@@55)))) :qid |unknown.0:0| :skolemid |1152| :pattern ( ($IsAlloc $o@@39 Tclass.SeqComparison.__default $h@@55)) )))
(assert (forall (($ly@@5 T@U) (|a#0@@1| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@5) LayerTypeType) (= (type |a#0@@1|) (SeqType BoxType))) (= (type |b#0@@17|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@5) |a#0@@1| |b#0@@17|) (SeqComparison.__default.lte $ly@@5 |a#0@@1| |b#0@@17|)) (=> (SeqComparison.__default.lte $ly@@5 |a#0@@1| |b#0@@17|) (SeqComparison.__default.lte ($LS $ly@@5) |a#0@@1| |b#0@@17|)))) :qid |SeqCompa.9:23| :skolemid |1153| :pattern ( (SeqComparison.__default.lte ($LS $ly@@5) |a#0@@1| |b#0@@17|)) )))
(assert (forall (($ly@@6 T@U) (|a#0@@2| T@U) (|b#0@@18| T@U) ) (!  (=> (and (and (= (type $ly@@6) LayerTypeType) (= (type |a#0@@2|) (SeqType BoxType))) (= (type |b#0@@18|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@6 |a#0@@2| |b#0@@18|) (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@18|)) (=> (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@18|) (SeqComparison.__default.lte $ly@@6 |a#0@@2| |b#0@@18|)))) :qid |SeqCompa.9:23| :skolemid |1154| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@6) |a#0@@2| |b#0@@18|)) )))
(assert  (=> true (forall (($ly@@7 T@U) (|a#0@@3| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (= (type $ly@@7) LayerTypeType) (= (type |a#0@@3|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@3| |b#0@@19|) (and ($Is |a#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@19| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |1155| :pattern ( (SeqComparison.__default.lte $ly@@7 |a#0@@3| |b#0@@19|)) ))))
(assert (forall (($ly@@8 T@U) (|a#0@@4| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type $ly@@8) LayerTypeType) (= (type |a#0@@4|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (and ($Is |a#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@20| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@8 |a#0@@4| |b#0@@20|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@8 |a#0@@4| |b#0@@20|)))) :qid |SeqCompa.9:23| :skolemid |1156| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@8 |a#0@@4| |b#0@@20|)) )))
(assert  (=> true (forall (($ly@@9 T@U) (|a#0@@5| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type $ly@@9) LayerTypeType) (= (type |a#0@@5|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@5| |b#0@@21|) (and ($Is |a#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@21| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@5|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@21|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@21| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@9) |a#0@@5| |b#0@@21|) (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@21|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@9 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@21| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@21|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@21| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@9 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@21| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@9) |a#0@@5| |b#0@@21|))))) :qid |SeqCompa.9:23| :skolemid |1157| :pattern ( (SeqComparison.__default.lte ($LS $ly@@9) |a#0@@5| |b#0@@21|)) ))))
(assert  (=> true (forall (($ly@@10 T@U) (|a#0@@6| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (= (type $ly@@10) LayerTypeType) (= (type |a#0@@6|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@6|) |b#0@@22|) (and ($Is |a#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@22| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@22|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@22| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@10) (Lit |a#0@@6|) |b#0@@22|) (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@22|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@10) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@22| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@22|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@22| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@10) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@22| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@10) (Lit |a#0@@6|) |b#0@@22|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1158| :pattern ( (SeqComparison.__default.lte ($LS $ly@@10) (Lit |a#0@@6|) |b#0@@22|)) ))))
(assert  (=> true (forall (($ly@@11 T@U) (|a#0@@7| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@11) LayerTypeType) (= (type |a#0@@7|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@7|) (Lit |b#0@@23|)) (and ($Is |a#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@23| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@23|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@23|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@11) (Lit |a#0@@7|) (Lit |b#0@@23|)) (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@23|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@11) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@23|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@23|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@23|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@11) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@23|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@11) (Lit |a#0@@7|) (Lit |b#0@@23|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1159| :pattern ( (SeqComparison.__default.lte ($LS $ly@@11) (Lit |a#0@@7|) (Lit |b#0@@23|))) ))))
(assert  (=> true (forall ((|a#0@@8| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) (SeqType BoxType)) (= (type |b#0@@24|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@8| |b#0@@24|) (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@24| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |1160| :pattern ( (SeqComparison.__default.lt |a#0@@8| |b#0@@24|)) ))))
(assert (forall ((|a#0@@9| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) (SeqType BoxType)) (= (type |b#0@@25|) (SeqType BoxType))) (and ($Is |a#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@25| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@25|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@25|)))) :qid |SeqCompa.25:16| :skolemid |1161| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@25|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@10| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) (SeqType BoxType)) (= (type |b#0@@26|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@10| |b#0@@26|) (and ($Is |a#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@26| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@10| |b#0@@26|) (and (=> (SeqComparison.__default.lt |a#0@@10| |b#0@@26|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@26|) (not (|Seq#Equal| |a#0@@10| |b#0@@26|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@26|) (not (|Seq#Equal| |a#0@@10| |b#0@@26|))) (SeqComparison.__default.lt |a#0@@10| |b#0@@26|))))) :qid |SeqCompa.25:16| :skolemid |1162| :pattern ( (SeqComparison.__default.lt |a#0@@10| |b#0@@26|)) ))))
(assert  (=> true (forall ((|a#0@@11| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) (SeqType BoxType)) (= (type |b#0@@27|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@11|) (Lit |b#0@@27|)) (and ($Is |a#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@27| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@11|) (Lit |b#0@@27|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@27|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@27|)) (not (|Seq#Equal| |a#0@@11| |b#0@@27|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@27|)) (not (|Seq#Equal| |a#0@@11| |b#0@@27|))) (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@27|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |1163| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@27|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@90)) bx@@90) ($Is ($Unbox refType bx@@90) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@90 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (and (=> ($Is $o@@40 Tclass.NativeArrays.__default) (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativeArrays.__default))) (=> (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativeArrays.__default)) ($Is $o@@40 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |1165| :pattern ( ($Is $o@@40 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@56 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@56) (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@41) alloc)))) (=> (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@41) alloc))) ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@56)))) :qid |unknown.0:0| :skolemid |1166| :pattern ( ($IsAlloc $o@@41 Tclass.NativeArrays.__default $h@@56)) )))
(assert (= (type Tclass.MathAxioms.__default) TyType))
(assert (= (Tag Tclass.MathAxioms.__default) Tagclass.MathAxioms.__default))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.MathAxioms.__default)) (and (= ($Box ($Unbox refType bx@@91)) bx@@91) ($Is ($Unbox refType bx@@91) Tclass.MathAxioms.__default))) :qid |unknown.0:0| :skolemid |1170| :pattern ( ($IsBox bx@@91 Tclass.MathAxioms.__default)) )))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (and (=> ($Is $o@@42 Tclass.MathAxioms.__default) (or (= $o@@42 null) (= (dtype $o@@42) Tclass.MathAxioms.__default))) (=> (or (= $o@@42 null) (= (dtype $o@@42) Tclass.MathAxioms.__default)) ($Is $o@@42 Tclass.MathAxioms.__default)))) :qid |unknown.0:0| :skolemid |1171| :pattern ( ($Is $o@@42 Tclass.MathAxioms.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@57 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@43 Tclass.MathAxioms.__default $h@@57) (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@57 $o@@43) alloc)))) (=> (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@57 $o@@43) alloc))) ($IsAlloc $o@@43 Tclass.MathAxioms.__default $h@@57)))) :qid |unknown.0:0| :skolemid |1172| :pattern ( ($IsAlloc $o@@43 Tclass.MathAxioms.__default $h@@57)) )))
(assert (= (type Tclass.BitsetLemmas.__default) TyType))
(assert (= (Tag Tclass.BitsetLemmas.__default) Tagclass.BitsetLemmas.__default))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.BitsetLemmas.__default)) (and (= ($Box ($Unbox refType bx@@92)) bx@@92) ($Is ($Unbox refType bx@@92) Tclass.BitsetLemmas.__default))) :qid |unknown.0:0| :skolemid |1173| :pattern ( ($IsBox bx@@92 Tclass.BitsetLemmas.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (and (=> ($Is $o@@44 Tclass.BitsetLemmas.__default) (or (= $o@@44 null) (= (dtype $o@@44) Tclass.BitsetLemmas.__default))) (=> (or (= $o@@44 null) (= (dtype $o@@44) Tclass.BitsetLemmas.__default)) ($Is $o@@44 Tclass.BitsetLemmas.__default)))) :qid |unknown.0:0| :skolemid |1174| :pattern ( ($Is $o@@44 Tclass.BitsetLemmas.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@58 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@45 Tclass.BitsetLemmas.__default $h@@58) (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@45) alloc)))) (=> (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@45) alloc))) ($IsAlloc $o@@45 Tclass.BitsetLemmas.__default $h@@58)))) :qid |unknown.0:0| :skolemid |1175| :pattern ( ($IsAlloc $o@@45 Tclass.BitsetLemmas.__default $h@@58)) )))
(assert (forall (($ly@@12 T@U) (|i#0@@37| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (BitsetLemmas.__default.bit ($LS $ly@@12) |i#0@@37|) (BitsetLemmas.__default.bit $ly@@12 |i#0@@37|))) :qid |BitsetLe.29:29| :skolemid |1176| :pattern ( (BitsetLemmas.__default.bit ($LS $ly@@12) |i#0@@37|)) )))
(assert (forall (($ly@@13 T@U) (|i#0@@38| Int) ) (!  (=> (= (type $ly@@13) LayerTypeType) (= (BitsetLemmas.__default.bit $ly@@13 |i#0@@38|) (BitsetLemmas.__default.bit $LZ |i#0@@38|))) :qid |BitsetLe.29:29| :skolemid |1177| :pattern ( (BitsetLemmas.__default.bit (AsFuelBottom $ly@@13) |i#0@@38|)) )))
(assert  (=> true (forall (($ly@@14 T@U) (|i#0@@39| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (or (|BitsetLemmas.__default.bit#canCall| |i#0@@39|) (and (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| 18446744073709551616)) (< |i#0@@39| 64)))) true) :qid |BitsetLe.29:29| :skolemid |1178| :pattern ( (BitsetLemmas.__default.bit $ly@@14 |i#0@@39|)) ))))
(assert (forall (($ly@@15 T@U) (|i#0@@40| Int) ) (!  (=> (= (type $ly@@15) LayerTypeType) (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| 18446744073709551616)) (and (=> (|BitsetLemmas.__default.bit#requires| $ly@@15 |i#0@@40|) (< |i#0@@40| 64)) (=> (< |i#0@@40| 64) (|BitsetLemmas.__default.bit#requires| $ly@@15 |i#0@@40|))))) :qid |BitsetLe.29:29| :skolemid |1179| :pattern ( (|BitsetLemmas.__default.bit#requires| $ly@@15 |i#0@@40|)) )))
(assert  (=> true (forall (($ly@@16 T@U) (|i#0@@41| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|BitsetLemmas.__default.bit#canCall| |i#0@@41|) (and (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| 18446744073709551616)) (< |i#0@@41| 64)))) (= (BitsetLemmas.__default.bit ($LS $ly@@16) |i#0@@41|) (bvshl #x0000000000000001 ((_ int2bv 64) |i#0@@41|)))) :qid |BitsetLe.29:29| :skolemid |1180| :pattern ( (BitsetLemmas.__default.bit ($LS $ly@@16) |i#0@@41|)) ))))
(assert  (=> true (forall (($ly@@17 T@U) (|i#0@@42| Int) ) (!  (=> (and (= (type $ly@@17) LayerTypeType) (or (|BitsetLemmas.__default.bit#canCall| (LitInt |i#0@@42|)) (and (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| 18446744073709551616)) (U_2_bool (Lit (bool_2_U (< |i#0@@42| 64))))))) (= (BitsetLemmas.__default.bit ($LS $ly@@17) (LitInt |i#0@@42|)) (bvshl #x0000000000000001 ((_ int2bv 64) |i#0@@42|)))) :qid |BitsetLe.29:29| :weight 3 :skolemid |1181| :pattern ( (BitsetLemmas.__default.bit ($LS $ly@@17) (LitInt |i#0@@42|))) ))))
(assert (forall (($ly@@18 T@U) (|a#0@@12| (_ BitVec 64)) (|b#0@@28| (_ BitVec 64)) ) (!  (=> (= (type $ly@@18) LayerTypeType) (= (BitsetLemmas.__default.bit__and ($LS $ly@@18) |a#0@@12| |b#0@@28|) (BitsetLemmas.__default.bit__and $ly@@18 |a#0@@12| |b#0@@28|))) :qid |BitsetLe.35:29| :skolemid |1182| :pattern ( (BitsetLemmas.__default.bit__and ($LS $ly@@18) |a#0@@12| |b#0@@28|)) )))
(assert (forall (($ly@@19 T@U) (|a#0@@13| (_ BitVec 64)) (|b#0@@29| (_ BitVec 64)) ) (!  (=> (= (type $ly@@19) LayerTypeType) (= (BitsetLemmas.__default.bit__and $ly@@19 |a#0@@13| |b#0@@29|) (BitsetLemmas.__default.bit__and $LZ |a#0@@13| |b#0@@29|))) :qid |BitsetLe.35:29| :skolemid |1183| :pattern ( (BitsetLemmas.__default.bit__and (AsFuelBottom $ly@@19) |a#0@@13| |b#0@@29|)) )))
(assert  (=> true (forall (($ly@@20 T@U) (|a#0@@14| (_ BitVec 64)) (|b#0@@30| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@20) LayerTypeType) true) true) :qid |BitsetLe.35:29| :skolemid |1184| :pattern ( (BitsetLemmas.__default.bit__and $ly@@20 |a#0@@14| |b#0@@30|)) ))))
(assert (forall (($ly@@21 T@U) (|a#0@@15| (_ BitVec 64)) (|b#0@@31| (_ BitVec 64)) ) (!  (=> (= (type $ly@@21) LayerTypeType) (and (=> (|BitsetLemmas.__default.bit__and#requires| $ly@@21 |a#0@@15| |b#0@@31|) true) (=> true (|BitsetLemmas.__default.bit__and#requires| $ly@@21 |a#0@@15| |b#0@@31|)))) :qid |BitsetLe.35:29| :skolemid |1185| :pattern ( (|BitsetLemmas.__default.bit__and#requires| $ly@@21 |a#0@@15| |b#0@@31|)) )))
(assert  (=> true (forall (($ly@@22 T@U) (|a#0@@16| (_ BitVec 64)) (|b#0@@32| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@22) LayerTypeType) true) (= (BitsetLemmas.__default.bit__and ($LS $ly@@22) |a#0@@16| |b#0@@32|) (bvand |a#0@@16| |b#0@@32|))) :qid |BitsetLe.35:29| :skolemid |1186| :pattern ( (BitsetLemmas.__default.bit__and ($LS $ly@@22) |a#0@@16| |b#0@@32|)) ))))
(assert  (and (and (and (forall ((arg0@@196 (_ BitVec 64)) ) (! (= (U_2_bv64 (bv64_2_U arg0@@196)) arg0@@196) :qid |typeInv:U_2_bv64| :pattern ( (bv64_2_U arg0@@196)) )) (= (Ctor bv64Type) 24)) (forall ((x@@55 T@U) ) (!  (=> (= (type x@@55) bv64Type) (= (bv64_2_U (U_2_bv64 x@@55)) x@@55)) :qid |cast:U_2_bv64| :pattern ( (U_2_bv64 x@@55)) ))) (forall ((arg0@@197 (_ BitVec 64)) ) (! (= (type (bv64_2_U arg0@@197)) bv64Type) :qid |funType:bv64_2_U| :pattern ( (bv64_2_U arg0@@197)) ))))
(assert  (=> true (forall (($ly@@23 T@U) (|a#0@@17| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type $ly@@23) LayerTypeType) (= (type |a#0@@17|) bv64Type)) (= (type |b#0@@33|) bv64Type)) true) (= (BitsetLemmas.__default.bit__and ($LS $ly@@23) (U_2_bv64 (Lit |a#0@@17|)) (U_2_bv64 (Lit |b#0@@33|))) (U_2_bv64 (Lit (bv64_2_U (bvand (U_2_bv64 |a#0@@17|) (U_2_bv64 |b#0@@33|))))))) :qid |BitsetLe.35:29| :weight 3 :skolemid |1187| :pattern ( (BitsetLemmas.__default.bit__and ($LS $ly@@23) (U_2_bv64 (Lit |a#0@@17|)) (U_2_bv64 (Lit |b#0@@33|)))) ))))
(assert (forall (($ly@@24 T@U) (|a#0@@18| (_ BitVec 64)) (|b#0@@34| (_ BitVec 64)) ) (!  (=> (= (type $ly@@24) LayerTypeType) (= (BitsetLemmas.__default.bit__or ($LS $ly@@24) |a#0@@18| |b#0@@34|) (BitsetLemmas.__default.bit__or $ly@@24 |a#0@@18| |b#0@@34|))) :qid |BitsetLe.40:29| :skolemid |1188| :pattern ( (BitsetLemmas.__default.bit__or ($LS $ly@@24) |a#0@@18| |b#0@@34|)) )))
(assert (forall (($ly@@25 T@U) (|a#0@@19| (_ BitVec 64)) (|b#0@@35| (_ BitVec 64)) ) (!  (=> (= (type $ly@@25) LayerTypeType) (= (BitsetLemmas.__default.bit__or $ly@@25 |a#0@@19| |b#0@@35|) (BitsetLemmas.__default.bit__or $LZ |a#0@@19| |b#0@@35|))) :qid |BitsetLe.40:29| :skolemid |1189| :pattern ( (BitsetLemmas.__default.bit__or (AsFuelBottom $ly@@25) |a#0@@19| |b#0@@35|)) )))
(assert  (=> true (forall (($ly@@26 T@U) (|a#0@@20| (_ BitVec 64)) (|b#0@@36| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@26) LayerTypeType) true) true) :qid |BitsetLe.40:29| :skolemid |1190| :pattern ( (BitsetLemmas.__default.bit__or $ly@@26 |a#0@@20| |b#0@@36|)) ))))
(assert (forall (($ly@@27 T@U) (|a#0@@21| (_ BitVec 64)) (|b#0@@37| (_ BitVec 64)) ) (!  (=> (= (type $ly@@27) LayerTypeType) (and (=> (|BitsetLemmas.__default.bit__or#requires| $ly@@27 |a#0@@21| |b#0@@37|) true) (=> true (|BitsetLemmas.__default.bit__or#requires| $ly@@27 |a#0@@21| |b#0@@37|)))) :qid |BitsetLe.40:29| :skolemid |1191| :pattern ( (|BitsetLemmas.__default.bit__or#requires| $ly@@27 |a#0@@21| |b#0@@37|)) )))
(assert  (=> true (forall (($ly@@28 T@U) (|a#0@@22| (_ BitVec 64)) (|b#0@@38| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@28) LayerTypeType) true) (= (BitsetLemmas.__default.bit__or ($LS $ly@@28) |a#0@@22| |b#0@@38|) (bvor |a#0@@22| |b#0@@38|))) :qid |BitsetLe.40:29| :skolemid |1192| :pattern ( (BitsetLemmas.__default.bit__or ($LS $ly@@28) |a#0@@22| |b#0@@38|)) ))))
(assert  (=> true (forall (($ly@@29 T@U) (|a#0@@23| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@29) LayerTypeType) (= (type |a#0@@23|) bv64Type)) (= (type |b#0@@39|) bv64Type)) true) (= (BitsetLemmas.__default.bit__or ($LS $ly@@29) (U_2_bv64 (Lit |a#0@@23|)) (U_2_bv64 (Lit |b#0@@39|))) (U_2_bv64 (Lit (bv64_2_U (bvor (U_2_bv64 |a#0@@23|) (U_2_bv64 |b#0@@39|))))))) :qid |BitsetLe.40:29| :weight 3 :skolemid |1193| :pattern ( (BitsetLemmas.__default.bit__or ($LS $ly@@29) (U_2_bv64 (Lit |a#0@@23|)) (U_2_bv64 (Lit |b#0@@39|)))) ))))
(assert (forall (($ly@@30 T@U) (|a#0@@24| (_ BitVec 64)) ) (!  (=> (= (type $ly@@30) LayerTypeType) (= (BitsetLemmas.__default.bit__comp ($LS $ly@@30) |a#0@@24|) (BitsetLemmas.__default.bit__comp $ly@@30 |a#0@@24|))) :qid |BitsetLe.45:29| :skolemid |1194| :pattern ( (BitsetLemmas.__default.bit__comp ($LS $ly@@30) |a#0@@24|)) )))
(assert (forall (($ly@@31 T@U) (|a#0@@25| (_ BitVec 64)) ) (!  (=> (= (type $ly@@31) LayerTypeType) (= (BitsetLemmas.__default.bit__comp $ly@@31 |a#0@@25|) (BitsetLemmas.__default.bit__comp $LZ |a#0@@25|))) :qid |BitsetLe.45:29| :skolemid |1195| :pattern ( (BitsetLemmas.__default.bit__comp (AsFuelBottom $ly@@31) |a#0@@25|)) )))
(assert  (=> true (forall (($ly@@32 T@U) (|a#0@@26| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@32) LayerTypeType) true) true) :qid |BitsetLe.45:29| :skolemid |1196| :pattern ( (BitsetLemmas.__default.bit__comp $ly@@32 |a#0@@26|)) ))))
(assert (forall (($ly@@33 T@U) (|a#0@@27| (_ BitVec 64)) ) (!  (=> (= (type $ly@@33) LayerTypeType) (and (=> (|BitsetLemmas.__default.bit__comp#requires| $ly@@33 |a#0@@27|) true) (=> true (|BitsetLemmas.__default.bit__comp#requires| $ly@@33 |a#0@@27|)))) :qid |BitsetLe.45:29| :skolemid |1197| :pattern ( (|BitsetLemmas.__default.bit__comp#requires| $ly@@33 |a#0@@27|)) )))
(assert  (=> true (forall (($ly@@34 T@U) (|a#0@@28| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@34) LayerTypeType) true) (= (BitsetLemmas.__default.bit__comp ($LS $ly@@34) |a#0@@28|) (bvxor #xffffffffffffffff |a#0@@28|))) :qid |BitsetLe.45:29| :skolemid |1198| :pattern ( (BitsetLemmas.__default.bit__comp ($LS $ly@@34) |a#0@@28|)) ))))
(assert  (=> true (forall (($ly@@35 T@U) (|a#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@35) LayerTypeType) (= (type |a#0@@29|) bv64Type)) true) (= (BitsetLemmas.__default.bit__comp ($LS $ly@@35) (U_2_bv64 (Lit |a#0@@29|))) (U_2_bv64 (Lit (bv64_2_U (bvxor #xffffffffffffffff (U_2_bv64 |a#0@@29|))))))) :qid |BitsetLe.45:29| :weight 3 :skolemid |1199| :pattern ( (BitsetLemmas.__default.bit__comp ($LS $ly@@35) (U_2_bv64 (Lit |a#0@@29|)))) ))))
(assert (forall (($ly@@36 T@U) (|i#0@@43| Int) (|a#0@@30| (_ BitVec 64)) ) (!  (=> (= (type $ly@@36) LayerTypeType) (and (=> (BitsetLemmas.__default.in__set ($LS $ly@@36) |i#0@@43| |a#0@@30|) (BitsetLemmas.__default.in__set $ly@@36 |i#0@@43| |a#0@@30|)) (=> (BitsetLemmas.__default.in__set $ly@@36 |i#0@@43| |a#0@@30|) (BitsetLemmas.__default.in__set ($LS $ly@@36) |i#0@@43| |a#0@@30|)))) :qid |BitsetLe.151:30| :skolemid |1200| :pattern ( (BitsetLemmas.__default.in__set ($LS $ly@@36) |i#0@@43| |a#0@@30|)) )))
(assert (forall (($ly@@37 T@U) (|i#0@@44| Int) (|a#0@@31| (_ BitVec 64)) ) (!  (=> (= (type $ly@@37) LayerTypeType) (and (=> (BitsetLemmas.__default.in__set $ly@@37 |i#0@@44| |a#0@@31|) (BitsetLemmas.__default.in__set $LZ |i#0@@44| |a#0@@31|)) (=> (BitsetLemmas.__default.in__set $LZ |i#0@@44| |a#0@@31|) (BitsetLemmas.__default.in__set $ly@@37 |i#0@@44| |a#0@@31|)))) :qid |BitsetLe.151:30| :skolemid |1201| :pattern ( (BitsetLemmas.__default.in__set (AsFuelBottom $ly@@37) |i#0@@44| |a#0@@31|)) )))
(assert  (=> true (forall (($ly@@38 T@U) (|i#0@@45| Int) (|a#0@@32| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@38) LayerTypeType) (or (|BitsetLemmas.__default.in__set#canCall| |i#0@@45| |a#0@@32|) (and (and (<= (LitInt 0) |i#0@@45|) (< |i#0@@45| 18446744073709551616)) (< |i#0@@45| 64)))) true) :qid |BitsetLe.151:30| :skolemid |1202| :pattern ( (BitsetLemmas.__default.in__set $ly@@38 |i#0@@45| |a#0@@32|)) ))))
(assert (forall (($ly@@39 T@U) (|i#0@@46| Int) (|a#0@@33| (_ BitVec 64)) ) (!  (=> (= (type $ly@@39) LayerTypeType) (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| 18446744073709551616)) (and (=> (|BitsetLemmas.__default.in__set#requires| $ly@@39 |i#0@@46| |a#0@@33|) (< |i#0@@46| 64)) (=> (< |i#0@@46| 64) (|BitsetLemmas.__default.in__set#requires| $ly@@39 |i#0@@46| |a#0@@33|))))) :qid |BitsetLe.151:30| :skolemid |1203| :pattern ( (|BitsetLemmas.__default.in__set#requires| $ly@@39 |i#0@@46| |a#0@@33|)) )))
(assert  (and (= (type StartFuel_BitsetLemmas._default.bit) LayerTypeType) (= (type StartFuel_BitsetLemmas._default.bit_and) LayerTypeType)))
(assert  (=> true (forall (($ly@@40 T@U) (|i#0@@47| Int) (|a#0@@34| (_ BitVec 64)) ) (!  (=> (and (= (type $ly@@40) LayerTypeType) (or (|BitsetLemmas.__default.in__set#canCall| |i#0@@47| |a#0@@34|) (and (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| 18446744073709551616)) (< |i#0@@47| 64)))) (and (and (|BitsetLemmas.__default.bit#canCall| |i#0@@47|) (|BitsetLemmas.__default.bit__and#canCall| |a#0@@34| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@47|))) (and (=> (BitsetLemmas.__default.in__set ($LS $ly@@40) |i#0@@47| |a#0@@34|) (not (= (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and |a#0@@34| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@47|)) #x0000000000000000))) (=> (not (= (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and |a#0@@34| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@47|)) #x0000000000000000)) (BitsetLemmas.__default.in__set ($LS $ly@@40) |i#0@@47| |a#0@@34|))))) :qid |BitsetLe.151:30| :skolemid |1204| :pattern ( (BitsetLemmas.__default.in__set ($LS $ly@@40) |i#0@@47| |a#0@@34|)) ))))
(assert  (=> true (forall (($ly@@41 T@U) (|i#0@@48| Int) (|a#0@@35| T@U) ) (!  (=> (and (and (= (type $ly@@41) LayerTypeType) (= (type |a#0@@35|) bv64Type)) (or (|BitsetLemmas.__default.in__set#canCall| (LitInt |i#0@@48|) (U_2_bv64 (Lit |a#0@@35|))) (and (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| 18446744073709551616)) (U_2_bool (Lit (bool_2_U (< |i#0@@48| 64))))))) (and (and (|BitsetLemmas.__default.bit#canCall| (LitInt |i#0@@48|)) (|BitsetLemmas.__default.bit__and#canCall| (U_2_bv64 (Lit |a#0@@35|)) (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@48|)))) (and (=> (BitsetLemmas.__default.in__set ($LS $ly@@41) (LitInt |i#0@@48|) (U_2_bv64 (Lit |a#0@@35|))) (not (= (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and (U_2_bv64 (Lit |a#0@@35|)) (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@48|))) #x0000000000000000))) (=> (not (= (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and (U_2_bv64 (Lit |a#0@@35|)) (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@48|))) #x0000000000000000)) (BitsetLemmas.__default.in__set ($LS $ly@@41) (LitInt |i#0@@48|) (U_2_bv64 (Lit |a#0@@35|))))))) :qid |BitsetLe.151:30| :weight 3 :skolemid |1205| :pattern ( (BitsetLemmas.__default.in__set ($LS $ly@@41) (LitInt |i#0@@48|) (U_2_bv64 (Lit |a#0@@35|)))) ))))
(assert (forall (($ly@@42 T@U) (|a#0@@36| (_ BitVec 64)) (|i#0@@49| Int) ) (!  (=> (= (type $ly@@42) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@42) |a#0@@36| |i#0@@49|) (BitsetLemmas.__default.set__bit__to__1 $ly@@42 |a#0@@36| |i#0@@49|))) :qid |BitsetLe.157:29| :skolemid |1206| :pattern ( (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@42) |a#0@@36| |i#0@@49|)) )))
(assert (forall (($ly@@43 T@U) (|a#0@@37| (_ BitVec 64)) (|i#0@@50| Int) ) (!  (=> (= (type $ly@@43) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__1 $ly@@43 |a#0@@37| |i#0@@50|) (BitsetLemmas.__default.set__bit__to__1 $LZ |a#0@@37| |i#0@@50|))) :qid |BitsetLe.157:29| :skolemid |1207| :pattern ( (BitsetLemmas.__default.set__bit__to__1 (AsFuelBottom $ly@@43) |a#0@@37| |i#0@@50|)) )))
(assert  (=> true (forall (($ly@@44 T@U) (|a#0@@38| (_ BitVec 64)) (|i#0@@51| Int) ) (!  (=> (and (= (type $ly@@44) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__1#canCall| |a#0@@38| |i#0@@51|) (and (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| 18446744073709551616)) (< |i#0@@51| 64)))) true) :qid |BitsetLe.157:29| :skolemid |1208| :pattern ( (BitsetLemmas.__default.set__bit__to__1 $ly@@44 |a#0@@38| |i#0@@51|)) ))))
(assert (forall (($ly@@45 T@U) (|a#0@@39| (_ BitVec 64)) (|i#0@@52| Int) ) (!  (=> (= (type $ly@@45) LayerTypeType) (=> (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| 18446744073709551616)) (and (=> (|BitsetLemmas.__default.set__bit__to__1#requires| $ly@@45 |a#0@@39| |i#0@@52|) (< |i#0@@52| 64)) (=> (< |i#0@@52| 64) (|BitsetLemmas.__default.set__bit__to__1#requires| $ly@@45 |a#0@@39| |i#0@@52|))))) :qid |BitsetLe.157:29| :skolemid |1209| :pattern ( (|BitsetLemmas.__default.set__bit__to__1#requires| $ly@@45 |a#0@@39| |i#0@@52|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.bit_or) LayerTypeType))
(assert  (=> true (forall (($ly@@46 T@U) (|a#0@@40| (_ BitVec 64)) (|i#0@@53| Int) ) (!  (=> (and (= (type $ly@@46) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__1#canCall| |a#0@@40| |i#0@@53|) (and (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| 18446744073709551616)) (< |i#0@@53| 64)))) (and (and (|BitsetLemmas.__default.bit#canCall| |i#0@@53|) (|BitsetLemmas.__default.bit__or#canCall| |a#0@@40| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@53|))) (= (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@46) |a#0@@40| |i#0@@53|) (BitsetLemmas.__default.bit__or StartFuel_BitsetLemmas._default.bit_or |a#0@@40| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@53|))))) :qid |BitsetLe.157:29| :skolemid |1210| :pattern ( (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@46) |a#0@@40| |i#0@@53|)) ))))
(assert  (=> true (forall (($ly@@47 T@U) (|a#0@@41| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (= (type $ly@@47) LayerTypeType) (= (type |a#0@@41|) bv64Type)) (or (|BitsetLemmas.__default.set__bit__to__1#canCall| (U_2_bv64 (Lit |a#0@@41|)) (LitInt |i#0@@54|)) (and (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| 18446744073709551616)) (U_2_bool (Lit (bool_2_U (< |i#0@@54| 64))))))) (and (and (|BitsetLemmas.__default.bit#canCall| (LitInt |i#0@@54|)) (|BitsetLemmas.__default.bit__or#canCall| (U_2_bv64 (Lit |a#0@@41|)) (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@54|)))) (= (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@47) (U_2_bv64 (Lit |a#0@@41|)) (LitInt |i#0@@54|)) (BitsetLemmas.__default.bit__or StartFuel_BitsetLemmas._default.bit_or (U_2_bv64 (Lit |a#0@@41|)) (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@54|)))))) :qid |BitsetLe.157:29| :weight 3 :skolemid |1211| :pattern ( (BitsetLemmas.__default.set__bit__to__1 ($LS $ly@@47) (U_2_bv64 (Lit |a#0@@41|)) (LitInt |i#0@@54|))) ))))
(assert (forall (($ly@@48 T@U) (|a#0@@42| (_ BitVec 64)) (|i#0@@55| Int) ) (!  (=> (= (type $ly@@48) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@48) |a#0@@42| |i#0@@55|) (BitsetLemmas.__default.set__bit__to__0 $ly@@48 |a#0@@42| |i#0@@55|))) :qid |BitsetLe.163:29| :skolemid |1212| :pattern ( (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@48) |a#0@@42| |i#0@@55|)) )))
(assert (forall (($ly@@49 T@U) (|a#0@@43| (_ BitVec 64)) (|i#0@@56| Int) ) (!  (=> (= (type $ly@@49) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__0 $ly@@49 |a#0@@43| |i#0@@56|) (BitsetLemmas.__default.set__bit__to__0 $LZ |a#0@@43| |i#0@@56|))) :qid |BitsetLe.163:29| :skolemid |1213| :pattern ( (BitsetLemmas.__default.set__bit__to__0 (AsFuelBottom $ly@@49) |a#0@@43| |i#0@@56|)) )))
(assert  (=> true (forall (($ly@@50 T@U) (|a#0@@44| (_ BitVec 64)) (|i#0@@57| Int) ) (!  (=> (and (= (type $ly@@50) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__0#canCall| |a#0@@44| |i#0@@57|) (and (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616)) (< |i#0@@57| 64)))) true) :qid |BitsetLe.163:29| :skolemid |1214| :pattern ( (BitsetLemmas.__default.set__bit__to__0 $ly@@50 |a#0@@44| |i#0@@57|)) ))))
(assert (forall (($ly@@51 T@U) (|a#0@@45| (_ BitVec 64)) (|i#0@@58| Int) ) (!  (=> (= (type $ly@@51) LayerTypeType) (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| 18446744073709551616)) (and (=> (|BitsetLemmas.__default.set__bit__to__0#requires| $ly@@51 |a#0@@45| |i#0@@58|) (< |i#0@@58| 64)) (=> (< |i#0@@58| 64) (|BitsetLemmas.__default.set__bit__to__0#requires| $ly@@51 |a#0@@45| |i#0@@58|))))) :qid |BitsetLe.163:29| :skolemid |1215| :pattern ( (|BitsetLemmas.__default.set__bit__to__0#requires| $ly@@51 |a#0@@45| |i#0@@58|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.bit_comp) LayerTypeType))
(assert  (=> true (forall (($ly@@52 T@U) (|a#0@@46| (_ BitVec 64)) (|i#0@@59| Int) ) (!  (=> (and (= (type $ly@@52) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__0#canCall| |a#0@@46| |i#0@@59|) (and (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| 18446744073709551616)) (< |i#0@@59| 64)))) (and (and (and (|BitsetLemmas.__default.bit#canCall| |i#0@@59|) (|BitsetLemmas.__default.bit__comp#canCall| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@59|))) (|BitsetLemmas.__default.bit__and#canCall| |a#0@@46| (BitsetLemmas.__default.bit__comp StartFuel_BitsetLemmas._default.bit_comp (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@59|)))) (= (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@52) |a#0@@46| |i#0@@59|) (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and |a#0@@46| (BitsetLemmas.__default.bit__comp StartFuel_BitsetLemmas._default.bit_comp (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit |i#0@@59|)))))) :qid |BitsetLe.163:29| :skolemid |1216| :pattern ( (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@52) |a#0@@46| |i#0@@59|)) ))))
(assert  (=> true (forall (($ly@@53 T@U) (|a#0@@47| T@U) (|i#0@@60| Int) ) (!  (=> (and (and (= (type $ly@@53) LayerTypeType) (= (type |a#0@@47|) bv64Type)) (or (|BitsetLemmas.__default.set__bit__to__0#canCall| (U_2_bv64 (Lit |a#0@@47|)) (LitInt |i#0@@60|)) (and (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| 18446744073709551616)) (U_2_bool (Lit (bool_2_U (< |i#0@@60| 64))))))) (and (and (and (|BitsetLemmas.__default.bit#canCall| (LitInt |i#0@@60|)) (|BitsetLemmas.__default.bit__comp#canCall| (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@60|)))) (|BitsetLemmas.__default.bit__and#canCall| (U_2_bv64 (Lit |a#0@@47|)) (BitsetLemmas.__default.bit__comp StartFuel_BitsetLemmas._default.bit_comp (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@60|))))) (= (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@53) (U_2_bv64 (Lit |a#0@@47|)) (LitInt |i#0@@60|)) (BitsetLemmas.__default.bit__and StartFuel_BitsetLemmas._default.bit_and (U_2_bv64 (Lit |a#0@@47|)) (BitsetLemmas.__default.bit__comp StartFuel_BitsetLemmas._default.bit_comp (BitsetLemmas.__default.bit StartFuel_BitsetLemmas._default.bit (LitInt |i#0@@60|))))))) :qid |BitsetLe.163:29| :weight 3 :skolemid |1217| :pattern ( (BitsetLemmas.__default.set__bit__to__0 ($LS $ly@@53) (U_2_bv64 (Lit |a#0@@47|)) (LitInt |i#0@@60|))) ))))
(assert (forall (($ly@@54 T@U) (|a#0@@48| Int) (|b#0@@40| Int) ) (!  (=> (= (type $ly@@54) LayerTypeType) (= (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@54) |a#0@@48| |b#0@@40|) (BitsetLemmas.__default.bit__or__uint64 $ly@@54 |a#0@@48| |b#0@@40|))) :qid |BitsetLe.368:29| :skolemid |1218| :pattern ( (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@54) |a#0@@48| |b#0@@40|)) )))
(assert (forall (($ly@@55 T@U) (|a#0@@49| Int) (|b#0@@41| Int) ) (!  (=> (= (type $ly@@55) LayerTypeType) (= (BitsetLemmas.__default.bit__or__uint64 $ly@@55 |a#0@@49| |b#0@@41|) (BitsetLemmas.__default.bit__or__uint64 $LZ |a#0@@49| |b#0@@41|))) :qid |BitsetLe.368:29| :skolemid |1219| :pattern ( (BitsetLemmas.__default.bit__or__uint64 (AsFuelBottom $ly@@55) |a#0@@49| |b#0@@41|)) )))
(assert  (=> true (forall (($ly@@56 T@U) (|a#0@@50| Int) (|b#0@@42| Int) ) (!  (=> (and (= (type $ly@@56) LayerTypeType) (or (|BitsetLemmas.__default.bit__or__uint64#canCall| |a#0@@50| |b#0@@42|) (and (and (<= (LitInt 0) |a#0@@50|) (< |a#0@@50| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@42|) (< |b#0@@42| 18446744073709551616))))) (and (<= (LitInt 0) (BitsetLemmas.__default.bit__or__uint64 $ly@@56 |a#0@@50| |b#0@@42|)) (< (BitsetLemmas.__default.bit__or__uint64 $ly@@56 |a#0@@50| |b#0@@42|) 18446744073709551616))) :qid |BitsetLe.368:29| :skolemid |1220| :pattern ( (BitsetLemmas.__default.bit__or__uint64 $ly@@56 |a#0@@50| |b#0@@42|)) ))))
(assert (forall (($ly@@57 T@U) (|a#0@@51| Int) (|b#0@@43| Int) ) (!  (=> (= (type $ly@@57) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@51|) (< |a#0@@51| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@43|) (< |b#0@@43| 18446744073709551616))) (and (=> (|BitsetLemmas.__default.bit__or__uint64#requires| $ly@@57 |a#0@@51| |b#0@@43|) true) (=> true (|BitsetLemmas.__default.bit__or__uint64#requires| $ly@@57 |a#0@@51| |b#0@@43|))))) :qid |BitsetLe.368:29| :skolemid |1221| :pattern ( (|BitsetLemmas.__default.bit__or__uint64#requires| $ly@@57 |a#0@@51| |b#0@@43|)) )))
(assert  (=> true (forall (($ly@@58 T@U) (|a#0@@52| Int) (|b#0@@44| Int) ) (!  (=> (and (= (type $ly@@58) LayerTypeType) (or (|BitsetLemmas.__default.bit__or__uint64#canCall| |a#0@@52| |b#0@@44|) (and (and (<= (LitInt 0) |a#0@@52|) (< |a#0@@52| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@44|) (< |b#0@@44| 18446744073709551616))))) (and (|BitsetLemmas.__default.bit__or#canCall| ((_ int2bv 64) |a#0@@52|) ((_ int2bv 64) |b#0@@44|)) (= (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@58) |a#0@@52| |b#0@@44|) (nat_from_bv64 (BitsetLemmas.__default.bit__or StartFuel_BitsetLemmas._default.bit_or ((_ int2bv 64) |a#0@@52|) ((_ int2bv 64) |b#0@@44|)))))) :qid |BitsetLe.368:29| :skolemid |1222| :pattern ( (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@58) |a#0@@52| |b#0@@44|)) ))))
(assert  (=> true (forall (($ly@@59 T@U) (|a#0@@53| Int) (|b#0@@45| Int) ) (!  (=> (and (= (type $ly@@59) LayerTypeType) (or (|BitsetLemmas.__default.bit__or__uint64#canCall| (LitInt |a#0@@53|) (LitInt |b#0@@45|)) (and (and (<= (LitInt 0) |a#0@@53|) (< |a#0@@53| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@45|) (< |b#0@@45| 18446744073709551616))))) (and (|BitsetLemmas.__default.bit__or#canCall| ((_ int2bv 64) (LitInt |a#0@@53|)) ((_ int2bv 64) (LitInt |b#0@@45|))) (= (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@59) (LitInt |a#0@@53|) (LitInt |b#0@@45|)) (nat_from_bv64 (BitsetLemmas.__default.bit__or StartFuel_BitsetLemmas._default.bit_or ((_ int2bv 64) (LitInt |a#0@@53|)) ((_ int2bv 64) (LitInt |b#0@@45|))))))) :qid |BitsetLe.368:29| :weight 3 :skolemid |1223| :pattern ( (BitsetLemmas.__default.bit__or__uint64 ($LS $ly@@59) (LitInt |a#0@@53|) (LitInt |b#0@@45|))) ))))
(assert (forall (($ly@@60 T@U) (|i#0@@61| Int) (|a#0@@54| Int) ) (!  (=> (= (type $ly@@60) LayerTypeType) (and (=> (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@60) |i#0@@61| |a#0@@54|) (BitsetLemmas.__default.in__set__uint64 $ly@@60 |i#0@@61| |a#0@@54|)) (=> (BitsetLemmas.__default.in__set__uint64 $ly@@60 |i#0@@61| |a#0@@54|) (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@60) |i#0@@61| |a#0@@54|)))) :qid |BitsetLe.373:30| :skolemid |1224| :pattern ( (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@60) |i#0@@61| |a#0@@54|)) )))
(assert (forall (($ly@@61 T@U) (|i#0@@62| Int) (|a#0@@55| Int) ) (!  (=> (= (type $ly@@61) LayerTypeType) (and (=> (BitsetLemmas.__default.in__set__uint64 $ly@@61 |i#0@@62| |a#0@@55|) (BitsetLemmas.__default.in__set__uint64 $LZ |i#0@@62| |a#0@@55|)) (=> (BitsetLemmas.__default.in__set__uint64 $LZ |i#0@@62| |a#0@@55|) (BitsetLemmas.__default.in__set__uint64 $ly@@61 |i#0@@62| |a#0@@55|)))) :qid |BitsetLe.373:30| :skolemid |1225| :pattern ( (BitsetLemmas.__default.in__set__uint64 (AsFuelBottom $ly@@61) |i#0@@62| |a#0@@55|)) )))
(assert  (=> true (forall (($ly@@62 T@U) (|i#0@@63| Int) (|a#0@@56| Int) ) (!  (=> (and (= (type $ly@@62) LayerTypeType) (or (|BitsetLemmas.__default.in__set__uint64#canCall| |i#0@@63| |a#0@@56|) (and (and (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| 18446744073709551616)) (and (<= (LitInt 0) |a#0@@56|) (< |a#0@@56| 18446744073709551616))) (< |i#0@@63| 64)))) true) :qid |BitsetLe.373:30| :skolemid |1226| :pattern ( (BitsetLemmas.__default.in__set__uint64 $ly@@62 |i#0@@63| |a#0@@56|)) ))))
(assert (forall (($ly@@63 T@U) (|i#0@@64| Int) (|a#0@@57| Int) ) (!  (=> (= (type $ly@@63) LayerTypeType) (=> (and (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616)) (and (<= (LitInt 0) |a#0@@57|) (< |a#0@@57| 18446744073709551616))) (and (=> (|BitsetLemmas.__default.in__set__uint64#requires| $ly@@63 |i#0@@64| |a#0@@57|) (< |i#0@@64| 64)) (=> (< |i#0@@64| 64) (|BitsetLemmas.__default.in__set__uint64#requires| $ly@@63 |i#0@@64| |a#0@@57|))))) :qid |BitsetLe.373:30| :skolemid |1227| :pattern ( (|BitsetLemmas.__default.in__set__uint64#requires| $ly@@63 |i#0@@64| |a#0@@57|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.in_set) LayerTypeType))
(assert  (=> true (forall (($ly@@64 T@U) (|i#0@@65| Int) (|a#0@@58| Int) ) (!  (=> (and (= (type $ly@@64) LayerTypeType) (or (|BitsetLemmas.__default.in__set__uint64#canCall| |i#0@@65| |a#0@@58|) (and (and (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616)) (and (<= (LitInt 0) |a#0@@58|) (< |a#0@@58| 18446744073709551616))) (< |i#0@@65| 64)))) (and (|BitsetLemmas.__default.in__set#canCall| |i#0@@65| ((_ int2bv 64) |a#0@@58|)) (and (=> (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@64) |i#0@@65| |a#0@@58|) (BitsetLemmas.__default.in__set StartFuel_BitsetLemmas._default.in_set |i#0@@65| ((_ int2bv 64) |a#0@@58|))) (=> (BitsetLemmas.__default.in__set StartFuel_BitsetLemmas._default.in_set |i#0@@65| ((_ int2bv 64) |a#0@@58|)) (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@64) |i#0@@65| |a#0@@58|))))) :qid |BitsetLe.373:30| :skolemid |1228| :pattern ( (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@64) |i#0@@65| |a#0@@58|)) ))))
(assert  (=> true (forall (($ly@@65 T@U) (|i#0@@66| Int) (|a#0@@59| Int) ) (!  (=> (and (= (type $ly@@65) LayerTypeType) (or (|BitsetLemmas.__default.in__set__uint64#canCall| (LitInt |i#0@@66|) (LitInt |a#0@@59|)) (and (and (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616)) (and (<= (LitInt 0) |a#0@@59|) (< |a#0@@59| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |i#0@@66| 64))))))) (and (|BitsetLemmas.__default.in__set#canCall| (LitInt |i#0@@66|) ((_ int2bv 64) (LitInt |a#0@@59|))) (and (=> (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@65) (LitInt |i#0@@66|) (LitInt |a#0@@59|)) (BitsetLemmas.__default.in__set StartFuel_BitsetLemmas._default.in_set (LitInt |i#0@@66|) ((_ int2bv 64) (LitInt |a#0@@59|)))) (=> (BitsetLemmas.__default.in__set StartFuel_BitsetLemmas._default.in_set (LitInt |i#0@@66|) ((_ int2bv 64) (LitInt |a#0@@59|))) (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@65) (LitInt |i#0@@66|) (LitInt |a#0@@59|)))))) :qid |BitsetLe.373:30| :weight 3 :skolemid |1229| :pattern ( (BitsetLemmas.__default.in__set__uint64 ($LS $ly@@65) (LitInt |i#0@@66|) (LitInt |a#0@@59|))) ))))
(assert (forall (($ly@@66 T@U) (|a#0@@60| Int) (|i#0@@67| Int) ) (!  (=> (= (type $ly@@66) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@66) |a#0@@60| |i#0@@67|) (BitsetLemmas.__default.set__bit__to__1__uint64 $ly@@66 |a#0@@60| |i#0@@67|))) :qid |BitsetLe.379:29| :skolemid |1230| :pattern ( (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@66) |a#0@@60| |i#0@@67|)) )))
(assert (forall (($ly@@67 T@U) (|a#0@@61| Int) (|i#0@@68| Int) ) (!  (=> (= (type $ly@@67) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__1__uint64 $ly@@67 |a#0@@61| |i#0@@68|) (BitsetLemmas.__default.set__bit__to__1__uint64 $LZ |a#0@@61| |i#0@@68|))) :qid |BitsetLe.379:29| :skolemid |1231| :pattern ( (BitsetLemmas.__default.set__bit__to__1__uint64 (AsFuelBottom $ly@@67) |a#0@@61| |i#0@@68|)) )))
(assert  (=> true (forall (($ly@@68 T@U) (|a#0@@62| Int) (|i#0@@69| Int) ) (!  (=> (and (= (type $ly@@68) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| |a#0@@62| |i#0@@69|) (and (and (and (<= (LitInt 0) |a#0@@62|) (< |a#0@@62| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| 18446744073709551616))) (< |i#0@@69| 64)))) (and (<= (LitInt 0) (BitsetLemmas.__default.set__bit__to__1__uint64 $ly@@68 |a#0@@62| |i#0@@69|)) (< (BitsetLemmas.__default.set__bit__to__1__uint64 $ly@@68 |a#0@@62| |i#0@@69|) 18446744073709551616))) :qid |BitsetLe.379:29| :skolemid |1232| :pattern ( (BitsetLemmas.__default.set__bit__to__1__uint64 $ly@@68 |a#0@@62| |i#0@@69|)) ))))
(assert (forall (($ly@@69 T@U) (|a#0@@63| Int) (|i#0@@70| Int) ) (!  (=> (= (type $ly@@69) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@63|) (< |a#0@@63| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@70|) (< |i#0@@70| 18446744073709551616))) (and (=> (|BitsetLemmas.__default.set__bit__to__1__uint64#requires| $ly@@69 |a#0@@63| |i#0@@70|) (< |i#0@@70| 64)) (=> (< |i#0@@70| 64) (|BitsetLemmas.__default.set__bit__to__1__uint64#requires| $ly@@69 |a#0@@63| |i#0@@70|))))) :qid |BitsetLe.379:29| :skolemid |1233| :pattern ( (|BitsetLemmas.__default.set__bit__to__1__uint64#requires| $ly@@69 |a#0@@63| |i#0@@70|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.set_bit_to_1) LayerTypeType))
(assert  (=> true (forall (($ly@@70 T@U) (|a#0@@64| Int) (|i#0@@71| Int) ) (!  (=> (and (= (type $ly@@70) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| |a#0@@64| |i#0@@71|) (and (and (and (<= (LitInt 0) |a#0@@64|) (< |a#0@@64| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| 18446744073709551616))) (< |i#0@@71| 64)))) (and (|BitsetLemmas.__default.set__bit__to__1#canCall| ((_ int2bv 64) |a#0@@64|) |i#0@@71|) (= (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@70) |a#0@@64| |i#0@@71|) (nat_from_bv64 (BitsetLemmas.__default.set__bit__to__1 StartFuel_BitsetLemmas._default.set_bit_to_1 ((_ int2bv 64) |a#0@@64|) |i#0@@71|))))) :qid |BitsetLe.379:29| :skolemid |1234| :pattern ( (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@70) |a#0@@64| |i#0@@71|)) ))))
(assert  (=> true (forall (($ly@@71 T@U) (|a#0@@65| Int) (|i#0@@72| Int) ) (!  (=> (and (= (type $ly@@71) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| (LitInt |a#0@@65|) (LitInt |i#0@@72|)) (and (and (and (<= (LitInt 0) |a#0@@65|) (< |a#0@@65| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |i#0@@72| 64))))))) (and (|BitsetLemmas.__default.set__bit__to__1#canCall| ((_ int2bv 64) (LitInt |a#0@@65|)) (LitInt |i#0@@72|)) (= (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@71) (LitInt |a#0@@65|) (LitInt |i#0@@72|)) (nat_from_bv64 (BitsetLemmas.__default.set__bit__to__1 StartFuel_BitsetLemmas._default.set_bit_to_1 ((_ int2bv 64) (LitInt |a#0@@65|)) (LitInt |i#0@@72|)))))) :qid |BitsetLe.379:29| :weight 3 :skolemid |1235| :pattern ( (BitsetLemmas.__default.set__bit__to__1__uint64 ($LS $ly@@71) (LitInt |a#0@@65|) (LitInt |i#0@@72|))) ))))
(assert (forall (($ly@@72 T@U) (|a#0@@66| Int) (|i#0@@73| Int) ) (!  (=> (= (type $ly@@72) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@72) |a#0@@66| |i#0@@73|) (BitsetLemmas.__default.set__bit__to__0__uint64 $ly@@72 |a#0@@66| |i#0@@73|))) :qid |BitsetLe.385:29| :skolemid |1236| :pattern ( (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@72) |a#0@@66| |i#0@@73|)) )))
(assert (forall (($ly@@73 T@U) (|a#0@@67| Int) (|i#0@@74| Int) ) (!  (=> (= (type $ly@@73) LayerTypeType) (= (BitsetLemmas.__default.set__bit__to__0__uint64 $ly@@73 |a#0@@67| |i#0@@74|) (BitsetLemmas.__default.set__bit__to__0__uint64 $LZ |a#0@@67| |i#0@@74|))) :qid |BitsetLe.385:29| :skolemid |1237| :pattern ( (BitsetLemmas.__default.set__bit__to__0__uint64 (AsFuelBottom $ly@@73) |a#0@@67| |i#0@@74|)) )))
(assert  (=> true (forall (($ly@@74 T@U) (|a#0@@68| Int) (|i#0@@75| Int) ) (!  (=> (and (= (type $ly@@74) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__0__uint64#canCall| |a#0@@68| |i#0@@75|) (and (and (and (<= (LitInt 0) |a#0@@68|) (< |a#0@@68| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| 18446744073709551616))) (< |i#0@@75| 64)))) (and (<= (LitInt 0) (BitsetLemmas.__default.set__bit__to__0__uint64 $ly@@74 |a#0@@68| |i#0@@75|)) (< (BitsetLemmas.__default.set__bit__to__0__uint64 $ly@@74 |a#0@@68| |i#0@@75|) 18446744073709551616))) :qid |BitsetLe.385:29| :skolemid |1238| :pattern ( (BitsetLemmas.__default.set__bit__to__0__uint64 $ly@@74 |a#0@@68| |i#0@@75|)) ))))
(assert (forall (($ly@@75 T@U) (|a#0@@69| Int) (|i#0@@76| Int) ) (!  (=> (= (type $ly@@75) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@69|) (< |a#0@@69| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| 18446744073709551616))) (and (=> (|BitsetLemmas.__default.set__bit__to__0__uint64#requires| $ly@@75 |a#0@@69| |i#0@@76|) (< |i#0@@76| 64)) (=> (< |i#0@@76| 64) (|BitsetLemmas.__default.set__bit__to__0__uint64#requires| $ly@@75 |a#0@@69| |i#0@@76|))))) :qid |BitsetLe.385:29| :skolemid |1239| :pattern ( (|BitsetLemmas.__default.set__bit__to__0__uint64#requires| $ly@@75 |a#0@@69| |i#0@@76|)) )))
(assert (= (type StartFuel_BitsetLemmas._default.set_bit_to_0) LayerTypeType))
(assert  (=> true (forall (($ly@@76 T@U) (|a#0@@70| Int) (|i#0@@77| Int) ) (!  (=> (and (= (type $ly@@76) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__0__uint64#canCall| |a#0@@70| |i#0@@77|) (and (and (and (<= (LitInt 0) |a#0@@70|) (< |a#0@@70| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| 18446744073709551616))) (< |i#0@@77| 64)))) (and (|BitsetLemmas.__default.set__bit__to__0#canCall| ((_ int2bv 64) |a#0@@70|) |i#0@@77|) (= (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@76) |a#0@@70| |i#0@@77|) (nat_from_bv64 (BitsetLemmas.__default.set__bit__to__0 StartFuel_BitsetLemmas._default.set_bit_to_0 ((_ int2bv 64) |a#0@@70|) |i#0@@77|))))) :qid |BitsetLe.385:29| :skolemid |1240| :pattern ( (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@76) |a#0@@70| |i#0@@77|)) ))))
(assert  (=> true (forall (($ly@@77 T@U) (|a#0@@71| Int) (|i#0@@78| Int) ) (!  (=> (and (= (type $ly@@77) LayerTypeType) (or (|BitsetLemmas.__default.set__bit__to__0__uint64#canCall| (LitInt |a#0@@71|) (LitInt |i#0@@78|)) (and (and (and (<= (LitInt 0) |a#0@@71|) (< |a#0@@71| 18446744073709551616)) (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |i#0@@78| 64))))))) (and (|BitsetLemmas.__default.set__bit__to__0#canCall| ((_ int2bv 64) (LitInt |a#0@@71|)) (LitInt |i#0@@78|)) (= (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@77) (LitInt |a#0@@71|) (LitInt |i#0@@78|)) (nat_from_bv64 (BitsetLemmas.__default.set__bit__to__0 StartFuel_BitsetLemmas._default.set_bit_to_0 ((_ int2bv 64) (LitInt |a#0@@71|)) (LitInt |i#0@@78|)))))) :qid |BitsetLe.385:29| :weight 3 :skolemid |1241| :pattern ( (BitsetLemmas.__default.set__bit__to__0__uint64 ($LS $ly@@77) (LitInt |a#0@@71|) (LitInt |i#0@@78|))) ))))
(assert (= (type Tclass.BitmapModel.__default) TyType))
(assert (= (Tag Tclass.BitmapModel.__default) Tagclass.BitmapModel.__default))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.BitmapModel.__default)) (and (= ($Box ($Unbox refType bx@@93)) bx@@93) ($Is ($Unbox refType bx@@93) Tclass.BitmapModel.__default))) :qid |unknown.0:0| :skolemid |1244| :pattern ( ($IsBox bx@@93 Tclass.BitmapModel.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (and (=> ($Is $o@@46 Tclass.BitmapModel.__default) (or (= $o@@46 null) (= (dtype $o@@46) Tclass.BitmapModel.__default))) (=> (or (= $o@@46 null) (= (dtype $o@@46) Tclass.BitmapModel.__default)) ($Is $o@@46 Tclass.BitmapModel.__default)))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($Is $o@@46 Tclass.BitmapModel.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@59 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@47 Tclass.BitmapModel.__default $h@@59) (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@47) alloc)))) (=> (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@47) alloc))) ($IsAlloc $o@@47 Tclass.BitmapModel.__default $h@@59)))) :qid |unknown.0:0| :skolemid |1246| :pattern ( ($IsAlloc $o@@47 Tclass.BitmapModel.__default $h@@59)) )))
(assert  (=> true (forall ((|bm#0| T@U) ) (!  (=> (and (= (type |bm#0|) (SeqType BoxType)) (or (|BitmapModel.__default.Len#canCall| |bm#0|) ($Is |bm#0| (TSeq TBool)))) true) :qid |BitmapMo.18:16| :skolemid |1247| :pattern ( (BitmapModel.__default.Len |bm#0|)) ))))
(assert (forall ((|bm#0@@0| T@U) ) (!  (=> (and (= (type |bm#0@@0|) (SeqType BoxType)) ($Is |bm#0@@0| (TSeq TBool))) (and (=> (|BitmapModel.__default.Len#requires| |bm#0@@0|) true) (=> true (|BitmapModel.__default.Len#requires| |bm#0@@0|)))) :qid |BitmapMo.18:16| :skolemid |1248| :pattern ( (|BitmapModel.__default.Len#requires| |bm#0@@0|)) )))
(assert  (=> true (forall ((|bm#0@@1| T@U) ) (!  (=> (and (= (type |bm#0@@1|) (SeqType BoxType)) (or (|BitmapModel.__default.Len#canCall| |bm#0@@1|) ($Is |bm#0@@1| (TSeq TBool)))) (= (BitmapModel.__default.Len |bm#0@@1|) (|Seq#Length| |bm#0@@1|))) :qid |BitmapMo.18:16| :skolemid |1249| :pattern ( (BitmapModel.__default.Len |bm#0@@1|)) ))))
(assert  (=> true (forall ((|bm#0@@2| T@U) ) (!  (=> (and (= (type |bm#0@@2|) (SeqType BoxType)) (or (|BitmapModel.__default.Len#canCall| (Lit |bm#0@@2|)) ($Is |bm#0@@2| (TSeq TBool)))) (= (BitmapModel.__default.Len (Lit |bm#0@@2|)) (|Seq#Length| (Lit |bm#0@@2|)))) :qid |BitmapMo.18:16| :weight 3 :skolemid |1250| :pattern ( (BitmapModel.__default.Len (Lit |bm#0@@2|))) ))))
(assert (forall ((arg0@@198 T@U) (arg1@@94 T@U) (arg2@@49 Int) ) (! (= (type (BitmapModel.__default.BitSet arg0@@198 arg1@@94 arg2@@49)) (SeqType BoxType)) :qid |funType:BitmapModel.__default.BitSet| :pattern ( (BitmapModel.__default.BitSet arg0@@198 arg1@@94 arg2@@49)) )))
(assert (forall (($ly@@78 T@U) (|bm#0@@3| T@U) (|i#0@@79| Int) ) (!  (=> (and (= (type $ly@@78) LayerTypeType) (= (type |bm#0@@3|) (SeqType BoxType))) (= (BitmapModel.__default.BitSet ($LS $ly@@78) |bm#0@@3| |i#0@@79|) (BitmapModel.__default.BitSet $ly@@78 |bm#0@@3| |i#0@@79|))) :qid |BitmapMo.23:22| :skolemid |1251| :pattern ( (BitmapModel.__default.BitSet ($LS $ly@@78) |bm#0@@3| |i#0@@79|)) )))
(assert (forall (($ly@@79 T@U) (|bm#0@@4| T@U) (|i#0@@80| Int) ) (!  (=> (and (= (type $ly@@79) LayerTypeType) (= (type |bm#0@@4|) (SeqType BoxType))) (= (BitmapModel.__default.BitSet $ly@@79 |bm#0@@4| |i#0@@80|) (BitmapModel.__default.BitSet $LZ |bm#0@@4| |i#0@@80|))) :qid |BitmapMo.23:22| :skolemid |1252| :pattern ( (BitmapModel.__default.BitSet (AsFuelBottom $ly@@79) |bm#0@@4| |i#0@@80|)) )))
(assert  (=> true (forall (($ly@@80 T@U) (|bm#0@@5| T@U) (|i#0@@81| Int) ) (!  (=> (and (and (= (type $ly@@80) LayerTypeType) (= (type |bm#0@@5|) (SeqType BoxType))) (or (|BitmapModel.__default.BitSet#canCall| |bm#0@@5| |i#0@@81|) (and ($Is |bm#0@@5| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (BitmapModel.__default.Len |bm#0@@5|)))))) (and (= (BitmapModel.__default.Len (BitmapModel.__default.BitSet $ly@@80 |bm#0@@5| |i#0@@81|)) (BitmapModel.__default.Len |bm#0@@5|)) ($Is (BitmapModel.__default.BitSet $ly@@80 |bm#0@@5| |i#0@@81|) (TSeq TBool)))) :qid |BitmapMo.23:22| :skolemid |1253| :pattern ( (BitmapModel.__default.BitSet $ly@@80 |bm#0@@5| |i#0@@81|)) ))))
(assert (forall (($ly@@81 T@U) (|bm#0@@6| T@U) (|i#0@@82| Int) ) (!  (=> (and (and (= (type $ly@@81) LayerTypeType) (= (type |bm#0@@6|) (SeqType BoxType))) ($Is |bm#0@@6| (TSeq TBool))) (and (=> (|BitmapModel.__default.BitSet#requires| $ly@@81 |bm#0@@6| |i#0@@82|) (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| (BitmapModel.__default.Len |bm#0@@6|)))) (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| (BitmapModel.__default.Len |bm#0@@6|))) (|BitmapModel.__default.BitSet#requires| $ly@@81 |bm#0@@6| |i#0@@82|)))) :qid |BitmapMo.23:22| :skolemid |1254| :pattern ( (|BitmapModel.__default.BitSet#requires| $ly@@81 |bm#0@@6| |i#0@@82|)) )))
(assert  (=> true (forall (($ly@@82 T@U) (|bm#0@@7| T@U) (|i#0@@83| Int) ) (!  (=> (and (and (= (type $ly@@82) LayerTypeType) (= (type |bm#0@@7|) (SeqType BoxType))) (or (|BitmapModel.__default.BitSet#canCall| |bm#0@@7| |i#0@@83|) (and ($Is |bm#0@@7| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (BitmapModel.__default.Len |bm#0@@7|)))))) (= (BitmapModel.__default.BitSet ($LS $ly@@82) |bm#0@@7| |i#0@@83|) (|Seq#Update| |bm#0@@7| |i#0@@83| ($Box (Lit (bool_2_U true)))))) :qid |BitmapMo.23:22| :skolemid |1255| :pattern ( (BitmapModel.__default.BitSet ($LS $ly@@82) |bm#0@@7| |i#0@@83|)) ))))
(assert  (=> true (forall (($ly@@83 T@U) (|bm#0@@8| T@U) (|i#0@@84| Int) ) (!  (=> (and (and (= (type $ly@@83) LayerTypeType) (= (type |bm#0@@8|) (SeqType BoxType))) (or (|BitmapModel.__default.BitSet#canCall| (Lit |bm#0@@8|) (LitInt |i#0@@84|)) (and ($Is |bm#0@@8| (TSeq TBool)) (and (<= (LitInt 0) (LitInt |i#0@@84|)) (< |i#0@@84| (BitmapModel.__default.Len (Lit |bm#0@@8|))))))) (= (BitmapModel.__default.BitSet ($LS $ly@@83) (Lit |bm#0@@8|) (LitInt |i#0@@84|)) (|Seq#Update| (Lit |bm#0@@8|) (LitInt |i#0@@84|) ($Box (Lit (bool_2_U true)))))) :qid |BitmapMo.23:22| :weight 3 :skolemid |1256| :pattern ( (BitmapModel.__default.BitSet ($LS $ly@@83) (Lit |bm#0@@8|) (LitInt |i#0@@84|))) ))))
(assert (forall ((arg0@@199 T@U) (arg1@@95 T@U) (arg2@@50 Int) ) (! (= (type (BitmapModel.__default.BitUnset arg0@@199 arg1@@95 arg2@@50)) (SeqType BoxType)) :qid |funType:BitmapModel.__default.BitUnset| :pattern ( (BitmapModel.__default.BitUnset arg0@@199 arg1@@95 arg2@@50)) )))
(assert (forall (($ly@@84 T@U) (|bm#0@@9| T@U) (|i#0@@85| Int) ) (!  (=> (and (= (type $ly@@84) LayerTypeType) (= (type |bm#0@@9|) (SeqType BoxType))) (= (BitmapModel.__default.BitUnset ($LS $ly@@84) |bm#0@@9| |i#0@@85|) (BitmapModel.__default.BitUnset $ly@@84 |bm#0@@9| |i#0@@85|))) :qid |BitmapMo.30:22| :skolemid |1257| :pattern ( (BitmapModel.__default.BitUnset ($LS $ly@@84) |bm#0@@9| |i#0@@85|)) )))
(assert (forall (($ly@@85 T@U) (|bm#0@@10| T@U) (|i#0@@86| Int) ) (!  (=> (and (= (type $ly@@85) LayerTypeType) (= (type |bm#0@@10|) (SeqType BoxType))) (= (BitmapModel.__default.BitUnset $ly@@85 |bm#0@@10| |i#0@@86|) (BitmapModel.__default.BitUnset $LZ |bm#0@@10| |i#0@@86|))) :qid |BitmapMo.30:22| :skolemid |1258| :pattern ( (BitmapModel.__default.BitUnset (AsFuelBottom $ly@@85) |bm#0@@10| |i#0@@86|)) )))
(assert  (=> true (forall (($ly@@86 T@U) (|bm#0@@11| T@U) (|i#0@@87| Int) ) (!  (=> (and (and (= (type $ly@@86) LayerTypeType) (= (type |bm#0@@11|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnset#canCall| |bm#0@@11| |i#0@@87|) (and ($Is |bm#0@@11| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (BitmapModel.__default.Len |bm#0@@11|)))))) (and (= (BitmapModel.__default.Len (BitmapModel.__default.BitUnset $ly@@86 |bm#0@@11| |i#0@@87|)) (BitmapModel.__default.Len |bm#0@@11|)) ($Is (BitmapModel.__default.BitUnset $ly@@86 |bm#0@@11| |i#0@@87|) (TSeq TBool)))) :qid |BitmapMo.30:22| :skolemid |1259| :pattern ( (BitmapModel.__default.BitUnset $ly@@86 |bm#0@@11| |i#0@@87|)) ))))
(assert (forall (($ly@@87 T@U) (|bm#0@@12| T@U) (|i#0@@88| Int) ) (!  (=> (and (and (= (type $ly@@87) LayerTypeType) (= (type |bm#0@@12|) (SeqType BoxType))) ($Is |bm#0@@12| (TSeq TBool))) (and (=> (|BitmapModel.__default.BitUnset#requires| $ly@@87 |bm#0@@12| |i#0@@88|) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (BitmapModel.__default.Len |bm#0@@12|)))) (=> (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (BitmapModel.__default.Len |bm#0@@12|))) (|BitmapModel.__default.BitUnset#requires| $ly@@87 |bm#0@@12| |i#0@@88|)))) :qid |BitmapMo.30:22| :skolemid |1260| :pattern ( (|BitmapModel.__default.BitUnset#requires| $ly@@87 |bm#0@@12| |i#0@@88|)) )))
(assert  (=> true (forall (($ly@@88 T@U) (|bm#0@@13| T@U) (|i#0@@89| Int) ) (!  (=> (and (and (= (type $ly@@88) LayerTypeType) (= (type |bm#0@@13|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnset#canCall| |bm#0@@13| |i#0@@89|) (and ($Is |bm#0@@13| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (BitmapModel.__default.Len |bm#0@@13|)))))) (= (BitmapModel.__default.BitUnset ($LS $ly@@88) |bm#0@@13| |i#0@@89|) (|Seq#Update| |bm#0@@13| |i#0@@89| ($Box (Lit (bool_2_U false)))))) :qid |BitmapMo.30:22| :skolemid |1261| :pattern ( (BitmapModel.__default.BitUnset ($LS $ly@@88) |bm#0@@13| |i#0@@89|)) ))))
(assert  (=> true (forall (($ly@@89 T@U) (|bm#0@@14| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (= (type $ly@@89) LayerTypeType) (= (type |bm#0@@14|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnset#canCall| (Lit |bm#0@@14|) (LitInt |i#0@@90|)) (and ($Is |bm#0@@14| (TSeq TBool)) (and (<= (LitInt 0) (LitInt |i#0@@90|)) (< |i#0@@90| (BitmapModel.__default.Len (Lit |bm#0@@14|))))))) (= (BitmapModel.__default.BitUnset ($LS $ly@@89) (Lit |bm#0@@14|) (LitInt |i#0@@90|)) (|Seq#Update| (Lit |bm#0@@14|) (LitInt |i#0@@90|) ($Box (Lit (bool_2_U false)))))) :qid |BitmapMo.30:22| :weight 3 :skolemid |1262| :pattern ( (BitmapModel.__default.BitUnset ($LS $ly@@89) (Lit |bm#0@@14|) (LitInt |i#0@@90|))) ))))
(assert (forall (($ly@@90 T@U) (|bm#0@@15| T@U) (|i#0@@91| Int) ) (!  (=> (and (= (type $ly@@90) LayerTypeType) (= (type |bm#0@@15|) (SeqType BoxType))) (and (=> (BitmapModel.__default.IsSet ($LS $ly@@90) |bm#0@@15| |i#0@@91|) (BitmapModel.__default.IsSet $ly@@90 |bm#0@@15| |i#0@@91|)) (=> (BitmapModel.__default.IsSet $ly@@90 |bm#0@@15| |i#0@@91|) (BitmapModel.__default.IsSet ($LS $ly@@90) |bm#0@@15| |i#0@@91|)))) :qid |BitmapMo.37:23| :skolemid |1263| :pattern ( (BitmapModel.__default.IsSet ($LS $ly@@90) |bm#0@@15| |i#0@@91|)) )))
(assert (forall (($ly@@91 T@U) (|bm#0@@16| T@U) (|i#0@@92| Int) ) (!  (=> (and (= (type $ly@@91) LayerTypeType) (= (type |bm#0@@16|) (SeqType BoxType))) (and (=> (BitmapModel.__default.IsSet $ly@@91 |bm#0@@16| |i#0@@92|) (BitmapModel.__default.IsSet $LZ |bm#0@@16| |i#0@@92|)) (=> (BitmapModel.__default.IsSet $LZ |bm#0@@16| |i#0@@92|) (BitmapModel.__default.IsSet $ly@@91 |bm#0@@16| |i#0@@92|)))) :qid |BitmapMo.37:23| :skolemid |1264| :pattern ( (BitmapModel.__default.IsSet (AsFuelBottom $ly@@91) |bm#0@@16| |i#0@@92|)) )))
(assert  (=> true (forall (($ly@@92 T@U) (|bm#0@@17| T@U) (|i#0@@93| Int) ) (!  (=> (and (and (= (type $ly@@92) LayerTypeType) (= (type |bm#0@@17|) (SeqType BoxType))) (or (|BitmapModel.__default.IsSet#canCall| |bm#0@@17| |i#0@@93|) (and ($Is |bm#0@@17| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (BitmapModel.__default.Len |bm#0@@17|)))))) true) :qid |BitmapMo.37:23| :skolemid |1265| :pattern ( (BitmapModel.__default.IsSet $ly@@92 |bm#0@@17| |i#0@@93|)) ))))
(assert (forall (($ly@@93 T@U) (|bm#0@@18| T@U) (|i#0@@94| Int) ) (!  (=> (and (and (= (type $ly@@93) LayerTypeType) (= (type |bm#0@@18|) (SeqType BoxType))) ($Is |bm#0@@18| (TSeq TBool))) (and (=> (|BitmapModel.__default.IsSet#requires| $ly@@93 |bm#0@@18| |i#0@@94|) (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (BitmapModel.__default.Len |bm#0@@18|)))) (=> (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (BitmapModel.__default.Len |bm#0@@18|))) (|BitmapModel.__default.IsSet#requires| $ly@@93 |bm#0@@18| |i#0@@94|)))) :qid |BitmapMo.37:23| :skolemid |1266| :pattern ( (|BitmapModel.__default.IsSet#requires| $ly@@93 |bm#0@@18| |i#0@@94|)) )))
(assert  (=> true (forall (($ly@@94 T@U) (|bm#0@@19| T@U) (|i#0@@95| Int) ) (!  (=> (and (and (= (type $ly@@94) LayerTypeType) (= (type |bm#0@@19|) (SeqType BoxType))) (or (|BitmapModel.__default.IsSet#canCall| |bm#0@@19| |i#0@@95|) (and ($Is |bm#0@@19| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| (BitmapModel.__default.Len |bm#0@@19|)))))) (and (=> (BitmapModel.__default.IsSet ($LS $ly@@94) |bm#0@@19| |i#0@@95|) (U_2_bool ($Unbox boolType (|Seq#Index| |bm#0@@19| |i#0@@95|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| |bm#0@@19| |i#0@@95|))) (BitmapModel.__default.IsSet ($LS $ly@@94) |bm#0@@19| |i#0@@95|)))) :qid |BitmapMo.37:23| :skolemid |1267| :pattern ( (BitmapModel.__default.IsSet ($LS $ly@@94) |bm#0@@19| |i#0@@95|)) ))))
(assert  (=> true (forall (($ly@@95 T@U) (|bm#0@@20| T@U) (|i#0@@96| Int) ) (!  (=> (and (and (= (type $ly@@95) LayerTypeType) (= (type |bm#0@@20|) (SeqType BoxType))) (or (|BitmapModel.__default.IsSet#canCall| (Lit |bm#0@@20|) (LitInt |i#0@@96|)) (and ($Is |bm#0@@20| (TSeq TBool)) (and (<= (LitInt 0) (LitInt |i#0@@96|)) (< |i#0@@96| (BitmapModel.__default.Len (Lit |bm#0@@20|))))))) (and (=> (BitmapModel.__default.IsSet ($LS $ly@@95) (Lit |bm#0@@20|) (LitInt |i#0@@96|)) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |bm#0@@20|) (LitInt |i#0@@96|))))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |bm#0@@20|) (LitInt |i#0@@96|)))) (BitmapModel.__default.IsSet ($LS $ly@@95) (Lit |bm#0@@20|) (LitInt |i#0@@96|))))) :qid |BitmapMo.37:23| :weight 3 :skolemid |1268| :pattern ( (BitmapModel.__default.IsSet ($LS $ly@@95) (Lit |bm#0@@20|) (LitInt |i#0@@96|))) ))))
(assert (forall ((arg0@@200 T@U) (arg1@@96 Int) ) (! (= (type (BitmapModel.__default.EmptyBitmap arg0@@200 arg1@@96)) (SeqType BoxType)) :qid |funType:BitmapModel.__default.EmptyBitmap| :pattern ( (BitmapModel.__default.EmptyBitmap arg0@@200 arg1@@96)) )))
(assert (forall (($ly@@96 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@96) LayerTypeType) (= (BitmapModel.__default.EmptyBitmap ($LS $ly@@96) |n#0|) (BitmapModel.__default.EmptyBitmap $ly@@96 |n#0|))) :qid |BitmapMo.43:22| :skolemid |1269| :pattern ( (BitmapModel.__default.EmptyBitmap ($LS $ly@@96) |n#0|)) )))
(assert (forall (($ly@@97 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@97) LayerTypeType) (= (BitmapModel.__default.EmptyBitmap $ly@@97 |n#0@@0|) (BitmapModel.__default.EmptyBitmap $LZ |n#0@@0|))) :qid |BitmapMo.43:22| :skolemid |1270| :pattern ( (BitmapModel.__default.EmptyBitmap (AsFuelBottom $ly@@97) |n#0@@0|)) )))
(assert (= (type StartFuel_BitmapModel._default.IsSet) LayerTypeType))
(assert  (=> true (forall (($ly@@98 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@98) LayerTypeType) (or (|BitmapModel.__default.EmptyBitmap#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (BitmapModel.__default.Len (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@97| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (BitmapModel.__default.Len (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|)))) (not (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|) |i#0@@97|))) :qid |BitmapMo.46:18| :skolemid |1271| :pattern ( (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|) |i#0@@97|)) ))) ($Is (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|) (TSeq TBool)))) :qid |BitmapMo.43:22| :skolemid |1272| :pattern ( (BitmapModel.__default.EmptyBitmap $ly@@98 |n#0@@1|)) ))))
(assert (forall (($ly@@99 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@99) LayerTypeType) (and (=> (|BitmapModel.__default.EmptyBitmap#requires| $ly@@99 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|BitmapModel.__default.EmptyBitmap#requires| $ly@@99 |n#0@@2|)))) :qid |BitmapMo.43:22| :skolemid |1273| :pattern ( (|BitmapModel.__default.EmptyBitmap#requires| $ly@@99 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@100 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@100) LayerTypeType) (or (|BitmapModel.__default.EmptyBitmap#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|BitmapModel.__default.EmptyBitmap#canCall| (- |n#0@@3| 1))) (= (BitmapModel.__default.EmptyBitmap ($LS $ly@@100) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (let ((|bm#0@@21| (|Seq#Append| (BitmapModel.__default.EmptyBitmap $ly@@100 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))) |bm#0@@21|))))) :qid |BitmapMo.43:22| :skolemid |1274| :pattern ( (BitmapModel.__default.EmptyBitmap ($LS $ly@@100) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@101 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@101) LayerTypeType) (or (|BitmapModel.__default.EmptyBitmap#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|BitmapModel.__default.EmptyBitmap#canCall| (LitInt (- |n#0@@4| 1)))) (= (BitmapModel.__default.EmptyBitmap ($LS $ly@@101) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|bm#1| (|Seq#Append| (BitmapModel.__default.EmptyBitmap ($LS $ly@@101) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))) |bm#1|))))) :qid |BitmapMo.43:22| :weight 3 :skolemid |1275| :pattern ( (BitmapModel.__default.EmptyBitmap ($LS $ly@@101) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@201 T@U) (arg1@@97 T@U) (arg2@@51 Int) ) (! (= (type (BitmapModel.__default.BitAllocIter arg0@@201 arg1@@97 arg2@@51)) DatatypeTypeType) :qid |funType:BitmapModel.__default.BitAllocIter| :pattern ( (BitmapModel.__default.BitAllocIter arg0@@201 arg1@@97 arg2@@51)) )))
(assert (forall (($ly@@102 T@U) (|bm#0@@22| T@U) (|i#0@@98| Int) ) (!  (=> (and (= (type $ly@@102) LayerTypeType) (= (type |bm#0@@22|) (SeqType BoxType))) (= (BitmapModel.__default.BitAllocIter ($LS $ly@@102) |bm#0@@22| |i#0@@98|) (BitmapModel.__default.BitAllocIter $ly@@102 |bm#0@@22| |i#0@@98|))) :qid |BitmapMo.64:12| :skolemid |1276| :pattern ( (BitmapModel.__default.BitAllocIter ($LS $ly@@102) |bm#0@@22| |i#0@@98|)) )))
(assert (forall (($ly@@103 T@U) (|bm#0@@23| T@U) (|i#0@@99| Int) ) (!  (=> (and (= (type $ly@@103) LayerTypeType) (= (type |bm#0@@23|) (SeqType BoxType))) (= (BitmapModel.__default.BitAllocIter $ly@@103 |bm#0@@23| |i#0@@99|) (BitmapModel.__default.BitAllocIter $LZ |bm#0@@23| |i#0@@99|))) :qid |BitmapMo.64:12| :skolemid |1277| :pattern ( (BitmapModel.__default.BitAllocIter (AsFuelBottom $ly@@103) |bm#0@@23| |i#0@@99|)) )))
(assert  (=> true (forall (($ly@@104 T@U) (|bm#0@@24| T@U) (|i#0@@100| Int) ) (!  (=> (and (and (= (type $ly@@104) LayerTypeType) (= (type |bm#0@@24|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAllocIter#canCall| |bm#0@@24| |i#0@@100|) (and ($Is |bm#0@@24| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@100|) (<= |i#0@@100| (|Seq#Length| |bm#0@@24|)))))) (and (=> (Options.Option.Some_q (BitmapModel.__default.BitAllocIter $ly@@104 |bm#0@@24| |i#0@@100|)) (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (BitmapModel.__default.BitAllocIter $ly@@104 |bm#0@@24| |i#0@@100|))))) (< (U_2_int ($Unbox intType (Options.Option.value (BitmapModel.__default.BitAllocIter $ly@@104 |bm#0@@24| |i#0@@100|)))) (|Seq#Length| |bm#0@@24|)))) ($Is (BitmapModel.__default.BitAllocIter $ly@@104 |bm#0@@24| |i#0@@100|) (Tclass.Options.Option TInt)))) :qid |BitmapMo.64:12| :skolemid |1278| :pattern ( (BitmapModel.__default.BitAllocIter $ly@@104 |bm#0@@24| |i#0@@100|)) ))))
(assert (forall (($ly@@105 T@U) (|bm#0@@25| T@U) (|i#0@@101| Int) ) (!  (=> (and (and (= (type $ly@@105) LayerTypeType) (= (type |bm#0@@25|) (SeqType BoxType))) ($Is |bm#0@@25| (TSeq TBool))) (and (=> (|BitmapModel.__default.BitAllocIter#requires| $ly@@105 |bm#0@@25| |i#0@@101|) (and (<= (LitInt 0) |i#0@@101|) (<= |i#0@@101| (|Seq#Length| |bm#0@@25|)))) (=> (and (<= (LitInt 0) |i#0@@101|) (<= |i#0@@101| (|Seq#Length| |bm#0@@25|))) (|BitmapModel.__default.BitAllocIter#requires| $ly@@105 |bm#0@@25| |i#0@@101|)))) :qid |BitmapMo.64:12| :skolemid |1279| :pattern ( (|BitmapModel.__default.BitAllocIter#requires| $ly@@105 |bm#0@@25| |i#0@@101|)) )))
(assert  (=> true (forall (($ly@@106 T@U) (|bm#0@@26| T@U) (|i#0@@102| Int) ) (!  (=> (and (and (= (type $ly@@106) LayerTypeType) (= (type |bm#0@@26|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAllocIter#canCall| |bm#0@@26| |i#0@@102|) (and ($Is |bm#0@@26| (TSeq TBool)) (and (<= (LitInt 0) |i#0@@102|) (<= |i#0@@102| (|Seq#Length| |bm#0@@26|)))))) (and (=> (not (= |i#0@@102| (|Seq#Length| |bm#0@@26|))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| |bm#0@@26| |i#0@@102|))) (|BitmapModel.__default.BitAllocIter#canCall| |bm#0@@26| (+ |i#0@@102| 1)))) (= (BitmapModel.__default.BitAllocIter ($LS $ly@@106) |bm#0@@26| |i#0@@102|) (ite (= |i#0@@102| (|Seq#Length| |bm#0@@26|)) |#Options.Option.None| (ite  (not (U_2_bool ($Unbox boolType (|Seq#Index| |bm#0@@26| |i#0@@102|)))) (|#Options.Option.Some| ($Box (int_2_U |i#0@@102|))) (BitmapModel.__default.BitAllocIter $ly@@106 |bm#0@@26| (+ |i#0@@102| 1))))))) :qid |BitmapMo.64:12| :skolemid |1280| :pattern ( (BitmapModel.__default.BitAllocIter ($LS $ly@@106) |bm#0@@26| |i#0@@102|)) ))))
(assert  (=> true (forall (($ly@@107 T@U) (|bm#0@@27| T@U) (|i#0@@103| Int) ) (!  (=> (and (and (= (type $ly@@107) LayerTypeType) (= (type |bm#0@@27|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAllocIter#canCall| (Lit |bm#0@@27|) (LitInt |i#0@@103|)) (and ($Is |bm#0@@27| (TSeq TBool)) (and (<= (LitInt 0) (LitInt |i#0@@103|)) (<= (LitInt |i#0@@103|) (|Seq#Length| (Lit |bm#0@@27|))))))) (and (=> (not (= (LitInt |i#0@@103|) (|Seq#Length| (Lit |bm#0@@27|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |bm#0@@27|) (LitInt |i#0@@103|)))) (|BitmapModel.__default.BitAllocIter#canCall| (Lit |bm#0@@27|) (LitInt (+ |i#0@@103| 1))))) (= (BitmapModel.__default.BitAllocIter ($LS $ly@@107) (Lit |bm#0@@27|) (LitInt |i#0@@103|)) (ite (= (LitInt |i#0@@103|) (|Seq#Length| (Lit |bm#0@@27|))) |#Options.Option.None| (ite  (not (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |bm#0@@27|) (LitInt |i#0@@103|))))) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@103|)))) (BitmapModel.__default.BitAllocIter ($LS $ly@@107) (Lit |bm#0@@27|) (LitInt (+ |i#0@@103| 1)))))))) :qid |BitmapMo.64:12| :weight 3 :skolemid |1281| :pattern ( (BitmapModel.__default.BitAllocIter ($LS $ly@@107) (Lit |bm#0@@27|) (LitInt |i#0@@103|))) ))))
(assert (forall ((arg0@@202 T@U) (arg1@@98 T@U) ) (! (= (type (BitmapModel.__default.BitAlloc arg0@@202 arg1@@98)) DatatypeTypeType) :qid |funType:BitmapModel.__default.BitAlloc| :pattern ( (BitmapModel.__default.BitAlloc arg0@@202 arg1@@98)) )))
(assert (forall (($ly@@108 T@U) (|bm#0@@28| T@U) ) (!  (=> (and (= (type $ly@@108) LayerTypeType) (= (type |bm#0@@28|) (SeqType BoxType))) (= (BitmapModel.__default.BitAlloc ($LS $ly@@108) |bm#0@@28|) (BitmapModel.__default.BitAlloc $ly@@108 |bm#0@@28|))) :qid |BitmapMo.78:22| :skolemid |1282| :pattern ( (BitmapModel.__default.BitAlloc ($LS $ly@@108) |bm#0@@28|)) )))
(assert (forall (($ly@@109 T@U) (|bm#0@@29| T@U) ) (!  (=> (and (= (type $ly@@109) LayerTypeType) (= (type |bm#0@@29|) (SeqType BoxType))) (= (BitmapModel.__default.BitAlloc $ly@@109 |bm#0@@29|) (BitmapModel.__default.BitAlloc $LZ |bm#0@@29|))) :qid |BitmapMo.78:22| :skolemid |1283| :pattern ( (BitmapModel.__default.BitAlloc (AsFuelBottom $ly@@109) |bm#0@@29|)) )))
(assert  (=> true (forall (($ly@@110 T@U) (|bm#0@@30| T@U) ) (!  (=> (and (and (= (type $ly@@110) LayerTypeType) (= (type |bm#0@@30|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAlloc#canCall| |bm#0@@30|) ($Is |bm#0@@30| (TSeq TBool)))) (and (=> (Options.Option.Some_q (BitmapModel.__default.BitAlloc $ly@@110 |bm#0@@30|)) (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (BitmapModel.__default.BitAlloc $ly@@110 |bm#0@@30|))))) (< (U_2_int ($Unbox intType (Options.Option.value (BitmapModel.__default.BitAlloc $ly@@110 |bm#0@@30|)))) (BitmapModel.__default.Len |bm#0@@30|)))) ($Is (BitmapModel.__default.BitAlloc $ly@@110 |bm#0@@30|) (Tclass.Options.Option TInt)))) :qid |BitmapMo.78:22| :skolemid |1284| :pattern ( (BitmapModel.__default.BitAlloc $ly@@110 |bm#0@@30|)) ))))
(assert (forall (($ly@@111 T@U) (|bm#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@111) LayerTypeType) (= (type |bm#0@@31|) (SeqType BoxType))) ($Is |bm#0@@31| (TSeq TBool))) (and (=> (|BitmapModel.__default.BitAlloc#requires| $ly@@111 |bm#0@@31|) true) (=> true (|BitmapModel.__default.BitAlloc#requires| $ly@@111 |bm#0@@31|)))) :qid |BitmapMo.78:22| :skolemid |1285| :pattern ( (|BitmapModel.__default.BitAlloc#requires| $ly@@111 |bm#0@@31|)) )))
(assert  (=> true (forall (($ly@@112 T@U) (|bm#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@112) LayerTypeType) (= (type |bm#0@@32|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAlloc#canCall| |bm#0@@32|) ($Is |bm#0@@32| (TSeq TBool)))) (and (|BitmapModel.__default.BitAllocIter#canCall| |bm#0@@32| (LitInt 0)) (= (BitmapModel.__default.BitAlloc ($LS $ly@@112) |bm#0@@32|) (BitmapModel.__default.BitAllocIter ($LS $LZ) |bm#0@@32| (LitInt 0))))) :qid |BitmapMo.78:22| :skolemid |1286| :pattern ( (BitmapModel.__default.BitAlloc ($LS $ly@@112) |bm#0@@32|)) ))))
(assert  (=> true (forall (($ly@@113 T@U) (|bm#0@@33| T@U) ) (!  (=> (and (and (= (type $ly@@113) LayerTypeType) (= (type |bm#0@@33|) (SeqType BoxType))) (or (|BitmapModel.__default.BitAlloc#canCall| (Lit |bm#0@@33|)) ($Is |bm#0@@33| (TSeq TBool)))) (and (|BitmapModel.__default.BitAllocIter#canCall| (Lit |bm#0@@33|) (LitInt 0)) (= (BitmapModel.__default.BitAlloc ($LS $ly@@113) (Lit |bm#0@@33|)) (Lit (BitmapModel.__default.BitAllocIter ($LS $LZ) (Lit |bm#0@@33|) (LitInt 0)))))) :qid |BitmapMo.78:22| :weight 3 :skolemid |1287| :pattern ( (BitmapModel.__default.BitAlloc ($LS $ly@@113) (Lit |bm#0@@33|))) ))))
(assert (forall ((arg0@@203 T@U) (arg1@@99 T@U) (arg2@@52 T@U) ) (! (= (type (BitmapModel.__default.BitUnion arg0@@203 arg1@@99 arg2@@52)) (SeqType BoxType)) :qid |funType:BitmapModel.__default.BitUnion| :pattern ( (BitmapModel.__default.BitUnion arg0@@203 arg1@@99 arg2@@52)) )))
(assert (forall (($ly@@114 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (= (type $ly@@114) LayerTypeType) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (= (BitmapModel.__default.BitUnion ($LS $ly@@114) |a#0@@72| |b#0@@46|) (BitmapModel.__default.BitUnion $ly@@114 |a#0@@72| |b#0@@46|))) :qid |BitmapMo.84:22| :skolemid |1288| :pattern ( (BitmapModel.__default.BitUnion ($LS $ly@@114) |a#0@@72| |b#0@@46|)) )))
(assert (forall (($ly@@115 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@115) LayerTypeType) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (= (BitmapModel.__default.BitUnion $ly@@115 |a#0@@73| |b#0@@47|) (BitmapModel.__default.BitUnion $LZ |a#0@@73| |b#0@@47|))) :qid |BitmapMo.84:22| :skolemid |1289| :pattern ( (BitmapModel.__default.BitUnion (AsFuelBottom $ly@@115) |a#0@@73| |b#0@@47|)) )))
(assert  (=> true (forall (($ly@@116 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@116) LayerTypeType) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnion#canCall| |a#0@@74| |b#0@@48|) (and (and ($Is |a#0@@74| (TSeq TBool)) ($Is |b#0@@48| (TSeq TBool))) (= (BitmapModel.__default.Len |a#0@@74|) (BitmapModel.__default.Len |b#0@@48|))))) (and (and (= (BitmapModel.__default.Len (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|)) (BitmapModel.__default.Len |a#0@@74|)) (forall ((|i#0@@104| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| (BitmapModel.__default.Len (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|)))) (and (=> (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|) |i#0@@104|) (or (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |a#0@@74| |i#0@@104|) (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |b#0@@48| |i#0@@104|))) (=> (or (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |a#0@@74| |i#0@@104|) (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |b#0@@48| |i#0@@104|)) (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|) |i#0@@104|)))) :qid |BitmapMo.87:18| :skolemid |1290| :pattern ( (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |b#0@@48| |i#0@@104|)) :pattern ( (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet |a#0@@74| |i#0@@104|)) :pattern ( (BitmapModel.__default.IsSet StartFuel_BitmapModel._default.IsSet (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|) |i#0@@104|)) ))) ($Is (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|) (TSeq TBool)))) :qid |BitmapMo.84:22| :skolemid |1291| :pattern ( (BitmapModel.__default.BitUnion $ly@@116 |a#0@@74| |b#0@@48|)) ))))
(assert (forall (($ly@@117 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (= (type $ly@@117) LayerTypeType) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (and ($Is |a#0@@75| (TSeq TBool)) ($Is |b#0@@49| (TSeq TBool)))) (and (=> (|BitmapModel.__default.BitUnion#requires| $ly@@117 |a#0@@75| |b#0@@49|) (= (BitmapModel.__default.Len |a#0@@75|) (BitmapModel.__default.Len |b#0@@49|))) (=> (= (BitmapModel.__default.Len |a#0@@75|) (BitmapModel.__default.Len |b#0@@49|)) (|BitmapModel.__default.BitUnion#requires| $ly@@117 |a#0@@75| |b#0@@49|)))) :qid |BitmapMo.84:22| :skolemid |1292| :pattern ( (|BitmapModel.__default.BitUnion#requires| $ly@@117 |a#0@@75| |b#0@@49|)) )))
(assert  (and (= (type MoreFuel_BitmapModel._default.IsSet0) LayerTypeType) (= (type StartFuelAssert_BitmapModel._default.IsSet) LayerTypeType)))
(assert  (=> true (forall (($ly@@118 T@U) (|a#0@@76| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@118) LayerTypeType) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnion#canCall| |a#0@@76| |b#0@@50|) (and (and ($Is |a#0@@76| (TSeq TBool)) ($Is |b#0@@50| (TSeq TBool))) (= (BitmapModel.__default.Len |a#0@@76|) (BitmapModel.__default.Len |b#0@@50|))))) (and (=> (not (= (|Seq#Length| |a#0@@76|) (LitInt 0))) (|BitmapModel.__default.BitUnion#canCall| (|Seq#Take| |a#0@@76| (- (|Seq#Length| |a#0@@76|) 1)) (|Seq#Take| |b#0@@50| (- (|Seq#Length| |b#0@@50|) 1)))) (and (and (and (= StartFuel_BitmapModel._default.IsSet ($LS MoreFuel_BitmapModel._default.IsSet0)) (= StartFuelAssert_BitmapModel._default.IsSet ($LS ($LS MoreFuel_BitmapModel._default.IsSet0)))) (= (AsFuelBottom MoreFuel_BitmapModel._default.IsSet0) MoreFuel_BitmapModel._default.IsSet0)) (= (BitmapModel.__default.BitUnion ($LS $ly@@118) |a#0@@76| |b#0@@50|) (ite (= (|Seq#Length| |a#0@@76|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|res#0| (|Seq#Append| (BitmapModel.__default.BitUnion $ly@@118 (|Seq#Take| |a#0@@76| (- (|Seq#Length| |a#0@@76|) 1)) (|Seq#Take| |b#0@@50| (- (|Seq#Length| |b#0@@50|) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U  (or (U_2_bool ($Unbox boolType (|Seq#Index| |a#0@@76| (- (|Seq#Length| |a#0@@76|) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| |b#0@@50| (- (|Seq#Length| |b#0@@50|) 1))))))))))) |res#0|)))))) :qid |BitmapMo.84:22| :skolemid |1293| :pattern ( (BitmapModel.__default.BitUnion ($LS $ly@@118) |a#0@@76| |b#0@@50|)) ))))
(assert (= (type MoreFuel_BitmapModel._default.IsSet1) LayerTypeType))
(assert  (=> true (forall (($ly@@119 T@U) (|a#0@@77| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@119) LayerTypeType) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@51|) (SeqType BoxType))) (or (|BitmapModel.__default.BitUnion#canCall| (Lit |a#0@@77|) (Lit |b#0@@51|)) (and (and ($Is |a#0@@77| (TSeq TBool)) ($Is |b#0@@51| (TSeq TBool))) (= (LitInt (BitmapModel.__default.Len (Lit |a#0@@77|))) (LitInt (BitmapModel.__default.Len (Lit |b#0@@51|))))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@77|)) (LitInt 0))) (|BitmapModel.__default.BitUnion#canCall| (|Seq#Take| (Lit |a#0@@77|) (- (|Seq#Length| (Lit |a#0@@77|)) 1)) (|Seq#Take| (Lit |b#0@@51|) (- (|Seq#Length| (Lit |b#0@@51|)) 1)))) (and (and (and (= StartFuel_BitmapModel._default.IsSet ($LS MoreFuel_BitmapModel._default.IsSet1)) (= StartFuelAssert_BitmapModel._default.IsSet ($LS ($LS MoreFuel_BitmapModel._default.IsSet1)))) (= (AsFuelBottom MoreFuel_BitmapModel._default.IsSet1) MoreFuel_BitmapModel._default.IsSet1)) (= (BitmapModel.__default.BitUnion ($LS $ly@@119) (Lit |a#0@@77|) (Lit |b#0@@51|)) (ite (= (|Seq#Length| (Lit |a#0@@77|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|res#1| (|Seq#Append| (BitmapModel.__default.BitUnion ($LS $ly@@119) (|Seq#Take| (Lit |a#0@@77|) (- (|Seq#Length| (Lit |a#0@@77|)) 1)) (|Seq#Take| (Lit |b#0@@51|) (- (|Seq#Length| (Lit |b#0@@51|)) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U  (or (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |a#0@@77|) (- (|Seq#Length| (Lit |a#0@@77|)) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |b#0@@51|) (- (|Seq#Length| (Lit |b#0@@51|)) 1))))))))))) |res#1|)))))) :qid |BitmapMo.84:22| :weight 3 :skolemid |1294| :pattern ( (BitmapModel.__default.BitUnion ($LS $ly@@119) (Lit |a#0@@77|) (Lit |b#0@@51|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@204 T@T) (arg1@@100 T@T) ) (! (= (Ctor (MapType5Type arg0@@204 arg1@@100)) 25) :qid |ctor:MapType5Type| )) (forall ((arg0@@205 T@T) (arg1@@101 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@205 arg1@@101)) arg0@@205) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@205 arg1@@101)) ))) (forall ((arg0@@206 T@T) (arg1@@102 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@206 arg1@@102)) arg1@@102) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@206 arg1@@102)) ))) (forall ((arg0@@207 T@U) (arg1@@103 T@U) (arg2@@53 T@U) ) (! (let ((aVar1@@5 (MapType5TypeInv1 (type arg0@@207)))) (= (type (MapType5Select arg0@@207 arg1@@103 arg2@@53)) aVar1@@5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@207 arg1@@103 arg2@@53)) ))) (forall ((arg0@@208 T@U) (arg1@@104 T@U) (arg2@@54 T@U) (arg3@@27 T@U) ) (! (let ((aVar1@@6 (type arg3@@27))) (let ((aVar0@@3 (type arg1@@104))) (= (type (MapType5Store arg0@@208 arg1@@104 arg2@@54 arg3@@27)) (MapType5Type aVar0@@3 aVar1@@6)))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@208 arg1@@104 arg2@@54 arg3@@27)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (val@@21 T@U) ) (! (let ((aVar1@@7 (MapType5TypeInv1 (type m@@42)))) (=> (= (type val@@21) aVar1@@7) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 val@@21) x0@@20 x1@@14) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (y0@@15 T@U) (y1@@11 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 val@@22) y0@@15 y1@@11) (MapType5Select m@@43 y0@@15 y1@@11))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (y0@@16 T@U) (y1@@12 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 val@@23) y0@@16 y1@@12) (MapType5Select m@@44 y0@@16 y1@@12))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (y0@@17 T@U) (y1@@13 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 val@@24) y0@@17 y1@@13) (MapType5Select m@@45 y0@@17 y1@@13))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@209 T@U) (arg1@@105 T@U) (arg2@@55 T@U) (arg3@@28 Bool) ) (! (= (type (|lambda#0| arg0@@209 arg1@@105 arg2@@55 arg3@@28)) (MapType5Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@209 arg1@@105 arg2@@55 arg3@@28)) ))))
(assert (forall (($o@@48 T@U) ($f@@4 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@48 $f@@4))  (=> (and (not (= $o@@48 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@48) |l#2|))) |l#3|)))) :qid |BitmapIm.19:12| :skolemid |1303| :pattern ( (MapType5Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@48 $f@@4)) )))
(assert (forall ((arg0@@210 T@U) (arg1@@106 T@U) (arg2@@56 T@U) (arg3@@29 Bool) ) (! (= (type (|lambda#1| arg0@@210 arg1@@106 arg2@@56 arg3@@29)) (MapType5Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@210 arg1@@106 arg2@@56 arg3@@29)) )))
(assert (forall (($o@@49 T@U) ($f@@5 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@49 $f@@5))  (=> (and (not (= $o@@49 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@49) |l#2@@0|))) |l#3@@0|)))) :qid |BitmapIm.30:22| :skolemid |1304| :pattern ( (MapType5Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@49 $f@@5)) )))
(assert (forall ((arg0@@211 T@U) (arg1@@107 T@U) (arg2@@57 T@U) (arg3@@30 Bool) ) (! (= (type (|lambda#2| arg0@@211 arg1@@107 arg2@@57 arg3@@30)) (MapType5Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@211 arg1@@107 arg2@@57 arg3@@30)) )))
(assert (forall (($o@@50 T@U) ($f@@6 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@50 $f@@6))  (=> (and (not (= $o@@50 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@50) |l#2@@1|))) |l#3@@1|)))) :qid |BitmapIm.30:22| :skolemid |1305| :pattern ( (MapType5Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@50 $f@@6)) )))
(assert (forall ((arg0@@212 T@U) (arg1@@108 T@U) (arg2@@58 T@U) (arg3@@31 Bool) ) (! (= (type (|lambda#3| arg0@@212 arg1@@108 arg2@@58 arg3@@31)) (MapType5Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@212 arg1@@108 arg2@@58 arg3@@31)) )))
(assert (forall (($o@@51 T@U) ($f@@7 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@51 $f@@7))  (=> (and (not (= $o@@51 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@51) |l#2@@2|))) |l#3@@2|)))) :qid |BitmapIm.36:11| :skolemid |1306| :pattern ( (MapType5Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@51 $f@@7)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@109 T@U) (arg2@@59 T@U) (arg3@@32 Bool) ) (! (= (type (|lambda#4| arg0@@213 arg1@@109 arg2@@59 arg3@@32)) (MapType5Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@213 arg1@@109 arg2@@59 arg3@@32)) )))
(assert (forall (($o@@52 T@U) ($f@@8 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@52 $f@@8))  (=> (and (not (= $o@@52 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@52) |l#2@@3|))) |l#3@@3|)))) :qid |BitmapIm.36:11| :skolemid |1307| :pattern ( (MapType5Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@52 $f@@8)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@110 T@U) (arg2@@60 T@U) (arg3@@33 Bool) ) (! (= (type (|lambda#5| arg0@@214 arg1@@110 arg2@@60 arg3@@33)) (MapType5Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@214 arg1@@110 arg2@@60 arg3@@33)) )))
(assert (forall (($o@@53 T@U) ($f@@9 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@53 $f@@9))  (=> (and (not (= $o@@53 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@53) |l#2@@4|))) |l#3@@4|)))) :qid |BitmapIm.45:22| :skolemid |1308| :pattern ( (MapType5Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@53 $f@@9)) )))
(assert (forall ((arg0@@215 T@U) (arg1@@111 T@U) (arg2@@61 T@U) (arg3@@34 Bool) ) (! (= (type (|lambda#6| arg0@@215 arg1@@111 arg2@@61 arg3@@34)) (MapType5Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@215 arg1@@111 arg2@@61 arg3@@34)) )))
(assert (forall (($o@@54 T@U) ($f@@10 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@54 $f@@10))  (=> (and (not (= $o@@54 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@54) |l#2@@5|))) |l#3@@5|)))) :qid |BitmapIm.45:22| :skolemid |1309| :pattern ( (MapType5Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@54 $f@@10)) )))
(assert (forall ((arg0@@216 T@U) (arg1@@112 T@U) (arg2@@62 T@U) (arg3@@35 Bool) ) (! (= (type (|lambda#7| arg0@@216 arg1@@112 arg2@@62 arg3@@35)) (MapType5Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@216 arg1@@112 arg2@@62 arg3@@35)) )))
(assert (forall (($o@@55 T@U) ($f@@11 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@55 $f@@11))  (=> (and (not (= $o@@55 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@55) |l#2@@6|))) |l#3@@6|)))) :qid |BitmapIm.52:22| :skolemid |1310| :pattern ( (MapType5Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@55 $f@@11)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@113 T@U) (arg2@@63 T@U) (arg3@@36 Bool) ) (! (= (type (|lambda#8| arg0@@217 arg1@@113 arg2@@63 arg3@@36)) (MapType5Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@217 arg1@@113 arg2@@63 arg3@@36)) )))
(assert (forall (($o@@56 T@U) ($f@@12 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@56 $f@@12))  (=> (and (not (= $o@@56 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@56) |l#2@@7|))) |l#3@@7|)))) :qid |BitmapIm.52:22| :skolemid |1311| :pattern ( (MapType5Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@56 $f@@12)) )))
(assert (forall ((arg0@@218 T@U) (arg1@@114 T@U) (arg2@@64 T@U) (arg3@@37 T@U) (arg4@@16 T@U) ) (! (= (type (|lambda#9| arg0@@218 arg1@@114 arg2@@64 arg3@@37 arg4@@16)) (MapType5Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@218 arg1@@114 arg2@@64 arg3@@37 arg4@@16)) )))
(assert (forall (($o@@57 T@U) ($f@@13 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| T@U) (|l#4| T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (and (and (= (type $o@@57) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type |l#3@@8|) refType)) (= (type |l#4|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8| |l#4|) $o@@57 $f@@13))  (=> (and (not (= $o@@57 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@57) |l#2@@8|))) (or (= $o@@57 |l#3@@8|) (U_2_bool (MapType0Select |l#4| ($Box $o@@57)))))))) :qid |BitmapIm.63:15| :skolemid |1312| :pattern ( (MapType5Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8| |l#4|) $o@@57 $f@@13)) )))
(assert (forall ((arg0@@219 T@U) (arg1@@115 T@U) (arg2@@65 T@U) (arg3@@38 T@U) (arg4@@17 T@U) ) (! (= (type (|lambda#10| arg0@@219 arg1@@115 arg2@@65 arg3@@38 arg4@@17)) (MapType5Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@219 arg1@@115 arg2@@65 arg3@@38 arg4@@17)) )))
(assert (forall (($o@@58 T@U) ($f@@14 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| T@U) (|l#4@@0| T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (and (and (= (type $o@@58) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type |l#3@@9|) refType)) (= (type |l#4@@0|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9| |l#4@@0|) $o@@58 $f@@14))  (=> (and (not (= $o@@58 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@58) |l#2@@9|))) (or (= $o@@58 |l#3@@9|) (U_2_bool (MapType0Select |l#4@@0| ($Box $o@@58)))))))) :qid |BitmapIm.63:15| :skolemid |1313| :pattern ( (MapType5Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9| |l#4@@0|) $o@@58 $f@@14)) )))
(assert (forall ((arg0@@220 T@U) (arg1@@116 T@U) (arg2@@66 T@U) (arg3@@39 T@U) (arg4@@18 T@U) ) (! (= (type (|lambda#11| arg0@@220 arg1@@116 arg2@@66 arg3@@39 arg4@@18)) (MapType5Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@220 arg1@@116 arg2@@66 arg3@@39 arg4@@18)) )))
(assert (forall (($o@@59 T@U) ($f@@15 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| T@U) (|l#4@@1| T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (and (and (= (type $o@@59) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type |l#3@@10|) refType)) (= (type |l#4@@1|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10| |l#4@@1|) $o@@59 $f@@15))  (=> (and (not (= $o@@59 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@59) |l#2@@10|))) (or (= $o@@59 |l#3@@10|) (U_2_bool (MapType0Select |l#4@@1| ($Box $o@@59)))))))) :qid |BitmapIm.69:25| :skolemid |1314| :pattern ( (MapType5Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10| |l#4@@1|) $o@@59 $f@@15)) )))
(assert (forall ((arg0@@221 T@U) (arg1@@117 T@U) (arg2@@67 T@U) (arg3@@40 T@U) (arg4@@19 T@U) ) (! (= (type (|lambda#12| arg0@@221 arg1@@117 arg2@@67 arg3@@40 arg4@@19)) (MapType5Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@221 arg1@@117 arg2@@67 arg3@@40 arg4@@19)) )))
(assert (forall (($o@@60 T@U) ($f@@16 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| T@U) (|l#4@@2| T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (and (and (= (type $o@@60) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type |l#3@@11|) refType)) (= (type |l#4@@2|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11| |l#4@@2|) $o@@60 $f@@16))  (=> (and (not (= $o@@60 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@60) |l#2@@11|))) (or (= $o@@60 |l#3@@11|) (U_2_bool (MapType0Select |l#4@@2| ($Box $o@@60)))))))) :qid |BitmapIm.69:25| :skolemid |1315| :pattern ( (MapType5Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11| |l#4@@2|) $o@@60 $f@@16)) )))
(assert (forall ((arg0@@222 T@U) (arg1@@118 T@U) (arg2@@68 T@U) (arg3@@41 Bool) ) (! (= (type (|lambda#13| arg0@@222 arg1@@118 arg2@@68 arg3@@41)) (MapType5Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@222 arg1@@118 arg2@@68 arg3@@41)) )))
(assert (forall (($o@@61 T@U) ($f@@17 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@61 $f@@17))  (=> (and (not (= $o@@61 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@61) |l#2@@12|))) |l#3@@12|)))) :qid |BitmapIm.77:31| :skolemid |1316| :pattern ( (MapType5Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@61 $f@@17)) )))
(assert (forall ((arg0@@223 T@U) (arg1@@119 T@U) (arg2@@69 T@U) (arg3@@42 Bool) ) (! (= (type (|lambda#14| arg0@@223 arg1@@119 arg2@@69 arg3@@42)) (MapType5Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@223 arg1@@119 arg2@@69 arg3@@42)) )))
(assert (forall (($o@@62 T@U) ($f@@18 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@62 $f@@18))  (=> (and (not (= $o@@62 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@62) |l#2@@13|))) |l#3@@13|)))) :qid |BitmapIm.77:31| :skolemid |1317| :pattern ( (MapType5Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@62 $f@@18)) )))
(assert (forall ((arg0@@224 T@U) (arg1@@120 T@U) (arg2@@70 T@U) (arg3@@43 T@U) (arg4@@20 T@U) ) (! (= (type (|lambda#15| arg0@@224 arg1@@120 arg2@@70 arg3@@43 arg4@@20)) (MapType5Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@224 arg1@@120 arg2@@70 arg3@@43 arg4@@20)) )))
(assert (forall (($o@@63 T@U) ($f@@19 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| T@U) (|l#4@@3| T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (and (and (= (type $o@@63) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type |l#3@@14|) refType)) (= (type |l#4@@3|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14| |l#4@@3|) $o@@63 $f@@19))  (=> (and (not (= $o@@63 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@63) |l#2@@14|))) (or (= $o@@63 |l#3@@14|) (U_2_bool (MapType0Select |l#4@@3| ($Box $o@@63)))))))) :qid |BitmapIm.85:24| :skolemid |1318| :pattern ( (MapType5Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14| |l#4@@3|) $o@@63 $f@@19)) )))
(assert (forall ((arg0@@225 T@U) (arg1@@121 T@U) (arg2@@71 T@U) (arg3@@44 T@U) (arg4@@21 T@U) ) (! (= (type (|lambda#16| arg0@@225 arg1@@121 arg2@@71 arg3@@44 arg4@@21)) (MapType5Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@225 arg1@@121 arg2@@71 arg3@@44 arg4@@21)) )))
(assert (forall (($o@@64 T@U) ($f@@20 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| T@U) (|l#4@@4| T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (and (and (= (type $o@@64) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type |l#3@@15|) refType)) (= (type |l#4@@4|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15| |l#4@@4|) $o@@64 $f@@20))  (=> (and (not (= $o@@64 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@64) |l#2@@15|))) (or (= $o@@64 |l#3@@15|) (U_2_bool (MapType0Select |l#4@@4| ($Box $o@@64)))))))) :qid |BitmapIm.85:24| :skolemid |1319| :pattern ( (MapType5Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15| |l#4@@4|) $o@@64 $f@@20)) )))
(assert (forall ((arg0@@226 T@U) (arg1@@122 T@U) (arg2@@72 T@U) (arg3@@45 Bool) ) (! (= (type (|lambda#17| arg0@@226 arg1@@122 arg2@@72 arg3@@45)) (MapType5Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@226 arg1@@122 arg2@@72 arg3@@45)) )))
(assert (forall (($o@@65 T@U) ($f@@21 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@65 $f@@21))  (=> (and (not (= $o@@65 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@65) |l#2@@16|))) |l#3@@16|)))) :qid |BitmapIm.92:5| :skolemid |1320| :pattern ( (MapType5Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@65 $f@@21)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@123 T@U) (arg2@@73 T@U) (arg3@@46 Bool) ) (! (= (type (|lambda#18| arg0@@227 arg1@@123 arg2@@73 arg3@@46)) (MapType5Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@227 arg1@@123 arg2@@73 arg3@@46)) )))
(assert (forall (($o@@66 T@U) ($f@@22 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@66 $f@@22))  (=> (and (not (= $o@@66 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@66) |l#2@@17|))) |l#3@@17|)))) :qid |BitmapIm.92:5| :skolemid |1321| :pattern ( (MapType5Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@66 $f@@22)) )))
(assert (forall ((arg0@@228 T@U) (arg1@@124 T@U) (arg2@@74 T@U) (arg3@@47 Bool) ) (! (= (type (|lambda#19| arg0@@228 arg1@@124 arg2@@74 arg3@@47)) (MapType5Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@228 arg1@@124 arg2@@74 arg3@@47)) )))
(assert (forall (($o@@67 T@U) ($f@@23 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@67 $f@@23))  (=> (and (not (= $o@@67 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@67) |l#2@@18|))) |l#3@@18|)))) :qid |BitmapIm.118:28| :skolemid |1322| :pattern ( (MapType5Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@67 $f@@23)) )))
(assert (forall ((arg0@@229 T@U) (arg1@@125 T@U) (arg2@@75 T@U) (arg3@@48 Bool) ) (! (= (type (|lambda#20| arg0@@229 arg1@@125 arg2@@75 arg3@@48)) (MapType5Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@229 arg1@@125 arg2@@75 arg3@@48)) )))
(assert (forall (($o@@68 T@U) ($f@@24 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@68 $f@@24))  (=> (and (not (= $o@@68 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@68) |l#2@@19|))) |l#3@@19|)))) :qid |BitmapIm.118:28| :skolemid |1323| :pattern ( (MapType5Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@68 $f@@24)) )))
(assert (forall ((arg0@@230 T@U) (arg1@@126 T@U) (arg2@@76 T@U) (arg3@@49 T@U) (arg4@@22 T@U) ) (! (= (type (|lambda#21| arg0@@230 arg1@@126 arg2@@76 arg3@@49 arg4@@22)) (MapType5Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@230 arg1@@126 arg2@@76 arg3@@49 arg4@@22)) )))
(assert (forall (($o@@69 T@U) ($f@@25 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| T@U) (|l#4@@5| T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (and (and (= (type $o@@69) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type |l#3@@20|) refType)) (= (type |l#4@@5|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20| |l#4@@5|) $o@@69 $f@@25))  (=> (and (not (= $o@@69 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@69) |l#2@@20|))) (or (= $o@@69 |l#3@@20|) (U_2_bool (MapType0Select |l#4@@5| ($Box $o@@69)))))))) :qid |BitmapIm.124:12| :skolemid |1324| :pattern ( (MapType5Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20| |l#4@@5|) $o@@69 $f@@25)) )))
(assert (forall ((arg0@@231 T@U) (arg1@@127 T@U) (arg2@@77 T@U) (arg3@@50 T@U) (arg4@@23 T@U) ) (! (= (type (|lambda#22| arg0@@231 arg1@@127 arg2@@77 arg3@@50 arg4@@23)) (MapType5Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@231 arg1@@127 arg2@@77 arg3@@50 arg4@@23)) )))
(assert (forall (($o@@70 T@U) ($f@@26 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| T@U) (|l#4@@6| T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (and (and (= (type $o@@70) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type |l#3@@21|) refType)) (= (type |l#4@@6|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21| |l#4@@6|) $o@@70 $f@@26))  (=> (and (not (= $o@@70 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@70) |l#2@@21|))) (or (= $o@@70 |l#3@@21|) (U_2_bool (MapType0Select |l#4@@6| ($Box $o@@70)))))))) :qid |BitmapIm.124:12| :skolemid |1325| :pattern ( (MapType5Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21| |l#4@@6|) $o@@70 $f@@26)) )))
(assert (forall ((arg0@@232 T@U) (arg1@@128 T@U) (arg2@@78 T@U) (arg3@@51 Bool) ) (! (= (type (|lambda#23| arg0@@232 arg1@@128 arg2@@78 arg3@@51)) (MapType5Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@232 arg1@@128 arg2@@78 arg3@@51)) )))
(assert (forall (($o@@71 T@U) ($f@@27 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@71 $f@@27))  (=> (and (not (= $o@@71 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@71) |l#2@@22|))) |l#3@@22|)))) :qid |BitmapIm.162:28| :skolemid |1326| :pattern ( (MapType5Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@71 $f@@27)) )))
(assert (forall ((arg0@@233 T@U) (arg1@@129 T@U) (arg2@@79 T@U) (arg3@@52 Bool) ) (! (= (type (|lambda#24| arg0@@233 arg1@@129 arg2@@79 arg3@@52)) (MapType5Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@233 arg1@@129 arg2@@79 arg3@@52)) )))
(assert (forall (($o@@72 T@U) ($f@@28 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@72 $f@@28))  (=> (and (not (= $o@@72 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@72) |l#2@@23|))) |l#3@@23|)))) :qid |BitmapIm.162:28| :skolemid |1327| :pattern ( (MapType5Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@72 $f@@28)) )))
(assert (forall ((arg0@@234 T@U) (arg1@@130 T@U) (arg2@@80 T@U) (arg3@@53 T@U) (arg4@@24 T@U) ) (! (= (type (|lambda#25| arg0@@234 arg1@@130 arg2@@80 arg3@@53 arg4@@24)) (MapType5Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@234 arg1@@130 arg2@@80 arg3@@53 arg4@@24)) )))
(assert (forall (($o@@73 T@U) ($f@@29 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| T@U) (|l#4@@7| T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (and (and (= (type $o@@73) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type |l#3@@24|) refType)) (= (type |l#4@@7|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24| |l#4@@7|) $o@@73 $f@@29))  (=> (and (not (= $o@@73 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@73) |l#2@@24|))) (or (= $o@@73 |l#3@@24|) (U_2_bool (MapType0Select |l#4@@7| ($Box $o@@73)))))))) :qid |BitmapIm.168:12| :skolemid |1328| :pattern ( (MapType5Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24| |l#4@@7|) $o@@73 $f@@29)) )))
(assert (forall ((arg0@@235 T@U) (arg1@@131 T@U) (arg2@@81 T@U) (arg3@@54 T@U) (arg4@@25 T@U) ) (! (= (type (|lambda#26| arg0@@235 arg1@@131 arg2@@81 arg3@@54 arg4@@25)) (MapType5Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@235 arg1@@131 arg2@@81 arg3@@54 arg4@@25)) )))
(assert (forall (($o@@74 T@U) ($f@@30 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| T@U) (|l#4@@8| T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (and (and (= (type $o@@74) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type |l#3@@25|) refType)) (= (type |l#4@@8|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType5Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25| |l#4@@8|) $o@@74 $f@@30))  (=> (and (not (= $o@@74 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@74) |l#2@@25|))) (or (= $o@@74 |l#3@@25|) (U_2_bool (MapType0Select |l#4@@8| ($Box $o@@74)))))))) :qid |BitmapIm.168:12| :skolemid |1329| :pattern ( (MapType5Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25| |l#4@@8|) $o@@74 $f@@30)) )))
(assert (forall ((arg0@@236 T@U) (arg1@@132 T@U) (arg2@@82 T@U) (arg3@@55 Bool) ) (! (= (type (|lambda#27| arg0@@236 arg1@@132 arg2@@82 arg3@@55)) (MapType5Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@236 arg1@@132 arg2@@82 arg3@@55)) )))
(assert (forall (($o@@75 T@U) ($f@@31 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@75 $f@@31))  (=> (and (not (= $o@@75 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@75) |l#2@@26|))) |l#3@@26|)))) :qid |BitmapIm.206:12| :skolemid |1330| :pattern ( (MapType5Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@75 $f@@31)) )))
(assert (forall ((arg0@@237 T@U) (arg1@@133 T@U) (arg2@@83 T@U) (arg3@@56 Bool) ) (! (= (type (|lambda#28| arg0@@237 arg1@@133 arg2@@83 arg3@@56)) (MapType5Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@237 arg1@@133 arg2@@83 arg3@@56)) )))
(assert (forall (($o@@76 T@U) ($f@@32 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@76 $f@@32))  (=> (and (not (= $o@@76 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@76) |l#2@@27|))) |l#3@@27|)))) :qid |BitmapIm.206:12| :skolemid |1331| :pattern ( (MapType5Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@76 $f@@32)) )))
(assert (forall ((arg0@@238 T@U) (arg1@@134 T@U) (arg2@@84 T@U) (arg3@@57 Bool) ) (! (= (type (|lambda#29| arg0@@238 arg1@@134 arg2@@84 arg3@@57)) (MapType5Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@238 arg1@@134 arg2@@84 arg3@@57)) )))
(assert (forall (($o@@77 T@U) ($f@@33 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@77 $f@@33))  (=> (and (not (= $o@@77 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@77) |l#2@@28|))) |l#3@@28|)))) :qid |BitmapIm.219:11| :skolemid |1332| :pattern ( (MapType5Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@77 $f@@33)) )))
(assert (forall ((arg0@@239 T@U) (arg1@@135 T@U) (arg2@@85 T@U) (arg3@@58 Bool) ) (! (= (type (|lambda#30| arg0@@239 arg1@@135 arg2@@85 arg3@@58)) (MapType5Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@239 arg1@@135 arg2@@85 arg3@@58)) )))
(assert (forall (($o@@78 T@U) ($f@@34 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@78 $f@@34))  (=> (and (not (= $o@@78 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@78) |l#2@@29|))) |l#3@@29|)))) :qid |BitmapIm.219:11| :skolemid |1333| :pattern ( (MapType5Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@78 $f@@34)) )))
(assert (forall ((arg0@@240 T@U) (arg1@@136 T@U) (arg2@@86 T@U) (arg3@@59 Bool) ) (! (= (type (|lambda#31| arg0@@240 arg1@@136 arg2@@86 arg3@@59)) (MapType5Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@240 arg1@@136 arg2@@86 arg3@@59)) )))
(assert (forall (($o@@79 T@U) ($f@@35 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@79 $f@@35))  (=> (and (not (= $o@@79 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@79) |l#2@@30|))) |l#3@@30|)))) :qid |BitmapIm.238:11| :skolemid |1334| :pattern ( (MapType5Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@79 $f@@35)) )))
(assert (forall ((arg0@@241 T@U) (arg1@@137 T@U) (arg2@@87 T@U) (arg3@@60 Bool) ) (! (= (type (|lambda#32| arg0@@241 arg1@@137 arg2@@87 arg3@@60)) (MapType5Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@241 arg1@@137 arg2@@87 arg3@@60)) )))
(assert (forall (($o@@80 T@U) ($f@@36 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@80 $f@@36))  (=> (and (not (= $o@@80 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@80) |l#2@@31|))) |l#3@@31|)))) :qid |BitmapIm.238:11| :skolemid |1335| :pattern ( (MapType5Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@80 $f@@36)) )))
(assert (forall ((arg0@@242 T@U) (arg1@@138 T@U) (arg2@@88 T@U) (arg3@@61 Bool) ) (! (= (type (|lambda#33| arg0@@242 arg1@@138 arg2@@88 arg3@@61)) (MapType5Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@242 arg1@@138 arg2@@88 arg3@@61)) )))
(assert (forall (($o@@81 T@U) ($f@@37 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@81 $f@@37))  (=> (and (not (= $o@@81 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@81) |l#2@@32|))) |l#3@@32|)))) :qid |BitmapIm.280:12| :skolemid |1336| :pattern ( (MapType5Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@81 $f@@37)) )))
(assert (forall ((arg0@@243 T@U) (arg1@@139 T@U) (arg2@@89 T@U) (arg3@@62 Bool) ) (! (= (type (|lambda#34| arg0@@243 arg1@@139 arg2@@89 arg3@@62)) (MapType5Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@243 arg1@@139 arg2@@89 arg3@@62)) )))
(assert (forall (($o@@82 T@U) ($f@@38 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@82 $f@@38))  (=> (and (not (= $o@@82 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@82) |l#2@@33|))) |l#3@@33|)))) :qid |BitmapIm.280:12| :skolemid |1337| :pattern ( (MapType5Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@82 $f@@38)) )))
(assert (forall ((arg0@@244 T@U) (arg1@@140 T@U) (arg2@@90 T@U) (arg3@@63 Bool) ) (! (= (type (|lambda#35| arg0@@244 arg1@@140 arg2@@90 arg3@@63)) (MapType5Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@244 arg1@@140 arg2@@90 arg3@@63)) )))
(assert (forall (($o@@83 T@U) ($f@@39 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@83 $f@@39))  (=> (and (not (= $o@@83 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@83) |l#2@@34|))) |l#3@@34|)))) :qid |BitmapIm.318:17| :skolemid |1338| :pattern ( (MapType5Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@83 $f@@39)) )))
(assert (forall ((arg0@@245 T@U) (arg1@@141 T@U) (arg2@@91 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#36| arg0@@245 arg1@@141 arg2@@91 arg3@@64)) (MapType5Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@245 arg1@@141 arg2@@91 arg3@@64)) )))
(assert (forall (($o@@84 T@U) ($f@@40 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@84 $f@@40))  (=> (and (not (= $o@@84 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@84) |l#2@@35|))) |l#3@@35|)))) :qid |BitmapIm.318:17| :skolemid |1339| :pattern ( (MapType5Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@84 $f@@40)) )))
(assert (forall ((arg0@@246 T@U) (arg1@@142 T@U) (arg2@@92 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#37| arg0@@246 arg1@@142 arg2@@92 arg3@@65)) (MapType5Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@246 arg1@@142 arg2@@92 arg3@@65)) )))
(assert (forall (($o@@85 T@U) ($f@@41 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@85 $f@@41))  (=> (and (not (= $o@@85 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@85) |l#2@@36|))) |l#3@@36|)))) :qid |BitmapIm.364:17| :skolemid |1340| :pattern ( (MapType5Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@85 $f@@41)) )))
(assert (forall ((arg0@@247 T@U) (arg1@@143 T@U) (arg2@@93 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#38| arg0@@247 arg1@@143 arg2@@93 arg3@@66)) (MapType5Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@247 arg1@@143 arg2@@93 arg3@@66)) )))
(assert (forall (($o@@86 T@U) ($f@@42 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType5Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@86 $f@@42))  (=> (and (not (= $o@@86 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@86) |l#2@@37|))) |l#3@@37|)))) :qid |BitmapIm.364:17| :skolemid |1341| :pattern ( (MapType5Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@86 $f@@42)) )))
(declare-fun $Heap@6 () T@U)
(declare-fun this@@11 () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.BitSet () T@U)
(declare-fun $Heap@@14 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun StartFuel_BitmapModel._default.BitSet () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |##bm#0_0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.in_set_uint64 () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64 () T@U)
(declare-fun |##bm#0_0_0_0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |##bm#0_0_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun MoreFuel_BitmapModel._default.BitSet0 () T@U)
(declare-fun MoreFuel_BitmapModel._default.IsSet2 () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.bit () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.bit_and () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.bit_or () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.bit_comp () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.in_set () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.set_bit_to_1 () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.set_bit_to_0 () T@U)
(declare-fun StartFuel_BitsetLemmas._default.bit_or_uint64 () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.bit_or_uint64 () T@U)
(declare-fun StartFuelAssert_BitsetLemmas._default.set_bit_to_0_uint64 () T@U)
(declare-fun StartFuel_BitmapModel._default.BitUnset () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.BitUnset () T@U)
(declare-fun StartFuel_BitmapModel._default.EmptyBitmap () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.EmptyBitmap () T@U)
(declare-fun StartFuel_BitmapModel._default.BitAlloc () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.BitAlloc () T@U)
(declare-fun StartFuel_BitmapModel._default.BitUnion () T@U)
(declare-fun StartFuelAssert_BitmapModel._default.BitUnion () T@U)
(declare-fun StartFuelAssert_BitmapImpl.Bitmap.IPrefix () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun |c'#0_0@0| () Int)
(declare-fun |c#0@@11| () Int)
(declare-fun %lbl%+2 () Bool)
(declare-fun |b'#0_0@0| () Int)
(declare-fun |b#0@0| () Int)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun |i#0@0| () Int)
(declare-fun |a##0_0_0@0| () Int)
(declare-fun %lbl%@6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun $o@@87 () T@U)
(declare-fun $f@@43 () T@U)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%+23 () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun |a##0_0_0_0@0| () Int)
(declare-fun %lbl%@27 () Bool)
(declare-fun $o@@88 () T@U)
(declare-fun $f@@44 () T@U)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%@33 () Bool)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun %lbl%+41 () Bool)
(declare-fun |i'#0_0@0| () Int)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%+43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun %lbl%@45 () Bool)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%@50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%@54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun %lbl%+56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%@58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%+60 () Bool)
(declare-fun %lbl%+61 () Bool)
(declare-fun %lbl%@62 () Bool)
(declare-fun %lbl%+63 () Bool)
(declare-fun %lbl%+64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%@66 () Bool)
(declare-fun %lbl%@67 () Bool)
(declare-fun %lbl%@68 () Bool)
(declare-fun %lbl%@69 () Bool)
(declare-fun %lbl%+70 () Bool)
(declare-fun %lbl%+71 () Bool)
(declare-fun |ghosty#0@0| () Bool)
(declare-fun %lbl%@72 () Bool)
(declare-fun $o@@89 () T@U)
(declare-fun $f@@45 () T@U)
(declare-fun %lbl%@73 () Bool)
(declare-fun $o@@90 () T@U)
(declare-fun $f@@46 () T@U)
(declare-fun %lbl%+74 () Bool)
(declare-fun %lbl%+75 () Bool)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun %lbl%@76 () Bool)
(declare-fun %lbl%@77 () Bool)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun %lbl%@78 () Bool)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun %lbl%@79 () Bool)
(declare-fun %lbl%@80 () Bool)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun %lbl%@81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%@83 () Bool)
(declare-fun %lbl%@84 () Bool)
(declare-fun %lbl%@85 () Bool)
(declare-fun %lbl%@86 () Bool)
(declare-fun |##word#0@0| () Int)
(declare-fun %lbl%@87 () Bool)
(declare-fun |$rhs#0@0| () Int)
(declare-fun %lbl%+88 () Bool)
(declare-fun |i#0@@105| () Int)
(declare-fun |b#0@@52| () Int)
(declare-fun |$rhs#0| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $Heap@6) (MapType0Type refType MapType1Type)) (= (type this@@11) refType)) (= (type StartFuelAssert_BitmapModel._default.BitSet) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type StartFuel_BitmapModel._default.BitSet) LayerTypeType)) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type |##bm#0_0@0|) (SeqType BoxType))) (= (type $_Frame@0) (MapType5Type refType boolType))) (= (Ctor TType) 26)) (forall ((arg0@@248 T@U) ) (! (= (type (type@@0 arg0@@248)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@248)) ))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_BitsetLemmas._default.in_set_uint64) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64) LayerTypeType)) (= (type |##bm#0_0_0_0@0|) (SeqType BoxType))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |##bm#0_0_0@0|) (SeqType BoxType))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type MoreFuel_BitmapModel._default.BitSet0) LayerTypeType)) (= (type MoreFuel_BitmapModel._default.IsSet2) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.bit) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.bit_and) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.bit_or) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.bit_comp) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.in_set) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.set_bit_to_1) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.set_bit_to_0) LayerTypeType)) (= (type StartFuel_BitsetLemmas._default.bit_or_uint64) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.bit_or_uint64) LayerTypeType)) (= (type StartFuelAssert_BitsetLemmas._default.set_bit_to_0_uint64) LayerTypeType)) (= (type StartFuel_BitmapModel._default.BitUnset) LayerTypeType)) (= (type StartFuelAssert_BitmapModel._default.BitUnset) LayerTypeType)) (= (type StartFuel_BitmapModel._default.EmptyBitmap) LayerTypeType)) (= (type StartFuelAssert_BitmapModel._default.EmptyBitmap) LayerTypeType)) (= (type StartFuel_BitmapModel._default.BitAlloc) LayerTypeType)) (= (type StartFuelAssert_BitmapModel._default.BitAlloc) LayerTypeType)) (= (type StartFuel_BitmapModel._default.BitUnion) LayerTypeType)) (= (type StartFuelAssert_BitmapModel._default.BitUnion) LayerTypeType)) (= (type StartFuelAssert_BitmapImpl.Bitmap.IPrefix) LayerTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$BitmapImpl.Bitmap.Set)
(assert (not (let ((anon9_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (! (or %lbl%@1  (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@5 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@5 this@@11) |c'#0_0@0|)))))) :lblneg @1)))) (let ((anon17_Else_correct  (=> (! (and %lbl%+2 true) :lblpos +2) (=> (not (= |b'#0_0@0| |b#0@0|)) (and (! (or %lbl%@3 ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14)) :lblneg @3) (=> ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14) (and (! (or %lbl%@4 (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null))) :lblneg @4) (=> (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null)) (and (! (or %lbl%@5  (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))) :lblneg @5) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)))) (=> (= |a##0_0_0@0| (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|))))) (and (! (or %lbl%@6  (and (<= (LitInt 0) |b'#0_0@0|) (< |b'#0_0@0| 18446744073709551616))) :lblneg @6) (=> (and (<= (LitInt 0) |b'#0_0@0|) (< |b'#0_0@0| 18446744073709551616)) (and (! (or %lbl%@7 (forall (($o@@91 T@U) ($f@@47 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (= (type $o@@91) refType) (= (type $f@@47) (FieldType alpha@@50))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@91 $f@@47)))) :qid |BitmapIm.152:53| :skolemid |970| :no-pattern (type $o@@91) :no-pattern (type $f@@47) :no-pattern (U_2_int $o@@91) :no-pattern (U_2_bool $o@@91) :no-pattern (U_2_int $f@@47) :no-pattern (U_2_bool $f@@47) ))) :lblneg @7) (=> (forall (($o@@92 T@U) ($f@@48 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (= (type $o@@92) refType) (= (type $f@@48) (FieldType alpha@@51))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@92 $f@@48)))) :qid |BitmapIm.152:53| :skolemid |970| :no-pattern (type@@0 $o@@87) :no-pattern (type@@0 $f@@43) :no-pattern (type $o@@92) :no-pattern (type $f@@48) :no-pattern (U_2_int $o@@92) :no-pattern (U_2_bool $o@@92) :no-pattern (U_2_int $f@@48) :no-pattern (U_2_bool $f@@48) )) (and (! (or %lbl%@8 (< |b#0@0| 64)) :lblneg @8) (=> (< |b#0@0| 64) (and (! (or %lbl%@9 (< |b'#0_0@0| 64)) :lblneg @9) (=> (< |b'#0_0@0| 64) (and (! (or %lbl%@10 (not (= |b#0@0| |b'#0_0@0|))) :lblneg @10) (=> (not (= |b#0@0| |b'#0_0@0|)) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (|BitsetLemmas.__default.in__set__uint64#canCall| |b'#0_0@0| |a##0_0_0@0|) (and (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| |a##0_0_0@0| |b#0@0|) (|BitsetLemmas.__default.in__set__uint64#canCall| |b'#0_0@0| (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuel_BitsetLemmas._default.set_bit_to_1_uint64 |a##0_0_0@0| |b#0@0|))))) (and (and (=> (BitsetLemmas.__default.in__set__uint64 StartFuelAssert_BitsetLemmas._default.in_set_uint64 |b'#0_0@0| |a##0_0_0@0|) (BitsetLemmas.__default.in__set__uint64 StartFuelAssert_BitsetLemmas._default.in_set_uint64 |b'#0_0@0| (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64 |a##0_0_0@0| |b#0@0|))) (=> (BitsetLemmas.__default.in__set__uint64 StartFuelAssert_BitsetLemmas._default.in_set_uint64 |b'#0_0@0| (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64 |a##0_0_0@0| |b#0@0|)) (BitsetLemmas.__default.in__set__uint64 StartFuelAssert_BitsetLemmas._default.in_set_uint64 |b'#0_0@0| |a##0_0_0@0|))) (= $Heap@2 $Heap@4))) (and (! (or %lbl%@11  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@4 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@4 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@4 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@4 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @11) (and (! (or %lbl%@12  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@4 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@4 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@4 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@4 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@4 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@4 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @12) (and (! (or %lbl%@13  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@4 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@4 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@4 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @13) (=> (|BitmapImpl.Bitmap.I#canCall| $Heap@4 this@@11) (and (! (or %lbl%@14  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapImpl.Bitmap.I $Heap@4 this@@11))))) :lblneg @14) (and (! (or %lbl%@15 ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14)) :lblneg @15) (=> ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14) (and (! (or %lbl%@16  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @16) (and (! (or %lbl%@17  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @17) (and (! (or %lbl%@18  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @18) (=> (and (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (= |##bm#0_0_0@0| (BitmapImpl.Bitmap.I $Heap@@14 this@@11))) (and ($IsAlloc |##bm#0_0_0@0| (TSeq TBool) $Heap@4) ($IsAlloc (int_2_U |c#0@@11|) TInt $Heap@4))) (and (! (or %lbl%@19 (<= (LitInt 0) |c#0@@11|)) :lblneg @19) (and (! (or %lbl%@20 (< |c#0@@11| (BitmapModel.__default.Len |##bm#0_0_0@0|))) :lblneg @20) (=> (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) (and (! (or %lbl%@21  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))))) :lblneg @21) (=> (and (|BitmapImpl.Bitmap.I#canCall| $Heap@4 this@@11) (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))) (and (! (or %lbl%@22  (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@4 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@4 this@@11) |c'#0_0@0|)))))) :lblneg @22) (=> (and (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@4 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@4 this@@11) |c'#0_0@0|))))) (= $Heap@5 $Heap@4)) anon9_correct)))))))))))))))))))))))))))))))))))))))) (let ((anon17_Then_correct  (=> (! (and %lbl%+23 true) :lblpos +23) (=> (= |b'#0_0@0| |b#0@0|) (and (! (or %lbl%@24 ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14)) :lblneg @24) (=> ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14) (and (! (or %lbl%@25 (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null))) :lblneg @25) (=> (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null)) (and (! (or %lbl%@26  (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))) :lblneg @26) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)))) (=> (= |a##0_0_0_0@0| (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|))))) (and (! (or %lbl%@27 (forall (($o@@93 T@U) ($f@@49 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (= (type $o@@93) refType) (= (type $f@@49) (FieldType alpha@@52))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@93 $f@@49)))) :qid |BitmapIm.149:52| :skolemid |969| :no-pattern (type $o@@93) :no-pattern (type $f@@49) :no-pattern (U_2_int $o@@93) :no-pattern (U_2_bool $o@@93) :no-pattern (U_2_int $f@@49) :no-pattern (U_2_bool $f@@49) ))) :lblneg @27) (=> (forall (($o@@94 T@U) ($f@@50 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (= (type $o@@94) refType) (= (type $f@@50) (FieldType alpha@@53))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@94 $f@@50)))) :qid |BitmapIm.149:52| :skolemid |969| :no-pattern (type@@0 $o@@88) :no-pattern (type@@0 $f@@44) :no-pattern (type $o@@94) :no-pattern (type $f@@50) :no-pattern (U_2_int $o@@94) :no-pattern (U_2_bool $o@@94) :no-pattern (U_2_int $f@@50) :no-pattern (U_2_bool $f@@50) )) (and (! (or %lbl%@28 (< |b#0@0| 64)) :lblneg @28) (=> (< |b#0@0| 64) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (|BitsetLemmas.__default.set__bit__to__1__uint64#canCall| |a##0_0_0_0@0| |b#0@0|) (|BitsetLemmas.__default.in__set__uint64#canCall| |b#0@0| (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuel_BitsetLemmas._default.set_bit_to_1_uint64 |a##0_0_0_0@0| |b#0@0|))) (and (BitsetLemmas.__default.in__set__uint64 StartFuelAssert_BitsetLemmas._default.in_set_uint64 |b#0@0| (BitsetLemmas.__default.set__bit__to__1__uint64 StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64 |a##0_0_0_0@0| |b#0@0|)) (= $Heap@2 $Heap@3))) (and (! (or %lbl%@29  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@3 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@3 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@3 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@3 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @29) (and (! (or %lbl%@30  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@3 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@3 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@3 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@3 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@3 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@3 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @30) (and (! (or %lbl%@31  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@3 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@3 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@3 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @31) (=> (|BitmapImpl.Bitmap.I#canCall| $Heap@3 this@@11) (and (! (or %lbl%@32  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapImpl.Bitmap.I $Heap@3 this@@11))))) :lblneg @32) (and (! (or %lbl%@33 ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14)) :lblneg @33) (=> ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14) (and (! (or %lbl%@34  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @34) (and (! (or %lbl%@35  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @35) (and (! (or %lbl%@36  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @36) (=> (and (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (= |##bm#0_0_0_0@0| (BitmapImpl.Bitmap.I $Heap@@14 this@@11))) (and ($IsAlloc |##bm#0_0_0_0@0| (TSeq TBool) $Heap@3) ($IsAlloc (int_2_U |c#0@@11|) TInt $Heap@3))) (and (! (or %lbl%@37 (<= (LitInt 0) |c#0@@11|)) :lblneg @37) (and (! (or %lbl%@38 (< |c#0@@11| (BitmapModel.__default.Len |##bm#0_0_0_0@0|))) :lblneg @38) (=> (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) (and (! (or %lbl%@39  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))))) :lblneg @39) (=> (and (|BitmapImpl.Bitmap.I#canCall| $Heap@3 this@@11) (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))) (and (! (or %lbl%@40  (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@3 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@3 this@@11) |c'#0_0@0|)))))) :lblneg @40) (=> (and (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@3 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@3 this@@11) |c'#0_0@0|))))) (= $Heap@5 $Heap@3)) anon9_correct))))))))))))))))))))))))))))))))))) (let ((anon16_Then_correct  (=> (! (and %lbl%+41 true) :lblpos +41) (=> (= |i'#0_0@0| |i#0@0|) (and (! (or %lbl%@42 (<= (LitInt 0) |b#0@0|)) :lblneg @42) (=> (<= (LitInt 0) |b#0@0|) (and anon17_Then_correct anon17_Else_correct))))))) (let ((anon16_Else_correct  (=> (! (and %lbl%+43 true) :lblpos +43) (=> (not (= |i'#0_0@0| |i#0@0|)) (and (! (or %lbl%@44  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@2 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@2 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@2 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@2 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @44) (and (! (or %lbl%@45  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@2 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@2 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@2 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@2 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @45) (and (! (or %lbl%@46  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@2 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@2 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @46) (=> (|BitmapImpl.Bitmap.I#canCall| $Heap@2 this@@11) (and (! (or %lbl%@47  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapImpl.Bitmap.I $Heap@2 this@@11))))) :lblneg @47) (and (! (or %lbl%@48 ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14)) :lblneg @48) (=> ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14) (and (! (or %lbl%@49  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @49) (and (! (or %lbl%@50  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @50) (and (! (or %lbl%@51  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @51) (=> (and (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (= |##bm#0_0@0| (BitmapImpl.Bitmap.I $Heap@@14 this@@11))) (and ($IsAlloc |##bm#0_0@0| (TSeq TBool) $Heap@2) ($IsAlloc (int_2_U |c#0@@11|) TInt $Heap@2))) (and (! (or %lbl%@52 (<= (LitInt 0) |c#0@@11|)) :lblneg @52) (and (! (or %lbl%@53 (< |c#0@@11| (BitmapModel.__default.Len |##bm#0_0@0|))) :lblneg @53) (=> (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) (and (! (or %lbl%@54  (and (<= 0 |c'#0_0@0|) (< |c'#0_0@0| (|Seq#Length| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))))) :lblneg @54) (=> (and (|BitmapImpl.Bitmap.I#canCall| $Heap@2 this@@11) (and (|BitmapImpl.Bitmap.I#canCall| $Heap@@14 this@@11) (|BitmapModel.__default.BitSet#canCall| (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))) (and (! (or %lbl%@55  (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_0@0|)))))) :lblneg @55) (=> (and (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_0@0|))))) (= $Heap@5 $Heap@2)) anon9_correct)))))))))))))))))))))) (let ((anon4_correct  (=> (! (and %lbl%+56 true) :lblpos +56) (=> (and (<= (LitInt 0) |c'#0_0@0|) (< |c'#0_0@0| (Mul (LitInt 64) (_System.array.Length (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.bits))))) (and (! (or %lbl%@57 (not (= (LitInt 64) 0))) :lblneg @57) (=> (not (= (LitInt 64) 0)) (=> (= |i'#0_0@0| (Div |c'#0_0@0| (LitInt 64))) (and (! (or %lbl%@58 (not (= (LitInt 64) 0))) :lblneg @58) (=> (not (= (LitInt 64) 0)) (=> (= |b'#0_0@0| (Mod |c'#0_0@0| (LitInt 64))) (and (! (or %lbl%@59 (<= (LitInt 0) |i#0@0|)) :lblneg @59) (=> (<= (LitInt 0) |i#0@0|) (and anon16_Then_correct anon16_Else_correct))))))))))))) (let ((anon15_Else_correct  (=> (! (and %lbl%+60 true) :lblpos +60) (=> (< |c'#0_0@0| (LitInt 0)) anon4_correct)))) (let ((anon15_Then_correct  (=> (! (and %lbl%+61 true) :lblpos +61) (=> (<= (LitInt 0) |c'#0_0@0|) (and (! (or %lbl%@62 (not (= (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.bits) null))) :lblneg @62) anon4_correct))))) (let ((anon14_Then_correct  (=> (! (and %lbl%+63 true) :lblpos +63) (and anon15_Then_correct anon15_Else_correct)))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+64 true) :lblpos +64) (and (! (or %lbl%@65  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@6 this@@11) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @65) (=> (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@6 this@@11) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@66  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@6 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.bits))))))))) :lblneg @66) (=> (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (=> (|BitmapImpl.Bitmap.ReprInv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.ReprInv $Heap@6 this@@11) (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.Repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box this@@11)) ($Box (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.bits)))))))) (and (! (or %lbl%@67  (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) :lblneg @67) (=> (=> (|BitmapImpl.Bitmap.Inv#canCall| $Heap@6 this@@11) (or (BitmapImpl.Bitmap.Inv $Heap@6 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128))))) (and (! (or %lbl%@68 (|Seq#Equal| (BitmapImpl.Bitmap.I $Heap@6 this@@11) (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|))) :lblneg @68) (=> (|Seq#Equal| (BitmapImpl.Bitmap.I $Heap@6 this@@11) (BitmapModel.__default.BitSet StartFuelAssert_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|)) (! (or %lbl%@69 (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 this@@11) BitmapImpl.Bitmap.Repr) (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.Repr))) :lblneg @69)))))))))))) (let ((anon14_Else_correct  (=> (! (and %lbl%+70 true) :lblpos +70) (=> (and (forall ((|c'#0_1| Int) ) (!  (=> (and (<= (LitInt 0) |c'#0_1|) (< |c'#0_1| (Mul (LitInt 64) (_System.array.Length (MapType1Select (MapType0Select $Heap@2 this@@11) BitmapImpl.Bitmap.bits))))) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_1|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_1|)))) (=> (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapModel.__default.BitSet StartFuel_BitmapModel._default.BitSet (BitmapImpl.Bitmap.I $Heap@@14 this@@11) |c#0@@11|) |c'#0_1|))) (U_2_bool ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_1|)))))) :qid |BitmapIm.142:16| :skolemid |971| :pattern ( ($Unbox boolType (|Seq#Index| (BitmapImpl.Bitmap.I $Heap@2 this@@11) |c'#0_1|))) )) (= $Heap@6 $Heap@2)) GeneratedUnifiedExit_correct)))) (let ((anon13_Then_correct  (=> (! (and %lbl%+71 true) :lblpos +71) (=> |ghosty#0@0| (and (! (or %lbl%@72 (forall (($o@@95 T@U) ($f@@51 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (= (type $o@@95) refType) (= (type $f@@51) (FieldType alpha@@54))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@95 $f@@51)))) :qid |BitmapIm.139:22| :skolemid |967| :no-pattern (type $o@@95) :no-pattern (type $f@@51) :no-pattern (U_2_int $o@@95) :no-pattern (U_2_bool $o@@95) :no-pattern (U_2_int $f@@51) :no-pattern (U_2_bool $f@@51) ))) :lblneg @72) (=> (forall (($o@@96 T@U) ($f@@52 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (= (type $o@@96) refType) (= (type $f@@52) (FieldType alpha@@55))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@96 $f@@52)))) :qid |BitmapIm.139:22| :skolemid |967| :no-pattern (type@@0 $o@@89) :no-pattern (type@@0 $f@@45) :no-pattern (type $o@@96) :no-pattern (type $f@@52) :no-pattern (U_2_int $o@@96) :no-pattern (U_2_bool $o@@96) :no-pattern (U_2_int $f@@52) :no-pattern (U_2_bool $f@@52) )) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (= $Heap@0 $Heap@1) (= StartFuel_BitmapModel._default.BitSet ($LS MoreFuel_BitmapModel._default.BitSet0))) (and (= StartFuelAssert_BitmapModel._default.BitSet ($LS ($LS MoreFuel_BitmapModel._default.BitSet0))) (= (AsFuelBottom MoreFuel_BitmapModel._default.BitSet0) MoreFuel_BitmapModel._default.BitSet0))) (and (! (or %lbl%@73 (forall (($o@@97 T@U) ($f@@53 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (= (type $o@@97) refType) (= (type $f@@53) (FieldType alpha@@56))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@97 $f@@53)))) :qid |BitmapIm.140:21| :skolemid |968| :no-pattern (type $o@@97) :no-pattern (type $f@@53) :no-pattern (U_2_int $o@@97) :no-pattern (U_2_bool $o@@97) :no-pattern (U_2_int $f@@53) :no-pattern (U_2_bool $f@@53) ))) :lblneg @73) (=> (forall (($o@@98 T@U) ($f@@54 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (= (type $o@@98) refType) (= (type $f@@54) (FieldType alpha@@57))) false) (U_2_bool (MapType5Select $_Frame@0 $o@@98 $f@@54)))) :qid |BitmapIm.140:21| :skolemid |968| :no-pattern (type@@0 $o@@90) :no-pattern (type@@0 $f@@46) :no-pattern (type $o@@98) :no-pattern (type $f@@54) :no-pattern (U_2_int $o@@98) :no-pattern (U_2_bool $o@@98) :no-pattern (U_2_int $f@@54) :no-pattern (U_2_bool $f@@54) )) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (= $Heap@1 $Heap@2) (= StartFuel_BitmapModel._default.IsSet ($LS MoreFuel_BitmapModel._default.IsSet2))) (and (= StartFuelAssert_BitmapModel._default.IsSet ($LS ($LS MoreFuel_BitmapModel._default.IsSet2))) (= (AsFuelBottom MoreFuel_BitmapModel._default.IsSet2) MoreFuel_BitmapModel._default.IsSet2))) (and anon14_Then_correct anon14_Else_correct))))))))))))) (let ((anon13_Else_correct  (=> (! (and %lbl%+74 true) :lblpos +74) (=> (and (not |ghosty#0@0|) (= $Heap@6 $Heap@0)) GeneratedUnifiedExit_correct)))) (let ((anon0_correct  (=> (! (and %lbl%+75 true) :lblpos +75) (=> (and (and (and (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.bit) StartFuel_BitsetLemmas._default.bit) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.bit) StartFuelAssert_BitsetLemmas._default.bit))) (and (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.bit_and) StartFuel_BitsetLemmas._default.bit_and) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.bit_and) StartFuelAssert_BitsetLemmas._default.bit_and)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.bit_or) StartFuel_BitsetLemmas._default.bit_or) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.bit_or) StartFuelAssert_BitsetLemmas._default.bit_or)))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.bit_comp) StartFuel_BitsetLemmas._default.bit_comp) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.bit_comp) StartFuelAssert_BitsetLemmas._default.bit_comp)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.in_set) StartFuel_BitsetLemmas._default.in_set) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.in_set) StartFuelAssert_BitsetLemmas._default.in_set))) (and (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.set_bit_to_1) StartFuel_BitsetLemmas._default.set_bit_to_1) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.set_bit_to_1) StartFuelAssert_BitsetLemmas._default.set_bit_to_1)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.set_bit_to_0) StartFuel_BitsetLemmas._default.set_bit_to_0) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.set_bit_to_0) StartFuelAssert_BitsetLemmas._default.set_bit_to_0)))) (and (and (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.bit_or_uint64) StartFuel_BitsetLemmas._default.bit_or_uint64) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.bit_or_uint64) StartFuelAssert_BitsetLemmas._default.bit_or_uint64)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.in_set_uint64) StartFuel_BitsetLemmas._default.in_set_uint64) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.in_set_uint64) StartFuelAssert_BitsetLemmas._default.in_set_uint64))) (and (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.set_bit_to_1_uint64) StartFuel_BitsetLemmas._default.set_bit_to_1_uint64) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64) StartFuelAssert_BitsetLemmas._default.set_bit_to_1_uint64)) (and (= (AsFuelBottom StartFuel_BitsetLemmas._default.set_bit_to_0_uint64) StartFuel_BitsetLemmas._default.set_bit_to_0_uint64) (= (AsFuelBottom StartFuelAssert_BitsetLemmas._default.set_bit_to_0_uint64) StartFuelAssert_BitsetLemmas._default.set_bit_to_0_uint64))))) (and (and (and (and (= (AsFuelBottom StartFuel_BitmapModel._default.BitSet) StartFuel_BitmapModel._default.BitSet) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.BitSet) StartFuelAssert_BitmapModel._default.BitSet)) (and (= (AsFuelBottom StartFuel_BitmapModel._default.BitUnset) StartFuel_BitmapModel._default.BitUnset) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.BitUnset) StartFuelAssert_BitmapModel._default.BitUnset))) (and (and (= (AsFuelBottom StartFuel_BitmapModel._default.IsSet) StartFuel_BitmapModel._default.IsSet) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.IsSet) StartFuelAssert_BitmapModel._default.IsSet)) (and (= (AsFuelBottom StartFuel_BitmapModel._default.EmptyBitmap) StartFuel_BitmapModel._default.EmptyBitmap) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.EmptyBitmap) StartFuelAssert_BitmapModel._default.EmptyBitmap)))) (and (and (and (= (AsFuelBottom StartFuel_BitmapModel._default.BitAlloc) StartFuel_BitmapModel._default.BitAlloc) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.BitAlloc) StartFuelAssert_BitmapModel._default.BitAlloc)) (and (= (AsFuelBottom StartFuel_BitmapModel._default.BitUnion) StartFuel_BitmapModel._default.BitUnion) (= (AsFuelBottom StartFuelAssert_BitmapModel._default.BitUnion) StartFuelAssert_BitmapModel._default.BitUnion))) (and (and (= (AsFuelBottom StartFuel_BitmapImpl.Bitmap.IPrefix) StartFuel_BitmapImpl.Bitmap.IPrefix) (= (AsFuelBottom StartFuelAssert_BitmapImpl.Bitmap.IPrefix) StartFuelAssert_BitmapImpl.Bitmap.IPrefix)) (and (= $_Frame@0 (|lambda#22| null $Heap@@14 alloc this@@11 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.Repr))) (= |newtype$check#1@0| (LitInt 64))))))) (and (! (or %lbl%@76  (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 18446744073709551616))) :lblneg @76) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 18446744073709551616)) (and (! (or %lbl%@77 (not (= (LitInt 64) 0))) :lblneg @77) (=> (not (= (LitInt 64) 0)) (=> (= |newtype$check#2@0| (Div |c#0@@11| (LitInt 64))) (and (! (or %lbl%@78  (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 18446744073709551616))) :lblneg @78) (=> (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 18446744073709551616)) (=> (and (= |i#0@0| (Div |c#0@@11| (LitInt 64))) (= |newtype$check#3@0| (LitInt 64))) (and (! (or %lbl%@79  (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 18446744073709551616))) :lblneg @79) (=> (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 18446744073709551616)) (and (! (or %lbl%@80 (not (= (LitInt 64) 0))) :lblneg @80) (=> (not (= (LitInt 64) 0)) (=> (= |newtype$check#4@0| (Mod |c#0@@11| (LitInt 64))) (and (! (or %lbl%@81  (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616))) :lblneg @81) (=> (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616)) (=> (= |b#0@0| (Mod |c#0@@11| (LitInt 64))) (and (! (or %lbl%@82 (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null))) :lblneg @82) (=> (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null)) (and (! (or %lbl%@83  (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))) :lblneg @83) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)))) (and (! (or %lbl%@84 (U_2_bool (MapType5Select $_Frame@0 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) (IndexField |i#0@0|)))) :lblneg @84) (=> (U_2_bool (MapType5Select $_Frame@0 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) (IndexField |i#0@0|))) (and (! (or %lbl%@85 (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null))) :lblneg @85) (=> (not (= (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) null)) (and (! (or %lbl%@86  (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits))))) :lblneg @86) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)))) (=> (= |##word#0@0| (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|))))) (=> (and ($IsAlloc (int_2_U |##word#0@0|) Tclass.NativeTypes.uint64 $Heap@@14) ($IsAlloc (int_2_U |b#0@0|) Tclass.NativeTypes.uint64 $Heap@@14)) (and (! (or %lbl%@87 (< |b#0@0| 64)) :lblneg @87) (=> (and (and (and (< |b#0@0| 64) (|BitmapImpl.Bitmap.SetBit#canCall| (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|)))) |b#0@0|)) (and (|BitmapImpl.Bitmap.SetBit#canCall| (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|)))) |b#0@0|) (= |$rhs#0@0| (BitmapImpl.Bitmap.SetBit (U_2_int ($Unbox intType (MapType1Select (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|)))) |b#0@0|)))) (and (and (= $Heap@0 (MapType0Store $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits) (MapType1Store (MapType0Select $Heap@@14 (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (IndexField |i#0@0|) ($Box (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@0)) (and (=> |ghosty#0@0| (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) |ghosty#0@0|)))) (and anon13_Then_correct anon13_Else_correct)))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+88 true) :lblpos +88) (=> (and ($IsGoodHeap $Heap@@14) ($IsHeapAnchor $Heap@@14)) (=> (and (and (and (and (not (= this@@11 null)) (and ($Is this@@11 Tclass.BitmapImpl.Bitmap) ($IsAlloc this@@11 Tclass.BitmapImpl.Bitmap $Heap@@14))) (and (<= (LitInt 0) |c#0@@11|) (< |c#0@@11| 18446744073709551616))) (and (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@52|) (< |b#0@@52| 18446744073709551616)))) (and (and (and (<= (LitInt 0) |$rhs#0|) (< |$rhs#0| 18446744073709551616)) (= 17 $FunctionContextHeight)) (and (and (|BitmapImpl.Bitmap.Inv#canCall| $Heap@@14 this@@11) (and (BitmapImpl.Bitmap.Inv $Heap@@14 this@@11) (and (BitmapImpl.Bitmap.ReprInv $Heap@@14 this@@11) (< (_System.array.Length (MapType1Select (MapType0Select $Heap@@14 this@@11) BitmapImpl.Bitmap.bits)) (Div 18446744073709551616 (LitInt 128)))))) (< |c#0@@11| (BitmapModel.__default.Len (BitmapImpl.Bitmap.I $Heap@@14 this@@11)))))) anon0_correct))))) PreconditionGeneratedEntry_correct))))))))))))))) ))
(check-sat)
