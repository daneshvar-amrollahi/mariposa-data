(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#8| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Reads1#Handle| (T@U T@U T@U) T@U)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#165| (T@U T@U) T@U)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#24| (T@U T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#25| (T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#31| (T@U T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#32| (T@U T@U T@U T@U Int Int T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#33| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#34| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#35| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#84| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#87| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#88| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#90| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#91| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#92| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#93| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#94| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#95| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#96| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#97| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#98| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#99| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#100| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#101| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#102| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#103| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#104| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#105| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#106| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#107| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#108| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#109| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#110| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#111| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#112| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#113| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#114| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#115| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#116| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#117| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#118| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#119| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#120| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#121| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#122| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#123| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#124| (T@U Int Int) T@U)
(declare-fun |lambda#126| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#128| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#129| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#130| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#131| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#132| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#133| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#134| (Int) T@U)
(declare-fun |lambda#135| (T@U Int Int) T@U)
(declare-fun |lambda#136| (Bool) T@U)
(declare-fun |lambda#137| (T@U) T@U)
(declare-fun |lambda#138| (T@U) T@U)
(declare-fun |lambda#144| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#145| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#146| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#147| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#148| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#149| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#150| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#151| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#152| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#153| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#154| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#155| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#156| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#157| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#158| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#159| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#160| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#161| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#162| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.Sequences.__default Tagclass.Sequences.__default Tagclass.Options.Option Tagclass.NativeTypes.uint64 class.SequencesLite.__default Tagclass.SequencesLite.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Mathematics.__default Tagclass.Mathematics.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_tuple#2| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_tuple#0| tytagFamily$Option tytagFamily$uint64 tytagFamily$sbyte tytagFamily$byte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) ) (! (= (type (DatatypeCtorId arg0@@167)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@167)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |853| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |854| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |855| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |856| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@168)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@168)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@169)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@169)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@50)) bx@@50) ($Is ($Unbox DatatypeTypeType bx@@50) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsBox bx@@50 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |861| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@14)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@14)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@14) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@14)))) :qid |unknown.0:0| :skolemid |862| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@14)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@15)) :qid |unknown.0:0| :skolemid |863| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@15)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@15)) :qid |unknown.0:0| :skolemid |864| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@15)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@16)) :qid |unknown.0:0| :skolemid |865| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@16)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@16)) :qid |unknown.0:0| :skolemid |866| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@16)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |867| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |868| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |869| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |870| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |871| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |872| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |873| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@100 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@100) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@100 b@@61)  (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |874| :pattern ( (|_System.Tuple2#Equal| a@@100 b@@61)) )))
(assert (forall ((a@@101 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@101 b@@62) (= a@@101 b@@62))) :qid |unknown.0:0| :skolemid |875| :pattern ( (|_System.Tuple2#Equal| a@@101 b@@62)) )))
(assert (forall ((arg0@@170 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@170 arg1@@80 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@170 arg1@@80 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@171)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |877| :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@172)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |878| :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@173)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |879| :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@174)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@174)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |880| :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@51 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@175 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@175 arg1@@81 arg2@@33 arg3@@13 arg4@@4)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@176 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@176 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) arg0@@176) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@176 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@177 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@177 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@177 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@178 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@178 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@178 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@179 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@179 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@179 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@180 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@180 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@180 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@181 T@U) (arg1@@87 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@181)))) (= (type (MapType4Select arg0@@181 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@181 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@182 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@88))) (= (type (MapType4Store arg0@@182 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@182 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@54)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@183 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@183 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@183 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@184 T@U) (arg1@@90 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@184 arg1@@90 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@184 arg1@@90 arg2@@42)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2))) :qid |unknown.0:0| :skolemid |882| :pattern ( (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0))) (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) :qid |unknown.0:0| :skolemid |883| :pattern ( (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) )))
(assert (forall ((arg0@@185 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@185 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@185 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@52) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@52)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1) bx@@52)))) :qid |unknown.0:0| :skolemid |884| :pattern ( (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@52)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@17 t3@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@102))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |885| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@18 t3@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@103))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |887| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@19 t3@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@104))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |889| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4))) :qid |unknown.0:0| :skolemid |890| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@20 t3@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@105))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |891| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5))) :qid |unknown.0:0| :skolemid |892| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@21 t3@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@106))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |893| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6))) :qid |unknown.0:0| :skolemid |894| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@22 t3@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@107))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |895| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@23 t3@@8))))) (= (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |897| :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (|Set#Empty| BoxType)))) (= (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9))) :qid |unknown.0:0| :skolemid |898| :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))) ($IsBox (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10) t3@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |899| :pattern ( (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10)) )))) :qid |unknown.0:0| :skolemid |900| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u0@@2)) ($IsBox bx@@53 t0@@73)) :qid |unknown.0:0| :skolemid |901| :pattern ( ($IsBox bx@@53 u0@@2)) :pattern ( ($IsBox bx@@53 t0@@73)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u1@@1)) ($IsBox bx@@54 t1@@49)) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsBox bx@@54 u1@@1)) :pattern ( ($IsBox bx@@54 t1@@49)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u2@@0)) ($IsBox bx@@55 t2@@26)) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@55 u2@@0)) :pattern ( ($IsBox bx@@55 t2@@26)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 t3@@11)) ($IsBox bx@@56 u3)) :qid |unknown.0:0| :skolemid |904| :pattern ( ($IsBox bx@@56 t3@@11)) :pattern ( ($IsBox bx@@56 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |905| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (=> (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (Requires3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |906| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |907| :pattern ( (Apply3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) :pattern ( (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) )))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) (Requires3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ($IsAllocBox (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12) t3@@13 h@@44))) :qid |unknown.0:0| :skolemid |909| :pattern ( (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44)) )))
(assert (forall ((arg0@@186 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@186 arg1@@92 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@186 arg1@@92 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@187)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@188)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@189)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@190)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |916| :pattern ( ($IsBox bx@@57 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@3| |#$T0@@46|) ($IsBox |x1#0@@1| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |917| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) ))))) :qid |unknown.0:0| :skolemid |918| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@17))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@17)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@191 arg1@@93 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@191 arg1@@93 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |920| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@192)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@193)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@193)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@194)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |923| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@195)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |925| :pattern ( ($IsBox bx@@58 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@4| |#$T0@@54|) ($IsBox |x1#0@@2| |#$T1@@38|)) ($IsBox |x2#0@@0| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0|)) :qid |unknown.0:0| :skolemid |926| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@18))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@18)) )))
(assert (forall ((arg0@@196 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@196 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@196 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |929| :pattern ( (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@197)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@197)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |930| :pattern ( (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@198)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |931| :pattern ( (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@199)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |932| :pattern ( (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@200)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |933| :pattern ( (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@201)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |934| :pattern ( (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |935| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@202 T@T) (arg1@@95 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@202 arg1@@95 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@203 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@203 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@203) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@203 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@204 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@204 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@97) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@204 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@205 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@205 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@205 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@206 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@206 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@206 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@207 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@207 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@207 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@208 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@208 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@208 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@209 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@209)))) (= (type (MapType5Select arg0@@209 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@209 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@210 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@103))) (= (type (MapType5Store arg0@@210 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@210 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@60)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@61 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@211 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@211 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@211 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@212 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@212 arg1@@105 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@212 arg1@@105 arg2@@57)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13 bx3))) :qid |unknown.0:0| :skolemid |936| :pattern ( (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14 bx3@@0))) (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) :qid |unknown.0:0| :skolemid |937| :pattern ( (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@213 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@213 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@60) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@108))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |939| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2))) :qid |unknown.0:0| :skolemid |940| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@109))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |941| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@110))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |943| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4))) :qid |unknown.0:0| :skolemid |944| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@111))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |945| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5))) :qid |unknown.0:0| :skolemid |946| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@112))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |947| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6))) :qid |unknown.0:0| :skolemid |948| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@113))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |949| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7))) :qid |unknown.0:0| :skolemid |950| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |951| :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9))) :qid |unknown.0:0| :skolemid |952| :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))) ($IsBox (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |953| :pattern ( (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@3)) ($IsBox bx@@61 t0@@88)) :qid |unknown.0:0| :skolemid |955| :pattern ( ($IsBox bx@@61 u0@@3)) :pattern ( ($IsBox bx@@61 t0@@88)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@2)) ($IsBox bx@@62 t1@@64)) :qid |unknown.0:0| :skolemid |956| :pattern ( ($IsBox bx@@62 u1@@2)) :pattern ( ($IsBox bx@@62 t1@@64)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@1)) ($IsBox bx@@63 t2@@41)) :qid |unknown.0:0| :skolemid |957| :pattern ( ($IsBox bx@@63 u2@@1)) :pattern ( ($IsBox bx@@63 t2@@41)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u3@@0)) ($IsBox bx@@64 t3@@26)) :qid |unknown.0:0| :skolemid |958| :pattern ( ($IsBox bx@@64 u3@@0)) :pattern ( ($IsBox bx@@64 t3@@26)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 t4@@11)) ($IsBox bx@@65 u4)) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@65 t4@@11)) :pattern ( ($IsBox bx@@65 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |960| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@11 t3@@27) ($IsAllocBox bx3@@11 t3@@27 h@@49))) (Requires4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |961| :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |962| :pattern ( (Apply4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) :pattern ( (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |963| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@12 t3@@28 h@@50)) (Requires4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ($IsAllocBox (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12) t4@@13 h@@50))) :qid |unknown.0:0| :skolemid |964| :pattern ( (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@214 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@214 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |966| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@215)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@64|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@216)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@49|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@217)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@218)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@219)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@219)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |971| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |972| :pattern ( ($IsBox bx@@66 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@5| |#$T0@@70|) ($IsBox |x1#0@@3| |#$T1@@54|)) ($IsBox |x2#0@@1| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |973| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |974| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@19)) )))
(assert (forall ((arg0@@220 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@220 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@220 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |976| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@221)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |977| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@222)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |978| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@223)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |979| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@224)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |980| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@225)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@225)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |981| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |982| :pattern ( ($IsBox bx@@67 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |983| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |984| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20))) :qid |unknown.0:0| :skolemid |985| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@20)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |986| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |987| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@68)) bx@@68) ($Is ($Unbox DatatypeTypeType bx@@68) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |988| :pattern ( ($IsBox bx@@68 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPreludebpl.545:12| :skolemid |989| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |990| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |991| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@114 b@@63) true)) :qid |unknown.0:0| :skolemid |992| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64))) :qid |unknown.0:0| :skolemid |993| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64)) )))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@69)) bx@@69) ($Is ($Unbox refType bx@@69) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsBox bx@@69 Tclass.Sequences.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.Sequences.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |995| :pattern ( ($Is $o@@9 Tclass.Sequences.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@22 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.Sequences.__default $h@@22)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@22 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($IsAlloc $o@@10 Tclass.Sequences.__default $h@@22)) )))
(assert (forall ((arg0@@226 T@U) (arg1@@109 T@U) ) (! (= (type (Sequences.__default.Last arg0@@226 arg1@@109)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@226 arg1@@109)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and (not (= 6 $FunctionContextHeight)) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0))))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |1001| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0))))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and (not (= 6 $FunctionContextHeight)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0))))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1003| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass.Options.Option arg0@@227)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@227)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1004| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@228)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@228)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@70 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@70) BoxType)) ($IsBox bx@@70 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@70)) bx@@70) ($Is ($Unbox DatatypeTypeType bx@@70) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1006| :pattern ( ($IsBox bx@@70 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((arg0@@229 T@U) (arg1@@110 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@229 arg1@@110)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@229 arg1@@110)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@3|) (and (not (= 1 $FunctionContextHeight)) ($Is |run#0@@3| (TSeq Sequences._default.FirstOpt$E))))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@3|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |1007| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@4|) true)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@4|)) )))
(assert  (and (= (type |#Options.Option.None|) DatatypeTypeType) (forall ((arg0@@230 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@230)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@230)) ))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@5|) (and (not (= 1 $FunctionContextHeight)) ($Is |run#0@@5| (TSeq Sequences._default.FirstOpt$E@@1))))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@5|) (ite (= (|Seq#Length| |run#0@@5|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@5| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |1009| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@5|)) ))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@6|)) (and (not (= 1 $FunctionContextHeight)) ($Is |run#0@@6| (TSeq Sequences._default.FirstOpt$E@@2))))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@6|)) (ite (= (|Seq#Length| (Lit |run#0@@6|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@6|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |1010| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@231 T@U) (arg1@@111 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@231 arg1@@111)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@231 arg1@@111)) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((Sequences._default.DropLast$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@7|) (and (not (= 5 $FunctionContextHeight)) (and ($Is |run#0@@7| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@7|) 0))))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@7|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1011| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |1012| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@8|)) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@9|) (and (not (= 5 $FunctionContextHeight)) (and ($Is |run#0@@9| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@9|) 0))))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@9|) (|Seq#Take| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@9|)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@10|)) (and (not (= 5 $FunctionContextHeight)) (and ($Is |run#0@@10| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0))))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@10|)) (|Seq#Take| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1014| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@232 T@U) (arg1@@112 T@U) ) (! (= (type (Sequences.__default.Set arg0@@232 arg1@@112)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@232 arg1@@112)) )))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Sequences._default.Set$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@11|) (and (not (= 47 $FunctionContextHeight)) ($Is |run#0@@11| (TSeq Sequences._default.Set$T))))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@11|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@12|)) )))
(assert (forall ((arg0@@233 T@U) (arg1@@113 T@U) (arg2@@61 Int) ) (! (= (type (|lambda#8| arg0@@233 arg1@@113 arg2@@61)) (MapType0Type BoxType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@233 arg1@@113 arg2@@61)) )))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@13|) (and (not (= 47 $FunctionContextHeight)) ($Is |run#0@@13| (TSeq Sequences._default.Set$T@@1))))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@13|) (|lambda#8| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@13|)) ))))
(assert  (=> (<= 47 $FunctionContextHeight) (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@14|)) (and (not (= 47 $FunctionContextHeight)) ($Is |run#0@@14| (TSeq Sequences._default.Set$T@@2))))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@14|)) (|lambda#8| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1018| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((arg0@@234 T@U) (arg1@@114 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@234 arg1@@114)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@234 arg1@@114)) )))
(assert  (=> (<= 80 $FunctionContextHeight) (forall ((Sequences._default.ISet$T T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@15|) (and (not (= 80 $FunctionContextHeight)) ($Is |run#0@@15| (TSeq Sequences._default.ISet$T))))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@15|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1020| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@15|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@16|) true)) :qid |unknown.0:0| :skolemid |1021| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@16|)) )))
(assert  (=> (<= 80 $FunctionContextHeight) (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@17|) (and (not (= 80 $FunctionContextHeight)) ($Is |run#0@@17| (TSeq Sequences._default.ISet$T@@1))))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@17|) (|lambda#8| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@17|) 0))) :qid |unknown.0:0| :skolemid |1022| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@17|)) ))))
(assert  (=> (<= 80 $FunctionContextHeight) (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@18|)) (and (not (= 80 $FunctionContextHeight)) ($Is |run#0@@18| (TSeq Sequences._default.ISet$T@@2))))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@18|)) (|lambda#8| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@18|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1023| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly) LayerTypeType)) (= (type |a#0@@1|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly) |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly |a#0@@1|))) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly) |a#0@@1|)) )))
(assert  (and (forall ((arg0@@235 T@U) ) (! (= (type (AsFuelBottom arg0@@235)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@235)) )) (= (type $LZ) LayerTypeType)))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@0 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |a#0@@2|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@0 |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|))) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@0) |a#0@@2|)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@1 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |a#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@3|) (and (not (= 50 $FunctionContextHeight)) ($Is |a#0@@3| (TSeq Sequences._default.NoDupes$T@@1))))) true) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@1 |a#0@@3|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@2 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |a#0@@4|) (SeqType BoxType))) ($Is |a#0@@4| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@2 |a#0@@4|) true)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@2 |a#0@@4|)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@3 T@U) (|a#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |a#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@5|) (and (not (= 50 $FunctionContextHeight)) ($Is |a#0@@5| (TSeq Sequences._default.NoDupes$T@@3))))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@3) |a#0@@5|) (forall ((|i#0| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@5|)))) (not (= |i#0| |j#0|))) (not (= (|Seq#Index| |a#0@@5| |i#0|) (|Seq#Index| |a#0@@5| |j#0|))))) :qid |Sequencesidfy.66:13| :skolemid |1028| :pattern ( (|Seq#Index| |a#0@@5| |j#0|) (|Seq#Index| |a#0@@5| |i#0|)) )))) :qid |unknown.0:0| :skolemid |1029| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@3) |a#0@@5|)) ))))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@4 T@U) (|a#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |a#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@6|)) (and (not (= 50 $FunctionContextHeight)) ($Is |a#0@@6| (TSeq Sequences._default.NoDupes$T@@4))))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@4) (Lit |a#0@@6|)) (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#1| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#1|) (|Seq#Index| (Lit |a#0@@6|) |j#1|))))) :qid |Sequencesidfy.66:13| :skolemid |1030| :pattern ( (|Seq#Index| |a#0@@6| |j#1|) (|Seq#Index| |a#0@@6| |i#1|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |1031| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@4) (Lit |a#0@@6|))) ))))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (not (= 55 $FunctionContextHeight)) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|))))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|))) :qid |unknown.0:0| :skolemid |1045| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |1046| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@0 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (not (= 55 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@0) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|))))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@0| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@0|)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@1 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (not (= 55 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|))))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@0| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@0|)))) :qid |unknown.0:0| :weight 3 :skolemid |1048| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@1)) ))))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@2 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (not (= 55 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|))))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |1049| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@2)) ))))
(assert (forall ((arg0@@236 T@U) (arg1@@115 Int) ) (! (= (type (Sequences.__default.Range arg0@@236 arg1@@115)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@236 arg1@@115)) )))
(assert (forall (($ly@@5 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@5) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@5) |n#0|) (Sequences.__default.Range $ly@@5 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |1051| :pattern ( (Sequences.__default.Range ($LS $ly@@5) |n#0|)) )))
(assert (forall (($ly@@6 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@6) LayerTypeType) (= (Sequences.__default.Range $ly@@6 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |1052| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@6) |n#0@@0|)) )))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@7 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@7) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (and (not (= 56 $FunctionContextHeight)) (>= |n#0@@1| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@7 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@7 |n#0@@1|) |i#0@@1|))) |i#0@@1|)) :qid |Sequencesidfy.124:20| :skolemid |1053| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@7 |n#0@@1|) |i#0@@1|))) ))) ($Is (Sequences.__default.Range $ly@@7 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |1054| :pattern ( (Sequences.__default.Range $ly@@7 |n#0@@1|)) ))))
(assert (forall (($ly@@8 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@8) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@8 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |1055| :pattern ( (|Sequences.__default.Range#requires| $ly@@8 |n#0@@2|)) )))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@9 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@9) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (and (not (= 56 $FunctionContextHeight)) (>= |n#0@@3| (LitInt 0))))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@9) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@9 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |1056| :pattern ( (Sequences.__default.Range ($LS $ly@@9) |n#0@@3|)) ))))
(assert  (=> (<= 56 $FunctionContextHeight) (forall (($ly@@10 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@10) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (and (not (= 56 $FunctionContextHeight)) (>= (LitInt |n#0@@4|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@10) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@10) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |1057| :pattern ( (Sequences.__default.Range ($LS $ly@@10) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@237 T@U) (arg1@@116 T@U) (arg2@@62 T@U) (arg3@@39 T@U) (arg4@@28 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@237 arg1@@116 arg2@@62 arg3@@39 arg4@@28 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@237 arg1@@116 arg2@@62 arg3@@39 arg4@@28 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@11 T@U) ($Heap@@3 T@U) (|f#0@@19| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@11) LayerTypeType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@19|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@11) $Heap@@3 |f#0@@19| |run#0@@19|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@11 $Heap@@3 |f#0@@19| |run#0@@19|))) :qid |unknown.0:0| :skolemid |1062| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@11) $Heap@@3 |f#0@@19| |run#0@@19|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@12 T@U) ($Heap@@4 T@U) (|f#0@@20| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@12) LayerTypeType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |f#0@@20|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@12 $Heap@@4 |f#0@@20| |run#0@@20|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@4 |f#0@@20| |run#0@@20|))) :qid |unknown.0:0| :skolemid |1063| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@12) $Heap@@4 |f#0@@20| |run#0@@20|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@13 T@U) ($h0 T@U) ($h1 T@U) (|f#0@@21| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@13) LayerTypeType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |f#0@@21|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0 |f#0@@21| |run#0@@21|) (and ($Is |f#0@@21| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@21| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@11 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@11) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@11 null)) (exists ((|i#0@@2| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| |run#0@@21|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0 |f#0@@21| (|Seq#Index| |run#0@@21| |i#0@@2|)) ($Box |o#0|))))) (= ($Box $o@@11) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |1064| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0 |f#0@@21| (|Seq#Index| |run#0@@21| |i#0@@2|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0 $o@@11) $f) (MapType1Select (MapType0Select $h1 $o@@11) $f)))) :qid |unknown.0:0| :skolemid |1065| :no-pattern (type $o@@11) :no-pattern (type $f) :no-pattern (U_2_int $o@@11) :no-pattern (U_2_bool $o@@11) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h0 |f#0@@21| |run#0@@21|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h1 |f#0@@21| |run#0@@21|))) :qid |unknown.0:0| :skolemid |1066| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@13 $h1 |f#0@@21| |run#0@@21|)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@14 T@U) ($Heap@@5 T@U) (|f#0@@22| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@14) LayerTypeType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |f#0@@22|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@5 |f#0@@22| |run#0@@22|) (and (not (= 57 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |f#0@@22| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@22| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |run#0@@22|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@5 |f#0@@22| (|Seq#Index| |run#0@@22| |i#1@@1|)))) :qid |Sequencesidfy.130:21| :skolemid |1067| :pattern ( (|Seq#Index| |run#0@@22| |i#1@@1|)) )))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@5 |f#0@@22| |run#0@@22|)) (|Seq#Length| |run#0@@22|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@22|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@5 |f#0@@22| |run#0@@22|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@5 |f#0@@22| (|Seq#Index| |run#0@@22| |i#2@@0|))))) :qid |Sequencesidfy.132:20| :skolemid |1068| :pattern ( (|Seq#Index| |run#0@@22| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@5 |f#0@@22| |run#0@@22|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@5 |f#0@@22| |run#0@@22|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1069| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@14 $Heap@@5 |f#0@@22| |run#0@@22|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@15 T@U) ($Heap@@6 T@U) (|f#0@@23| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@15) LayerTypeType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |f#0@@23|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@6) ($Is |f#0@@23| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@23| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@15 $Heap@@6 |f#0@@23| |run#0@@23|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@23|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@6 |f#0@@23| (|Seq#Index| |run#0@@23| |i#3|)))) :qid |Sequencesidfy.130:21| :skolemid |1070| :pattern ( (|Seq#Index| |run#0@@23| |i#3|)) )))) :qid |unknown.0:0| :skolemid |1071| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@15 $Heap@@6 |f#0@@23| |run#0@@23|) ($IsGoodHeap $Heap@@6)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@16 T@U) ($Heap@@7 T@U) (|f#0@@24| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@16) LayerTypeType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |f#0@@24|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@7 |f#0@@24| |run#0@@24|) (and (not (= 57 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |f#0@@24| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@24| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@7 |f#0@@24| (|Seq#Index| |run#0@@24| |i#3@@0|)))) :qid |Sequencesidfy.130:21| :skolemid |1070| :pattern ( (|Seq#Index| |run#0@@24| |i#3@@0|)) )))))) (and (=> (not (= (|Seq#Length| |run#0@@24|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@7 |f#0@@24| (|Seq#Drop| |run#0@@24| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@16) $Heap@@7 |f#0@@24| |run#0@@24|) (ite (= (|Seq#Length| |run#0@@24|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@7 |f#0@@24| (|Seq#Index| |run#0@@24| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@16 $Heap@@7 |f#0@@24| (|Seq#Drop| |run#0@@24| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@16) $Heap@@7 |f#0@@24| |run#0@@24|) ($IsGoodHeap $Heap@@7)) ))))
(assert (forall ((arg0@@238 T@U) (arg1@@117 T@U) (arg2@@63 T@U) (arg3@@40 T@U) (arg4@@29 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@238 arg1@@117 arg2@@63 arg3@@40 arg4@@29 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@238 arg1@@117 arg2@@63 arg3@@40 arg4@@29 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@17 T@U) ($Heap@@8 T@U) (|f#0@@25| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |f#0@@25|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@17) $Heap@@8 |f#0@@25| |run#0@@25|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@17 $Heap@@8 |f#0@@25| |run#0@@25|))) :qid |unknown.0:0| :skolemid |1087| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@17) $Heap@@8 |f#0@@25| |run#0@@25|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@18 T@U) ($Heap@@9 T@U) (|f#0@@26| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@26|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@18 $Heap@@9 |f#0@@26| |run#0@@26|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@9 |f#0@@26| |run#0@@26|))) :qid |unknown.0:0| :skolemid |1088| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@18) $Heap@@9 |f#0@@26| |run#0@@26|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@19 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|f#0@@27| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@0 |f#0@@27| |run#0@@27|) (and ($Is |f#0@@27| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@27| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@12 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@12) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@12 null)) (exists ((|i#0@@3| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| (|Seq#Length| |run#0@@27|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@0 |f#0@@27| (|Seq#Index| |run#0@@27| |i#0@@3|)) ($Box |o#0@@0|))))) (= ($Box $o@@12) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |1089| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@0 |f#0@@27| (|Seq#Index| |run#0@@27| |i#0@@3|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@0 $o@@12) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@12) $f@@0)))) :qid |unknown.0:0| :skolemid |1090| :no-pattern (type $o@@12) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@12) :no-pattern (U_2_bool $o@@12) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h0@@0 |f#0@@27| |run#0@@27|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h1@@0 |f#0@@27| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1091| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@19 $h1@@0 |f#0@@27| |run#0@@27|)) )))
(assert  (=> (<= 58 $FunctionContextHeight) (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@20 T@U) ($Heap@@10 T@U) (|f#0@@28| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@10 |f#0@@28| |run#0@@28|) (and (not (= 58 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |f#0@@28| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@28| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |run#0@@28|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@10 |f#0@@28| (|Seq#Index| |run#0@@28| |i#1@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |1092| :pattern ( (|Seq#Index| |run#0@@28| |i#1@@2|)) )))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@10 |f#0@@28| |run#0@@28|)) (|Seq#Length| |run#0@@28|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@28|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@10 |f#0@@28| |run#0@@28|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@10 |f#0@@28| (|Seq#Index| |run#0@@28| |i#2@@1|))))) :qid |Sequencesidfy.143:20| :skolemid |1093| :pattern ( (|Seq#Index| |run#0@@28| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@10 |f#0@@28| |run#0@@28|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@10 |f#0@@28| |run#0@@28|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@20 $Heap@@10 |f#0@@28| |run#0@@28|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@21 T@U) ($Heap@@11 T@U) (|f#0@@29| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@29| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@21 $Heap@@11 |f#0@@29| |run#0@@29|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@29|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@11 |f#0@@29| (|Seq#Index| |run#0@@29| |i#3@@1|)))) :qid |Sequencesidfy.141:21| :skolemid |1095| :pattern ( (|Seq#Index| |run#0@@29| |i#3@@1|)) )))) :qid |unknown.0:0| :skolemid |1096| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@21 $Heap@@11 |f#0@@29| |run#0@@29|) ($IsGoodHeap $Heap@@11)) )))
(assert  (=> (<= 58 $FunctionContextHeight) (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@22 T@U) ($Heap@@12 T@U) (|f#0@@30| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@12 |f#0@@30| |run#0@@30|) (and (not (= 58 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@30| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@12 |f#0@@30| (|Seq#Index| |run#0@@30| |i#3@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |1095| :pattern ( (|Seq#Index| |run#0@@30| |i#3@@2|)) )))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@12 |f#0@@30| |run#0@@30|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@22) $Heap@@12 |f#0@@30| |run#0@@30|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@12 |f#0@@30| |run#0@@30|)))) :qid |unknown.0:0| :skolemid |1097| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@22) $Heap@@12 |f#0@@30| |run#0@@30|) ($IsGoodHeap $Heap@@12)) ))))
(assert (forall ((arg0@@239 T@U) (arg1@@118 T@U) (arg2@@64 T@U) (arg3@@41 T@U) (arg4@@30 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@239 arg1@@118 arg2@@64 arg3@@41 arg4@@30)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@239 arg1@@118 arg2@@64 arg3@@41 arg4@@30)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@23 T@U) ($Heap@@13 T@U) (|f#0@@31| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@23) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@23) $Heap@@13 |f#0@@31| |run#0@@31|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@23 $Heap@@13 |f#0@@31| |run#0@@31|))) :qid |unknown.0:0| :skolemid |1109| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@23) $Heap@@13 |f#0@@31| |run#0@@31|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@24 T@U) ($Heap@@14 T@U) (|f#0@@32| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@24 $Heap@@14 |f#0@@32| |run#0@@32|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@14 |f#0@@32| |run#0@@32|))) :qid |unknown.0:0| :skolemid |1110| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@24) $Heap@@14 |f#0@@32| |run#0@@32|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@25 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@33| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@25) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@1 |f#0@@33| |run#0@@33|) (and ($Is |f#0@@33| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@33| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@13 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@13) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@13 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@1 |f#0@@33| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@13) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |1111| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@13) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@13) $f@@1)))) :qid |unknown.0:0| :skolemid |1112| :no-pattern (type $o@@13) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@13) :no-pattern (U_2_bool $o@@13) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h0@@1 |f#0@@33| |run#0@@33|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h1@@1 |f#0@@33| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@25 $h1@@1 |f#0@@33| |run#0@@33|)) )))
(assert  (=> (<= 59 $FunctionContextHeight) (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@26 T@U) ($Heap@@15 T@U) (|f#0@@34| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@26) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@15 |f#0@@34| |run#0@@34|) (and (not (= 59 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@15) ($Is |f#0@@34| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@34| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| (|Seq#Length| |run#0@@34|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@15 |f#0@@34| (|Seq#Index| |run#0@@34| |i#0@@4|)))) :qid |Sequencesidfy.150:21| :skolemid |1114| :pattern ( (|Seq#Index| |run#0@@34| |i#0@@4|)) )))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|)) (|Seq#Length| |run#0@@34|)) (forall ((|i#1@@3| Int) ) (!  (=> (<= (LitInt 0) |i#1@@3|) (=> (and (< |i#1@@3| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@15 |f#0@@34| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|) |i#1@@3|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@15 |f#0@@34| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|) |i#1@@3|)))))) :qid |Sequencesidfy.152:20| :skolemid |1115| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|) |i#1@@3|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@26 $Heap@@15 |f#0@@34| |run#0@@34|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@27 T@U) ($Heap@@16 T@U) (|f#0@@35| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@35| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@27 $Heap@@16 |f#0@@35| |run#0@@35|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@35|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@16 |f#0@@35| (|Seq#Index| |run#0@@35| |i#2@@2|)))) :qid |Sequencesidfy.150:21| :skolemid |1117| :pattern ( (|Seq#Index| |run#0@@35| |i#2@@2|)) )))) :qid |unknown.0:0| :skolemid |1118| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@27 $Heap@@16 |f#0@@35| |run#0@@35|) ($IsGoodHeap $Heap@@16)) )))
(assert  (=> (<= 59 $FunctionContextHeight) (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@28 T@U) ($Heap@@17 T@U) (|f#0@@36| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@17 |f#0@@36| |run#0@@36|) (and (not (= 59 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@36| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@17 |f#0@@36| (|Seq#Index| |run#0@@36| |i#2@@3|)))) :qid |Sequencesidfy.150:21| :skolemid |1117| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@3|)) )))))) (and (=> (not (= (|Seq#Length| |run#0@@36|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@17 |f#0@@36| (|Seq#Drop| |run#0@@36| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@28) $Heap@@17 |f#0@@36| |run#0@@36|) (ite (= (|Seq#Length| |run#0@@36|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@17 |f#0@@36| (|Seq#Index| |run#0@@36| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@36| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@28 $Heap@@17 |f#0@@36| (|Seq#Drop| |run#0@@36| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@28) $Heap@@17 |f#0@@36| |run#0@@36|) ($IsGoodHeap $Heap@@17)) ))))
(assert (forall ((arg0@@240 T@U) (arg1@@119 T@U) (arg2@@65 T@U) ) (! (= (type (|Reads1#Handle| arg0@@240 arg1@@119 arg2@@65)) HandleTypeType) :qid |funType:Reads1#Handle| :pattern ( (|Reads1#Handle| arg0@@240 arg1@@119 arg2@@65)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$R@@94| T@U) ($self T@U) ($heap T@U) (|$fh$0x#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$R@@94|) TyType)) (= (type $self) HandleTypeType)) (= (type $heap) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0|) BoxType)) (= (Apply1 |#$T0@@81| (TSet Tclass._System.object?) $heap (|Reads1#Handle| |#$T0@@81| |#$R@@94| $self) |$fh$0x#0|) ($Box (Reads1 |#$T0@@81| |#$R@@94| $heap $self |$fh$0x#0|)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( (Apply1 |#$T0@@81| (TSet Tclass._System.object?) $heap (|Reads1#Handle| |#$T0@@81| |#$R@@94| $self) |$fh$0x#0|)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$R@@95| T@U) ($self@@0 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$R@@95|) TyType)) (= (type $self@@0) HandleTypeType)) (= (type $heap@@0) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@0|) BoxType)) (= (Requires1 |#$T0@@82| (TSet Tclass._System.object?) $heap@@0 (|Reads1#Handle| |#$T0@@82| |#$R@@95| $self@@0) |$fh$0x#0@@0|) true)) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Requires1 |#$T0@@82| (TSet Tclass._System.object?) $heap@@0 (|Reads1#Handle| |#$T0@@82| |#$R@@95| $self@@0) |$fh$0x#0@@0|)) )))
(assert (forall (($bx T@U) (|#$T0@@83| T@U) (|#$R@@96| T@U) ($self@@1 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type $bx) BoxType) (= (type |#$T0@@83|) TyType)) (= (type |#$R@@96|) TyType)) (= (type $self@@1) HandleTypeType)) (= (type $heap@@1) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (Reads1 |#$T0@@83| (TSet Tclass._System.object?) $heap@@1 (|Reads1#Handle| |#$T0@@83| |#$R@@96| $self@@1) |$fh$0x#0@@1|) $bx)) (U_2_bool (MapType0Select (Reads1 |#$T0@@83| |#$R@@96| $heap@@1 $self@@1 |$fh$0x#0@@1|) $bx)))) :qid |unknown.0:0| :skolemid |1126| :pattern ( (MapType0Select (Reads1 |#$T0@@83| (TSet Tclass._System.object?) $heap@@1 (|Reads1#Handle| |#$T0@@83| |#$R@@96| $self@@1) |$fh$0x#0@@1|) $bx)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$R@@97| T@U) ($self@@2 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$R@@97|) TyType)) (= (type $self@@2) HandleTypeType)) (= (type $heap@@2) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@2|) BoxType)) (= (Reads1 |#$T0@@84| |#$R@@97| $heap@@2 $self@@2 |$fh$0x#0@@2|) ($Unbox (MapType0Type BoxType boolType) (Apply1 |#$T0@@84| (TSet Tclass._System.object?) $heap@@2 (|Reads1#Handle| |#$T0@@84| |#$R@@97| $self@@2) |$fh$0x#0@@2|)))) :qid |unknown.0:0| :skolemid |1127| :pattern ( (Reads1 |#$T0@@84| |#$R@@97| $heap@@2 $self@@2 |$fh$0x#0@@2|)) )))
(assert (forall ((arg0@@241 T@U) (arg1@@120 T@U) (arg2@@66 T@U) (arg3@@42 T@U) (arg4@@31 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@241 arg1@@120 arg2@@66 arg3@@42 arg4@@31 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@241 arg1@@120 arg2@@66 arg3@@42 arg4@@31 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@29 T@U) (|f#0@@37| T@U) (|init#0| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type |f#0@@37|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@29) |f#0@@37| |init#0| |run#0@@37|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@29 |f#0@@37| |init#0| |run#0@@37|))) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@29) |f#0@@37| |init#0| |run#0@@37|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@30 T@U) (|f#0@@38| T@U) (|init#0@@0| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@30) LayerTypeType)) (= (type |f#0@@38|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@30 |f#0@@38| |init#0@@0| |run#0@@38|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@38| |init#0@@0| |run#0@@38|))) :qid |unknown.0:0| :skolemid |1138| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@30) |f#0@@38| |init#0@@0| |run#0@@38|)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@31 T@U) (|f#0@@39| T@U) (|init#0@@1| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@31) LayerTypeType)) (= (type |f#0@@39|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@39| |init#0@@1| |run#0@@39|) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |f#0@@39| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@1)))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@31 |f#0@@39| |init#0@@1| |run#0@@39|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |1139| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@31 |f#0@@39| |init#0@@1| |run#0@@39|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@32 T@U) ($Heap@@18 T@U) (|f#0@@40| T@U) (|init#0@@2| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@32) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@40| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@40| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@32 |f#0@@40| |init#0@@2| |run#0@@40|) true)) :qid |unknown.0:0| :skolemid |1140| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@32 |f#0@@40| |init#0@@2| |run#0@@40|) ($IsGoodHeap $Heap@@18)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@33 T@U) ($Heap@@19 T@U) (|f#0@@41| T@U) (|init#0@@3| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@41| |init#0@@3| |run#0@@41|) (and (not (= 3 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@41| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@41| (TSeq Sequences._default.FoldLeft$E@@3)))))) (and (=> (not (= (|Seq#Length| |run#0@@41|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@41| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@19 |f#0@@41| |init#0@@3| (|Seq#Index| |run#0@@41| (LitInt 0))) (|Seq#Drop| |run#0@@41| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@33) |f#0@@41| |init#0@@3| |run#0@@41|) (ite (= (|Seq#Length| |run#0@@41|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@33 |f#0@@41| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@19 |f#0@@41| |init#0@@3| (|Seq#Index| |run#0@@41| (LitInt 0))) (|Seq#Drop| |run#0@@41| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@33) |f#0@@41| |init#0@@3| |run#0@@41|) ($IsGoodHeap $Heap@@19)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@34 T@U) ($Heap@@20 T@U) (|f#0@@42| T@U) (|init#0@@4| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@42| |init#0@@4| (Lit |run#0@@42|)) (and (not (= 3 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@42| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@42| (TSeq Sequences._default.FoldLeft$E@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@42|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@42| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@20 |f#0@@42| |init#0@@4| (|Seq#Index| (Lit |run#0@@42|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@42|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@42| |init#0@@4| (Lit |run#0@@42|)) (ite (= (|Seq#Length| (Lit |run#0@@42|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@42| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@20 |f#0@@42| |init#0@@4| (|Seq#Index| (Lit |run#0@@42|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@42|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1142| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@34) |f#0@@42| |init#0@@4| (Lit |run#0@@42|)) ($IsGoodHeap $Heap@@20)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@35 T@U) ($Heap@@21 T@U) (|f#0@@43| T@U) (|init#0@@5| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@43|) (Lit |init#0@@5|) (Lit |run#0@@43|)) (and (not (= 3 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@43| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@43| (TSeq Sequences._default.FoldLeft$E@@5)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@43|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@43|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@21 (Lit |f#0@@43|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@43|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@43|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@43|) (Lit |init#0@@5|) (Lit |run#0@@43|)) (ite (= (|Seq#Length| (Lit |run#0@@43|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@43|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@21 (Lit |f#0@@43|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@43|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@43|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1143| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@35) (Lit |f#0@@43|) (Lit |init#0@@5|) (Lit |run#0@@43|)) ($IsGoodHeap $Heap@@21)) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@121 T@U) (arg2@@67 T@U) (arg3@@43 T@U) (arg4@@32 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@242 arg1@@121 arg2@@67 arg3@@43 arg4@@32 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@242 arg1@@121 arg2@@67 arg3@@43 arg4@@32 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@36 T@U) (|f#0@@44| T@U) (|init#0@@6| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@44|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@36) |f#0@@44| |init#0@@6| |run#0@@44|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@36 |f#0@@44| |init#0@@6| |run#0@@44|))) :qid |unknown.0:0| :skolemid |1145| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@36) |f#0@@44| |init#0@@6| |run#0@@44|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@37 T@U) (|f#0@@45| T@U) (|init#0@@7| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@37 |f#0@@45| |init#0@@7| |run#0@@45|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@45| |init#0@@7| |run#0@@45|))) :qid |unknown.0:0| :skolemid |1146| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@37) |f#0@@45| |init#0@@7| |run#0@@45|)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@38 T@U) (|f#0@@46| T@U) (|init#0@@8| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@46| |init#0@@8| |run#0@@46|) (and (not (= 4 $FunctionContextHeight)) (and (and ($Is |f#0@@46| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@1)))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@38 |f#0@@46| |init#0@@8| |run#0@@46|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |1147| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@38 |f#0@@46| |init#0@@8| |run#0@@46|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@39 T@U) ($Heap@@22 T@U) (|f#0@@47| T@U) (|init#0@@9| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@47| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@39 |f#0@@47| |init#0@@9| |run#0@@47|) true)) :qid |unknown.0:0| :skolemid |1148| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@39 |f#0@@47| |init#0@@9| |run#0@@47|) ($IsGoodHeap $Heap@@22)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@40 T@U) ($Heap@@23 T@U) (|f#0@@48| T@U) (|init#0@@10| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@48| |init#0@@10| |run#0@@48|) (and (not (= 4 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@48| (TSeq Sequences._default.FoldRight$E@@3)))))) (and (=> (not (= (|Seq#Length| |run#0@@48|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@48| |init#0@@10| (|Seq#Drop| |run#0@@48| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@40) |f#0@@48| |init#0@@10| |run#0@@48|) (ite (= (|Seq#Length| |run#0@@48|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@23 |f#0@@48| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@40 |f#0@@48| |init#0@@10| (|Seq#Drop| |run#0@@48| (LitInt 1))) (|Seq#Index| |run#0@@48| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@40) |f#0@@48| |init#0@@10| |run#0@@48|) ($IsGoodHeap $Heap@@23)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@41 T@U) ($Heap@@24 T@U) (|f#0@@49| T@U) (|init#0@@11| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@49| |init#0@@11| (Lit |run#0@@49|)) (and (not (= 4 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@49| (TSeq Sequences._default.FoldRight$E@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@49|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@49| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@49|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@49| |init#0@@11| (Lit |run#0@@49|)) (ite (= (|Seq#Length| (Lit |run#0@@49|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@24 |f#0@@49| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@49| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@49|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@49|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1150| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@41) |f#0@@49| |init#0@@11| (Lit |run#0@@49|)) ($IsGoodHeap $Heap@@24)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@42 T@U) ($Heap@@25 T@U) (|f#0@@50| T@U) (|init#0@@12| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@50|) (Lit |init#0@@12|) (Lit |run#0@@50|)) (and (not (= 4 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@50| (TSeq Sequences._default.FoldRight$E@@5)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@50|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@50|) (Lit |init#0@@12|) (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@25 (Lit |f#0@@50|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@50|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1151| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@42) (Lit |f#0@@50|) (Lit |init#0@@12|) (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@25)) ))))
(assert (forall ((arg0@@243 T@U) (arg1@@122 T@U) (arg2@@68 T@U) (arg3@@44 T@U) (arg4@@33 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@243 arg1@@122 arg2@@68 arg3@@44 arg4@@33 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@243 arg1@@122 arg2@@68 arg3@@44 arg4@@33 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@43 T@U) (|f#0@@51| T@U) (|init#0@@13| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@43) |f#0@@51| |init#0@@13| |run#0@@51|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@43 |f#0@@51| |init#0@@13| |run#0@@51|))) :qid |unknown.0:0| :skolemid |1153| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@43) |f#0@@51| |init#0@@13| |run#0@@51|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@44 T@U) (|f#0@@52| T@U) (|init#0@@14| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@44 |f#0@@52| |init#0@@14| |run#0@@52|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@52| |init#0@@14| |run#0@@52|))) :qid |unknown.0:0| :skolemid |1154| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@44) |f#0@@52| |init#0@@14| |run#0@@52|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@45 T@U) (|f#0@@53| T@U) (|init#0@@15| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@53| |init#0@@15| |run#0@@53|) (and (not (= 7 $FunctionContextHeight)) (and (and ($Is |f#0@@53| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@1)))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@45 |f#0@@53| |init#0@@15| |run#0@@53|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |1155| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@45 |f#0@@53| |init#0@@15| |run#0@@53|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@46 T@U) ($Heap@@26 T@U) (|f#0@@54| T@U) (|init#0@@16| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@54| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@46 |f#0@@54| |init#0@@16| |run#0@@54|) true)) :qid |unknown.0:0| :skolemid |1156| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@46 |f#0@@54| |init#0@@16| |run#0@@54|) ($IsGoodHeap $Heap@@26)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@47 T@U) ($Heap@@27 T@U) (|f#0@@55| T@U) (|init#0@@17| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@55| |init#0@@17| |run#0@@55|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@55| (TSeq Sequences._default.FoldFromRight$E@@3)))))) (and (=> (not (= (|Seq#Length| |run#0@@55|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@55|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@55| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@55|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@55|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@47) |f#0@@55| |init#0@@17| |run#0@@55|) (ite (= (|Seq#Length| |run#0@@55|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@27 |f#0@@55| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@47 |f#0@@55| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@55|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@55|)))))) :qid |unknown.0:0| :skolemid |1157| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@47) |f#0@@55| |init#0@@17| |run#0@@55|) ($IsGoodHeap $Heap@@27)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@48 T@U) ($Heap@@28 T@U) (|f#0@@56| T@U) (|init#0@@18| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@56| |init#0@@18| (Lit |run#0@@56|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@56| (TSeq Sequences._default.FoldFromRight$E@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@56|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@56|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@56| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@56|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@56|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@56| |init#0@@18| (Lit |run#0@@56|)) (ite (= (|Seq#Length| (Lit |run#0@@56|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@28 |f#0@@56| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@56| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@56|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@56|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1158| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@48) |f#0@@56| |init#0@@18| (Lit |run#0@@56|)) ($IsGoodHeap $Heap@@28)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@49 T@U) ($Heap@@29 T@U) (|f#0@@57| T@U) (|init#0@@19| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@57|) (Lit |init#0@@19|) (Lit |run#0@@57|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@57| (TSeq Sequences._default.FoldFromRight$E@@5)))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@57|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@57|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@57|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@57|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@57|) (Lit |init#0@@19|) (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@29 (Lit |f#0@@57|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@57|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@57|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@57|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1159| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@49) (Lit |f#0@@57|) (Lit |init#0@@19|) (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@29)) ))))
(assert (forall ((arg0@@244 T@U) (arg1@@123 T@U) (arg2@@69 T@U) (arg3@@45 Int) ) (! (= (type (Sequences.__default.remove arg0@@244 arg1@@123 arg2@@69 arg3@@45)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@244 arg1@@123 arg2@@69 arg3@@45)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@50 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@50) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@50) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@50 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@50) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@51 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@51) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@51 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |1164| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@51) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@52 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@52) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and (not (= 60 $FunctionContextHeight)) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|))))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@5|) (< |i#0@@5| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#0@@5|) (|Seq#Index| |s#0@@6| |i#0@@5|))) :qid |Sequencesidfy.180:18| :skolemid |1165| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@5|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#0@@5|)) ))) (forall ((|i#1@@4| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@4|) (< |i#1@@4| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#1@@4|) (|Seq#Index| |s#0@@6| (+ |i#1@@4| 1)))) :qid |Sequencesidfy.181:18| :skolemid |1166| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) |i#1@@4|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |1167| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@52 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@53 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@53) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@53 |s#0@@7| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))))) :qid |unknown.0:0| :skolemid |1168| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@53 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@54 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@54) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and (not (= 60 $FunctionContextHeight)) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@54) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@54) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@55 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@55) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and (not (= 60 $FunctionContextHeight)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|)))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@55) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1170| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@55) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@124 T@U) (arg2@@70 T@U) (arg3@@46 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@245 arg1@@124 arg2@@70 arg3@@46)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@245 arg1@@124 arg2@@70 arg3@@46)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@56 T@U) (|s#0@@10| T@U) (|v#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |v#0|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@56) |s#0@@10| |v#0|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@56 |s#0@@10| |v#0|))) :qid |unknown.0:0| :skolemid |1177| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@56) |s#0@@10| |v#0|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@57 T@U) (|s#0@@11| T@U) (|v#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@57 |s#0@@11| |v#0@@0|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@11| |v#0@@0|))) :qid |unknown.0:0| :skolemid |1178| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@57) |s#0@@11| |v#0@@0|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@58 T@U) (|s#0@@12| T@U) (|v#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@12| |v#0@@1|) (and (not (= 61 $FunctionContextHeight)) (and ($Is |s#0@@12| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@1| Sequences._default.RemoveOneValue$V@@1))))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@12|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@58 |s#0@@12| |v#0@@1|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@58 |s#0@@12| |v#0@@1|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@12|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@1|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@58 |s#0@@12| |v#0@@1|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |1179| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@58 |s#0@@12| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@59 T@U) ($Heap@@30 T@U) (|s#0@@13| T@U) (|v#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@59) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |v#0@@2|) BoxType)) (and (and ($IsGoodHeap $Heap@@30) ($Is |s#0@@13| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@2| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@59 |s#0@@13| |v#0@@2|) true)) :qid |unknown.0:0| :skolemid |1180| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@59 |s#0@@13| |v#0@@2|) ($IsGoodHeap $Heap@@30)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52))) :qid |Sequencesidfy.191:5| :skolemid |1181| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@60 T@U) ($Heap@@31 T@U) (|s#0@@14| T@U) (|v#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@60) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@3|) (and (not (= 61 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@31) ($Is |s#0@@14| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@3| Sequences._default.RemoveOneValue$V@@4))))) (and (=> (|Seq#Contains| |s#0@@14| |v#0@@3|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@3|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@60) |s#0@@14| |v#0@@3|) (ite  (not (|Seq#Contains| |s#0@@14| |v#0@@3|)) |s#0@@14| (let ((|i#0@@6| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@3|))) (|Seq#Append| (|Seq#Take| |s#0@@14| |i#0@@6|) (|Seq#Drop| |s#0@@14| (+ |i#0@@6| 1))))))))) :qid |unknown.0:0| :skolemid |1182| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@60) |s#0@@14| |v#0@@3|) ($IsGoodHeap $Heap@@31)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@61 T@U) ($Heap@@32 T@U) (|s#0@@15| T@U) (|v#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@61) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@4|) (and (not (= 61 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@32) ($Is |s#0@@15| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@4| Sequences._default.RemoveOneValue$V@@5))))) (and (=> (|Seq#Contains| |s#0@@15| |v#0@@4|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@4|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@61) (Lit |s#0@@15|) |v#0@@4|) (ite  (not (|Seq#Contains| |s#0@@15| |v#0@@4|)) |s#0@@15| (let ((|i#1@@5| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@4|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) |i#1@@5|) (|Seq#Drop| (Lit |s#0@@15|) (+ |i#1@@5| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1183| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@61) (Lit |s#0@@15|) |v#0@@4|) ($IsGoodHeap $Heap@@32)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@62 T@U) ($Heap@@33 T@U) (|s#0@@16| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@62) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@5|)) (and (not (= 61 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@33) ($Is |s#0@@16| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@5| Sequences._default.RemoveOneValue$V@@6))))) (and (=> (|Seq#Contains| |s#0@@16| |v#0@@5|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@5|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@62) (Lit |s#0@@16|) (Lit |v#0@@5|)) (ite  (not (|Seq#Contains| |s#0@@16| |v#0@@5|)) |s#0@@16| (let ((|i#2@@4| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@5|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) |i#2@@4|) (|Seq#Drop| (Lit |s#0@@16|) (+ |i#2@@4| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1184| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@62) (Lit |s#0@@16|) (Lit |v#0@@5|)) ($IsGoodHeap $Heap@@33)) ))))
(assert (forall ((arg0@@246 T@U) (arg1@@125 T@U) (arg2@@71 T@U) (arg3@@47 T@U) (arg4@@34 Int) ) (! (= (type (Sequences.__default.insert arg0@@246 arg1@@125 arg2@@71 arg3@@47 arg4@@34)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@246 arg1@@125 arg2@@71 arg3@@47 arg4@@34)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@63 T@U) (|s#0@@17| T@U) (|a#0@@7| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@17| |a#0@@7| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@63 |s#0@@17| |a#0@@7| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |1186| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@17| |a#0@@7| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@64 T@U) (|s#0@@18| T@U) (|a#0@@8| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@64 |s#0@@18| |a#0@@8| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@18| |a#0@@8| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |1187| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@64) |s#0@@18| |a#0@@8| |pos#0@@6|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@65 T@U) (|s#0@@19| T@U) (|a#0@@9| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@9|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@19| |a#0@@9| |pos#0@@7|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |s#0@@19| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@9| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@19|))))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|) |i#0@@7|) (|Seq#Index| |s#0@@19| |i#0@@7|)))) :qid |Sequencesidfy.198:18| :skolemid |1188| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@7|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|) |i#0@@7|)) ))) (forall ((|i#1@@6| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@6|) (< |i#1@@6| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|) (+ |i#1@@6| 1)) (|Seq#Index| |s#0@@19| |i#1@@6|)))) :qid |Sequencesidfy.199:18| :skolemid |1189| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@6|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|) |pos#0@@7|) |a#0@@9|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |1190| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@19| |a#0@@9| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@66 T@U) (|s#0@@20| T@U) (|a#0@@10| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@10|) BoxType)) (and ($Is |s#0@@20| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@10| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@20| |a#0@@10| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@20|))))) :qid |unknown.0:0| :skolemid |1191| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@20| |a#0@@10| |pos#0@@8|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@67 T@U) (|s#0@@21| T@U) (|a#0@@11| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@11|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@21| |a#0@@11| |pos#0@@9|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |s#0@@21| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@11| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@21|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@21| |a#0@@11| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@11|)) (|Seq#Drop| |s#0@@21| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |1192| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@21| |a#0@@11| |pos#0@@9|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@68 T@U) (|s#0@@22| T@U) (|a#0@@12| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@12|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@22|) |a#0@@12| (LitInt |pos#0@@10|)) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |s#0@@22| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@12| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@22|)))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@22|) |a#0@@12| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@12|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |1193| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@22|) |a#0@@12| (LitInt |pos#0@@10|))) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@69 T@U) (|s#0@@23| T@U) (|a#0@@13| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@13|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@23|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |s#0@@23| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@13| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@23|)))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@23|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@13|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |1194| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@23|) (Lit |a#0@@13|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@126 T@U) (arg2@@72 T@U) (arg3@@48 T@U) (arg4@@35 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@247 arg1@@126 arg2@@72 arg3@@48 arg4@@35 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@247 arg1@@126 arg2@@72 arg3@@48 arg4@@35 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@70 T@U) (|s#0@@24| T@U) (|a#0@@14| T@U) (|b#0@@1| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@14|) BoxType)) (= (type |b#0@@1|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@24| |a#0@@14| |b#0@@1| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@70 |s#0@@24| |a#0@@14| |b#0@@1| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |1205| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@24| |a#0@@14| |b#0@@1| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@71 T@U) (|s#0@@25| T@U) (|a#0@@15| T@U) (|b#0@@2| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (type |b#0@@2|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@71 |s#0@@25| |a#0@@15| |b#0@@2| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@25| |a#0@@15| |b#0@@2| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |1206| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@71) |s#0@@25| |a#0@@15| |b#0@@2| |pos#0@@13|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@72 T@U) (|s#0@@26| T@U) (|a#0@@16| T@U) (|b#0@@3| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (type |b#0@@3|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@16| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@3| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@26|))))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@8|) (< |i#0@@8| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@8|) (|Seq#Index| |s#0@@26| |i#0@@8|)))) :qid |Sequencesidfy.223:18| :skolemid |1207| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@8|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@8|)) ))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@7|) (< |i#1@@7| (|Seq#Length| |s#0@@26|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |i#1@@7| 1)) (|Seq#Index| |s#0@@26| |i#1@@7|)))) :qid |Sequencesidfy.224:18| :skolemid |1208| :pattern ( (|Seq#Index| |s#0@@26| |i#1@@7|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) |pos#0@@14|) |a#0@@16|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@3|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |1209| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@26| |a#0@@16| |b#0@@3| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@73 T@U) (|s#0@@27| T@U) (|a#0@@17| T@U) (|b#0@@4| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (= (type |b#0@@4|) BoxType)) (and (and ($Is |s#0@@27| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@17| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@4| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@27| |a#0@@17| |b#0@@4| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@27|))))) :qid |unknown.0:0| :skolemid |1210| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@27| |a#0@@17| |b#0@@4| |pos#0@@15|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@74 T@U) (|s#0@@28| T@U) (|a#0@@18| T@U) (|b#0@@5| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (type |b#0@@5|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@28| |a#0@@18| |b#0@@5| |pos#0@@16|) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@18| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@5| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@28|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@28| |a#0@@18| |b#0@@5| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@18|) |b#0@@5|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |1211| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@28| |a#0@@18| |b#0@@5| |pos#0@@16|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@75 T@U) (|s#0@@29| T@U) (|a#0@@19| T@U) (|b#0@@6| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (type |b#0@@6|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@29|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@19| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@6| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@29|)))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@29|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|) |b#0@@6|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1212| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@29|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|))) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@76 T@U) (|s#0@@30| T@U) (|a#0@@20| T@U) (|b#0@@7| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (= (type |b#0@@7|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@30|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@20| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@7| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@30|)))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@30|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@20|)) (Lit |b#0@@7|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1213| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@30|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@127 T@U) (arg2@@73 T@U) (arg3@@49 T@U) (arg4@@36 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@248 arg1@@127 arg2@@73 arg3@@49 arg4@@36)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@248 arg1@@127 arg2@@73 arg3@@49 arg4@@36)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@77 T@U) (|s#0@@31| T@U) (|a#0@@21| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@31| |a#0@@21| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@77 |s#0@@31| |a#0@@21| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@31| |a#0@@21| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@78 T@U) (|s#0@@32| T@U) (|a#0@@22| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@78 |s#0@@32| |a#0@@22| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@32| |a#0@@22| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |1224| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@78) |s#0@@32| |a#0@@22| |pos#0@@20|)) )))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@79 T@U) (|s#0@@33| T@U) (|a#0@@23| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@33| |a#0@@23| |pos#0@@21|) (and (not (= 64 $FunctionContextHeight)) (and (and ($Is |s#0@@33| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@23| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@33|) 1))))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|)) (- (|Seq#Length| |s#0@@33|) 1)) (forall ((|i#0@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) |i#0@@9|) (|Seq#Index| |s#0@@33| |i#0@@9|)))) :qid |Sequencesidfy.242:18| :skolemid |1225| :pattern ( (|Seq#Index| |s#0@@33| |i#0@@9|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) |i#0@@9|)) ))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@8|) (< |i#1@@8| (- (|Seq#Length| |s#0@@33|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) |i#1@@8|) (|Seq#Index| |s#0@@33| (+ |i#1@@8| 1))))) :qid |Sequencesidfy.243:18| :skolemid |1226| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) |i#1@@8|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) |pos#0@@21|) |a#0@@23|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |1227| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@33| |a#0@@23| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@80 T@U) (|s#0@@34| T@U) (|a#0@@24| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (and ($Is |s#0@@34| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@24| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@34| |a#0@@24| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@34|) 1))))) :qid |unknown.0:0| :skolemid |1228| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@34| |a#0@@24| |pos#0@@22|)) )))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@81 T@U) (|s#0@@35| T@U) (|a#0@@25| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@35| |a#0@@25| |pos#0@@23|) (and (not (= 64 $FunctionContextHeight)) (and (and ($Is |s#0@@35| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@25| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@35|) 1))))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@35| |a#0@@25| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@25|)) (|Seq#Drop| |s#0@@35| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@35| |a#0@@25| |pos#0@@23|)) ))))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@82 T@U) (|s#0@@36| T@U) (|a#0@@26| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@36|) |a#0@@26| (LitInt |pos#0@@24|)) (and (not (= 64 $FunctionContextHeight)) (and (and ($Is |s#0@@36| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@26| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@36|)) 1))))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@36|) |a#0@@26| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1230| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@36|) |a#0@@26| (LitInt |pos#0@@24|))) ))))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@83 T@U) (|s#0@@37| T@U) (|a#0@@27| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@37|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (and (not (= 64 $FunctionContextHeight)) (and (and ($Is |s#0@@37| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@27| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@37|)) 1))))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@37|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@27|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1231| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@37|) (Lit |a#0@@27|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@128 T@U) (arg2@@74 T@U) (arg3@@50 T@U) ) (! (= (type (Sequences.__default.concat arg0@@249 arg1@@128 arg2@@74 arg3@@50)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@249 arg1@@128 arg2@@74 arg3@@50)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@84 T@U) (|a#0@@28| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |a#0@@28|) (SeqType BoxType))) (= (type |b#0@@8|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@28| |b#0@@8|) (Sequences.__default.concat Sequences._default.concat$A $ly@@84 |a#0@@28| |b#0@@8|))) :qid |unknown.0:0| :skolemid |1238| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@28| |b#0@@8|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@85 T@U) (|a#0@@29| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |a#0@@29|) (SeqType BoxType))) (= (type |b#0@@9|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@85 |a#0@@29| |b#0@@9|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@29| |b#0@@9|))) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@85) |a#0@@29| |b#0@@9|)) )))
(assert  (=> (<= 65 $FunctionContextHeight) (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@86 T@U) (|a#0@@30| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |a#0@@30|) (SeqType BoxType))) (= (type |b#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@30| |b#0@@10|) (and (not (= 65 $FunctionContextHeight)) (and ($Is |a#0@@30| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@10| (TSeq Sequences._default.concat$A@@1)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|)) (+ (|Seq#Length| |a#0@@30|) (|Seq#Length| |b#0@@10|))) (forall ((|i#0@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| (|Seq#Length| |a#0@@30|))) (= (|Seq#Index| |a#0@@30| |i#0@@10|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|) |i#0@@10|)))) :qid |Sequencesidfy.251:18| :skolemid |1240| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|) |i#0@@10|)) :pattern ( (|Seq#Index| |a#0@@30| |i#0@@10|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |b#0@@10|))) (= (|Seq#Index| |b#0@@10| |i#1@@9|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|) (+ (|Seq#Length| |a#0@@30|) |i#1@@9|))))) :qid |Sequencesidfy.252:18| :skolemid |1241| :pattern ( (|Seq#Index| |b#0@@10| |i#1@@9|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |1242| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@30| |b#0@@10|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@87 T@U) (|a#0@@31| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |a#0@@31|) (SeqType BoxType))) (= (type |b#0@@11|) (SeqType BoxType))) (and ($Is |a#0@@31| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@11| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@31| |b#0@@11|) true)) :qid |unknown.0:0| :skolemid |1243| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@31| |b#0@@11|)) )))
(assert  (=> (<= 65 $FunctionContextHeight) (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@88 T@U) (|a#0@@32| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |a#0@@32|) (SeqType BoxType))) (= (type |b#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@32| |b#0@@12|) (and (not (= 65 $FunctionContextHeight)) (and ($Is |a#0@@32| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@12| (TSeq Sequences._default.concat$A@@3)))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@32| |b#0@@12|) (|Seq#Append| |a#0@@32| |b#0@@12|))) :qid |unknown.0:0| :skolemid |1244| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@32| |b#0@@12|)) ))))
(assert  (=> (<= 65 $FunctionContextHeight) (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@89 T@U) (|a#0@@33| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |a#0@@33|) (SeqType BoxType))) (= (type |b#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@33|) (Lit |b#0@@13|)) (and (not (= 65 $FunctionContextHeight)) (and ($Is |a#0@@33| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@13| (TSeq Sequences._default.concat$A@@4)))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@33|) (Lit |b#0@@13|)) (|Seq#Append| |a#0@@33| |b#0@@13|))) :qid |unknown.0:0| :weight 3 :skolemid |1245| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@33|) (Lit |b#0@@13|))) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@129 T@U) (arg2@@75 T@U) (arg3@@51 T@U) (arg4@@37 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@250 arg1@@129 arg2@@75 arg3@@51 arg4@@37)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@250 arg1@@129 arg2@@75 arg3@@51 arg4@@37)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@90 T@U) (|a#0@@34| T@U) (|b#0@@14| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@34|) (SeqType BoxType))) (= (type |b#0@@14|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@34| |b#0@@14| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@90 |a#0@@34| |b#0@@14| |c#0@@3|))) :qid |unknown.0:0| :skolemid |1252| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@34| |b#0@@14| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@91 T@U) (|a#0@@35| T@U) (|b#0@@15| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@35|) (SeqType BoxType))) (= (type |b#0@@15|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@91 |a#0@@35| |b#0@@15| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@35| |b#0@@15| |c#0@@4|))) :qid |unknown.0:0| :skolemid |1253| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@91) |a#0@@35| |b#0@@15| |c#0@@4|)) )))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@92 T@U) (|a#0@@36| T@U) (|b#0@@16| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@16|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@36| |b#0@@16| |c#0@@5|) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |a#0@@36| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@16| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@36|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| (|Seq#Length| |a#0@@36|))) (= (|Seq#Index| |a#0@@36| |i#0@@11|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|) |i#0@@11|)))) :qid |Sequencesidfy.259:18| :skolemid |1254| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|) |i#0@@11|)) :pattern ( (|Seq#Index| |a#0@@36| |i#0@@11|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|) (|Seq#Length| |a#0@@36|)) |b#0@@16|)) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@10|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@36|) 1) |i#1@@10|))))) :qid |Sequencesidfy.261:18| :skolemid |1255| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@10|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@36| |b#0@@16| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@93 T@U) (|a#0@@37| T@U) (|b#0@@17| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@17|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@37| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@17| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@37| |b#0@@17| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |1257| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@37| |b#0@@17| |c#0@@6|)) )))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@94 T@U) (|a#0@@38| T@U) (|b#0@@18| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@18|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@38| |b#0@@18| |c#0@@7|) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |a#0@@38| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@18| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3)))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@38| |b#0@@18| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@38| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@18|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |1258| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@38| |b#0@@18| |c#0@@7|)) ))))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@95 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|)) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |a#0@@39| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@19| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4)))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@19|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |1259| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|))) ))))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@96 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|)) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |a#0@@40| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@20| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5)))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@40| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@20|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |1260| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@130 T@U) (arg2@@76 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@251 arg1@@130 arg2@@76)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@251 arg1@@130 arg2@@76)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@97 T@U) (|a#0@@41| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@41|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@97 |a#0@@41|))) :qid |unknown.0:0| :skolemid |1267| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@41|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@98 T@U) (|a#0@@42| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@98 |a#0@@42|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@42|))) :qid |unknown.0:0| :skolemid |1268| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@98) |a#0@@42|)) )))
(assert  (=> (<= 67 $FunctionContextHeight) (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@99 T@U) (|a#0@@43| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@43|) (and (not (= 67 $FunctionContextHeight)) ($Is |a#0@@43| (TSeq (TSeq Sequences._default.concatSeq$A@@1)))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@43|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |1269| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@43|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@100 T@U) (|a#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) ($Is |a#0@@44| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@44|) true)) :qid |unknown.0:0| :skolemid |1270| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@44|)) )))
(assert  (=> (<= 67 $FunctionContextHeight) (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@101 T@U) (|a#0@@45| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@45|) (and (not (= 67 $FunctionContextHeight)) ($Is |a#0@@45| (TSeq (TSeq Sequences._default.concatSeq$A@@3)))))) (and (=> (not (= (|Seq#Length| |a#0@@45|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@45|) (ite (= (|Seq#Length| |a#0@@45|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@101 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))))))) :qid |unknown.0:0| :skolemid |1271| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@45|)) ))))
(assert  (=> (<= 67 $FunctionContextHeight) (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@102 T@U) (|a#0@@46| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@46|)) (and (not (= 67 $FunctionContextHeight)) ($Is |a#0@@46| (TSeq (TSeq Sequences._default.concatSeq$A@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1272| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@46|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@103 T@U) (|a#0@@47| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@103 |a#0@@47| |b#0@@21|))) :qid |unknown.0:0| :skolemid |1291| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@47| |b#0@@21|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@104 T@U) (|a#0@@48| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@104 |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|))) :qid |unknown.0:0| :skolemid |1292| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@104) |a#0@@48| |b#0@@22|)) )))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@105 T@U) (|a#0@@49| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@49| |b#0@@23|) (and (not (= 72 $FunctionContextHeight)) (and ($Is |a#0@@49| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@23| (TSeq Sequences._default.IsPrefix$A@@1)))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@49| |b#0@@23|)) (<= (|Seq#Length| |a#0@@49|) (|Seq#Length| |b#0@@23|))) :qid |unknown.0:0| :skolemid |1293| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@49| |b#0@@23|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@106 T@U) (|a#0@@50| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (and ($Is |a#0@@50| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@24| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@50| |b#0@@24|) true)) :qid |unknown.0:0| :skolemid |1294| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@50| |b#0@@24|)) )))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@107 T@U) (|a#0@@51| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@51| |b#0@@25|) (and (not (= 72 $FunctionContextHeight)) (and ($Is |a#0@@51| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@25| (TSeq Sequences._default.IsPrefix$A@@3)))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@51| |b#0@@25|)  (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|)))))) :qid |unknown.0:0| :skolemid |1295| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@51| |b#0@@25|)) ))))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@108 T@U) (|a#0@@52| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@52|) (Lit |b#0@@26|)) (and (not (= 72 $FunctionContextHeight)) (and ($Is |a#0@@52| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@26| (TSeq Sequences._default.IsPrefix$A@@4)))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@52|) (Lit |b#0@@26|))  (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1296| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@52|) (Lit |b#0@@26|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@109 T@U) (|a#0@@53| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@109 |a#0@@53| |b#0@@27|))) :qid |unknown.0:0| :skolemid |1297| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@53| |b#0@@27|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@110 T@U) (|a#0@@54| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@110 |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|))) :qid |unknown.0:0| :skolemid |1298| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@110) |a#0@@54| |b#0@@28|)) )))
(assert  (=> (<= 81 $FunctionContextHeight) (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@111 T@U) (|a#0@@55| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@55| |b#0@@29|) (and (not (= 81 $FunctionContextHeight)) (and ($Is |a#0@@55| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@29| (TSeq Sequences._default.IsSuffix$A@@1)))))) true) :qid |unknown.0:0| :skolemid |1299| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@111 |a#0@@55| |b#0@@29|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@112 T@U) (|a#0@@56| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@56| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@30| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@56| |b#0@@30|) true)) :qid |unknown.0:0| :skolemid |1300| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@56| |b#0@@30|)) )))
(assert  (=> (<= 81 $FunctionContextHeight) (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@113 T@U) (|a#0@@57| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@57| |b#0@@31|) (and (not (= 81 $FunctionContextHeight)) (and ($Is |a#0@@57| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@31| (TSeq Sequences._default.IsSuffix$A@@3)))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@57| |b#0@@31|)  (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|))))))) :qid |unknown.0:0| :skolemid |1301| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@57| |b#0@@31|)) ))))
(assert  (=> (<= 81 $FunctionContextHeight) (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@114 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@58|) (Lit |b#0@@32|)) (and (not (= 81 $FunctionContextHeight)) (and ($Is |a#0@@58| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@32| (TSeq Sequences._default.IsSuffix$A@@4)))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@58|) (Lit |b#0@@32|))  (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1302| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@58|) (Lit |b#0@@32|))) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@131 T@U) (arg2@@77 T@U) (arg3@@52 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@252 arg1@@131 arg2@@77 arg3@@52 arg4@@38)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@252 arg1@@131 arg2@@77 arg3@@52 arg4@@38)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@115 T@U) (|run#0@@58| T@U) (|needle#0| T@U) (|i#0@@12| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@58| |needle#0| |i#0@@12|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@115 |run#0@@58| |needle#0| |i#0@@12|))) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@58| |needle#0| |i#0@@12|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@116 T@U) (|run#0@@59| T@U) (|needle#0@@0| T@U) (|i#0@@13| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@116 |run#0@@59| |needle#0@@0| |i#0@@13|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@59| |needle#0@@0| |i#0@@13|))) :qid |unknown.0:0| :skolemid |1304| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@116) |run#0@@59| |needle#0@@0| |i#0@@13|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Options.Option.value arg0@@253)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@253)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@117 T@U) (|run#0@@60| T@U) (|needle#0@@1| T@U) (|i#0@@14| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@60| |needle#0@@1| |i#0@@14|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@14|) (<= |i#0@@14| (|Seq#Length| |run#0@@60|))))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|)))) (|Seq#Length| |run#0@@60|))) (= (|Seq#Index| |run#0@@60| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|)) (forall ((|j#0@@0| Int) ) (!  (=> (and (<= |i#0@@14| |j#0@@0|) (< |j#0@@0| (|Seq#Length| |run#0@@60|))) (not (= (|Seq#Index| |run#0@@60| |j#0@@0|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |1305| :pattern ( (|Seq#Index| |run#0@@60| |j#0@@0|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1306| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@60| |needle#0@@1| |i#0@@14|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@118 T@U) (|run#0@@61| T@U) (|needle#0@@2| T@U) (|i#0@@15| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@61| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@61| |needle#0@@2| |i#0@@15|)  (and (<= (LitInt 0) |i#0@@15|) (<= |i#0@@15| (|Seq#Length| |run#0@@61|))))) :qid |unknown.0:0| :skolemid |1307| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@61| |needle#0@@2| |i#0@@15|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@119 T@U) (|run#0@@62| T@U) (|needle#0@@3| T@U) (|i#0@@16| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@62| |needle#0@@3| |i#0@@16|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |run#0@@62| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@16|) (<= |i#0@@16| (|Seq#Length| |run#0@@62|))))))) (and (=> (not (= |i#0@@16| (|Seq#Length| |run#0@@62|))) (=> (not (= (|Seq#Index| |run#0@@62| |i#0@@16|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@62| |needle#0@@3| (+ |i#0@@16| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@62| |needle#0@@3| |i#0@@16|) (ite (= |i#0@@16| (|Seq#Length| |run#0@@62|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@62| |i#0@@16|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@16|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@119 |run#0@@62| |needle#0@@3| (+ |i#0@@16| 1))))))) :qid |unknown.0:0| :skolemid |1308| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@62| |needle#0@@3| |i#0@@16|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@120 T@U) (|run#0@@63| T@U) (|needle#0@@4| T@U) (|i#0@@17| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@63|) |needle#0@@4| (LitInt |i#0@@17|)) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@17|)) (<= (LitInt |i#0@@17|) (|Seq#Length| (Lit |run#0@@63|)))))))) (and (=> (not (= (LitInt |i#0@@17|) (|Seq#Length| (Lit |run#0@@63|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@63|) (LitInt |i#0@@17|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@63|) |needle#0@@4| (LitInt (+ |i#0@@17| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@63|) |needle#0@@4| (LitInt |i#0@@17|)) (ite (= (LitInt |i#0@@17|) (|Seq#Length| (Lit |run#0@@63|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@63|) (LitInt |i#0@@17|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@17|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@63|) |needle#0@@4| (LitInt (+ |i#0@@17| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1309| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@63|) |needle#0@@4| (LitInt |i#0@@17|))) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@121 T@U) (|run#0@@64| T@U) (|needle#0@@5| T@U) (|i#0@@18| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@64|) (Lit |needle#0@@5|) (LitInt |i#0@@18|)) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@18|)) (<= (LitInt |i#0@@18|) (|Seq#Length| (Lit |run#0@@64|)))))))) (and (=> (not (= (LitInt |i#0@@18|) (|Seq#Length| (Lit |run#0@@64|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@64|) (LitInt |i#0@@18|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@64|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@18| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@64|) (Lit |needle#0@@5|) (LitInt |i#0@@18|)) (ite (= (LitInt |i#0@@18|) (|Seq#Length| (Lit |run#0@@64|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@64|) (LitInt |i#0@@18|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@18|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@64|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@18| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1310| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@64|) (Lit |needle#0@@5|) (LitInt |i#0@@18|))) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@132 T@U) (arg2@@78 T@U) (arg3@@53 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@254 arg1@@132 arg2@@78 arg3@@53)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@254 arg1@@132 arg2@@78 arg3@@53)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@122 T@U) (|run#0@@65| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@65| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@122 |run#0@@65| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |1315| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@65| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@123 T@U) (|run#0@@66| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@123 |run#0@@66| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@66| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |1316| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@123) |run#0@@66| |needle#0@@7|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@124 T@U) (|run#0@@67| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@67| |needle#0@@8|) (and (not (= 14 $FunctionContextHeight)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|)))) (|Seq#Length| |run#0@@67|))) (= (|Seq#Index| |run#0@@67| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|)) (forall ((|i#0@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@19|) (< |i#0@@19| (|Seq#Length| |run#0@@67|))) (not (= (|Seq#Index| |run#0@@67| |i#0@@19|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |1317| :pattern ( (|Seq#Index| |run#0@@67| |i#0@@19|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1318| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@67| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@125 T@U) (|run#0@@68| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@68| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |1319| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@68| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@126 T@U) (|run#0@@69| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@69| |needle#0@@10|) (and (not (= 14 $FunctionContextHeight)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3))))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@69| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@69| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@69| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |1320| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@69| |needle#0@@10|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@127 T@U) (|run#0@@70| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@70|) |needle#0@@11|) (and (not (= 14 $FunctionContextHeight)) (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4))))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@70|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@70|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@70|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1321| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@70|) |needle#0@@11|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@128 T@U) (|run#0@@71| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@71|) (Lit |needle#0@@12|)) (and (not (= 14 $FunctionContextHeight)) (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5))))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@71|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@71|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@71|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1322| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@71|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@255 T@U) (arg1@@133 T@U) (arg2@@79 Int) (arg3@@54 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@255 arg1@@133 arg2@@79 arg3@@54)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@255 arg1@@133 arg2@@79 arg3@@54)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@129 T@U) (|length#0| Int) (|v#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |v#0@@6|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0@@6|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@129 |length#0| |v#0@@6|))) :qid |unknown.0:0| :skolemid |1327| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0@@6|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@130 T@U) (|length#0@@0| Int) (|v#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |v#0@@7|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@130 |length#0@@0| |v#0@@7|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@7|))) :qid |unknown.0:0| :skolemid |1328| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@130) |length#0@@0| |v#0@@7|)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@131 T@U) (|length#0@@1| Int) (|v#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |v#0@@8|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@8|) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@8| Sequences._default.SeqOfLength$V@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|)) |length#0@@1|) (forall ((|i#0@@20| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@20|) (< |i#0@@20| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|) |i#0@@20|) |v#0@@8|)) :qid |Sequencesidfy.358:18| :skolemid |1329| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|) |i#0@@20|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |1330| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@132 T@U) (|length#0@@2| Int) (|v#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |v#0@@9|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@9| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@9|) true)) :qid |unknown.0:0| :skolemid |1331| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@9|)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@133 T@U) (|length#0@@3| Int) (|v#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@10|) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@10| Sequences._default.SeqOfLength$V@@3))))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@10|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@10|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@10|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@133 (- |length#0@@3| 1) |v#0@@10|)))))) :qid |unknown.0:0| :skolemid |1332| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@10|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@134 T@U) (|length#0@@4| Int) (|v#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |v#0@@11|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@11|) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@11| Sequences._default.SeqOfLength$V@@4))))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@11|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@11|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@11|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt (- |length#0@@4| 1)) |v#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1333| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@11|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@135 T@U) (|length#0@@5| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@12|)) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@12| Sequences._default.SeqOfLength$V@@5))))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@12|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@12|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@12|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1334| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@12|))) ))))
(assert (forall ((arg0@@256 T@U) (arg1@@134 T@U) (arg2@@80 T@U) (arg3@@55 Int) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@256 arg1@@134 arg2@@80 arg3@@55 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@256 arg1@@134 arg2@@80 arg3@@55 arg4@@39)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@136 T@U) (|s#0@@38| T@U) (|i#0@@21| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@38| |i#0@@21| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@136 |s#0@@38| |i#0@@21| |t#0|))) :qid |unknown.0:0| :skolemid |1338| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@38| |i#0@@21| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@137 T@U) (|s#0@@39| T@U) (|i#0@@22| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@137 |s#0@@39| |i#0@@22| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@39| |i#0@@22| |t#0@@0|))) :qid |unknown.0:0| :skolemid |1339| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@137) |s#0@@39| |i#0@@22| |t#0@@0|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@138 T@U) (|s#0@@40| T@U) (|i#0@@23| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@40| |i#0@@23| |t#0@@1|) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($Is |s#0@@40| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@23| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| (|Seq#Length| |s#0@@40|)))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@40| |i#0@@23| |t#0@@1|) (|Seq#Update| |s#0@@40| |i#0@@23| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@40| |i#0@@23| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |1340| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@40| |i#0@@23| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@139 T@U) (|s#0@@41| T@U) (|i#0@@24| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@41| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@24|) (< |i#0@@24| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@41| |i#0@@24| |t#0@@2|)  (and (< (+ |i#0@@24| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@24|) (< |i#0@@24| (|Seq#Length| |s#0@@41|)))))) :qid |unknown.0:0| :skolemid |1341| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@41| |i#0@@24| |t#0@@2|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@140 T@U) (|s#0@@42| T@U) (|i#0@@25| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@42| |i#0@@25| |t#0@@3|) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($Is |s#0@@42| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@25| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| (|Seq#Length| |s#0@@42|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@42| |i#0@@25| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@42| |i#0@@25|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@42| (+ |i#0@@25| 1))))) :qid |unknown.0:0| :skolemid |1342| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@42| |i#0@@25| |t#0@@3|)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@141 T@U) (|s#0@@43| T@U) (|i#0@@26| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@43|) (LitInt |i#0@@26|) |t#0@@4|) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($Is |s#0@@43| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@26| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@26|)) (< |i#0@@26| (|Seq#Length| (Lit |s#0@@43|))))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@43|) (LitInt |i#0@@26|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@43|) (LitInt |i#0@@26|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@43|) (LitInt (+ |i#0@@26| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1343| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@43|) (LitInt |i#0@@26|) |t#0@@4|)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@142 T@U) (|s#0@@44| T@U) (|i#0@@27| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@44|) (LitInt |i#0@@27|) (Lit |t#0@@5|)) (and (not (= 17 $FunctionContextHeight)) (and (and (and ($Is |s#0@@44| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@27| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@27|)) (< |i#0@@27| (|Seq#Length| (Lit |s#0@@44|))))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@44|) (LitInt |i#0@@27|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@44|) (LitInt |i#0@@27|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@44|) (LitInt (+ |i#0@@27| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1344| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@44|) (LitInt |i#0@@27|) (Lit |t#0@@5|))) ))))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@71)) bx@@71) ($Is ($Unbox intType bx@@71) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1345| :pattern ( ($IsBox bx@@71 Tclass.NativeTypes.uint64)) )))
(assert (forall ((arg0@@257 T@U) (arg1@@135 T@U) (arg2@@81 T@U) (arg3@@56 T@U) (arg4@@40 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@257 arg1@@135 arg2@@81 arg3@@56 arg4@@40)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@257 arg1@@135 arg2@@81 arg3@@56 arg4@@40)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@143 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@59| |b#0@@33|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@143 |a#0@@59| |b#0@@33|))) :qid |unknown.0:0| :skolemid |1346| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@59| |b#0@@33|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@144 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@144 |a#0@@60| |b#0@@34|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |1347| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@144) |a#0@@60| |b#0@@34|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@145 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@61| |b#0@@35|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |a#0@@61| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@61|) (|Seq#Length| |b#0@@35|)))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|)) (|Seq#Length| |a#0@@61|)) (forall ((|i#0@@28| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|) |i#0@@28|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@61| |i#0@@28|) (|Seq#Index| |b#0@@35| |i#0@@28|))))) :qid |Sequencesidfy.379:20| :skolemid |1348| :pattern ( (|Seq#Index| |b#0@@35| |i#0@@28|)) :pattern ( (|Seq#Index| |a#0@@61| |i#0@@28|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|) |i#0@@28|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |1349| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@61| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@146 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@62| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@62| |b#0@@36|) (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@62| |b#0@@36|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@147 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@63| |b#0@@37|) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |a#0@@63| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@63|) (|Seq#Length| |b#0@@37|)))))) (and (=> (not (= (|Seq#Length| |a#0@@63|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@63| |b#0@@37|) (ite (= (|Seq#Length| |a#0@@63|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@147 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@37|))))))))) :qid |unknown.0:0| :skolemid |1351| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@63| |b#0@@37|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@148 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@148) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@64|) (Lit |b#0@@38|)) (and (not (= 19 $FunctionContextHeight)) (and (and ($Is |a#0@@64| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@64|)) (|Seq#Length| (Lit |b#0@@38|))))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@64|) (Lit |b#0@@38|)) (ite (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1352| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@64|) (Lit |b#0@@38|))) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@136 T@U) (arg2@@82 T@U) (arg3@@57 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@258 arg1@@136 arg2@@82 arg3@@57)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@258 arg1@@136 arg2@@82 arg3@@57)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@149 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@149 |z#0|))) :qid |unknown.0:0| :skolemid |1361| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@150 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@150 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@150) |z#0@@0|)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@151 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) (and (not (= 20 $FunctionContextHeight)) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1)))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@29| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@29|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@29|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@29|))))) :qid |Sequencesidfy.387:20| :skolemid |1363| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@29|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@29|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@29|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |1364| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@152 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |1365| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@153 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) (and (not (= 20 $FunctionContextHeight)) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3)))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@39| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@65| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@65| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |1366| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@154 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) (and (not (= 20 $FunctionContextHeight)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1367| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@259 T@U) (arg1@@137 T@U) (arg2@@83 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@259 arg1@@137 arg2@@83)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@259 arg1@@137 arg2@@83)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@155 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@155 |seqs#0|))) :qid |unknown.0:0| :skolemid |1377| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@156 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@156 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |1378| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@156) |seqs#0@@0|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@157 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) (and (not (= 22 $FunctionContextHeight)) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1)))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@30| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@30|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@30|)))))) :qid |Sequencesidfy.409:20| :skolemid |1379| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@30|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@30|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |1380| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@158 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |1381| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@159 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) (and (not (= 22 $FunctionContextHeight)) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3)))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@159 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |1382| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|)) ))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@160 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) (and (not (= 22 $FunctionContextHeight)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1383| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@161 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@161) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|) (Sequences.__default.FlattenLength $ly@@161 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |1390| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|)) )))
(assert (forall (($ly@@162 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@162) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@162 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |1391| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@162) |shape#0@@0|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@163 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@163) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) (and (not (= 23 $FunctionContextHeight)) ($Is |shape#0@@1| (TSeq Tclass._System.nat))))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |1392| :pattern ( (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)) ))))
(assert (forall (($ly@@164 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@164) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |1393| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@165 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@165) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) (and (not (= 23 $FunctionContextHeight)) ($Is |shape#0@@3| (TSeq Tclass._System.nat))))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@165 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |1394| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@166 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@166) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) (and (not (= 23 $FunctionContextHeight)) ($Is |shape#0@@4| (TSeq Tclass._System.nat))))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |1395| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@138 T@U) (arg2@@84 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@260 arg1@@138 arg2@@84)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@260 arg1@@138 arg2@@84)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@167 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@167 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |1404| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@168 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@168 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |1405| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@168) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@169 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) (and (not (= 35 $FunctionContextHeight)) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1)))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |1406| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@170 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |1407| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@171 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) (and (not (= 35 $FunctionContextHeight)) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3)))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@171 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |1408| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@172 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) (and (not (= 35 $FunctionContextHeight)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1409| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|))) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|shape#0@@5| T@U) (|i#0@@31| Int) (|j#0@@1| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@31| |j#0@@1|) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@31|)) (<= (LitInt 0) |j#0@@1|)) (and (< |i#0@@31| (|Seq#Length| |shape#0@@5|)) (< |j#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@31|))))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@31| |j#0@@1|))) :qid |Sequencesidfy.489:25| :skolemid |1419| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@31| |j#0@@1|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@32| Int) (|j#0@@2| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@32|)) (<= (LitInt 0) |j#0@@2|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@32| |j#0@@2|)  (and (< |i#0@@32| (|Seq#Length| |shape#0@@6|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@32|)))))))) :qid |Sequencesidfy.489:25| :skolemid |1420| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@32| |j#0@@2|)) )))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|shape#0@@7| T@U) (|i#0@@33| Int) (|j#0@@3| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@33| |j#0@@3|) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@33|)) (<= (LitInt 0) |j#0@@3|)) (and (< |i#0@@33| (|Seq#Length| |shape#0@@7|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@33|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@33|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@33| |j#0@@3|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@33|)) |j#0@@3|)))) :qid |Sequencesidfy.489:25| :skolemid |1421| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@33| |j#0@@3|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|shape#0@@8| T@U) (|i#0@@34| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@34|) (LitInt |j#0@@4|)) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@34|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@34| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@34|)))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@34|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@34|) (LitInt |j#0@@4|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@34|)))) |j#0@@4|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |1422| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@34|) (LitInt |j#0@@4|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@139 T@U) (arg2@@85 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@261 arg1@@139 arg2@@85)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@261 arg1@@139 arg2@@85)) )))
(assert (forall (($ly@@173 T@U) (|shape#0@@9| T@U) (|i#0@@35| Int) ) (!  (=> (and (= (type $ly@@173) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@35|) (Sequences.__default.UnflattenIndex $ly@@173 |shape#0@@9| |i#0@@35|))) :qid |Sequencesidfy.496:12| :skolemid |1424| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@35|)) )))
(assert (forall (($ly@@174 T@U) (|shape#0@@10| T@U) (|i#0@@36| Int) ) (!  (=> (and (= (type $ly@@174) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@174 |shape#0@@10| |i#0@@36|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@36|))) :qid |Sequencesidfy.496:12| :skolemid |1425| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@174) |shape#0@@10| |i#0@@36|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@175 T@U) (|shape#0@@11| T@U) (|i#0@@37| Int) ) (!  (=> (and (and (= (type $ly@@175) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@37|) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@37|)) (< |i#0@@37| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|)))))) ($Is (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@37|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |1426| :pattern ( (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@37|)) ))))
(assert (forall (($ly@@176 T@U) (|shape#0@@12| T@U) (|i#0@@38| Int) ) (!  (=> (and (and (= (type $ly@@176) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@38|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@38|) (< |i#0@@38| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |1427| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@38|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@177 T@U) (|shape#0@@13| T@U) (|i#0@@39| Int) ) (!  (=> (and (and (= (type $ly@@177) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@39|) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@39|)) (< |i#0@@39| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@39| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@39|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@39|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@39|) (ite (< |i#0@@39| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@177 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@39|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@39| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |1428| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@39|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@178 T@U) (|shape#0@@14| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (= (type $ly@@178) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@40|)) (and (not (= 28 $FunctionContextHeight)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@40|)) (< |i#0@@40| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|))))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@40| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@40|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@40|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@40|)) (ite (< |i#0@@40| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@40|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@40| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |1429| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@40|))) ))))
(assert (forall (($ly@@179 T@U) (|s#0@@45| T@U) ) (!  (=> (and (= (type $ly@@179) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@179) |s#0@@45|) (Sequences.__default.seqMax $ly@@179 |s#0@@45|))) :qid |Sequencesidfy.606:22| :skolemid |1457| :pattern ( (Sequences.__default.seqMax ($LS $ly@@179) |s#0@@45|)) )))
(assert (forall (($ly@@180 T@U) (|s#0@@46| T@U) ) (!  (=> (and (= (type $ly@@180) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@180 |s#0@@46|) (Sequences.__default.seqMax $LZ |s#0@@46|))) :qid |Sequencesidfy.606:22| :skolemid |1458| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@180) |s#0@@46|)) )))
(assert  (=> (<= 39 $FunctionContextHeight) (forall (($ly@@181 T@U) (|s#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@181) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@47|) (and (not (= 39 $FunctionContextHeight)) (and ($Is |s#0@@47| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@47|)))))) (and (forall ((|k#0| T@U) ) (!  (=> (and (and (= (type |k#0|) intType) true) (|Seq#Contains| |s#0@@47| ($Box |k#0|))) (>= (Sequences.__default.seqMax $ly@@181 |s#0@@47|) (U_2_int |k#0|))) :qid |Sequencesidfy.608:20| :skolemid |1459| :pattern ( (|Seq#Contains| |s#0@@47| ($Box |k#0|))) )) (|Seq#Contains| |s#0@@47| ($Box (int_2_U (Sequences.__default.seqMax $ly@@181 |s#0@@47|)))))) :qid |Sequencesidfy.606:22| :skolemid |1460| :pattern ( (Sequences.__default.seqMax $ly@@181 |s#0@@47|)) ))))
(assert (forall (($ly@@182 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@182) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) ($Is |s#0@@48| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@182 |s#0@@48|) (< 0 (|Seq#Length| |s#0@@48|)))) :qid |Sequencesidfy.606:22| :skolemid |1461| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@182 |s#0@@48|)) )))
(assert  (=> (<= 39 $FunctionContextHeight) (forall (($ly@@183 T@U) (|s#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@183) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@49|) (and (not (= 39 $FunctionContextHeight)) (and ($Is |s#0@@49| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@49|)))))) (and (=> (not (= (|Seq#Length| |s#0@@49|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@49|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@49|))) (|Sequences.__default.Last#canCall| TInt |s#0@@49|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@183 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))) (= (Sequences.__default.seqMax ($LS $ly@@183) |s#0@@49|) (ite (= (|Seq#Length| |s#0@@49|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@49| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@183 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))))) :qid |Sequencesidfy.606:22| :skolemid |1462| :pattern ( (Sequences.__default.seqMax ($LS $ly@@183) |s#0@@49|)) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall (($ly@@184 T@U) (|s#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@184) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@50|)) (and (not (= 39 $FunctionContextHeight)) (and ($Is |s#0@@50| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@50|))))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@50|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@50|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@184) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@184) (Lit |s#0@@50|)) (ite (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@50|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@184) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |1463| :pattern ( (Sequences.__default.seqMax ($LS $ly@@184) (Lit |s#0@@50|))) ))))
(assert (forall ((arg0@@262 T@U) (arg1@@140 T@U) (arg2@@86 Int) (arg3@@58 T@U) ) (! (= (type (Sequences.__default.fill arg0@@262 arg1@@140 arg2@@86 arg3@@58)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@262 arg1@@140 arg2@@86 arg3@@58)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@185 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@185) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@185 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |1492| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@185) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@186 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@186 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |1493| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@186) |n#0@@6| |t#0@@7|)) )))
(assert  (=> (<= 78 $FunctionContextHeight) (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@187 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and (not (= 78 $FunctionContextHeight)) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0)))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@187 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@41| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@187 |n#0@@7| |t#0@@8|) |i#0@@41|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |1494| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@187 |n#0@@7| |t#0@@8|) |i#0@@41|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@187 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |1495| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@187 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@188 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@188 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |1496| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@188 |n#0@@8| |t#0@@9|)) )))
(assert  (=> (<= 78 $FunctionContextHeight) (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@189 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and (not (= 78 $FunctionContextHeight)) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0)))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@189) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@189 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |1497| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@189) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> (<= 78 $FunctionContextHeight) (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@190 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and (not (= 78 $FunctionContextHeight)) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0)))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@190) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@190) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1498| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@190) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> (<= 78 $FunctionContextHeight) (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@191 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and (not (= 78 $FunctionContextHeight)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0)))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@191) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@191) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1499| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@191) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@72)) bx@@72) ($Is ($Unbox refType bx@@72) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |1503| :pattern ( ($IsBox bx@@72 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@14 T@U) ) (!  (=> (= (type $o@@14) refType) (= ($Is $o@@14 Tclass.SequencesLite.__default)  (or (= $o@@14 null) (= (dtype $o@@14) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |1504| :pattern ( ($Is $o@@14 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@15 T@U) ($h@@23 T@U) ) (!  (=> (and (= (type $o@@15) refType) (= (type $h@@23) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@15 Tclass.SequencesLite.__default $h@@23)  (or (= $o@@15 null) (U_2_bool (MapType1Select (MapType0Select $h@@23 $o@@15) alloc))))) :qid |unknown.0:0| :skolemid |1505| :pattern ( ($IsAlloc $o@@15 Tclass.SequencesLite.__default $h@@23)) )))
(assert (forall ((arg0@@263 T@U) (arg1@@141 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@263 arg1@@141)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@263 arg1@@141)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0@@72| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0@@72|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0@@72|) (and ($Is |run#0@@72| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0@@72|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0@@72|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |1506| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0@@72|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@73| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@73|) (SeqType BoxType))) ($Is |run#0@@73| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@73|) (> (|Seq#Length| |run#0@@73|) 0))) :qid |unknown.0:0| :skolemid |1507| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@73|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@74| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@74|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@74|) (and ($Is |run#0@@74| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@74|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@74|) (|Seq#Index| |run#0@@74| (- (|Seq#Length| |run#0@@74|) 1)))) :qid |unknown.0:0| :skolemid |1508| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@74|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@75| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@75|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@75|)) (and ($Is |run#0@@75| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@75|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@75|)) (|Seq#Index| (Lit |run#0@@75|) (- (|Seq#Length| (Lit |run#0@@75|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1509| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@75|))) ))))
(assert (forall ((arg0@@264 T@U) (arg1@@142 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@264 arg1@@142)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@264 arg1@@142)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@76| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@76|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@76|) (and ($Is |run#0@@76| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@76|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@76|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1510| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@76|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@77| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@77|) (SeqType BoxType))) ($Is |run#0@@77| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@77|) (> (|Seq#Length| |run#0@@77|) 0))) :qid |unknown.0:0| :skolemid |1511| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@77|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@78| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@78|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@78|) (and ($Is |run#0@@78| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@78|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@78|) (|Seq#Take| |run#0@@78| (- (|Seq#Length| |run#0@@78|) 1)))) :qid |unknown.0:0| :skolemid |1512| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@78|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@79| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@79|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@79|)) (and ($Is |run#0@@79| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@79|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@79|)) (|Seq#Take| (Lit |run#0@@79|) (- (|Seq#Length| (Lit |run#0@@79|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1513| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@79|))) ))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (Options.Option.None_q d@@10) (= (DatatypeCtorId d@@10) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |1514| :pattern ( (Options.Option.None_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (Options.Option.None_q d@@11)) (= d@@11 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1515| :pattern ( (Options.Option.None_q d@@11)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1516| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@24 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@24)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@24)) :qid |unknown.0:0| :skolemid |1517| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@24)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |1518| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (= (type d@@12) DatatypeTypeType) (= (Options.Option.Some_q d@@12) (= (DatatypeCtorId d@@12) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |1519| :pattern ( (Options.Option.Some_q d@@12)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (Options.Option.Some_q d@@13)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@13 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsdfy.5:36| :skolemid |1520| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1521| :pattern ( (Options.Option.Some_q d@@13)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |1522| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@25)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@25) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@25))) :qid |unknown.0:0| :skolemid |1523| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@25)) )))
(assert (forall ((d@@14 T@U) (Options.Option$V@@6 T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (= (type d@@14) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@26) (and (Options.Option.Some_q d@@14) ($IsAlloc d@@14 (Tclass.Options.Option Options.Option$V@@6) $h@@26)))) ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@26)) :qid |unknown.0:0| :skolemid |1524| :pattern ( ($IsAllocBox (Options.Option.value d@@14) Options.Option$V@@6 $h@@26)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |1525| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsdfy.5:36| :skolemid |1526| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |1527| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#Options.Option| d@@15)) (or (Options.Option.None_q d@@15) (Options.Option.Some_q d@@15))) :qid |unknown.0:0| :skolemid |1528| :pattern ( (|$IsA#Options.Option| d@@15)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@16 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@16) DatatypeTypeType)) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@16) (Options.Option.Some_q d@@16))) :qid |unknown.0:0| :skolemid |1529| :pattern ( (Options.Option.Some_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@16) ($Is d@@16 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (and (Options.Option.None_q a@@116) (Options.Option.None_q b@@65))) (= (|Options.Option#Equal| a@@116 b@@65) true)) :qid |unknown.0:0| :skolemid |1530| :pattern ( (|Options.Option#Equal| a@@116 b@@65) (Options.Option.None_q a@@116)) :pattern ( (|Options.Option#Equal| a@@116 b@@65) (Options.Option.None_q b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (Options.Option.Some_q a@@117) (Options.Option.Some_q b@@66))) (= (|Options.Option#Equal| a@@117 b@@66) (= (Options.Option.value a@@117) (Options.Option.value b@@66)))) :qid |unknown.0:0| :skolemid |1531| :pattern ( (|Options.Option#Equal| a@@117 b@@66) (Options.Option.Some_q a@@117)) :pattern ( (|Options.Option#Equal| a@@117 b@@66) (Options.Option.Some_q b@@66)) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (= (|Options.Option#Equal| a@@118 b@@67) (= a@@118 b@@67))) :qid |unknown.0:0| :skolemid |1532| :pattern ( (|Options.Option#Equal| a@@118 b@@67)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@73)) bx@@73) ($Is ($Unbox refType bx@@73) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1533| :pattern ( ($IsBox bx@@73 Tclass.Options.__default)) )))
(assert (forall (($o@@16 T@U) ) (!  (=> (= (type $o@@16) refType) (= ($Is $o@@16 Tclass.Options.__default)  (or (= $o@@16 null) (= (dtype $o@@16) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1534| :pattern ( ($Is $o@@16 Tclass.Options.__default)) )))
(assert (forall (($o@@17 T@U) ($h@@27 T@U) ) (!  (=> (and (= (type $o@@17) refType) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@17 Tclass.Options.__default $h@@27)  (or (= $o@@17 null) (U_2_bool (MapType1Select (MapType0Select $h@@27 $o@@17) alloc))))) :qid |unknown.0:0| :skolemid |1535| :pattern ( ($IsAlloc $o@@17 Tclass.Options.__default $h@@27)) )))
(assert (forall ((arg0@@265 T@U) (arg1@@143 T@U) (arg2@@87 T@U) (arg3@@59 T@U) (arg4@@41 T@U) ) (! (= (type (Options.__default.MapOption arg0@@265 arg1@@143 arg2@@87 arg3@@59 arg4@@41)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@265 arg1@@143 arg2@@87 arg3@@59 arg4@@41)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|opt#0| T@U) (|f#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@58|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |opt#0| |f#0@@58|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@58| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@18 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@18) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@18 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |f#0@@58| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@18))))) (= (MapType1Select (MapType0Select $h0@@2 $o@@18) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@18) $f@@2)))) :qid |unknown.0:0| :skolemid |1536| :no-pattern (type $o@@18) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@18) :no-pattern (U_2_bool $o@@18) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@2 |opt#0| |f#0@@58|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@2 |opt#0| |f#0@@58|))) :qid |unknown.0:0| :skolemid |1537| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@2 |opt#0| |f#0@@58|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@34 T@U) (|opt#0@@0| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@59|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@59| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |f#0@@59| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |f#0@@59| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1538| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@34 |opt#0@@0| |f#0@@59|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@35 T@U) (|opt#0@@1| T@U) (|f#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@60|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@35) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@60| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@35 |opt#0@@1| |f#0@@60|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@35 |f#0@@60| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |1539| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@35 |opt#0@@1| |f#0@@60|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@36 T@U) (|opt#0@@2| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@61|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@36 |opt#0@@2| |f#0@@61|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@61| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@36 |f#0@@61| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@36 |opt#0@@2| |f#0@@61|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0@@13| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@36 |f#0@@61| |v#0@@13|)))))) :qid |unknown.0:0| :skolemid |1540| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@36 |opt#0@@2| |f#0@@61|) ($IsGoodHeap $Heap@@36)) ))))
(assert (forall ((arg0@@266 T@U) (arg1@@144 T@U) (arg2@@88 T@U) (arg3@@60 T@U) (arg4@@42 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@266 arg1@@144 arg2@@88 arg3@@60 arg4@@42)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@266 arg1@@144 arg2@@88 arg3@@60 arg4@@42)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|opt#0@@3| T@U) (|f#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@62|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@3 |opt#0@@3| |f#0@@62|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@62| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@19 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@19) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@19 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@3 |f#0@@62| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@19))))) (= (MapType1Select (MapType0Select $h0@@3 $o@@19) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@19) $f@@3)))) :qid |unknown.0:0| :skolemid |1541| :no-pattern (type $o@@19) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@19) :no-pattern (U_2_bool $o@@19) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@3 |opt#0@@3| |f#0@@62|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@3 |opt#0@@3| |f#0@@62|))) :qid |unknown.0:0| :skolemid |1542| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@3 |opt#0@@3| |f#0@@62|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@37 T@U) (|opt#0@@4| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@63|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@37 |opt#0@@4| |f#0@@63|) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@63| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@37 |f#0@@63| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@37 |f#0@@63| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@37 |opt#0@@4| |f#0@@63|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@37 |f#0@@63| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@37 |opt#0@@4| |f#0@@63|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@37 |f#0@@63| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@37 |opt#0@@4| |f#0@@63|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1543| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@37 |opt#0@@4| |f#0@@63|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@38 T@U) (|opt#0@@5| T@U) (|f#0@@64| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@64|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@38) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@64| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@38 |opt#0@@5| |f#0@@64|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@38 |f#0@@64| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |1544| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@38 |opt#0@@5| |f#0@@64|) ($IsGoodHeap $Heap@@38)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@39 T@U) (|opt#0@@6| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@65|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@39 |opt#0@@6| |f#0@@65|) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@65| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@39 |f#0@@65| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@39 |opt#0@@6| |f#0@@65|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@14| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@39 |f#0@@65| |v#0@@14|)))))) :qid |unknown.0:0| :skolemid |1545| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@39 |opt#0@@6| |f#0@@65|) ($IsGoodHeap $Heap@@39)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@74)) bx@@74) ($Is ($Unbox intType bx@@74) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1546| :pattern ( ($IsBox bx@@74 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@42| T@U) ) (!  (=> (= (type |i#0@@42|) intType) (= ($Is |i#0@@42| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@42|)) (< (U_2_int |i#0@@42|) 128)))) :qid |unknown.0:0| :skolemid |1547| :pattern ( ($Is |i#0@@42| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@43| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@43|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@43| Tclass.NativeTypes.sbyte $h@@28)) :qid |unknown.0:0| :skolemid |1548| :pattern ( ($IsAlloc |i#0@@43| Tclass.NativeTypes.sbyte $h@@28)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@75 T@U) ) (!  (=> (and (= (type bx@@75) BoxType) ($IsBox bx@@75 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@75)) bx@@75) ($Is ($Unbox intType bx@@75) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1549| :pattern ( ($IsBox bx@@75 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@44| T@U) ) (!  (=> (= (type |i#0@@44|) intType) (= ($Is |i#0@@44| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@44|)) (< (U_2_int |i#0@@44|) 256)))) :qid |unknown.0:0| :skolemid |1550| :pattern ( ($Is |i#0@@44| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@45| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@45|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@45| Tclass.NativeTypes.byte $h@@29)) :qid |unknown.0:0| :skolemid |1551| :pattern ( ($IsAlloc |i#0@@45| Tclass.NativeTypes.byte $h@@29)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@76)) bx@@76) ($Is ($Unbox intType bx@@76) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1552| :pattern ( ($IsBox bx@@76 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@46| T@U) ) (!  (=> (= (type |i#0@@46|) intType) (= ($Is |i#0@@46| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@46|)) (< (U_2_int |i#0@@46|) 32768)))) :qid |unknown.0:0| :skolemid |1553| :pattern ( ($Is |i#0@@46| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@47| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@47|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@47| Tclass.NativeTypes.int16 $h@@30)) :qid |unknown.0:0| :skolemid |1554| :pattern ( ($IsAlloc |i#0@@47| Tclass.NativeTypes.int16 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@77)) bx@@77) ($Is ($Unbox intType bx@@77) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1555| :pattern ( ($IsBox bx@@77 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@48| T@U) ) (!  (=> (= (type |i#0@@48|) intType) (= ($Is |i#0@@48| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@48|)) (< (U_2_int |i#0@@48|) 65536)))) :qid |unknown.0:0| :skolemid |1556| :pattern ( ($Is |i#0@@48| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@49| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@49|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@49| Tclass.NativeTypes.uint16 $h@@31)) :qid |unknown.0:0| :skolemid |1557| :pattern ( ($IsAlloc |i#0@@49| Tclass.NativeTypes.uint16 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@78)) bx@@78) ($Is ($Unbox intType bx@@78) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1558| :pattern ( ($IsBox bx@@78 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@50| T@U) ) (!  (=> (= (type |i#0@@50|) intType) (= ($Is |i#0@@50| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@50|)) (< (U_2_int |i#0@@50|) 2147483648)))) :qid |unknown.0:0| :skolemid |1559| :pattern ( ($Is |i#0@@50| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@51| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@51|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@51| Tclass.NativeTypes.int32 $h@@32)) :qid |unknown.0:0| :skolemid |1560| :pattern ( ($IsAlloc |i#0@@51| Tclass.NativeTypes.int32 $h@@32)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@79)) bx@@79) ($Is ($Unbox intType bx@@79) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1561| :pattern ( ($IsBox bx@@79 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@52| T@U) ) (!  (=> (= (type |i#0@@52|) intType) (= ($Is |i#0@@52| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@52|)) (< (U_2_int |i#0@@52|) 4294967296)))) :qid |unknown.0:0| :skolemid |1562| :pattern ( ($Is |i#0@@52| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@53| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@53|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@53| Tclass.NativeTypes.uint32 $h@@33)) :qid |unknown.0:0| :skolemid |1563| :pattern ( ($IsAlloc |i#0@@53| Tclass.NativeTypes.uint32 $h@@33)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1564| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@54| T@U) ) (!  (=> (= (type |i#0@@54|) intType) (= ($Is |i#0@@54| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@54|)) (< (U_2_int |i#0@@54|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1565| :pattern ( ($Is |i#0@@54| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@55| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@55|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@55| Tclass.NativeTypes.int64 $h@@34)) :qid |unknown.0:0| :skolemid |1566| :pattern ( ($IsAlloc |i#0@@55| Tclass.NativeTypes.int64 $h@@34)) )))
(assert (forall ((|i#0@@56| T@U) ) (!  (=> (= (type |i#0@@56|) intType) (= ($Is |i#0@@56| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@56|)) (< (U_2_int |i#0@@56|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1567| :pattern ( ($Is |i#0@@56| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@57| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@57|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@57| Tclass.NativeTypes.uint64 $h@@35)) :qid |unknown.0:0| :skolemid |1568| :pattern ( ($IsAlloc |i#0@@57| Tclass.NativeTypes.uint64 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@81)) bx@@81) ($Is ($Unbox intType bx@@81) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1569| :pattern ( ($IsBox bx@@81 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@58| T@U) ) (!  (=> (= (type |i#0@@58|) intType) (= ($Is |i#0@@58| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@58|)) (< (U_2_int |i#0@@58|) 128)))) :qid |unknown.0:0| :skolemid |1570| :pattern ( ($Is |i#0@@58| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@59| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@59|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@59| Tclass.NativeTypes.nat8 $h@@36)) :qid |unknown.0:0| :skolemid |1571| :pattern ( ($IsAlloc |i#0@@59| Tclass.NativeTypes.nat8 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1572| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@60| T@U) ) (!  (=> (= (type |i#0@@60|) intType) (= ($Is |i#0@@60| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@60|)) (< (U_2_int |i#0@@60|) 32768)))) :qid |unknown.0:0| :skolemid |1573| :pattern ( ($Is |i#0@@60| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@61| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@61|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@61| Tclass.NativeTypes.nat16 $h@@37)) :qid |unknown.0:0| :skolemid |1574| :pattern ( ($IsAlloc |i#0@@61| Tclass.NativeTypes.nat16 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1575| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@62| T@U) ) (!  (=> (= (type |i#0@@62|) intType) (= ($Is |i#0@@62| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@62|)) (< (U_2_int |i#0@@62|) 2147483648)))) :qid |unknown.0:0| :skolemid |1576| :pattern ( ($Is |i#0@@62| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@63| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@63|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@63| Tclass.NativeTypes.nat32 $h@@38)) :qid |unknown.0:0| :skolemid |1577| :pattern ( ($IsAlloc |i#0@@63| Tclass.NativeTypes.nat32 $h@@38)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1578| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@64| T@U) ) (!  (=> (= (type |i#0@@64|) intType) (= ($Is |i#0@@64| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@64|)) (< (U_2_int |i#0@@64|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1579| :pattern ( ($Is |i#0@@64| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@65| T@U) ($h@@39 T@U) ) (!  (=> (and (= (type |i#0@@65|) intType) (= (type $h@@39) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@65| Tclass.NativeTypes.nat64 $h@@39)) :qid |unknown.0:0| :skolemid |1580| :pattern ( ($IsAlloc |i#0@@65| Tclass.NativeTypes.nat64 $h@@39)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1581| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@66| T@U) ) (!  (=> (= (type |i#0@@66|) intType) (= ($Is |i#0@@66| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@66|)) (< (U_2_int |i#0@@66|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1582| :pattern ( ($Is |i#0@@66| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@67| T@U) ($h@@40 T@U) ) (!  (=> (and (= (type |i#0@@67|) intType) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@67| Tclass.NativeTypes.uint128 $h@@40)) :qid |unknown.0:0| :skolemid |1583| :pattern ( ($IsAlloc |i#0@@67| Tclass.NativeTypes.uint128 $h@@40)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@86)) bx@@86) ($Is ($Unbox refType bx@@86) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1584| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@20 T@U) ) (!  (=> (= (type $o@@20) refType) (= ($Is $o@@20 Tclass.NativeTypes.__default)  (or (= $o@@20 null) (= (dtype $o@@20) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1585| :pattern ( ($Is $o@@20 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@21 T@U) ($h@@41 T@U) ) (!  (=> (and (= (type $o@@21) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@21 Tclass.NativeTypes.__default $h@@41)  (or (= $o@@21 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@21) alloc))))) :qid |unknown.0:0| :skolemid |1586| :pattern ( ($IsAlloc $o@@21 Tclass.NativeTypes.__default $h@@41)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@87)) bx@@87) ($Is ($Unbox refType bx@@87) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |1587| :pattern ( ($IsBox bx@@87 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (= ($Is $o@@22 Tclass.Mathematics.__default)  (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |1588| :pattern ( ($Is $o@@22 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@23 T@U) ($h@@42 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@23 Tclass.Mathematics.__default $h@@42)  (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@23) alloc))))) :qid |unknown.0:0| :skolemid |1589| :pattern ( ($IsAlloc $o@@23 Tclass.Mathematics.__default $h@@42)) )))
(assert  (=> true (forall ((|a#0@@66| Int) (|b#0@@40| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |1590| :pattern ( (Mathematics.__default.min |a#0@@66| |b#0@@40|)) ))))
(assert (forall ((|a#0@@67| Int) (|b#0@@41| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@67| |b#0@@41|) true) :qid |mathematicsidfy.6:15| :skolemid |1591| :pattern ( (|Mathematics.__default.min#requires| |a#0@@67| |b#0@@41|)) )))
(assert  (=> true (forall ((|a#0@@68| Int) (|b#0@@42| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@68| |b#0@@42|) (ite (< |a#0@@68| |b#0@@42|) |a#0@@68| |b#0@@42|))) :qid |mathematicsidfy.6:15| :skolemid |1592| :pattern ( (Mathematics.__default.min |a#0@@68| |b#0@@42|)) ))))
(assert  (=> true (forall ((|a#0@@69| Int) (|b#0@@43| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@69|) (LitInt |b#0@@43|)) (ite (< |a#0@@69| |b#0@@43|) |a#0@@69| |b#0@@43|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |1593| :pattern ( (Mathematics.__default.min (LitInt |a#0@@69|) (LitInt |b#0@@43|))) ))))
(assert  (=> true (forall ((|a#0@@70| Int) (|b#0@@44| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |1594| :pattern ( (Mathematics.__default.max |a#0@@70| |b#0@@44|)) ))))
(assert (forall ((|a#0@@71| Int) (|b#0@@45| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@71| |b#0@@45|) true) :qid |mathematicsidfy.14:15| :skolemid |1595| :pattern ( (|Mathematics.__default.max#requires| |a#0@@71| |b#0@@45|)) )))
(assert  (=> true (forall ((|a#0@@72| Int) (|b#0@@46| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@72| |b#0@@46|) (ite (< |a#0@@72| |b#0@@46|) |b#0@@46| |a#0@@72|))) :qid |mathematicsidfy.14:15| :skolemid |1596| :pattern ( (Mathematics.__default.max |a#0@@72| |b#0@@46|)) ))))
(assert  (=> true (forall ((|a#0@@73| Int) (|b#0@@47| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@73|) (LitInt |b#0@@47|)) (ite (< |a#0@@73| |b#0@@47|) |b#0@@47| |a#0@@73|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |1597| :pattern ( (Mathematics.__default.max (LitInt |a#0@@73|) (LitInt |b#0@@47|))) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@145 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@267 arg1@@145)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@267 arg1@@145)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |1598| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |1599| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#8| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |1600| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#8| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1601| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@268 T@U) (arg1@@146 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@268 arg1@@146)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@268 arg1@@146)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |1602| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |1603| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@147 T@U) ) (! (= (type (|lambda#165| arg0@@269 arg1@@147)) (MapType0Type BoxType boolType)) :qid |funType:lambda#165| :pattern ( (|lambda#165| arg0@@269 arg1@@147)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#165| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |1604| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#165| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |1605| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@270 T@T) (arg1@@148 T@T) ) (! (= (Ctor (MapType6Type arg0@@270 arg1@@148)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@271 T@T) (arg1@@149 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@271 arg1@@149)) arg0@@271) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@271 arg1@@149)) ))) (forall ((arg0@@272 T@T) (arg1@@150 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@272 arg1@@150)) arg1@@150) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@272 arg1@@150)) ))) (forall ((arg0@@273 T@U) (arg1@@151 T@U) (arg2@@89 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@273)))) (= (type (MapType6Select arg0@@273 arg1@@151 arg2@@89)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@273 arg1@@151 arg2@@89)) ))) (forall ((arg0@@274 T@U) (arg1@@152 T@U) (arg2@@90 T@U) (arg3@@61 T@U) ) (! (let ((aVar1@@7 (type arg3@@61))) (let ((aVar0@@4 (type arg1@@152))) (= (type (MapType6Store arg0@@274 arg1@@152 arg2@@90 arg3@@61)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@274 arg1@@152 arg2@@90 arg3@@61)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@67)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@68 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@69 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@70 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@275 T@U) (arg1@@153 T@U) (arg2@@91 T@U) (arg3@@62 Bool) ) (! (= (type (|lambda#0| arg0@@275 arg1@@153 arg2@@91 arg3@@62)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@275 arg1@@153 arg2@@91 arg3@@62)) ))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@24 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@24) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@24 $f@@4))  (=> (and (not (= $o@@24 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@24) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1606| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@24 $f@@4)) )))
(assert (forall ((arg0@@276 T@U) (arg1@@154 T@U) (arg2@@92 T@U) (arg3@@63 Bool) ) (! (= (type (|lambda#1| arg0@@276 arg1@@154 arg2@@92 arg3@@63)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@276 arg1@@154 arg2@@92 arg3@@63)) )))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@25 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@0|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@25) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@25 $f@@5))  (=> (and (not (= $o@@25 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@25) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1607| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@25 $f@@5)) )))
(assert (forall ((arg0@@277 T@U) (arg1@@155 T@U) (arg2@@93 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#2| arg0@@277 arg1@@155 arg2@@93 arg3@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@277 arg1@@155 arg2@@93 arg3@@64)) )))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@26 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@1|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@26) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@26 $f@@6))  (=> (and (not (= $o@@26 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@26) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1608| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@26 $f@@6)) )))
(assert (forall ((arg0@@278 T@U) (arg1@@156 T@U) (arg2@@94 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#3| arg0@@278 arg1@@156 arg2@@94 arg3@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@278 arg1@@156 arg2@@94 arg3@@65)) )))
(assert (forall ((|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@27 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@2|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@27) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@27 $f@@7))  (=> (and (not (= $o@@27 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@27) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1609| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@27 $f@@7)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@157 T@U) (arg2@@95 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#4| arg0@@279 arg1@@157 arg2@@95 arg3@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@279 arg1@@157 arg2@@95 arg3@@66)) )))
(assert (forall ((|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@28 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@3|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@28) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@28 $f@@8))  (=> (and (not (= $o@@28 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@28) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1610| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@28 $f@@8)) )))
(assert (forall ((arg0@@280 T@U) (arg1@@158 T@U) (arg2@@96 T@U) (arg3@@67 Bool) ) (! (= (type (|lambda#5| arg0@@280 arg1@@158 arg2@@96 arg3@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@280 arg1@@158 arg2@@96 arg3@@67)) )))
(assert (forall ((|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@29 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@4|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@29) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@29 $f@@9))  (=> (and (not (= $o@@29 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@29) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1611| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@29 $f@@9)) )))
(assert (forall ((arg0@@281 T@U) (arg1@@159 T@U) (arg2@@97 T@U) (arg3@@68 Bool) ) (! (= (type (|lambda#6| arg0@@281 arg1@@159 arg2@@97 arg3@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@281 arg1@@159 arg2@@97 arg3@@68)) )))
(assert (forall ((|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@30 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@5|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@30) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@30 $f@@10))  (=> (and (not (= $o@@30 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@30) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1612| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@30 $f@@10)) )))
(assert (forall ((arg0@@282 T@U) (arg1@@160 T@U) (arg2@@98 T@U) (arg3@@69 Bool) ) (! (= (type (|lambda#7| arg0@@282 arg1@@160 arg2@@98 arg3@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@282 arg1@@160 arg2@@98 arg3@@69)) )))
(assert (forall ((|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@31 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@6|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@31) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@31 $f@@11))  (=> (and (not (= $o@@31 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@31) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1613| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@31 $f@@11)) )))
(assert (forall ((|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@7|) TyType) (= (type |l#1@@7|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@7|) (> (U_2_int (MapType0Select |l#1@@7| |$y#0|)) |l#2@@7|)))) :qid |unknown.0:0| :skolemid |1614| :pattern ( (MapType0Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7|) |$y#0|)) )))
(assert (forall ((arg0@@283 T@U) (arg1@@161 T@U) (arg2@@99 T@U) (arg3@@70 Bool) ) (! (= (type (|lambda#10| arg0@@283 arg1@@161 arg2@@99 arg3@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@283 arg1@@161 arg2@@99 arg3@@70)) )))
(assert (forall ((|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@7| Bool) ($o@@32 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@8|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@32) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@7|) $o@@32 $f@@12))  (=> (and (not (= $o@@32 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@32) |l#2@@8|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1615| :pattern ( (MapType6Select (|lambda#10| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@7|) $o@@32 $f@@12)) )))
(assert (forall ((arg0@@284 T@U) (arg1@@162 T@U) (arg2@@100 T@U) (arg3@@71 Bool) ) (! (= (type (|lambda#11| arg0@@284 arg1@@162 arg2@@100 arg3@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@284 arg1@@162 arg2@@100 arg3@@71)) )))
(assert (forall ((|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@8| Bool) ($o@@33 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@9|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@33) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@8|) $o@@33 $f@@13))  (=> (and (not (= $o@@33 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@33) |l#2@@9|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1616| :pattern ( (MapType6Select (|lambda#11| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@8|) $o@@33 $f@@13)) )))
(assert (forall ((arg0@@285 T@U) (arg1@@163 T@U) (arg2@@101 T@U) (arg3@@72 Bool) ) (! (= (type (|lambda#14| arg0@@285 arg1@@163 arg2@@101 arg3@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@285 arg1@@163 arg2@@101 arg3@@72)) )))
(assert (forall ((|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@9| Bool) ($o@@34 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@10|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@34) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@9|) $o@@34 $f@@14))  (=> (and (not (= $o@@34 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@34) |l#2@@10|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1617| :pattern ( (MapType6Select (|lambda#14| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@9|) $o@@34 $f@@14)) )))
(assert (forall ((arg0@@286 T@U) (arg1@@164 T@U) (arg2@@102 T@U) (arg3@@73 Bool) ) (! (= (type (|lambda#15| arg0@@286 arg1@@164 arg2@@102 arg3@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@286 arg1@@164 arg2@@102 arg3@@73)) )))
(assert (forall ((|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@10| Bool) ($o@@35 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@11|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@35) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@10|) $o@@35 $f@@15))  (=> (and (not (= $o@@35 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@35) |l#2@@11|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1618| :pattern ( (MapType6Select (|lambda#15| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@10|) $o@@35 $f@@15)) )))
(assert (forall ((arg0@@287 T@U) (arg1@@165 T@U) (arg2@@103 T@U) (arg3@@74 Bool) ) (! (= (type (|lambda#16| arg0@@287 arg1@@165 arg2@@103 arg3@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@287 arg1@@165 arg2@@103 arg3@@74)) )))
(assert (forall ((|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@11| Bool) ($o@@36 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@12|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@36) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@11|) $o@@36 $f@@16))  (=> (and (not (= $o@@36 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@36) |l#2@@12|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1619| :pattern ( (MapType6Select (|lambda#16| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@11|) $o@@36 $f@@16)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@166 T@U) (arg2@@104 T@U) (arg3@@75 Bool) ) (! (= (type (|lambda#17| arg0@@288 arg1@@166 arg2@@104 arg3@@75)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@288 arg1@@166 arg2@@104 arg3@@75)) )))
(assert (forall ((|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@12| Bool) ($o@@37 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@13|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@37) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@12|) $o@@37 $f@@17))  (=> (and (not (= $o@@37 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@37) |l#2@@13|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1620| :pattern ( (MapType6Select (|lambda#17| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@12|) $o@@37 $f@@17)) )))
(assert (forall ((arg0@@289 T@U) (arg1@@167 T@U) (arg2@@105 T@U) (arg3@@76 Bool) ) (! (= (type (|lambda#18| arg0@@289 arg1@@167 arg2@@105 arg3@@76)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@289 arg1@@167 arg2@@105 arg3@@76)) )))
(assert (forall ((|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@13| Bool) ($o@@38 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@14|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@38) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@13|) $o@@38 $f@@18))  (=> (and (not (= $o@@38 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@38) |l#2@@14|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1621| :pattern ( (MapType6Select (|lambda#18| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@13|) $o@@38 $f@@18)) )))
(assert (forall ((arg0@@290 T@U) (arg1@@168 T@U) (arg2@@106 T@U) (arg3@@77 Bool) ) (! (= (type (|lambda#19| arg0@@290 arg1@@168 arg2@@106 arg3@@77)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@290 arg1@@168 arg2@@106 arg3@@77)) )))
(assert (forall ((|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@14| Bool) ($o@@39 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@39) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@14|) $o@@39 $f@@19))  (=> (and (not (= $o@@39 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@39) |l#2@@15|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1622| :pattern ( (MapType6Select (|lambda#19| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@14|) $o@@39 $f@@19)) )))
(assert (forall ((arg0@@291 T@U) (arg1@@169 T@U) (arg2@@107 T@U) (arg3@@78 Bool) ) (! (= (type (|lambda#20| arg0@@291 arg1@@169 arg2@@107 arg3@@78)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@291 arg1@@169 arg2@@107 arg3@@78)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@15| Bool) ($o@@40 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@40) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@15|) $o@@40 $f@@20))  (=> (and (not (= $o@@40 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@40) |l#2@@16|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1623| :pattern ( (MapType6Select (|lambda#20| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@15|) $o@@40 $f@@20)) )))
(assert (forall ((arg0@@292 T@U) (arg1@@170 T@U) (arg2@@108 T@U) (arg3@@79 Bool) ) (! (= (type (|lambda#21| arg0@@292 arg1@@170 arg2@@108 arg3@@79)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@292 arg1@@170 arg2@@108 arg3@@79)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@16| Bool) ($o@@41 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@41) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@16|) $o@@41 $f@@21))  (=> (and (not (= $o@@41 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@41) |l#2@@17|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1624| :pattern ( (MapType6Select (|lambda#21| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@16|) $o@@41 $f@@21)) )))
(assert (forall ((arg0@@293 T@U) (arg1@@171 T@U) (arg2@@109 T@U) (arg3@@80 Bool) ) (! (= (type (|lambda#22| arg0@@293 arg1@@171 arg2@@109 arg3@@80)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@293 arg1@@171 arg2@@109 arg3@@80)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@17| Bool) ($o@@42 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@18|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@42) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@17|) $o@@42 $f@@22))  (=> (and (not (= $o@@42 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@42) |l#2@@18|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1625| :pattern ( (MapType6Select (|lambda#22| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@17|) $o@@42 $f@@22)) )))
(assert (forall ((arg0@@294 T@U) (arg1@@172 T@U) (arg2@@110 T@U) (arg3@@81 T@U) (arg4@@43 Int) (arg5@@21 Int) (arg6@@6 T@U) (arg7@@3 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) (arg13 T@U) (arg14 T@U) (arg15 T@U) ) (! (= (type (|lambda#23| arg0@@294 arg1@@172 arg2@@110 arg3@@81 arg4@@43 arg5@@21 arg6@@6 arg7@@3 arg8@@3 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14 arg15)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@294 arg1@@172 arg2@@110 arg3@@81 arg4@@43 arg5@@21 arg6@@6 arg7@@3 arg8@@3 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14 arg15)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@18| T@U) (|l#4| Int) (|l#5| Int) (|l#6| T@U) (|l#7| T@U) (|l#8| T@U) (|l#9| T@U) (|l#10| T@U) (|l#11| T@U) (|l#12| T@U) (|l#13| T@U) (|l#14| T@U) (|l#15| T@U) ($o@@43 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@19|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type |l#3@@18|) TyType)) (= (type |l#6|) TyType)) (= (type |l#7|) TyType)) (= (type |l#8|) (MapType0Type refType MapType1Type))) (= (type |l#9|) HandleTypeType)) (= (type |l#10|) (SeqType BoxType))) (= (type |l#11|) TyType)) (= (type |l#12|) TyType)) (= (type |l#13|) (MapType0Type refType MapType1Type))) (= (type |l#14|) HandleTypeType)) (= (type |l#15|) (SeqType BoxType))) (= (type $o@@43) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@18| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) $o@@43 $f@@23))  (=> (and (not (= $o@@43 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@43) |l#2@@19|))) (exists ((|i#0@@68| Int) (|o#0@@1| T@U) ) (!  (and (= (type |o#0@@1|) refType) (and (and ($Is |o#0@@1| |l#3@@18|) (and (and (<= |l#4| |i#0@@68|) (< |i#0@@68| |l#5|)) (U_2_bool (MapType0Select (Reads1 |l#6| |l#7| |l#8| |l#9| (|Seq#Index| |l#10| |i#0@@68|)) ($Box |o#0@@1|))))) (= ($Box $o@@43) ($Box |o#0@@1|)))) :qid |Sequencesidfy.133:15| :skolemid |1074| :pattern ( (MapType0Select (Reads1 |l#11| |l#12| |l#13| |l#14| (|Seq#Index| |l#15| |i#0@@68|)) ($Box |o#0@@1|))) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1626| :pattern ( (MapType6Select (|lambda#23| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@18| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) $o@@43 $f@@23)) )))
(assert (forall ((arg0@@295 T@U) (arg1@@173 T@U) (arg2@@111 T@U) (arg3@@82 T@U) (arg4@@44 Int) (arg5@@22 Int) (arg6@@7 T@U) (arg7@@4 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) (arg13@@0 T@U) (arg14@@0 T@U) (arg15@@0 T@U) ) (! (= (type (|lambda#24| arg0@@295 arg1@@173 arg2@@111 arg3@@82 arg4@@44 arg5@@22 arg6@@7 arg7@@4 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@295 arg1@@173 arg2@@111 arg3@@82 arg4@@44 arg5@@22 arg6@@7 arg7@@4 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@19| T@U) (|l#4@@0| Int) (|l#5@@0| Int) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) (|l#9@@0| T@U) (|l#10@@0| T@U) (|l#11@@0| T@U) (|l#12@@0| T@U) (|l#13@@0| T@U) (|l#14@@0| T@U) (|l#15@@0| T@U) ($o@@44 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type |l#3@@19|) TyType)) (= (type |l#6@@0|) TyType)) (= (type |l#7@@0|) TyType)) (= (type |l#8@@0|) (MapType0Type refType MapType1Type))) (= (type |l#9@@0|) HandleTypeType)) (= (type |l#10@@0|) (SeqType BoxType))) (= (type |l#11@@0|) TyType)) (= (type |l#12@@0|) TyType)) (= (type |l#13@@0|) (MapType0Type refType MapType1Type))) (= (type |l#14@@0|) HandleTypeType)) (= (type |l#15@@0|) (SeqType BoxType))) (= (type $o@@44) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@19| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0| |l#13@@0| |l#14@@0| |l#15@@0|) $o@@44 $f@@24))  (=> (and (not (= $o@@44 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@44) |l#2@@20|))) (exists ((|i#0@@69| Int) (|o#0@@2| T@U) ) (!  (and (= (type |o#0@@2|) refType) (and (and ($Is |o#0@@2| |l#3@@19|) (and (and (<= |l#4@@0| |i#0@@69|) (< |i#0@@69| |l#5@@0|)) (U_2_bool (MapType0Select (Reads1 |l#6@@0| |l#7@@0| |l#8@@0| |l#9@@0| (|Seq#Index| |l#10@@0| |i#0@@69|)) ($Box |o#0@@2|))))) (= ($Box $o@@44) ($Box |o#0@@2|)))) :qid |Sequencesidfy.133:15| :skolemid |1079| :pattern ( (MapType0Select (Reads1 |l#11@@0| |l#12@@0| |l#13@@0| |l#14@@0| (|Seq#Index| |l#15@@0| |i#0@@69|)) ($Box |o#0@@2|))) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1627| :pattern ( (MapType6Select (|lambda#24| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@19| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0| |l#13@@0| |l#14@@0| |l#15@@0|) $o@@44 $f@@24)) )))
(assert (forall ((arg0@@296 T@U) (arg1@@174 Int) (arg2@@112 Int) (arg3@@83 T@U) (arg4@@45 T@U) (arg5@@23 T@U) (arg6@@8 T@U) (arg7@@5 T@U) (arg8@@5 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) ) (! (= (type (|lambda#25| arg0@@296 arg1@@174 arg2@@112 arg3@@83 arg4@@45 arg5@@23 arg6@@8 arg7@@5 arg8@@5 arg9@@3 arg10@@3 arg11@@1 arg12@@1)) (MapType0Type BoxType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@296 arg1@@174 arg2@@112 arg3@@83 arg4@@45 arg5@@23 arg6@@8 arg7@@5 arg8@@5 arg9@@3 arg10@@3 arg11@@1 arg12@@1)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@21| Int) (|l#2@@21| Int) (|l#3@@20| T@U) (|l#4@@1| T@U) (|l#5@@1| T@U) (|l#6@@1| T@U) (|l#7@@1| T@U) (|l#8@@1| T@U) (|l#9@@1| T@U) (|l#10@@1| T@U) (|l#11@@1| T@U) (|l#12@@1| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@21|) TyType) (= (type |l#3@@20|) TyType)) (= (type |l#4@@1|) TyType)) (= (type |l#5@@1|) (MapType0Type refType MapType1Type))) (= (type |l#6@@1|) HandleTypeType)) (= (type |l#7@@1|) (SeqType BoxType))) (= (type |l#8@@1|) TyType)) (= (type |l#9@@1|) TyType)) (= (type |l#10@@1|) (MapType0Type refType MapType1Type))) (= (type |l#11@@1|) HandleTypeType)) (= (type |l#12@@1|) (SeqType BoxType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#25| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@20| |l#4@@1| |l#5@@1| |l#6@@1| |l#7@@1| |l#8@@1| |l#9@@1| |l#10@@1| |l#11@@1| |l#12@@1|) |$y#0@@0|)) (exists ((|i#12| Int) (|o#4| T@U) ) (!  (and (= (type |o#4|) refType) (and (and ($Is |o#4| |l#0@@21|) (and (and (<= |l#1@@21| |i#12|) (< |i#12| |l#2@@21|)) (U_2_bool (MapType0Select (Reads1 |l#3@@20| |l#4@@1| |l#5@@1| |l#6@@1| (|Seq#Index| |l#7@@1| |i#12|)) ($Box |o#4|))))) (= |$y#0@@0| ($Box |o#4|)))) :qid |Sequencesidfy.133:15| :skolemid |1085| :pattern ( (MapType0Select (Reads1 |l#8@@1| |l#9@@1| |l#10@@1| |l#11@@1| (|Seq#Index| |l#12@@1| |i#12|)) ($Box |o#4|))) )))) :qid |unknown.0:0| :skolemid |1628| :pattern ( (MapType0Select (|lambda#25| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@20| |l#4@@1| |l#5@@1| |l#6@@1| |l#7@@1| |l#8@@1| |l#9@@1| |l#10@@1| |l#11@@1| |l#12@@1|) |$y#0@@0|)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@175 T@U) (arg2@@113 T@U) (arg3@@84 T@U) (arg4@@46 Int) (arg5@@24 Int) (arg6@@9 T@U) (arg7@@6 T@U) (arg8@@6 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@1 T@U) (arg14@@1 T@U) (arg15@@1 T@U) ) (! (= (type (|lambda#31| arg0@@297 arg1@@175 arg2@@113 arg3@@84 arg4@@46 arg5@@24 arg6@@9 arg7@@6 arg8@@6 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@1 arg14@@1 arg15@@1)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@297 arg1@@175 arg2@@113 arg3@@84 arg4@@46 arg5@@24 arg6@@9 arg7@@6 arg8@@6 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@1 arg14@@1 arg15@@1)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@21| T@U) (|l#4@@2| Int) (|l#5@@2| Int) (|l#6@@2| T@U) (|l#7@@2| T@U) (|l#8@@2| T@U) (|l#9@@2| T@U) (|l#10@@2| T@U) (|l#11@@2| T@U) (|l#12@@2| T@U) (|l#13@@1| T@U) (|l#14@@1| T@U) (|l#15@@1| T@U) ($o@@45 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type |l#3@@21|) TyType)) (= (type |l#6@@2|) TyType)) (= (type |l#7@@2|) TyType)) (= (type |l#8@@2|) (MapType0Type refType MapType1Type))) (= (type |l#9@@2|) HandleTypeType)) (= (type |l#10@@2|) (SeqType BoxType))) (= (type |l#11@@2|) TyType)) (= (type |l#12@@2|) TyType)) (= (type |l#13@@1|) (MapType0Type refType MapType1Type))) (= (type |l#14@@1|) HandleTypeType)) (= (type |l#15@@1|) (SeqType BoxType))) (= (type $o@@45) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@21| |l#4@@2| |l#5@@2| |l#6@@2| |l#7@@2| |l#8@@2| |l#9@@2| |l#10@@2| |l#11@@2| |l#12@@2| |l#13@@1| |l#14@@1| |l#15@@1|) $o@@45 $f@@25))  (=> (and (not (= $o@@45 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@45) |l#2@@22|))) (exists ((|i#0@@70| Int) (|o#0@@3| T@U) ) (!  (and (= (type |o#0@@3|) refType) (and (and ($Is |o#0@@3| |l#3@@21|) (and (and (<= |l#4@@2| |i#0@@70|) (< |i#0@@70| |l#5@@2|)) (U_2_bool (MapType0Select (Reads1 |l#6@@2| |l#7@@2| |l#8@@2| |l#9@@2| (|Seq#Index| |l#10@@2| |i#0@@70|)) ($Box |o#0@@3|))))) (= ($Box $o@@45) ($Box |o#0@@3|)))) :qid |Sequencesidfy.144:15| :skolemid |1099| :pattern ( (MapType0Select (Reads1 |l#11@@2| |l#12@@2| |l#13@@1| |l#14@@1| (|Seq#Index| |l#15@@1| |i#0@@70|)) ($Box |o#0@@3|))) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1629| :pattern ( (MapType6Select (|lambda#31| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@21| |l#4@@2| |l#5@@2| |l#6@@2| |l#7@@2| |l#8@@2| |l#9@@2| |l#10@@2| |l#11@@2| |l#12@@2| |l#13@@1| |l#14@@1| |l#15@@1|) $o@@45 $f@@25)) )))
(assert (forall ((arg0@@298 T@U) (arg1@@176 T@U) (arg2@@114 T@U) (arg3@@85 T@U) (arg4@@47 Int) (arg5@@25 Int) (arg6@@10 T@U) (arg7@@7 T@U) (arg8@@7 T@U) (arg9@@5 T@U) (arg10@@5 T@U) (arg11@@3 T@U) (arg12@@3 T@U) (arg13@@2 T@U) (arg14@@2 T@U) (arg15@@2 T@U) ) (! (= (type (|lambda#32| arg0@@298 arg1@@176 arg2@@114 arg3@@85 arg4@@47 arg5@@25 arg6@@10 arg7@@7 arg8@@7 arg9@@5 arg10@@5 arg11@@3 arg12@@3 arg13@@2 arg14@@2 arg15@@2)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@298 arg1@@176 arg2@@114 arg3@@85 arg4@@47 arg5@@25 arg6@@10 arg7@@7 arg8@@7 arg9@@5 arg10@@5 arg11@@3 arg12@@3 arg13@@2 arg14@@2 arg15@@2)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@22| T@U) (|l#4@@3| Int) (|l#5@@3| Int) (|l#6@@3| T@U) (|l#7@@3| T@U) (|l#8@@3| T@U) (|l#9@@3| T@U) (|l#10@@3| T@U) (|l#11@@3| T@U) (|l#12@@3| T@U) (|l#13@@2| T@U) (|l#14@@2| T@U) (|l#15@@2| T@U) ($o@@46 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type |l#3@@22|) TyType)) (= (type |l#6@@3|) TyType)) (= (type |l#7@@3|) TyType)) (= (type |l#8@@3|) (MapType0Type refType MapType1Type))) (= (type |l#9@@3|) HandleTypeType)) (= (type |l#10@@3|) (SeqType BoxType))) (= (type |l#11@@3|) TyType)) (= (type |l#12@@3|) TyType)) (= (type |l#13@@2|) (MapType0Type refType MapType1Type))) (= (type |l#14@@2|) HandleTypeType)) (= (type |l#15@@2|) (SeqType BoxType))) (= (type $o@@46) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@22| |l#4@@3| |l#5@@3| |l#6@@3| |l#7@@3| |l#8@@3| |l#9@@3| |l#10@@3| |l#11@@3| |l#12@@3| |l#13@@2| |l#14@@2| |l#15@@2|) $o@@46 $f@@26))  (=> (and (not (= $o@@46 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@46) |l#2@@23|))) (exists ((|i#0@@71| Int) (|o#0@@4| T@U) ) (!  (and (= (type |o#0@@4|) refType) (and (and ($Is |o#0@@4| |l#3@@22|) (and (and (<= |l#4@@3| |i#0@@71|) (< |i#0@@71| |l#5@@3|)) (U_2_bool (MapType0Select (Reads1 |l#6@@3| |l#7@@3| |l#8@@3| |l#9@@3| (|Seq#Index| |l#10@@3| |i#0@@71|)) ($Box |o#0@@4|))))) (= ($Box $o@@46) ($Box |o#0@@4|)))) :qid |Sequencesidfy.144:15| :skolemid |1104| :pattern ( (MapType0Select (Reads1 |l#11@@3| |l#12@@3| |l#13@@2| |l#14@@2| (|Seq#Index| |l#15@@2| |i#0@@71|)) ($Box |o#0@@4|))) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1630| :pattern ( (MapType6Select (|lambda#32| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@22| |l#4@@3| |l#5@@3| |l#6@@3| |l#7@@3| |l#8@@3| |l#9@@3| |l#10@@3| |l#11@@3| |l#12@@3| |l#13@@2| |l#14@@2| |l#15@@2|) $o@@46 $f@@26)) )))
(assert (forall ((arg0@@299 T@U) (arg1@@177 T@U) (arg2@@115 T@U) (arg3@@86 T@U) (arg4@@48 T@U) (arg5@@26 T@U) (arg6@@11 T@U) (arg7@@8 T@U) (arg8@@8 T@U) ) (! (= (type (|lambda#33| arg0@@299 arg1@@177 arg2@@115 arg3@@86 arg4@@48 arg5@@26 arg6@@11 arg7@@8 arg8@@8)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@299 arg1@@177 arg2@@115 arg3@@86 arg4@@48 arg5@@26 arg6@@11 arg7@@8 arg8@@8)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@23| T@U) (|l#4@@4| T@U) (|l#5@@4| T@U) (|l#6@@4| T@U) (|l#7@@4| T@U) (|l#8@@4| T@U) ($o@@47 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type |l#3@@23|) TyType)) (= (type |l#4@@4|) TyType)) (= (type |l#5@@4|) TyType)) (= (type |l#6@@4|) TyType)) (= (type |l#7@@4|) (MapType0Type refType MapType1Type))) (= (type |l#8@@4|) HandleTypeType)) (= (type $o@@47) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@23| |l#4@@4| |l#5@@4| |l#6@@4| |l#7@@4| |l#8@@4|) $o@@47 $f@@27))  (=> (and (not (= $o@@47 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@47) |l#2@@24|))) (exists ((|_x1#0| T@U) (|_o1#0| T@U) ) (!  (and (and (= (type |_x1#0|) BoxType) (= (type |_o1#0|) refType)) (and (and (and ($IsBox |_x1#0| |l#3@@23|) ($Is |_o1#0| |l#4@@4|)) (U_2_bool (MapType0Select (Reads1 |l#5@@4| |l#6@@4| |l#7@@4| |l#8@@4| |_x1#0|) ($Box |_o1#0|)))) (= ($Box $o@@47) ($Box |_o1#0|)))) :qid |Sequencesidfy.153:13| :skolemid |1121| :no-pattern (type |_x1#0|) :no-pattern (type |_o1#0|) :no-pattern (U_2_int |_x1#0|) :no-pattern (U_2_bool |_x1#0|) :no-pattern (U_2_int |_o1#0|) :no-pattern (U_2_bool |_o1#0|) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1631| :pattern ( (MapType6Select (|lambda#33| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@23| |l#4@@4| |l#5@@4| |l#6@@4| |l#7@@4| |l#8@@4|) $o@@47 $f@@27)) )))
(assert (forall ((arg0@@300 T@U) (arg1@@178 T@U) (arg2@@116 T@U) (arg3@@87 T@U) (arg4@@49 T@U) (arg5@@27 T@U) (arg6@@12 T@U) (arg7@@9 T@U) (arg8@@9 T@U) ) (! (= (type (|lambda#34| arg0@@300 arg1@@178 arg2@@116 arg3@@87 arg4@@49 arg5@@27 arg6@@12 arg7@@9 arg8@@9)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@300 arg1@@178 arg2@@116 arg3@@87 arg4@@49 arg5@@27 arg6@@12 arg7@@9 arg8@@9)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@24| T@U) (|l#4@@5| T@U) (|l#5@@5| T@U) (|l#6@@5| T@U) (|l#7@@5| T@U) (|l#8@@5| T@U) ($o@@48 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (and (and (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type |l#3@@24|) TyType)) (= (type |l#4@@5|) TyType)) (= (type |l#5@@5|) TyType)) (= (type |l#6@@5|) TyType)) (= (type |l#7@@5|) (MapType0Type refType MapType1Type))) (= (type |l#8@@5|) HandleTypeType)) (= (type $o@@48) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@24| |l#4@@5| |l#5@@5| |l#6@@5| |l#7@@5| |l#8@@5|) $o@@48 $f@@28))  (=> (and (not (= $o@@48 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@48) |l#2@@25|))) (exists ((|_x2#0| T@U) (|_o2#0| T@U) ) (!  (and (and (= (type |_x2#0|) BoxType) (= (type |_o2#0|) refType)) (and (and (and ($IsBox |_x2#0| |l#3@@24|) ($Is |_o2#0| |l#4@@5|)) (U_2_bool (MapType0Select (Reads1 |l#5@@5| |l#6@@5| |l#7@@5| |l#8@@5| |_x2#0|) ($Box |_o2#0|)))) (= ($Box $o@@48) ($Box |_o2#0|)))) :qid |Sequencesidfy.153:13| :skolemid |1129| :no-pattern (type |_x2#0|) :no-pattern (type |_o2#0|) :no-pattern (U_2_int |_x2#0|) :no-pattern (U_2_bool |_x2#0|) :no-pattern (U_2_int |_o2#0|) :no-pattern (U_2_bool |_o2#0|) )))))) :qid |DafnyPreludebpl.129:1| :skolemid |1632| :pattern ( (MapType6Select (|lambda#34| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@24| |l#4@@5| |l#5@@5| |l#6@@5| |l#7@@5| |l#8@@5|) $o@@48 $f@@28)) )))
(assert (forall ((arg0@@301 T@U) (arg1@@179 T@U) (arg2@@117 T@U) (arg3@@88 T@U) (arg4@@50 T@U) (arg5@@28 T@U) ) (! (= (type (|lambda#35| arg0@@301 arg1@@179 arg2@@117 arg3@@88 arg4@@50 arg5@@28)) (MapType0Type BoxType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@301 arg1@@179 arg2@@117 arg3@@88 arg4@@50 arg5@@28)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@25| T@U) (|l#4@@6| T@U) (|l#5@@6| T@U) (|$y#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |l#0@@26|) TyType) (= (type |l#1@@26|) TyType)) (= (type |l#2@@26|) TyType)) (= (type |l#3@@25|) TyType)) (= (type |l#4@@6|) (MapType0Type refType MapType1Type))) (= (type |l#5@@6|) HandleTypeType)) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#35| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@25| |l#4@@6| |l#5@@6|) |$y#0@@1|)) (exists ((|_x0#2| T@U) (|_o0#2| T@U) ) (!  (and (and (= (type |_x0#2|) BoxType) (= (type |_o0#2|) refType)) (and (and (and ($IsBox |_x0#2| |l#0@@26|) ($Is |_o0#2| |l#1@@26|)) (U_2_bool (MapType0Select (Reads1 |l#2@@26| |l#3@@25| |l#4@@6| |l#5@@6| |_x0#2|) ($Box |_o0#2|)))) (= |$y#0@@1| ($Box |_o0#2|)))) :qid |Sequencesidfy.153:13| :skolemid |1135| :no-pattern (type |_x0#2|) :no-pattern (type |_o0#2|) :no-pattern (U_2_int |_x0#2|) :no-pattern (U_2_bool |_x0#2|) :no-pattern (U_2_int |_o0#2|) :no-pattern (U_2_bool |_o0#2|) )))) :qid |unknown.0:0| :skolemid |1633| :pattern ( (MapType0Select (|lambda#35| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@25| |l#4@@6| |l#5@@6|) |$y#0@@1|)) )))
(assert (forall ((arg0@@302 T@U) (arg1@@180 T@U) (arg2@@118 T@U) (arg3@@89 Bool) ) (! (= (type (|lambda#41| arg0@@302 arg1@@180 arg2@@118 arg3@@89)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@302 arg1@@180 arg2@@118 arg3@@89)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@26| Bool) ($o@@49 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@49) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@26|) $o@@49 $f@@29))  (=> (and (not (= $o@@49 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@49) |l#2@@27|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1634| :pattern ( (MapType6Select (|lambda#41| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@26|) $o@@49 $f@@29)) )))
(assert (forall ((arg0@@303 T@U) (arg1@@181 T@U) (arg2@@119 T@U) (arg3@@90 Bool) ) (! (= (type (|lambda#42| arg0@@303 arg1@@181 arg2@@119 arg3@@90)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@303 arg1@@181 arg2@@119 arg3@@90)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@27| Bool) ($o@@50 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@50) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@27|) $o@@50 $f@@30))  (=> (and (not (= $o@@50 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@50) |l#2@@28|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1635| :pattern ( (MapType6Select (|lambda#42| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@27|) $o@@50 $f@@30)) )))
(assert (forall ((arg0@@304 T@U) (arg1@@182 T@U) (arg2@@120 T@U) (arg3@@91 Bool) ) (! (= (type (|lambda#43| arg0@@304 arg1@@182 arg2@@120 arg3@@91)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@304 arg1@@182 arg2@@120 arg3@@91)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@28| Bool) ($o@@51 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@51) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@28|) $o@@51 $f@@31))  (=> (and (not (= $o@@51 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@51) |l#2@@29|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1636| :pattern ( (MapType6Select (|lambda#43| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@28|) $o@@51 $f@@31)) )))
(assert (forall ((arg0@@305 T@U) (arg1@@183 T@U) (arg2@@121 T@U) (arg3@@92 Bool) ) (! (= (type (|lambda#44| arg0@@305 arg1@@183 arg2@@121 arg3@@92)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@305 arg1@@183 arg2@@121 arg3@@92)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@29| Bool) ($o@@52 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@52) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@29|) $o@@52 $f@@32))  (=> (and (not (= $o@@52 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@52) |l#2@@30|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1637| :pattern ( (MapType6Select (|lambda#44| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@29|) $o@@52 $f@@32)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@184 T@U) (arg2@@122 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#45| arg0@@306 arg1@@184 arg2@@122 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@306 arg1@@184 arg2@@122 arg3@@93)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@30| Bool) ($o@@53 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@53) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@30|) $o@@53 $f@@33))  (=> (and (not (= $o@@53 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@53) |l#2@@31|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1638| :pattern ( (MapType6Select (|lambda#45| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@30|) $o@@53 $f@@33)) )))
(assert (forall ((arg0@@307 T@U) (arg1@@185 T@U) (arg2@@123 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#46| arg0@@307 arg1@@185 arg2@@123 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@307 arg1@@185 arg2@@123 arg3@@94)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@31| Bool) ($o@@54 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@54) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@31|) $o@@54 $f@@34))  (=> (and (not (= $o@@54 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@54) |l#2@@32|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1639| :pattern ( (MapType6Select (|lambda#46| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@31|) $o@@54 $f@@34)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@186 T@U) (arg2@@124 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#47| arg0@@308 arg1@@186 arg2@@124 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@308 arg1@@186 arg2@@124 arg3@@95)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@32| Bool) ($o@@55 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@55) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@32|) $o@@55 $f@@35))  (=> (and (not (= $o@@55 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@55) |l#2@@33|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1640| :pattern ( (MapType6Select (|lambda#47| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@32|) $o@@55 $f@@35)) )))
(assert (forall ((arg0@@309 T@U) (arg1@@187 T@U) (arg2@@125 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#48| arg0@@309 arg1@@187 arg2@@125 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@309 arg1@@187 arg2@@125 arg3@@96)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@33| Bool) ($o@@56 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@56) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@33|) $o@@56 $f@@36))  (=> (and (not (= $o@@56 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@56) |l#2@@34|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1641| :pattern ( (MapType6Select (|lambda#48| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@33|) $o@@56 $f@@36)) )))
(assert (forall ((arg0@@310 T@U) (arg1@@188 T@U) (arg2@@126 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#49| arg0@@310 arg1@@188 arg2@@126 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@310 arg1@@188 arg2@@126 arg3@@97)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@34| Bool) ($o@@57 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@57) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@34|) $o@@57 $f@@37))  (=> (and (not (= $o@@57 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@57) |l#2@@35|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1642| :pattern ( (MapType6Select (|lambda#49| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@34|) $o@@57 $f@@37)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@189 T@U) (arg2@@127 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#50| arg0@@311 arg1@@189 arg2@@127 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@311 arg1@@189 arg2@@127 arg3@@98)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@35| Bool) ($o@@58 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@35|) $o@@58 $f@@38))  (=> (and (not (= $o@@58 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@58) |l#2@@36|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1643| :pattern ( (MapType6Select (|lambda#50| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@35|) $o@@58 $f@@38)) )))
(assert (forall ((arg0@@312 T@U) (arg1@@190 T@U) (arg2@@128 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#51| arg0@@312 arg1@@190 arg2@@128 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@312 arg1@@190 arg2@@128 arg3@@99)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@36| Bool) ($o@@59 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@36|) $o@@59 $f@@39))  (=> (and (not (= $o@@59 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@59) |l#2@@37|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1644| :pattern ( (MapType6Select (|lambda#51| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@36|) $o@@59 $f@@39)) )))
(assert (forall ((arg0@@313 T@U) (arg1@@191 T@U) (arg2@@129 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#52| arg0@@313 arg1@@191 arg2@@129 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@313 arg1@@191 arg2@@129 arg3@@100)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@37| Bool) ($o@@60 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@37|) $o@@60 $f@@40))  (=> (and (not (= $o@@60 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@60) |l#2@@38|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1645| :pattern ( (MapType6Select (|lambda#52| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@37|) $o@@60 $f@@40)) )))
(assert (forall ((arg0@@314 T@U) (arg1@@192 T@U) (arg2@@130 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#53| arg0@@314 arg1@@192 arg2@@130 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@314 arg1@@192 arg2@@130 arg3@@101)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@38| Bool) ($o@@61 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@38|) $o@@61 $f@@41))  (=> (and (not (= $o@@61 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@61) |l#2@@39|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1646| :pattern ( (MapType6Select (|lambda#53| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@38|) $o@@61 $f@@41)) )))
(assert (forall ((arg0@@315 T@U) (arg1@@193 T@U) (arg2@@131 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#54| arg0@@315 arg1@@193 arg2@@131 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@315 arg1@@193 arg2@@131 arg3@@102)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@39| Bool) ($o@@62 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@39|) $o@@62 $f@@42))  (=> (and (not (= $o@@62 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@62) |l#2@@40|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1647| :pattern ( (MapType6Select (|lambda#54| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@39|) $o@@62 $f@@42)) )))
(assert (forall ((arg0@@316 T@U) (arg1@@194 T@U) (arg2@@132 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#55| arg0@@316 arg1@@194 arg2@@132 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@316 arg1@@194 arg2@@132 arg3@@103)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@40| Bool) ($o@@63 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@40|) $o@@63 $f@@43))  (=> (and (not (= $o@@63 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@63) |l#2@@41|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1648| :pattern ( (MapType6Select (|lambda#55| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@40|) $o@@63 $f@@43)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@195 T@U) (arg2@@133 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#56| arg0@@317 arg1@@195 arg2@@133 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@317 arg1@@195 arg2@@133 arg3@@104)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@41| Bool) ($o@@64 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@41|) $o@@64 $f@@44))  (=> (and (not (= $o@@64 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@64) |l#2@@42|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1649| :pattern ( (MapType6Select (|lambda#56| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@41|) $o@@64 $f@@44)) )))
(assert (forall ((arg0@@318 T@U) (arg1@@196 T@U) (arg2@@134 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#57| arg0@@318 arg1@@196 arg2@@134 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@318 arg1@@196 arg2@@134 arg3@@105)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@42| Bool) ($o@@65 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@42|) $o@@65 $f@@45))  (=> (and (not (= $o@@65 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@65) |l#2@@43|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1650| :pattern ( (MapType6Select (|lambda#57| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@42|) $o@@65 $f@@45)) )))
(assert (forall ((arg0@@319 T@U) (arg1@@197 T@U) (arg2@@135 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#58| arg0@@319 arg1@@197 arg2@@135 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@319 arg1@@197 arg2@@135 arg3@@106)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@43| Bool) ($o@@66 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@43|) $o@@66 $f@@46))  (=> (and (not (= $o@@66 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@66) |l#2@@44|))) |l#3@@43|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1651| :pattern ( (MapType6Select (|lambda#58| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@43|) $o@@66 $f@@46)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@198 T@U) (arg2@@136 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#59| arg0@@320 arg1@@198 arg2@@136 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@320 arg1@@198 arg2@@136 arg3@@107)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@44| Bool) ($o@@67 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@47) (FieldType alpha@@54))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@44|) $o@@67 $f@@47))  (=> (and (not (= $o@@67 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@67) |l#2@@45|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1652| :pattern ( (MapType6Select (|lambda#59| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@44|) $o@@67 $f@@47)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@199 T@U) (arg2@@137 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#60| arg0@@321 arg1@@199 arg2@@137 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@321 arg1@@199 arg2@@137 arg3@@108)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@45| Bool) ($o@@68 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@48) (FieldType alpha@@55))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@45|) $o@@68 $f@@48))  (=> (and (not (= $o@@68 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@68) |l#2@@46|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1653| :pattern ( (MapType6Select (|lambda#60| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@45|) $o@@68 $f@@48)) )))
(assert (forall ((arg0@@322 T@U) (arg1@@200 T@U) (arg2@@138 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#61| arg0@@322 arg1@@200 arg2@@138 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@322 arg1@@200 arg2@@138 arg3@@109)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@46| Bool) ($o@@69 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@49) (FieldType alpha@@56))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@46|) $o@@69 $f@@49))  (=> (and (not (= $o@@69 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@69) |l#2@@47|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1654| :pattern ( (MapType6Select (|lambda#61| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@46|) $o@@69 $f@@49)) )))
(assert (forall ((arg0@@323 T@U) (arg1@@201 T@U) (arg2@@139 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#62| arg0@@323 arg1@@201 arg2@@139 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@323 arg1@@201 arg2@@139 arg3@@110)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@47| Bool) ($o@@70 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@50) (FieldType alpha@@57))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@47|) $o@@70 $f@@50))  (=> (and (not (= $o@@70 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@70) |l#2@@48|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1655| :pattern ( (MapType6Select (|lambda#62| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@47|) $o@@70 $f@@50)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@202 T@U) (arg2@@140 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#63| arg0@@324 arg1@@202 arg2@@140 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@324 arg1@@202 arg2@@140 arg3@@111)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@48| Bool) ($o@@71 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@51) (FieldType alpha@@58))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@48|) $o@@71 $f@@51))  (=> (and (not (= $o@@71 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@71) |l#2@@49|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1656| :pattern ( (MapType6Select (|lambda#63| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@48|) $o@@71 $f@@51)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@203 T@U) (arg2@@141 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#64| arg0@@325 arg1@@203 arg2@@141 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@325 arg1@@203 arg2@@141 arg3@@112)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@49| Bool) ($o@@72 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@52) (FieldType alpha@@59))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@49|) $o@@72 $f@@52))  (=> (and (not (= $o@@72 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@72) |l#2@@50|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1657| :pattern ( (MapType6Select (|lambda#64| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@49|) $o@@72 $f@@52)) )))
(assert (forall ((arg0@@326 T@U) (arg1@@204 T@U) (arg2@@142 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#65| arg0@@326 arg1@@204 arg2@@142 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@326 arg1@@204 arg2@@142 arg3@@113)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@50| Bool) ($o@@73 T@U) ($f@@53 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@53) (FieldType alpha@@60))) (= (U_2_bool (MapType6Select (|lambda#65| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@50|) $o@@73 $f@@53))  (=> (and (not (= $o@@73 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@73) |l#2@@51|))) |l#3@@50|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1658| :pattern ( (MapType6Select (|lambda#65| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@50|) $o@@73 $f@@53)) )))
(assert (forall ((arg0@@327 T@U) (arg1@@205 T@U) (arg2@@143 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#66| arg0@@327 arg1@@205 arg2@@143 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@327 arg1@@205 arg2@@143 arg3@@114)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@51| Bool) ($o@@74 T@U) ($f@@54 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@54) (FieldType alpha@@61))) (= (U_2_bool (MapType6Select (|lambda#66| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@51|) $o@@74 $f@@54))  (=> (and (not (= $o@@74 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@74) |l#2@@52|))) |l#3@@51|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1659| :pattern ( (MapType6Select (|lambda#66| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@51|) $o@@74 $f@@54)) )))
(assert (forall ((arg0@@328 T@U) (arg1@@206 T@U) (arg2@@144 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#67| arg0@@328 arg1@@206 arg2@@144 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@328 arg1@@206 arg2@@144 arg3@@115)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@52| Bool) ($o@@75 T@U) ($f@@55 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@55) (FieldType alpha@@62))) (= (U_2_bool (MapType6Select (|lambda#67| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@52|) $o@@75 $f@@55))  (=> (and (not (= $o@@75 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@75) |l#2@@53|))) |l#3@@52|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1660| :pattern ( (MapType6Select (|lambda#67| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@52|) $o@@75 $f@@55)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@207 T@U) (arg2@@145 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#68| arg0@@329 arg1@@207 arg2@@145 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@329 arg1@@207 arg2@@145 arg3@@116)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@53| Bool) ($o@@76 T@U) ($f@@56 T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@56) (FieldType alpha@@63))) (= (U_2_bool (MapType6Select (|lambda#68| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@53|) $o@@76 $f@@56))  (=> (and (not (= $o@@76 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@76) |l#2@@54|))) |l#3@@53|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1661| :pattern ( (MapType6Select (|lambda#68| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@53|) $o@@76 $f@@56)) )))
(assert (forall ((arg0@@330 T@U) (arg1@@208 T@U) (arg2@@146 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#69| arg0@@330 arg1@@208 arg2@@146 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@330 arg1@@208 arg2@@146 arg3@@117)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@55| T@U) (|l#2@@55| T@U) (|l#3@@54| Bool) ($o@@77 T@U) ($f@@57 T@U) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@57) (FieldType alpha@@64))) (= (U_2_bool (MapType6Select (|lambda#69| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@54|) $o@@77 $f@@57))  (=> (and (not (= $o@@77 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@77) |l#2@@55|))) |l#3@@54|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1662| :pattern ( (MapType6Select (|lambda#69| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@54|) $o@@77 $f@@57)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@209 T@U) (arg2@@147 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#70| arg0@@331 arg1@@209 arg2@@147 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@331 arg1@@209 arg2@@147 arg3@@118)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@55| Bool) ($o@@78 T@U) ($f@@58 T@U) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@58) (FieldType alpha@@65))) (= (U_2_bool (MapType6Select (|lambda#70| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@55|) $o@@78 $f@@58))  (=> (and (not (= $o@@78 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@78) |l#2@@56|))) |l#3@@55|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1663| :pattern ( (MapType6Select (|lambda#70| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@55|) $o@@78 $f@@58)) )))
(assert (forall ((arg0@@332 T@U) (arg1@@210 T@U) (arg2@@148 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#71| arg0@@332 arg1@@210 arg2@@148 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@332 arg1@@210 arg2@@148 arg3@@119)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@56| Bool) ($o@@79 T@U) ($f@@59 T@U) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@59) (FieldType alpha@@66))) (= (U_2_bool (MapType6Select (|lambda#71| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@56|) $o@@79 $f@@59))  (=> (and (not (= $o@@79 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@79) |l#2@@57|))) |l#3@@56|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1664| :pattern ( (MapType6Select (|lambda#71| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@56|) $o@@79 $f@@59)) )))
(assert (forall ((arg0@@333 T@U) (arg1@@211 T@U) (arg2@@149 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#72| arg0@@333 arg1@@211 arg2@@149 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@333 arg1@@211 arg2@@149 arg3@@120)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@57| Bool) ($o@@80 T@U) ($f@@60 T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@60) (FieldType alpha@@67))) (= (U_2_bool (MapType6Select (|lambda#72| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@57|) $o@@80 $f@@60))  (=> (and (not (= $o@@80 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@80) |l#2@@58|))) |l#3@@57|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1665| :pattern ( (MapType6Select (|lambda#72| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@57|) $o@@80 $f@@60)) )))
(assert (forall ((arg0@@334 T@U) (arg1@@212 T@U) (arg2@@150 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#73| arg0@@334 arg1@@212 arg2@@150 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@334 arg1@@212 arg2@@150 arg3@@121)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@58| Bool) ($o@@81 T@U) ($f@@61 T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@61) (FieldType alpha@@68))) (= (U_2_bool (MapType6Select (|lambda#73| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@58|) $o@@81 $f@@61))  (=> (and (not (= $o@@81 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@81) |l#2@@59|))) |l#3@@58|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1666| :pattern ( (MapType6Select (|lambda#73| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@58|) $o@@81 $f@@61)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@213 T@U) (arg2@@151 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#74| arg0@@335 arg1@@213 arg2@@151 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@335 arg1@@213 arg2@@151 arg3@@122)) )))
(assert (forall ((|l#0@@60| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@59| Bool) ($o@@82 T@U) ($f@@62 T@U) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@62) (FieldType alpha@@69))) (= (U_2_bool (MapType6Select (|lambda#74| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@59|) $o@@82 $f@@62))  (=> (and (not (= $o@@82 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@82) |l#2@@60|))) |l#3@@59|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1667| :pattern ( (MapType6Select (|lambda#74| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@59|) $o@@82 $f@@62)) )))
(assert (forall ((arg0@@336 T@U) (arg1@@214 T@U) (arg2@@152 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#75| arg0@@336 arg1@@214 arg2@@152 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@336 arg1@@214 arg2@@152 arg3@@123)) )))
(assert (forall ((|l#0@@61| T@U) (|l#1@@61| T@U) (|l#2@@61| T@U) (|l#3@@60| Bool) ($o@@83 T@U) ($f@@63 T@U) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@63) (FieldType alpha@@70))) (= (U_2_bool (MapType6Select (|lambda#75| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@60|) $o@@83 $f@@63))  (=> (and (not (= $o@@83 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@83) |l#2@@61|))) |l#3@@60|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1668| :pattern ( (MapType6Select (|lambda#75| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@60|) $o@@83 $f@@63)) )))
(assert (forall ((arg0@@337 T@U) (arg1@@215 T@U) (arg2@@153 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#76| arg0@@337 arg1@@215 arg2@@153 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@337 arg1@@215 arg2@@153 arg3@@124)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@62| T@U) (|l#2@@62| T@U) (|l#3@@61| Bool) ($o@@84 T@U) ($f@@64 T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@64) (FieldType alpha@@71))) (= (U_2_bool (MapType6Select (|lambda#76| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@61|) $o@@84 $f@@64))  (=> (and (not (= $o@@84 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@84) |l#2@@62|))) |l#3@@61|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1669| :pattern ( (MapType6Select (|lambda#76| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@61|) $o@@84 $f@@64)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@216 T@U) (arg2@@154 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#77| arg0@@338 arg1@@216 arg2@@154 arg3@@125)) (MapType6Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@338 arg1@@216 arg2@@154 arg3@@125)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@63| T@U) (|l#2@@63| T@U) (|l#3@@62| Bool) ($o@@85 T@U) ($f@@65 T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@65) (FieldType alpha@@72))) (= (U_2_bool (MapType6Select (|lambda#77| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@62|) $o@@85 $f@@65))  (=> (and (not (= $o@@85 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@85) |l#2@@63|))) |l#3@@62|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1670| :pattern ( (MapType6Select (|lambda#77| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@62|) $o@@85 $f@@65)) )))
(assert (forall ((arg0@@339 T@U) (arg1@@217 T@U) (arg2@@155 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#78| arg0@@339 arg1@@217 arg2@@155 arg3@@126)) (MapType6Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@339 arg1@@217 arg2@@155 arg3@@126)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@64| T@U) (|l#2@@64| T@U) (|l#3@@63| Bool) ($o@@86 T@U) ($f@@66 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@66) (FieldType alpha@@73))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@63|) $o@@86 $f@@66))  (=> (and (not (= $o@@86 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@86) |l#2@@64|))) |l#3@@63|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1671| :pattern ( (MapType6Select (|lambda#78| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@63|) $o@@86 $f@@66)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@218 T@U) (arg2@@156 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#79| arg0@@340 arg1@@218 arg2@@156 arg3@@127)) (MapType6Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@340 arg1@@218 arg2@@156 arg3@@127)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@65| T@U) (|l#2@@65| T@U) (|l#3@@64| Bool) ($o@@87 T@U) ($f@@67 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@67) (FieldType alpha@@74))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@64|) $o@@87 $f@@67))  (=> (and (not (= $o@@87 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@87) |l#2@@65|))) |l#3@@64|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1672| :pattern ( (MapType6Select (|lambda#79| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@64|) $o@@87 $f@@67)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@219 T@U) (arg2@@157 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#80| arg0@@341 arg1@@219 arg2@@157 arg3@@128)) (MapType6Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@341 arg1@@219 arg2@@157 arg3@@128)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@66| T@U) (|l#2@@66| T@U) (|l#3@@65| Bool) ($o@@88 T@U) ($f@@68 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@66|) (MapType0Type refType MapType1Type))) (= (type |l#2@@66|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@68) (FieldType alpha@@75))) (= (U_2_bool (MapType6Select (|lambda#80| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@65|) $o@@88 $f@@68))  (=> (and (not (= $o@@88 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@66| $o@@88) |l#2@@66|))) |l#3@@65|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1673| :pattern ( (MapType6Select (|lambda#80| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@65|) $o@@88 $f@@68)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@220 T@U) (arg2@@158 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#81| arg0@@342 arg1@@220 arg2@@158 arg3@@129)) (MapType6Type refType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@342 arg1@@220 arg2@@158 arg3@@129)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@67| T@U) (|l#2@@67| T@U) (|l#3@@66| Bool) ($o@@89 T@U) ($f@@69 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@67|) (MapType0Type refType MapType1Type))) (= (type |l#2@@67|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@69) (FieldType alpha@@76))) (= (U_2_bool (MapType6Select (|lambda#81| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@66|) $o@@89 $f@@69))  (=> (and (not (= $o@@89 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@67| $o@@89) |l#2@@67|))) |l#3@@66|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1674| :pattern ( (MapType6Select (|lambda#81| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@66|) $o@@89 $f@@69)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@221 T@U) (arg2@@159 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#82| arg0@@343 arg1@@221 arg2@@159 arg3@@130)) (MapType6Type refType boolType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@343 arg1@@221 arg2@@159 arg3@@130)) )))
(assert (forall ((|l#0@@68| T@U) (|l#1@@68| T@U) (|l#2@@68| T@U) (|l#3@@67| Bool) ($o@@90 T@U) ($f@@70 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@70) (FieldType alpha@@77))) (= (U_2_bool (MapType6Select (|lambda#82| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@67|) $o@@90 $f@@70))  (=> (and (not (= $o@@90 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@90) |l#2@@68|))) |l#3@@67|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1675| :pattern ( (MapType6Select (|lambda#82| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@67|) $o@@90 $f@@70)) )))
(assert (forall ((arg0@@344 T@U) (arg1@@222 T@U) (arg2@@160 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#83| arg0@@344 arg1@@222 arg2@@160 arg3@@131)) (MapType6Type refType boolType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@344 arg1@@222 arg2@@160 arg3@@131)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@69| T@U) (|l#2@@69| T@U) (|l#3@@68| Bool) ($o@@91 T@U) ($f@@71 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@69|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@71) (FieldType alpha@@78))) (= (U_2_bool (MapType6Select (|lambda#83| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@68|) $o@@91 $f@@71))  (=> (and (not (= $o@@91 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@91) |l#2@@69|))) |l#3@@68|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1676| :pattern ( (MapType6Select (|lambda#83| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@68|) $o@@91 $f@@71)) )))
(assert (forall ((arg0@@345 T@U) (arg1@@223 T@U) (arg2@@161 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#84| arg0@@345 arg1@@223 arg2@@161 arg3@@132)) (MapType6Type refType boolType)) :qid |funType:lambda#84| :pattern ( (|lambda#84| arg0@@345 arg1@@223 arg2@@161 arg3@@132)) )))
(assert (forall ((|l#0@@70| T@U) (|l#1@@70| T@U) (|l#2@@70| T@U) (|l#3@@69| Bool) ($o@@92 T@U) ($f@@72 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@70|) (MapType0Type refType MapType1Type))) (= (type |l#2@@70|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@72) (FieldType alpha@@79))) (= (U_2_bool (MapType6Select (|lambda#84| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@69|) $o@@92 $f@@72))  (=> (and (not (= $o@@92 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@70| $o@@92) |l#2@@70|))) |l#3@@69|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1677| :pattern ( (MapType6Select (|lambda#84| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@69|) $o@@92 $f@@72)) )))
(assert (forall ((arg0@@346 T@U) (arg1@@224 T@U) (arg2@@162 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#85| arg0@@346 arg1@@224 arg2@@162 arg3@@133)) (MapType6Type refType boolType)) :qid |funType:lambda#85| :pattern ( (|lambda#85| arg0@@346 arg1@@224 arg2@@162 arg3@@133)) )))
(assert (forall ((|l#0@@71| T@U) (|l#1@@71| T@U) (|l#2@@71| T@U) (|l#3@@70| Bool) ($o@@93 T@U) ($f@@73 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@71|) (MapType0Type refType MapType1Type))) (= (type |l#2@@71|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@73) (FieldType alpha@@80))) (= (U_2_bool (MapType6Select (|lambda#85| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@70|) $o@@93 $f@@73))  (=> (and (not (= $o@@93 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@71| $o@@93) |l#2@@71|))) |l#3@@70|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1678| :pattern ( (MapType6Select (|lambda#85| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@70|) $o@@93 $f@@73)) )))
(assert (forall ((arg0@@347 T@U) (arg1@@225 T@U) (arg2@@163 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#86| arg0@@347 arg1@@225 arg2@@163 arg3@@134)) (MapType6Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@347 arg1@@225 arg2@@163 arg3@@134)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@72| T@U) (|l#2@@72| T@U) (|l#3@@71| Bool) ($o@@94 T@U) ($f@@74 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@72|) (MapType0Type refType MapType1Type))) (= (type |l#2@@72|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@74) (FieldType alpha@@81))) (= (U_2_bool (MapType6Select (|lambda#86| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@71|) $o@@94 $f@@74))  (=> (and (not (= $o@@94 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@72| $o@@94) |l#2@@72|))) |l#3@@71|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1679| :pattern ( (MapType6Select (|lambda#86| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@71|) $o@@94 $f@@74)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@226 T@U) (arg2@@164 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#87| arg0@@348 arg1@@226 arg2@@164 arg3@@135)) (MapType6Type refType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@348 arg1@@226 arg2@@164 arg3@@135)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@73| T@U) (|l#2@@73| T@U) (|l#3@@72| Bool) ($o@@95 T@U) ($f@@75 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@73|) (MapType0Type refType MapType1Type))) (= (type |l#2@@73|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@75) (FieldType alpha@@82))) (= (U_2_bool (MapType6Select (|lambda#87| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@72|) $o@@95 $f@@75))  (=> (and (not (= $o@@95 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@73| $o@@95) |l#2@@73|))) |l#3@@72|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1680| :pattern ( (MapType6Select (|lambda#87| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@72|) $o@@95 $f@@75)) )))
(assert (forall ((arg0@@349 T@U) (arg1@@227 T@U) (arg2@@165 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#88| arg0@@349 arg1@@227 arg2@@165 arg3@@136)) (MapType6Type refType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@349 arg1@@227 arg2@@165 arg3@@136)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@74| T@U) (|l#2@@74| T@U) (|l#3@@73| Bool) ($o@@96 T@U) ($f@@76 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@74|) (MapType0Type refType MapType1Type))) (= (type |l#2@@74|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@76) (FieldType alpha@@83))) (= (U_2_bool (MapType6Select (|lambda#88| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@73|) $o@@96 $f@@76))  (=> (and (not (= $o@@96 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@74| $o@@96) |l#2@@74|))) |l#3@@73|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1681| :pattern ( (MapType6Select (|lambda#88| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@73|) $o@@96 $f@@76)) )))
(assert (forall ((arg0@@350 T@U) (arg1@@228 T@U) (arg2@@166 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#89| arg0@@350 arg1@@228 arg2@@166 arg3@@137)) (MapType6Type refType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@350 arg1@@228 arg2@@166 arg3@@137)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@75| T@U) (|l#2@@75| T@U) (|l#3@@74| Bool) ($o@@97 T@U) ($f@@77 T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@75|) (MapType0Type refType MapType1Type))) (= (type |l#2@@75|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@77) (FieldType alpha@@84))) (= (U_2_bool (MapType6Select (|lambda#89| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@74|) $o@@97 $f@@77))  (=> (and (not (= $o@@97 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@75| $o@@97) |l#2@@75|))) |l#3@@74|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1682| :pattern ( (MapType6Select (|lambda#89| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@74|) $o@@97 $f@@77)) )))
(assert (forall ((arg0@@351 T@U) (arg1@@229 T@U) (arg2@@167 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#90| arg0@@351 arg1@@229 arg2@@167 arg3@@138)) (MapType6Type refType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@351 arg1@@229 arg2@@167 arg3@@138)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@76| T@U) (|l#2@@76| T@U) (|l#3@@75| Bool) ($o@@98 T@U) ($f@@78 T@U) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@76|) (MapType0Type refType MapType1Type))) (= (type |l#2@@76|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@78) (FieldType alpha@@85))) (= (U_2_bool (MapType6Select (|lambda#90| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@75|) $o@@98 $f@@78))  (=> (and (not (= $o@@98 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@76| $o@@98) |l#2@@76|))) |l#3@@75|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1683| :pattern ( (MapType6Select (|lambda#90| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@75|) $o@@98 $f@@78)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@230 T@U) (arg2@@168 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#91| arg0@@352 arg1@@230 arg2@@168 arg3@@139)) (MapType6Type refType boolType)) :qid |funType:lambda#91| :pattern ( (|lambda#91| arg0@@352 arg1@@230 arg2@@168 arg3@@139)) )))
(assert (forall ((|l#0@@77| T@U) (|l#1@@77| T@U) (|l#2@@77| T@U) (|l#3@@76| Bool) ($o@@99 T@U) ($f@@79 T@U) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type |l#0@@77|) refType) (= (type |l#1@@77|) (MapType0Type refType MapType1Type))) (= (type |l#2@@77|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@79) (FieldType alpha@@86))) (= (U_2_bool (MapType6Select (|lambda#91| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@76|) $o@@99 $f@@79))  (=> (and (not (= $o@@99 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@77| $o@@99) |l#2@@77|))) |l#3@@76|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1684| :pattern ( (MapType6Select (|lambda#91| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@76|) $o@@99 $f@@79)) )))
(assert (forall ((arg0@@353 T@U) (arg1@@231 T@U) (arg2@@169 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#92| arg0@@353 arg1@@231 arg2@@169 arg3@@140)) (MapType6Type refType boolType)) :qid |funType:lambda#92| :pattern ( (|lambda#92| arg0@@353 arg1@@231 arg2@@169 arg3@@140)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@78| T@U) (|l#2@@78| T@U) (|l#3@@77| Bool) ($o@@100 T@U) ($f@@80 T@U) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type |l#0@@78|) refType) (= (type |l#1@@78|) (MapType0Type refType MapType1Type))) (= (type |l#2@@78|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@80) (FieldType alpha@@87))) (= (U_2_bool (MapType6Select (|lambda#92| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@77|) $o@@100 $f@@80))  (=> (and (not (= $o@@100 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@78| $o@@100) |l#2@@78|))) |l#3@@77|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1685| :pattern ( (MapType6Select (|lambda#92| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@77|) $o@@100 $f@@80)) )))
(assert (forall ((arg0@@354 T@U) (arg1@@232 T@U) (arg2@@170 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#93| arg0@@354 arg1@@232 arg2@@170 arg3@@141)) (MapType6Type refType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@354 arg1@@232 arg2@@170 arg3@@141)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@79| T@U) (|l#2@@79| T@U) (|l#3@@78| Bool) ($o@@101 T@U) ($f@@81 T@U) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (= (type |l#0@@79|) refType) (= (type |l#1@@79|) (MapType0Type refType MapType1Type))) (= (type |l#2@@79|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@81) (FieldType alpha@@88))) (= (U_2_bool (MapType6Select (|lambda#93| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@78|) $o@@101 $f@@81))  (=> (and (not (= $o@@101 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@79| $o@@101) |l#2@@79|))) |l#3@@78|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1686| :pattern ( (MapType6Select (|lambda#93| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@78|) $o@@101 $f@@81)) )))
(assert (forall ((arg0@@355 T@U) (arg1@@233 T@U) (arg2@@171 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#94| arg0@@355 arg1@@233 arg2@@171 arg3@@142)) (MapType6Type refType boolType)) :qid |funType:lambda#94| :pattern ( (|lambda#94| arg0@@355 arg1@@233 arg2@@171 arg3@@142)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@80| T@U) (|l#2@@80| T@U) (|l#3@@79| Bool) ($o@@102 T@U) ($f@@82 T@U) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (and (and (= (type |l#0@@80|) refType) (= (type |l#1@@80|) (MapType0Type refType MapType1Type))) (= (type |l#2@@80|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@82) (FieldType alpha@@89))) (= (U_2_bool (MapType6Select (|lambda#94| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@79|) $o@@102 $f@@82))  (=> (and (not (= $o@@102 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@80| $o@@102) |l#2@@80|))) |l#3@@79|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1687| :pattern ( (MapType6Select (|lambda#94| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@79|) $o@@102 $f@@82)) )))
(assert (forall ((arg0@@356 T@U) (arg1@@234 T@U) (arg2@@172 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#95| arg0@@356 arg1@@234 arg2@@172 arg3@@143)) (MapType6Type refType boolType)) :qid |funType:lambda#95| :pattern ( (|lambda#95| arg0@@356 arg1@@234 arg2@@172 arg3@@143)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@81| T@U) (|l#2@@81| T@U) (|l#3@@80| Bool) ($o@@103 T@U) ($f@@83 T@U) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (and (and (= (type |l#0@@81|) refType) (= (type |l#1@@81|) (MapType0Type refType MapType1Type))) (= (type |l#2@@81|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@83) (FieldType alpha@@90))) (= (U_2_bool (MapType6Select (|lambda#95| |l#0@@81| |l#1@@81| |l#2@@81| |l#3@@80|) $o@@103 $f@@83))  (=> (and (not (= $o@@103 |l#0@@81|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@81| $o@@103) |l#2@@81|))) |l#3@@80|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1688| :pattern ( (MapType6Select (|lambda#95| |l#0@@81| |l#1@@81| |l#2@@81| |l#3@@80|) $o@@103 $f@@83)) )))
(assert (forall ((arg0@@357 T@U) (arg1@@235 T@U) (arg2@@173 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#96| arg0@@357 arg1@@235 arg2@@173 arg3@@144)) (MapType6Type refType boolType)) :qid |funType:lambda#96| :pattern ( (|lambda#96| arg0@@357 arg1@@235 arg2@@173 arg3@@144)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@82| T@U) (|l#2@@82| T@U) (|l#3@@81| Bool) ($o@@104 T@U) ($f@@84 T@U) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (and (and (= (type |l#0@@82|) refType) (= (type |l#1@@82|) (MapType0Type refType MapType1Type))) (= (type |l#2@@82|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@84) (FieldType alpha@@91))) (= (U_2_bool (MapType6Select (|lambda#96| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@81|) $o@@104 $f@@84))  (=> (and (not (= $o@@104 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@82| $o@@104) |l#2@@82|))) |l#3@@81|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1689| :pattern ( (MapType6Select (|lambda#96| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@81|) $o@@104 $f@@84)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@236 T@U) (arg2@@174 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#97| arg0@@358 arg1@@236 arg2@@174 arg3@@145)) (MapType6Type refType boolType)) :qid |funType:lambda#97| :pattern ( (|lambda#97| arg0@@358 arg1@@236 arg2@@174 arg3@@145)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@83| T@U) (|l#2@@83| T@U) (|l#3@@82| Bool) ($o@@105 T@U) ($f@@85 T@U) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (and (and (= (type |l#0@@83|) refType) (= (type |l#1@@83|) (MapType0Type refType MapType1Type))) (= (type |l#2@@83|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@85) (FieldType alpha@@92))) (= (U_2_bool (MapType6Select (|lambda#97| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@82|) $o@@105 $f@@85))  (=> (and (not (= $o@@105 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@83| $o@@105) |l#2@@83|))) |l#3@@82|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1690| :pattern ( (MapType6Select (|lambda#97| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@82|) $o@@105 $f@@85)) )))
(assert (forall ((arg0@@359 T@U) (arg1@@237 T@U) (arg2@@175 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#98| arg0@@359 arg1@@237 arg2@@175 arg3@@146)) (MapType6Type refType boolType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@359 arg1@@237 arg2@@175 arg3@@146)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@84| T@U) (|l#2@@84| T@U) (|l#3@@83| Bool) ($o@@106 T@U) ($f@@86 T@U) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (and (and (= (type |l#0@@84|) refType) (= (type |l#1@@84|) (MapType0Type refType MapType1Type))) (= (type |l#2@@84|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@86) (FieldType alpha@@93))) (= (U_2_bool (MapType6Select (|lambda#98| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@83|) $o@@106 $f@@86))  (=> (and (not (= $o@@106 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@84| $o@@106) |l#2@@84|))) |l#3@@83|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1691| :pattern ( (MapType6Select (|lambda#98| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@83|) $o@@106 $f@@86)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@238 T@U) (arg2@@176 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#99| arg0@@360 arg1@@238 arg2@@176 arg3@@147)) (MapType6Type refType boolType)) :qid |funType:lambda#99| :pattern ( (|lambda#99| arg0@@360 arg1@@238 arg2@@176 arg3@@147)) )))
(assert (forall ((|l#0@@85| T@U) (|l#1@@85| T@U) (|l#2@@85| T@U) (|l#3@@84| Bool) ($o@@107 T@U) ($f@@87 T@U) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (and (and (= (type |l#0@@85|) refType) (= (type |l#1@@85|) (MapType0Type refType MapType1Type))) (= (type |l#2@@85|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@87) (FieldType alpha@@94))) (= (U_2_bool (MapType6Select (|lambda#99| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@84|) $o@@107 $f@@87))  (=> (and (not (= $o@@107 |l#0@@85|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@85| $o@@107) |l#2@@85|))) |l#3@@84|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1692| :pattern ( (MapType6Select (|lambda#99| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@84|) $o@@107 $f@@87)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@239 T@U) (arg2@@177 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#100| arg0@@361 arg1@@239 arg2@@177 arg3@@148)) (MapType6Type refType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@361 arg1@@239 arg2@@177 arg3@@148)) )))
(assert (forall ((|l#0@@86| T@U) (|l#1@@86| T@U) (|l#2@@86| T@U) (|l#3@@85| Bool) ($o@@108 T@U) ($f@@88 T@U) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (and (and (= (type |l#0@@86|) refType) (= (type |l#1@@86|) (MapType0Type refType MapType1Type))) (= (type |l#2@@86|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@88) (FieldType alpha@@95))) (= (U_2_bool (MapType6Select (|lambda#100| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@85|) $o@@108 $f@@88))  (=> (and (not (= $o@@108 |l#0@@86|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@86| $o@@108) |l#2@@86|))) |l#3@@85|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1693| :pattern ( (MapType6Select (|lambda#100| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@85|) $o@@108 $f@@88)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@240 T@U) (arg2@@178 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#101| arg0@@362 arg1@@240 arg2@@178 arg3@@149)) (MapType6Type refType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@362 arg1@@240 arg2@@178 arg3@@149)) )))
(assert (forall ((|l#0@@87| T@U) (|l#1@@87| T@U) (|l#2@@87| T@U) (|l#3@@86| Bool) ($o@@109 T@U) ($f@@89 T@U) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (and (and (= (type |l#0@@87|) refType) (= (type |l#1@@87|) (MapType0Type refType MapType1Type))) (= (type |l#2@@87|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@89) (FieldType alpha@@96))) (= (U_2_bool (MapType6Select (|lambda#101| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@86|) $o@@109 $f@@89))  (=> (and (not (= $o@@109 |l#0@@87|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@87| $o@@109) |l#2@@87|))) |l#3@@86|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1694| :pattern ( (MapType6Select (|lambda#101| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@86|) $o@@109 $f@@89)) )))
(assert (forall ((arg0@@363 T@U) (arg1@@241 T@U) (arg2@@179 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#102| arg0@@363 arg1@@241 arg2@@179 arg3@@150)) (MapType6Type refType boolType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@363 arg1@@241 arg2@@179 arg3@@150)) )))
(assert (forall ((|l#0@@88| T@U) (|l#1@@88| T@U) (|l#2@@88| T@U) (|l#3@@87| Bool) ($o@@110 T@U) ($f@@90 T@U) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (and (and (= (type |l#0@@88|) refType) (= (type |l#1@@88|) (MapType0Type refType MapType1Type))) (= (type |l#2@@88|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@90) (FieldType alpha@@97))) (= (U_2_bool (MapType6Select (|lambda#102| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@87|) $o@@110 $f@@90))  (=> (and (not (= $o@@110 |l#0@@88|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@88| $o@@110) |l#2@@88|))) |l#3@@87|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1695| :pattern ( (MapType6Select (|lambda#102| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@87|) $o@@110 $f@@90)) )))
(assert (forall ((arg0@@364 T@U) (arg1@@242 T@U) (arg2@@180 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#103| arg0@@364 arg1@@242 arg2@@180 arg3@@151)) (MapType6Type refType boolType)) :qid |funType:lambda#103| :pattern ( (|lambda#103| arg0@@364 arg1@@242 arg2@@180 arg3@@151)) )))
(assert (forall ((|l#0@@89| T@U) (|l#1@@89| T@U) (|l#2@@89| T@U) (|l#3@@88| Bool) ($o@@111 T@U) ($f@@91 T@U) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (and (and (= (type |l#0@@89|) refType) (= (type |l#1@@89|) (MapType0Type refType MapType1Type))) (= (type |l#2@@89|) (FieldType boolType))) (= (type $o@@111) refType)) (= (type $f@@91) (FieldType alpha@@98))) (= (U_2_bool (MapType6Select (|lambda#103| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@88|) $o@@111 $f@@91))  (=> (and (not (= $o@@111 |l#0@@89|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@89| $o@@111) |l#2@@89|))) |l#3@@88|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1696| :pattern ( (MapType6Select (|lambda#103| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@88|) $o@@111 $f@@91)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@243 T@U) (arg2@@181 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#104| arg0@@365 arg1@@243 arg2@@181 arg3@@152)) (MapType6Type refType boolType)) :qid |funType:lambda#104| :pattern ( (|lambda#104| arg0@@365 arg1@@243 arg2@@181 arg3@@152)) )))
(assert (forall ((|l#0@@90| T@U) (|l#1@@90| T@U) (|l#2@@90| T@U) (|l#3@@89| Bool) ($o@@112 T@U) ($f@@92 T@U) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (and (and (= (type |l#0@@90|) refType) (= (type |l#1@@90|) (MapType0Type refType MapType1Type))) (= (type |l#2@@90|) (FieldType boolType))) (= (type $o@@112) refType)) (= (type $f@@92) (FieldType alpha@@99))) (= (U_2_bool (MapType6Select (|lambda#104| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@89|) $o@@112 $f@@92))  (=> (and (not (= $o@@112 |l#0@@90|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@90| $o@@112) |l#2@@90|))) |l#3@@89|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1697| :pattern ( (MapType6Select (|lambda#104| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@89|) $o@@112 $f@@92)) )))
(assert (forall ((arg0@@366 T@U) (arg1@@244 T@U) (arg2@@182 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#105| arg0@@366 arg1@@244 arg2@@182 arg3@@153)) (MapType6Type refType boolType)) :qid |funType:lambda#105| :pattern ( (|lambda#105| arg0@@366 arg1@@244 arg2@@182 arg3@@153)) )))
(assert (forall ((|l#0@@91| T@U) (|l#1@@91| T@U) (|l#2@@91| T@U) (|l#3@@90| Bool) ($o@@113 T@U) ($f@@93 T@U) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (and (and (= (type |l#0@@91|) refType) (= (type |l#1@@91|) (MapType0Type refType MapType1Type))) (= (type |l#2@@91|) (FieldType boolType))) (= (type $o@@113) refType)) (= (type $f@@93) (FieldType alpha@@100))) (= (U_2_bool (MapType6Select (|lambda#105| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@90|) $o@@113 $f@@93))  (=> (and (not (= $o@@113 |l#0@@91|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@91| $o@@113) |l#2@@91|))) |l#3@@90|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1698| :pattern ( (MapType6Select (|lambda#105| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@90|) $o@@113 $f@@93)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@245 T@U) (arg2@@183 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#106| arg0@@367 arg1@@245 arg2@@183 arg3@@154)) (MapType6Type refType boolType)) :qid |funType:lambda#106| :pattern ( (|lambda#106| arg0@@367 arg1@@245 arg2@@183 arg3@@154)) )))
(assert (forall ((|l#0@@92| T@U) (|l#1@@92| T@U) (|l#2@@92| T@U) (|l#3@@91| Bool) ($o@@114 T@U) ($f@@94 T@U) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (and (and (= (type |l#0@@92|) refType) (= (type |l#1@@92|) (MapType0Type refType MapType1Type))) (= (type |l#2@@92|) (FieldType boolType))) (= (type $o@@114) refType)) (= (type $f@@94) (FieldType alpha@@101))) (= (U_2_bool (MapType6Select (|lambda#106| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@91|) $o@@114 $f@@94))  (=> (and (not (= $o@@114 |l#0@@92|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@92| $o@@114) |l#2@@92|))) |l#3@@91|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1699| :pattern ( (MapType6Select (|lambda#106| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@91|) $o@@114 $f@@94)) )))
(assert (forall ((arg0@@368 T@U) (arg1@@246 T@U) (arg2@@184 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#107| arg0@@368 arg1@@246 arg2@@184 arg3@@155)) (MapType6Type refType boolType)) :qid |funType:lambda#107| :pattern ( (|lambda#107| arg0@@368 arg1@@246 arg2@@184 arg3@@155)) )))
(assert (forall ((|l#0@@93| T@U) (|l#1@@93| T@U) (|l#2@@93| T@U) (|l#3@@92| Bool) ($o@@115 T@U) ($f@@95 T@U) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (and (and (= (type |l#0@@93|) refType) (= (type |l#1@@93|) (MapType0Type refType MapType1Type))) (= (type |l#2@@93|) (FieldType boolType))) (= (type $o@@115) refType)) (= (type $f@@95) (FieldType alpha@@102))) (= (U_2_bool (MapType6Select (|lambda#107| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@92|) $o@@115 $f@@95))  (=> (and (not (= $o@@115 |l#0@@93|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@93| $o@@115) |l#2@@93|))) |l#3@@92|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1700| :pattern ( (MapType6Select (|lambda#107| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@92|) $o@@115 $f@@95)) )))
(assert (forall ((arg0@@369 T@U) (arg1@@247 T@U) (arg2@@185 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#108| arg0@@369 arg1@@247 arg2@@185 arg3@@156)) (MapType6Type refType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@369 arg1@@247 arg2@@185 arg3@@156)) )))
(assert (forall ((|l#0@@94| T@U) (|l#1@@94| T@U) (|l#2@@94| T@U) (|l#3@@93| Bool) ($o@@116 T@U) ($f@@96 T@U) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (and (and (= (type |l#0@@94|) refType) (= (type |l#1@@94|) (MapType0Type refType MapType1Type))) (= (type |l#2@@94|) (FieldType boolType))) (= (type $o@@116) refType)) (= (type $f@@96) (FieldType alpha@@103))) (= (U_2_bool (MapType6Select (|lambda#108| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@93|) $o@@116 $f@@96))  (=> (and (not (= $o@@116 |l#0@@94|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@94| $o@@116) |l#2@@94|))) |l#3@@93|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1701| :pattern ( (MapType6Select (|lambda#108| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@93|) $o@@116 $f@@96)) )))
(assert (forall ((arg0@@370 T@U) (arg1@@248 T@U) (arg2@@186 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#109| arg0@@370 arg1@@248 arg2@@186 arg3@@157)) (MapType6Type refType boolType)) :qid |funType:lambda#109| :pattern ( (|lambda#109| arg0@@370 arg1@@248 arg2@@186 arg3@@157)) )))
(assert (forall ((|l#0@@95| T@U) (|l#1@@95| T@U) (|l#2@@95| T@U) (|l#3@@94| Bool) ($o@@117 T@U) ($f@@97 T@U) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (and (and (= (type |l#0@@95|) refType) (= (type |l#1@@95|) (MapType0Type refType MapType1Type))) (= (type |l#2@@95|) (FieldType boolType))) (= (type $o@@117) refType)) (= (type $f@@97) (FieldType alpha@@104))) (= (U_2_bool (MapType6Select (|lambda#109| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@94|) $o@@117 $f@@97))  (=> (and (not (= $o@@117 |l#0@@95|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@95| $o@@117) |l#2@@95|))) |l#3@@94|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1702| :pattern ( (MapType6Select (|lambda#109| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@94|) $o@@117 $f@@97)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@249 T@U) (arg2@@187 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#110| arg0@@371 arg1@@249 arg2@@187 arg3@@158)) (MapType6Type refType boolType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@371 arg1@@249 arg2@@187 arg3@@158)) )))
(assert (forall ((|l#0@@96| T@U) (|l#1@@96| T@U) (|l#2@@96| T@U) (|l#3@@95| Bool) ($o@@118 T@U) ($f@@98 T@U) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (and (and (= (type |l#0@@96|) refType) (= (type |l#1@@96|) (MapType0Type refType MapType1Type))) (= (type |l#2@@96|) (FieldType boolType))) (= (type $o@@118) refType)) (= (type $f@@98) (FieldType alpha@@105))) (= (U_2_bool (MapType6Select (|lambda#110| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@95|) $o@@118 $f@@98))  (=> (and (not (= $o@@118 |l#0@@96|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@96| $o@@118) |l#2@@96|))) |l#3@@95|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1703| :pattern ( (MapType6Select (|lambda#110| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@95|) $o@@118 $f@@98)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@250 T@U) (arg2@@188 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#111| arg0@@372 arg1@@250 arg2@@188 arg3@@159)) (MapType6Type refType boolType)) :qid |funType:lambda#111| :pattern ( (|lambda#111| arg0@@372 arg1@@250 arg2@@188 arg3@@159)) )))
(assert (forall ((|l#0@@97| T@U) (|l#1@@97| T@U) (|l#2@@97| T@U) (|l#3@@96| Bool) ($o@@119 T@U) ($f@@99 T@U) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (and (and (= (type |l#0@@97|) refType) (= (type |l#1@@97|) (MapType0Type refType MapType1Type))) (= (type |l#2@@97|) (FieldType boolType))) (= (type $o@@119) refType)) (= (type $f@@99) (FieldType alpha@@106))) (= (U_2_bool (MapType6Select (|lambda#111| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@96|) $o@@119 $f@@99))  (=> (and (not (= $o@@119 |l#0@@97|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@97| $o@@119) |l#2@@97|))) |l#3@@96|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1704| :pattern ( (MapType6Select (|lambda#111| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@96|) $o@@119 $f@@99)) )))
(assert (forall ((arg0@@373 T@U) (arg1@@251 T@U) (arg2@@189 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#112| arg0@@373 arg1@@251 arg2@@189 arg3@@160)) (MapType6Type refType boolType)) :qid |funType:lambda#112| :pattern ( (|lambda#112| arg0@@373 arg1@@251 arg2@@189 arg3@@160)) )))
(assert (forall ((|l#0@@98| T@U) (|l#1@@98| T@U) (|l#2@@98| T@U) (|l#3@@97| Bool) ($o@@120 T@U) ($f@@100 T@U) ) (! (let ((alpha@@107 (FieldTypeInv0 (type $f@@100)))) (=> (and (and (and (and (= (type |l#0@@98|) refType) (= (type |l#1@@98|) (MapType0Type refType MapType1Type))) (= (type |l#2@@98|) (FieldType boolType))) (= (type $o@@120) refType)) (= (type $f@@100) (FieldType alpha@@107))) (= (U_2_bool (MapType6Select (|lambda#112| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@97|) $o@@120 $f@@100))  (=> (and (not (= $o@@120 |l#0@@98|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@98| $o@@120) |l#2@@98|))) |l#3@@97|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1705| :pattern ( (MapType6Select (|lambda#112| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@97|) $o@@120 $f@@100)) )))
(assert (forall ((arg0@@374 T@U) (arg1@@252 T@U) (arg2@@190 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#113| arg0@@374 arg1@@252 arg2@@190 arg3@@161)) (MapType6Type refType boolType)) :qid |funType:lambda#113| :pattern ( (|lambda#113| arg0@@374 arg1@@252 arg2@@190 arg3@@161)) )))
(assert (forall ((|l#0@@99| T@U) (|l#1@@99| T@U) (|l#2@@99| T@U) (|l#3@@98| Bool) ($o@@121 T@U) ($f@@101 T@U) ) (! (let ((alpha@@108 (FieldTypeInv0 (type $f@@101)))) (=> (and (and (and (and (= (type |l#0@@99|) refType) (= (type |l#1@@99|) (MapType0Type refType MapType1Type))) (= (type |l#2@@99|) (FieldType boolType))) (= (type $o@@121) refType)) (= (type $f@@101) (FieldType alpha@@108))) (= (U_2_bool (MapType6Select (|lambda#113| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@98|) $o@@121 $f@@101))  (=> (and (not (= $o@@121 |l#0@@99|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@99| $o@@121) |l#2@@99|))) |l#3@@98|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1706| :pattern ( (MapType6Select (|lambda#113| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@98|) $o@@121 $f@@101)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@253 T@U) (arg2@@191 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#114| arg0@@375 arg1@@253 arg2@@191 arg3@@162)) (MapType6Type refType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@375 arg1@@253 arg2@@191 arg3@@162)) )))
(assert (forall ((|l#0@@100| T@U) (|l#1@@100| T@U) (|l#2@@100| T@U) (|l#3@@99| Bool) ($o@@122 T@U) ($f@@102 T@U) ) (! (let ((alpha@@109 (FieldTypeInv0 (type $f@@102)))) (=> (and (and (and (and (= (type |l#0@@100|) refType) (= (type |l#1@@100|) (MapType0Type refType MapType1Type))) (= (type |l#2@@100|) (FieldType boolType))) (= (type $o@@122) refType)) (= (type $f@@102) (FieldType alpha@@109))) (= (U_2_bool (MapType6Select (|lambda#114| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@99|) $o@@122 $f@@102))  (=> (and (not (= $o@@122 |l#0@@100|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@100| $o@@122) |l#2@@100|))) |l#3@@99|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1707| :pattern ( (MapType6Select (|lambda#114| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@99|) $o@@122 $f@@102)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@254 T@U) (arg2@@192 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#115| arg0@@376 arg1@@254 arg2@@192 arg3@@163)) (MapType6Type refType boolType)) :qid |funType:lambda#115| :pattern ( (|lambda#115| arg0@@376 arg1@@254 arg2@@192 arg3@@163)) )))
(assert (forall ((|l#0@@101| T@U) (|l#1@@101| T@U) (|l#2@@101| T@U) (|l#3@@100| Bool) ($o@@123 T@U) ($f@@103 T@U) ) (! (let ((alpha@@110 (FieldTypeInv0 (type $f@@103)))) (=> (and (and (and (and (= (type |l#0@@101|) refType) (= (type |l#1@@101|) (MapType0Type refType MapType1Type))) (= (type |l#2@@101|) (FieldType boolType))) (= (type $o@@123) refType)) (= (type $f@@103) (FieldType alpha@@110))) (= (U_2_bool (MapType6Select (|lambda#115| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@100|) $o@@123 $f@@103))  (=> (and (not (= $o@@123 |l#0@@101|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@101| $o@@123) |l#2@@101|))) |l#3@@100|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1708| :pattern ( (MapType6Select (|lambda#115| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@100|) $o@@123 $f@@103)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@255 T@U) (arg2@@193 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#116| arg0@@377 arg1@@255 arg2@@193 arg3@@164)) (MapType6Type refType boolType)) :qid |funType:lambda#116| :pattern ( (|lambda#116| arg0@@377 arg1@@255 arg2@@193 arg3@@164)) )))
(assert (forall ((|l#0@@102| T@U) (|l#1@@102| T@U) (|l#2@@102| T@U) (|l#3@@101| Bool) ($o@@124 T@U) ($f@@104 T@U) ) (! (let ((alpha@@111 (FieldTypeInv0 (type $f@@104)))) (=> (and (and (and (and (= (type |l#0@@102|) refType) (= (type |l#1@@102|) (MapType0Type refType MapType1Type))) (= (type |l#2@@102|) (FieldType boolType))) (= (type $o@@124) refType)) (= (type $f@@104) (FieldType alpha@@111))) (= (U_2_bool (MapType6Select (|lambda#116| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@101|) $o@@124 $f@@104))  (=> (and (not (= $o@@124 |l#0@@102|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@102| $o@@124) |l#2@@102|))) |l#3@@101|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1709| :pattern ( (MapType6Select (|lambda#116| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@101|) $o@@124 $f@@104)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@256 T@U) (arg2@@194 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#117| arg0@@378 arg1@@256 arg2@@194 arg3@@165)) (MapType6Type refType boolType)) :qid |funType:lambda#117| :pattern ( (|lambda#117| arg0@@378 arg1@@256 arg2@@194 arg3@@165)) )))
(assert (forall ((|l#0@@103| T@U) (|l#1@@103| T@U) (|l#2@@103| T@U) (|l#3@@102| Bool) ($o@@125 T@U) ($f@@105 T@U) ) (! (let ((alpha@@112 (FieldTypeInv0 (type $f@@105)))) (=> (and (and (and (and (= (type |l#0@@103|) refType) (= (type |l#1@@103|) (MapType0Type refType MapType1Type))) (= (type |l#2@@103|) (FieldType boolType))) (= (type $o@@125) refType)) (= (type $f@@105) (FieldType alpha@@112))) (= (U_2_bool (MapType6Select (|lambda#117| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@102|) $o@@125 $f@@105))  (=> (and (not (= $o@@125 |l#0@@103|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@103| $o@@125) |l#2@@103|))) |l#3@@102|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1710| :pattern ( (MapType6Select (|lambda#117| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@102|) $o@@125 $f@@105)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@257 T@U) (arg2@@195 T@U) (arg3@@166 Bool) ) (! (= (type (|lambda#118| arg0@@379 arg1@@257 arg2@@195 arg3@@166)) (MapType6Type refType boolType)) :qid |funType:lambda#118| :pattern ( (|lambda#118| arg0@@379 arg1@@257 arg2@@195 arg3@@166)) )))
(assert (forall ((|l#0@@104| T@U) (|l#1@@104| T@U) (|l#2@@104| T@U) (|l#3@@103| Bool) ($o@@126 T@U) ($f@@106 T@U) ) (! (let ((alpha@@113 (FieldTypeInv0 (type $f@@106)))) (=> (and (and (and (and (= (type |l#0@@104|) refType) (= (type |l#1@@104|) (MapType0Type refType MapType1Type))) (= (type |l#2@@104|) (FieldType boolType))) (= (type $o@@126) refType)) (= (type $f@@106) (FieldType alpha@@113))) (= (U_2_bool (MapType6Select (|lambda#118| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@103|) $o@@126 $f@@106))  (=> (and (not (= $o@@126 |l#0@@104|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@104| $o@@126) |l#2@@104|))) |l#3@@103|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1711| :pattern ( (MapType6Select (|lambda#118| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@103|) $o@@126 $f@@106)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@258 T@U) (arg2@@196 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#119| arg0@@380 arg1@@258 arg2@@196 arg3@@167)) (MapType6Type refType boolType)) :qid |funType:lambda#119| :pattern ( (|lambda#119| arg0@@380 arg1@@258 arg2@@196 arg3@@167)) )))
(assert (forall ((|l#0@@105| T@U) (|l#1@@105| T@U) (|l#2@@105| T@U) (|l#3@@104| Bool) ($o@@127 T@U) ($f@@107 T@U) ) (! (let ((alpha@@114 (FieldTypeInv0 (type $f@@107)))) (=> (and (and (and (and (= (type |l#0@@105|) refType) (= (type |l#1@@105|) (MapType0Type refType MapType1Type))) (= (type |l#2@@105|) (FieldType boolType))) (= (type $o@@127) refType)) (= (type $f@@107) (FieldType alpha@@114))) (= (U_2_bool (MapType6Select (|lambda#119| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@104|) $o@@127 $f@@107))  (=> (and (not (= $o@@127 |l#0@@105|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@105| $o@@127) |l#2@@105|))) |l#3@@104|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1712| :pattern ( (MapType6Select (|lambda#119| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@104|) $o@@127 $f@@107)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@259 T@U) (arg2@@197 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#120| arg0@@381 arg1@@259 arg2@@197 arg3@@168)) (MapType6Type refType boolType)) :qid |funType:lambda#120| :pattern ( (|lambda#120| arg0@@381 arg1@@259 arg2@@197 arg3@@168)) )))
(assert (forall ((|l#0@@106| T@U) (|l#1@@106| T@U) (|l#2@@106| T@U) (|l#3@@105| Bool) ($o@@128 T@U) ($f@@108 T@U) ) (! (let ((alpha@@115 (FieldTypeInv0 (type $f@@108)))) (=> (and (and (and (and (= (type |l#0@@106|) refType) (= (type |l#1@@106|) (MapType0Type refType MapType1Type))) (= (type |l#2@@106|) (FieldType boolType))) (= (type $o@@128) refType)) (= (type $f@@108) (FieldType alpha@@115))) (= (U_2_bool (MapType6Select (|lambda#120| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@105|) $o@@128 $f@@108))  (=> (and (not (= $o@@128 |l#0@@106|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@106| $o@@128) |l#2@@106|))) |l#3@@105|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1713| :pattern ( (MapType6Select (|lambda#120| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@105|) $o@@128 $f@@108)) )))
(assert (forall ((arg0@@382 T@U) (arg1@@260 T@U) (arg2@@198 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#121| arg0@@382 arg1@@260 arg2@@198 arg3@@169)) (MapType6Type refType boolType)) :qid |funType:lambda#121| :pattern ( (|lambda#121| arg0@@382 arg1@@260 arg2@@198 arg3@@169)) )))
(assert (forall ((|l#0@@107| T@U) (|l#1@@107| T@U) (|l#2@@107| T@U) (|l#3@@106| Bool) ($o@@129 T@U) ($f@@109 T@U) ) (! (let ((alpha@@116 (FieldTypeInv0 (type $f@@109)))) (=> (and (and (and (and (= (type |l#0@@107|) refType) (= (type |l#1@@107|) (MapType0Type refType MapType1Type))) (= (type |l#2@@107|) (FieldType boolType))) (= (type $o@@129) refType)) (= (type $f@@109) (FieldType alpha@@116))) (= (U_2_bool (MapType6Select (|lambda#121| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@106|) $o@@129 $f@@109))  (=> (and (not (= $o@@129 |l#0@@107|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@107| $o@@129) |l#2@@107|))) |l#3@@106|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1714| :pattern ( (MapType6Select (|lambda#121| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@106|) $o@@129 $f@@109)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@261 T@U) (arg2@@199 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#122| arg0@@383 arg1@@261 arg2@@199 arg3@@170)) (MapType6Type refType boolType)) :qid |funType:lambda#122| :pattern ( (|lambda#122| arg0@@383 arg1@@261 arg2@@199 arg3@@170)) )))
(assert (forall ((|l#0@@108| T@U) (|l#1@@108| T@U) (|l#2@@108| T@U) (|l#3@@107| Bool) ($o@@130 T@U) ($f@@110 T@U) ) (! (let ((alpha@@117 (FieldTypeInv0 (type $f@@110)))) (=> (and (and (and (and (= (type |l#0@@108|) refType) (= (type |l#1@@108|) (MapType0Type refType MapType1Type))) (= (type |l#2@@108|) (FieldType boolType))) (= (type $o@@130) refType)) (= (type $f@@110) (FieldType alpha@@117))) (= (U_2_bool (MapType6Select (|lambda#122| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@107|) $o@@130 $f@@110))  (=> (and (not (= $o@@130 |l#0@@108|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@108| $o@@130) |l#2@@108|))) |l#3@@107|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1715| :pattern ( (MapType6Select (|lambda#122| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@107|) $o@@130 $f@@110)) )))
(assert (forall ((arg0@@384 T@U) (arg1@@262 T@U) (arg2@@200 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#123| arg0@@384 arg1@@262 arg2@@200 arg3@@171)) (MapType6Type refType boolType)) :qid |funType:lambda#123| :pattern ( (|lambda#123| arg0@@384 arg1@@262 arg2@@200 arg3@@171)) )))
(assert (forall ((|l#0@@109| T@U) (|l#1@@109| T@U) (|l#2@@109| T@U) (|l#3@@108| Bool) ($o@@131 T@U) ($f@@111 T@U) ) (! (let ((alpha@@118 (FieldTypeInv0 (type $f@@111)))) (=> (and (and (and (and (= (type |l#0@@109|) refType) (= (type |l#1@@109|) (MapType0Type refType MapType1Type))) (= (type |l#2@@109|) (FieldType boolType))) (= (type $o@@131) refType)) (= (type $f@@111) (FieldType alpha@@118))) (= (U_2_bool (MapType6Select (|lambda#123| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@108|) $o@@131 $f@@111))  (=> (and (not (= $o@@131 |l#0@@109|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@109| $o@@131) |l#2@@109|))) |l#3@@108|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1716| :pattern ( (MapType6Select (|lambda#123| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@108|) $o@@131 $f@@111)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@263 Int) (arg2@@201 Int) ) (! (= (type (|lambda#124| arg0@@385 arg1@@263 arg2@@201)) (MapType0Type BoxType boolType)) :qid |funType:lambda#124| :pattern ( (|lambda#124| arg0@@385 arg1@@263 arg2@@201)) )))
(assert (forall ((|l#0@@110| T@U) (|l#1@@110| Int) (|l#2@@110| Int) (|$y#1| T@U) ) (!  (=> (and (= (type |l#0@@110|) TyType) (= (type |$y#1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#124| |l#0@@110| |l#1@@110| |l#2@@110|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@110|) (and (<= |l#1@@110| (U_2_int ($Unbox intType |$y#1|))) (< (U_2_int ($Unbox intType |$y#1|)) |l#2@@110|))))) :qid |DafnyPreludebpl.22:1| :skolemid |1717| :pattern ( (MapType0Select (|lambda#124| |l#0@@110| |l#1@@110| |l#2@@110|) |$y#1|)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@264 T@U) (arg2@@202 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#126| arg0@@386 arg1@@264 arg2@@202 arg3@@172)) (MapType6Type refType boolType)) :qid |funType:lambda#126| :pattern ( (|lambda#126| arg0@@386 arg1@@264 arg2@@202 arg3@@172)) )))
(assert (forall ((|l#0@@111| T@U) (|l#1@@111| T@U) (|l#2@@111| T@U) (|l#3@@109| Bool) ($o@@132 T@U) ($f@@112 T@U) ) (! (let ((alpha@@119 (FieldTypeInv0 (type $f@@112)))) (=> (and (and (and (and (= (type |l#0@@111|) refType) (= (type |l#1@@111|) (MapType0Type refType MapType1Type))) (= (type |l#2@@111|) (FieldType boolType))) (= (type $o@@132) refType)) (= (type $f@@112) (FieldType alpha@@119))) (= (U_2_bool (MapType6Select (|lambda#126| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@109|) $o@@132 $f@@112))  (=> (and (not (= $o@@132 |l#0@@111|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@111| $o@@132) |l#2@@111|))) |l#3@@109|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1718| :pattern ( (MapType6Select (|lambda#126| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@109|) $o@@132 $f@@112)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@265 T@U) (arg2@@203 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#128| arg0@@387 arg1@@265 arg2@@203 arg3@@173)) (MapType6Type refType boolType)) :qid |funType:lambda#128| :pattern ( (|lambda#128| arg0@@387 arg1@@265 arg2@@203 arg3@@173)) )))
(assert (forall ((|l#0@@112| T@U) (|l#1@@112| T@U) (|l#2@@112| T@U) (|l#3@@110| Bool) ($o@@133 T@U) ($f@@113 T@U) ) (! (let ((alpha@@120 (FieldTypeInv0 (type $f@@113)))) (=> (and (and (and (and (= (type |l#0@@112|) refType) (= (type |l#1@@112|) (MapType0Type refType MapType1Type))) (= (type |l#2@@112|) (FieldType boolType))) (= (type $o@@133) refType)) (= (type $f@@113) (FieldType alpha@@120))) (= (U_2_bool (MapType6Select (|lambda#128| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@110|) $o@@133 $f@@113))  (=> (and (not (= $o@@133 |l#0@@112|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@112| $o@@133) |l#2@@112|))) |l#3@@110|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1719| :pattern ( (MapType6Select (|lambda#128| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@110|) $o@@133 $f@@113)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@266 T@U) (arg2@@204 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#129| arg0@@388 arg1@@266 arg2@@204 arg3@@174)) (MapType6Type refType boolType)) :qid |funType:lambda#129| :pattern ( (|lambda#129| arg0@@388 arg1@@266 arg2@@204 arg3@@174)) )))
(assert (forall ((|l#0@@113| T@U) (|l#1@@113| T@U) (|l#2@@113| T@U) (|l#3@@111| Bool) ($o@@134 T@U) ($f@@114 T@U) ) (! (let ((alpha@@121 (FieldTypeInv0 (type $f@@114)))) (=> (and (and (and (and (= (type |l#0@@113|) refType) (= (type |l#1@@113|) (MapType0Type refType MapType1Type))) (= (type |l#2@@113|) (FieldType boolType))) (= (type $o@@134) refType)) (= (type $f@@114) (FieldType alpha@@121))) (= (U_2_bool (MapType6Select (|lambda#129| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@111|) $o@@134 $f@@114))  (=> (and (not (= $o@@134 |l#0@@113|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@113| $o@@134) |l#2@@113|))) |l#3@@111|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1720| :pattern ( (MapType6Select (|lambda#129| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@111|) $o@@134 $f@@114)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@267 T@U) (arg2@@205 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#130| arg0@@389 arg1@@267 arg2@@205 arg3@@175)) (MapType6Type refType boolType)) :qid |funType:lambda#130| :pattern ( (|lambda#130| arg0@@389 arg1@@267 arg2@@205 arg3@@175)) )))
(assert (forall ((|l#0@@114| T@U) (|l#1@@114| T@U) (|l#2@@114| T@U) (|l#3@@112| Bool) ($o@@135 T@U) ($f@@115 T@U) ) (! (let ((alpha@@122 (FieldTypeInv0 (type $f@@115)))) (=> (and (and (and (and (= (type |l#0@@114|) refType) (= (type |l#1@@114|) (MapType0Type refType MapType1Type))) (= (type |l#2@@114|) (FieldType boolType))) (= (type $o@@135) refType)) (= (type $f@@115) (FieldType alpha@@122))) (= (U_2_bool (MapType6Select (|lambda#130| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@112|) $o@@135 $f@@115))  (=> (and (not (= $o@@135 |l#0@@114|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@114| $o@@135) |l#2@@114|))) |l#3@@112|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1721| :pattern ( (MapType6Select (|lambda#130| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@112|) $o@@135 $f@@115)) )))
(assert (forall ((arg0@@390 T@U) (arg1@@268 T@U) (arg2@@206 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#131| arg0@@390 arg1@@268 arg2@@206 arg3@@176)) (MapType6Type refType boolType)) :qid |funType:lambda#131| :pattern ( (|lambda#131| arg0@@390 arg1@@268 arg2@@206 arg3@@176)) )))
(assert (forall ((|l#0@@115| T@U) (|l#1@@115| T@U) (|l#2@@115| T@U) (|l#3@@113| Bool) ($o@@136 T@U) ($f@@116 T@U) ) (! (let ((alpha@@123 (FieldTypeInv0 (type $f@@116)))) (=> (and (and (and (and (= (type |l#0@@115|) refType) (= (type |l#1@@115|) (MapType0Type refType MapType1Type))) (= (type |l#2@@115|) (FieldType boolType))) (= (type $o@@136) refType)) (= (type $f@@116) (FieldType alpha@@123))) (= (U_2_bool (MapType6Select (|lambda#131| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@113|) $o@@136 $f@@116))  (=> (and (not (= $o@@136 |l#0@@115|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@115| $o@@136) |l#2@@115|))) |l#3@@113|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1722| :pattern ( (MapType6Select (|lambda#131| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@113|) $o@@136 $f@@116)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@269 T@U) (arg2@@207 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#132| arg0@@391 arg1@@269 arg2@@207 arg3@@177)) (MapType6Type refType boolType)) :qid |funType:lambda#132| :pattern ( (|lambda#132| arg0@@391 arg1@@269 arg2@@207 arg3@@177)) )))
(assert (forall ((|l#0@@116| T@U) (|l#1@@116| T@U) (|l#2@@116| T@U) (|l#3@@114| Bool) ($o@@137 T@U) ($f@@117 T@U) ) (! (let ((alpha@@124 (FieldTypeInv0 (type $f@@117)))) (=> (and (and (and (and (= (type |l#0@@116|) refType) (= (type |l#1@@116|) (MapType0Type refType MapType1Type))) (= (type |l#2@@116|) (FieldType boolType))) (= (type $o@@137) refType)) (= (type $f@@117) (FieldType alpha@@124))) (= (U_2_bool (MapType6Select (|lambda#132| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@114|) $o@@137 $f@@117))  (=> (and (not (= $o@@137 |l#0@@116|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@116| $o@@137) |l#2@@116|))) |l#3@@114|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1723| :pattern ( (MapType6Select (|lambda#132| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@114|) $o@@137 $f@@117)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@270 T@U) (arg2@@208 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#133| arg0@@392 arg1@@270 arg2@@208 arg3@@178)) (MapType6Type refType boolType)) :qid |funType:lambda#133| :pattern ( (|lambda#133| arg0@@392 arg1@@270 arg2@@208 arg3@@178)) )))
(assert (forall ((|l#0@@117| T@U) (|l#1@@117| T@U) (|l#2@@117| T@U) (|l#3@@115| Bool) ($o@@138 T@U) ($f@@118 T@U) ) (! (let ((alpha@@125 (FieldTypeInv0 (type $f@@118)))) (=> (and (and (and (and (= (type |l#0@@117|) refType) (= (type |l#1@@117|) (MapType0Type refType MapType1Type))) (= (type |l#2@@117|) (FieldType boolType))) (= (type $o@@138) refType)) (= (type $f@@118) (FieldType alpha@@125))) (= (U_2_bool (MapType6Select (|lambda#133| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@115|) $o@@138 $f@@118))  (=> (and (not (= $o@@138 |l#0@@117|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@117| $o@@138) |l#2@@117|))) |l#3@@115|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1724| :pattern ( (MapType6Select (|lambda#133| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@115|) $o@@138 $f@@118)) )))
(assert (forall ((arg0@@393 Int) ) (! (= (type (|lambda#134| arg0@@393)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#134| :pattern ( (|lambda#134| arg0@@393)) )))
(assert (forall ((|l#0@@118| Int) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type)) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#134| |l#0@@118|) |$l#0#heap#0| |$l#0#i#0|) ($Box (int_2_U (+ (U_2_int ($Unbox intType |$l#0#i#0|)) |l#0@@118|))))) :qid |Sequencesidfy.632:32| :skolemid |1725| :pattern ( (MapType2Select (|lambda#134| |l#0@@118|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@271 Int) (arg2@@209 Int) ) (! (= (type (|lambda#135| arg0@@394 arg1@@271 arg2@@209)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#135| :pattern ( (|lambda#135| arg0@@394 arg1@@271 arg2@@209)) )))
(assert (forall ((|l#0@@119| T@U) (|l#1@@118| Int) (|l#2@@118| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@119|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#135| |l#0@@119| |l#1@@118| |l#2@@118|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@119|) (and (<= |l#1@@118| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@118|))))) :qid |DafnyPreludebpl.22:1| :skolemid |1726| :pattern ( (MapType2Select (|lambda#135| |l#0@@119| |l#1@@118| |l#2@@118|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((arg0@@395 Bool) ) (! (= (type (|lambda#136| arg0@@395)) (MapType0Type refType boolType)) :qid |funType:lambda#136| :pattern ( (|lambda#136| arg0@@395)) )))
(assert (forall ((|l#0@@120| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#136| |l#0@@120|) |$l#0#o#0|)) |l#0@@120|)) :qid |unknown.0:0| :skolemid |1727| :pattern ( (MapType0Select (|lambda#136| |l#0@@120|) |$l#0#o#0|)) )))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (|lambda#137| arg0@@396)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#137| :pattern ( (|lambda#137| arg0@@396)) )))
(assert (forall ((|l#0@@121| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@121|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#137| |l#0@@121|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@121|)) :qid |Sequencesidfy.637:51| :skolemid |1728| :pattern ( (MapType2Select (|lambda#137| |l#0@@121|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (|lambda#138| arg0@@397)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#138| :pattern ( (|lambda#138| arg0@@397)) )))
(assert (forall ((|l#0@@122| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@122|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#138| |l#0@@122|) |$l#0#ly#0|) |l#0@@122|)) :qid |Sequencesidfy.637:51| :skolemid |1729| :pattern ( (MapType0Select (|lambda#138| |l#0@@122|) |$l#0#ly#0|)) )))
(assert (forall ((arg0@@398 T@U) (arg1@@272 T@U) (arg2@@210 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#144| arg0@@398 arg1@@272 arg2@@210 arg3@@179)) (MapType6Type refType boolType)) :qid |funType:lambda#144| :pattern ( (|lambda#144| arg0@@398 arg1@@272 arg2@@210 arg3@@179)) )))
(assert (forall ((|l#0@@123| T@U) (|l#1@@119| T@U) (|l#2@@119| T@U) (|l#3@@116| Bool) ($o@@139 T@U) ($f@@119 T@U) ) (! (let ((alpha@@126 (FieldTypeInv0 (type $f@@119)))) (=> (and (and (and (and (= (type |l#0@@123|) refType) (= (type |l#1@@119|) (MapType0Type refType MapType1Type))) (= (type |l#2@@119|) (FieldType boolType))) (= (type $o@@139) refType)) (= (type $f@@119) (FieldType alpha@@126))) (= (U_2_bool (MapType6Select (|lambda#144| |l#0@@123| |l#1@@119| |l#2@@119| |l#3@@116|) $o@@139 $f@@119))  (=> (and (not (= $o@@139 |l#0@@123|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@119| $o@@139) |l#2@@119|))) |l#3@@116|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1730| :pattern ( (MapType6Select (|lambda#144| |l#0@@123| |l#1@@119| |l#2@@119| |l#3@@116|) $o@@139 $f@@119)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@273 T@U) (arg2@@211 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#145| arg0@@399 arg1@@273 arg2@@211 arg3@@180)) (MapType6Type refType boolType)) :qid |funType:lambda#145| :pattern ( (|lambda#145| arg0@@399 arg1@@273 arg2@@211 arg3@@180)) )))
(assert (forall ((|l#0@@124| T@U) (|l#1@@120| T@U) (|l#2@@120| T@U) (|l#3@@117| Bool) ($o@@140 T@U) ($f@@120 T@U) ) (! (let ((alpha@@127 (FieldTypeInv0 (type $f@@120)))) (=> (and (and (and (and (= (type |l#0@@124|) refType) (= (type |l#1@@120|) (MapType0Type refType MapType1Type))) (= (type |l#2@@120|) (FieldType boolType))) (= (type $o@@140) refType)) (= (type $f@@120) (FieldType alpha@@127))) (= (U_2_bool (MapType6Select (|lambda#145| |l#0@@124| |l#1@@120| |l#2@@120| |l#3@@117|) $o@@140 $f@@120))  (=> (and (not (= $o@@140 |l#0@@124|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@120| $o@@140) |l#2@@120|))) |l#3@@117|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1731| :pattern ( (MapType6Select (|lambda#145| |l#0@@124| |l#1@@120| |l#2@@120| |l#3@@117|) $o@@140 $f@@120)) )))
(assert (forall ((arg0@@400 T@U) (arg1@@274 T@U) (arg2@@212 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#146| arg0@@400 arg1@@274 arg2@@212 arg3@@181)) (MapType6Type refType boolType)) :qid |funType:lambda#146| :pattern ( (|lambda#146| arg0@@400 arg1@@274 arg2@@212 arg3@@181)) )))
(assert (forall ((|l#0@@125| T@U) (|l#1@@121| T@U) (|l#2@@121| T@U) (|l#3@@118| Bool) ($o@@141 T@U) ($f@@121 T@U) ) (! (let ((alpha@@128 (FieldTypeInv0 (type $f@@121)))) (=> (and (and (and (and (= (type |l#0@@125|) refType) (= (type |l#1@@121|) (MapType0Type refType MapType1Type))) (= (type |l#2@@121|) (FieldType boolType))) (= (type $o@@141) refType)) (= (type $f@@121) (FieldType alpha@@128))) (= (U_2_bool (MapType6Select (|lambda#146| |l#0@@125| |l#1@@121| |l#2@@121| |l#3@@118|) $o@@141 $f@@121))  (=> (and (not (= $o@@141 |l#0@@125|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@121| $o@@141) |l#2@@121|))) |l#3@@118|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1732| :pattern ( (MapType6Select (|lambda#146| |l#0@@125| |l#1@@121| |l#2@@121| |l#3@@118|) $o@@141 $f@@121)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@275 T@U) (arg2@@213 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#147| arg0@@401 arg1@@275 arg2@@213 arg3@@182)) (MapType6Type refType boolType)) :qid |funType:lambda#147| :pattern ( (|lambda#147| arg0@@401 arg1@@275 arg2@@213 arg3@@182)) )))
(assert (forall ((|l#0@@126| T@U) (|l#1@@122| T@U) (|l#2@@122| T@U) (|l#3@@119| Bool) ($o@@142 T@U) ($f@@122 T@U) ) (! (let ((alpha@@129 (FieldTypeInv0 (type $f@@122)))) (=> (and (and (and (and (= (type |l#0@@126|) refType) (= (type |l#1@@122|) (MapType0Type refType MapType1Type))) (= (type |l#2@@122|) (FieldType boolType))) (= (type $o@@142) refType)) (= (type $f@@122) (FieldType alpha@@129))) (= (U_2_bool (MapType6Select (|lambda#147| |l#0@@126| |l#1@@122| |l#2@@122| |l#3@@119|) $o@@142 $f@@122))  (=> (and (not (= $o@@142 |l#0@@126|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@122| $o@@142) |l#2@@122|))) |l#3@@119|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1733| :pattern ( (MapType6Select (|lambda#147| |l#0@@126| |l#1@@122| |l#2@@122| |l#3@@119|) $o@@142 $f@@122)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@276 T@U) (arg2@@214 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#148| arg0@@402 arg1@@276 arg2@@214 arg3@@183)) (MapType6Type refType boolType)) :qid |funType:lambda#148| :pattern ( (|lambda#148| arg0@@402 arg1@@276 arg2@@214 arg3@@183)) )))
(assert (forall ((|l#0@@127| T@U) (|l#1@@123| T@U) (|l#2@@123| T@U) (|l#3@@120| Bool) ($o@@143 T@U) ($f@@123 T@U) ) (! (let ((alpha@@130 (FieldTypeInv0 (type $f@@123)))) (=> (and (and (and (and (= (type |l#0@@127|) refType) (= (type |l#1@@123|) (MapType0Type refType MapType1Type))) (= (type |l#2@@123|) (FieldType boolType))) (= (type $o@@143) refType)) (= (type $f@@123) (FieldType alpha@@130))) (= (U_2_bool (MapType6Select (|lambda#148| |l#0@@127| |l#1@@123| |l#2@@123| |l#3@@120|) $o@@143 $f@@123))  (=> (and (not (= $o@@143 |l#0@@127|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@123| $o@@143) |l#2@@123|))) |l#3@@120|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1734| :pattern ( (MapType6Select (|lambda#148| |l#0@@127| |l#1@@123| |l#2@@123| |l#3@@120|) $o@@143 $f@@123)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@277 T@U) (arg2@@215 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#149| arg0@@403 arg1@@277 arg2@@215 arg3@@184)) (MapType6Type refType boolType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@403 arg1@@277 arg2@@215 arg3@@184)) )))
(assert (forall ((|l#0@@128| T@U) (|l#1@@124| T@U) (|l#2@@124| T@U) (|l#3@@121| Bool) ($o@@144 T@U) ($f@@124 T@U) ) (! (let ((alpha@@131 (FieldTypeInv0 (type $f@@124)))) (=> (and (and (and (and (= (type |l#0@@128|) refType) (= (type |l#1@@124|) (MapType0Type refType MapType1Type))) (= (type |l#2@@124|) (FieldType boolType))) (= (type $o@@144) refType)) (= (type $f@@124) (FieldType alpha@@131))) (= (U_2_bool (MapType6Select (|lambda#149| |l#0@@128| |l#1@@124| |l#2@@124| |l#3@@121|) $o@@144 $f@@124))  (=> (and (not (= $o@@144 |l#0@@128|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@124| $o@@144) |l#2@@124|))) |l#3@@121|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1735| :pattern ( (MapType6Select (|lambda#149| |l#0@@128| |l#1@@124| |l#2@@124| |l#3@@121|) $o@@144 $f@@124)) )))
(assert (forall ((arg0@@404 T@U) (arg1@@278 T@U) (arg2@@216 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#150| arg0@@404 arg1@@278 arg2@@216 arg3@@185)) (MapType6Type refType boolType)) :qid |funType:lambda#150| :pattern ( (|lambda#150| arg0@@404 arg1@@278 arg2@@216 arg3@@185)) )))
(assert (forall ((|l#0@@129| T@U) (|l#1@@125| T@U) (|l#2@@125| T@U) (|l#3@@122| Bool) ($o@@145 T@U) ($f@@125 T@U) ) (! (let ((alpha@@132 (FieldTypeInv0 (type $f@@125)))) (=> (and (and (and (and (= (type |l#0@@129|) refType) (= (type |l#1@@125|) (MapType0Type refType MapType1Type))) (= (type |l#2@@125|) (FieldType boolType))) (= (type $o@@145) refType)) (= (type $f@@125) (FieldType alpha@@132))) (= (U_2_bool (MapType6Select (|lambda#150| |l#0@@129| |l#1@@125| |l#2@@125| |l#3@@122|) $o@@145 $f@@125))  (=> (and (not (= $o@@145 |l#0@@129|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@125| $o@@145) |l#2@@125|))) |l#3@@122|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1736| :pattern ( (MapType6Select (|lambda#150| |l#0@@129| |l#1@@125| |l#2@@125| |l#3@@122|) $o@@145 $f@@125)) )))
(assert (forall ((arg0@@405 T@U) (arg1@@279 T@U) (arg2@@217 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#151| arg0@@405 arg1@@279 arg2@@217 arg3@@186)) (MapType6Type refType boolType)) :qid |funType:lambda#151| :pattern ( (|lambda#151| arg0@@405 arg1@@279 arg2@@217 arg3@@186)) )))
(assert (forall ((|l#0@@130| T@U) (|l#1@@126| T@U) (|l#2@@126| T@U) (|l#3@@123| Bool) ($o@@146 T@U) ($f@@126 T@U) ) (! (let ((alpha@@133 (FieldTypeInv0 (type $f@@126)))) (=> (and (and (and (and (= (type |l#0@@130|) refType) (= (type |l#1@@126|) (MapType0Type refType MapType1Type))) (= (type |l#2@@126|) (FieldType boolType))) (= (type $o@@146) refType)) (= (type $f@@126) (FieldType alpha@@133))) (= (U_2_bool (MapType6Select (|lambda#151| |l#0@@130| |l#1@@126| |l#2@@126| |l#3@@123|) $o@@146 $f@@126))  (=> (and (not (= $o@@146 |l#0@@130|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@126| $o@@146) |l#2@@126|))) |l#3@@123|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1737| :pattern ( (MapType6Select (|lambda#151| |l#0@@130| |l#1@@126| |l#2@@126| |l#3@@123|) $o@@146 $f@@126)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@280 T@U) (arg2@@218 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#152| arg0@@406 arg1@@280 arg2@@218 arg3@@187)) (MapType6Type refType boolType)) :qid |funType:lambda#152| :pattern ( (|lambda#152| arg0@@406 arg1@@280 arg2@@218 arg3@@187)) )))
(assert (forall ((|l#0@@131| T@U) (|l#1@@127| T@U) (|l#2@@127| T@U) (|l#3@@124| Bool) ($o@@147 T@U) ($f@@127 T@U) ) (! (let ((alpha@@134 (FieldTypeInv0 (type $f@@127)))) (=> (and (and (and (and (= (type |l#0@@131|) refType) (= (type |l#1@@127|) (MapType0Type refType MapType1Type))) (= (type |l#2@@127|) (FieldType boolType))) (= (type $o@@147) refType)) (= (type $f@@127) (FieldType alpha@@134))) (= (U_2_bool (MapType6Select (|lambda#152| |l#0@@131| |l#1@@127| |l#2@@127| |l#3@@124|) $o@@147 $f@@127))  (=> (and (not (= $o@@147 |l#0@@131|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@127| $o@@147) |l#2@@127|))) |l#3@@124|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1738| :pattern ( (MapType6Select (|lambda#152| |l#0@@131| |l#1@@127| |l#2@@127| |l#3@@124|) $o@@147 $f@@127)) )))
(assert (forall ((arg0@@407 T@U) (arg1@@281 T@U) (arg2@@219 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#153| arg0@@407 arg1@@281 arg2@@219 arg3@@188)) (MapType6Type refType boolType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@407 arg1@@281 arg2@@219 arg3@@188)) )))
(assert (forall ((|l#0@@132| T@U) (|l#1@@128| T@U) (|l#2@@128| T@U) (|l#3@@125| Bool) ($o@@148 T@U) ($f@@128 T@U) ) (! (let ((alpha@@135 (FieldTypeInv0 (type $f@@128)))) (=> (and (and (and (and (= (type |l#0@@132|) refType) (= (type |l#1@@128|) (MapType0Type refType MapType1Type))) (= (type |l#2@@128|) (FieldType boolType))) (= (type $o@@148) refType)) (= (type $f@@128) (FieldType alpha@@135))) (= (U_2_bool (MapType6Select (|lambda#153| |l#0@@132| |l#1@@128| |l#2@@128| |l#3@@125|) $o@@148 $f@@128))  (=> (and (not (= $o@@148 |l#0@@132|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@128| $o@@148) |l#2@@128|))) |l#3@@125|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1739| :pattern ( (MapType6Select (|lambda#153| |l#0@@132| |l#1@@128| |l#2@@128| |l#3@@125|) $o@@148 $f@@128)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@282 T@U) (arg2@@220 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#154| arg0@@408 arg1@@282 arg2@@220 arg3@@189)) (MapType6Type refType boolType)) :qid |funType:lambda#154| :pattern ( (|lambda#154| arg0@@408 arg1@@282 arg2@@220 arg3@@189)) )))
(assert (forall ((|l#0@@133| T@U) (|l#1@@129| T@U) (|l#2@@129| T@U) (|l#3@@126| Bool) ($o@@149 T@U) ($f@@129 T@U) ) (! (let ((alpha@@136 (FieldTypeInv0 (type $f@@129)))) (=> (and (and (and (and (= (type |l#0@@133|) refType) (= (type |l#1@@129|) (MapType0Type refType MapType1Type))) (= (type |l#2@@129|) (FieldType boolType))) (= (type $o@@149) refType)) (= (type $f@@129) (FieldType alpha@@136))) (= (U_2_bool (MapType6Select (|lambda#154| |l#0@@133| |l#1@@129| |l#2@@129| |l#3@@126|) $o@@149 $f@@129))  (=> (and (not (= $o@@149 |l#0@@133|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@129| $o@@149) |l#2@@129|))) |l#3@@126|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1740| :pattern ( (MapType6Select (|lambda#154| |l#0@@133| |l#1@@129| |l#2@@129| |l#3@@126|) $o@@149 $f@@129)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@283 T@U) (arg2@@221 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#155| arg0@@409 arg1@@283 arg2@@221 arg3@@190)) (MapType6Type refType boolType)) :qid |funType:lambda#155| :pattern ( (|lambda#155| arg0@@409 arg1@@283 arg2@@221 arg3@@190)) )))
(assert (forall ((|l#0@@134| T@U) (|l#1@@130| T@U) (|l#2@@130| T@U) (|l#3@@127| Bool) ($o@@150 T@U) ($f@@130 T@U) ) (! (let ((alpha@@137 (FieldTypeInv0 (type $f@@130)))) (=> (and (and (and (and (= (type |l#0@@134|) refType) (= (type |l#1@@130|) (MapType0Type refType MapType1Type))) (= (type |l#2@@130|) (FieldType boolType))) (= (type $o@@150) refType)) (= (type $f@@130) (FieldType alpha@@137))) (= (U_2_bool (MapType6Select (|lambda#155| |l#0@@134| |l#1@@130| |l#2@@130| |l#3@@127|) $o@@150 $f@@130))  (=> (and (not (= $o@@150 |l#0@@134|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@130| $o@@150) |l#2@@130|))) |l#3@@127|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1741| :pattern ( (MapType6Select (|lambda#155| |l#0@@134| |l#1@@130| |l#2@@130| |l#3@@127|) $o@@150 $f@@130)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@284 T@U) (arg2@@222 T@U) (arg3@@191 Bool) ) (! (= (type (|lambda#156| arg0@@410 arg1@@284 arg2@@222 arg3@@191)) (MapType6Type refType boolType)) :qid |funType:lambda#156| :pattern ( (|lambda#156| arg0@@410 arg1@@284 arg2@@222 arg3@@191)) )))
(assert (forall ((|l#0@@135| T@U) (|l#1@@131| T@U) (|l#2@@131| T@U) (|l#3@@128| Bool) ($o@@151 T@U) ($f@@131 T@U) ) (! (let ((alpha@@138 (FieldTypeInv0 (type $f@@131)))) (=> (and (and (and (and (= (type |l#0@@135|) refType) (= (type |l#1@@131|) (MapType0Type refType MapType1Type))) (= (type |l#2@@131|) (FieldType boolType))) (= (type $o@@151) refType)) (= (type $f@@131) (FieldType alpha@@138))) (= (U_2_bool (MapType6Select (|lambda#156| |l#0@@135| |l#1@@131| |l#2@@131| |l#3@@128|) $o@@151 $f@@131))  (=> (and (not (= $o@@151 |l#0@@135|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@131| $o@@151) |l#2@@131|))) |l#3@@128|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1742| :pattern ( (MapType6Select (|lambda#156| |l#0@@135| |l#1@@131| |l#2@@131| |l#3@@128|) $o@@151 $f@@131)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@285 T@U) (arg2@@223 T@U) (arg3@@192 Bool) ) (! (= (type (|lambda#157| arg0@@411 arg1@@285 arg2@@223 arg3@@192)) (MapType6Type refType boolType)) :qid |funType:lambda#157| :pattern ( (|lambda#157| arg0@@411 arg1@@285 arg2@@223 arg3@@192)) )))
(assert (forall ((|l#0@@136| T@U) (|l#1@@132| T@U) (|l#2@@132| T@U) (|l#3@@129| Bool) ($o@@152 T@U) ($f@@132 T@U) ) (! (let ((alpha@@139 (FieldTypeInv0 (type $f@@132)))) (=> (and (and (and (and (= (type |l#0@@136|) refType) (= (type |l#1@@132|) (MapType0Type refType MapType1Type))) (= (type |l#2@@132|) (FieldType boolType))) (= (type $o@@152) refType)) (= (type $f@@132) (FieldType alpha@@139))) (= (U_2_bool (MapType6Select (|lambda#157| |l#0@@136| |l#1@@132| |l#2@@132| |l#3@@129|) $o@@152 $f@@132))  (=> (and (not (= $o@@152 |l#0@@136|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@132| $o@@152) |l#2@@132|))) |l#3@@129|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1743| :pattern ( (MapType6Select (|lambda#157| |l#0@@136| |l#1@@132| |l#2@@132| |l#3@@129|) $o@@152 $f@@132)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@286 T@U) (arg2@@224 T@U) (arg3@@193 Bool) ) (! (= (type (|lambda#158| arg0@@412 arg1@@286 arg2@@224 arg3@@193)) (MapType6Type refType boolType)) :qid |funType:lambda#158| :pattern ( (|lambda#158| arg0@@412 arg1@@286 arg2@@224 arg3@@193)) )))
(assert (forall ((|l#0@@137| T@U) (|l#1@@133| T@U) (|l#2@@133| T@U) (|l#3@@130| Bool) ($o@@153 T@U) ($f@@133 T@U) ) (! (let ((alpha@@140 (FieldTypeInv0 (type $f@@133)))) (=> (and (and (and (and (= (type |l#0@@137|) refType) (= (type |l#1@@133|) (MapType0Type refType MapType1Type))) (= (type |l#2@@133|) (FieldType boolType))) (= (type $o@@153) refType)) (= (type $f@@133) (FieldType alpha@@140))) (= (U_2_bool (MapType6Select (|lambda#158| |l#0@@137| |l#1@@133| |l#2@@133| |l#3@@130|) $o@@153 $f@@133))  (=> (and (not (= $o@@153 |l#0@@137|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@133| $o@@153) |l#2@@133|))) |l#3@@130|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1744| :pattern ( (MapType6Select (|lambda#158| |l#0@@137| |l#1@@133| |l#2@@133| |l#3@@130|) $o@@153 $f@@133)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@287 T@U) (arg2@@225 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#159| arg0@@413 arg1@@287 arg2@@225 arg3@@194)) (MapType6Type refType boolType)) :qid |funType:lambda#159| :pattern ( (|lambda#159| arg0@@413 arg1@@287 arg2@@225 arg3@@194)) )))
(assert (forall ((|l#0@@138| T@U) (|l#1@@134| T@U) (|l#2@@134| T@U) (|l#3@@131| Bool) ($o@@154 T@U) ($f@@134 T@U) ) (! (let ((alpha@@141 (FieldTypeInv0 (type $f@@134)))) (=> (and (and (and (and (= (type |l#0@@138|) refType) (= (type |l#1@@134|) (MapType0Type refType MapType1Type))) (= (type |l#2@@134|) (FieldType boolType))) (= (type $o@@154) refType)) (= (type $f@@134) (FieldType alpha@@141))) (= (U_2_bool (MapType6Select (|lambda#159| |l#0@@138| |l#1@@134| |l#2@@134| |l#3@@131|) $o@@154 $f@@134))  (=> (and (not (= $o@@154 |l#0@@138|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@134| $o@@154) |l#2@@134|))) |l#3@@131|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1745| :pattern ( (MapType6Select (|lambda#159| |l#0@@138| |l#1@@134| |l#2@@134| |l#3@@131|) $o@@154 $f@@134)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@288 T@U) (arg2@@226 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#160| arg0@@414 arg1@@288 arg2@@226 arg3@@195)) (MapType6Type refType boolType)) :qid |funType:lambda#160| :pattern ( (|lambda#160| arg0@@414 arg1@@288 arg2@@226 arg3@@195)) )))
(assert (forall ((|l#0@@139| T@U) (|l#1@@135| T@U) (|l#2@@135| T@U) (|l#3@@132| Bool) ($o@@155 T@U) ($f@@135 T@U) ) (! (let ((alpha@@142 (FieldTypeInv0 (type $f@@135)))) (=> (and (and (and (and (= (type |l#0@@139|) refType) (= (type |l#1@@135|) (MapType0Type refType MapType1Type))) (= (type |l#2@@135|) (FieldType boolType))) (= (type $o@@155) refType)) (= (type $f@@135) (FieldType alpha@@142))) (= (U_2_bool (MapType6Select (|lambda#160| |l#0@@139| |l#1@@135| |l#2@@135| |l#3@@132|) $o@@155 $f@@135))  (=> (and (not (= $o@@155 |l#0@@139|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@135| $o@@155) |l#2@@135|))) |l#3@@132|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1746| :pattern ( (MapType6Select (|lambda#160| |l#0@@139| |l#1@@135| |l#2@@135| |l#3@@132|) $o@@155 $f@@135)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@289 T@U) (arg2@@227 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#161| arg0@@415 arg1@@289 arg2@@227 arg3@@196)) (MapType6Type refType boolType)) :qid |funType:lambda#161| :pattern ( (|lambda#161| arg0@@415 arg1@@289 arg2@@227 arg3@@196)) )))
(assert (forall ((|l#0@@140| T@U) (|l#1@@136| T@U) (|l#2@@136| T@U) (|l#3@@133| Bool) ($o@@156 T@U) ($f@@136 T@U) ) (! (let ((alpha@@143 (FieldTypeInv0 (type $f@@136)))) (=> (and (and (and (and (= (type |l#0@@140|) refType) (= (type |l#1@@136|) (MapType0Type refType MapType1Type))) (= (type |l#2@@136|) (FieldType boolType))) (= (type $o@@156) refType)) (= (type $f@@136) (FieldType alpha@@143))) (= (U_2_bool (MapType6Select (|lambda#161| |l#0@@140| |l#1@@136| |l#2@@136| |l#3@@133|) $o@@156 $f@@136))  (=> (and (not (= $o@@156 |l#0@@140|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@136| $o@@156) |l#2@@136|))) |l#3@@133|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1747| :pattern ( (MapType6Select (|lambda#161| |l#0@@140| |l#1@@136| |l#2@@136| |l#3@@133|) $o@@156 $f@@136)) )))
(assert (forall ((arg0@@416 T@U) (arg1@@290 T@U) (arg2@@228 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#162| arg0@@416 arg1@@290 arg2@@228 arg3@@197)) (MapType6Type refType boolType)) :qid |funType:lambda#162| :pattern ( (|lambda#162| arg0@@416 arg1@@290 arg2@@228 arg3@@197)) )))
(assert (forall ((|l#0@@141| T@U) (|l#1@@137| T@U) (|l#2@@137| T@U) (|l#3@@134| Bool) ($o@@157 T@U) ($f@@137 T@U) ) (! (let ((alpha@@144 (FieldTypeInv0 (type $f@@137)))) (=> (and (and (and (and (= (type |l#0@@141|) refType) (= (type |l#1@@137|) (MapType0Type refType MapType1Type))) (= (type |l#2@@137|) (FieldType boolType))) (= (type $o@@157) refType)) (= (type $f@@137) (FieldType alpha@@144))) (= (U_2_bool (MapType6Select (|lambda#162| |l#0@@141| |l#1@@137| |l#2@@137| |l#3@@134|) $o@@157 $f@@137))  (=> (and (not (= $o@@157 |l#0@@141|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@137| $o@@157) |l#2@@137|))) |l#3@@134|)))) :qid |DafnyPreludebpl.129:1| :skolemid |1748| :pattern ( (MapType6Select (|lambda#162| |l#0@@141| |l#1@@137| |l#2@@137| |l#3@@134|) $o@@157 $f@@137)) )))
(assert (forall ((|l#0@@142| T@U) (|l#1@@138| T@U) (|$y#0@@2| T@U) ) (!  (=> (and (and (= (type |l#0@@142|) TyType) (= (type |l#1@@138|) (MapType0Type BoxType boolType))) (= (type |$y#0@@2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#165| |l#0@@142| |l#1@@138|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@142|) (U_2_bool (MapType0Select |l#1@@138| |$y#0@@2|))))) :qid |unknown.0:0| :skolemid |1749| :pattern ( (MapType0Select (|lambda#165| |l#0@@142| |l#1@@138|) |$y#0@@2|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |shape#0@@15| () T@U)
(declare-fun |i#0@@72| () Int)
(declare-fun |j#0@@5| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |shape##1@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun $Heap@@40 () T@U)
(declare-fun $Heap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |shape#0@@15|) (SeqType BoxType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |shape##1@0|) (SeqType BoxType))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))))
(push 1)
(set-info :boogie-vc-id Impl$$Sequences.__default.UnflattenFlattenIdentity)
(assert (not (=> (= (ControlFlow 0 0) 355464) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 355427) (- 0 356718)) (< (Sequences.__default.FlattenIndex |shape#0@@15| |i#0@@72| |j#0@@5|) (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape#0@@15|))) (=> (< (Sequences.__default.FlattenIndex |shape#0@@15| |i#0@@72| |j#0@@5|) (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape#0@@15|)) (=> (= (ControlFlow 0 355427) (- 0 356734)) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@72|)) ($Box (int_2_U |j#0@@5|))) (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape#0@@15| (Sequences.__default.FlattenIndex |shape#0@@15| |i#0@@72| |j#0@@5|)))))))) (let ((anon3_Else_correct  (=> (and (not (= |i#0@@72| (- (|Seq#Length| |shape#0@@15|) 1))) ($IsAlloc |shape#0@@15| (TSeq Tclass._System.nat) $Heap@1)) (and (=> (= (ControlFlow 0 123617) (- 0 356352)) (> (|Seq#Length| |shape#0@@15|) 0)) (=> (and (and (> (|Seq#Length| |shape#0@@15|) 0) (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@15|)) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@15|) (= |shape##1@0| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@15|)))) (and (=> (= (ControlFlow 0 123617) (- 0 356400)) (forall (($o@@158 T@U) ($f@@138 T@U) ) (! (let ((alpha@@145 (FieldTypeInv0 (type $f@@138)))) (=> (and (and (= (type $o@@158) refType) (= (type $f@@138) (FieldType alpha@@145))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@158 $f@@138)))) :qid |Sequencesidfy.549:31| :skolemid |1446| :no-pattern (type $o@@158) :no-pattern (type $f@@138) :no-pattern (U_2_int $o@@158) :no-pattern (U_2_bool $o@@158) :no-pattern (U_2_int $f@@138) :no-pattern (U_2_bool $f@@138) ))) (=> (forall (($o@@159 T@U) ($f@@139 T@U) ) (! (let ((alpha@@146 (FieldTypeInv0 (type $f@@139)))) (=> (and (and (= (type $o@@159) refType) (= (type $f@@139) (FieldType alpha@@146))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@159 $f@@139)))) :qid |Sequencesidfy.549:31| :skolemid |1446| :no-pattern (type $o@@159) :no-pattern (type $f@@139) :no-pattern (U_2_int $o@@159) :no-pattern (U_2_bool $o@@159) :no-pattern (U_2_int $f@@139) :no-pattern (U_2_bool $f@@139) )) (and (=> (= (ControlFlow 0 123617) (- 0 356414)) (or (or (<= 0 |i#0@@72|) (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|))) (= |i#0@@72| |i#0@@72|))) (=> (or (or (<= 0 |i#0@@72|) (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|))) (= |i#0@@72| |i#0@@72|)) (and (=> (= (ControlFlow 0 123617) (- 0 356438)) (or (or (or (<= 0 |j#0@@5|) (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|))) (< |i#0@@72| |i#0@@72|)) (= |j#0@@5| |j#0@@5|))) (=> (or (or (or (<= 0 |j#0@@5|) (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|))) (< |i#0@@72| |i#0@@72|)) (= |j#0@@5| |j#0@@5|)) (and (=> (= (ControlFlow 0 123617) (- 0 356469)) (or (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|)) (and (= (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|)) (or (< |i#0@@72| |i#0@@72|) (and (= |i#0@@72| |i#0@@72|) (< |j#0@@5| |j#0@@5|)))))) (=> (or (< (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|)) (and (= (|Seq#Rank| |shape##1@0|) (|Seq#Rank| |shape#0@@15|)) (or (< |i#0@@72| |i#0@@72|) (and (= |i#0@@72| |i#0@@72|) (< |j#0@@5| |j#0@@5|))))) (and (=> (= (ControlFlow 0 123617) (- 0 356516)) (< |i#0@@72| (|Seq#Length| |shape##1@0|))) (=> (< |i#0@@72| (|Seq#Length| |shape##1@0|)) (and (=> (= (ControlFlow 0 123617) (- 0 356522)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape##1@0| |i#0@@72|))))) (=> (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape##1@0| |i#0@@72|)))) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (|Sequences.__default.FlattenIndex#canCall| |shape##1@0| |i#0@@72| |j#0@@5|) (|Sequences.__default.FlattenLength#canCall| |shape##1@0|)) (< (Sequences.__default.FlattenIndex |shape##1@0| |i#0@@72| |j#0@@5|) (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape##1@0|))) (=> (and (and (and (|$IsA#_System.Tuple2| (Sequences.__default.UnflattenIndex ($LS $LZ) |shape##1@0| (Sequences.__default.FlattenIndex |shape##1@0| |i#0@@72| |j#0@@5|))) (and (|Sequences.__default.FlattenIndex#canCall| |shape##1@0| |i#0@@72| |j#0@@5|) (|Sequences.__default.UnflattenIndex#canCall| |shape##1@0| (Sequences.__default.FlattenIndex |shape##1@0| |i#0@@72| |j#0@@5|)))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@72|)) ($Box (int_2_U |j#0@@5|))) (Sequences.__default.UnflattenIndex ($LS ($LS $LZ)) |shape##1@0| (Sequences.__default.FlattenIndex |shape##1@0| |i#0@@72| |j#0@@5|)))) (and (= $Heap@1 $Heap@2) ($IsAlloc |shape#0@@15| (TSeq Tclass._System.nat) $Heap@2))) (and (=> (= (ControlFlow 0 123617) (- 0 356645)) (> (|Seq#Length| |shape#0@@15|) 0)) (=> (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@15|) (and (=> (= (ControlFlow 0 123617) (- 0 356658)) (and (<= 0 |i#0@@72|) (<= |i#0@@72| (|Seq#Length| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@15|))))) (and (=> (= (ControlFlow 0 123617) (- 0 356678)) (and (<= 0 |i#0@@72|) (<= |i#0@@72| (|Seq#Length| |shape#0@@15|)))) (=> (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@15|) (and (=> (= (ControlFlow 0 123617) (- 0 356700)) (|Seq#Equal| (|Seq#Take| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@15|) |i#0@@72|) (|Seq#Take| |shape#0@@15| |i#0@@72|))) (=> (|Seq#Equal| (|Seq#Take| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@15|) |i#0@@72|) (|Seq#Take| |shape#0@@15| |i#0@@72|)) (=> (= (ControlFlow 0 123617) 355427) GeneratedUnifiedExit_correct)))))))))))))))))))))))))))) (let ((anon3_Then_correct  (=> (and (= |i#0@@72| (- (|Seq#Length| |shape#0@@15|) 1)) (= (ControlFlow 0 123615) 355427)) GeneratedUnifiedExit_correct))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= $_Frame@0 (|lambda#117| null $Heap@@40 alloc false)))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@40 $Heap@0) (forall ((|$ih#shape0#0| T@U) ) (!  (=> (= (type |$ih#shape0#0|) (SeqType BoxType)) (=> (and (and ($Is |$ih#shape0#0| (TSeq Tclass._System.nat)) (and (< |i#0@@72| (|Seq#Length| |$ih#shape0#0|)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |$ih#shape0#0| |i#0@@72|)))))) (or (< (|Seq#Rank| |$ih#shape0#0|) (|Seq#Rank| |shape#0@@15|)) (and (= (|Seq#Rank| |$ih#shape0#0|) (|Seq#Rank| |shape#0@@15|)) (or (and (<= 0 |i#0@@72|) (< |i#0@@72| |i#0@@72|)) (and (= |i#0@@72| |i#0@@72|) (and (<= 0 |j#0@@5|) (< |j#0@@5| |j#0@@5|))))))) (and (< (Sequences.__default.FlattenIndex |$ih#shape0#0| |i#0@@72| |j#0@@5|) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |$ih#shape0#0|)) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@72|)) ($Box (int_2_U |j#0@@5|))) (Sequences.__default.UnflattenIndex ($LS $LZ) |$ih#shape0#0| (Sequences.__default.FlattenIndex |$ih#shape0#0| |i#0@@72| |j#0@@5|)))))) :qid |Sequencesidfy.540:34| :skolemid |1444| :no-pattern (type |$ih#shape0#0|) :no-pattern (U_2_int |$ih#shape0#0|) :no-pattern (U_2_bool |$ih#shape0#0|) ))))))) (and (=> (= (ControlFlow 0 123613) (- 0 356232)) (forall (($o@@160 T@U) ($f@@140 T@U) ) (! (let ((alpha@@147 (FieldTypeInv0 (type $f@@140)))) (=> (and (and (= (type $o@@160) refType) (= (type $f@@140) (FieldType alpha@@147))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@160 $f@@140)))) :qid |Sequencesidfy.546:25| :skolemid |1445| :no-pattern (type $o@@160) :no-pattern (type $f@@140) :no-pattern (U_2_int $o@@160) :no-pattern (U_2_bool $o@@160) :no-pattern (U_2_int $f@@140) :no-pattern (U_2_bool $f@@140) ))) (=> (forall (($o@@161 T@U) ($f@@141 T@U) ) (! (let ((alpha@@148 (FieldTypeInv0 (type $f@@141)))) (=> (and (and (= (type $o@@161) refType) (= (type $f@@141) (FieldType alpha@@148))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@161 $f@@141)))) :qid |Sequencesidfy.546:25| :skolemid |1445| :no-pattern (type $o@@161) :no-pattern (type $f@@141) :no-pattern (U_2_int $o@@161) :no-pattern (U_2_bool $o@@161) :no-pattern (U_2_int $f@@141) :no-pattern (U_2_bool $f@@141) )) (and (=> (= (ControlFlow 0 123613) (- 0 356252)) (< |i#0@@72| (|Seq#Length| |shape#0@@15|))) (=> (< |i#0@@72| (|Seq#Length| |shape#0@@15|)) (and (=> (= (ControlFlow 0 123613) (- 0 356258)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@15| |i#0@@72|))))) (=> (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@15| |i#0@@72|)))) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (|Sequences.__default.FlattenIndex#canCall| |shape#0@@15| |i#0@@72| |j#0@@5|) (|Sequences.__default.FlattenLength#canCall| |shape#0@@15|)) (and (< (Sequences.__default.FlattenIndex |shape#0@@15| |i#0@@72| |j#0@@5|) (Sequences.__default.FlattenLength StartFuelAssert_Sequences._default.FlattenLength |shape#0@@15|)) (= $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 123613) 123615) anon3_Then_correct) (=> (= (ControlFlow 0 123613) 123617) anon3_Else_correct)))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@40) ($IsHeapAnchor $Heap@@40)) (=> (and (and (and ($Is |shape#0@@15| (TSeq Tclass._System.nat)) ($IsAlloc |shape#0@@15| (TSeq Tclass._System.nat) $Heap@@40)) (and (<= (LitInt 0) |i#0@@72|) (<= (LitInt 0) |j#0@@5|))) (and (and (= 32 $FunctionContextHeight) (< |i#0@@72| (|Seq#Length| |shape#0@@15|))) (and (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@15| |i#0@@72|)))) (= (ControlFlow 0 355464) 123613)))) anon0_correct)))) PreconditionGeneratedEntry_correct)))))) ))
(check-sat)
