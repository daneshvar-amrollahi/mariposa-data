(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2LLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LLO () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun |##LinearContentMutableMap.lItem.Empty| () T@U)
(declare-fun Tagclass.LinearContentMutableMap.lItem () T@U)
(declare-fun |##LinearContentMutableMap.lItem.Entry| () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun |##LinearContentMutableMap.lItem.Tombstone| () T@U)
(declare-fun class.LinearContentMutableMap.lItem () T@U)
(declare-fun Tagclass.LinearMutableMapBase.Item () T@U)
(declare-fun |##LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.LinearContentMutableMap.FixedSizeLinearHashMap () T@U)
(declare-fun class.LinearContentMutableMap.FixedSizeLinearHashMap () T@U)
(declare-fun |##LinearContentMutableMap.LinearHashMap.LinearHashMap| () T@U)
(declare-fun Tagclass.LinearContentMutableMap.LinearHashMap () T@U)
(declare-fun class.LinearContentMutableMap.LinearHashMap () T@U)
(declare-fun class.LinearContentMutableMap.__default () T@U)
(declare-fun Tagclass.LinearContentMutableMap.__default () T@U)
(declare-fun Tagclass.LinearMutableMapBase.Slot () T@U)
(declare-fun Tagclass.LinearOption.lOption () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun |##LinearOption.TupleResult.TupleResult| () T@U)
(declare-fun Tagclass.LinearOption.TupleResult () T@U)
(declare-fun class.LinearOption.TupleResult () T@U)
(declare-fun |##LinearOption.lOption.lNone| () T@U)
(declare-fun |##LinearOption.lOption.lSome| () T@U)
(declare-fun class.LinearOption.lOption () T@U)
(declare-fun class.LinearOption.__default () T@U)
(declare-fun Tagclass.LinearOption.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun class.LinearSequence__i.__default () T@U)
(declare-fun Tagclass.LinearSequence__i.__default () T@U)
(declare-fun class.Inout.__default () T@U)
(declare-fun Tagclass.Inout.__default () T@U)
(declare-fun class.SetBijectivity.__default () T@U)
(declare-fun Tagclass.SetBijectivity.__default () T@U)
(declare-fun class.NativeArithmetic.__default () T@U)
(declare-fun Tagclass.NativeArithmetic.__default () T@U)
(declare-fun |##LinearMutableMapBase.Slot.Slot| () T@U)
(declare-fun class.LinearMutableMapBase.Slot () T@U)
(declare-fun |##LinearMutableMapBase.Item.Empty| () T@U)
(declare-fun |##LinearMutableMapBase.Item.Entry| () T@U)
(declare-fun |##LinearMutableMapBase.Item.Tombstone| () T@U)
(declare-fun class.LinearMutableMapBase.Item () T@U)
(declare-fun class.LinearMutableMapBase.__default () T@U)
(declare-fun Tagclass.LinearMutableMapBase.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2LLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun tytagFamily$lItem () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$Item () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$FixedSizeLinearHashMap () T@U)
(declare-fun tytagFamily$LinearHashMap () T@U)
(declare-fun tytagFamily$Slot () T@U)
(declare-fun tytagFamily$lOption () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$TupleResult () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun bv64Type () T@T)
(declare-fun bv64_2_U ((_ BitVec 64)) T@U)
(declare-fun U_2_bv64 (T@U) (_ BitVec 64))
(declare-fun nat_from_bv64 ((_ BitVec 64)) Int)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun |#LinearContentMutableMap.lItem.Empty| () T@U)
(declare-fun LinearContentMutableMap.lItem.Empty_q (T@U) Bool)
(declare-fun Tclass.LinearContentMutableMap.lItem (T@U) T@U)
(declare-fun Tclass.LinearContentMutableMap.lItem_0 (T@U) T@U)
(declare-fun |#LinearContentMutableMap.lItem.Entry| (Int T@U) T@U)
(declare-fun LinearContentMutableMap.lItem.Entry_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun LinearContentMutableMap.lItem.key (T@U) Int)
(declare-fun LinearContentMutableMap.lItem.value (T@U) T@U)
(declare-fun |#LinearContentMutableMap.lItem.Tombstone| (Int) T@U)
(declare-fun LinearContentMutableMap.lItem.Tombstone_q (T@U) Bool)
(declare-fun |$IsA#LinearContentMutableMap.lItem| (T@U) Bool)
(declare-fun |LinearContentMutableMap.lItem#Equal| (T@U T@U) Bool)
(declare-fun Tclass.LinearMutableMapBase.Item (T@U) T@U)
(declare-fun Tclass.LinearMutableMapBase.Item_0 (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun LinearContentMutableMap.lItem.toItem (T@U T@U) T@U)
(declare-fun |LinearContentMutableMap.lItem.toItem#canCall| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.lItem.toItem#requires| (T@U T@U) Bool)
(declare-fun |#LinearMutableMapBase.Item.Empty| () T@U)
(declare-fun |#LinearMutableMapBase.Item.Entry| (Int T@U) T@U)
(declare-fun |#LinearMutableMapBase.Item.Tombstone| (Int) T@U)
(declare-fun |#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (T@U Int T@U) T@U)
(declare-fun LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.LinearContentMutableMap.FixedSizeLinearHashMap (T@U) T@U)
(declare-fun Tclass.LinearContentMutableMap.FixedSizeLinearHashMap_0 (T@U) T@U)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun LinearContentMutableMap.FixedSizeLinearHashMap.storage (T@U) T@U)
(declare-fun LinearContentMutableMap.FixedSizeLinearHashMap.count (T@U) Int)
(declare-fun LinearContentMutableMap.FixedSizeLinearHashMap.contents (T@U) T@U)
(declare-fun |$IsA#LinearContentMutableMap.FixedSizeLinearHashMap| (T@U) Bool)
(declare-fun |LinearContentMutableMap.FixedSizeLinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun |#LinearContentMutableMap.LinearHashMap.LinearHashMap| (T@U Int T@U) T@U)
(declare-fun LinearContentMutableMap.LinearHashMap.LinearHashMap_q (T@U) Bool)
(declare-fun Tclass.LinearContentMutableMap.LinearHashMap (T@U) T@U)
(declare-fun Tclass.LinearContentMutableMap.LinearHashMap_0 (T@U) T@U)
(declare-fun LinearContentMutableMap.LinearHashMap.underlying (T@U) T@U)
(declare-fun LinearContentMutableMap.LinearHashMap.count (T@U) Int)
(declare-fun LinearContentMutableMap.LinearHashMap.contents (T@U) T@U)
(declare-fun |$IsA#LinearContentMutableMap.LinearHashMap| (T@U) Bool)
(declare-fun |LinearContentMutableMap.LinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun LinearContentMutableMap.LinearHashMap.Inv (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.LinearHashMap.Inv#canCall| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.LinearHashMap.Inv#requires| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.Inv0#canCall| (T@U T@U) Bool)
(declare-fun LinearContentMutableMap.__default.Inv0 (T@U T@U) Bool)
(declare-fun Tclass.LinearContentMutableMap.__default () T@U)
(declare-fun LinearContentMutableMap.__default.toItems (T@U T@U) T@U)
(declare-fun |LinearContentMutableMap.__default.toItems#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_kcardinality_qlseq (T@U T@U) Int)
(declare-fun |LinearContentMutableMap.__default.toItems#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseqs#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseqs (T@U T@U) T@U)
(declare-fun |lambda#7| (T@U) T@U)
(declare-fun |lambda#3| (T@U T@U) T@U)
(declare-fun |lambda#4| (T@U Int Int) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun |lambda#5| (Bool) T@U)
(declare-fun $LZ () T@U)
(declare-fun LinearContentMutableMap.__default.Uint64SlotForKey (T@U T@U Int) Int)
(declare-fun |LinearContentMutableMap.__default.Uint64SlotForKey#canCall| (T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.ValidSlot (Int T@U) Bool)
(declare-fun |#LinearMutableMapBase.Slot.Slot| (Int) T@U)
(declare-fun |LinearMutableMapBase.Slot#Equal| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SlotForKey (Int Int) T@U)
(declare-fun |LinearContentMutableMap.__default.Uint64SlotForKey#requires| (T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.hash64#canCall| (Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#canCall| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.hash64 (T@U Int) Int)
(declare-fun StartFuel_LinearMutableMapBase._default.hash64 () T@U)
(declare-fun LinearSequence__i.__default.lseq__length__as__uint64 (T@U T@U) Int)
(declare-fun Tclass.LinearMutableMapBase.Slot () T@U)
(declare-fun LinearContentMutableMap.__default.FixedSizeInv (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.FixedSizeInv#canCall| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.FixedSizeInv#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#canCall| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__has__all (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SeqMatchesContentKeys (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.EntriesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.TombstonesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun LinearContentMutableMap.__default.IsConstructorFromSize (T@U Int T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.IsConstructorFromSize#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.IsConstructorFromSize#requires| (T@U Int T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SlotIsEmpty (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.ValidSlot#canCall| (Int T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsEmpty#canCall| (T@U T@U T@U) Bool)
(declare-fun LinearContentMutableMap.__default.getEmptyWitness (T@U T@U T@U Int) Int)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun |LinearContentMutableMap.__default.getEmptyWitness#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearContentMutableMap.__default.getEmptyWitness#requires| (T@U T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun Tclass.LinearOption.lOption (T@U) T@U)
(declare-fun Tclass.LinearOption.lOption_0 (T@U) T@U)
(declare-fun LinearContentMutableMap.__default.UnderlyingContentsMatchesContents (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#requires| (T@U T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun LinearContentMutableMap.__default.UnderlyingInv (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.UnderlyingInv#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.UnderlyingInv#requires| (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.MapFromStorage#canCall| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.MapFromStorage (T@U T@U T@U) T@U)
(declare-fun LinearContentMutableMap.__default.Inv (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.Inv0#requires| (T@U T@U) Bool)
(declare-fun LinearContentMutableMap.__default.IsConstructor (T@U T@U Int) Bool)
(declare-fun |LinearContentMutableMap.__default.IsConstructor#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearContentMutableMap.__default.IsConstructor#requires| (T@U T@U Int) Bool)
(declare-fun LinearContentMutableMap.__default.IsRealloc (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.IsRealloc#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearContentMutableMap.__default.IsRealloc#requires| (T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |#LinearOption.TupleResult.TupleResult| (T@U T@U) T@U)
(declare-fun LinearOption.TupleResult.TupleResult_q (T@U) Bool)
(declare-fun Tclass.LinearOption.TupleResult (T@U) T@U)
(declare-fun Tclass.LinearOption.TupleResult_0 (T@U) T@U)
(declare-fun LinearOption.TupleResult.result (T@U) T@U)
(declare-fun LinearOption.TupleResult.other (T@U) T@U)
(declare-fun |$IsA#LinearOption.TupleResult| (T@U) Bool)
(declare-fun |LinearOption.TupleResult#Equal| (T@U T@U) Bool)
(declare-fun |LinearOption.lOption#Equal| (T@U T@U) Bool)
(declare-fun |#LinearOption.lOption.lNone| () T@U)
(declare-fun LinearOption.lOption.lNone_q (T@U) Bool)
(declare-fun |#LinearOption.lOption.lSome| (T@U) T@U)
(declare-fun LinearOption.lOption.lSome_q (T@U) Bool)
(declare-fun LinearOption.lOption.value (T@U) T@U)
(declare-fun |$IsA#LinearOption.lOption| (T@U) Bool)
(declare-fun LinearOption.lOption.Map (T@U T@U T@U T@U T@U) T@U)
(declare-fun |LinearOption.lOption.Map#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |LinearOption.lOption.Map#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun LinearOption.lOption.Option (T@U T@U) T@U)
(declare-fun |LinearOption.lOption.Option#canCall| (T@U T@U) Bool)
(declare-fun |LinearOption.lOption.Option#requires| (T@U T@U) Bool)
(declare-fun Tclass.LinearOption.__default () T@U)
(declare-fun LinearOption.__default.unwrap__value (T@U T@U) T@U)
(declare-fun |LinearOption.__default.unwrap__value#canCall| (T@U T@U) Bool)
(declare-fun |LinearOption.__default.unwrap__value#requires| (T@U T@U) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#91| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#93| (T@U T@U) T@U)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#36| (T@U Int Int) T@U)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#102| (T@U T@U T@U) T@U)
(declare-fun |lambda#81| (T@U) T@U)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#108| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove11 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#120| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#135| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#155| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#162| (T@U T@U) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.LinearSequence__i.__default () T@U)
(declare-fun LinearSequence__i.__default.seq__alloc__init (T@U Int T@U) T@U)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearSequence__i.__default.seq__alloc__init#requires| (T@U Int T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseqs#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.imagine__lseq (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.imagine__lseq#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.imagine__lseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.linLast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.linLast#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.linLast#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.ldroplast (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.ldroplast#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.ldroplast#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__has__all#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length__as__uint64#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__length (T@U T@U) Int)
(declare-fun |LinearSequence__i.__default.lseq__length#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__length#requires| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.operator_kcardinality_qlseq#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.operator_ksubscript_qlseq (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.operator_ksubscript_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.operator_kin_qlseq (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.operator_kin_qlseq#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__add (T@U T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__add#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__add#requires| (T@U T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__peek (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__peek#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__peek#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__free__fun (T@U T@U) T@U)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__free__fun#requires| (T@U T@U) Bool)
(declare-fun LinearSequence__i.__default.lseq__take__fun (T@U T@U Int) T@U)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearSequence__i.__default.lseq__take__fun#requires| (T@U T@U Int) Bool)
(declare-fun LinearSequence__i.__default.lseq__full (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#canCall| (T@U T@U) Bool)
(declare-fun |LinearSequence__i.__default.lseq__full#requires| (T@U T@U) Bool)
(declare-fun Tclass.Inout.__default () T@U)
(declare-fun Tclass.SetBijectivity.__default () T@U)
(declare-fun Tclass.NativeArithmetic.__default () T@U)
(declare-fun NativeArithmetic.__default.u64add (Int Int) Int)
(declare-fun |NativeArithmetic.__default.u64add#canCall| (Int Int) Bool)
(declare-fun |NativeArithmetic.__default.u64add#requires| (Int Int) Bool)
(declare-fun LinearMutableMapBase.Slot.Slot_q (T@U) Bool)
(declare-fun LinearMutableMapBase.Slot.slot (T@U) Int)
(declare-fun |$IsA#LinearMutableMapBase.Slot| (T@U) Bool)
(declare-fun LinearMutableMapBase.Item.Empty_q (T@U) Bool)
(declare-fun LinearMutableMapBase.Item.Entry_q (T@U) Bool)
(declare-fun LinearMutableMapBase.Item.key (T@U) Int)
(declare-fun LinearMutableMapBase.Item.value (T@U) T@U)
(declare-fun LinearMutableMapBase.Item.Tombstone_q (T@U) Bool)
(declare-fun |$IsA#LinearMutableMapBase.Item| (T@U) Bool)
(declare-fun |LinearMutableMapBase.Item#Equal| (T@U T@U) Bool)
(declare-fun Tclass.LinearMutableMapBase.__default () T@U)
(declare-fun LinearMutableMapBase.__default.lshift (T@U Int Int) Int)
(declare-fun |LinearMutableMapBase.__default.lshift#canCall| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.lshift#requires| (T@U Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.rshift (T@U Int Int) Int)
(declare-fun |LinearMutableMapBase.__default.rshift#canCall| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.rshift#requires| (T@U Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.bitnot (T@U Int) Int)
(declare-fun |LinearMutableMapBase.__default.bitnot#canCall| (Int) Bool)
(declare-fun |LinearMutableMapBase.__default.bitnot#requires| (T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.bitxor (T@U Int Int) Int)
(declare-fun |LinearMutableMapBase.__default.bitxor#canCall| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.bitxor#requires| (T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.hash64#requires| (T@U Int) Bool)
(declare-fun StartFuel_LinearMutableMapBase._default.bitnot () T@U)
(declare-fun StartFuel_LinearMutableMapBase._default.lshift () T@U)
(declare-fun StartFuel_LinearMutableMapBase._default.rshift () T@U)
(declare-fun StartFuel_LinearMutableMapBase._default.bitxor () T@U)
(declare-fun |LinearMutableMapBase.__default.ValidSlot#requires| (Int T@U) Bool)
(declare-fun LinearMutableMapBase.__default.ValidElements (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.ValidElements#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.ValidElements#requires| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotForKey#canCall| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotForKey#requires| (Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.SlotSuccessor (Int T@U) T@U)
(declare-fun |LinearMutableMapBase.__default.SlotSuccessor#canCall| (Int T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotSuccessor#requires| (Int T@U) Bool)
(declare-fun LinearMutableMapBase.__default.KthSlotSuccessor (T@U Int T@U Int) T@U)
(declare-fun |LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (Int T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.KthSlotSuccessor#requires| (T@U Int T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsEmpty#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SlotIsEntry (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsEntry#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsEntry#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SlotIsTombstone (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsTombstone#canCall| (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotIsTombstone#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.FilledWithOtherKey (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithOtherKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithOtherKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.FilledWithOtherKeys (T@U T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| (T@U T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithOtherKeys#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.FilledWithKey (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.FilledWithEntryKey (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithEntryKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.FilledWithEntryKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.SlotExplainsKey (T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotExplainsKey#canCall| (T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SlotExplainsKey#requires| (T@U T@U Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.SomeSkipCountExplainsKey (T@U T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SomeSkipCountExplainsKey#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.SomeSkipCountExplainsKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#requires| (T@U T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.SameSlot (Int T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SameSlot#canCall| (Int T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SameSlot#requires| (Int T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.CantEquivocateStorageKey (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.CantEquivocateStorageKey#requires| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.KeyInSlotIsInContents (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.KeyInSlotIsInContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.SeqMatchesContentKeys#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.EntryInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.EntryInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.TombstoneInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.EntriesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.TombstonesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.IndexSetThrough (T@U T@U Int) T@U)
(declare-fun |LinearMutableMapBase.__default.IndexSetThrough#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.IndexSetThrough#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#172| (T@U Int Int T@U T@U) T@U)
(declare-fun LinearMutableMapBase.__default.IndexSet (T@U T@U) T@U)
(declare-fun |LinearMutableMapBase.__default.IndexSet#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.IndexSet#requires| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.Count1 (T@U T@U) Int)
(declare-fun |LinearMutableMapBase.__default.Count1#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.Count1#requires| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.CountFilled (T@U T@U T@U) Int)
(declare-fun |LinearMutableMapBase.__default.CountFilled#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.CountFilled#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.View (T@U T@U Int) T@U)
(declare-fun |LinearMutableMapBase.__default.View#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearMutableMapBase.__default.View#requires| (T@U T@U Int) Bool)
(declare-fun LinearMutableMapBase.__default.Uint64SlotSuccessor (Int Int) Int)
(declare-fun |LinearMutableMapBase.__default.Uint64SlotSuccessor#canCall| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.Uint64SlotSuccessor#requires| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| (Int Int) Bool)
(declare-fun LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 (Int Int) Int)
(declare-fun |LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#requires| (Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.MapFromStorage#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.CantEquivocate (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.CantEquivocate#canCall| (T@U T@U) Bool)
(declare-fun |LinearMutableMapBase.__default.CantEquivocate#requires| (T@U T@U) Bool)
(declare-fun LinearMutableMapBase.__default.EntryExistsInElements (T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.EntryExistsInElements#canCall| (T@U T@U Int Int) Bool)
(declare-fun |LinearMutableMapBase.__default.EntryExistsInElements#requires| (T@U T@U Int Int) Bool)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U Int) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#90| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc2LLO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LLO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LLO) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type |##LinearContentMutableMap.lItem.Empty|) DtCtorIdType)) (= (type Tagclass.LinearContentMutableMap.lItem) TyTagType)) (= (type |##LinearContentMutableMap.lItem.Entry|) DtCtorIdType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type |##LinearContentMutableMap.lItem.Tombstone|) DtCtorIdType)) (= (type class.LinearContentMutableMap.lItem) ClassNameType)) (= (type Tagclass.LinearMutableMapBase.Item) TyTagType)) (= (type |##LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.LinearContentMutableMap.FixedSizeLinearHashMap) TyTagType)) (= (type class.LinearContentMutableMap.FixedSizeLinearHashMap) ClassNameType)) (= (type |##LinearContentMutableMap.LinearHashMap.LinearHashMap|) DtCtorIdType)) (= (type Tagclass.LinearContentMutableMap.LinearHashMap) TyTagType)) (= (type class.LinearContentMutableMap.LinearHashMap) ClassNameType)) (= (type class.LinearContentMutableMap.__default) ClassNameType)) (= (type Tagclass.LinearContentMutableMap.__default) TyTagType)) (= (type Tagclass.LinearMutableMapBase.Slot) TyTagType)) (= (type Tagclass.LinearOption.lOption) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type |##LinearOption.TupleResult.TupleResult|) DtCtorIdType)) (= (type Tagclass.LinearOption.TupleResult) TyTagType)) (= (type class.LinearOption.TupleResult) ClassNameType)) (= (type |##LinearOption.lOption.lNone|) DtCtorIdType)) (= (type |##LinearOption.lOption.lSome|) DtCtorIdType)) (= (type class.LinearOption.lOption) ClassNameType)) (= (type class.LinearOption.__default) ClassNameType)) (= (type Tagclass.LinearOption.__default) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type class.LinearSequence__i.__default) ClassNameType)) (= (type Tagclass.LinearSequence__i.__default) TyTagType)) (= (type class.Inout.__default) ClassNameType)) (= (type Tagclass.Inout.__default) TyTagType)) (= (type class.SetBijectivity.__default) ClassNameType)) (= (type Tagclass.SetBijectivity.__default) TyTagType)) (= (type class.NativeArithmetic.__default) ClassNameType)) (= (type Tagclass.NativeArithmetic.__default) TyTagType)) (= (type |##LinearMutableMapBase.Slot.Slot|) DtCtorIdType)) (= (type class.LinearMutableMapBase.Slot) ClassNameType)) (= (type |##LinearMutableMapBase.Item.Empty|) DtCtorIdType)) (= (type |##LinearMutableMapBase.Item.Entry|) DtCtorIdType)) (= (type |##LinearMutableMapBase.Item.Tombstone|) DtCtorIdType)) (= (type class.LinearMutableMapBase.Item) ClassNameType)) (= (type class.LinearMutableMapBase.__default) ClassNameType)) (= (type Tagclass.LinearMutableMapBase.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type tytagFamily$lItem) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$Item) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$FixedSizeLinearHashMap) TyTagFamilyType)) (= (type tytagFamily$LinearHashMap) TyTagFamilyType)) (= (type tytagFamily$Slot) TyTagFamilyType)) (= (type tytagFamily$lOption) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$TupleResult) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc2LLO Tagclass._System.___hPartialFunc2LLO Tagclass._System.___hTotalFunc2LLO Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS |##LinearContentMutableMap.lItem.Empty| Tagclass.LinearContentMutableMap.lItem |##LinearContentMutableMap.lItem.Entry| Tagclass.NativeTypes.uint64 |##LinearContentMutableMap.lItem.Tombstone| class.LinearContentMutableMap.lItem Tagclass.LinearMutableMapBase.Item |##LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| Tagclass.Options.Option Tagclass.LinearContentMutableMap.FixedSizeLinearHashMap class.LinearContentMutableMap.FixedSizeLinearHashMap |##LinearContentMutableMap.LinearHashMap.LinearHashMap| Tagclass.LinearContentMutableMap.LinearHashMap class.LinearContentMutableMap.LinearHashMap class.LinearContentMutableMap.__default Tagclass.LinearContentMutableMap.__default Tagclass.LinearMutableMapBase.Slot Tagclass.LinearOption.lOption Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default |##LinearOption.TupleResult.TupleResult| Tagclass.LinearOption.TupleResult class.LinearOption.TupleResult |##LinearOption.lOption.lNone| |##LinearOption.lOption.lSome| class.LinearOption.lOption class.LinearOption.__default Tagclass.LinearOption.__default class.SequencesLite.__default Tagclass.SequencesLite.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.Sets.__default Tagclass.Sets.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.Maps.__default Tagclass.Maps.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default class.LinearSequence__i.__default Tagclass.LinearSequence__i.__default class.Inout.__default Tagclass.Inout.__default class.SetBijectivity.__default Tagclass.SetBijectivity.__default class.NativeArithmetic.__default Tagclass.NativeArithmetic.__default |##LinearMutableMapBase.Slot.Slot| class.LinearMutableMapBase.Slot |##LinearMutableMapBase.Item.Empty| |##LinearMutableMapBase.Item.Entry| |##LinearMutableMapBase.Item.Tombstone| class.LinearMutableMapBase.Item class.LinearMutableMapBase.__default Tagclass.LinearMutableMapBase.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_tuple#2| |tytagFamily$_#Func2LLO| |tytagFamily$_#PartialFunc2LLO| |tytagFamily$_#TotalFunc2LLO| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| tytagFamily$lItem tytagFamily$uint64 tytagFamily$Item tytagFamily$Option tytagFamily$FixedSizeLinearHashMap tytagFamily$LinearHashMap tytagFamily$Slot tytagFamily$lOption tytagFamily$sbyte tytagFamily$byte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$TupleResult) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (Ctor bv64Type) 24))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 (TBitvector 64))) (and (= ($Box ($Unbox bv64Type bx@@26)) bx@@26) ($Is ($Unbox bv64Type bx@@26) (TBitvector 64)))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 (TBitvector 64))) )))
(assert  (and (and (forall ((arg0@@113 (_ BitVec 64)) ) (! (= (U_2_bv64 (bv64_2_U arg0@@113)) arg0@@113) :qid |typeInv:U_2_bv64| :pattern ( (bv64_2_U arg0@@113)) )) (forall ((x@@56 T@U) ) (!  (=> (= (type x@@56) bv64Type) (= (bv64_2_U (U_2_bv64 x@@56)) x@@56)) :qid |cast:U_2_bv64| :pattern ( (U_2_bv64 x@@56)) ))) (forall ((arg0@@114 (_ BitVec 64)) ) (! (= (type (bv64_2_U arg0@@114)) bv64Type) :qid |funType:bv64_2_U| :pattern ( (bv64_2_U arg0@@114)) ))))
(assert (forall ((v@@52 T@U) ) (!  (=> (= (type v@@52) bv64Type) ($Is v@@52 (TBitvector 64))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is v@@52 (TBitvector 64))) )))
(assert (forall ((v@@53 T@U) (heap@@1 T@U) ) (!  (=> (and (= (type v@@53) bv64Type) (= (type heap@@1) (MapType0Type refType MapType1Type))) ($IsAlloc v@@53 (TBitvector 64) heap@@1)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc v@@53 (TBitvector 64) heap@@1)) )))
(assert (forall ((b@@61 (_ BitVec 64)) ) (!  (and (and (<= 0 (nat_from_bv64 b@@61)) (< (nat_from_bv64 b@@61) 18446744073709551616)) (= (nat_from_bv64 b@@61) (bv2int b@@61))) :qid |unknown.0:0| :skolemid |697| :pattern ( (nat_from_bv64 b@@61)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (TagFamily arg0@@115)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@115)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@27)) bx@@27) ($Is ($Unbox intType bx@@27) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@27 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($IsBox bx@@28 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |702| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |703| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@29 T@U) ) (!  (=> (and (= (type bx@@29) BoxType) ($IsBox bx@@29 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) Tclass._System.object))) :qid |unknown.0:0| :skolemid |704| :pattern ( ($IsBox bx@@29 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |706| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.array? arg0@@116)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@116)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |707| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@117)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@117)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |708| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsBox bx@@30 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (dtype arg0@@118)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@118)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |711| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |713| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |714| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |715| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.array arg0@@119)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@119)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |716| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@120)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@120)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@31 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@31)) bx@@31) ($Is ($Unbox refType bx@@31) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($IsBox bx@@31 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |719| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@121 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@121 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@121 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@122 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@122)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@122)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@123 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@123)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@123)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |723| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@32) BoxType)) ($IsBox bx@@32 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@32)) bx@@32) ($Is ($Unbox HandleTypeType bx@@32) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |724| :pattern ( ($IsBox bx@@32 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@124 arg1@@54 arg2@@8)) 25) :qid |ctor:MapType2Type| )) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@125 arg1@@55 arg2@@9)) arg0@@125) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@9)) ))) (forall ((arg0@@126 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@126 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@126 arg1@@56 arg2@@10)) ))) (forall ((arg0@@127 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@127 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@127 arg1@@57 arg2@@11)) ))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@128)))) (= (type (MapType2Select arg0@@128 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@128 arg1@@58 arg2@@12)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@129 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@129 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@130 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@130 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@2 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@2 bx0))) :qid |unknown.0:0| :skolemid |725| :pattern ( (Apply1 t0@@16 t1@@7 heap@@2 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@3 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@3 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |726| :pattern ( (Requires1 t0@@17 t1@@8 heap@@3 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@131 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@131 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@4 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@33 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@33) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@4 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@33)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@4 bx0@@1) bx@@33)))) :qid |unknown.0:0| :skolemid |727| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@4 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@33)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |736| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |737| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |738| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@5 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@5 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |740| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@5)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@5 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@6 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@6) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@6 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |741| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@6)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@6 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |742| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 u0)) ($IsBox bx@@34 t0@@28)) :qid |unknown.0:0| :skolemid |744| :pattern ( ($IsBox bx@@34 u0)) :pattern ( ($IsBox bx@@34 t0@@28)) ))) (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 t1@@19)) ($IsBox bx@@35 u1)) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsBox bx@@35 t1@@19)) :pattern ( ($IsBox bx@@35 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |746| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |747| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |749| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |750| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@132 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@132 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@132 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@133)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@134)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@36 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |756| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |757| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@135 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@135 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |759| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@136)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |760| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@137)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |761| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@37 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($IsBox bx@@37 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |763| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@138)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@138)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@139 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@139)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@139)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |767| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@38)) bx@@38) ($Is ($Unbox HandleTypeType bx@@38) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($IsBox bx@@38 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@140 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@140 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@140 arg1@@64 arg2@@16)) )) (forall ((arg0@@141 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@141 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@141 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@7 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@7 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@7))) :qid |unknown.0:0| :skolemid |769| :pattern ( (Apply0 t0@@31 heap@@7 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@8 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@8))) (Requires0 t0@@32 heap@@8 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |770| :pattern ( (Requires0 t0@@32 heap@@8 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@142 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@142 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@142 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@9 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@39 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@39) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@9 (Handle0 h@@29 r@@12 rd@@4)) bx@@39)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@9) bx@@39)))) :qid |unknown.0:0| :skolemid |771| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@9 (Handle0 h@@29 r@@12 rd@@4)) bx@@39)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |780| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |781| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |782| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@10 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@10) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@10 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |784| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@10)) :pattern ( (Reads0 t0@@40 heap@@10 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@11 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@11) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@11 f@@24))) :qid |unknown.0:0| :skolemid |785| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@11)) :pattern ( (Requires0 t0@@41 heap@@11 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |786| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@40 T@U) ) (!  (=> (and (= (type bx@@40) BoxType) ($IsBox bx@@40 t0@@43)) ($IsBox bx@@40 u0@@0)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsBox bx@@40 t0@@43)) :pattern ( ($IsBox bx@@40 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |790| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |792| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |793| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($IsBox bx@@41 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@145 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@145)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@145)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@146)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($IsBox bx@@42 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |802| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@43 T@U) ) (!  (=> (and (= (type bx@@43) BoxType) ($IsBox bx@@43 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@43)) bx@@43) ($Is ($Unbox refType bx@@43) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |803| :pattern ( ($IsBox bx@@43 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |804| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |806| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |807| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@147 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@147 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@147 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |808| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@148)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |809| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@149 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@149)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@149)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@150 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@150)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@150)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |811| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@44) BoxType)) ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@44)) bx@@44) ($Is ($Unbox HandleTypeType bx@@44) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |812| :pattern ( ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@151 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@151 arg1@@68 arg2@@20 arg3@@3)) 26) :qid |ctor:MapType3Type| )) (forall ((arg0@@152 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@152 arg1@@69 arg2@@21 arg3@@4)) arg0@@152) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@152 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@153 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@153 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@153 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@154 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@154 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@154 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@155 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@155 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@155 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@156 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@156)))) (= (type (MapType3Select arg0@@156 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@156 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@157 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@157 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@157 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@158 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@158 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@158 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@159 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@159 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@159 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@12 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@12 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@12 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |813| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@12 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@13 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@13 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@13 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |814| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@13 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@160 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@160 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@160 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@14 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@45) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@14 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@45)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@14 bx0@@15 bx1@@1) bx@@45)))) :qid |unknown.0:0| :skolemid |815| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@14 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@45)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |824| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |825| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |826| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@15 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@15 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@15)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@15 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@16 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@16) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@16 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |829| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@16)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@16 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |830| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u0@@1)) ($IsBox bx@@46 t0@@58)) :qid |unknown.0:0| :skolemid |832| :pattern ( ($IsBox bx@@46 u0@@1)) :pattern ( ($IsBox bx@@46 t0@@58)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u1@@0)) ($IsBox bx@@47 t1@@34)) :qid |unknown.0:0| :skolemid |833| :pattern ( ($IsBox bx@@47 u1@@0)) :pattern ( ($IsBox bx@@47 t1@@34)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 t2@@11)) ($IsBox bx@@48 u2)) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsBox bx@@48 t2@@11)) :pattern ( ($IsBox bx@@48 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |835| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |836| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |838| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |839| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@161 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@161 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |841| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@162)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |842| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@163)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |843| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@164)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |845| :pattern ( ($IsBox bx@@49 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |846| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |847| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |848| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@165 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@165 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@165 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |849| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@166)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |850| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@167 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@167)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@167)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@168)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@168)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |852| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |853| :pattern ( ($IsBox bx@@50 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |854| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |855| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |856| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@169 T@U) (arg1@@80 T@U) (arg2@@32 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@169 arg1@@80 arg2@@32)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@169 arg1@@80 arg2@@32)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@34| |#$T1@@18| |#$R@@47|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@34| |#$T1@@18| |#$R@@47|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@34| |#$T1@@18| |#$R@@47|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@170)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@35| |#$T1@@19| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@35| |#$T1@@19| |#$R@@48|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@171)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@36| |#$T1@@20| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@36| |#$T1@@20| |#$R@@49|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@172)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@37| |#$T1@@21| |#$R@@50|)) |#$R@@50|)) :qid |unknown.0:0| :skolemid |860| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@37| |#$T1@@21| |#$R@@50|)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$R@@51| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$R@@51|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hFunc2OSO |#$T0@@38| |#$T1@@22| |#$R@@51|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hFunc2OSO |#$T0@@38| |#$T1@@22| |#$R@@51|)))) :qid |unknown.0:0| :skolemid |861| :pattern ( ($IsBox bx@@51 (Tclass._System.___hFunc2OSO |#$T0@@38| |#$T1@@22| |#$R@@51|))) )))
(assert (forall ((arg0@@173 T@U) (arg1@@81 T@U) (arg2@@33 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@173 arg1@@81 arg2@@33)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@173 arg1@@81 arg2@@33)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$R@@52|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@39| |#$T1@@23| |#$R@@52|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@39| |#$T1@@23| |#$R@@52|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |862| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@39| |#$T1@@23| |#$R@@52|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@174)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@174)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@40| |#$T1@@24| |#$R@@53|)) |#$T0@@40|)) :qid |unknown.0:0| :skolemid |863| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@40| |#$T1@@24| |#$R@@53|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@175)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@175)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@41| |#$T1@@25| |#$R@@54|)) |#$T1@@25|)) :qid |unknown.0:0| :skolemid |864| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@41| |#$T1@@25| |#$R@@54|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@176)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@42| |#$T1@@26| |#$R@@55|)) |#$R@@55|)) :qid |unknown.0:0| :skolemid |865| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@42| |#$T1@@26| |#$R@@55|)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$R@@56| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$R@@56|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hPartialFunc2OSO |#$T0@@43| |#$T1@@27| |#$R@@56|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hPartialFunc2OSO |#$T0@@43| |#$T1@@27| |#$R@@56|)))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($IsBox bx@@52 (Tclass._System.___hPartialFunc2OSO |#$T0@@43| |#$T1@@27| |#$R@@56|))) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$R@@57| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$R@@57|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc2OSO |#$T0@@44| |#$T1@@28| |#$R@@57|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc2OSO |#$T0@@44| |#$T1@@28| |#$R@@57|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@3| |#$T0@@44|) ($IsBox |x1#0@@1| |#$T1@@28|))) (|Set#Equal| (Reads2 |#$T0@@44| |#$T1@@28| |#$R@@57| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) ))))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc2OSO |#$T0@@44| |#$T1@@28| |#$R@@57|))) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$R@@58| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$R@@58|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc2OSO |#$T0@@45| |#$T1@@29| |#$R@@58|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc2OSO |#$T0@@45| |#$T1@@29| |#$R@@58|) $h@@14))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc2OSO |#$T0@@45| |#$T1@@29| |#$R@@58|) $h@@14)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@82 T@U) (arg2@@34 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@177 arg1@@82 arg2@@34)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@177 arg1@@82 arg2@@34)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$R@@59|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@46| |#$T1@@30| |#$R@@59|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@46| |#$T1@@30| |#$R@@59|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |870| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@46| |#$T1@@30| |#$R@@59|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@178)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$R@@60| T@U) ) (!  (=> (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$R@@60|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@47| |#$T1@@31| |#$R@@60|)) |#$T0@@47|)) :qid |unknown.0:0| :skolemid |871| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@47| |#$T1@@31| |#$R@@60|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@179)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@48| |#$T1@@32| |#$R@@61|)) |#$T1@@32|)) :qid |unknown.0:0| :skolemid |872| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@48| |#$T1@@32| |#$R@@61|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@180)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@49| |#$T1@@33| |#$R@@62|)) |#$R@@62|)) :qid |unknown.0:0| :skolemid |873| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@49| |#$T1@@33| |#$R@@62|)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$R@@63| T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$R@@63|) TyType)) (= (type bx@@53) BoxType)) ($IsBox bx@@53 (Tclass._System.___hTotalFunc2OSO |#$T0@@50| |#$T1@@34| |#$R@@63|))) (and (= ($Box ($Unbox HandleTypeType bx@@53)) bx@@53) ($Is ($Unbox HandleTypeType bx@@53) (Tclass._System.___hTotalFunc2OSO |#$T0@@50| |#$T1@@34| |#$R@@63|)))) :qid |unknown.0:0| :skolemid |874| :pattern ( ($IsBox bx@@53 (Tclass._System.___hTotalFunc2OSO |#$T0@@50| |#$T1@@34| |#$R@@63|))) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$R@@64| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$R@@64|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc2OSO |#$T0@@51| |#$T1@@35| |#$R@@64|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc2OSO |#$T0@@51| |#$T1@@35| |#$R@@64|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@4| |#$T0@@51|) ($IsBox |x1#0@@2| |#$T1@@35|))) (Requires2 |#$T0@@51| |#$T1@@35| |#$R@@64| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |875| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))))) :qid |unknown.0:0| :skolemid |876| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc2OSO |#$T0@@51| |#$T1@@35| |#$R@@64|))) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$R@@65| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$R@@65|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc2OSO |#$T0@@52| |#$T1@@36| |#$R@@65|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc2OSO |#$T0@@52| |#$T1@@36| |#$R@@65|) $h@@15))) :qid |unknown.0:0| :skolemid |877| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc2OSO |#$T0@@52| |#$T1@@36| |#$R@@65|) $h@@15)) )))
(assert (forall ((arg0@@181 T@U) (arg1@@83 T@U) (arg2@@35 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@181 arg1@@83 arg2@@35 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@181 arg1@@83 arg2@@35 arg3@@12)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@66|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@53| |#$T1@@37| |#$T2| |#$R@@66|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@53| |#$T1@@37| |#$T2| |#$R@@66|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |878| :pattern ( (Tclass._System.___hFunc3 |#$T0@@53| |#$T1@@37| |#$T2| |#$R@@66|)) )))
(assert (forall ((arg0@@182 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@182)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@182)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@0| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@0| |#$R@@67|)) |#$T0@@54|)) :qid |unknown.0:0| :skolemid |879| :pattern ( (Tclass._System.___hFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@0| |#$R@@67|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@183)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@183)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@1| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@1| |#$R@@68|)) |#$T1@@39|)) :qid |unknown.0:0| :skolemid |880| :pattern ( (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@1| |#$R@@68|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@184)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@184)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@2| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@2| |#$R@@69|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |881| :pattern ( (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@2| |#$R@@69|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@185)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@185)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@3| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@3| |#$R@@70|)) |#$R@@70|)) :qid |unknown.0:0| :skolemid |882| :pattern ( (Tclass._System.___hFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@3| |#$R@@70|)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@4| T@U) (|#$R@@71| T@U) (bx@@54 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@71|) TyType)) (= (type bx@@54) BoxType)) ($IsBox bx@@54 (Tclass._System.___hFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@4| |#$R@@71|))) (and (= ($Box ($Unbox HandleTypeType bx@@54)) bx@@54) ($Is ($Unbox HandleTypeType bx@@54) (Tclass._System.___hFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@4| |#$R@@71|)))) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@54 (Tclass._System.___hFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@4| |#$R@@71|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@186 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@186 arg1@@84 arg2@@36 arg3@@13 arg4@@4)) 27) :qid |ctor:MapType4Type| )) (forall ((arg0@@187 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@187 arg1@@85 arg2@@37 arg3@@14 arg4@@5)) arg0@@187) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@187 arg1@@85 arg2@@37 arg3@@14 arg4@@5)) ))) (forall ((arg0@@188 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@188 arg1@@86 arg2@@38 arg3@@15 arg4@@6)) arg1@@86) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@188 arg1@@86 arg2@@38 arg3@@15 arg4@@6)) ))) (forall ((arg0@@189 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@189 arg1@@87 arg2@@39 arg3@@16 arg4@@7)) arg2@@39) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@189 arg1@@87 arg2@@39 arg3@@16 arg4@@7)) ))) (forall ((arg0@@190 T@T) (arg1@@88 T@T) (arg2@@40 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@190 arg1@@88 arg2@@40 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@190 arg1@@88 arg2@@40 arg3@@17 arg4@@8)) ))) (forall ((arg0@@191 T@T) (arg1@@89 T@T) (arg2@@41 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@191 arg1@@89 arg2@@41 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@191 arg1@@89 arg2@@41 arg3@@18 arg4@@9)) ))) (forall ((arg0@@192 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@192)))) (= (type (MapType4Select arg0@@192 arg1@@90 arg2@@42 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@192 arg1@@90 arg2@@42 arg3@@19 arg4@@10)) ))) (forall ((arg0@@193 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@43))) (let ((aVar0@@2 (type arg1@@91))) (= (type (MapType4Store arg0@@193 arg1@@91 arg2@@43 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@193 arg1@@91 arg2@@43 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@54)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@194 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@194 arg1@@92 arg2@@44 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@194 arg1@@92 arg2@@44 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@195 T@U) (arg1@@93 T@U) (arg2@@45 T@U) ) (! (= (type (Handle3 arg0@@195 arg1@@93 arg2@@45)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@195 arg1@@93 arg2@@45)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (heap@@17 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@17 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2) (MapType4Select h@@39 heap@@17 bx0@@27 bx1@@13 bx2))) :qid |unknown.0:0| :skolemid |884| :pattern ( (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@17 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@18 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@18 bx0@@28 bx1@@14 bx2@@0))) (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@18 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) :qid |unknown.0:0| :skolemid |885| :pattern ( (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@18 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) )))
(assert (forall ((arg0@@196 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@196 arg1@@94 arg2@@46 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@196 arg1@@94 arg2@@46 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@19 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@55) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@19 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@55)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@19 bx0@@29 bx1@@15 bx2@@1) bx@@55)))) :qid |unknown.0:0| :skolemid |886| :pattern ( (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@19 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@55)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@17 t3@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |887| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@18 t3@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |889| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3))) :qid |unknown.0:0| :skolemid |890| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@19 t3@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |891| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4))) :qid |unknown.0:0| :skolemid |892| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@20 t3@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |893| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5))) :qid |unknown.0:0| :skolemid |894| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@21 t3@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |895| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@22 t3@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@20 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@23 t3@@8))))) (= (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@20 f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |899| :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) ($IsGoodHeap heap@@20)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@20 f@@47 bx0@@36 bx1@@22 bx2@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@21 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@21) (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (|Set#Empty| BoxType)))) (= (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@21 f@@48 bx0@@37 bx1@@23 bx2@@9))) :qid |unknown.0:0| :skolemid |900| :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) ($IsGoodHeap heap@@21)) :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@21 f@@48 bx0@@37 bx1@@23 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))) ($IsBox (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10) t3@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |901| :pattern ( (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10)) )))) :qid |unknown.0:0| :skolemid |902| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 u0@@2)) ($IsBox bx@@56 t0@@73)) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@56 u0@@2)) :pattern ( ($IsBox bx@@56 t0@@73)) ))) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 u1@@1)) ($IsBox bx@@57 t1@@49)) :qid |unknown.0:0| :skolemid |904| :pattern ( ($IsBox bx@@57 u1@@1)) :pattern ( ($IsBox bx@@57 t1@@49)) ))) (forall ((bx@@58 T@U) ) (!  (=> (and (= (type bx@@58) BoxType) ($IsBox bx@@58 u2@@0)) ($IsBox bx@@58 t2@@26)) :qid |unknown.0:0| :skolemid |905| :pattern ( ($IsBox bx@@58 u2@@0)) :pattern ( ($IsBox bx@@58 t2@@26)) ))) (forall ((bx@@59 T@U) ) (!  (=> (and (= (type bx@@59) BoxType) ($IsBox bx@@59 t3@@11)) ($IsBox bx@@59 u3)) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsBox bx@@59 t3@@11)) :pattern ( ($IsBox bx@@59 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |907| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (=> (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (Requires3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |908| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |909| :pattern ( (Apply3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) :pattern ( (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) )))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) (Requires3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ($IsAllocBox (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12) t3@@13 h@@44))) :qid |unknown.0:0| :skolemid |911| :pattern ( (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ))) :qid |unknown.0:0| :skolemid |912| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@197 arg1@@95 arg2@@47 arg3@@23)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@5| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@72|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@5| |#$R@@72|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@5| |#$R@@72|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@5| |#$R@@72|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@198)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@6| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@6| |#$R@@73|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@6| |#$R@@73|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@199)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@7| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@7| |#$R@@74|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@7| |#$R@@74|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@200)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@8| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@8| |#$R@@75|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@8| |#$R@@75|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@201)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@9| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@9| |#$R@@76|)) |#$R@@76|)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@9| |#$R@@76|)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@10| T@U) (|#$R@@77| T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@77|) TyType)) (= (type bx@@60) BoxType)) ($IsBox bx@@60 (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@10| |#$R@@77|))) (and (= ($Box ($Unbox HandleTypeType bx@@60)) bx@@60) ($Is ($Unbox HandleTypeType bx@@60) (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@10| |#$R@@77|)))) :qid |unknown.0:0| :skolemid |918| :pattern ( ($IsBox bx@@60 (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@10| |#$R@@77|))) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@11| T@U) (|#$R@@78| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@78|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@11| |#$R@@78|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@11| |#$R@@78|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@65|) ($IsBox |x1#0@@3| |#$T1@@49|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@65| |#$T1@@49| |#$T2@@11| |#$R@@78| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |919| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) ))))) :qid |unknown.0:0| :skolemid |920| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@11| |#$R@@78|))) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@12| T@U) (|#$R@@79| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@79|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@12| |#$R@@79|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@12| |#$R@@79|) $h@@16))) :qid |unknown.0:0| :skolemid |921| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@12| |#$R@@79|) $h@@16)) )))
(assert (forall ((arg0@@202 T@U) (arg1@@96 T@U) (arg2@@48 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@202 arg1@@96 arg2@@48 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@202 arg1@@96 arg2@@48 arg3@@24)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@13| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@80|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@13| |#$R@@80|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@13| |#$R@@80|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |922| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@13| |#$R@@80|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@203)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@203)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@14| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@14| |#$R@@81|)) |#$T0@@68|)) :qid |unknown.0:0| :skolemid |923| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@14| |#$R@@81|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@204)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@204)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@15| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@15| |#$R@@82|)) |#$T1@@53|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@15| |#$R@@82|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@205)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@205)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@16| T@U) (|#$R@@83| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@83|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@16| |#$R@@83|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |925| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@16| |#$R@@83|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@206)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@206)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@17| T@U) (|#$R@@84| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@84|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@17| |#$R@@84|)) |#$R@@84|)) :qid |unknown.0:0| :skolemid |926| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@17| |#$R@@84|)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@18| T@U) (|#$R@@85| T@U) (bx@@61 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@85|) TyType)) (= (type bx@@61) BoxType)) ($IsBox bx@@61 (Tclass._System.___hTotalFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@18| |#$R@@85|))) (and (= ($Box ($Unbox HandleTypeType bx@@61)) bx@@61) ($Is ($Unbox HandleTypeType bx@@61) (Tclass._System.___hTotalFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@18| |#$R@@85|)))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($IsBox bx@@61 (Tclass._System.___hTotalFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@18| |#$R@@85|))) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@19| T@U) (|#$R@@86| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@86|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@19| |#$R@@86|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@19| |#$R@@86|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@73|) ($IsBox |x1#0@@4| |#$T1@@57|)) ($IsBox |x2#0@@0| |#$T2@@19|))) (Requires3 |#$T0@@73| |#$T1@@57| |#$T2@@19| |#$R@@86| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@0|)) :qid |unknown.0:0| :skolemid |928| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))))) :qid |unknown.0:0| :skolemid |929| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@19| |#$R@@86|))) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@20| T@U) (|#$R@@87| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@87|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@20| |#$R@@87|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@20| |#$R@@87|) $h@@17))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@20| |#$R@@87|) $h@@17)) )))
(assert (forall ((arg0@@207 T@U) (arg1@@97 T@U) (arg2@@49 T@U) (arg3@@25 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@207 arg1@@97 arg2@@49 arg3@@25)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@207 arg1@@97 arg2@@49 arg3@@25)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@21| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$R@@88|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@75| |#$T1@@59| |#$T2@@21| |#$R@@88|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@75| |#$T1@@59| |#$T2@@21| |#$R@@88|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |931| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@75| |#$T1@@59| |#$T2@@21| |#$R@@88|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@208)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@208)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@22| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@76| |#$T1@@60| |#$T2@@22| |#$R@@89|)) |#$T0@@76|)) :qid |unknown.0:0| :skolemid |932| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@76| |#$T1@@60| |#$T2@@22| |#$R@@89|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@209)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@209)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@23| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@77| |#$T1@@61| |#$T2@@23| |#$R@@90|)) |#$T1@@61|)) :qid |unknown.0:0| :skolemid |933| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@77| |#$T1@@61| |#$T2@@23| |#$R@@90|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@210)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@210)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@24| T@U) (|#$R@@91| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$R@@91|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@78| |#$T1@@62| |#$T2@@24| |#$R@@91|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |934| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@78| |#$T1@@62| |#$T2@@24| |#$R@@91|)) )))
(assert (forall ((arg0@@211 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@211)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@211)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@25| T@U) (|#$R@@92| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$R@@92|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@79| |#$T1@@63| |#$T2@@25| |#$R@@92|)) |#$R@@92|)) :qid |unknown.0:0| :skolemid |935| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@79| |#$T1@@63| |#$T2@@25| |#$R@@92|)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@26| T@U) (|#$R@@93| T@U) (bx@@62 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$R@@93|) TyType)) (= (type bx@@62) BoxType)) ($IsBox bx@@62 (Tclass._System.___hFunc3LLOO |#$T0@@80| |#$T1@@64| |#$T2@@26| |#$R@@93|))) (and (= ($Box ($Unbox HandleTypeType bx@@62)) bx@@62) ($Is ($Unbox HandleTypeType bx@@62) (Tclass._System.___hFunc3LLOO |#$T0@@80| |#$T1@@64| |#$T2@@26| |#$R@@93|)))) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@62 (Tclass._System.___hFunc3LLOO |#$T0@@80| |#$T1@@64| |#$T2@@26| |#$R@@93|))) )))
(assert (forall ((arg0@@212 T@U) (arg1@@98 T@U) (arg2@@50 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@212 arg1@@98 arg2@@50 arg3@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@212 arg1@@98 arg2@@50 arg3@@26)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@27| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@94|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@81| |#$T1@@65| |#$T2@@27| |#$R@@94|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@81| |#$T1@@65| |#$T2@@27| |#$R@@94|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |937| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@81| |#$T1@@65| |#$T2@@27| |#$R@@94|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@213)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@213)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@28| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@82| |#$T1@@66| |#$T2@@28| |#$R@@95|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |938| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@82| |#$T1@@66| |#$T2@@28| |#$R@@95|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@214)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@214)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@29| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@83| |#$T1@@67| |#$T2@@29| |#$R@@96|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |939| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@83| |#$T1@@67| |#$T2@@29| |#$R@@96|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@215)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@30| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@84| |#$T1@@68| |#$T2@@30| |#$R@@97|)) |#$T2@@30|)) :qid |unknown.0:0| :skolemid |940| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@84| |#$T1@@68| |#$T2@@30| |#$R@@97|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@216)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@31| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@85| |#$T1@@69| |#$T2@@31| |#$R@@98|)) |#$R@@98|)) :qid |unknown.0:0| :skolemid |941| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@85| |#$T1@@69| |#$T2@@31| |#$R@@98|)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@32| T@U) (|#$R@@99| T@U) (bx@@63 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@99|) TyType)) (= (type bx@@63) BoxType)) ($IsBox bx@@63 (Tclass._System.___hPartialFunc3LLOO |#$T0@@86| |#$T1@@70| |#$T2@@32| |#$R@@99|))) (and (= ($Box ($Unbox HandleTypeType bx@@63)) bx@@63) ($Is ($Unbox HandleTypeType bx@@63) (Tclass._System.___hPartialFunc3LLOO |#$T0@@86| |#$T1@@70| |#$T2@@32| |#$R@@99|)))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsBox bx@@63 (Tclass._System.___hPartialFunc3LLOO |#$T0@@86| |#$T1@@70| |#$T2@@32| |#$R@@99|))) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@33| T@U) (|#$R@@100| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@100|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc3LLOO |#$T0@@87| |#$T1@@71| |#$T2@@33| |#$R@@100|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc3LLOO |#$T0@@87| |#$T1@@71| |#$T2@@33| |#$R@@100|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@87|) ($IsBox |x1#0@@5| |#$T1@@71|)) ($IsBox |x2#0@@1| |#$T2@@33|))) (|Set#Equal| (Reads3 |#$T0@@87| |#$T1@@71| |#$T2@@33| |#$R@@100| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5| |x2#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |943| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) ))))) :qid |unknown.0:0| :skolemid |944| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc3LLOO |#$T0@@87| |#$T1@@71| |#$T2@@33| |#$R@@100|))) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@34| T@U) (|#$R@@101| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@101|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc3LLOO |#$T0@@88| |#$T1@@72| |#$T2@@34| |#$R@@101|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc3LLOO |#$T0@@88| |#$T1@@72| |#$T2@@34| |#$R@@101|) $h@@18))) :qid |unknown.0:0| :skolemid |945| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc3LLOO |#$T0@@88| |#$T1@@72| |#$T2@@34| |#$R@@101|) $h@@18)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@99 T@U) (arg2@@51 T@U) (arg3@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@217 arg1@@99 arg2@@51 arg3@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@217 arg1@@99 arg2@@51 arg3@@27)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@35| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@102|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@89| |#$T1@@73| |#$T2@@35| |#$R@@102|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@89| |#$T1@@73| |#$T2@@35| |#$R@@102|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |946| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@89| |#$T1@@73| |#$T2@@35| |#$R@@102|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@218)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@36| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@90| |#$T1@@74| |#$T2@@36| |#$R@@103|)) |#$T0@@90|)) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@90| |#$T1@@74| |#$T2@@36| |#$R@@103|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@219)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@37| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@91| |#$T1@@75| |#$T2@@37| |#$R@@104|)) |#$T1@@75|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@91| |#$T1@@75| |#$T2@@37| |#$R@@104|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@220)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@220)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@38| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@92| |#$T1@@76| |#$T2@@38| |#$R@@105|)) |#$T2@@38|)) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@92| |#$T1@@76| |#$T2@@38| |#$R@@105|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@221)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@39| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@93| |#$T1@@77| |#$T2@@39| |#$R@@106|)) |#$R@@106|)) :qid |unknown.0:0| :skolemid |950| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@93| |#$T1@@77| |#$T2@@39| |#$R@@106|)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@40| T@U) (|#$R@@107| T@U) (bx@@64 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@107|) TyType)) (= (type bx@@64) BoxType)) ($IsBox bx@@64 (Tclass._System.___hTotalFunc3LLOO |#$T0@@94| |#$T1@@78| |#$T2@@40| |#$R@@107|))) (and (= ($Box ($Unbox HandleTypeType bx@@64)) bx@@64) ($Is ($Unbox HandleTypeType bx@@64) (Tclass._System.___hTotalFunc3LLOO |#$T0@@94| |#$T1@@78| |#$T2@@40| |#$R@@107|)))) :qid |unknown.0:0| :skolemid |951| :pattern ( ($IsBox bx@@64 (Tclass._System.___hTotalFunc3LLOO |#$T0@@94| |#$T1@@78| |#$T2@@40| |#$R@@107|))) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@41| T@U) (|#$R@@108| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@108|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc3LLOO |#$T0@@95| |#$T1@@79| |#$T2@@41| |#$R@@108|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc3LLOO |#$T0@@95| |#$T1@@79| |#$T2@@41| |#$R@@108|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@95|) ($IsBox |x1#0@@6| |#$T1@@79|)) ($IsBox |x2#0@@2| |#$T2@@41|))) (Requires3 |#$T0@@95| |#$T1@@79| |#$T2@@41| |#$R@@108| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |952| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc3LLOO |#$T0@@95| |#$T1@@79| |#$T2@@41| |#$R@@108|))) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@42| T@U) (|#$R@@109| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@109|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc3LLOO |#$T0@@96| |#$T1@@80| |#$T2@@42| |#$R@@109|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc3LLOO |#$T0@@96| |#$T1@@80| |#$T2@@42| |#$R@@109|) $h@@19))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc3LLOO |#$T0@@96| |#$T1@@80| |#$T2@@42| |#$R@@109|) $h@@19)) )))
(assert (forall ((arg0@@222 T@U) (arg1@@100 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@222 arg1@@100)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@222 arg1@@100)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$R@@110| T@U) ) (!  (=> (and (= (type |#$T0@@97|) TyType) (= (type |#$R@@110|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@97| |#$R@@110|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@97| |#$R@@110|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |955| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@97| |#$R@@110|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@223)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@223)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$R@@111| T@U) ) (!  (=> (and (= (type |#$T0@@98|) TyType) (= (type |#$R@@111|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@98| |#$R@@111|)) |#$T0@@98|)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@98| |#$R@@111|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@224)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@224)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$R@@112| T@U) ) (!  (=> (and (= (type |#$T0@@99|) TyType) (= (type |#$R@@112|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@99| |#$R@@112|)) |#$R@@112|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@99| |#$R@@112|)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$R@@113| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$R@@113|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hFunc1OS |#$T0@@100| |#$R@@113|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hFunc1OS |#$T0@@100| |#$R@@113|)))) :qid |unknown.0:0| :skolemid |958| :pattern ( ($IsBox bx@@65 (Tclass._System.___hFunc1OS |#$T0@@100| |#$R@@113|))) )))
(assert (forall ((arg0@@225 T@U) (arg1@@101 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@225 arg1@@101)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@225 arg1@@101)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$R@@114| T@U) ) (!  (=> (and (= (type |#$T0@@101|) TyType) (= (type |#$R@@114|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@101| |#$R@@114|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@101| |#$R@@114|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@101| |#$R@@114|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@226)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@226)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$R@@115| T@U) ) (!  (=> (and (= (type |#$T0@@102|) TyType) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@102| |#$R@@115|)) |#$T0@@102|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@102| |#$R@@115|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@227)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@227)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$R@@116| T@U) ) (!  (=> (and (= (type |#$T0@@103|) TyType) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@103| |#$R@@116|)) |#$R@@116|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@103| |#$R@@116|)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$R@@117| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$R@@117|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hPartialFunc1OS |#$T0@@104| |#$R@@117|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hPartialFunc1OS |#$T0@@104| |#$R@@117|)))) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsBox bx@@66 (Tclass._System.___hPartialFunc1OS |#$T0@@104| |#$R@@117|))) )))
(assert (forall ((|#$T0@@105| T@U) (|#$R@@118| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (= (type |#$T0@@105|) TyType) (= (type |#$R@@118|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc1OS |#$T0@@105| |#$R@@118|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc1OS |#$T0@@105| |#$R@@118|)) (forall ((|x0#0@@9| T@U) ) (!  (=> (and (= (type |x0#0@@9|) BoxType) ($IsBox |x0#0@@9| |#$T0@@105|)) (|Set#Equal| (Reads1 |#$T0@@105| |#$R@@118| $OneHeap |f#0@@23| |x0#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |963| :no-pattern (type |x0#0@@9|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) ))))) :qid |unknown.0:0| :skolemid |964| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc1OS |#$T0@@105| |#$R@@118|))) )))
(assert (forall ((|#$T0@@106| T@U) (|#$R@@119| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$R@@119|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc1OS |#$T0@@106| |#$R@@119|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc1OS |#$T0@@106| |#$R@@119|) $h@@20))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc1OS |#$T0@@106| |#$R@@119|) $h@@20)) )))
(assert (forall ((arg0@@228 T@U) (arg1@@102 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@228 arg1@@102)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@228 arg1@@102)) )))
(assert (forall ((|#$T0@@107| T@U) (|#$R@@120| T@U) ) (!  (=> (and (= (type |#$T0@@107|) TyType) (= (type |#$R@@120|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@107| |#$R@@120|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@107| |#$R@@120|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |966| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@107| |#$R@@120|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@229)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@229)) )))
(assert (forall ((|#$T0@@108| T@U) (|#$R@@121| T@U) ) (!  (=> (and (= (type |#$T0@@108|) TyType) (= (type |#$R@@121|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@108| |#$R@@121|)) |#$T0@@108|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@108| |#$R@@121|)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@230)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@230)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$R@@122| T@U) ) (!  (=> (and (= (type |#$T0@@109|) TyType) (= (type |#$R@@122|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@109| |#$R@@122|)) |#$R@@122|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@109| |#$R@@122|)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$R@@123| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$R@@123|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hTotalFunc1OS |#$T0@@110| |#$R@@123|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hTotalFunc1OS |#$T0@@110| |#$R@@123|)))) :qid |unknown.0:0| :skolemid |969| :pattern ( ($IsBox bx@@67 (Tclass._System.___hTotalFunc1OS |#$T0@@110| |#$R@@123|))) )))
(assert (forall ((|#$T0@@111| T@U) (|#$R@@124| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@111|) TyType) (= (type |#$R@@124|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc1OS |#$T0@@111| |#$R@@124|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc1OS |#$T0@@111| |#$R@@124|)) (forall ((|x0#0@@10| T@U) ) (!  (=> (and (= (type |x0#0@@10|) BoxType) ($IsBox |x0#0@@10| |#$T0@@111|)) (Requires1 |#$T0@@111| |#$R@@124| $OneHeap |f#0@@25| |x0#0@@10|)) :qid |unknown.0:0| :skolemid |970| :no-pattern (type |x0#0@@10|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) ))))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc1OS |#$T0@@111| |#$R@@124|))) )))
(assert (forall ((|#$T0@@112| T@U) (|#$R@@125| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$R@@125|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc1OS |#$T0@@112| |#$R@@125|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc1OS |#$T0@@112| |#$R@@125|) $h@@21))) :qid |unknown.0:0| :skolemid |972| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc1OS |#$T0@@112| |#$R@@125|) $h@@21)) )))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@231)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@231)) )))
(assert (forall ((|#$R@@126| T@U) ) (!  (=> (= (type |#$R@@126|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@126|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@126|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.___hFunc0L |#$R@@126|)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@232)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@232)) )))
(assert (forall ((|#$R@@127| T@U) ) (!  (=> (= (type |#$R@@127|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@127|)) |#$R@@127|)) :qid |unknown.0:0| :skolemid |974| :pattern ( (Tclass._System.___hFunc0L |#$R@@127|)) )))
(assert (forall ((|#$R@@128| T@U) (bx@@68 T@U) ) (!  (=> (and (and (= (type |#$R@@128|) TyType) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc0L |#$R@@128|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc0L |#$R@@128|)))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc0L |#$R@@128|))) )))
(assert (forall ((arg0@@233 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@233)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@233)) )))
(assert (forall ((|#$R@@129| T@U) ) (!  (=> (= (type |#$R@@129|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@129|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@129|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |976| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@129|)) )))
(assert (forall ((arg0@@234 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@234)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@234)) )))
(assert (forall ((|#$R@@130| T@U) ) (!  (=> (= (type |#$R@@130|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@130|)) |#$R@@130|)) :qid |unknown.0:0| :skolemid |977| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@130|)) )))
(assert (forall ((|#$R@@131| T@U) (bx@@69 T@U) ) (!  (=> (and (and (= (type |#$R@@131|) TyType) (= (type bx@@69) BoxType)) ($IsBox bx@@69 (Tclass._System.___hPartialFunc0L |#$R@@131|))) (and (= ($Box ($Unbox HandleTypeType bx@@69)) bx@@69) ($Is ($Unbox HandleTypeType bx@@69) (Tclass._System.___hPartialFunc0L |#$R@@131|)))) :qid |unknown.0:0| :skolemid |978| :pattern ( ($IsBox bx@@69 (Tclass._System.___hPartialFunc0L |#$R@@131|))) )))
(assert (forall ((|#$R@@132| T@U) (|f#0@@27| T@U) ) (!  (=> (and (= (type |#$R@@132|) TyType) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc0L |#$R@@132|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc0L |#$R@@132|)) (|Set#Equal| (Reads0 |#$R@@132| $OneHeap |f#0@@27|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc0L |#$R@@132|))) )))
(assert (forall ((|#$R@@133| T@U) (|f#0@@28| T@U) ($h@@22 T@U) ) (!  (=> (and (and (= (type |#$R@@133|) TyType) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc0L |#$R@@133|) $h@@22) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc0L |#$R@@133|) $h@@22))) :qid |unknown.0:0| :skolemid |980| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc0L |#$R@@133|) $h@@22)) )))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@235)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@235)) )))
(assert (forall ((|#$R@@134| T@U) ) (!  (=> (= (type |#$R@@134|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@134|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@134|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |981| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@134|)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@236)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@236)) )))
(assert (forall ((|#$R@@135| T@U) ) (!  (=> (= (type |#$R@@135|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@135|)) |#$R@@135|)) :qid |unknown.0:0| :skolemid |982| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@135|)) )))
(assert (forall ((|#$R@@136| T@U) (bx@@70 T@U) ) (!  (=> (and (and (= (type |#$R@@136|) TyType) (= (type bx@@70) BoxType)) ($IsBox bx@@70 (Tclass._System.___hTotalFunc0L |#$R@@136|))) (and (= ($Box ($Unbox HandleTypeType bx@@70)) bx@@70) ($Is ($Unbox HandleTypeType bx@@70) (Tclass._System.___hTotalFunc0L |#$R@@136|)))) :qid |unknown.0:0| :skolemid |983| :pattern ( ($IsBox bx@@70 (Tclass._System.___hTotalFunc0L |#$R@@136|))) )))
(assert (forall ((|#$R@@137| T@U) (|f#0@@29| T@U) ) (!  (=> (and (= (type |#$R@@137|) TyType) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc0L |#$R@@137|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc0L |#$R@@137|)) (Requires0 |#$R@@137| $OneHeap |f#0@@29|)))) :qid |unknown.0:0| :skolemid |984| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc0L |#$R@@137|))) )))
(assert (forall ((|#$R@@138| T@U) (|f#0@@30| T@U) ($h@@23 T@U) ) (!  (=> (and (and (= (type |#$R@@138|) TyType) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc0L |#$R@@138|) $h@@23) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc0L |#$R@@138|) $h@@23))) :qid |unknown.0:0| :skolemid |985| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc0L |#$R@@138|) $h@@23)) )))
(assert (forall ((arg0@@237 T@U) (arg1@@103 T@U) (arg2@@52 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@237 arg1@@103 arg2@@52)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@237 arg1@@103 arg2@@52)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@81| T@U) (|#$R@@139| T@U) ) (!  (=> (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$R@@139|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@113| |#$T1@@81| |#$R@@139|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@113| |#$T1@@81| |#$R@@139|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |986| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@113| |#$T1@@81| |#$R@@139|)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@238)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@238)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@82| T@U) (|#$R@@140| T@U) ) (!  (=> (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@114| |#$T1@@82| |#$R@@140|)) |#$T0@@114|)) :qid |unknown.0:0| :skolemid |987| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@114| |#$T1@@82| |#$R@@140|)) )))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@239)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@239)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@83| T@U) (|#$R@@141| T@U) ) (!  (=> (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$R@@141|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@115| |#$T1@@83| |#$R@@141|)) |#$T1@@83|)) :qid |unknown.0:0| :skolemid |988| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@115| |#$T1@@83| |#$R@@141|)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@240)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@240)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@84| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$R@@142|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@116| |#$T1@@84| |#$R@@142|)) |#$R@@142|)) :qid |unknown.0:0| :skolemid |989| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@116| |#$T1@@84| |#$R@@142|)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@85| T@U) (|#$R@@143| T@U) (bx@@71 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$R@@143|) TyType)) (= (type bx@@71) BoxType)) ($IsBox bx@@71 (Tclass._System.___hFunc2LOO |#$T0@@117| |#$T1@@85| |#$R@@143|))) (and (= ($Box ($Unbox HandleTypeType bx@@71)) bx@@71) ($Is ($Unbox HandleTypeType bx@@71) (Tclass._System.___hFunc2LOO |#$T0@@117| |#$T1@@85| |#$R@@143|)))) :qid |unknown.0:0| :skolemid |990| :pattern ( ($IsBox bx@@71 (Tclass._System.___hFunc2LOO |#$T0@@117| |#$T1@@85| |#$R@@143|))) )))
(assert (forall ((arg0@@241 T@U) (arg1@@104 T@U) (arg2@@53 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@241 arg1@@104 arg2@@53)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@241 arg1@@104 arg2@@53)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@86| T@U) (|#$R@@144| T@U) ) (!  (=> (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$R@@144|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@118| |#$T1@@86| |#$R@@144|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@118| |#$T1@@86| |#$R@@144|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |991| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@118| |#$T1@@86| |#$R@@144|)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@242)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@242)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@87| T@U) (|#$R@@145| T@U) ) (!  (=> (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$R@@145|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@119| |#$T1@@87| |#$R@@145|)) |#$T0@@119|)) :qid |unknown.0:0| :skolemid |992| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@119| |#$T1@@87| |#$R@@145|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@243)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@243)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@88| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@120| |#$T1@@88| |#$R@@146|)) |#$T1@@88|)) :qid |unknown.0:0| :skolemid |993| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@120| |#$T1@@88| |#$R@@146|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@244)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@244)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@89| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@121| |#$T1@@89| |#$R@@147|)) |#$R@@147|)) :qid |unknown.0:0| :skolemid |994| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@121| |#$T1@@89| |#$R@@147|)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@90| T@U) (|#$R@@148| T@U) (bx@@72 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$R@@148|) TyType)) (= (type bx@@72) BoxType)) ($IsBox bx@@72 (Tclass._System.___hPartialFunc2LOO |#$T0@@122| |#$T1@@90| |#$R@@148|))) (and (= ($Box ($Unbox HandleTypeType bx@@72)) bx@@72) ($Is ($Unbox HandleTypeType bx@@72) (Tclass._System.___hPartialFunc2LOO |#$T0@@122| |#$T1@@90| |#$R@@148|)))) :qid |unknown.0:0| :skolemid |995| :pattern ( ($IsBox bx@@72 (Tclass._System.___hPartialFunc2LOO |#$T0@@122| |#$T1@@90| |#$R@@148|))) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@91| T@U) (|#$R@@149| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$R@@149|) TyType)) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc2LOO |#$T0@@123| |#$T1@@91| |#$R@@149|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc2LOO |#$T0@@123| |#$T1@@91| |#$R@@149|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) ) (!  (=> (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (and ($IsBox |x0#0@@11| |#$T0@@123|) ($IsBox |x1#0@@7| |#$T1@@91|))) (|Set#Equal| (Reads2 |#$T0@@123| |#$T1@@91| |#$R@@149| $OneHeap |f#0@@31| |x0#0@@11| |x1#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |996| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) ))))) :qid |unknown.0:0| :skolemid |997| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc2LOO |#$T0@@123| |#$T1@@91| |#$R@@149|))) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@92| T@U) (|#$R@@150| T@U) (|f#0@@32| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$R@@150|) TyType)) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc2LOO |#$T0@@124| |#$T1@@92| |#$R@@150|) $h@@24) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc2LOO |#$T0@@124| |#$T1@@92| |#$R@@150|) $h@@24))) :qid |unknown.0:0| :skolemid |998| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc2LOO |#$T0@@124| |#$T1@@92| |#$R@@150|) $h@@24)) )))
(assert (forall ((arg0@@245 T@U) (arg1@@105 T@U) (arg2@@54 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@245 arg1@@105 arg2@@54)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@245 arg1@@105 arg2@@54)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@93| T@U) (|#$R@@151| T@U) ) (!  (=> (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$R@@151|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@125| |#$T1@@93| |#$R@@151|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@125| |#$T1@@93| |#$R@@151|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |999| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@125| |#$T1@@93| |#$R@@151|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@246)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@246)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@94| T@U) (|#$R@@152| T@U) ) (!  (=> (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$R@@152|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@126| |#$T1@@94| |#$R@@152|)) |#$T0@@126|)) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@126| |#$T1@@94| |#$R@@152|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@247)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@247)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@95| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$R@@153|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@127| |#$T1@@95| |#$R@@153|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |1001| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@127| |#$T1@@95| |#$R@@153|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@248)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@248)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@96| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@128| |#$T1@@96| |#$R@@154|)) |#$R@@154|)) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@128| |#$T1@@96| |#$R@@154|)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@97| T@U) (|#$R@@155| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$R@@155|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hTotalFunc2LOO |#$T0@@129| |#$T1@@97| |#$R@@155|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hTotalFunc2LOO |#$T0@@129| |#$T1@@97| |#$R@@155|)))) :qid |unknown.0:0| :skolemid |1003| :pattern ( ($IsBox bx@@73 (Tclass._System.___hTotalFunc2LOO |#$T0@@129| |#$T1@@97| |#$R@@155|))) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@98| T@U) (|#$R@@156| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$R@@156|) TyType)) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc2LOO |#$T0@@130| |#$T1@@98| |#$R@@156|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc2LOO |#$T0@@130| |#$T1@@98| |#$R@@156|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) ) (!  (=> (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (and ($IsBox |x0#0@@12| |#$T0@@130|) ($IsBox |x1#0@@8| |#$T1@@98|))) (Requires2 |#$T0@@130| |#$T1@@98| |#$R@@156| $OneHeap |f#0@@33| |x0#0@@12| |x1#0@@8|)) :qid |unknown.0:0| :skolemid |1004| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) ))))) :qid |unknown.0:0| :skolemid |1005| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc2LOO |#$T0@@130| |#$T1@@98| |#$R@@156|))) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@99| T@U) (|#$R@@157| T@U) (|f#0@@34| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$R@@157|) TyType)) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc2LOO |#$T0@@131| |#$T1@@99| |#$R@@157|) $h@@25) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc2LOO |#$T0@@131| |#$T1@@99| |#$R@@157|) $h@@25))) :qid |unknown.0:0| :skolemid |1006| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc2LOO |#$T0@@131| |#$T1@@99| |#$R@@157|) $h@@25)) )))
(assert  (and (forall ((arg0@@249 T@U) ) (! (= (type (DatatypeCtorId arg0@@249)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@249)) )) (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType)))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1007| :pattern ( (_System.Tuple0.___hMake0_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@1)) (= d@@1 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (_System.Tuple0.___hMake0_q d@@1)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@74)) bx@@74) ($Is ($Unbox DatatypeTypeType bx@@74) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($IsBox bx@@74 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@26 T@U) ) (!  (=> (and (= (type $h@@26) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@26)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) :qid |DafnyPreludebpl.545:12| :skolemid |1010| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@2 T@U) ) (!  (=> (and (= (type d@@2) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@2)) (_System.Tuple0.___hMake0_q d@@2)) :qid |unknown.0:0| :skolemid |1011| :pattern ( (|$IsA#_System.Tuple0| d@@2)) )))
(assert (forall ((d@@3 T@U) ) (!  (=> (and (= (type d@@3) DatatypeTypeType) ($Is d@@3 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@3)) :qid |unknown.0:0| :skolemid |1012| :pattern ( (_System.Tuple0.___hMake0_q d@@3) ($Is d@@3 Tclass._System.Tuple0)) )))
(assert (forall ((a@@106 T@U) (b@@62 T@U) ) (!  (=> (and (and (= (type a@@106) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@106 b@@62) true)) :qid |unknown.0:0| :skolemid |1013| :pattern ( (|_System.Tuple0#Equal| a@@106 b@@62)) )))
(assert (forall ((a@@107 T@U) (b@@63 T@U) ) (!  (=> (and (= (type a@@107) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@107 b@@63) (= a@@107 b@@63))) :qid |unknown.0:0| :skolemid |1014| :pattern ( (|_System.Tuple0#Equal| a@@107 b@@63)) )))
(assert (forall ((arg0@@250 T@U) (arg1@@106 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@250 arg1@@106)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@250 arg1@@106)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$R@@158| T@U) ) (!  (=> (and (= (type |#$T0@@132|) TyType) (= (type |#$R@@158|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@132| |#$R@@158|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@132| |#$R@@158|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@132| |#$R@@158|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@251)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@251)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$R@@159| T@U) ) (!  (=> (and (= (type |#$T0@@133|) TyType) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@133| |#$R@@159|)) |#$T0@@133|)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@133| |#$R@@159|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@252)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@252)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$R@@160| T@U) ) (!  (=> (and (= (type |#$T0@@134|) TyType) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@134| |#$R@@160|)) |#$R@@160|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@134| |#$R@@160|)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$R@@161| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$R@@161|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hFunc1OL |#$T0@@135| |#$R@@161|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hFunc1OL |#$T0@@135| |#$R@@161|)))) :qid |unknown.0:0| :skolemid |1018| :pattern ( ($IsBox bx@@75 (Tclass._System.___hFunc1OL |#$T0@@135| |#$R@@161|))) )))
(assert (forall ((arg0@@253 T@U) (arg1@@107 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@253 arg1@@107)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@253 arg1@@107)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$R@@162| T@U) ) (!  (=> (and (= (type |#$T0@@136|) TyType) (= (type |#$R@@162|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@136| |#$R@@162|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@136| |#$R@@162|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1019| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@136| |#$R@@162|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@254)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@254)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$R@@163| T@U) ) (!  (=> (and (= (type |#$T0@@137|) TyType) (= (type |#$R@@163|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@137| |#$R@@163|)) |#$T0@@137|)) :qid |unknown.0:0| :skolemid |1020| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@137| |#$R@@163|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@255)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@255)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$R@@164| T@U) ) (!  (=> (and (= (type |#$T0@@138|) TyType) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@138| |#$R@@164|)) |#$R@@164|)) :qid |unknown.0:0| :skolemid |1021| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@138| |#$R@@164|)) )))
(assert (forall ((|#$T0@@139| T@U) (|#$R@@165| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$R@@165|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hPartialFunc1OL |#$T0@@139| |#$R@@165|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hPartialFunc1OL |#$T0@@139| |#$R@@165|)))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($IsBox bx@@76 (Tclass._System.___hPartialFunc1OL |#$T0@@139| |#$R@@165|))) )))
(assert (forall ((|#$T0@@140| T@U) (|#$R@@166| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@140|) TyType) (= (type |#$R@@166|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OL |#$T0@@140| |#$R@@166|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc1OL |#$T0@@140| |#$R@@166|)) (forall ((|x0#0@@13| T@U) ) (!  (=> (and (= (type |x0#0@@13|) BoxType) ($IsBox |x0#0@@13| |#$T0@@140|)) (|Set#Equal| (Reads1 |#$T0@@140| |#$R@@166| $OneHeap |f#0@@35| |x0#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1023| :no-pattern (type |x0#0@@13|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1024| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OL |#$T0@@140| |#$R@@166|))) )))
(assert (forall ((|#$T0@@141| T@U) (|#$R@@167| T@U) (|f#0@@36| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$R@@167|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OL |#$T0@@141| |#$R@@167|) $h@@27) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc1OL |#$T0@@141| |#$R@@167|) $h@@27))) :qid |unknown.0:0| :skolemid |1025| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OL |#$T0@@141| |#$R@@167|) $h@@27)) )))
(assert (forall ((arg0@@256 T@U) (arg1@@108 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@256 arg1@@108)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@256 arg1@@108)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$R@@168| T@U) ) (!  (=> (and (= (type |#$T0@@142|) TyType) (= (type |#$R@@168|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@142| |#$R@@168|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@142| |#$R@@168|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@142| |#$R@@168|)) )))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@257)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@257)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$R@@169| T@U) ) (!  (=> (and (= (type |#$T0@@143|) TyType) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@143| |#$R@@169|)) |#$T0@@143|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@143| |#$R@@169|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@258)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@258)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$R@@170| T@U) ) (!  (=> (and (= (type |#$T0@@144|) TyType) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@144| |#$R@@170|)) |#$R@@170|)) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@144| |#$R@@170|)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$R@@171| T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$R@@171|) TyType)) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hTotalFunc1OL |#$T0@@145| |#$R@@171|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hTotalFunc1OL |#$T0@@145| |#$R@@171|)))) :qid |unknown.0:0| :skolemid |1029| :pattern ( ($IsBox bx@@77 (Tclass._System.___hTotalFunc1OL |#$T0@@145| |#$R@@171|))) )))
(assert (forall ((|#$T0@@146| T@U) (|#$R@@172| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (= (type |#$T0@@146|) TyType) (= (type |#$R@@172|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OL |#$T0@@146| |#$R@@172|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc1OL |#$T0@@146| |#$R@@172|)) (forall ((|x0#0@@14| T@U) ) (!  (=> (and (= (type |x0#0@@14|) BoxType) ($IsBox |x0#0@@14| |#$T0@@146|)) (Requires1 |#$T0@@146| |#$R@@172| $OneHeap |f#0@@37| |x0#0@@14|)) :qid |unknown.0:0| :skolemid |1030| :no-pattern (type |x0#0@@14|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1031| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OL |#$T0@@146| |#$R@@172|))) )))
(assert (forall ((|#$T0@@147| T@U) (|#$R@@173| T@U) (|f#0@@38| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$R@@173|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OL |#$T0@@147| |#$R@@173|) $h@@28) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc1OL |#$T0@@147| |#$R@@173|) $h@@28))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OL |#$T0@@147| |#$R@@173|) $h@@28)) )))
(assert (forall ((arg0@@259 T@U) (arg1@@109 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@259 arg1@@109)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@259 arg1@@109)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$R@@174| T@U) ) (!  (=> (and (= (type |#$T0@@148|) TyType) (= (type |#$R@@174|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@148| |#$R@@174|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@148| |#$R@@174|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@148| |#$R@@174|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@260)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$R@@175| T@U) ) (!  (=> (and (= (type |#$T0@@149|) TyType) (= (type |#$R@@175|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@149| |#$R@@175|)) |#$T0@@149|)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@149| |#$R@@175|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@261)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@261)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$R@@176| T@U) ) (!  (=> (and (= (type |#$T0@@150|) TyType) (= (type |#$R@@176|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@150| |#$R@@176|)) |#$R@@176|)) :qid |unknown.0:0| :skolemid |1035| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@150| |#$R@@176|)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$R@@177| T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$R@@177|) TyType)) (= (type bx@@78) BoxType)) ($IsBox bx@@78 (Tclass._System.___hFunc1LO |#$T0@@151| |#$R@@177|))) (and (= ($Box ($Unbox HandleTypeType bx@@78)) bx@@78) ($Is ($Unbox HandleTypeType bx@@78) (Tclass._System.___hFunc1LO |#$T0@@151| |#$R@@177|)))) :qid |unknown.0:0| :skolemid |1036| :pattern ( ($IsBox bx@@78 (Tclass._System.___hFunc1LO |#$T0@@151| |#$R@@177|))) )))
(assert (forall ((arg0@@262 T@U) (arg1@@110 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@262 arg1@@110)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@262 arg1@@110)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$R@@178| T@U) ) (!  (=> (and (= (type |#$T0@@152|) TyType) (= (type |#$R@@178|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@152| |#$R@@178|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@152| |#$R@@178|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1037| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@152| |#$R@@178|)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@263)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@263)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$R@@179| T@U) ) (!  (=> (and (= (type |#$T0@@153|) TyType) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@153| |#$R@@179|)) |#$T0@@153|)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@153| |#$R@@179|)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@264)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@264)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$R@@180| T@U) ) (!  (=> (and (= (type |#$T0@@154|) TyType) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@154| |#$R@@180|)) |#$R@@180|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@154| |#$R@@180|)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$R@@181| T@U) (bx@@79 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$R@@181|) TyType)) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass._System.___hPartialFunc1LO |#$T0@@155| |#$R@@181|))) (and (= ($Box ($Unbox HandleTypeType bx@@79)) bx@@79) ($Is ($Unbox HandleTypeType bx@@79) (Tclass._System.___hPartialFunc1LO |#$T0@@155| |#$R@@181|)))) :qid |unknown.0:0| :skolemid |1040| :pattern ( ($IsBox bx@@79 (Tclass._System.___hPartialFunc1LO |#$T0@@155| |#$R@@181|))) )))
(assert (forall ((|#$T0@@156| T@U) (|#$R@@182| T@U) (|f#0@@39| T@U) ) (!  (=> (and (and (= (type |#$T0@@156|) TyType) (= (type |#$R@@182|) TyType)) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc1LO |#$T0@@156| |#$R@@182|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc1LO |#$T0@@156| |#$R@@182|)) (forall ((|x0#0@@15| T@U) ) (!  (=> (and (= (type |x0#0@@15|) BoxType) ($IsBox |x0#0@@15| |#$T0@@156|)) (|Set#Equal| (Reads1 |#$T0@@156| |#$R@@182| $OneHeap |f#0@@39| |x0#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1041| :no-pattern (type |x0#0@@15|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1042| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc1LO |#$T0@@156| |#$R@@182|))) )))
(assert (forall ((|#$T0@@157| T@U) (|#$R@@183| T@U) (|f#0@@40| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$R@@183|) TyType)) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1LO |#$T0@@157| |#$R@@183|) $h@@29) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc1LO |#$T0@@157| |#$R@@183|) $h@@29))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1LO |#$T0@@157| |#$R@@183|) $h@@29)) )))
(assert (forall ((arg0@@265 T@U) (arg1@@111 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@265 arg1@@111)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@265 arg1@@111)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$R@@184| T@U) ) (!  (=> (and (= (type |#$T0@@158|) TyType) (= (type |#$R@@184|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@158| |#$R@@184|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@158| |#$R@@184|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@158| |#$R@@184|)) )))
(assert (forall ((arg0@@266 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@266)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@266)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$R@@185| T@U) ) (!  (=> (and (= (type |#$T0@@159|) TyType) (= (type |#$R@@185|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@159| |#$R@@185|)) |#$T0@@159|)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@159| |#$R@@185|)) )))
(assert (forall ((arg0@@267 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@267)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@267)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$R@@186| T@U) ) (!  (=> (and (= (type |#$T0@@160|) TyType) (= (type |#$R@@186|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@160| |#$R@@186|)) |#$R@@186|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@160| |#$R@@186|)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$R@@187| T@U) (bx@@80 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$R@@187|) TyType)) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass._System.___hTotalFunc1LO |#$T0@@161| |#$R@@187|))) (and (= ($Box ($Unbox HandleTypeType bx@@80)) bx@@80) ($Is ($Unbox HandleTypeType bx@@80) (Tclass._System.___hTotalFunc1LO |#$T0@@161| |#$R@@187|)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($IsBox bx@@80 (Tclass._System.___hTotalFunc1LO |#$T0@@161| |#$R@@187|))) )))
(assert (forall ((|#$T0@@162| T@U) (|#$R@@188| T@U) (|f#0@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@162|) TyType) (= (type |#$R@@188|) TyType)) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc1LO |#$T0@@162| |#$R@@188|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc1LO |#$T0@@162| |#$R@@188|)) (forall ((|x0#0@@16| T@U) ) (!  (=> (and (= (type |x0#0@@16|) BoxType) ($IsBox |x0#0@@16| |#$T0@@162|)) (Requires1 |#$T0@@162| |#$R@@188| $OneHeap |f#0@@41| |x0#0@@16|)) :qid |unknown.0:0| :skolemid |1048| :no-pattern (type |x0#0@@16|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1049| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc1LO |#$T0@@162| |#$R@@188|))) )))
(assert (forall ((|#$T0@@163| T@U) (|#$R@@189| T@U) (|f#0@@42| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$R@@189|) TyType)) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1LO |#$T0@@163| |#$R@@189|) $h@@30) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc1LO |#$T0@@163| |#$R@@189|) $h@@30))) :qid |unknown.0:0| :skolemid |1050| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1LO |#$T0@@163| |#$R@@189|) $h@@30)) )))
(assert (forall ((arg0@@268 T@U) (arg1@@112 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@268 arg1@@112)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@268 arg1@@112)) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#5#0#0| |a#5#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1051| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (= (type d@@4) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@4) (= (DatatypeCtorId d@@4) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1052| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@4)) )))
(assert (forall ((d@@5 T@U) ) (!  (=> (and (= (type d@@5) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@5)) (exists ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (and (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (= d@@5 (|#_System._tuple#2OLL._#Make2| |a#6#0#0| |a#6#1#0|))) :qid |unknown.0:0| :skolemid |1053| :no-pattern (type |a#6#0#0|) :no-pattern (type |a#6#1#0|) :no-pattern (U_2_int |a#6#0#0|) :no-pattern (U_2_bool |a#6#0#0|) :no-pattern (U_2_int |a#6#1#0|) :no-pattern (U_2_bool |a#6#1#0|) ))) :qid |unknown.0:0| :skolemid |1054| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@5)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@113 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@269 arg1@@113)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@269 arg1@@113)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1055| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@270)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@270)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1056| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@271)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@271)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1057| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@81 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@81)) bx@@81) ($Is ($Unbox DatatypeTypeType bx@@81) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsBox bx@@81 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#7#0#0|) BoxType)) (= (type |a#7#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#7#0#0| |a#7#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#7#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#7#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#7#0#0| |a#7#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#8#0#0| T@U) (|a#8#1#0| T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#8#0#0|) BoxType)) (= (type |a#8#1#0|) BoxType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@31)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#8#0#0| |a#8#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@31)  (and ($IsAllocBox |a#8#0#0| |_System._tuple#2OLL$T0@@4| $h@@31) ($IsAllocBox |a#8#1#0| |_System._tuple#2OLL$T1@@4| $h@@31)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#8#0#0| |a#8#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@31)) )))
(assert (forall ((arg0@@272 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@272)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@272)) )))
(assert (forall ((d@@6 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@32 T@U) ) (!  (=> (and (and (and (= (type d@@6) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@32) (and (_System.Tuple2OLL.___hMake2_q d@@6) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@6 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@32)) :qid |unknown.0:0| :skolemid |1061| :pattern ( ($IsAlloc d@@6 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@32)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@6) |_System._tuple#2OLL$T0@@5| $h@@32)) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@6) |_System._tuple#2OLL$T0@@5| $h@@32)) )))
(assert (forall ((arg0@@273 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@273)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@273)) )))
(assert (forall ((d@@7 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (= (type d@@7) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@33) (and (_System.Tuple2OLL.___hMake2_q d@@7) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@7 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@33)) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsAlloc d@@7 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@33)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@7) |_System._tuple#2OLL$T1@@6| $h@@33)) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@7) |_System._tuple#2OLL$T1@@6| $h@@33)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) ) (!  (=> (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#9#0#0|) (Lit |a#9#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#9#0#0| |a#9#1#0|)))) :qid |unknown.0:0| :skolemid |1065| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#9#0#0|) (Lit |a#9#1#0|))) )))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) ) (!  (=> (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#10#0#0| |a#10#1#0|)) |a#10#0#0|)) :qid |unknown.0:0| :skolemid |1066| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#10#0#0| |a#10#1#0|)) )))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (!  (=> (and (= (type |a#11#0#0|) BoxType) (= (type |a#11#1#0|) BoxType)) (< (BoxRank |a#11#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#11#0#0| |a#11#1#0|)))) :qid |unknown.0:0| :skolemid |1067| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#11#0#0| |a#11#1#0|)) )))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0|) BoxType) (= (type |a#12#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#12#0#0| |a#12#1#0|)) |a#12#1#0|)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#12#0#0| |a#12#1#0|)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (= (type |a#13#0#0|) BoxType) (= (type |a#13#1#0|) BoxType)) (< (BoxRank |a#13#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#13#0#0| |a#13#1#0|)))) :qid |unknown.0:0| :skolemid |1069| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#13#0#0| |a#13#1#0|)) )))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@8)) (_System.Tuple2OLL.___hMake2_q d@@8)) :qid |unknown.0:0| :skolemid |1070| :pattern ( (|$IsA#_System.Tuple2OLL| d@@8)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@9 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@9) DatatypeTypeType)) ($Is d@@9 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@9)) :qid |unknown.0:0| :skolemid |1071| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@9) ($Is d@@9 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@108 T@U) (b@@64 T@U) ) (!  (=> (and (and (= (type a@@108) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@108 b@@64)  (and (= (_System.Tuple2OLL._0 a@@108) (_System.Tuple2OLL._0 b@@64)) (= (_System.Tuple2OLL._1 a@@108) (_System.Tuple2OLL._1 b@@64))))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (|_System.Tuple2OLL#Equal| a@@108 b@@64)) )))
(assert (forall ((a@@109 T@U) (b@@65 T@U) ) (!  (=> (and (= (type a@@109) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@109 b@@65) (= a@@109 b@@65))) :qid |unknown.0:0| :skolemid |1073| :pattern ( (|_System.Tuple2OLL#Equal| a@@109 b@@65)) )))
(assert (forall ((arg0@@274 T@U) (arg1@@114 T@U) (arg2@@55 T@U) (arg3@@28 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@274 arg1@@114 arg2@@55 arg3@@28)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@274 arg1@@114 arg2@@55 arg3@@28)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@100| T@U) (|#$T2@@43| T@U) (|#$R@@190| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@190|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@164| |#$T1@@100| |#$T2@@43| |#$R@@190|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@164| |#$T1@@100| |#$T2@@43| |#$R@@190|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1074| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@164| |#$T1@@100| |#$T2@@43| |#$R@@190|)) )))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@275)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@275)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@101| T@U) (|#$T2@@44| T@U) (|#$R@@191| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@191|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@165| |#$T1@@101| |#$T2@@44| |#$R@@191|)) |#$T0@@165|)) :qid |unknown.0:0| :skolemid |1075| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@165| |#$T1@@101| |#$T2@@44| |#$R@@191|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@276)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@276)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@102| T@U) (|#$T2@@45| T@U) (|#$R@@192| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@192|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@166| |#$T1@@102| |#$T2@@45| |#$R@@192|)) |#$T1@@102|)) :qid |unknown.0:0| :skolemid |1076| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@166| |#$T1@@102| |#$T2@@45| |#$R@@192|)) )))
(assert (forall ((arg0@@277 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@277)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@277)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@103| T@U) (|#$T2@@46| T@U) (|#$R@@193| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$R@@193|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@167| |#$T1@@103| |#$T2@@46| |#$R@@193|)) |#$T2@@46|)) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@167| |#$T1@@103| |#$T2@@46| |#$R@@193|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@278)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@278)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@104| T@U) (|#$T2@@47| T@U) (|#$R@@194| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$R@@194|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@168| |#$T1@@104| |#$T2@@47| |#$R@@194|)) |#$R@@194|)) :qid |unknown.0:0| :skolemid |1078| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@168| |#$T1@@104| |#$T2@@47| |#$R@@194|)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@105| T@U) (|#$T2@@48| T@U) (|#$R@@195| T@U) (bx@@82 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$R@@195|) TyType)) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.___hFunc3LLOL |#$T0@@169| |#$T1@@105| |#$T2@@48| |#$R@@195|))) (and (= ($Box ($Unbox HandleTypeType bx@@82)) bx@@82) ($Is ($Unbox HandleTypeType bx@@82) (Tclass._System.___hFunc3LLOL |#$T0@@169| |#$T1@@105| |#$T2@@48| |#$R@@195|)))) :qid |unknown.0:0| :skolemid |1079| :pattern ( ($IsBox bx@@82 (Tclass._System.___hFunc3LLOL |#$T0@@169| |#$T1@@105| |#$T2@@48| |#$R@@195|))) )))
(assert (forall ((arg0@@279 T@U) (arg1@@115 T@U) (arg2@@56 T@U) (arg3@@29 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@279 arg1@@115 arg2@@56 arg3@@29)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@279 arg1@@115 arg2@@56 arg3@@29)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@106| T@U) (|#$T2@@49| T@U) (|#$R@@196| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$R@@196|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@170| |#$T1@@106| |#$T2@@49| |#$R@@196|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@170| |#$T1@@106| |#$T2@@49| |#$R@@196|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1080| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@170| |#$T1@@106| |#$T2@@49| |#$R@@196|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@280)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@280)) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@107| T@U) (|#$T2@@50| T@U) (|#$R@@197| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$R@@197|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@171| |#$T1@@107| |#$T2@@50| |#$R@@197|)) |#$T0@@171|)) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@171| |#$T1@@107| |#$T2@@50| |#$R@@197|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@281)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@281)) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@108| T@U) (|#$T2@@51| T@U) (|#$R@@198| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$R@@198|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@172| |#$T1@@108| |#$T2@@51| |#$R@@198|)) |#$T1@@108|)) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@172| |#$T1@@108| |#$T2@@51| |#$R@@198|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@282)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@282)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@109| T@U) (|#$T2@@52| T@U) (|#$R@@199| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$R@@199|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@173| |#$T1@@109| |#$T2@@52| |#$R@@199|)) |#$T2@@52|)) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@173| |#$T1@@109| |#$T2@@52| |#$R@@199|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@283)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@283)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@110| T@U) (|#$T2@@53| T@U) (|#$R@@200| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$R@@200|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@174| |#$T1@@110| |#$T2@@53| |#$R@@200|)) |#$R@@200|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@174| |#$T1@@110| |#$T2@@53| |#$R@@200|)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@111| T@U) (|#$T2@@54| T@U) (|#$R@@201| T@U) (bx@@83 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$R@@201|) TyType)) (= (type bx@@83) BoxType)) ($IsBox bx@@83 (Tclass._System.___hPartialFunc3LLOL |#$T0@@175| |#$T1@@111| |#$T2@@54| |#$R@@201|))) (and (= ($Box ($Unbox HandleTypeType bx@@83)) bx@@83) ($Is ($Unbox HandleTypeType bx@@83) (Tclass._System.___hPartialFunc3LLOL |#$T0@@175| |#$T1@@111| |#$T2@@54| |#$R@@201|)))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@83 (Tclass._System.___hPartialFunc3LLOL |#$T0@@175| |#$T1@@111| |#$T2@@54| |#$R@@201|))) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@112| T@U) (|#$T2@@55| T@U) (|#$R@@202| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$R@@202|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc3LLOL |#$T0@@176| |#$T1@@112| |#$T2@@55| |#$R@@202|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc3LLOL |#$T0@@176| |#$T1@@112| |#$T2@@55| |#$R@@202|)) (forall ((|x0#0@@17| T@U) (|x1#0@@9| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@17| |#$T0@@176|) ($IsBox |x1#0@@9| |#$T1@@112|)) ($IsBox |x2#0@@3| |#$T2@@55|))) (|Set#Equal| (Reads3 |#$T0@@176| |#$T1@@112| |#$T2@@55| |#$R@@202| $OneHeap |f#0@@43| |x0#0@@17| |x1#0@@9| |x2#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1086| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@3|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) ))))) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc3LLOL |#$T0@@176| |#$T1@@112| |#$T2@@55| |#$R@@202|))) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@113| T@U) (|#$T2@@56| T@U) (|#$R@@203| T@U) (|f#0@@44| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$R@@203|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc3LLOL |#$T0@@177| |#$T1@@113| |#$T2@@56| |#$R@@203|) $h@@34) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc3LLOL |#$T0@@177| |#$T1@@113| |#$T2@@56| |#$R@@203|) $h@@34))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc3LLOL |#$T0@@177| |#$T1@@113| |#$T2@@56| |#$R@@203|) $h@@34)) )))
(assert (forall ((arg0@@284 T@U) (arg1@@116 T@U) (arg2@@57 T@U) (arg3@@30 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@284 arg1@@116 arg2@@57 arg3@@30)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@284 arg1@@116 arg2@@57 arg3@@30)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@114| T@U) (|#$T2@@57| T@U) (|#$R@@204| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$R@@204|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@178| |#$T1@@114| |#$T2@@57| |#$R@@204|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@178| |#$T1@@114| |#$T2@@57| |#$R@@204|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1089| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@178| |#$T1@@114| |#$T2@@57| |#$R@@204|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@285)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@285)) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@115| T@U) (|#$T2@@58| T@U) (|#$R@@205| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$R@@205|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@179| |#$T1@@115| |#$T2@@58| |#$R@@205|)) |#$T0@@179|)) :qid |unknown.0:0| :skolemid |1090| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@179| |#$T1@@115| |#$T2@@58| |#$R@@205|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@286)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@286)) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@116| T@U) (|#$T2@@59| T@U) (|#$R@@206| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$R@@206|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@180| |#$T1@@116| |#$T2@@59| |#$R@@206|)) |#$T1@@116|)) :qid |unknown.0:0| :skolemid |1091| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@180| |#$T1@@116| |#$T2@@59| |#$R@@206|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@287)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@287)) )))
(assert (forall ((|#$T0@@181| T@U) (|#$T1@@117| T@U) (|#$T2@@60| T@U) (|#$R@@207| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@181|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$R@@207|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@181| |#$T1@@117| |#$T2@@60| |#$R@@207|)) |#$T2@@60|)) :qid |unknown.0:0| :skolemid |1092| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@181| |#$T1@@117| |#$T2@@60| |#$R@@207|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@288)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@288)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@118| T@U) (|#$T2@@61| T@U) (|#$R@@208| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$R@@208|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@182| |#$T1@@118| |#$T2@@61| |#$R@@208|)) |#$R@@208|)) :qid |unknown.0:0| :skolemid |1093| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@182| |#$T1@@118| |#$T2@@61| |#$R@@208|)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$T1@@119| T@U) (|#$T2@@62| T@U) (|#$R@@209| T@U) (bx@@84 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@183|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$R@@209|) TyType)) (= (type bx@@84) BoxType)) ($IsBox bx@@84 (Tclass._System.___hTotalFunc3LLOL |#$T0@@183| |#$T1@@119| |#$T2@@62| |#$R@@209|))) (and (= ($Box ($Unbox HandleTypeType bx@@84)) bx@@84) ($Is ($Unbox HandleTypeType bx@@84) (Tclass._System.___hTotalFunc3LLOL |#$T0@@183| |#$T1@@119| |#$T2@@62| |#$R@@209|)))) :qid |unknown.0:0| :skolemid |1094| :pattern ( ($IsBox bx@@84 (Tclass._System.___hTotalFunc3LLOL |#$T0@@183| |#$T1@@119| |#$T2@@62| |#$R@@209|))) )))
(assert (forall ((|#$T0@@184| T@U) (|#$T1@@120| T@U) (|#$T2@@63| T@U) (|#$R@@210| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@184|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$R@@210|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc3LLOL |#$T0@@184| |#$T1@@120| |#$T2@@63| |#$R@@210|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc3LLOL |#$T0@@184| |#$T1@@120| |#$T2@@63| |#$R@@210|)) (forall ((|x0#0@@18| T@U) (|x1#0@@10| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@18| |#$T0@@184|) ($IsBox |x1#0@@10| |#$T1@@120|)) ($IsBox |x2#0@@4| |#$T2@@63|))) (Requires3 |#$T0@@184| |#$T1@@120| |#$T2@@63| |#$R@@210| $OneHeap |f#0@@45| |x0#0@@18| |x1#0@@10| |x2#0@@4|)) :qid |unknown.0:0| :skolemid |1095| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@4|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) ))))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc3LLOL |#$T0@@184| |#$T1@@120| |#$T2@@63| |#$R@@210|))) )))
(assert (forall ((|#$T0@@185| T@U) (|#$T1@@121| T@U) (|#$T2@@64| T@U) (|#$R@@211| T@U) (|f#0@@46| T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@185|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$R@@211|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc3LLOL |#$T0@@185| |#$T1@@121| |#$T2@@64| |#$R@@211|) $h@@35) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc3LLOL |#$T0@@185| |#$T1@@121| |#$T2@@64| |#$R@@211|) $h@@35))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc3LLOL |#$T0@@185| |#$T1@@121| |#$T2@@64| |#$R@@211|) $h@@35)) )))
(assert (forall ((arg0@@289 T@U) (arg1@@117 T@U) (arg2@@58 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@289 arg1@@117 arg2@@58)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@289 arg1@@117 arg2@@58)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$T1@@122| T@U) (|#$R@@212| T@U) ) (!  (=> (and (and (= (type |#$T0@@186|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$R@@212|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@186| |#$T1@@122| |#$R@@212|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@186| |#$T1@@122| |#$R@@212|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1098| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@186| |#$T1@@122| |#$R@@212|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@290)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@290)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$T1@@123| T@U) (|#$R@@213| T@U) ) (!  (=> (and (and (= (type |#$T0@@187|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$R@@213|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@187| |#$T1@@123| |#$R@@213|)) |#$T0@@187|)) :qid |unknown.0:0| :skolemid |1099| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@187| |#$T1@@123| |#$R@@213|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@291)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@291)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$T1@@124| T@U) (|#$R@@214| T@U) ) (!  (=> (and (and (= (type |#$T0@@188|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$R@@214|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@188| |#$T1@@124| |#$R@@214|)) |#$T1@@124|)) :qid |unknown.0:0| :skolemid |1100| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@188| |#$T1@@124| |#$R@@214|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@292)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@292)) )))
(assert (forall ((|#$T0@@189| T@U) (|#$T1@@125| T@U) (|#$R@@215| T@U) ) (!  (=> (and (and (= (type |#$T0@@189|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$R@@215|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@189| |#$T1@@125| |#$R@@215|)) |#$R@@215|)) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@189| |#$T1@@125| |#$R@@215|)) )))
(assert (forall ((|#$T0@@190| T@U) (|#$T1@@126| T@U) (|#$R@@216| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@190|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$R@@216|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.___hFunc2SSO |#$T0@@190| |#$T1@@126| |#$R@@216|))) (and (= ($Box ($Unbox HandleTypeType bx@@85)) bx@@85) ($Is ($Unbox HandleTypeType bx@@85) (Tclass._System.___hFunc2SSO |#$T0@@190| |#$T1@@126| |#$R@@216|)))) :qid |unknown.0:0| :skolemid |1102| :pattern ( ($IsBox bx@@85 (Tclass._System.___hFunc2SSO |#$T0@@190| |#$T1@@126| |#$R@@216|))) )))
(assert (forall ((arg0@@293 T@U) (arg1@@118 T@U) (arg2@@59 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@293 arg1@@118 arg2@@59)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@293 arg1@@118 arg2@@59)) )))
(assert (forall ((|#$T0@@191| T@U) (|#$T1@@127| T@U) (|#$R@@217| T@U) ) (!  (=> (and (and (= (type |#$T0@@191|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$R@@217|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@191| |#$T1@@127| |#$R@@217|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@191| |#$T1@@127| |#$R@@217|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1103| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@191| |#$T1@@127| |#$R@@217|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@294)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@294)) )))
(assert (forall ((|#$T0@@192| T@U) (|#$T1@@128| T@U) (|#$R@@218| T@U) ) (!  (=> (and (and (= (type |#$T0@@192|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$R@@218|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@192| |#$T1@@128| |#$R@@218|)) |#$T0@@192|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@192| |#$T1@@128| |#$R@@218|)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@295)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@295)) )))
(assert (forall ((|#$T0@@193| T@U) (|#$T1@@129| T@U) (|#$R@@219| T@U) ) (!  (=> (and (and (= (type |#$T0@@193|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$R@@219|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@193| |#$T1@@129| |#$R@@219|)) |#$T1@@129|)) :qid |unknown.0:0| :skolemid |1105| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@193| |#$T1@@129| |#$R@@219|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@296)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@296)) )))
(assert (forall ((|#$T0@@194| T@U) (|#$T1@@130| T@U) (|#$R@@220| T@U) ) (!  (=> (and (and (= (type |#$T0@@194|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$R@@220|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@194| |#$T1@@130| |#$R@@220|)) |#$R@@220|)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@194| |#$T1@@130| |#$R@@220|)) )))
(assert (forall ((|#$T0@@195| T@U) (|#$T1@@131| T@U) (|#$R@@221| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@195|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$R@@221|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hPartialFunc2SSO |#$T0@@195| |#$T1@@131| |#$R@@221|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hPartialFunc2SSO |#$T0@@195| |#$T1@@131| |#$R@@221|)))) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($IsBox bx@@86 (Tclass._System.___hPartialFunc2SSO |#$T0@@195| |#$T1@@131| |#$R@@221|))) )))
(assert (forall ((|#$T0@@196| T@U) (|#$T1@@132| T@U) (|#$R@@222| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@196|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$R@@222|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc2SSO |#$T0@@196| |#$T1@@132| |#$R@@222|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc2SSO |#$T0@@196| |#$T1@@132| |#$R@@222|)) (forall ((|x0#0@@19| T@U) (|x1#0@@11| T@U) ) (!  (=> (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@11|) BoxType)) (and ($IsBox |x0#0@@19| |#$T0@@196|) ($IsBox |x1#0@@11| |#$T1@@132|))) (|Set#Equal| (Reads2 |#$T0@@196| |#$T1@@132| |#$R@@222| $OneHeap |f#0@@47| |x0#0@@19| |x1#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1108| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@11|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) ))))) :qid |unknown.0:0| :skolemid |1109| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc2SSO |#$T0@@196| |#$T1@@132| |#$R@@222|))) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@133| T@U) (|#$R@@223| T@U) (|f#0@@48| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$R@@223|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc2SSO |#$T0@@197| |#$T1@@133| |#$R@@223|) $h@@36) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc2SSO |#$T0@@197| |#$T1@@133| |#$R@@223|) $h@@36))) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc2SSO |#$T0@@197| |#$T1@@133| |#$R@@223|) $h@@36)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@119 T@U) (arg2@@60 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@297 arg1@@119 arg2@@60)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@297 arg1@@119 arg2@@60)) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@134| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$R@@224|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@198| |#$T1@@134| |#$R@@224|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@198| |#$T1@@134| |#$R@@224|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1111| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@198| |#$T1@@134| |#$R@@224|)) )))
(assert (forall ((arg0@@298 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@298)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@298)) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@135| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@199| |#$T1@@135| |#$R@@225|)) |#$T0@@199|)) :qid |unknown.0:0| :skolemid |1112| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@199| |#$T1@@135| |#$R@@225|)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@299)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@299)) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@136| T@U) (|#$R@@226| T@U) ) (!  (=> (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$R@@226|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@200| |#$T1@@136| |#$R@@226|)) |#$T1@@136|)) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@200| |#$T1@@136| |#$R@@226|)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@300)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@300)) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@137| T@U) (|#$R@@227| T@U) ) (!  (=> (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$R@@227|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@201| |#$T1@@137| |#$R@@227|)) |#$R@@227|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@201| |#$T1@@137| |#$R@@227|)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@138| T@U) (|#$R@@228| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$R@@228|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hTotalFunc2SSO |#$T0@@202| |#$T1@@138| |#$R@@228|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hTotalFunc2SSO |#$T0@@202| |#$T1@@138| |#$R@@228|)))) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($IsBox bx@@87 (Tclass._System.___hTotalFunc2SSO |#$T0@@202| |#$T1@@138| |#$R@@228|))) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@139| T@U) (|#$R@@229| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$R@@229|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc2SSO |#$T0@@203| |#$T1@@139| |#$R@@229|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc2SSO |#$T0@@203| |#$T1@@139| |#$R@@229|)) (forall ((|x0#0@@20| T@U) (|x1#0@@12| T@U) ) (!  (=> (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@12|) BoxType)) (and ($IsBox |x0#0@@20| |#$T0@@203|) ($IsBox |x1#0@@12| |#$T1@@139|))) (Requires2 |#$T0@@203| |#$T1@@139| |#$R@@229| $OneHeap |f#0@@49| |x0#0@@20| |x1#0@@12|)) :qid |unknown.0:0| :skolemid |1116| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@12|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) ))))) :qid |unknown.0:0| :skolemid |1117| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc2SSO |#$T0@@203| |#$T1@@139| |#$R@@229|))) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@140| T@U) (|#$R@@230| T@U) (|f#0@@50| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$R@@230|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc2SSO |#$T0@@204| |#$T1@@140| |#$R@@230|) $h@@37) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc2SSO |#$T0@@204| |#$T1@@140| |#$R@@230|) $h@@37))) :qid |unknown.0:0| :skolemid |1118| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc2SSO |#$T0@@204| |#$T1@@140| |#$R@@230|) $h@@37)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (|#_System._tuple#2._#Make2| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1120| :pattern ( (_System.Tuple2.___hMake2_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2._#Make2| |a#15#0#0| |a#15#1#0|))) :qid |unknown.0:0| :skolemid |1121| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) ))) :qid |unknown.0:0| :skolemid |1122| :pattern ( (_System.Tuple2.___hMake2_q d@@11)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@301)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@301)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1124| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@302)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@302)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@88)) bx@@88) ($Is ($Unbox DatatypeTypeType bx@@88) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1126| :pattern ( ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@38)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@38)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2$T0@@4| $h@@38) ($IsAllocBox |a#17#1#0| |_System._tuple#2$T1@@4| $h@@38)))) :qid |unknown.0:0| :skolemid |1128| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@38)) )))
(assert (forall ((d@@12 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@39) (and (_System.Tuple2.___hMake2_q d@@12) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@39)) :qid |unknown.0:0| :skolemid |1129| :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@39)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@5| $h@@39)) :qid |unknown.0:0| :skolemid |1130| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@12) |_System._tuple#2$T0@@5| $h@@39)) )))
(assert (forall ((d@@13 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@40) (and (_System.Tuple2.___hMake2_q d@@13) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@40)) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@40)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@6| $h@@40)) :qid |unknown.0:0| :skolemid |1132| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@13) |_System._tuple#2$T1@@6| $h@@40)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#18#0#0| |a#18#1#0|)))) :qid |unknown.0:0| :skolemid |1133| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)) :qid |unknown.0:0| :skolemid |1134| :pattern ( (|#_System._tuple#2._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#20#0#0| |a#20#1#0|)))) :qid |unknown.0:0| :skolemid |1135| :pattern ( (|#_System._tuple#2._#Make2| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)) :qid |unknown.0:0| :skolemid |1136| :pattern ( (|#_System._tuple#2._#Make2| |a#21#0#0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#22#0#0| |a#22#1#0|)))) :qid |unknown.0:0| :skolemid |1137| :pattern ( (|#_System._tuple#2._#Make2| |a#22#0#0| |a#22#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@14)) (_System.Tuple2.___hMake2_q d@@14)) :qid |unknown.0:0| :skolemid |1138| :pattern ( (|$IsA#_System.Tuple2| d@@14)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@15)) :qid |unknown.0:0| :skolemid |1139| :pattern ( (_System.Tuple2.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@110 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@110) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@110 b@@66)  (and (= (_System.Tuple2._0 a@@110) (_System.Tuple2._0 b@@66)) (= (_System.Tuple2._1 a@@110) (_System.Tuple2._1 b@@66))))) :qid |unknown.0:0| :skolemid |1140| :pattern ( (|_System.Tuple2#Equal| a@@110 b@@66)) )))
(assert (forall ((a@@111 T@U) (b@@67 T@U) ) (!  (=> (and (= (type a@@111) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@111 b@@67) (= a@@111 b@@67))) :qid |unknown.0:0| :skolemid |1141| :pattern ( (|_System.Tuple2#Equal| a@@111 b@@67)) )))
(assert (forall ((arg0@@303 T@U) (arg1@@120 T@U) (arg2@@61 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO arg0@@303 arg1@@120 arg2@@61)) TyType) :qid |funType:Tclass._System.___hFunc2LLO| :pattern ( (Tclass._System.___hFunc2LLO arg0@@303 arg1@@120 arg2@@61)) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@141| T@U) (|#$R@@231| T@U) ) (!  (=> (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$R@@231|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LLO |#$T0@@205| |#$T1@@141| |#$R@@231|)) Tagclass._System.___hFunc2LLO) (= (TagFamily (Tclass._System.___hFunc2LLO |#$T0@@205| |#$T1@@141| |#$R@@231|)) |tytagFamily$_#Func2LLO|))) :qid |unknown.0:0| :skolemid |1142| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@205| |#$T1@@141| |#$R@@231|)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_0 arg0@@304)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_0| :pattern ( (Tclass._System.___hFunc2LLO_0 arg0@@304)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@142| T@U) (|#$R@@232| T@U) ) (!  (=> (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$R@@232|) TyType)) (= (Tclass._System.___hFunc2LLO_0 (Tclass._System.___hFunc2LLO |#$T0@@206| |#$T1@@142| |#$R@@232|)) |#$T0@@206|)) :qid |unknown.0:0| :skolemid |1143| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@206| |#$T1@@142| |#$R@@232|)) )))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_1 arg0@@305)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_1| :pattern ( (Tclass._System.___hFunc2LLO_1 arg0@@305)) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@143| T@U) (|#$R@@233| T@U) ) (!  (=> (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$R@@233|) TyType)) (= (Tclass._System.___hFunc2LLO_1 (Tclass._System.___hFunc2LLO |#$T0@@207| |#$T1@@143| |#$R@@233|)) |#$T1@@143|)) :qid |unknown.0:0| :skolemid |1144| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@207| |#$T1@@143| |#$R@@233|)) )))
(assert (forall ((arg0@@306 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_2 arg0@@306)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_2| :pattern ( (Tclass._System.___hFunc2LLO_2 arg0@@306)) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@144| T@U) (|#$R@@234| T@U) ) (!  (=> (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$R@@234|) TyType)) (= (Tclass._System.___hFunc2LLO_2 (Tclass._System.___hFunc2LLO |#$T0@@208| |#$T1@@144| |#$R@@234|)) |#$R@@234|)) :qid |unknown.0:0| :skolemid |1145| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@208| |#$T1@@144| |#$R@@234|)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@145| T@U) (|#$R@@235| T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$R@@235|) TyType)) (= (type bx@@89) BoxType)) ($IsBox bx@@89 (Tclass._System.___hFunc2LLO |#$T0@@209| |#$T1@@145| |#$R@@235|))) (and (= ($Box ($Unbox HandleTypeType bx@@89)) bx@@89) ($Is ($Unbox HandleTypeType bx@@89) (Tclass._System.___hFunc2LLO |#$T0@@209| |#$T1@@145| |#$R@@235|)))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($IsBox bx@@89 (Tclass._System.___hFunc2LLO |#$T0@@209| |#$T1@@145| |#$R@@235|))) )))
(assert (forall ((arg0@@307 T@U) (arg1@@121 T@U) (arg2@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO arg0@@307 arg1@@121 arg2@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO| :pattern ( (Tclass._System.___hPartialFunc2LLO arg0@@307 arg1@@121 arg2@@62)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@146| T@U) (|#$R@@236| T@U) ) (!  (=> (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$R@@236|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LLO |#$T0@@210| |#$T1@@146| |#$R@@236|)) Tagclass._System.___hPartialFunc2LLO) (= (TagFamily (Tclass._System.___hPartialFunc2LLO |#$T0@@210| |#$T1@@146| |#$R@@236|)) |tytagFamily$_#PartialFunc2LLO|))) :qid |unknown.0:0| :skolemid |1147| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@210| |#$T1@@146| |#$R@@236|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_0 arg0@@308)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_0| :pattern ( (Tclass._System.___hPartialFunc2LLO_0 arg0@@308)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@147| T@U) (|#$R@@237| T@U) ) (!  (=> (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$R@@237|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_0 (Tclass._System.___hPartialFunc2LLO |#$T0@@211| |#$T1@@147| |#$R@@237|)) |#$T0@@211|)) :qid |unknown.0:0| :skolemid |1148| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@211| |#$T1@@147| |#$R@@237|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_1 arg0@@309)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_1| :pattern ( (Tclass._System.___hPartialFunc2LLO_1 arg0@@309)) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@148| T@U) (|#$R@@238| T@U) ) (!  (=> (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$R@@238|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_1 (Tclass._System.___hPartialFunc2LLO |#$T0@@212| |#$T1@@148| |#$R@@238|)) |#$T1@@148|)) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@212| |#$T1@@148| |#$R@@238|)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_2 arg0@@310)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_2| :pattern ( (Tclass._System.___hPartialFunc2LLO_2 arg0@@310)) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@149| T@U) (|#$R@@239| T@U) ) (!  (=> (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$R@@239|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_2 (Tclass._System.___hPartialFunc2LLO |#$T0@@213| |#$T1@@149| |#$R@@239|)) |#$R@@239|)) :qid |unknown.0:0| :skolemid |1150| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@213| |#$T1@@149| |#$R@@239|)) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@150| T@U) (|#$R@@240| T@U) (bx@@90 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$R@@240|) TyType)) (= (type bx@@90) BoxType)) ($IsBox bx@@90 (Tclass._System.___hPartialFunc2LLO |#$T0@@214| |#$T1@@150| |#$R@@240|))) (and (= ($Box ($Unbox HandleTypeType bx@@90)) bx@@90) ($Is ($Unbox HandleTypeType bx@@90) (Tclass._System.___hPartialFunc2LLO |#$T0@@214| |#$T1@@150| |#$R@@240|)))) :qid |unknown.0:0| :skolemid |1151| :pattern ( ($IsBox bx@@90 (Tclass._System.___hPartialFunc2LLO |#$T0@@214| |#$T1@@150| |#$R@@240|))) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@151| T@U) (|#$R@@241| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$R@@241|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc2LLO |#$T0@@215| |#$T1@@151| |#$R@@241|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc2LLO |#$T0@@215| |#$T1@@151| |#$R@@241|)) (forall ((|x0#0@@21| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@21| |#$T0@@215|) ($IsBox |x1#0@@13| |#$T1@@151|))) (|Set#Equal| (Reads2 |#$T0@@215| |#$T1@@151| |#$R@@241| $OneHeap |f#0@@51| |x0#0@@21| |x1#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1152| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@13|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1153| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc2LLO |#$T0@@215| |#$T1@@151| |#$R@@241|))) )))
(assert (forall ((|#$T0@@216| T@U) (|#$T1@@152| T@U) (|#$R@@242| T@U) (|f#0@@52| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@216|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$R@@242|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2LLO |#$T0@@216| |#$T1@@152| |#$R@@242|) $h@@41) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc2LLO |#$T0@@216| |#$T1@@152| |#$R@@242|) $h@@41))) :qid |unknown.0:0| :skolemid |1154| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2LLO |#$T0@@216| |#$T1@@152| |#$R@@242|) $h@@41)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@122 T@U) (arg2@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO arg0@@311 arg1@@122 arg2@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO| :pattern ( (Tclass._System.___hTotalFunc2LLO arg0@@311 arg1@@122 arg2@@63)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$T1@@153| T@U) (|#$R@@243| T@U) ) (!  (=> (and (and (= (type |#$T0@@217|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$R@@243|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LLO |#$T0@@217| |#$T1@@153| |#$R@@243|)) Tagclass._System.___hTotalFunc2LLO) (= (TagFamily (Tclass._System.___hTotalFunc2LLO |#$T0@@217| |#$T1@@153| |#$R@@243|)) |tytagFamily$_#TotalFunc2LLO|))) :qid |unknown.0:0| :skolemid |1155| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@217| |#$T1@@153| |#$R@@243|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_0 arg0@@312)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_0| :pattern ( (Tclass._System.___hTotalFunc2LLO_0 arg0@@312)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$T1@@154| T@U) (|#$R@@244| T@U) ) (!  (=> (and (and (= (type |#$T0@@218|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$R@@244|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_0 (Tclass._System.___hTotalFunc2LLO |#$T0@@218| |#$T1@@154| |#$R@@244|)) |#$T0@@218|)) :qid |unknown.0:0| :skolemid |1156| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@218| |#$T1@@154| |#$R@@244|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_1 arg0@@313)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_1| :pattern ( (Tclass._System.___hTotalFunc2LLO_1 arg0@@313)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$T1@@155| T@U) (|#$R@@245| T@U) ) (!  (=> (and (and (= (type |#$T0@@219|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$R@@245|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_1 (Tclass._System.___hTotalFunc2LLO |#$T0@@219| |#$T1@@155| |#$R@@245|)) |#$T1@@155|)) :qid |unknown.0:0| :skolemid |1157| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@219| |#$T1@@155| |#$R@@245|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_2 arg0@@314)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_2| :pattern ( (Tclass._System.___hTotalFunc2LLO_2 arg0@@314)) )))
(assert (forall ((|#$T0@@220| T@U) (|#$T1@@156| T@U) (|#$R@@246| T@U) ) (!  (=> (and (and (= (type |#$T0@@220|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$R@@246|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_2 (Tclass._System.___hTotalFunc2LLO |#$T0@@220| |#$T1@@156| |#$R@@246|)) |#$R@@246|)) :qid |unknown.0:0| :skolemid |1158| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@220| |#$T1@@156| |#$R@@246|)) )))
(assert (forall ((|#$T0@@221| T@U) (|#$T1@@157| T@U) (|#$R@@247| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@221|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$R@@247|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hTotalFunc2LLO |#$T0@@221| |#$T1@@157| |#$R@@247|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hTotalFunc2LLO |#$T0@@221| |#$T1@@157| |#$R@@247|)))) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsBox bx@@91 (Tclass._System.___hTotalFunc2LLO |#$T0@@221| |#$T1@@157| |#$R@@247|))) )))
(assert (forall ((|#$T0@@222| T@U) (|#$T1@@158| T@U) (|#$R@@248| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@222|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$R@@248|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc2LLO |#$T0@@222| |#$T1@@158| |#$R@@248|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc2LLO |#$T0@@222| |#$T1@@158| |#$R@@248|)) (forall ((|x0#0@@22| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@22| |#$T0@@222|) ($IsBox |x1#0@@14| |#$T1@@158|))) (Requires2 |#$T0@@222| |#$T1@@158| |#$R@@248| $OneHeap |f#0@@53| |x0#0@@22| |x1#0@@14|)) :qid |unknown.0:0| :skolemid |1160| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@14|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1161| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc2LLO |#$T0@@222| |#$T1@@158| |#$R@@248|))) )))
(assert (forall ((|#$T0@@223| T@U) (|#$T1@@159| T@U) (|#$R@@249| T@U) (|f#0@@54| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@223|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$R@@249|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2LLO |#$T0@@223| |#$T1@@159| |#$R@@249|) $h@@42) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc2LLO |#$T0@@223| |#$T1@@159| |#$R@@249|) $h@@42))) :qid |unknown.0:0| :skolemid |1162| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2LLO |#$T0@@223| |#$T1@@159| |#$R@@249|) $h@@42)) )))
(assert (forall ((arg0@@315 T@U) (arg1@@123 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@315 arg1@@123)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@315 arg1@@123)) )))
(assert (forall ((|#$T0@@224| T@U) (|#$R@@250| T@U) ) (!  (=> (and (= (type |#$T0@@224|) TyType) (= (type |#$R@@250|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@224| |#$R@@250|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@224| |#$R@@250|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@224| |#$R@@250|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@316)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@316)) )))
(assert (forall ((|#$T0@@225| T@U) (|#$R@@251| T@U) ) (!  (=> (and (= (type |#$T0@@225|) TyType) (= (type |#$R@@251|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@225| |#$R@@251|)) |#$T0@@225|)) :qid |unknown.0:0| :skolemid |1164| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@225| |#$R@@251|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@317)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@317)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$R@@252| T@U) ) (!  (=> (and (= (type |#$T0@@226|) TyType) (= (type |#$R@@252|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@226| |#$R@@252|)) |#$R@@252|)) :qid |unknown.0:0| :skolemid |1165| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@226| |#$R@@252|)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$R@@253| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@227|) TyType) (= (type |#$R@@253|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hFunc1LL |#$T0@@227| |#$R@@253|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hFunc1LL |#$T0@@227| |#$R@@253|)))) :qid |unknown.0:0| :skolemid |1166| :pattern ( ($IsBox bx@@92 (Tclass._System.___hFunc1LL |#$T0@@227| |#$R@@253|))) )))
(assert (forall ((arg0@@318 T@U) (arg1@@124 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@318 arg1@@124)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@318 arg1@@124)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$R@@254| T@U) ) (!  (=> (and (= (type |#$T0@@228|) TyType) (= (type |#$R@@254|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@228| |#$R@@254|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@228| |#$R@@254|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1167| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@228| |#$R@@254|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@319)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$R@@255| T@U) ) (!  (=> (and (= (type |#$T0@@229|) TyType) (= (type |#$R@@255|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@229| |#$R@@255|)) |#$T0@@229|)) :qid |unknown.0:0| :skolemid |1168| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@229| |#$R@@255|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@320)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@320)) )))
(assert (forall ((|#$T0@@230| T@U) (|#$R@@256| T@U) ) (!  (=> (and (= (type |#$T0@@230|) TyType) (= (type |#$R@@256|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@230| |#$R@@256|)) |#$R@@256|)) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@230| |#$R@@256|)) )))
(assert (forall ((|#$T0@@231| T@U) (|#$R@@257| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$R@@257|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.___hPartialFunc1LL |#$T0@@231| |#$R@@257|))) (and (= ($Box ($Unbox HandleTypeType bx@@93)) bx@@93) ($Is ($Unbox HandleTypeType bx@@93) (Tclass._System.___hPartialFunc1LL |#$T0@@231| |#$R@@257|)))) :qid |unknown.0:0| :skolemid |1170| :pattern ( ($IsBox bx@@93 (Tclass._System.___hPartialFunc1LL |#$T0@@231| |#$R@@257|))) )))
(assert (forall ((|#$T0@@232| T@U) (|#$R@@258| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (= (type |#$T0@@232|) TyType) (= (type |#$R@@258|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc1LL |#$T0@@232| |#$R@@258|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc1LL |#$T0@@232| |#$R@@258|)) (forall ((|x0#0@@23| T@U) ) (!  (=> (and (= (type |x0#0@@23|) BoxType) ($IsBox |x0#0@@23| |#$T0@@232|)) (|Set#Equal| (Reads1 |#$T0@@232| |#$R@@258| $OneHeap |f#0@@55| |x0#0@@23|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1171| :no-pattern (type |x0#0@@23|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) ))))) :qid |unknown.0:0| :skolemid |1172| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc1LL |#$T0@@232| |#$R@@258|))) )))
(assert (forall ((|#$T0@@233| T@U) (|#$R@@259| T@U) (|f#0@@56| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@233|) TyType) (= (type |#$R@@259|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1LL |#$T0@@233| |#$R@@259|) $h@@43) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc1LL |#$T0@@233| |#$R@@259|) $h@@43))) :qid |unknown.0:0| :skolemid |1173| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1LL |#$T0@@233| |#$R@@259|) $h@@43)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@125 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@321 arg1@@125)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@321 arg1@@125)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$R@@260| T@U) ) (!  (=> (and (= (type |#$T0@@234|) TyType) (= (type |#$R@@260|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@234| |#$R@@260|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@234| |#$R@@260|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1174| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@234| |#$R@@260|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@322)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@322)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$R@@261| T@U) ) (!  (=> (and (= (type |#$T0@@235|) TyType) (= (type |#$R@@261|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@235| |#$R@@261|)) |#$T0@@235|)) :qid |unknown.0:0| :skolemid |1175| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@235| |#$R@@261|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@323)) )))
(assert (forall ((|#$T0@@236| T@U) (|#$R@@262| T@U) ) (!  (=> (and (= (type |#$T0@@236|) TyType) (= (type |#$R@@262|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@236| |#$R@@262|)) |#$R@@262|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@236| |#$R@@262|)) )))
(assert (forall ((|#$T0@@237| T@U) (|#$R@@263| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@237|) TyType) (= (type |#$R@@263|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hTotalFunc1LL |#$T0@@237| |#$R@@263|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hTotalFunc1LL |#$T0@@237| |#$R@@263|)))) :qid |unknown.0:0| :skolemid |1177| :pattern ( ($IsBox bx@@94 (Tclass._System.___hTotalFunc1LL |#$T0@@237| |#$R@@263|))) )))
(assert (forall ((|#$T0@@238| T@U) (|#$R@@264| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (= (type |#$T0@@238|) TyType) (= (type |#$R@@264|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc1LL |#$T0@@238| |#$R@@264|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc1LL |#$T0@@238| |#$R@@264|)) (forall ((|x0#0@@24| T@U) ) (!  (=> (and (= (type |x0#0@@24|) BoxType) ($IsBox |x0#0@@24| |#$T0@@238|)) (Requires1 |#$T0@@238| |#$R@@264| $OneHeap |f#0@@57| |x0#0@@24|)) :qid |unknown.0:0| :skolemid |1178| :no-pattern (type |x0#0@@24|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) ))))) :qid |unknown.0:0| :skolemid |1179| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc1LL |#$T0@@238| |#$R@@264|))) )))
(assert (forall ((|#$T0@@239| T@U) (|#$R@@265| T@U) (|f#0@@58| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@239|) TyType) (= (type |#$R@@265|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1LL |#$T0@@239| |#$R@@265|) $h@@44) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc1LL |#$T0@@239| |#$R@@265|) $h@@44))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1LL |#$T0@@239| |#$R@@265|) $h@@44)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@126 T@U) (arg2@@64 T@U) (arg3@@31 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@324 arg1@@126 arg2@@64 arg3@@31 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@324 arg1@@126 arg2@@64 arg3@@31 arg4@@14)) )))
(assert (forall ((|#$T0@@240| T@U) (|#$T1@@160| T@U) (|#$T2@@65| T@U) (|#$T3| T@U) (|#$R@@266| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@240|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@266|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@240| |#$T1@@160| |#$T2@@65| |#$T3| |#$R@@266|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@240| |#$T1@@160| |#$T2@@65| |#$T3| |#$R@@266|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |1181| :pattern ( (Tclass._System.___hFunc4 |#$T0@@240| |#$T1@@160| |#$T2@@65| |#$T3| |#$R@@266|)) )))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@325)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@325)) )))
(assert (forall ((|#$T0@@241| T@U) (|#$T1@@161| T@U) (|#$T2@@66| T@U) (|#$T3@@0| T@U) (|#$R@@267| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@241|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@267|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@241| |#$T1@@161| |#$T2@@66| |#$T3@@0| |#$R@@267|)) |#$T0@@241|)) :qid |unknown.0:0| :skolemid |1182| :pattern ( (Tclass._System.___hFunc4 |#$T0@@241| |#$T1@@161| |#$T2@@66| |#$T3@@0| |#$R@@267|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@326)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@326)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$T1@@162| T@U) (|#$T2@@67| T@U) (|#$T3@@1| T@U) (|#$R@@268| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@242|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@268|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@242| |#$T1@@162| |#$T2@@67| |#$T3@@1| |#$R@@268|)) |#$T1@@162|)) :qid |unknown.0:0| :skolemid |1183| :pattern ( (Tclass._System.___hFunc4 |#$T0@@242| |#$T1@@162| |#$T2@@67| |#$T3@@1| |#$R@@268|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@327)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@327)) )))
(assert (forall ((|#$T0@@243| T@U) (|#$T1@@163| T@U) (|#$T2@@68| T@U) (|#$T3@@2| T@U) (|#$R@@269| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@243|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@269|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@243| |#$T1@@163| |#$T2@@68| |#$T3@@2| |#$R@@269|)) |#$T2@@68|)) :qid |unknown.0:0| :skolemid |1184| :pattern ( (Tclass._System.___hFunc4 |#$T0@@243| |#$T1@@163| |#$T2@@68| |#$T3@@2| |#$R@@269|)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@328)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@328)) )))
(assert (forall ((|#$T0@@244| T@U) (|#$T1@@164| T@U) (|#$T2@@69| T@U) (|#$T3@@3| T@U) (|#$R@@270| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@244|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@270|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@244| |#$T1@@164| |#$T2@@69| |#$T3@@3| |#$R@@270|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |1185| :pattern ( (Tclass._System.___hFunc4 |#$T0@@244| |#$T1@@164| |#$T2@@69| |#$T3@@3| |#$R@@270|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@329)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@329)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$T1@@165| T@U) (|#$T2@@70| T@U) (|#$T3@@4| T@U) (|#$R@@271| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@245|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@271|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@245| |#$T1@@165| |#$T2@@70| |#$T3@@4| |#$R@@271|)) |#$R@@271|)) :qid |unknown.0:0| :skolemid |1186| :pattern ( (Tclass._System.___hFunc4 |#$T0@@245| |#$T1@@165| |#$T2@@70| |#$T3@@4| |#$R@@271|)) )))
(assert (forall ((|#$T0@@246| T@U) (|#$T1@@166| T@U) (|#$T2@@71| T@U) (|#$T3@@5| T@U) (|#$R@@272| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@246|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@272|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hFunc4 |#$T0@@246| |#$T1@@166| |#$T2@@71| |#$T3@@5| |#$R@@272|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hFunc4 |#$T0@@246| |#$T1@@166| |#$T2@@71| |#$T3@@5| |#$R@@272|)))) :qid |unknown.0:0| :skolemid |1187| :pattern ( ($IsBox bx@@95 (Tclass._System.___hFunc4 |#$T0@@246| |#$T1@@166| |#$T2@@71| |#$T3@@5| |#$R@@272|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@330 T@T) (arg1@@127 T@T) (arg2@@65 T@T) (arg3@@32 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@330 arg1@@127 arg2@@65 arg3@@32 arg4@@15 arg5@@4)) 28) :qid |ctor:MapType5Type| )) (forall ((arg0@@331 T@T) (arg1@@128 T@T) (arg2@@66 T@T) (arg3@@33 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@331 arg1@@128 arg2@@66 arg3@@33 arg4@@16 arg5@@5)) arg0@@331) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@331 arg1@@128 arg2@@66 arg3@@33 arg4@@16 arg5@@5)) ))) (forall ((arg0@@332 T@T) (arg1@@129 T@T) (arg2@@67 T@T) (arg3@@34 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@332 arg1@@129 arg2@@67 arg3@@34 arg4@@17 arg5@@6)) arg1@@129) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@332 arg1@@129 arg2@@67 arg3@@34 arg4@@17 arg5@@6)) ))) (forall ((arg0@@333 T@T) (arg1@@130 T@T) (arg2@@68 T@T) (arg3@@35 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@333 arg1@@130 arg2@@68 arg3@@35 arg4@@18 arg5@@7)) arg2@@68) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@333 arg1@@130 arg2@@68 arg3@@35 arg4@@18 arg5@@7)) ))) (forall ((arg0@@334 T@T) (arg1@@131 T@T) (arg2@@69 T@T) (arg3@@36 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@334 arg1@@131 arg2@@69 arg3@@36 arg4@@19 arg5@@8)) arg3@@36) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@334 arg1@@131 arg2@@69 arg3@@36 arg4@@19 arg5@@8)) ))) (forall ((arg0@@335 T@T) (arg1@@132 T@T) (arg2@@70 T@T) (arg3@@37 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@335 arg1@@132 arg2@@70 arg3@@37 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@335 arg1@@132 arg2@@70 arg3@@37 arg4@@20 arg5@@9)) ))) (forall ((arg0@@336 T@T) (arg1@@133 T@T) (arg2@@71 T@T) (arg3@@38 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@336 arg1@@133 arg2@@71 arg3@@38 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@336 arg1@@133 arg2@@71 arg3@@38 arg4@@21 arg5@@10)) ))) (forall ((arg0@@337 T@U) (arg1@@134 T@U) (arg2@@72 T@U) (arg3@@39 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@337)))) (= (type (MapType5Select arg0@@337 arg1@@134 arg2@@72 arg3@@39 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@337 arg1@@134 arg2@@72 arg3@@39 arg4@@22 arg5@@11)) ))) (forall ((arg0@@338 T@U) (arg1@@135 T@U) (arg2@@73 T@U) (arg3@@40 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@40))) (let ((aVar1@@5 (type arg2@@73))) (let ((aVar0@@3 (type arg1@@135))) (= (type (MapType5Store arg0@@338 arg1@@135 arg2@@73 arg3@@40 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@338 arg1@@135 arg2@@73 arg3@@40 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@60)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@61 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@339 T@U) (arg1@@136 T@U) (arg2@@74 T@U) (arg3@@41 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@339 arg1@@136 arg2@@74 arg3@@41 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@339 arg1@@136 arg2@@74 arg3@@41 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@340 T@U) (arg1@@137 T@U) (arg2@@75 T@U) ) (! (= (type (Handle4 arg0@@340 arg1@@137 arg2@@75)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@340 arg1@@137 arg2@@75)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@22 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@22 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3) (MapType5Select h@@45 heap@@22 bx0@@41 bx1@@27 bx2@@13 bx3))) :qid |unknown.0:0| :skolemid |1188| :pattern ( (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@22 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@23 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@23 bx0@@42 bx1@@28 bx2@@14 bx3@@0))) (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@23 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) :qid |unknown.0:0| :skolemid |1189| :pattern ( (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@23 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@138 T@U) (arg2@@76 T@U) (arg3@@42 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@341 arg1@@138 arg2@@76 arg3@@42 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@341 arg1@@138 arg2@@76 arg3@@42 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@24 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@1 T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@96) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@24 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@96)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@24 bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@96)))) :qid |unknown.0:0| :skolemid |1190| :pattern ( (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@24 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@96)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@112))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |1191| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2))) :qid |unknown.0:0| :skolemid |1192| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@113))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |1193| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3))) :qid |unknown.0:0| :skolemid |1194| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@114))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |1195| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4))) :qid |unknown.0:0| :skolemid |1196| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@115))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |1197| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5))) :qid |unknown.0:0| :skolemid |1198| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@116))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |1199| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6))) :qid |unknown.0:0| :skolemid |1200| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@117))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |1201| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7))) :qid |unknown.0:0| :skolemid |1202| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@25 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@25 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1203| :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) ($IsGoodHeap heap@@25)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@25 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@26 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@26) (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@26 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9))) :qid |unknown.0:0| :skolemid |1204| :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) ($IsGoodHeap heap@@26)) :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@26 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))) ($IsBox (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |1205| :pattern ( (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |1206| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 u0@@3)) ($IsBox bx@@97 t0@@88)) :qid |unknown.0:0| :skolemid |1207| :pattern ( ($IsBox bx@@97 u0@@3)) :pattern ( ($IsBox bx@@97 t0@@88)) ))) (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 u1@@2)) ($IsBox bx@@98 t1@@64)) :qid |unknown.0:0| :skolemid |1208| :pattern ( ($IsBox bx@@98 u1@@2)) :pattern ( ($IsBox bx@@98 t1@@64)) ))) (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 u2@@1)) ($IsBox bx@@99 t2@@41)) :qid |unknown.0:0| :skolemid |1209| :pattern ( ($IsBox bx@@99 u2@@1)) :pattern ( ($IsBox bx@@99 t2@@41)) ))) (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 u3@@0)) ($IsBox bx@@100 t3@@26)) :qid |unknown.0:0| :skolemid |1210| :pattern ( ($IsBox bx@@100 u3@@0)) :pattern ( ($IsBox bx@@100 t3@@26)) ))) (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 t4@@11)) ($IsBox bx@@101 u4)) :qid |unknown.0:0| :skolemid |1211| :pattern ( ($IsBox bx@@101 t4@@11)) :pattern ( ($IsBox bx@@101 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |1212| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@11 t3@@27) ($IsAllocBox bx3@@11 t3@@27 h@@49))) (Requires4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |1213| :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |1214| :pattern ( (Apply4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) :pattern ( (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |1215| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@12 t3@@28 h@@50)) (Requires4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ($IsAllocBox (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12) t4@@13 h@@50))) :qid |unknown.0:0| :skolemid |1216| :pattern ( (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |1217| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@139 T@U) (arg2@@77 T@U) (arg3@@43 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@342 arg1@@139 arg2@@77 arg3@@43 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@342 arg1@@139 arg2@@77 arg3@@43 arg4@@26)) )))
(assert (forall ((|#$T0@@247| T@U) (|#$T1@@167| T@U) (|#$T2@@72| T@U) (|#$T3@@6| T@U) (|#$R@@273| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@247|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@273|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@247| |#$T1@@167| |#$T2@@72| |#$T3@@6| |#$R@@273|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@247| |#$T1@@167| |#$T2@@72| |#$T3@@6| |#$R@@273|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |1218| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@247| |#$T1@@167| |#$T2@@72| |#$T3@@6| |#$R@@273|)) )))
(assert (forall ((arg0@@343 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@343)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@343)) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@168| T@U) (|#$T2@@73| T@U) (|#$T3@@7| T@U) (|#$R@@274| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@274|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@248| |#$T1@@168| |#$T2@@73| |#$T3@@7| |#$R@@274|)) |#$T0@@248|)) :qid |unknown.0:0| :skolemid |1219| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@248| |#$T1@@168| |#$T2@@73| |#$T3@@7| |#$R@@274|)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@344)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@344)) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@169| T@U) (|#$T2@@74| T@U) (|#$T3@@8| T@U) (|#$R@@275| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@275|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@249| |#$T1@@169| |#$T2@@74| |#$T3@@8| |#$R@@275|)) |#$T1@@169|)) :qid |unknown.0:0| :skolemid |1220| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@249| |#$T1@@169| |#$T2@@74| |#$T3@@8| |#$R@@275|)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@345)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@345)) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@170| T@U) (|#$T2@@75| T@U) (|#$T3@@9| T@U) (|#$R@@276| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@276|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@250| |#$T1@@170| |#$T2@@75| |#$T3@@9| |#$R@@276|)) |#$T2@@75|)) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@250| |#$T1@@170| |#$T2@@75| |#$T3@@9| |#$R@@276|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@346)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@346)) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@171| T@U) (|#$T2@@76| T@U) (|#$T3@@10| T@U) (|#$R@@277| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@277|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@251| |#$T1@@171| |#$T2@@76| |#$T3@@10| |#$R@@277|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@251| |#$T1@@171| |#$T2@@76| |#$T3@@10| |#$R@@277|)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@347)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@347)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$T1@@172| T@U) (|#$T2@@77| T@U) (|#$T3@@11| T@U) (|#$R@@278| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@252|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@278|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@252| |#$T1@@172| |#$T2@@77| |#$T3@@11| |#$R@@278|)) |#$R@@278|)) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@252| |#$T1@@172| |#$T2@@77| |#$T3@@11| |#$R@@278|)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$T1@@173| T@U) (|#$T2@@78| T@U) (|#$T3@@12| T@U) (|#$R@@279| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@253|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@279|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hPartialFunc4 |#$T0@@253| |#$T1@@173| |#$T2@@78| |#$T3@@12| |#$R@@279|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hPartialFunc4 |#$T0@@253| |#$T1@@173| |#$T2@@78| |#$T3@@12| |#$R@@279|)))) :qid |unknown.0:0| :skolemid |1224| :pattern ( ($IsBox bx@@102 (Tclass._System.___hPartialFunc4 |#$T0@@253| |#$T1@@173| |#$T2@@78| |#$T3@@12| |#$R@@279|))) )))
(assert (forall ((|#$T0@@254| T@U) (|#$T1@@174| T@U) (|#$T2@@79| T@U) (|#$T3@@13| T@U) (|#$R@@280| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@254|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@280|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc4 |#$T0@@254| |#$T1@@174| |#$T2@@79| |#$T3@@13| |#$R@@280|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc4 |#$T0@@254| |#$T1@@174| |#$T2@@79| |#$T3@@13| |#$R@@280|)) (forall ((|x0#0@@25| T@U) (|x1#0@@15| T@U) (|x2#0@@5| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@25| |#$T0@@254|) ($IsBox |x1#0@@15| |#$T1@@174|)) ($IsBox |x2#0@@5| |#$T2@@79|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@254| |#$T1@@174| |#$T2@@79| |#$T3@@13| |#$R@@280| $OneHeap |f#0@@59| |x0#0@@25| |x1#0@@15| |x2#0@@5| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1225| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |1226| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc4 |#$T0@@254| |#$T1@@174| |#$T2@@79| |#$T3@@13| |#$R@@280|))) )))
(assert (forall ((|#$T0@@255| T@U) (|#$T1@@175| T@U) (|#$T2@@80| T@U) (|#$T3@@14| T@U) (|#$R@@281| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@255|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@281|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc4 |#$T0@@255| |#$T1@@175| |#$T2@@80| |#$T3@@14| |#$R@@281|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc4 |#$T0@@255| |#$T1@@175| |#$T2@@80| |#$T3@@14| |#$R@@281|) $h@@45))) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc4 |#$T0@@255| |#$T1@@175| |#$T2@@80| |#$T3@@14| |#$R@@281|) $h@@45)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@140 T@U) (arg2@@78 T@U) (arg3@@44 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@348 arg1@@140 arg2@@78 arg3@@44 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@348 arg1@@140 arg2@@78 arg3@@44 arg4@@27)) )))
(assert (forall ((|#$T0@@256| T@U) (|#$T1@@176| T@U) (|#$T2@@81| T@U) (|#$T3@@15| T@U) (|#$R@@282| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@282|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@256| |#$T1@@176| |#$T2@@81| |#$T3@@15| |#$R@@282|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@256| |#$T1@@176| |#$T2@@81| |#$T3@@15| |#$R@@282|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |1228| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@256| |#$T1@@176| |#$T2@@81| |#$T3@@15| |#$R@@282|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@349)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@349)) )))
(assert (forall ((|#$T0@@257| T@U) (|#$T1@@177| T@U) (|#$T2@@82| T@U) (|#$T3@@16| T@U) (|#$R@@283| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@257|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@283|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@257| |#$T1@@177| |#$T2@@82| |#$T3@@16| |#$R@@283|)) |#$T0@@257|)) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@257| |#$T1@@177| |#$T2@@82| |#$T3@@16| |#$R@@283|)) )))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@350)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@350)) )))
(assert (forall ((|#$T0@@258| T@U) (|#$T1@@178| T@U) (|#$T2@@83| T@U) (|#$T3@@17| T@U) (|#$R@@284| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@258|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@284|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@258| |#$T1@@178| |#$T2@@83| |#$T3@@17| |#$R@@284|)) |#$T1@@178|)) :qid |unknown.0:0| :skolemid |1230| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@258| |#$T1@@178| |#$T2@@83| |#$T3@@17| |#$R@@284|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@351)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@351)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$T1@@179| T@U) (|#$T2@@84| T@U) (|#$T3@@18| T@U) (|#$R@@285| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@259|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@285|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@259| |#$T1@@179| |#$T2@@84| |#$T3@@18| |#$R@@285|)) |#$T2@@84|)) :qid |unknown.0:0| :skolemid |1231| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@259| |#$T1@@179| |#$T2@@84| |#$T3@@18| |#$R@@285|)) )))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@352)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@352)) )))
(assert (forall ((|#$T0@@260| T@U) (|#$T1@@180| T@U) (|#$T2@@85| T@U) (|#$T3@@19| T@U) (|#$R@@286| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@260|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@286|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@260| |#$T1@@180| |#$T2@@85| |#$T3@@19| |#$R@@286|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |1232| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@260| |#$T1@@180| |#$T2@@85| |#$T3@@19| |#$R@@286|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@353)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@353)) )))
(assert (forall ((|#$T0@@261| T@U) (|#$T1@@181| T@U) (|#$T2@@86| T@U) (|#$T3@@20| T@U) (|#$R@@287| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@261|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@287|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@261| |#$T1@@181| |#$T2@@86| |#$T3@@20| |#$R@@287|)) |#$R@@287|)) :qid |unknown.0:0| :skolemid |1233| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@261| |#$T1@@181| |#$T2@@86| |#$T3@@20| |#$R@@287|)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$T1@@182| T@U) (|#$T2@@87| T@U) (|#$T3@@21| T@U) (|#$R@@288| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@262|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@288|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hTotalFunc4 |#$T0@@262| |#$T1@@182| |#$T2@@87| |#$T3@@21| |#$R@@288|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hTotalFunc4 |#$T0@@262| |#$T1@@182| |#$T2@@87| |#$T3@@21| |#$R@@288|)))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($IsBox bx@@103 (Tclass._System.___hTotalFunc4 |#$T0@@262| |#$T1@@182| |#$T2@@87| |#$T3@@21| |#$R@@288|))) )))
(assert (forall ((|#$T0@@263| T@U) (|#$T1@@183| T@U) (|#$T2@@88| T@U) (|#$T3@@22| T@U) (|#$R@@289| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@263|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@289|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc4 |#$T0@@263| |#$T1@@183| |#$T2@@88| |#$T3@@22| |#$R@@289|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc4 |#$T0@@263| |#$T1@@183| |#$T2@@88| |#$T3@@22| |#$R@@289|)) (forall ((|x0#0@@26| T@U) (|x1#0@@16| T@U) (|x2#0@@6| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@26| |#$T0@@263|) ($IsBox |x1#0@@16| |#$T1@@183|)) ($IsBox |x2#0@@6| |#$T2@@88|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@263| |#$T1@@183| |#$T2@@88| |#$T3@@22| |#$R@@289| $OneHeap |f#0@@61| |x0#0@@26| |x1#0@@16| |x2#0@@6| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |1235| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1236| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc4 |#$T0@@263| |#$T1@@183| |#$T2@@88| |#$T3@@22| |#$R@@289|))) )))
(assert (forall ((|#$T0@@264| T@U) (|#$T1@@184| T@U) (|#$T2@@89| T@U) (|#$T3@@23| T@U) (|#$R@@290| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@264|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@290|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc4 |#$T0@@264| |#$T1@@184| |#$T2@@89| |#$T3@@23| |#$R@@290|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc4 |#$T0@@264| |#$T1@@184| |#$T2@@89| |#$T3@@23| |#$R@@290|) $h@@46))) :qid |unknown.0:0| :skolemid |1237| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc4 |#$T0@@264| |#$T1@@184| |#$T2@@89| |#$T3@@23| |#$R@@290|) $h@@46)) )))
(assert (forall ((arg0@@354 T@U) (arg1@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@354 arg1@@141)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@354 arg1@@141)) )))
(assert (forall ((|#$T0@@265| T@U) (|#$R@@291| T@U) ) (!  (=> (and (= (type |#$T0@@265|) TyType) (= (type |#$R@@291|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@265| |#$R@@291|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@265| |#$R@@291|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1238| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@265| |#$R@@291|)) )))
(assert (forall ((arg0@@355 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@355)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@355)) )))
(assert (forall ((|#$T0@@266| T@U) (|#$R@@292| T@U) ) (!  (=> (and (= (type |#$T0@@266|) TyType) (= (type |#$R@@292|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@266| |#$R@@292|)) |#$T0@@266|)) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@266| |#$R@@292|)) )))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@356)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@356)) )))
(assert (forall ((|#$T0@@267| T@U) (|#$R@@293| T@U) ) (!  (=> (and (= (type |#$T0@@267|) TyType) (= (type |#$R@@293|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@267| |#$R@@293|)) |#$R@@293|)) :qid |unknown.0:0| :skolemid |1240| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@267| |#$R@@293|)) )))
(assert (forall ((|#$T0@@268| T@U) (|#$R@@294| T@U) (bx@@104 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@268|) TyType) (= (type |#$R@@294|) TyType)) (= (type bx@@104) BoxType)) ($IsBox bx@@104 (Tclass._System.___hFunc1SS |#$T0@@268| |#$R@@294|))) (and (= ($Box ($Unbox HandleTypeType bx@@104)) bx@@104) ($Is ($Unbox HandleTypeType bx@@104) (Tclass._System.___hFunc1SS |#$T0@@268| |#$R@@294|)))) :qid |unknown.0:0| :skolemid |1241| :pattern ( ($IsBox bx@@104 (Tclass._System.___hFunc1SS |#$T0@@268| |#$R@@294|))) )))
(assert (forall ((arg0@@357 T@U) (arg1@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@357 arg1@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@357 arg1@@142)) )))
(assert (forall ((|#$T0@@269| T@U) (|#$R@@295| T@U) ) (!  (=> (and (= (type |#$T0@@269|) TyType) (= (type |#$R@@295|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@269| |#$R@@295|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@269| |#$R@@295|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1242| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@269| |#$R@@295|)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@358)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@358)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$R@@296| T@U) ) (!  (=> (and (= (type |#$T0@@270|) TyType) (= (type |#$R@@296|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@270| |#$R@@296|)) |#$T0@@270|)) :qid |unknown.0:0| :skolemid |1243| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@270| |#$R@@296|)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@359)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@359)) )))
(assert (forall ((|#$T0@@271| T@U) (|#$R@@297| T@U) ) (!  (=> (and (= (type |#$T0@@271|) TyType) (= (type |#$R@@297|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@271| |#$R@@297|)) |#$R@@297|)) :qid |unknown.0:0| :skolemid |1244| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@271| |#$R@@297|)) )))
(assert (forall ((|#$T0@@272| T@U) (|#$R@@298| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@272|) TyType) (= (type |#$R@@298|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hPartialFunc1SS |#$T0@@272| |#$R@@298|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hPartialFunc1SS |#$T0@@272| |#$R@@298|)))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsBox bx@@105 (Tclass._System.___hPartialFunc1SS |#$T0@@272| |#$R@@298|))) )))
(assert (forall ((|#$T0@@273| T@U) (|#$R@@299| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (= (type |#$T0@@273|) TyType) (= (type |#$R@@299|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@273| |#$R@@299|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc1SS |#$T0@@273| |#$R@@299|)) (forall ((|x0#0@@27| T@U) ) (!  (=> (and (= (type |x0#0@@27|) BoxType) ($IsBox |x0#0@@27| |#$T0@@273|)) (|Set#Equal| (Reads1 |#$T0@@273| |#$R@@299| $OneHeap |f#0@@63| |x0#0@@27|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1246| :no-pattern (type |x0#0@@27|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) ))))) :qid |unknown.0:0| :skolemid |1247| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@273| |#$R@@299|))) )))
(assert (forall ((|#$T0@@274| T@U) (|#$R@@300| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@274|) TyType) (= (type |#$R@@300|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@274| |#$R@@300|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc1SS |#$T0@@274| |#$R@@300|) $h@@47))) :qid |unknown.0:0| :skolemid |1248| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@274| |#$R@@300|) $h@@47)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@360 arg1@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@360 arg1@@143)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$R@@301| T@U) ) (!  (=> (and (= (type |#$T0@@275|) TyType) (= (type |#$R@@301|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@275| |#$R@@301|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@275| |#$R@@301|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1249| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@275| |#$R@@301|)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@361)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@361)) )))
(assert (forall ((|#$T0@@276| T@U) (|#$R@@302| T@U) ) (!  (=> (and (= (type |#$T0@@276|) TyType) (= (type |#$R@@302|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@276| |#$R@@302|)) |#$T0@@276|)) :qid |unknown.0:0| :skolemid |1250| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@276| |#$R@@302|)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@362)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@362)) )))
(assert (forall ((|#$T0@@277| T@U) (|#$R@@303| T@U) ) (!  (=> (and (= (type |#$T0@@277|) TyType) (= (type |#$R@@303|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@277| |#$R@@303|)) |#$R@@303|)) :qid |unknown.0:0| :skolemid |1251| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@277| |#$R@@303|)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$R@@304| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@278|) TyType) (= (type |#$R@@304|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hTotalFunc1SS |#$T0@@278| |#$R@@304|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hTotalFunc1SS |#$T0@@278| |#$R@@304|)))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($IsBox bx@@106 (Tclass._System.___hTotalFunc1SS |#$T0@@278| |#$R@@304|))) )))
(assert (forall ((|#$T0@@279| T@U) (|#$R@@305| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (= (type |#$T0@@279|) TyType) (= (type |#$R@@305|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@279| |#$R@@305|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc1SS |#$T0@@279| |#$R@@305|)) (forall ((|x0#0@@28| T@U) ) (!  (=> (and (= (type |x0#0@@28|) BoxType) ($IsBox |x0#0@@28| |#$T0@@279|)) (Requires1 |#$T0@@279| |#$R@@305| $OneHeap |f#0@@65| |x0#0@@28|)) :qid |unknown.0:0| :skolemid |1253| :no-pattern (type |x0#0@@28|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) ))))) :qid |unknown.0:0| :skolemid |1254| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@279| |#$R@@305|))) )))
(assert (forall ((|#$T0@@280| T@U) (|#$R@@306| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@280|) TyType) (= (type |#$R@@306|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@280| |#$R@@306|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc1SS |#$T0@@280| |#$R@@306|) $h@@48))) :qid |unknown.0:0| :skolemid |1255| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@280| |#$R@@306|) $h@@48)) )))
(assert (= (type |#LinearContentMutableMap.lItem.Empty|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#LinearContentMutableMap.lItem.Empty|) |##LinearContentMutableMap.lItem.Empty|))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (LinearContentMutableMap.lItem.Empty_q d@@16) (= (DatatypeCtorId d@@16) |##LinearContentMutableMap.lItem.Empty|))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (LinearContentMutableMap.lItem.Empty_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (LinearContentMutableMap.lItem.Empty_q d@@17)) (= d@@17 |#LinearContentMutableMap.lItem.Empty|)) :qid |unknown.0:0| :skolemid |1257| :pattern ( (LinearContentMutableMap.lItem.Empty_q d@@17)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.lItem arg0@@363)) TyType) :qid |funType:Tclass.LinearContentMutableMap.lItem| :pattern ( (Tclass.LinearContentMutableMap.lItem arg0@@363)) )))
(assert (forall ((LinearContentMutableMap.lItem$V T@U) ) (!  (=> (= (type LinearContentMutableMap.lItem$V) TyType) (and (= (Tag (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V)) Tagclass.LinearContentMutableMap.lItem) (= (TagFamily (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V)) tytagFamily$lItem))) :qid |unknown.0:0| :skolemid |1258| :pattern ( (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.lItem_0 arg0@@364)) TyType) :qid |funType:Tclass.LinearContentMutableMap.lItem_0| :pattern ( (Tclass.LinearContentMutableMap.lItem_0 arg0@@364)) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@0 T@U) ) (!  (=> (= (type LinearContentMutableMap.lItem$V@@0) TyType) (= (Tclass.LinearContentMutableMap.lItem_0 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@0)) LinearContentMutableMap.lItem$V@@0)) :qid |unknown.0:0| :skolemid |1259| :pattern ( (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@0)) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@1 T@U) (bx@@107 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@1) TyType) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@107)) bx@@107) ($Is ($Unbox DatatypeTypeType bx@@107) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@1)))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($IsBox bx@@107 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@1))) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@2 T@U) ) (!  (=> (= (type LinearContentMutableMap.lItem$V@@2) TyType) ($Is |#LinearContentMutableMap.lItem.Empty| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@2))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($Is |#LinearContentMutableMap.lItem.Empty| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@2))) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@3 T@U) ($h@@49 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@3) TyType) (= (type $h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@49)) ($IsAlloc |#LinearContentMutableMap.lItem.Empty| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@3) $h@@49)) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($IsAlloc |#LinearContentMutableMap.lItem.Empty| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@3) $h@@49)) )))
(assert (= |#LinearContentMutableMap.lItem.Empty| (Lit |#LinearContentMutableMap.lItem.Empty|)))
(assert (forall ((arg0@@365 Int) (arg1@@144 T@U) ) (! (= (type (|#LinearContentMutableMap.lItem.Entry| arg0@@365 arg1@@144)) DatatypeTypeType) :qid |funType:#LinearContentMutableMap.lItem.Entry| :pattern ( (|#LinearContentMutableMap.lItem.Entry| arg0@@365 arg1@@144)) )))
(assert (forall ((|a#28#0#0| Int) (|a#28#1#0| T@U) ) (!  (=> (= (type |a#28#1#0|) BoxType) (= (DatatypeCtorId (|#LinearContentMutableMap.lItem.Entry| |a#28#0#0| |a#28#1#0|)) |##LinearContentMutableMap.lItem.Entry|)) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1263| :pattern ( (|#LinearContentMutableMap.lItem.Entry| |a#28#0#0| |a#28#1#0|)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (= (LinearContentMutableMap.lItem.Entry_q d@@18) (= (DatatypeCtorId d@@18) |##LinearContentMutableMap.lItem.Entry|))) :qid |unknown.0:0| :skolemid |1264| :pattern ( (LinearContentMutableMap.lItem.Entry_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (LinearContentMutableMap.lItem.Entry_q d@@19)) (exists ((|a#29#0#0| Int) (|a#29#1#0| T@U) ) (!  (and (= (type |a#29#1#0|) BoxType) (= d@@19 (|#LinearContentMutableMap.lItem.Entry| |a#29#0#0| |a#29#1#0|))) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1265| :no-pattern (type |a#29#1#0|) :no-pattern (U_2_int |a#29#1#0|) :no-pattern (U_2_bool |a#29#1#0|) ))) :qid |unknown.0:0| :skolemid |1266| :pattern ( (LinearContentMutableMap.lItem.Entry_q d@@19)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@108)) bx@@108) ($Is ($Unbox intType bx@@108) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1267| :pattern ( ($IsBox bx@@108 Tclass.NativeTypes.uint64)) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@4 T@U) (|a#30#0#0| Int) (|a#30#1#0| T@U) ) (!  (=> (and (= (type LinearContentMutableMap.lItem$V@@4) TyType) (= (type |a#30#1#0|) BoxType)) (= ($Is (|#LinearContentMutableMap.lItem.Entry| |a#30#0#0| |a#30#1#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@4))  (and ($Is (int_2_U |a#30#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#30#1#0| LinearContentMutableMap.lItem$V@@4)))) :qid |unknown.0:0| :skolemid |1268| :pattern ( ($Is (|#LinearContentMutableMap.lItem.Entry| |a#30#0#0| |a#30#1#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@4))) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@5 T@U) (|a#31#0#0| Int) (|a#31#1#0| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap.lItem$V@@5) TyType) (= (type |a#31#1#0|) BoxType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@50)) (= ($IsAlloc (|#LinearContentMutableMap.lItem.Entry| |a#31#0#0| |a#31#1#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@5) $h@@50)  (and ($IsAlloc (int_2_U |a#31#0#0|) Tclass.NativeTypes.uint64 $h@@50) ($IsAllocBox |a#31#1#0| LinearContentMutableMap.lItem$V@@5 $h@@50)))) :qid |unknown.0:0| :skolemid |1269| :pattern ( ($IsAlloc (|#LinearContentMutableMap.lItem.Entry| |a#31#0#0| |a#31#1#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@5) $h@@50)) )))
(assert (forall ((d@@20 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type d@@20) DatatypeTypeType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@51) (and (LinearContentMutableMap.lItem.Entry_q d@@20) (exists ((LinearContentMutableMap.lItem$V@@6 T@U) ) (!  (and (= (type LinearContentMutableMap.lItem$V@@6) TyType) ($IsAlloc d@@20 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@6) $h@@51)) :qid |unknown.0:0| :skolemid |1270| :pattern ( ($IsAlloc d@@20 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@6) $h@@51)) ))))) ($IsAlloc (int_2_U (LinearContentMutableMap.lItem.key d@@20)) Tclass.NativeTypes.uint64 $h@@51)) :qid |unknown.0:0| :skolemid |1271| :pattern ( ($IsAlloc (int_2_U (LinearContentMutableMap.lItem.key d@@20)) Tclass.NativeTypes.uint64 $h@@51)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (LinearContentMutableMap.lItem.value arg0@@366)) BoxType) :qid |funType:LinearContentMutableMap.lItem.value| :pattern ( (LinearContentMutableMap.lItem.value arg0@@366)) )))
(assert (forall ((d@@21 T@U) (LinearContentMutableMap.lItem$V@@7 T@U) ($h@@52 T@U) ) (!  (=> (and (and (and (= (type d@@21) DatatypeTypeType) (= (type LinearContentMutableMap.lItem$V@@7) TyType)) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@52) (and (LinearContentMutableMap.lItem.Entry_q d@@21) ($IsAlloc d@@21 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@7) $h@@52)))) ($IsAllocBox (LinearContentMutableMap.lItem.value d@@21) LinearContentMutableMap.lItem$V@@7 $h@@52)) :qid |unknown.0:0| :skolemid |1272| :pattern ( ($IsAllocBox (LinearContentMutableMap.lItem.value d@@21) LinearContentMutableMap.lItem$V@@7 $h@@52)) )))
(assert (forall ((|a#32#0#0| Int) (|a#32#1#0| T@U) ) (!  (=> (= (type |a#32#1#0|) BoxType) (= (|#LinearContentMutableMap.lItem.Entry| (LitInt |a#32#0#0|) (Lit |a#32#1#0|)) (Lit (|#LinearContentMutableMap.lItem.Entry| |a#32#0#0| |a#32#1#0|)))) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1273| :pattern ( (|#LinearContentMutableMap.lItem.Entry| (LitInt |a#32#0#0|) (Lit |a#32#1#0|))) )))
(assert (forall ((|a#33#0#0| Int) (|a#33#1#0| T@U) ) (!  (=> (= (type |a#33#1#0|) BoxType) (= (LinearContentMutableMap.lItem.key (|#LinearContentMutableMap.lItem.Entry| |a#33#0#0| |a#33#1#0|)) |a#33#0#0|)) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1274| :pattern ( (|#LinearContentMutableMap.lItem.Entry| |a#33#0#0| |a#33#1#0|)) )))
(assert (forall ((|a#34#0#0| Int) (|a#34#1#0| T@U) ) (!  (=> (= (type |a#34#1#0|) BoxType) (= (LinearContentMutableMap.lItem.value (|#LinearContentMutableMap.lItem.Entry| |a#34#0#0| |a#34#1#0|)) |a#34#1#0|)) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1275| :pattern ( (|#LinearContentMutableMap.lItem.Entry| |a#34#0#0| |a#34#1#0|)) )))
(assert (forall ((|a#35#0#0| Int) (|a#35#1#0| T@U) ) (!  (=> (= (type |a#35#1#0|) BoxType) (< (BoxRank |a#35#1#0|) (DtRank (|#LinearContentMutableMap.lItem.Entry| |a#35#0#0| |a#35#1#0|)))) :qid |LinearContentMutableMapidfy.48:44| :skolemid |1276| :pattern ( (|#LinearContentMutableMap.lItem.Entry| |a#35#0#0| |a#35#1#0|)) )))
(assert (forall ((arg0@@367 Int) ) (! (= (type (|#LinearContentMutableMap.lItem.Tombstone| arg0@@367)) DatatypeTypeType) :qid |funType:#LinearContentMutableMap.lItem.Tombstone| :pattern ( (|#LinearContentMutableMap.lItem.Tombstone| arg0@@367)) )))
(assert (forall ((|a#36#0#0| Int) ) (! (= (DatatypeCtorId (|#LinearContentMutableMap.lItem.Tombstone| |a#36#0#0|)) |##LinearContentMutableMap.lItem.Tombstone|) :qid |LinearContentMutableMapidfy.48:86| :skolemid |1277| :pattern ( (|#LinearContentMutableMap.lItem.Tombstone| |a#36#0#0|)) )))
(assert (forall ((d@@22 T@U) ) (!  (=> (= (type d@@22) DatatypeTypeType) (= (LinearContentMutableMap.lItem.Tombstone_q d@@22) (= (DatatypeCtorId d@@22) |##LinearContentMutableMap.lItem.Tombstone|))) :qid |unknown.0:0| :skolemid |1278| :pattern ( (LinearContentMutableMap.lItem.Tombstone_q d@@22)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (LinearContentMutableMap.lItem.Tombstone_q d@@23)) (exists ((|a#37#0#0| Int) ) (! (= d@@23 (|#LinearContentMutableMap.lItem.Tombstone| |a#37#0#0|)) :qid |LinearContentMutableMapidfy.48:86| :skolemid |1279| ))) :qid |unknown.0:0| :skolemid |1280| :pattern ( (LinearContentMutableMap.lItem.Tombstone_q d@@23)) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@8 T@U) (|a#38#0#0| Int) ) (!  (=> (= (type LinearContentMutableMap.lItem$V@@8) TyType) (= ($Is (|#LinearContentMutableMap.lItem.Tombstone| |a#38#0#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@8)) ($Is (int_2_U |a#38#0#0|) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1281| :pattern ( ($Is (|#LinearContentMutableMap.lItem.Tombstone| |a#38#0#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@8))) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@9 T@U) (|a#39#0#0| Int) ($h@@53 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@9) TyType) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@53)) (= ($IsAlloc (|#LinearContentMutableMap.lItem.Tombstone| |a#39#0#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@9) $h@@53) ($IsAlloc (int_2_U |a#39#0#0|) Tclass.NativeTypes.uint64 $h@@53))) :qid |unknown.0:0| :skolemid |1282| :pattern ( ($IsAlloc (|#LinearContentMutableMap.lItem.Tombstone| |a#39#0#0|) (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@9) $h@@53)) )))
(assert (forall ((d@@24 T@U) ($h@@54 T@U) ) (!  (=> (and (and (= (type d@@24) DatatypeTypeType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@54) (and (LinearContentMutableMap.lItem.Tombstone_q d@@24) (exists ((LinearContentMutableMap.lItem$V@@10 T@U) ) (!  (and (= (type LinearContentMutableMap.lItem$V@@10) TyType) ($IsAlloc d@@24 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@10) $h@@54)) :qid |unknown.0:0| :skolemid |1283| :pattern ( ($IsAlloc d@@24 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@10) $h@@54)) ))))) ($IsAlloc (int_2_U (LinearContentMutableMap.lItem.key d@@24)) Tclass.NativeTypes.uint64 $h@@54)) :qid |unknown.0:0| :skolemid |1284| :pattern ( ($IsAlloc (int_2_U (LinearContentMutableMap.lItem.key d@@24)) Tclass.NativeTypes.uint64 $h@@54)) )))
(assert (forall ((|a#40#0#0| Int) ) (! (= (|#LinearContentMutableMap.lItem.Tombstone| (LitInt |a#40#0#0|)) (Lit (|#LinearContentMutableMap.lItem.Tombstone| |a#40#0#0|))) :qid |LinearContentMutableMapidfy.48:86| :skolemid |1285| :pattern ( (|#LinearContentMutableMap.lItem.Tombstone| (LitInt |a#40#0#0|))) )))
(assert (forall ((|a#41#0#0| Int) ) (! (= (LinearContentMutableMap.lItem.key (|#LinearContentMutableMap.lItem.Tombstone| |a#41#0#0|)) |a#41#0#0|) :qid |LinearContentMutableMapidfy.48:86| :skolemid |1286| :pattern ( (|#LinearContentMutableMap.lItem.Tombstone| |a#41#0#0|)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (and (= (type d@@25) DatatypeTypeType) (|$IsA#LinearContentMutableMap.lItem| d@@25)) (or (or (LinearContentMutableMap.lItem.Empty_q d@@25) (LinearContentMutableMap.lItem.Entry_q d@@25)) (LinearContentMutableMap.lItem.Tombstone_q d@@25))) :qid |unknown.0:0| :skolemid |1287| :pattern ( (|$IsA#LinearContentMutableMap.lItem| d@@25)) )))
(assert (forall ((LinearContentMutableMap.lItem$V@@11 T@U) (d@@26 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@11) TyType) (= (type d@@26) DatatypeTypeType)) ($Is d@@26 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@11))) (or (or (LinearContentMutableMap.lItem.Empty_q d@@26) (LinearContentMutableMap.lItem.Entry_q d@@26)) (LinearContentMutableMap.lItem.Tombstone_q d@@26))) :qid |unknown.0:0| :skolemid |1288| :pattern ( (LinearContentMutableMap.lItem.Tombstone_q d@@26) ($Is d@@26 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@11))) :pattern ( (LinearContentMutableMap.lItem.Entry_q d@@26) ($Is d@@26 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@11))) :pattern ( (LinearContentMutableMap.lItem.Empty_q d@@26) ($Is d@@26 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@11))) )))
(assert (forall ((a@@118 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (LinearContentMutableMap.lItem.Empty_q a@@118) (LinearContentMutableMap.lItem.Empty_q b@@68))) (= (|LinearContentMutableMap.lItem#Equal| a@@118 b@@68) true)) :qid |unknown.0:0| :skolemid |1289| :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@118 b@@68) (LinearContentMutableMap.lItem.Empty_q a@@118)) :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@118 b@@68) (LinearContentMutableMap.lItem.Empty_q b@@68)) )))
(assert (forall ((a@@119 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (LinearContentMutableMap.lItem.Entry_q a@@119) (LinearContentMutableMap.lItem.Entry_q b@@69))) (= (|LinearContentMutableMap.lItem#Equal| a@@119 b@@69)  (and (= (LinearContentMutableMap.lItem.key a@@119) (LinearContentMutableMap.lItem.key b@@69)) (= (LinearContentMutableMap.lItem.value a@@119) (LinearContentMutableMap.lItem.value b@@69))))) :qid |unknown.0:0| :skolemid |1290| :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@119 b@@69) (LinearContentMutableMap.lItem.Entry_q a@@119)) :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@119 b@@69) (LinearContentMutableMap.lItem.Entry_q b@@69)) )))
(assert (forall ((a@@120 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@120) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (LinearContentMutableMap.lItem.Tombstone_q a@@120) (LinearContentMutableMap.lItem.Tombstone_q b@@70))) (= (|LinearContentMutableMap.lItem#Equal| a@@120 b@@70) (= (LinearContentMutableMap.lItem.key a@@120) (LinearContentMutableMap.lItem.key b@@70)))) :qid |unknown.0:0| :skolemid |1291| :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@120 b@@70) (LinearContentMutableMap.lItem.Tombstone_q a@@120)) :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@120 b@@70) (LinearContentMutableMap.lItem.Tombstone_q b@@70)) )))
(assert (forall ((a@@121 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@121) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|LinearContentMutableMap.lItem#Equal| a@@121 b@@71) (= a@@121 b@@71))) :qid |unknown.0:0| :skolemid |1292| :pattern ( (|LinearContentMutableMap.lItem#Equal| a@@121 b@@71)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass.LinearMutableMapBase.Item arg0@@368)) TyType) :qid |funType:Tclass.LinearMutableMapBase.Item| :pattern ( (Tclass.LinearMutableMapBase.Item arg0@@368)) )))
(assert (forall ((LinearMutableMapBase.Item$V T@U) ) (!  (=> (= (type LinearMutableMapBase.Item$V) TyType) (and (= (Tag (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V)) Tagclass.LinearMutableMapBase.Item) (= (TagFamily (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V)) tytagFamily$Item))) :qid |unknown.0:0| :skolemid |1296| :pattern ( (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (Tclass.LinearMutableMapBase.Item_0 arg0@@369)) TyType) :qid |funType:Tclass.LinearMutableMapBase.Item_0| :pattern ( (Tclass.LinearMutableMapBase.Item_0 arg0@@369)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@0 T@U) ) (!  (=> (= (type LinearMutableMapBase.Item$V@@0) TyType) (= (Tclass.LinearMutableMapBase.Item_0 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@0)) LinearMutableMapBase.Item$V@@0)) :qid |unknown.0:0| :skolemid |1297| :pattern ( (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@0)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@1 T@U) (bx@@109 T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase.Item$V@@1) TyType) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@1)))) :qid |unknown.0:0| :skolemid |1298| :pattern ( ($IsBox bx@@109 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@1))) )))
(assert (forall ((arg0@@370 T@U) (arg1@@145 T@U) ) (! (= (type (LinearContentMutableMap.lItem.toItem arg0@@370 arg1@@145)) DatatypeTypeType) :qid |funType:LinearContentMutableMap.lItem.toItem| :pattern ( (LinearContentMutableMap.lItem.toItem arg0@@370 arg1@@145)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((LinearContentMutableMap.lItem$V@@12 T@U) (this T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@12) TyType) (= (type this) DatatypeTypeType)) (or (|LinearContentMutableMap.lItem.toItem#canCall| LinearContentMutableMap.lItem$V@@12 this) (and (not (= 3 $FunctionContextHeight)) ($Is this (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@12))))) ($Is (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@12 this) (Tclass.LinearMutableMapBase.Item LinearContentMutableMap.lItem$V@@12))) :qid |unknown.0:0| :skolemid |1299| :pattern ( (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@12 this)) ))))
(assert (forall ((LinearContentMutableMap.lItem$V@@13 T@U) (this@@0 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@13) TyType) (= (type this@@0) DatatypeTypeType)) ($Is this@@0 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@13))) (= (|LinearContentMutableMap.lItem.toItem#requires| LinearContentMutableMap.lItem$V@@13 this@@0) true)) :qid |unknown.0:0| :skolemid |1300| :pattern ( (|LinearContentMutableMap.lItem.toItem#requires| LinearContentMutableMap.lItem$V@@13 this@@0)) )))
(assert  (and (and (= (type |#LinearMutableMapBase.Item.Empty|) DatatypeTypeType) (forall ((arg0@@371 Int) (arg1@@146 T@U) ) (! (= (type (|#LinearMutableMapBase.Item.Entry| arg0@@371 arg1@@146)) DatatypeTypeType) :qid |funType:#LinearMutableMapBase.Item.Entry| :pattern ( (|#LinearMutableMapBase.Item.Entry| arg0@@371 arg1@@146)) ))) (forall ((arg0@@372 Int) ) (! (= (type (|#LinearMutableMapBase.Item.Tombstone| arg0@@372)) DatatypeTypeType) :qid |funType:#LinearMutableMapBase.Item.Tombstone| :pattern ( (|#LinearMutableMapBase.Item.Tombstone| arg0@@372)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((LinearContentMutableMap.lItem$V@@14 T@U) (this@@1 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@14) TyType) (= (type this@@1) DatatypeTypeType)) (or (|LinearContentMutableMap.lItem.toItem#canCall| LinearContentMutableMap.lItem$V@@14 this@@1) (and (not (= 3 $FunctionContextHeight)) ($Is this@@1 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@14))))) (= (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@14 this@@1) (ite (LinearContentMutableMap.lItem.Empty_q this@@1) |#LinearMutableMapBase.Item.Empty| (ite (LinearContentMutableMap.lItem.Entry_q this@@1) (let ((|value#0| (LinearContentMutableMap.lItem.value this@@1))) (let ((|key#0| (LinearContentMutableMap.lItem.key this@@1))) (|#LinearMutableMapBase.Item.Entry| |key#0| |value#0|))) (let ((|key#1| (LinearContentMutableMap.lItem.key this@@1))) (|#LinearMutableMapBase.Item.Tombstone| |key#1|)))))) :qid |unknown.0:0| :skolemid |1301| :pattern ( (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@14 this@@1)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall ((LinearContentMutableMap.lItem$V@@15 T@U) (this@@2 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.lItem$V@@15) TyType) (= (type this@@2) DatatypeTypeType)) (or (|LinearContentMutableMap.lItem.toItem#canCall| LinearContentMutableMap.lItem$V@@15 (Lit this@@2)) (and (not (= 3 $FunctionContextHeight)) ($Is this@@2 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.lItem$V@@15))))) (= (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@15 (Lit this@@2)) (ite (LinearContentMutableMap.lItem.Empty_q (Lit this@@2)) |#LinearMutableMapBase.Item.Empty| (ite (LinearContentMutableMap.lItem.Entry_q (Lit this@@2)) (let ((|value#2| (Lit (LinearContentMutableMap.lItem.value (Lit this@@2))))) (let ((|key#4| (LitInt (LinearContentMutableMap.lItem.key (Lit this@@2))))) (Lit (|#LinearMutableMapBase.Item.Entry| |key#4| |value#2|)))) (let ((|key#5| (LitInt (LinearContentMutableMap.lItem.key (Lit this@@2))))) (Lit (|#LinearMutableMapBase.Item.Tombstone| |key#5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1302| :pattern ( (LinearContentMutableMap.lItem.toItem LinearContentMutableMap.lItem$V@@15 (Lit this@@2))) ))))
(assert (forall ((arg0@@373 T@U) (arg1@@147 Int) (arg2@@79 T@U) ) (! (= (type (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@373 arg1@@147 arg2@@79)) DatatypeTypeType) :qid |funType:#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@373 arg1@@147 arg2@@79)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| Int) (|a#0#2#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#0#0#0| |a#0#1#0| |a#0#2#0|)) |##LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap|)) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1303| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#0#0#0| |a#0#1#0| |a#0#2#0|)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (= (type d@@27) DatatypeTypeType) (= (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@27) (= (DatatypeCtorId d@@27) |##LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap|))) :qid |unknown.0:0| :skolemid |1304| :pattern ( (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@27)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@28)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| Int) (|a#1#2#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#2#0|) (MapType BoxType BoxType))) (= d@@28 (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#1#0#0| |a#1#1#0| |a#1#2#0|))) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1305| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |1306| :pattern ( (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@28)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (Tclass.Options.Option arg0@@374)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@374)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1307| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@375)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@375)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1308| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@110 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1309| :pattern ( ($IsBox bx@@110 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap arg0@@376)) TyType) :qid |funType:Tclass.LinearContentMutableMap.FixedSizeLinearHashMap| :pattern ( (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap arg0@@376)) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V T@U) ) (!  (=> (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V) TyType) (and (= (Tag (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V)) Tagclass.LinearContentMutableMap.FixedSizeLinearHashMap) (= (TagFamily (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V)) tytagFamily$FixedSizeLinearHashMap))) :qid |unknown.0:0| :skolemid |1310| :pattern ( (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap_0 arg0@@377)) TyType) :qid |funType:Tclass.LinearContentMutableMap.FixedSizeLinearHashMap_0| :pattern ( (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap_0 arg0@@377)) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@0 T@U) ) (!  (=> (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@0) TyType) (= (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap_0 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@0)) LinearContentMutableMap.FixedSizeLinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1311| :pattern ( (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@0)) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@1 T@U) (bx@@111 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@1) TyType) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1312| :pattern ( ($IsBox bx@@111 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@1))) )))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (|#$lseq| arg0@@378)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@378)) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@2 T@U) (|a#2#0#0| T@U) (|a#2#1#0| Int) (|a#2#2#0| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@2) TyType) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#2#0|) (MapType BoxType BoxType))) (= ($Is (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#2#0#0| |a#2#1#0| |a#2#2#0|) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@2))  (and (and ($IsBox |a#2#0#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.FixedSizeLinearHashMap$V@@2))) ($Is (int_2_U |a#2#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#2#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap.FixedSizeLinearHashMap$V@@2)))))) :qid |unknown.0:0| :skolemid |1313| :pattern ( ($Is (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#2#0#0| |a#2#1#0| |a#2#2#0|) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@2))) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@3 T@U) (|a#3#0#0| T@U) (|a#3#1#0| Int) (|a#3#2#0| T@U) ($h@@55 T@U) ) (!  (=> (and (and (and (and (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@3) TyType) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#2#0|) (MapType BoxType BoxType))) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@55)) (= ($IsAlloc (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#3#0#0| |a#3#1#0| |a#3#2#0|) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@3) $h@@55)  (and (and ($IsAllocBox |a#3#0#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.FixedSizeLinearHashMap$V@@3)) $h@@55) ($IsAlloc (int_2_U |a#3#1#0|) Tclass.NativeTypes.uint64 $h@@55)) ($IsAlloc |a#3#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap.FixedSizeLinearHashMap$V@@3)) $h@@55)))) :qid |unknown.0:0| :skolemid |1314| :pattern ( ($IsAlloc (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#3#0#0| |a#3#1#0| |a#3#2#0|) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@3) $h@@55)) )))
(assert (forall ((arg0@@379 T@U) ) (! (= (type (LinearContentMutableMap.FixedSizeLinearHashMap.storage arg0@@379)) BoxType) :qid |funType:LinearContentMutableMap.FixedSizeLinearHashMap.storage| :pattern ( (LinearContentMutableMap.FixedSizeLinearHashMap.storage arg0@@379)) )))
(assert (forall ((d@@29 T@U) (LinearContentMutableMap.FixedSizeLinearHashMap$V@@4 T@U) ($h@@56 T@U) ) (!  (=> (and (and (and (= (type d@@29) DatatypeTypeType) (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@4) TyType)) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@56) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@29) ($IsAlloc d@@29 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@4) $h@@56)))) ($IsAllocBox (LinearContentMutableMap.FixedSizeLinearHashMap.storage d@@29) (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.FixedSizeLinearHashMap$V@@4)) $h@@56)) :qid |unknown.0:0| :skolemid |1315| :pattern ( ($IsAllocBox (LinearContentMutableMap.FixedSizeLinearHashMap.storage d@@29) (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap.FixedSizeLinearHashMap$V@@4)) $h@@56)) )))
(assert (forall ((d@@30 T@U) ($h@@57 T@U) ) (!  (=> (and (and (= (type d@@30) DatatypeTypeType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@57) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@30) (exists ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@5 T@U) ) (!  (and (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@5) TyType) ($IsAlloc d@@30 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@5) $h@@57)) :qid |unknown.0:0| :skolemid |1316| :pattern ( ($IsAlloc d@@30 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@5) $h@@57)) ))))) ($IsAlloc (int_2_U (LinearContentMutableMap.FixedSizeLinearHashMap.count d@@30)) Tclass.NativeTypes.uint64 $h@@57)) :qid |unknown.0:0| :skolemid |1317| :pattern ( ($IsAlloc (int_2_U (LinearContentMutableMap.FixedSizeLinearHashMap.count d@@30)) Tclass.NativeTypes.uint64 $h@@57)) )))
(assert (forall ((arg0@@380 T@U) ) (! (= (type (LinearContentMutableMap.FixedSizeLinearHashMap.contents arg0@@380)) (MapType BoxType BoxType)) :qid |funType:LinearContentMutableMap.FixedSizeLinearHashMap.contents| :pattern ( (LinearContentMutableMap.FixedSizeLinearHashMap.contents arg0@@380)) )))
(assert (forall ((d@@31 T@U) (LinearContentMutableMap.FixedSizeLinearHashMap$V@@6 T@U) ($h@@58 T@U) ) (!  (=> (and (and (and (= (type d@@31) DatatypeTypeType) (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@6) TyType)) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@58) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@31) ($IsAlloc d@@31 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@6) $h@@58)))) ($IsAlloc (LinearContentMutableMap.FixedSizeLinearHashMap.contents d@@31) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap.FixedSizeLinearHashMap$V@@6)) $h@@58)) :qid |unknown.0:0| :skolemid |1318| :pattern ( ($IsAlloc (LinearContentMutableMap.FixedSizeLinearHashMap.contents d@@31) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap.FixedSizeLinearHashMap$V@@6)) $h@@58)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| Int) (|a#4#2#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#2#0|) (MapType BoxType BoxType))) (= (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#4#0#0|) (LitInt |a#4#1#0|) (Lit |a#4#2#0|)) (Lit (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#4#0#0| |a#4#1#0| |a#4#2#0|)))) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1319| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#4#0#0|) (LitInt |a#4#1#0|) (Lit |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| Int) (|a#5#2#0| T@U) ) (!  (=> (and (= (type |a#5#0#0@@0|) BoxType) (= (type |a#5#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.FixedSizeLinearHashMap.storage (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) |a#5#0#0@@0|)) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1320| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| Int) (|a#6#2#0| T@U) ) (!  (=> (and (= (type |a#6#0#0@@0|) BoxType) (= (type |a#6#2#0|) (MapType BoxType BoxType))) (< (BoxRank |a#6#0#0@@0|) (DtRank (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)))) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1321| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| Int) (|a#7#2#0| T@U) ) (!  (=> (and (= (type |a#7#0#0@@0|) BoxType) (= (type |a#7#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.FixedSizeLinearHashMap.count (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) |a#7#1#0@@0|)) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1322| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) )))
(assert (forall ((|a#8#0#0@@0| T@U) (|a#8#1#0@@0| Int) (|a#8#2#0| T@U) ) (!  (=> (and (= (type |a#8#0#0@@0|) BoxType) (= (type |a#8#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.FixedSizeLinearHashMap.contents (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)) |a#8#2#0|)) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1323| :pattern ( (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)) )))
(assert (forall ((|a#9#0#0@@0| T@U) (|a#9#1#0@@0| Int) (|a#9#2#0| T@U) (d@@32 T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0@@0|) BoxType) (= (type |a#9#2#0|) (MapType BoxType BoxType))) (= (type d@@32) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#9#2#0|) ($Box d@@32)))) (< (DtRank d@@32) (DtRank (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#9#0#0@@0| |a#9#1#0@@0| |a#9#2#0|)))) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1324| :pattern ( (MapType0Select (|Map#Domain| |a#9#2#0|) ($Box d@@32)) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#9#0#0@@0| |a#9#1#0@@0| |a#9#2#0|)) )))
(assert (forall ((|a#10#0#0@@0| T@U) (|a#10#1#0@@0| Int) (|a#10#2#0| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (= (type |a#10#0#0@@0|) BoxType) (= (type |a#10#2#0|) (MapType BoxType BoxType))) (= (type bx@@112) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#10#2#0|) bx@@112))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#10#2#0|) bx@@112))) (DtRank (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0|)))) :qid |LinearContentMutableMapidfy.79:12| :skolemid |1325| :pattern ( (MapType0Select (|Map#Domain| |a#10#2#0|) bx@@112) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#10#0#0@@0| |a#10#1#0@@0| |a#10#2#0|)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (|$IsA#LinearContentMutableMap.FixedSizeLinearHashMap| d@@33)) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33)) :qid |unknown.0:0| :skolemid |1326| :pattern ( (|$IsA#LinearContentMutableMap.FixedSizeLinearHashMap| d@@33)) )))
(assert (forall ((LinearContentMutableMap.FixedSizeLinearHashMap$V@@7 T@U) (d@@34 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.FixedSizeLinearHashMap$V@@7) TyType) (= (type d@@34) DatatypeTypeType)) ($Is d@@34 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@7))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@34)) :qid |unknown.0:0| :skolemid |1327| :pattern ( (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@34) ($Is d@@34 (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.FixedSizeLinearHashMap$V@@7))) )))
(assert (forall ((a@@122 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) true) (= (|LinearContentMutableMap.FixedSizeLinearHashMap#Equal| a@@122 b@@72)  (and (and (= (LinearContentMutableMap.FixedSizeLinearHashMap.storage a@@122) (LinearContentMutableMap.FixedSizeLinearHashMap.storage b@@72)) (= (LinearContentMutableMap.FixedSizeLinearHashMap.count a@@122) (LinearContentMutableMap.FixedSizeLinearHashMap.count b@@72))) (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents a@@122) (LinearContentMutableMap.FixedSizeLinearHashMap.contents b@@72))))) :qid |unknown.0:0| :skolemid |1328| :pattern ( (|LinearContentMutableMap.FixedSizeLinearHashMap#Equal| a@@122 b@@72)) )))
(assert (forall ((a@@123 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@123) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|LinearContentMutableMap.FixedSizeLinearHashMap#Equal| a@@123 b@@73) (= a@@123 b@@73))) :qid |unknown.0:0| :skolemid |1329| :pattern ( (|LinearContentMutableMap.FixedSizeLinearHashMap#Equal| a@@123 b@@73)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@148 Int) (arg2@@80 T@U) ) (! (= (type (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| arg0@@381 arg1@@148 arg2@@80)) DatatypeTypeType) :qid |funType:#LinearContentMutableMap.LinearHashMap.LinearHashMap| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| arg0@@381 arg1@@148 arg2@@80)) )))
(assert (forall ((|a#11#0#0@@0| T@U) (|a#11#1#0@@0| Int) (|a#11#2#0| T@U) ) (!  (=> (and (= (type |a#11#0#0@@0|) DatatypeTypeType) (= (type |a#11#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0|)) |##LinearContentMutableMap.LinearHashMap.LinearHashMap|)) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1330| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#11#0#0@@0| |a#11#1#0@@0| |a#11#2#0|)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (= (type d@@35) DatatypeTypeType) (= (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@35) (= (DatatypeCtorId d@@35) |##LinearContentMutableMap.LinearHashMap.LinearHashMap|))) :qid |unknown.0:0| :skolemid |1331| :pattern ( (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@35)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@36)) (exists ((|a#12#0#0@@0| T@U) (|a#12#1#0@@0| Int) (|a#12#2#0| T@U) ) (!  (and (and (= (type |a#12#0#0@@0|) DatatypeTypeType) (= (type |a#12#2#0|) (MapType BoxType BoxType))) (= d@@36 (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#12#0#0@@0| |a#12#1#0@@0| |a#12#2#0|))) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1332| :no-pattern (type |a#12#0#0@@0|) :no-pattern (type |a#12#2#0|) :no-pattern (U_2_int |a#12#0#0@@0|) :no-pattern (U_2_bool |a#12#0#0@@0|) :no-pattern (U_2_int |a#12#2#0|) :no-pattern (U_2_bool |a#12#2#0|) ))) :qid |unknown.0:0| :skolemid |1333| :pattern ( (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@36)) )))
(assert (forall ((arg0@@382 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.LinearHashMap arg0@@382)) TyType) :qid |funType:Tclass.LinearContentMutableMap.LinearHashMap| :pattern ( (Tclass.LinearContentMutableMap.LinearHashMap arg0@@382)) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V T@U) ) (!  (=> (= (type LinearContentMutableMap.LinearHashMap$V) TyType) (and (= (Tag (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V)) Tagclass.LinearContentMutableMap.LinearHashMap) (= (TagFamily (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V)) tytagFamily$LinearHashMap))) :qid |unknown.0:0| :skolemid |1334| :pattern ( (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V)) )))
(assert (forall ((arg0@@383 T@U) ) (! (= (type (Tclass.LinearContentMutableMap.LinearHashMap_0 arg0@@383)) TyType) :qid |funType:Tclass.LinearContentMutableMap.LinearHashMap_0| :pattern ( (Tclass.LinearContentMutableMap.LinearHashMap_0 arg0@@383)) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@0 T@U) ) (!  (=> (= (type LinearContentMutableMap.LinearHashMap$V@@0) TyType) (= (Tclass.LinearContentMutableMap.LinearHashMap_0 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@0)) LinearContentMutableMap.LinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1335| :pattern ( (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@0)) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@1 T@U) (bx@@113 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@1) TyType) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1336| :pattern ( ($IsBox bx@@113 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@1))) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@2 T@U) (|a#13#0#0@@0| T@U) (|a#13#1#0@@0| Int) (|a#13#2#0| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@2) TyType) (= (type |a#13#0#0@@0|) DatatypeTypeType)) (= (type |a#13#2#0|) (MapType BoxType BoxType))) (= ($Is (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0|) (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@2))  (and (and ($Is |a#13#0#0@@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.LinearHashMap$V@@2)) ($Is (int_2_U |a#13#1#0@@0|) Tclass.NativeTypes.uint64)) ($Is |a#13#2#0| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap.LinearHashMap$V@@2))))) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($Is (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#13#0#0@@0| |a#13#1#0@@0| |a#13#2#0|) (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@2))) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@3 T@U) (|a#14#0#0@@0| T@U) (|a#14#1#0@@0| Int) (|a#14#2#0| T@U) ($h@@59 T@U) ) (!  (=> (and (and (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@3) TyType) (= (type |a#14#0#0@@0|) DatatypeTypeType)) (= (type |a#14#2#0|) (MapType BoxType BoxType))) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@59)) (= ($IsAlloc (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0|) (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@3) $h@@59)  (and (and ($IsAlloc |a#14#0#0@@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.LinearHashMap$V@@3) $h@@59) ($IsAlloc (int_2_U |a#14#1#0@@0|) Tclass.NativeTypes.uint64 $h@@59)) ($IsAlloc |a#14#2#0| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap.LinearHashMap$V@@3) $h@@59)))) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsAlloc (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#14#0#0@@0| |a#14#1#0@@0| |a#14#2#0|) (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@3) $h@@59)) )))
(assert (forall ((arg0@@384 T@U) ) (! (= (type (LinearContentMutableMap.LinearHashMap.underlying arg0@@384)) DatatypeTypeType) :qid |funType:LinearContentMutableMap.LinearHashMap.underlying| :pattern ( (LinearContentMutableMap.LinearHashMap.underlying arg0@@384)) )))
(assert (forall ((d@@37 T@U) (LinearContentMutableMap.LinearHashMap$V@@4 T@U) ($h@@60 T@U) ) (!  (=> (and (and (and (= (type d@@37) DatatypeTypeType) (= (type LinearContentMutableMap.LinearHashMap$V@@4) TyType)) (= (type $h@@60) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@60) (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@37) ($IsAlloc d@@37 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@4) $h@@60)))) ($IsAlloc (LinearContentMutableMap.LinearHashMap.underlying d@@37) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.LinearHashMap$V@@4) $h@@60)) :qid |unknown.0:0| :skolemid |1339| :pattern ( ($IsAlloc (LinearContentMutableMap.LinearHashMap.underlying d@@37) (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap.LinearHashMap$V@@4) $h@@60)) )))
(assert (forall ((d@@38 T@U) ($h@@61 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@61) (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@38) (exists ((LinearContentMutableMap.LinearHashMap$V@@5 T@U) ) (!  (and (= (type LinearContentMutableMap.LinearHashMap$V@@5) TyType) ($IsAlloc d@@38 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@5) $h@@61)) :qid |unknown.0:0| :skolemid |1340| :pattern ( ($IsAlloc d@@38 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@5) $h@@61)) ))))) ($IsAlloc (int_2_U (LinearContentMutableMap.LinearHashMap.count d@@38)) Tclass.NativeTypes.uint64 $h@@61)) :qid |unknown.0:0| :skolemid |1341| :pattern ( ($IsAlloc (int_2_U (LinearContentMutableMap.LinearHashMap.count d@@38)) Tclass.NativeTypes.uint64 $h@@61)) )))
(assert (forall ((arg0@@385 T@U) ) (! (= (type (LinearContentMutableMap.LinearHashMap.contents arg0@@385)) (MapType BoxType BoxType)) :qid |funType:LinearContentMutableMap.LinearHashMap.contents| :pattern ( (LinearContentMutableMap.LinearHashMap.contents arg0@@385)) )))
(assert (forall ((d@@39 T@U) (LinearContentMutableMap.LinearHashMap$V@@6 T@U) ($h@@62 T@U) ) (!  (=> (and (and (and (= (type d@@39) DatatypeTypeType) (= (type LinearContentMutableMap.LinearHashMap$V@@6) TyType)) (= (type $h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@62) (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@39) ($IsAlloc d@@39 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@6) $h@@62)))) ($IsAlloc (LinearContentMutableMap.LinearHashMap.contents d@@39) (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap.LinearHashMap$V@@6) $h@@62)) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($IsAlloc (LinearContentMutableMap.LinearHashMap.contents d@@39) (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap.LinearHashMap$V@@6) $h@@62)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| Int) (|a#15#2#0| T@U) ) (!  (=> (and (= (type |a#15#0#0@@0|) DatatypeTypeType) (= (type |a#15#2#0|) (MapType BoxType BoxType))) (= (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| (Lit |a#15#0#0@@0|) (LitInt |a#15#1#0@@0|) (Lit |a#15#2#0|)) (Lit (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#15#0#0@@0| |a#15#1#0@@0| |a#15#2#0|)))) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1343| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| (Lit |a#15#0#0@@0|) (LitInt |a#15#1#0@@0|) (Lit |a#15#2#0|))) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| Int) (|a#16#2#0| T@U) ) (!  (=> (and (= (type |a#16#0#0@@0|) DatatypeTypeType) (= (type |a#16#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.LinearHashMap.underlying (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|)) |a#16#0#0@@0|)) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1344| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| Int) (|a#17#2#0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@0|) DatatypeTypeType) (= (type |a#17#2#0|) (MapType BoxType BoxType))) (< (DtRank |a#17#0#0@@0|) (DtRank (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|)))) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1345| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|)) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0@@0| Int) (|a#18#2#0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@0|) DatatypeTypeType) (= (type |a#18#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.LinearHashMap.count (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#18#0#0@@0| |a#18#1#0@@0| |a#18#2#0|)) |a#18#1#0@@0|)) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1346| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#18#0#0@@0| |a#18#1#0@@0| |a#18#2#0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0@@0| Int) (|a#19#2#0| T@U) ) (!  (=> (and (= (type |a#19#0#0@@0|) DatatypeTypeType) (= (type |a#19#2#0|) (MapType BoxType BoxType))) (= (LinearContentMutableMap.LinearHashMap.contents (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#19#0#0@@0| |a#19#1#0@@0| |a#19#2#0|)) |a#19#2#0|)) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1347| :pattern ( (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#19#0#0@@0| |a#19#1#0@@0| |a#19#2#0|)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0@@0| Int) (|a#20#2#0| T@U) (d@@40 T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0@@0|) DatatypeTypeType) (= (type |a#20#2#0|) (MapType BoxType BoxType))) (= (type d@@40) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#20#2#0|) ($Box d@@40)))) (< (DtRank d@@40) (DtRank (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#20#0#0@@0| |a#20#1#0@@0| |a#20#2#0|)))) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1348| :pattern ( (MapType0Select (|Map#Domain| |a#20#2#0|) ($Box d@@40)) (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#20#0#0@@0| |a#20#1#0@@0| |a#20#2#0|)) )))
(assert (forall ((|a#21#0#0@@0| T@U) (|a#21#1#0@@0| Int) (|a#21#2#0| T@U) (bx@@114 T@U) ) (!  (=> (and (and (and (= (type |a#21#0#0@@0|) DatatypeTypeType) (= (type |a#21#2#0|) (MapType BoxType BoxType))) (= (type bx@@114) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#21#2#0|) bx@@114))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#21#2#0|) bx@@114))) (DtRank (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#21#0#0@@0| |a#21#1#0@@0| |a#21#2#0|)))) :qid |LinearContentMutableMapidfy.466:12| :skolemid |1349| :pattern ( (MapType0Select (|Map#Domain| |a#21#2#0|) bx@@114) (|#LinearContentMutableMap.LinearHashMap.LinearHashMap| |a#21#0#0@@0| |a#21#1#0@@0| |a#21#2#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (|$IsA#LinearContentMutableMap.LinearHashMap| d@@41)) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@41)) :qid |unknown.0:0| :skolemid |1350| :pattern ( (|$IsA#LinearContentMutableMap.LinearHashMap| d@@41)) )))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@7 T@U) (d@@42 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@7) TyType) (= (type d@@42) DatatypeTypeType)) ($Is d@@42 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@7))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@42)) :qid |unknown.0:0| :skolemid |1351| :pattern ( (LinearContentMutableMap.LinearHashMap.LinearHashMap_q d@@42) ($Is d@@42 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@7))) )))
(assert (forall ((a@@124 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) true) (= (|LinearContentMutableMap.LinearHashMap#Equal| a@@124 b@@74)  (and (and (|LinearContentMutableMap.FixedSizeLinearHashMap#Equal| (LinearContentMutableMap.LinearHashMap.underlying a@@124) (LinearContentMutableMap.LinearHashMap.underlying b@@74)) (= (LinearContentMutableMap.LinearHashMap.count a@@124) (LinearContentMutableMap.LinearHashMap.count b@@74))) (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents a@@124) (LinearContentMutableMap.LinearHashMap.contents b@@74))))) :qid |unknown.0:0| :skolemid |1352| :pattern ( (|LinearContentMutableMap.LinearHashMap#Equal| a@@124 b@@74)) )))
(assert (forall ((a@@125 T@U) (b@@75 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (= (|LinearContentMutableMap.LinearHashMap#Equal| a@@125 b@@75) (= a@@125 b@@75))) :qid |unknown.0:0| :skolemid |1353| :pattern ( (|LinearContentMutableMap.LinearHashMap#Equal| a@@125 b@@75)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((LinearContentMutableMap.LinearHashMap$V@@8 T@U) (this@@3 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@8) TyType) (= (type this@@3) DatatypeTypeType)) (or (|LinearContentMutableMap.LinearHashMap.Inv#canCall| LinearContentMutableMap.LinearHashMap$V@@8 this@@3) (and (not (= 40 $FunctionContextHeight)) ($Is this@@3 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@8))))) true) :qid |unknown.0:0| :skolemid |1354| :pattern ( (LinearContentMutableMap.LinearHashMap.Inv LinearContentMutableMap.LinearHashMap$V@@8 this@@3)) ))))
(assert (forall ((LinearContentMutableMap.LinearHashMap$V@@9 T@U) (this@@4 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@9) TyType) (= (type this@@4) DatatypeTypeType)) ($Is this@@4 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@9))) (= (|LinearContentMutableMap.LinearHashMap.Inv#requires| LinearContentMutableMap.LinearHashMap$V@@9 this@@4) true)) :qid |unknown.0:0| :skolemid |1355| :pattern ( (|LinearContentMutableMap.LinearHashMap.Inv#requires| LinearContentMutableMap.LinearHashMap$V@@9 this@@4)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((LinearContentMutableMap.LinearHashMap$V@@10 T@U) (this@@5 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@10) TyType) (= (type this@@5) DatatypeTypeType)) (or (|LinearContentMutableMap.LinearHashMap.Inv#canCall| LinearContentMutableMap.LinearHashMap$V@@10 this@@5) (and (not (= 40 $FunctionContextHeight)) ($Is this@@5 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@10))))) (and (|LinearContentMutableMap.__default.Inv0#canCall| LinearContentMutableMap.LinearHashMap$V@@10 this@@5) (= (LinearContentMutableMap.LinearHashMap.Inv LinearContentMutableMap.LinearHashMap$V@@10 this@@5) (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap.LinearHashMap$V@@10 this@@5)))) :qid |unknown.0:0| :skolemid |1356| :pattern ( (LinearContentMutableMap.LinearHashMap.Inv LinearContentMutableMap.LinearHashMap$V@@10 this@@5)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((LinearContentMutableMap.LinearHashMap$V@@11 T@U) (this@@6 T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap.LinearHashMap$V@@11) TyType) (= (type this@@6) DatatypeTypeType)) (or (|LinearContentMutableMap.LinearHashMap.Inv#canCall| LinearContentMutableMap.LinearHashMap$V@@11 (Lit this@@6)) (and (not (= 40 $FunctionContextHeight)) ($Is this@@6 (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap.LinearHashMap$V@@11))))) (and (|LinearContentMutableMap.__default.Inv0#canCall| LinearContentMutableMap.LinearHashMap$V@@11 (Lit this@@6)) (= (LinearContentMutableMap.LinearHashMap.Inv LinearContentMutableMap.LinearHashMap$V@@11 (Lit this@@6)) (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap.LinearHashMap$V@@11 (Lit this@@6)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1357| :pattern ( (LinearContentMutableMap.LinearHashMap.Inv LinearContentMutableMap.LinearHashMap$V@@11 (Lit this@@6))) ))))
(assert (= (type Tclass.LinearContentMutableMap.__default) TyType))
(assert (= (Tag Tclass.LinearContentMutableMap.__default) Tagclass.LinearContentMutableMap.__default))
(assert (= (TagFamily Tclass.LinearContentMutableMap.__default) tytagFamily$_default))
(assert (forall ((bx@@115 T@U) ) (!  (=> (and (= (type bx@@115) BoxType) ($IsBox bx@@115 Tclass.LinearContentMutableMap.__default)) (and (= ($Box ($Unbox refType bx@@115)) bx@@115) ($Is ($Unbox refType bx@@115) Tclass.LinearContentMutableMap.__default))) :qid |unknown.0:0| :skolemid |1359| :pattern ( ($IsBox bx@@115 Tclass.LinearContentMutableMap.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.LinearContentMutableMap.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.LinearContentMutableMap.__default)))) :qid |unknown.0:0| :skolemid |1360| :pattern ( ($Is $o@@9 Tclass.LinearContentMutableMap.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@63 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@63) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.LinearContentMutableMap.__default $h@@63)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@63 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1361| :pattern ( ($IsAlloc $o@@10 Tclass.LinearContentMutableMap.__default $h@@63)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@149 T@U) ) (! (= (type (LinearContentMutableMap.__default.toItems arg0@@386 arg1@@149)) (SeqType BoxType)) :qid |funType:LinearContentMutableMap.__default.toItems| :pattern ( (LinearContentMutableMap.__default.toItems arg0@@386 arg1@@149)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.toItems$V T@U) (|litems#0| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.toItems$V) TyType) (= (type |litems#0|) BoxType)) (or (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.toItems$V |litems#0|) (and (not (= 7 $FunctionContextHeight)) ($IsBox |litems#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V)))))) (and (= (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V |litems#0|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V) |litems#0|)) ($Is (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V |litems#0|) (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.toItems$V))))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V |litems#0|)) ))))
(assert (forall ((LinearContentMutableMap._default.toItems$V@@0 T@U) ($Heap T@U) (|litems#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.toItems$V@@0) TyType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |litems#0@@0|) BoxType)) (and ($IsGoodHeap $Heap) ($IsBox |litems#0@@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@0))))) (= (|LinearContentMutableMap.__default.toItems#requires| LinearContentMutableMap._default.toItems$V@@0 |litems#0@@0|) true)) :qid |unknown.0:0| :skolemid |1363| :pattern ( (|LinearContentMutableMap.__default.toItems#requires| LinearContentMutableMap._default.toItems$V@@0 |litems#0@@0|) ($IsGoodHeap $Heap)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@387 T@U) (arg1@@150 T@U) ) (! (= (type (LinearSequence__i.__default.lseqs arg0@@387 arg1@@150)) (SeqType BoxType)) :qid |funType:LinearSequence__i.__default.lseqs| :pattern ( (LinearSequence__i.__default.lseqs arg0@@387 arg1@@150)) )) (forall ((arg0@@388 T@U) ) (! (= (type (|lambda#7| arg0@@388)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@388)) ))) (forall ((arg0@@389 T@U) (arg1@@151 T@U) ) (! (= (type (|lambda#3| arg0@@389 arg1@@151)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@389 arg1@@151)) ))) (forall ((arg0@@390 T@U) (arg1@@152 Int) (arg2@@81 Int) ) (! (= (type (|lambda#4| arg0@@390 arg1@@152 arg2@@81)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@390 arg1@@152 arg2@@81)) ))) (forall ((arg0@@391 T@U) ) (! (= (type (|lambda#6| arg0@@391)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@391)) ))) (forall ((arg0@@392 Bool) ) (! (= (type (|lambda#5| arg0@@392)) (MapType0Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@392)) ))) (= (type $LZ) LayerTypeType)))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.toItems$V@@1 T@U) ($Heap@@0 T@U) (|litems#0@@1| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.toItems$V@@1) TyType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |litems#0@@1|) BoxType)) (or (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.toItems$V@@1 |litems#0@@1|) (and (not (= 7 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@0) ($IsBox |litems#0@@1| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@1))))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@1) |litems#0@@1|) (let ((|elements#0| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@1) |litems#0@@1|))) (forall ((|$l#1#i#0| Int) ) (!  (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| |elements#0|))) (|LinearContentMutableMap.lItem.toItem#canCall| LinearContentMutableMap._default.toItems$V@@1 ($Unbox DatatypeTypeType (|Seq#Index| |elements#0| |$l#1#i#0|)))) :qid |unknown.0:0| :skolemid |1364| )))) (= (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V@@1 |litems#0@@1|) (let ((|elements#0@@0| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@1) |litems#0@@1|))) (|Seq#Create| (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.toItems$V@@1) $Heap@@0 (|Seq#Length| |elements#0@@0|) (Lit (AtLayer (|lambda#7| (Handle1 (|lambda#3| LinearContentMutableMap._default.toItems$V@@1 |elements#0@@0|) (|lambda#4| TInt (LitInt 0) (|Seq#Length| |elements#0@@0|)) (|lambda#6| (SetRef_to_SetBox (|lambda#5| false))))) ($LS $LZ)))))))) :qid |unknown.0:0| :skolemid |1365| :pattern ( (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V@@1 |litems#0@@1|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.toItems$V@@2 T@U) ($Heap@@1 T@U) (|litems#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.toItems$V@@2) TyType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |litems#0@@2|) BoxType)) (or (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.toItems$V@@2 (Lit |litems#0@@2|)) (and (not (= 7 $FunctionContextHeight)) (and ($IsGoodHeap $Heap@@1) ($IsBox |litems#0@@2| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@2))))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@2) (Lit |litems#0@@2|)) (let ((|elements#1| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@2) (Lit |litems#0@@2|)))) (forall ((|$l#3#i#0| Int) ) (!  (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| |elements#1|))) (|LinearContentMutableMap.lItem.toItem#canCall| LinearContentMutableMap._default.toItems$V@@2 ($Unbox DatatypeTypeType (|Seq#Index| |elements#1| |$l#3#i#0|)))) :qid |unknown.0:0| :skolemid |1366| )))) (= (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V@@2 (Lit |litems#0@@2|)) (let ((|elements#1@@0| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.toItems$V@@2) (Lit |litems#0@@2|)))) (|Seq#Create| (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.toItems$V@@2) $Heap@@1 (|Seq#Length| |elements#1@@0|) (Lit (AtLayer (|lambda#7| (Handle1 (|lambda#3| LinearContentMutableMap._default.toItems$V@@2 |elements#1@@0|) (|lambda#4| TInt (LitInt 0) (|Seq#Length| |elements#1@@0|)) (|lambda#6| (SetRef_to_SetBox (|lambda#5| false))))) ($LS $LZ)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1367| :pattern ( (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.toItems$V@@2 (Lit |litems#0@@2|)) ($IsGoodHeap $Heap@@1)) ))))
(assert  (and (forall ((arg0@@393 Int) ) (! (= (type (|#LinearMutableMapBase.Slot.Slot| arg0@@393)) DatatypeTypeType) :qid |funType:#LinearMutableMapBase.Slot.Slot| :pattern ( (|#LinearMutableMapBase.Slot.Slot| arg0@@393)) )) (forall ((arg0@@394 Int) (arg1@@153 Int) ) (! (= (type (LinearMutableMapBase.__default.SlotForKey arg0@@394 arg1@@153)) DatatypeTypeType) :qid |funType:LinearMutableMapBase.__default.SlotForKey| :pattern ( (LinearMutableMapBase.__default.SlotForKey arg0@@394 arg1@@153)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Uint64SlotForKey$V T@U) (|self#0| T@U) (|key#0@@0| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Uint64SlotForKey$V) TyType) (= (type |self#0|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Uint64SlotForKey#canCall| LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |self#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.Uint64SlotForKey$V)) (and (<= (LitInt 0) |key#0@@0|) (< |key#0@@0| 18446744073709551616))) (and (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0|))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0|)) 18446744073709551616)))))) (and (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0|)) (|#LinearMutableMapBase.Slot.Slot| (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|))) (|LinearMutableMapBase.Slot#Equal| (|#LinearMutableMapBase.Slot.Slot| (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|)) (LinearMutableMapBase.__default.SlotForKey (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0|)) |key#0@@0|))) (and (<= (LitInt 0) (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|)) (< (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1374| :pattern ( (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V |self#0| |key#0@@0|)) ))))
(assert (forall ((LinearContentMutableMap._default.Uint64SlotForKey$V@@0 T@U) (|self#0@@0| T@U) (|key#0@@1| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Uint64SlotForKey$V@@0) TyType) (= (type |self#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.Uint64SlotForKey$V@@0)) (and (<= (LitInt 0) |key#0@@1|) (< |key#0@@1| 18446744073709551616)))) (= (|LinearContentMutableMap.__default.Uint64SlotForKey#requires| LinearContentMutableMap._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@1|)  (and (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@0) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@0|))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@0) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@0|)) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1375| :pattern ( (|LinearContentMutableMap.__default.Uint64SlotForKey#requires| LinearContentMutableMap._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@1|)) )))
(assert (= (type StartFuel_LinearMutableMapBase._default.hash64) LayerTypeType))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Uint64SlotForKey$V@@1 T@U) (|self#0@@1| T@U) (|key#0@@2| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Uint64SlotForKey$V@@1) TyType) (= (type |self#0@@1|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Uint64SlotForKey#canCall| LinearContentMutableMap._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@2|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |self#0@@1| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.Uint64SlotForKey$V@@1)) (and (<= (LitInt 0) |key#0@@2|) (< |key#0@@2| 18446744073709551616))) (and (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@1|))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@1|)) 18446744073709551616)))))) (and (and (|LinearMutableMapBase.__default.hash64#canCall| |key#0@@2|) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@1|) (|LinearSequence__i.__default.lseq__length__as__uint64#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@1|)))) (= (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@2|) (let ((|h#0| (LinearMutableMapBase.__default.hash64 StartFuel_LinearMutableMapBase._default.hash64 |key#0@@2|))) (let ((|storageLength#0| (LinearSequence__i.__default.lseq__length__as__uint64 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@1|)))) (Mod |h#0| |storageLength#0|)))))) :qid |unknown.0:0| :skolemid |1376| :pattern ( (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@2|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Uint64SlotForKey$V@@2 T@U) (|self#0@@2| T@U) (|key#0@@3| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Uint64SlotForKey$V@@2) TyType) (= (type |self#0@@2|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Uint64SlotForKey#canCall| LinearContentMutableMap._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@3|)) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |self#0@@2| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.Uint64SlotForKey$V@@2)) (and (<= (LitInt 0) |key#0@@3|) (< |key#0@@3| 18446744073709551616))) (U_2_bool (Lit (bool_2_U  (and (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@2|))))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@2|)))) 18446744073709551616))))))))) (and (and (|LinearMutableMapBase.__default.hash64#canCall| (LitInt |key#0@@3|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@2|)) (|LinearSequence__i.__default.lseq__length__as__uint64#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@2|)))))) (= (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@3|)) (let ((|h#1| (LinearMutableMapBase.__default.hash64 StartFuel_LinearMutableMapBase._default.hash64 (LitInt |key#0@@3|)))) (let ((|storageLength#1| (LinearSequence__i.__default.lseq__length__as__uint64 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.Uint64SlotForKey$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@2|)))))) (Mod |h#1| |storageLength#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1377| :pattern ( (LinearContentMutableMap.__default.Uint64SlotForKey LinearContentMutableMap._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@3|))) ))))
(assert (= (type Tclass.LinearMutableMapBase.Slot) TyType))
(assert (= (Tag Tclass.LinearMutableMapBase.Slot) Tagclass.LinearMutableMapBase.Slot))
(assert (= (TagFamily Tclass.LinearMutableMapBase.Slot) tytagFamily$Slot))
(assert (forall ((bx@@116 T@U) ) (!  (=> (and (= (type bx@@116) BoxType) ($IsBox bx@@116 Tclass.LinearMutableMapBase.Slot)) (and (= ($Box ($Unbox DatatypeTypeType bx@@116)) bx@@116) ($Is ($Unbox DatatypeTypeType bx@@116) Tclass.LinearMutableMapBase.Slot))) :qid |unknown.0:0| :skolemid |1380| :pattern ( ($IsBox bx@@116 Tclass.LinearMutableMapBase.Slot)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.FixedSizeInv$V T@U) (|self#0@@3| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.FixedSizeInv$V) TyType) (= (type |self#0@@3|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInv$V |self#0@@3|) (and (not (= 10 $FunctionContextHeight)) ($Is |self#0@@3| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInv$V))))) true) :qid |unknown.0:0| :skolemid |1383| :pattern ( (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInv$V |self#0@@3|)) ))))
(assert (forall ((LinearContentMutableMap._default.FixedSizeInv$V@@0 T@U) (|self#0@@4| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.FixedSizeInv$V@@0) TyType) (= (type |self#0@@4|) DatatypeTypeType)) ($Is |self#0@@4| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInv$V@@0))) (= (|LinearContentMutableMap.__default.FixedSizeInv#requires| LinearContentMutableMap._default.FixedSizeInv$V@@0 |self#0@@4|) true)) :qid |unknown.0:0| :skolemid |1384| :pattern ( (|LinearContentMutableMap.__default.FixedSizeInv#requires| LinearContentMutableMap._default.FixedSizeInv$V@@0 |self#0@@4|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.FixedSizeInv$V@@1 T@U) (|self#0@@5| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.FixedSizeInv$V@@1) TyType) (= (type |self#0@@5|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 |self#0@@5|) (and (not (= 10 $FunctionContextHeight)) ($Is |self#0@@5| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInv$V@@1))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (=> (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (=> (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (=> (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)))) (=> (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (=> (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|)) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearSequence__i.__default.lseq__has__all#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (=> (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|))) (=> (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|)) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|))) (=> (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|)) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|))))))))))))))))))) (= (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInv$V@@1 |self#0@@5|)  (and (and (and (and (and (and (and (and (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)))) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@5|))) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|))) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|))) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|))) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@5|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@5|)))))) :qid |unknown.0:0| :skolemid |1385| :pattern ( (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInv$V@@1 |self#0@@5|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.FixedSizeInv$V@@2 T@U) (|self#0@@6| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.FixedSizeInv$V@@2) TyType) (= (type |self#0@@6|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit |self#0@@6|)) (and (not (= 10 $FunctionContextHeight)) ($Is |self#0@@6| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInv$V@@2))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (=> (<= (LitInt 128) (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (=> (U_2_bool (Lit (bool_2_U (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (=> (= (|Map#Card| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|)))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearSequence__i.__default.lseq__has__all#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))))) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))))))))))))))))) (= (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit |self#0@@6|))  (and (and (and (and (and (and (and (and (<= (LitInt 128) (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (= (|Map#Card| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@6|))))) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInv$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1386| :pattern ( (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInv$V@@2 (Lit |self#0@@6|))) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructorFromSize$V T@U) (|size#0| Int) (|self#0@@7| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructorFromSize$V) TyType) (= (type |self#0@@7|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructorFromSize#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V |size#0| |self#0@@7|) (and (not (= 11 $FunctionContextHeight)) (and (<= (LitInt 0) |size#0|) ($Is |self#0@@7| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.IsConstructorFromSize$V)))))) true) :qid |unknown.0:0| :skolemid |1397| :pattern ( (LinearContentMutableMap.__default.IsConstructorFromSize LinearContentMutableMap._default.IsConstructorFromSize$V |size#0| |self#0@@7|)) ))))
(assert (forall ((LinearContentMutableMap._default.IsConstructorFromSize$V@@0 T@U) (|size#0@@0| Int) (|self#0@@8| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructorFromSize$V@@0) TyType) (= (type |self#0@@8|) DatatypeTypeType)) (and (<= (LitInt 0) |size#0@@0|) ($Is |self#0@@8| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.IsConstructorFromSize$V@@0)))) (= (|LinearContentMutableMap.__default.IsConstructorFromSize#requires| LinearContentMutableMap._default.IsConstructorFromSize$V@@0 |size#0@@0| |self#0@@8|) true)) :qid |unknown.0:0| :skolemid |1398| :pattern ( (|LinearContentMutableMap.__default.IsConstructorFromSize#requires| LinearContentMutableMap._default.IsConstructorFromSize$V@@0 |size#0@@0| |self#0@@8|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructorFromSize$V@@1 T@U) (|size#0@@1| Int) (|self#0@@9| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructorFromSize$V@@1) TyType) (= (type |self#0@@9|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructorFromSize#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@1 |size#0@@1| |self#0@@9|) (and (not (= 11 $FunctionContextHeight)) (and (<= (LitInt 0) |size#0@@1|) ($Is |self#0@@9| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.IsConstructorFromSize$V@@1)))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@9|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|))) (=> (= (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |size#0@@1|) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@9|) (=> (= (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@9|) (LitInt 0)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@9|) (=> (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@9|) (|Map#Empty| BoxType BoxType)) (and (forall ((|slot#0| T@U) ) (!  (=> (and (= (type |slot#0|) DatatypeTypeType) ($Is |slot#0| Tclass.LinearMutableMapBase.Slot)) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@9|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0|)) (=> (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0|) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@9|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|))) (|LinearMutableMapBase.__default.SlotIsEmpty#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0|))))) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1400| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0|)) )) (=> (forall ((|slot#0@@0| T@U) ) (!  (=> (and (and (= (type |slot#0@@0|) DatatypeTypeType) ($Is |slot#0@@0| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@0|)) (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@0|)) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1401| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@0|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@0|)) )) (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@1 |self#0@@9|))))))))) (= (LinearContentMutableMap.__default.IsConstructorFromSize LinearContentMutableMap._default.IsConstructorFromSize$V@@1 |size#0@@1| |self#0@@9|)  (and (and (and (and (= (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |size#0@@1|) (= (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@9|) (LitInt 0))) (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@@9|) (|Map#Empty| BoxType BoxType))) (forall ((|slot#0@@1| T@U) ) (!  (=> (and (and (= (type |slot#0@@1|) DatatypeTypeType) ($Is |slot#0@@1| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@1|)) (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@1|)) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1399| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@1|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@9|)) |slot#0@@1|)) ))) (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.IsConstructorFromSize$V@@1 |self#0@@9|))))) :qid |unknown.0:0| :skolemid |1402| :pattern ( (LinearContentMutableMap.__default.IsConstructorFromSize LinearContentMutableMap._default.IsConstructorFromSize$V@@1 |size#0@@1| |self#0@@9|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructorFromSize$V@@2 T@U) (|size#0@@2| Int) (|self#0@@10| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructorFromSize$V@@2) TyType) (= (type |self#0@@10|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructorFromSize#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LitInt |size#0@@2|) (Lit |self#0@@10|)) (and (not (= 11 $FunctionContextHeight)) (and (<= (LitInt 0) |size#0@@2|) ($Is |self#0@@10| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.IsConstructorFromSize$V@@2)))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@10|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) (=> (= (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) (LitInt |size#0@@2|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@10|)) (=> (= (LitInt (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@10|))) (LitInt 0)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@10|)) (=> (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@10|)) (|Map#Empty| BoxType BoxType)) (and (forall ((|slot#1| T@U) ) (!  (=> (and (= (type |slot#1|) DatatypeTypeType) ($Is |slot#1| Tclass.LinearMutableMapBase.Slot)) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@10|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1|)) (=> (LinearMutableMapBase.__default.ValidSlot (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1|) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@10|)) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) (|LinearMutableMapBase.__default.SlotIsEmpty#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1|))))) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1404| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1|)) )) (=> (forall ((|slot#1@@0| T@U) ) (!  (=> (and (and (= (type |slot#1@@0|) DatatypeTypeType) ($Is |slot#1@@0| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1@@0|)) (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1@@0|)) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1405| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1@@0|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1@@0|)) )) (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit |self#0@@10|)))))))))) (= (LinearContentMutableMap.__default.IsConstructorFromSize LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LitInt |size#0@@2|) (Lit |self#0@@10|))  (and (and (and (and (= (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) (LitInt |size#0@@2|)) (= (LitInt (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@10|))) (LitInt 0))) (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |self#0@@10|)) (|Map#Empty| BoxType BoxType))) (forall ((|slot#1@@1| T@U) ) (!  (=> (and (and (= (type |slot#1@@1|) DatatypeTypeType) ($Is |slot#1@@1| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1@@1|)) (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@10|))))) |slot#1@@1|)) :qid |LinearContentMutableMapidfy.112:16| :skolemid |1403| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1@@1|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsConstructorFromSize$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@10|)) |slot#1@@1|)) ))) (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (Lit |self#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1406| :pattern ( (LinearContentMutableMap.__default.IsConstructorFromSize LinearContentMutableMap._default.IsConstructorFromSize$V@@2 (LitInt |size#0@@2|) (Lit |self#0@@10|))) ))))
(assert (forall ((LinearContentMutableMap._default.getEmptyWitness$V T@U) ($ly T@U) (|self#0@@11| T@U) (|i#0| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V) TyType) (= (type $ly) LayerTypeType)) (= (type |self#0@@11|) DatatypeTypeType)) (= (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V ($LS $ly) |self#0@@11| |i#0|) (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V $ly |self#0@@11| |i#0|))) :qid |unknown.0:0| :skolemid |1459| :pattern ( (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V ($LS $ly) |self#0@@11| |i#0|)) )))
(assert (forall ((arg0@@395 T@U) ) (! (= (type (AsFuelBottom arg0@@395)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@395)) )))
(assert (forall ((LinearContentMutableMap._default.getEmptyWitness$V@@0 T@U) ($ly@@0 T@U) (|self#0@@12| T@U) (|i#0@@0| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |self#0@@12|) DatatypeTypeType)) (= (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@0 $ly@@0 |self#0@@12| |i#0@@0|) (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@0 $LZ |self#0@@12| |i#0@@0|))) :qid |unknown.0:0| :skolemid |1460| :pattern ( (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@0 (AsFuelBottom $ly@@0) |self#0@@12| |i#0@@0|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.getEmptyWitness$V@@1 T@U) ($ly@@1 T@U) (|self#0@@13| T@U) (|i#0@@1| Int) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |self#0@@13|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.getEmptyWitness#canCall| LinearContentMutableMap._default.getEmptyWitness$V@@1 |self#0@@13| |i#0@@1|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |self#0@@13| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.getEmptyWitness$V@@1)) (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| 18446744073709551616))) (and (and (and (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.getEmptyWitness$V@@1 |self#0@@13|) (and (<= (LitInt 0) |i#0@@1|) (<= |i#0@@1| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|))))) (forall ((|j#0| Int) ) (!  (=> (and (<= (LitInt 0) |j#0|) (< |j#0| |i#0@@1|)) (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|)) |j#0|))))) :qid |LinearContentMutableMapidfy.159:19| :skolemid |1461| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|)) |j#0|))) ))) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@13|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|)))))))) (and (and (and (<= (LitInt 0) (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|)) (< (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|)))) (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@13|)) (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|))))) (and (<= (LitInt 0) (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|)) (< (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1462| :pattern ( (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@1 $ly@@1 |self#0@@13| |i#0@@1|)) ))))
(assert (forall ((LinearContentMutableMap._default.getEmptyWitness$V@@2 T@U) ($ly@@2 T@U) (|self#0@@14| T@U) (|i#0@@2| Int) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |self#0@@14|) DatatypeTypeType)) (and ($Is |self#0@@14| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.getEmptyWitness$V@@2)) (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| 18446744073709551616)))) (= (|LinearContentMutableMap.__default.getEmptyWitness#requires| LinearContentMutableMap._default.getEmptyWitness$V@@2 $ly@@2 |self#0@@14| |i#0@@2|)  (and (and (and (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.getEmptyWitness$V@@2 |self#0@@14|) (and (<= (LitInt 0) |i#0@@2|) (<= |i#0@@2| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@14|))))) (forall ((|j#1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1|) (< |j#1| |i#0@@2|)) (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@14|)) |j#1|))))) :qid |LinearContentMutableMapidfy.159:19| :skolemid |1463| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@14|)) |j#1|))) ))) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@14|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@2) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@14|)))))) :qid |unknown.0:0| :skolemid |1464| :pattern ( (|LinearContentMutableMap.__default.getEmptyWitness#requires| LinearContentMutableMap._default.getEmptyWitness$V@@2 $ly@@2 |self#0@@14| |i#0@@2|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.getEmptyWitness$V@@3 T@U) ($ly@@3 T@U) (|self#0@@15| T@U) (|i#0@@3| Int) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V@@3) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |self#0@@15|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.getEmptyWitness#canCall| LinearContentMutableMap._default.getEmptyWitness$V@@3 |self#0@@15| |i#0@@3|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |self#0@@15| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.getEmptyWitness$V@@3)) (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| 18446744073709551616))) (and (and (and (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.getEmptyWitness$V@@3 |self#0@@15|) (and (<= (LitInt 0) |i#0@@3|) (<= |i#0@@3| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|))))) (forall ((|j#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| |i#0@@3|)) (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|)) |j#1@@0|))))) :qid |LinearContentMutableMapidfy.159:19| :skolemid |1463| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|)) |j#1@@0|))) ))) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@@15|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|)))))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@15|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|) |i#0@@3|)) (=> (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|)) |i#0@@3|)))) (|LinearContentMutableMap.__default.getEmptyWitness#canCall| LinearContentMutableMap._default.getEmptyWitness$V@@3 |self#0@@15| (+ |i#0@@3| 1)))) (= (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@3 ($LS $ly@@3) |self#0@@15| |i#0@@3|) (ite (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@3) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@15|)) |i#0@@3|))) |i#0@@3| (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@3 $ly@@3 |self#0@@15| (+ |i#0@@3| 1)))))) :qid |unknown.0:0| :skolemid |1465| :pattern ( (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@3 ($LS $ly@@3) |self#0@@15| |i#0@@3|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.getEmptyWitness$V@@4 T@U) ($ly@@4 T@U) (|self#0@@16| T@U) (|i#0@@4| Int) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.getEmptyWitness$V@@4) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |self#0@@16|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.getEmptyWitness#canCall| LinearContentMutableMap._default.getEmptyWitness$V@@4 (Lit |self#0@@16|) (LitInt |i#0@@4|)) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |self#0@@16| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.getEmptyWitness$V@@4)) (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| 18446744073709551616))) (and (and (and (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.getEmptyWitness$V@@4 (Lit |self#0@@16|))))) (and (<= (LitInt 0) (LitInt |i#0@@4|)) (<= (LitInt |i#0@@4|) (LitInt (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|)))))))) (forall ((|j#2| Int) ) (!  (=> (and (<= (LitInt 0) |j#2|) (< |j#2| |i#0@@4|)) (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|)))) |j#2|))))) :qid |LinearContentMutableMapidfy.159:19| :skolemid |1466| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@@16|)) |j#2|))) ))) (U_2_bool (Lit (bool_2_U (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit |self#0@@16|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|))))))))))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@16|)) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|))) (LitInt |i#0@@4|))) (=> (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|)))) (LitInt |i#0@@4|))))) (|LinearContentMutableMap.__default.getEmptyWitness#canCall| LinearContentMutableMap._default.getEmptyWitness$V@@4 (Lit |self#0@@16|) (LitInt (+ |i#0@@4| 1))))) (= (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@4 ($LS $ly@@4) (Lit |self#0@@16|) (LitInt |i#0@@4|)) (ite (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.getEmptyWitness$V@@4) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |self#0@@16|)))) (LitInt |i#0@@4|)))) |i#0@@4| (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@4 ($LS $ly@@4) (Lit |self#0@@16|) (LitInt (+ |i#0@@4| 1))))))) :qid |unknown.0:0| :weight 3 :skolemid |1467| :pattern ( (LinearContentMutableMap.__default.getEmptyWitness LinearContentMutableMap._default.getEmptyWitness$V@@4 ($LS $ly@@4) (Lit |self#0@@16|) (LitInt |i#0@@4|))) ))))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (Tclass.LinearOption.lOption arg0@@396)) TyType) :qid |funType:Tclass.LinearOption.lOption| :pattern ( (Tclass.LinearOption.lOption arg0@@396)) )))
(assert (forall ((LinearOption.lOption$V T@U) ) (!  (=> (= (type LinearOption.lOption$V) TyType) (and (= (Tag (Tclass.LinearOption.lOption LinearOption.lOption$V)) Tagclass.LinearOption.lOption) (= (TagFamily (Tclass.LinearOption.lOption LinearOption.lOption$V)) tytagFamily$lOption))) :qid |unknown.0:0| :skolemid |1504| :pattern ( (Tclass.LinearOption.lOption LinearOption.lOption$V)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (Tclass.LinearOption.lOption_0 arg0@@397)) TyType) :qid |funType:Tclass.LinearOption.lOption_0| :pattern ( (Tclass.LinearOption.lOption_0 arg0@@397)) )))
(assert (forall ((LinearOption.lOption$V@@0 T@U) ) (!  (=> (= (type LinearOption.lOption$V@@0) TyType) (= (Tclass.LinearOption.lOption_0 (Tclass.LinearOption.lOption LinearOption.lOption$V@@0)) LinearOption.lOption$V@@0)) :qid |unknown.0:0| :skolemid |1505| :pattern ( (Tclass.LinearOption.lOption LinearOption.lOption$V@@0)) )))
(assert (forall ((LinearOption.lOption$V@@1 T@U) (bx@@117 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@1) TyType) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass.LinearOption.lOption LinearOption.lOption$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@117)) bx@@117) ($Is ($Unbox DatatypeTypeType bx@@117) (Tclass.LinearOption.lOption LinearOption.lOption$V@@1)))) :qid |unknown.0:0| :skolemid |1506| :pattern ( ($IsBox bx@@117 (Tclass.LinearOption.lOption LinearOption.lOption$V@@1))) )))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V T@U) (|underlying#0| T@U) (|contents#0| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V) TyType) (= (type |underlying#0|) DatatypeTypeType)) (= (type |contents#0|) (MapType BoxType BoxType))) (or (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0|) (and (not (= 25 $FunctionContextHeight)) (and ($Is |underlying#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V)) ($Is |contents#0| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V)))))) true) :qid |unknown.0:0| :skolemid |1585| :pattern ( (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0|)) ))))
(assert (forall ((LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0 T@U) (|underlying#0@@0| T@U) (|contents#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0) TyType) (= (type |underlying#0@@0|) DatatypeTypeType)) (= (type |contents#0@@0|) (MapType BoxType BoxType))) (and ($Is |underlying#0@@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0)) ($Is |contents#0@@0| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0)))) (= (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#requires| LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@0|) true)) :qid |unknown.0:0| :skolemid |1586| :pattern ( (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#requires| LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@0|)) )))
(assert (forall ((arg0@@398 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@398)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@398)) )))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1 T@U) (|underlying#0@@1| T@U) (|contents#0@@1| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1) TyType) (= (type |underlying#0@@1|) DatatypeTypeType)) (= (type |contents#0@@1|) (MapType BoxType BoxType))) (or (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@1|) (and (not (= 25 $FunctionContextHeight)) (and ($Is |underlying#0@@1| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1)) ($Is |contents#0@@1| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1)))))) (and (and (forall ((|key#0@@4| T@U) ) (!  (=> (= (type |key#0@@4|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@4|)) (< (U_2_int |key#0@@4|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#0@@4|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#0@@4|))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@4|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#0@@4|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@4|)))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1589| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@1|) ($Box |key#0@@4|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@4|)))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@4|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#0@@4|))) )) (=> (forall ((|key#0@@5| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@5|) (< |key#0@@5| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@5|)))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@5|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@5|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@5|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@1|) ($Box (int_2_U |key#0@@5|)))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1591| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@1|) ($Box (int_2_U |key#0@@5|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@5|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@5|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@5|)))) )) (forall ((|key#1@@0| T@U) ) (!  (=> (= (type |key#1@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@0|)) (< (U_2_int |key#1@@0|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#1@@0|)))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@0|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)))))) :qid |LinearContentMutableMapidfy.504:16| :skolemid |1590| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@0|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box |key#1@@0|))) )))) (= (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@1|)  (and (forall ((|key#0@@6| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@6|) (< |key#0@@6| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@6|)))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@6|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@6|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@6|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@1|) ($Box (int_2_U |key#0@@6|)))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1587| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@1|) ($Box (int_2_U |key#0@@6|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@6|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@6|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@6|)))) )) (forall ((|key#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@1|) (< |key#1@@1| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#1@@1|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@1|)))))))) :qid |LinearContentMutableMapidfy.504:16| :skolemid |1588| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#1@@1|)))) )))))) :qid |unknown.0:0| :skolemid |1592| :pattern ( (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@1|)) ))))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2 T@U) (|underlying#0@@2| T@U) (|contents#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2) TyType) (= (type |underlying#0@@2|) DatatypeTypeType)) (= (type |contents#0@@2|) (MapType BoxType BoxType))) (or (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@2|)) (and (not (= 25 $FunctionContextHeight)) (and ($Is |underlying#0@@2| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2)) ($Is |contents#0@@2| (TMap Tclass.NativeTypes.uint64 LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2)))))) (and (and (forall ((|key#2| T@U) ) (!  (=> (= (type |key#2|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2|)) (< (U_2_int |key#2|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#2|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#2|))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#2|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box |key#2|)))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1595| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@2|) ($Box |key#2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|)))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#2|))) )) (=> (forall ((|key#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@0|) (< |key#2@@0| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@0|)))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@0|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@0|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@2|)) ($Box (int_2_U |key#2@@0|)))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1597| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@2|) ($Box (int_2_U |key#2@@0|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@0|)))) )) (forall ((|key#3| T@U) ) (!  (=> (= (type |key#3|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3|)) (< (U_2_int |key#3|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#3|)))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#3|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))))))) :qid |LinearContentMutableMapidfy.504:16| :skolemid |1596| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|)))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box |key#3|))) )))) (= (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@2|))  (and (forall ((|key#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@1|) (< |key#2@@1| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@1|)))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@1|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@1|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@1|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@2|)) ($Box (int_2_U |key#2@@1|)))))))) :qid |LinearContentMutableMapidfy.503:16| :skolemid |1593| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@2|) ($Box (int_2_U |key#2@@1|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#2@@1|)))) )) (forall ((|key#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#3@@0|) (< |key#3@@0| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#3@@0|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#3@@0|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#3@@0|)))))))) :qid |LinearContentMutableMapidfy.504:16| :skolemid |1594| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#3@@0|)))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |1598| :pattern ( (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@2|))) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingInv$V T@U) (|self#0@@17| T@U) (|underlying#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingInv$V) TyType) (= (type |self#0@@17|) DatatypeTypeType)) (= (type |underlying#0@@3|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.UnderlyingInv#canCall| LinearContentMutableMap._default.UnderlyingInv$V |self#0@@17| |underlying#0@@3|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |self#0@@17| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.UnderlyingInv$V)) ($Is |underlying#0@@3| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingInv$V)))))) true) :qid |unknown.0:0| :skolemid |1605| :pattern ( (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.UnderlyingInv$V |self#0@@17| |underlying#0@@3|)) ))))
(assert (forall ((LinearContentMutableMap._default.UnderlyingInv$V@@0 T@U) (|self#0@@18| T@U) (|underlying#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingInv$V@@0) TyType) (= (type |self#0@@18|) DatatypeTypeType)) (= (type |underlying#0@@4|) DatatypeTypeType)) (and ($Is |self#0@@18| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@0)) ($Is |underlying#0@@4| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@0)))) (= (|LinearContentMutableMap.__default.UnderlyingInv#requires| LinearContentMutableMap._default.UnderlyingInv$V@@0 |self#0@@18| |underlying#0@@4|) true)) :qid |unknown.0:0| :skolemid |1606| :pattern ( (|LinearContentMutableMap.__default.UnderlyingInv#requires| LinearContentMutableMap._default.UnderlyingInv$V@@0 |self#0@@18| |underlying#0@@4|)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@154 T@U) (arg2@@82 T@U) ) (! (= (type (LinearMutableMapBase.__default.MapFromStorage arg0@@399 arg1@@154 arg2@@82)) (MapType BoxType BoxType)) :qid |funType:LinearMutableMapBase.__default.MapFromStorage| :pattern ( (LinearMutableMapBase.__default.MapFromStorage arg0@@399 arg1@@154 arg2@@82)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingInv$V@@1 T@U) (|self#0@@19| T@U) (|underlying#0@@5| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingInv$V@@1) TyType) (= (type |self#0@@19|) DatatypeTypeType)) (= (type |underlying#0@@5|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.UnderlyingInv#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@1 |self#0@@19| |underlying#0@@5|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |self#0@@19| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@1)) ($Is |underlying#0@@5| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@1)))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@19|) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@19|)) (=> (= (|Map#Card| (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|)) (LinearContentMutableMap.LinearHashMap.count |self#0@@19|)) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@19|) (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5| (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|))) (=> (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5| (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|)) (and (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5|) (=> (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5|) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@5|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |underlying#0@@5|))) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.UnderlyingInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |underlying#0@@5|)))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@19|)))))))) (= (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.UnderlyingInv$V@@1 |self#0@@19| |underlying#0@@5|)  (and (and (and (= (|Map#Card| (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|)) (LinearContentMutableMap.LinearHashMap.count |self#0@@19|)) (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5| (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|))) (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.UnderlyingInv$V@@1 |underlying#0@@5|)) (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.UnderlyingInv$V@@1 ($LS $LZ) (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.UnderlyingInv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage |underlying#0@@5|))) (LinearContentMutableMap.LinearHashMap.contents |self#0@@19|)))))) :qid |unknown.0:0| :skolemid |1607| :pattern ( (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.UnderlyingInv$V@@1 |self#0@@19| |underlying#0@@5|)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.UnderlyingInv$V@@2 T@U) (|self#0@@20| T@U) (|underlying#0@@6| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.UnderlyingInv$V@@2) TyType) (= (type |self#0@@20|) DatatypeTypeType)) (= (type |underlying#0@@6|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.UnderlyingInv#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |self#0@@20|) (Lit |underlying#0@@6|)) (and (not (= 26 $FunctionContextHeight)) (and ($Is |self#0@@20| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@2)) ($Is |underlying#0@@6| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.UnderlyingInv$V@@2)))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@20|)) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@20|))) (=> (= (|Map#Card| (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|)))) (LitInt (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@20|)))) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@20|)) (|LinearContentMutableMap.__default.UnderlyingContentsMatchesContents#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|))))) (=> (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|))))))) (and (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@6|)) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|))))) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|))))))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@20|))))))))) (= (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |self#0@@20|) (Lit |underlying#0@@6|))  (and (and (and (= (|Map#Card| (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|)))) (LitInt (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@20|)))) (LinearContentMutableMap.__default.UnderlyingContentsMatchesContents LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|))))) (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))) (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.UnderlyingInv$V@@2 ($LS $LZ) (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|)))))) (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@20|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1608| :pattern ( (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.UnderlyingInv$V@@2 (Lit |self#0@@20|) (Lit |underlying#0@@6|))) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv$V T@U) (|self#0@@21| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv$V) TyType) (= (type |self#0@@21|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.Inv$V |self#0@@21|) (and (not (= 28 $FunctionContextHeight)) ($Is |self#0@@21| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv$V))))) (and (=> (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V |self#0@@21|) (= (|Map#Card| (LinearContentMutableMap.LinearHashMap.contents |self#0@@21|)) (LinearContentMutableMap.LinearHashMap.count |self#0@@21|))) (=> (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V |self#0@@21|) (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.Inv$V |self#0@@21| (LinearContentMutableMap.LinearHashMap.underlying |self#0@@21|))))) :qid |unknown.0:0| :skolemid |1623| :pattern ( (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V |self#0@@21|)) ))))
(assert (forall ((LinearContentMutableMap._default.Inv$V@@0 T@U) (|self#0@@22| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv$V@@0) TyType) (= (type |self#0@@22|) DatatypeTypeType)) ($Is |self#0@@22| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv$V@@0))) (= (|LinearContentMutableMap.__default.Inv#requires| LinearContentMutableMap._default.Inv$V@@0 |self#0@@22|) true)) :qid |unknown.0:0| :skolemid |1624| :pattern ( (|LinearContentMutableMap.__default.Inv#requires| LinearContentMutableMap._default.Inv$V@@0 |self#0@@22|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv$V@@1 T@U) (|self#0@@23| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv$V@@1) TyType) (= (type |self#0@@23|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.Inv$V@@1 |self#0@@23|) (and (not (= 28 $FunctionContextHeight)) ($Is |self#0@@23| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv$V@@1))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|) (|LinearContentMutableMap.__default.UnderlyingInv#canCall| LinearContentMutableMap._default.Inv$V@@1 |self#0@@23| (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|))) (=> (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.Inv$V@@1 |self#0@@23| (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|)) (and (and (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|))) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.Inv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|)))) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearContentMutableMap._default.Inv$V@@1 (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|))))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|)) (=> (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.Inv$V@@1 ($LS $LZ) (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|)))) (LinearContentMutableMap.LinearHashMap.contents |self#0@@23|)) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|)) (=> (= (|Map#Card| (LinearContentMutableMap.LinearHashMap.contents |self#0@@23|)) (LinearContentMutableMap.LinearHashMap.count |self#0@@23|)) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@23|))))))) (= (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V@@1 |self#0@@23|)  (and (and (and (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.Inv$V@@1 |self#0@@23| (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|)) (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.Inv$V@@1 ($LS $LZ) (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@1 (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self#0@@23|)))) (LinearContentMutableMap.LinearHashMap.contents |self#0@@23|))) (= (|Map#Card| (LinearContentMutableMap.LinearHashMap.contents |self#0@@23|)) (LinearContentMutableMap.LinearHashMap.count |self#0@@23|))) (<= (LinearContentMutableMap.LinearHashMap.count |self#0@@23|) (LitInt (Div 18446744073709551616 (LitInt 8)))))))) :qid |unknown.0:0| :skolemid |1625| :pattern ( (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V@@1 |self#0@@23|)) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv$V@@2 T@U) (|self#0@@24| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv$V@@2) TyType) (= (type |self#0@@24|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|)) (and (not (= 28 $FunctionContextHeight)) ($Is |self#0@@24| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv$V@@2))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|)) (|LinearContentMutableMap.__default.UnderlyingInv#canCall| LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|) (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|))))) (=> (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|) (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|))))))) (and (and (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|)) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|))))) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.Inv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|))))))) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearContentMutableMap._default.Inv$V@@2 (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|))))))))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|))) (=> (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.Inv$V@@2 ($LS $LZ) (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|)))))))) (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@24|))) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|)) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|))) (=> (= (|Map#Card| (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@24|)))) (LitInt (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@24|)))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@24|)))))))) (= (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|))  (and (and (and (LinearContentMutableMap.__default.UnderlyingInv LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|) (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|)))) (|Map#Equal| (LinearMutableMapBase.__default.MapFromStorage LinearContentMutableMap._default.Inv$V@@2 ($LS $LZ) (Lit (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.Inv$V@@2 (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self#0@@24|)))))))) (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@24|)))) (= (|Map#Card| (Lit (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@24|)))) (LitInt (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@24|))))) (<= (LitInt (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@24|))) (LitInt (Div 18446744073709551616 (LitInt 8)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1626| :pattern ( (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv$V@@2 (Lit |self#0@@24|))) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv0$V T@U) (|self#0@@25| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv0$V) TyType) (= (type |self#0@@25|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv0#canCall| LinearContentMutableMap._default.Inv0$V |self#0@@25|) (and (not (= 29 $FunctionContextHeight)) ($Is |self#0@@25| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv0$V))))) true) :qid |unknown.0:0| :skolemid |1634| :pattern ( (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap._default.Inv0$V |self#0@@25|)) ))))
(assert (forall ((LinearContentMutableMap._default.Inv0$V@@0 T@U) (|self#0@@26| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv0$V@@0) TyType) (= (type |self#0@@26|) DatatypeTypeType)) ($Is |self#0@@26| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv0$V@@0))) (= (|LinearContentMutableMap.__default.Inv0#requires| LinearContentMutableMap._default.Inv0$V@@0 |self#0@@26|) true)) :qid |unknown.0:0| :skolemid |1635| :pattern ( (|LinearContentMutableMap.__default.Inv0#requires| LinearContentMutableMap._default.Inv0$V@@0 |self#0@@26|)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv0$V@@1 T@U) (|self#0@@27| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv0$V@@1) TyType) (= (type |self#0@@27|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv0#canCall| LinearContentMutableMap._default.Inv0$V@@1 |self#0@@27|) (and (not (= 29 $FunctionContextHeight)) ($Is |self#0@@27| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv0$V@@1))))) (and (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.Inv0$V@@1 |self#0@@27|) (= (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap._default.Inv0$V@@1 |self#0@@27|) (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv0$V@@1 |self#0@@27|)))) :qid |unknown.0:0| :skolemid |1636| :pattern ( (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap._default.Inv0$V@@1 |self#0@@27|)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.Inv0$V@@2 T@U) (|self#0@@28| T@U) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.Inv0$V@@2) TyType) (= (type |self#0@@28|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.Inv0#canCall| LinearContentMutableMap._default.Inv0$V@@2 (Lit |self#0@@28|)) (and (not (= 29 $FunctionContextHeight)) ($Is |self#0@@28| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.Inv0$V@@2))))) (and (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.Inv0$V@@2 (Lit |self#0@@28|)) (= (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap._default.Inv0$V@@2 (Lit |self#0@@28|)) (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.Inv0$V@@2 (Lit |self#0@@28|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1637| :pattern ( (LinearContentMutableMap.__default.Inv0 LinearContentMutableMap._default.Inv0$V@@2 (Lit |self#0@@28|))) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructor$V T@U) (|self#0@@29| T@U) (|size#0@@3| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructor$V) TyType) (= (type |self#0@@29|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructor#canCall| LinearContentMutableMap._default.IsConstructor$V |self#0@@29| |size#0@@3|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |self#0@@29| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsConstructor$V)) (and (<= (LitInt 0) |size#0@@3|) (< |size#0@@3| 18446744073709551616))) (<= (LitInt 128) |size#0@@3|))))) true) :qid |unknown.0:0| :skolemid |1663| :pattern ( (LinearContentMutableMap.__default.IsConstructor LinearContentMutableMap._default.IsConstructor$V |self#0@@29| |size#0@@3|)) ))))
(assert (forall ((LinearContentMutableMap._default.IsConstructor$V@@0 T@U) (|self#0@@30| T@U) (|size#0@@4| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructor$V@@0) TyType) (= (type |self#0@@30|) DatatypeTypeType)) (and ($Is |self#0@@30| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsConstructor$V@@0)) (and (<= (LitInt 0) |size#0@@4|) (< |size#0@@4| 18446744073709551616)))) (= (|LinearContentMutableMap.__default.IsConstructor#requires| LinearContentMutableMap._default.IsConstructor$V@@0 |self#0@@30| |size#0@@4|) (<= (LitInt 128) |size#0@@4|))) :qid |unknown.0:0| :skolemid |1664| :pattern ( (|LinearContentMutableMap.__default.IsConstructor#requires| LinearContentMutableMap._default.IsConstructor$V@@0 |self#0@@30| |size#0@@4|)) )))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructor$V@@1 T@U) (|self#0@@31| T@U) (|size#0@@5| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructor$V@@1) TyType) (= (type |self#0@@31|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructor#canCall| LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31| |size#0@@5|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |self#0@@31| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsConstructor$V@@1)) (and (<= (LitInt 0) |size#0@@5|) (< |size#0@@5| 18446744073709551616))) (<= (LitInt 128) |size#0@@5|))))) (and (and (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31|) (=> (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31|) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@31|))) (= (LinearContentMutableMap.__default.IsConstructor LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31| |size#0@@5|)  (and (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31|) (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents |self#0@@31|) (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :skolemid |1665| :pattern ( (LinearContentMutableMap.__default.IsConstructor LinearContentMutableMap._default.IsConstructor$V@@1 |self#0@@31| |size#0@@5|)) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsConstructor$V@@2 T@U) (|self#0@@32| T@U) (|size#0@@6| Int) ) (!  (=> (and (and (= (type LinearContentMutableMap._default.IsConstructor$V@@2) TyType) (= (type |self#0@@32|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsConstructor#canCall| LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|) (LitInt |size#0@@6|)) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |self#0@@32| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsConstructor$V@@2)) (and (<= (LitInt 0) |size#0@@6|) (< |size#0@@6| 18446744073709551616))) (<= (LitInt 128) (LitInt |size#0@@6|)))))) (and (and (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|)) (=> (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|))))) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@32|)))) (= (LinearContentMutableMap.__default.IsConstructor LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|) (LitInt |size#0@@6|))  (and (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|)) (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@32|)) (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :weight 3 :skolemid |1666| :pattern ( (LinearContentMutableMap.__default.IsConstructor LinearContentMutableMap._default.IsConstructor$V@@2 (Lit |self#0@@32|) (LitInt |size#0@@6|))) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsRealloc$V T@U) (|self#0@@33| T@U) (|self'#0| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.IsRealloc$V) TyType) (= (type |self#0@@33|) DatatypeTypeType)) (= (type |self'#0|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsRealloc#canCall| LinearContentMutableMap._default.IsRealloc$V |self#0@@33| |self'#0|) (and (not (= 35 $FunctionContextHeight)) (and (and ($Is |self#0@@33| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V)) ($Is |self'#0| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V))) (and (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V |self#0@@33|) (< (LinearContentMutableMap.LinearHashMap.count |self#0@@33|) (Div 18446744073709551616 (LitInt 8)))))))) true) :qid |unknown.0:0| :skolemid |1692| :pattern ( (LinearContentMutableMap.__default.IsRealloc LinearContentMutableMap._default.IsRealloc$V |self#0@@33| |self'#0|)) ))))
(assert (forall ((LinearContentMutableMap._default.IsRealloc$V@@0 T@U) (|self#0@@34| T@U) (|self'#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.IsRealloc$V@@0) TyType) (= (type |self#0@@34|) DatatypeTypeType)) (= (type |self'#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@34| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@0)) ($Is |self'#0@@0| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@0)))) (= (|LinearContentMutableMap.__default.IsRealloc#requires| LinearContentMutableMap._default.IsRealloc$V@@0 |self#0@@34| |self'#0@@0|)  (and (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V@@0 |self#0@@34|) (< (LinearContentMutableMap.LinearHashMap.count |self#0@@34|) (Div 18446744073709551616 (LitInt 8)))))) :qid |unknown.0:0| :skolemid |1693| :pattern ( (|LinearContentMutableMap.__default.IsRealloc#requires| LinearContentMutableMap._default.IsRealloc$V@@0 |self#0@@34| |self'#0@@0|)) )))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsRealloc$V@@1 T@U) (|self#0@@35| T@U) (|self'#0@@1| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.IsRealloc$V@@1) TyType) (= (type |self#0@@35|) DatatypeTypeType)) (= (type |self'#0@@1|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsRealloc#canCall| LinearContentMutableMap._default.IsRealloc$V@@1 |self#0@@35| |self'#0@@1|) (and (not (= 35 $FunctionContextHeight)) (and (and ($Is |self#0@@35| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@1)) ($Is |self'#0@@1| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@1))) (and (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V@@1 |self#0@@35|) (< (LinearContentMutableMap.LinearHashMap.count |self#0@@35|) (Div 18446744073709551616 (LitInt 8)))))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self'#0@@1|) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self#0@@35|)) (=> (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents |self'#0@@1|) (LinearContentMutableMap.LinearHashMap.contents |self#0@@35|)) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self'#0@@1|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|))) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q |self'#0@@1|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|))) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|))))) (=> (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|)) (- (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|))) 2)) (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.IsRealloc$V@@1 |self'#0@@1|))))) (= (LinearContentMutableMap.__default.IsRealloc LinearContentMutableMap._default.IsRealloc$V@@1 |self#0@@35| |self'#0@@1|)  (and (and (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents |self'#0@@1|) (LinearContentMutableMap.LinearHashMap.contents |self#0@@35|)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|)) (- (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@1) (LinearContentMutableMap.FixedSizeLinearHashMap.storage (LinearContentMutableMap.LinearHashMap.underlying |self'#0@@1|))) 2))) (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V@@1 |self'#0@@1|))))) :qid |unknown.0:0| :skolemid |1694| :pattern ( (LinearContentMutableMap.__default.IsRealloc LinearContentMutableMap._default.IsRealloc$V@@1 |self#0@@35| |self'#0@@1|)) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((LinearContentMutableMap._default.IsRealloc$V@@2 T@U) (|self#0@@36| T@U) (|self'#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearContentMutableMap._default.IsRealloc$V@@2) TyType) (= (type |self#0@@36|) DatatypeTypeType)) (= (type |self'#0@@2|) DatatypeTypeType)) (or (|LinearContentMutableMap.__default.IsRealloc#canCall| LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self#0@@36|) (Lit |self'#0@@2|)) (and (not (= 35 $FunctionContextHeight)) (and (and ($Is |self#0@@36| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@2)) ($Is |self'#0@@2| (Tclass.LinearContentMutableMap.LinearHashMap LinearContentMutableMap._default.IsRealloc$V@@2))) (and (U_2_bool (Lit (bool_2_U (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self#0@@36|))))) (U_2_bool (Lit (bool_2_U (< (LinearContentMutableMap.LinearHashMap.count (Lit |self#0@@36|)) (Div 18446744073709551616 (LitInt 8))))))))))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self'#0@@2|)) (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self#0@@36|))) (=> (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents (Lit |self'#0@@2|)) (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@36|))) (and (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self'#0@@2|)) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|))))) (and (and (LinearContentMutableMap.LinearHashMap.LinearHashMap_q (Lit |self'#0@@2|)) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|))))) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|)))))))) (=> (U_2_bool (Lit (bool_2_U (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|)))) (- (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|)))))) 2))))) (|LinearContentMutableMap.__default.Inv#canCall| LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self'#0@@2|)))))) (= (LinearContentMutableMap.__default.IsRealloc LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self#0@@36|) (Lit |self'#0@@2|))  (and (and (|Map#Equal| (LinearContentMutableMap.LinearHashMap.contents (Lit |self'#0@@2|)) (LinearContentMutableMap.LinearHashMap.contents (Lit |self#0@@36|))) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|)))) (- (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.IsRealloc$V@@2) (Lit (LinearContentMutableMap.FixedSizeLinearHashMap.storage (Lit (LinearContentMutableMap.LinearHashMap.underlying (Lit |self'#0@@2|)))))) 2))) (LinearContentMutableMap.__default.Inv LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self'#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1695| :pattern ( (LinearContentMutableMap.__default.IsRealloc LinearContentMutableMap._default.IsRealloc$V@@2 (Lit |self#0@@36|) (Lit |self'#0@@2|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@118)) bx@@118) ($Is ($Unbox intType bx@@118) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1823| :pattern ( ($IsBox bx@@118 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (= ($Is |i#0@@5| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 128)))) :qid |unknown.0:0| :skolemid |1824| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.sbyte $h@@64)) :qid |unknown.0:0| :skolemid |1825| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.sbyte $h@@64)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@119)) bx@@119) ($Is ($Unbox intType bx@@119) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1826| :pattern ( ($IsBox bx@@119 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 256)))) :qid |unknown.0:0| :skolemid |1827| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.byte $h@@65)) :qid |unknown.0:0| :skolemid |1828| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.byte $h@@65)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@120)) bx@@120) ($Is ($Unbox intType bx@@120) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1829| :pattern ( ($IsBox bx@@120 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (= ($Is |i#0@@9| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 32768)))) :qid |unknown.0:0| :skolemid |1830| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.int16 $h@@66)) :qid |unknown.0:0| :skolemid |1831| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.int16 $h@@66)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@121)) bx@@121) ($Is ($Unbox intType bx@@121) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1832| :pattern ( ($IsBox bx@@121 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 65536)))) :qid |unknown.0:0| :skolemid |1833| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.uint16 $h@@67)) :qid |unknown.0:0| :skolemid |1834| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.uint16 $h@@67)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@122)) bx@@122) ($Is ($Unbox intType bx@@122) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1835| :pattern ( ($IsBox bx@@122 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 2147483648)))) :qid |unknown.0:0| :skolemid |1836| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.int32 $h@@68)) :qid |unknown.0:0| :skolemid |1837| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.int32 $h@@68)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@123)) bx@@123) ($Is ($Unbox intType bx@@123) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1838| :pattern ( ($IsBox bx@@123 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 4294967296)))) :qid |unknown.0:0| :skolemid |1839| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@69 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@69) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.uint32 $h@@69)) :qid |unknown.0:0| :skolemid |1840| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.uint32 $h@@69)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@124)) bx@@124) ($Is ($Unbox intType bx@@124) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1841| :pattern ( ($IsBox bx@@124 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1842| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@70 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.int64 $h@@70)) :qid |unknown.0:0| :skolemid |1843| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.int64 $h@@70)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1844| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@71 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint64 $h@@71)) :qid |unknown.0:0| :skolemid |1845| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint64 $h@@71)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@125)) bx@@125) ($Is ($Unbox intType bx@@125) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1846| :pattern ( ($IsBox bx@@125 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 128)))) :qid |unknown.0:0| :skolemid |1847| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@72 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat8 $h@@72)) :qid |unknown.0:0| :skolemid |1848| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat8 $h@@72)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@126)) bx@@126) ($Is ($Unbox intType bx@@126) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1849| :pattern ( ($IsBox bx@@126 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 32768)))) :qid |unknown.0:0| :skolemid |1850| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@73 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@73) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.nat16 $h@@73)) :qid |unknown.0:0| :skolemid |1851| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.nat16 $h@@73)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1852| :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (= ($Is |i#0@@25| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 2147483648)))) :qid |unknown.0:0| :skolemid |1853| :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@26| T@U) ($h@@74 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.nat32 $h@@74)) :qid |unknown.0:0| :skolemid |1854| :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.nat32 $h@@74)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@128)) bx@@128) ($Is ($Unbox intType bx@@128) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1855| :pattern ( ($IsBox bx@@128 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@27| T@U) ) (!  (=> (= (type |i#0@@27|) intType) (= ($Is |i#0@@27| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1856| :pattern ( ($Is |i#0@@27| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@28| T@U) ($h@@75 T@U) ) (!  (=> (and (= (type |i#0@@28|) intType) (= (type $h@@75) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@28| Tclass.NativeTypes.nat64 $h@@75)) :qid |unknown.0:0| :skolemid |1857| :pattern ( ($IsAlloc |i#0@@28| Tclass.NativeTypes.nat64 $h@@75)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1858| :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@29| T@U) ) (!  (=> (= (type |i#0@@29|) intType) (= ($Is |i#0@@29| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1859| :pattern ( ($Is |i#0@@29| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@30| T@U) ($h@@76 T@U) ) (!  (=> (and (= (type |i#0@@30|) intType) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@30| Tclass.NativeTypes.uint128 $h@@76)) :qid |unknown.0:0| :skolemid |1860| :pattern ( ($IsAlloc |i#0@@30| Tclass.NativeTypes.uint128 $h@@76)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@130)) bx@@130) ($Is ($Unbox refType bx@@130) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1861| :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1862| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@77)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1863| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@77)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@43 T@U) ) (!  (=> (= (type d@@43) DatatypeTypeType) (= (Options.Option.None_q d@@43) (= (DatatypeCtorId d@@43) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |1864| :pattern ( (Options.Option.None_q d@@43)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (and (= (type d@@44) DatatypeTypeType) (Options.Option.None_q d@@44)) (= d@@44 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1865| :pattern ( (Options.Option.None_q d@@44)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1866| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@78) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@78)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@78)) :qid |unknown.0:0| :skolemid |1867| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@78)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@1|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |1868| :pattern ( (|#Options.Option.Some| |a#5#0#0@@1|)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (= (type d@@45) DatatypeTypeType) (= (Options.Option.Some_q d@@45) (= (DatatypeCtorId d@@45) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |1869| :pattern ( (Options.Option.Some_q d@@45)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) (Options.Option.Some_q d@@46)) (exists ((|a#6#0#0@@1| T@U) ) (!  (and (= (type |a#6#0#0@@1|) BoxType) (= d@@46 (|#Options.Option.Some| |a#6#0#0@@1|))) :qid |Optionsdfy.5:36| :skolemid |1870| :no-pattern (type |a#6#0#0@@1|) :no-pattern (U_2_int |a#6#0#0@@1|) :no-pattern (U_2_bool |a#6#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |1871| :pattern ( (Options.Option.Some_q d@@46)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@1| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@1|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@1| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |1872| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@1| T@U) ($h@@79 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@1|) BoxType)) (= (type $h@@79) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@79)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@79) ($IsAllocBox |a#8#0#0@@1| Options.Option$V@@5 $h@@79))) :qid |unknown.0:0| :skolemid |1873| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@79)) )))
(assert (forall ((arg0@@400 T@U) ) (! (= (type (Options.Option.value arg0@@400)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@400)) )))
(assert (forall ((d@@47 T@U) (Options.Option$V@@6 T@U) ($h@@80 T@U) ) (!  (=> (and (and (and (= (type d@@47) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@80) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@80) (and (Options.Option.Some_q d@@47) ($IsAlloc d@@47 (Tclass.Options.Option Options.Option$V@@6) $h@@80)))) ($IsAllocBox (Options.Option.value d@@47) Options.Option$V@@6 $h@@80)) :qid |unknown.0:0| :skolemid |1874| :pattern ( ($IsAllocBox (Options.Option.value d@@47) Options.Option$V@@6 $h@@80)) )))
(assert (forall ((|a#9#0#0@@1| T@U) ) (!  (=> (= (type |a#9#0#0@@1|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@1|)) (Lit (|#Options.Option.Some| |a#9#0#0@@1|)))) :qid |Optionsdfy.5:36| :skolemid |1875| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@1|))) )))
(assert (forall ((|a#10#0#0@@1| T@U) ) (!  (=> (= (type |a#10#0#0@@1|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@1|)) |a#10#0#0@@1|)) :qid |Optionsdfy.5:36| :skolemid |1876| :pattern ( (|#Options.Option.Some| |a#10#0#0@@1|)) )))
(assert (forall ((|a#11#0#0@@1| T@U) ) (!  (=> (= (type |a#11#0#0@@1|) BoxType) (< (BoxRank |a#11#0#0@@1|) (DtRank (|#Options.Option.Some| |a#11#0#0@@1|)))) :qid |Optionsdfy.5:36| :skolemid |1877| :pattern ( (|#Options.Option.Some| |a#11#0#0@@1|)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) (|$IsA#Options.Option| d@@48)) (or (Options.Option.None_q d@@48) (Options.Option.Some_q d@@48))) :qid |unknown.0:0| :skolemid |1878| :pattern ( (|$IsA#Options.Option| d@@48)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@49 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@49) DatatypeTypeType)) ($Is d@@49 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@49) (Options.Option.Some_q d@@49))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (Options.Option.Some_q d@@49) ($Is d@@49 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@49) ($Is d@@49 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@126 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (Options.Option.None_q a@@126) (Options.Option.None_q b@@76))) (= (|Options.Option#Equal| a@@126 b@@76) true)) :qid |unknown.0:0| :skolemid |1880| :pattern ( (|Options.Option#Equal| a@@126 b@@76) (Options.Option.None_q a@@126)) :pattern ( (|Options.Option#Equal| a@@126 b@@76) (Options.Option.None_q b@@76)) )))
(assert (forall ((a@@127 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@127) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (Options.Option.Some_q a@@127) (Options.Option.Some_q b@@77))) (= (|Options.Option#Equal| a@@127 b@@77) (= (Options.Option.value a@@127) (Options.Option.value b@@77)))) :qid |unknown.0:0| :skolemid |1881| :pattern ( (|Options.Option#Equal| a@@127 b@@77) (Options.Option.Some_q a@@127)) :pattern ( (|Options.Option#Equal| a@@127 b@@77) (Options.Option.Some_q b@@77)) )))
(assert (forall ((a@@128 T@U) (b@@78 T@U) ) (!  (=> (and (= (type a@@128) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (= (|Options.Option#Equal| a@@128 b@@78) (= a@@128 b@@78))) :qid |unknown.0:0| :skolemid |1882| :pattern ( (|Options.Option#Equal| a@@128 b@@78)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@131)) bx@@131) ($Is ($Unbox refType bx@@131) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1883| :pattern ( ($IsBox bx@@131 Tclass.Options.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.Options.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1884| :pattern ( ($Is $o@@13 Tclass.Options.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@81 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.Options.__default $h@@81)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@81 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1885| :pattern ( ($IsAlloc $o@@14 Tclass.Options.__default $h@@81)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@155 T@U) (arg2@@83 T@U) (arg3@@45 T@U) (arg4@@28 T@U) ) (! (= (type (Options.__default.MapOption arg0@@401 arg1@@155 arg2@@83 arg3@@45 arg4@@28)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@401 arg1@@155 arg2@@83 arg3@@45 arg4@@28)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@67| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@67|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@67|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@67| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@15 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@15) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@15 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@67| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@15))))) (= (MapType1Select (MapType0Select $h0 $o@@15) $f) (MapType1Select (MapType0Select $h1 $o@@15) $f)))) :qid |unknown.0:0| :skolemid |1886| :no-pattern (type $o@@15) :no-pattern (type $f) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@67|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@67|))) :qid |unknown.0:0| :skolemid |1887| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@67|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@0| T@U) (|f#0@@68| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@68|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@68| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@68| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@68| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1888| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@68|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@1| T@U) (|f#0@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@69|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@69| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@69|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@69| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |1889| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@69|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@2| T@U) (|f#0@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@70|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@70|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@70| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@70| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@70|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@70| |v#0|)))))) :qid |unknown.0:0| :skolemid |1890| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@70|) ($IsGoodHeap $Heap@@4)) ))))
(assert (forall ((arg0@@402 T@U) (arg1@@156 T@U) (arg2@@84 T@U) (arg3@@46 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@402 arg1@@156 arg2@@84 arg3@@46 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@402 arg1@@156 arg2@@84 arg3@@46 arg4@@29)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@71|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@71|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@71| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@16 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@16 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@71| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@16))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@16) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@16) $f@@0)))) :qid |unknown.0:0| :skolemid |1891| :no-pattern (type $o@@16) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@71|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@71|))) :qid |unknown.0:0| :skolemid |1892| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@71|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@5 T@U) (|opt#0@@4| T@U) (|f#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@72|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@72|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@72| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@72| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@72| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@72|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@72| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@72|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@72| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@72|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1893| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@72|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@6 T@U) (|opt#0@@5| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@73|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@73| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@73|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@73| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |1894| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@73|) ($IsGoodHeap $Heap@@6)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@7 T@U) (|opt#0@@6| T@U) (|f#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@74|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@74|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@74| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@74| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@74|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@74| |v#0@@0|)))))) :qid |unknown.0:0| :skolemid |1895| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@74|) ($IsGoodHeap $Heap@@7)) ))))
(assert (forall ((arg0@@403 T@U) (arg1@@157 T@U) ) (! (= (type (|#LinearOption.TupleResult.TupleResult| arg0@@403 arg1@@157)) DatatypeTypeType) :qid |funType:#LinearOption.TupleResult.TupleResult| :pattern ( (|#LinearOption.TupleResult.TupleResult| arg0@@403 arg1@@157)) )))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (!  (=> (and (= (type |a#0#0#0@@0|) DatatypeTypeType) (= (type |a#0#1#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#LinearOption.TupleResult.TupleResult| |a#0#0#0@@0| |a#0#1#0@@0|)) |##LinearOption.TupleResult.TupleResult|)) :qid |LinearOptionidfy.9:55| :skolemid |1896| :pattern ( (|#LinearOption.TupleResult.TupleResult| |a#0#0#0@@0| |a#0#1#0@@0|)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (= (type d@@50) DatatypeTypeType) (= (LinearOption.TupleResult.TupleResult_q d@@50) (= (DatatypeCtorId d@@50) |##LinearOption.TupleResult.TupleResult|))) :qid |unknown.0:0| :skolemid |1897| :pattern ( (LinearOption.TupleResult.TupleResult_q d@@50)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) (LinearOption.TupleResult.TupleResult_q d@@51)) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (!  (and (and (= (type |a#1#0#0@@0|) DatatypeTypeType) (= (type |a#1#1#0@@0|) DatatypeTypeType)) (= d@@51 (|#LinearOption.TupleResult.TupleResult| |a#1#0#0@@0| |a#1#1#0@@0|))) :qid |LinearOptionidfy.9:55| :skolemid |1898| :no-pattern (type |a#1#0#0@@0|) :no-pattern (type |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |1899| :pattern ( (LinearOption.TupleResult.TupleResult_q d@@51)) )))
(assert (forall ((arg0@@404 T@U) ) (! (= (type (Tclass.LinearOption.TupleResult arg0@@404)) TyType) :qid |funType:Tclass.LinearOption.TupleResult| :pattern ( (Tclass.LinearOption.TupleResult arg0@@404)) )))
(assert (forall ((LinearOption.TupleResult$V T@U) ) (!  (=> (= (type LinearOption.TupleResult$V) TyType) (and (= (Tag (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V)) Tagclass.LinearOption.TupleResult) (= (TagFamily (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V)) tytagFamily$TupleResult))) :qid |unknown.0:0| :skolemid |1900| :pattern ( (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V)) )))
(assert (forall ((arg0@@405 T@U) ) (! (= (type (Tclass.LinearOption.TupleResult_0 arg0@@405)) TyType) :qid |funType:Tclass.LinearOption.TupleResult_0| :pattern ( (Tclass.LinearOption.TupleResult_0 arg0@@405)) )))
(assert (forall ((LinearOption.TupleResult$V@@0 T@U) ) (!  (=> (= (type LinearOption.TupleResult$V@@0) TyType) (= (Tclass.LinearOption.TupleResult_0 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@0)) LinearOption.TupleResult$V@@0)) :qid |unknown.0:0| :skolemid |1901| :pattern ( (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@0)) )))
(assert (forall ((LinearOption.TupleResult$V@@1 T@U) (bx@@132 T@U) ) (!  (=> (and (and (= (type LinearOption.TupleResult$V@@1) TyType) (= (type bx@@132) BoxType)) ($IsBox bx@@132 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@132)) bx@@132) ($Is ($Unbox DatatypeTypeType bx@@132) (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@1)))) :qid |unknown.0:0| :skolemid |1902| :pattern ( ($IsBox bx@@132 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@1))) )))
(assert (forall ((LinearOption.TupleResult$V@@2 T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ) (!  (=> (and (and (= (type LinearOption.TupleResult$V@@2) TyType) (= (type |a#2#0#0@@0|) DatatypeTypeType)) (= (type |a#2#1#0@@0|) DatatypeTypeType)) (= ($Is (|#LinearOption.TupleResult.TupleResult| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@2))  (and ($Is |a#2#0#0@@0| (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@2)) ($Is |a#2#1#0@@0| (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@2))))) :qid |unknown.0:0| :skolemid |1903| :pattern ( ($Is (|#LinearOption.TupleResult.TupleResult| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@2))) )))
(assert (forall ((LinearOption.TupleResult$V@@3 T@U) (|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (and (and (= (type LinearOption.TupleResult$V@@3) TyType) (= (type |a#3#0#0@@0|) DatatypeTypeType)) (= (type |a#3#1#0@@0|) DatatypeTypeType)) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (= ($IsAlloc (|#LinearOption.TupleResult.TupleResult| |a#3#0#0@@0| |a#3#1#0@@0|) (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@3) $h@@82)  (and ($IsAlloc |a#3#0#0@@0| (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@3) $h@@82) ($IsAlloc |a#3#1#0@@0| (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@3) $h@@82)))) :qid |unknown.0:0| :skolemid |1904| :pattern ( ($IsAlloc (|#LinearOption.TupleResult.TupleResult| |a#3#0#0@@0| |a#3#1#0@@0|) (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@3) $h@@82)) )))
(assert (forall ((arg0@@406 T@U) ) (! (= (type (LinearOption.TupleResult.result arg0@@406)) DatatypeTypeType) :qid |funType:LinearOption.TupleResult.result| :pattern ( (LinearOption.TupleResult.result arg0@@406)) )))
(assert (forall ((d@@52 T@U) (LinearOption.TupleResult$V@@4 T@U) ($h@@83 T@U) ) (!  (=> (and (and (and (= (type d@@52) DatatypeTypeType) (= (type LinearOption.TupleResult$V@@4) TyType)) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (LinearOption.TupleResult.TupleResult_q d@@52) ($IsAlloc d@@52 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@4) $h@@83)))) ($IsAlloc (LinearOption.TupleResult.result d@@52) (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@4) $h@@83)) :qid |unknown.0:0| :skolemid |1905| :pattern ( ($IsAlloc (LinearOption.TupleResult.result d@@52) (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@4) $h@@83)) )))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (LinearOption.TupleResult.other arg0@@407)) DatatypeTypeType) :qid |funType:LinearOption.TupleResult.other| :pattern ( (LinearOption.TupleResult.other arg0@@407)) )))
(assert (forall ((d@@53 T@U) (LinearOption.TupleResult$V@@5 T@U) ($h@@84 T@U) ) (!  (=> (and (and (and (= (type d@@53) DatatypeTypeType) (= (type LinearOption.TupleResult$V@@5) TyType)) (= (type $h@@84) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@84) (and (LinearOption.TupleResult.TupleResult_q d@@53) ($IsAlloc d@@53 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@5) $h@@84)))) ($IsAlloc (LinearOption.TupleResult.other d@@53) (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@5) $h@@84)) :qid |unknown.0:0| :skolemid |1906| :pattern ( ($IsAlloc (LinearOption.TupleResult.other d@@53) (Tclass.LinearOption.lOption LinearOption.TupleResult$V@@5) $h@@84)) )))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (!  (=> (and (= (type |a#4#0#0@@0|) DatatypeTypeType) (= (type |a#4#1#0@@0|) DatatypeTypeType)) (= (|#LinearOption.TupleResult.TupleResult| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|)) (Lit (|#LinearOption.TupleResult.TupleResult| |a#4#0#0@@0| |a#4#1#0@@0|)))) :qid |LinearOptionidfy.9:55| :skolemid |1907| :pattern ( (|#LinearOption.TupleResult.TupleResult| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@2| T@U) (|a#5#1#0@@1| T@U) ) (!  (=> (and (= (type |a#5#0#0@@2|) DatatypeTypeType) (= (type |a#5#1#0@@1|) DatatypeTypeType)) (= (LinearOption.TupleResult.result (|#LinearOption.TupleResult.TupleResult| |a#5#0#0@@2| |a#5#1#0@@1|)) |a#5#0#0@@2|)) :qid |LinearOptionidfy.9:55| :skolemid |1908| :pattern ( (|#LinearOption.TupleResult.TupleResult| |a#5#0#0@@2| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@2| T@U) (|a#6#1#0@@1| T@U) ) (!  (=> (and (= (type |a#6#0#0@@2|) DatatypeTypeType) (= (type |a#6#1#0@@1|) DatatypeTypeType)) (< (DtRank |a#6#0#0@@2|) (DtRank (|#LinearOption.TupleResult.TupleResult| |a#6#0#0@@2| |a#6#1#0@@1|)))) :qid |LinearOptionidfy.9:55| :skolemid |1909| :pattern ( (|#LinearOption.TupleResult.TupleResult| |a#6#0#0@@2| |a#6#1#0@@1|)) )))
(assert (forall ((|a#7#0#0@@2| T@U) (|a#7#1#0@@1| T@U) ) (!  (=> (and (= (type |a#7#0#0@@2|) DatatypeTypeType) (= (type |a#7#1#0@@1|) DatatypeTypeType)) (= (LinearOption.TupleResult.other (|#LinearOption.TupleResult.TupleResult| |a#7#0#0@@2| |a#7#1#0@@1|)) |a#7#1#0@@1|)) :qid |LinearOptionidfy.9:55| :skolemid |1910| :pattern ( (|#LinearOption.TupleResult.TupleResult| |a#7#0#0@@2| |a#7#1#0@@1|)) )))
(assert (forall ((|a#8#0#0@@2| T@U) (|a#8#1#0@@1| T@U) ) (!  (=> (and (= (type |a#8#0#0@@2|) DatatypeTypeType) (= (type |a#8#1#0@@1|) DatatypeTypeType)) (< (DtRank |a#8#1#0@@1|) (DtRank (|#LinearOption.TupleResult.TupleResult| |a#8#0#0@@2| |a#8#1#0@@1|)))) :qid |LinearOptionidfy.9:55| :skolemid |1911| :pattern ( (|#LinearOption.TupleResult.TupleResult| |a#8#0#0@@2| |a#8#1#0@@1|)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (|$IsA#LinearOption.TupleResult| d@@54)) (LinearOption.TupleResult.TupleResult_q d@@54)) :qid |unknown.0:0| :skolemid |1912| :pattern ( (|$IsA#LinearOption.TupleResult| d@@54)) )))
(assert (forall ((LinearOption.TupleResult$V@@6 T@U) (d@@55 T@U) ) (!  (=> (and (and (= (type LinearOption.TupleResult$V@@6) TyType) (= (type d@@55) DatatypeTypeType)) ($Is d@@55 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@6))) (LinearOption.TupleResult.TupleResult_q d@@55)) :qid |unknown.0:0| :skolemid |1913| :pattern ( (LinearOption.TupleResult.TupleResult_q d@@55) ($Is d@@55 (Tclass.LinearOption.TupleResult LinearOption.TupleResult$V@@6))) )))
(assert (forall ((a@@129 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) true) (= (|LinearOption.TupleResult#Equal| a@@129 b@@79)  (and (|LinearOption.lOption#Equal| (LinearOption.TupleResult.result a@@129) (LinearOption.TupleResult.result b@@79)) (|LinearOption.lOption#Equal| (LinearOption.TupleResult.other a@@129) (LinearOption.TupleResult.other b@@79))))) :qid |unknown.0:0| :skolemid |1914| :pattern ( (|LinearOption.TupleResult#Equal| a@@129 b@@79)) )))
(assert (forall ((a@@130 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@130) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (= (|LinearOption.TupleResult#Equal| a@@130 b@@80) (= a@@130 b@@80))) :qid |unknown.0:0| :skolemid |1915| :pattern ( (|LinearOption.TupleResult#Equal| a@@130 b@@80)) )))
(assert (= (type |#LinearOption.lOption.lNone|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#LinearOption.lOption.lNone|) |##LinearOption.lOption.lNone|))
(assert (forall ((d@@56 T@U) ) (!  (=> (= (type d@@56) DatatypeTypeType) (= (LinearOption.lOption.lNone_q d@@56) (= (DatatypeCtorId d@@56) |##LinearOption.lOption.lNone|))) :qid |unknown.0:0| :skolemid |1916| :pattern ( (LinearOption.lOption.lNone_q d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (LinearOption.lOption.lNone_q d@@57)) (= d@@57 |#LinearOption.lOption.lNone|)) :qid |unknown.0:0| :skolemid |1917| :pattern ( (LinearOption.lOption.lNone_q d@@57)) )))
(assert (forall ((LinearOption.lOption$V@@2 T@U) ) (!  (=> (= (type LinearOption.lOption$V@@2) TyType) ($Is |#LinearOption.lOption.lNone| (Tclass.LinearOption.lOption LinearOption.lOption$V@@2))) :qid |unknown.0:0| :skolemid |1918| :pattern ( ($Is |#LinearOption.lOption.lNone| (Tclass.LinearOption.lOption LinearOption.lOption$V@@2))) )))
(assert (forall ((LinearOption.lOption$V@@3 T@U) ($h@@85 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@3) TyType) (= (type $h@@85) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@85)) ($IsAlloc |#LinearOption.lOption.lNone| (Tclass.LinearOption.lOption LinearOption.lOption$V@@3) $h@@85)) :qid |unknown.0:0| :skolemid |1919| :pattern ( ($IsAlloc |#LinearOption.lOption.lNone| (Tclass.LinearOption.lOption LinearOption.lOption$V@@3) $h@@85)) )))
(assert (= |#LinearOption.lOption.lNone| (Lit |#LinearOption.lOption.lNone|)))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (|#LinearOption.lOption.lSome| arg0@@408)) DatatypeTypeType) :qid |funType:#LinearOption.lOption.lSome| :pattern ( (|#LinearOption.lOption.lSome| arg0@@408)) )))
(assert (forall ((|a#14#0#0@@1| T@U) ) (!  (=> (= (type |a#14#0#0@@1|) BoxType) (= (DatatypeCtorId (|#LinearOption.lOption.lSome| |a#14#0#0@@1|)) |##LinearOption.lOption.lSome|)) :qid |LinearOptionidfy.11:53| :skolemid |1920| :pattern ( (|#LinearOption.lOption.lSome| |a#14#0#0@@1|)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (= (type d@@58) DatatypeTypeType) (= (LinearOption.lOption.lSome_q d@@58) (= (DatatypeCtorId d@@58) |##LinearOption.lOption.lSome|))) :qid |unknown.0:0| :skolemid |1921| :pattern ( (LinearOption.lOption.lSome_q d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (LinearOption.lOption.lSome_q d@@59)) (exists ((|a#15#0#0@@1| T@U) ) (!  (and (= (type |a#15#0#0@@1|) BoxType) (= d@@59 (|#LinearOption.lOption.lSome| |a#15#0#0@@1|))) :qid |LinearOptionidfy.11:53| :skolemid |1922| :no-pattern (type |a#15#0#0@@1|) :no-pattern (U_2_int |a#15#0#0@@1|) :no-pattern (U_2_bool |a#15#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |1923| :pattern ( (LinearOption.lOption.lSome_q d@@59)) )))
(assert (forall ((LinearOption.lOption$V@@4 T@U) (|a#16#0#0@@1| T@U) ) (!  (=> (and (= (type LinearOption.lOption$V@@4) TyType) (= (type |a#16#0#0@@1|) BoxType)) (= ($Is (|#LinearOption.lOption.lSome| |a#16#0#0@@1|) (Tclass.LinearOption.lOption LinearOption.lOption$V@@4)) ($IsBox |a#16#0#0@@1| LinearOption.lOption$V@@4))) :qid |unknown.0:0| :skolemid |1924| :pattern ( ($Is (|#LinearOption.lOption.lSome| |a#16#0#0@@1|) (Tclass.LinearOption.lOption LinearOption.lOption$V@@4))) )))
(assert (forall ((LinearOption.lOption$V@@5 T@U) (|a#17#0#0@@1| T@U) ($h@@86 T@U) ) (!  (=> (and (and (and (= (type LinearOption.lOption$V@@5) TyType) (= (type |a#17#0#0@@1|) BoxType)) (= (type $h@@86) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@86)) (= ($IsAlloc (|#LinearOption.lOption.lSome| |a#17#0#0@@1|) (Tclass.LinearOption.lOption LinearOption.lOption$V@@5) $h@@86) ($IsAllocBox |a#17#0#0@@1| LinearOption.lOption$V@@5 $h@@86))) :qid |unknown.0:0| :skolemid |1925| :pattern ( ($IsAlloc (|#LinearOption.lOption.lSome| |a#17#0#0@@1|) (Tclass.LinearOption.lOption LinearOption.lOption$V@@5) $h@@86)) )))
(assert (forall ((arg0@@409 T@U) ) (! (= (type (LinearOption.lOption.value arg0@@409)) BoxType) :qid |funType:LinearOption.lOption.value| :pattern ( (LinearOption.lOption.value arg0@@409)) )))
(assert (forall ((d@@60 T@U) (LinearOption.lOption$V@@6 T@U) ($h@@87 T@U) ) (!  (=> (and (and (and (= (type d@@60) DatatypeTypeType) (= (type LinearOption.lOption$V@@6) TyType)) (= (type $h@@87) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@87) (and (LinearOption.lOption.lSome_q d@@60) ($IsAlloc d@@60 (Tclass.LinearOption.lOption LinearOption.lOption$V@@6) $h@@87)))) ($IsAllocBox (LinearOption.lOption.value d@@60) LinearOption.lOption$V@@6 $h@@87)) :qid |unknown.0:0| :skolemid |1926| :pattern ( ($IsAllocBox (LinearOption.lOption.value d@@60) LinearOption.lOption$V@@6 $h@@87)) )))
(assert (forall ((|a#18#0#0@@1| T@U) ) (!  (=> (= (type |a#18#0#0@@1|) BoxType) (= (|#LinearOption.lOption.lSome| (Lit |a#18#0#0@@1|)) (Lit (|#LinearOption.lOption.lSome| |a#18#0#0@@1|)))) :qid |LinearOptionidfy.11:53| :skolemid |1927| :pattern ( (|#LinearOption.lOption.lSome| (Lit |a#18#0#0@@1|))) )))
(assert (forall ((|a#19#0#0@@1| T@U) ) (!  (=> (= (type |a#19#0#0@@1|) BoxType) (= (LinearOption.lOption.value (|#LinearOption.lOption.lSome| |a#19#0#0@@1|)) |a#19#0#0@@1|)) :qid |LinearOptionidfy.11:53| :skolemid |1928| :pattern ( (|#LinearOption.lOption.lSome| |a#19#0#0@@1|)) )))
(assert (forall ((|a#20#0#0@@1| T@U) ) (!  (=> (= (type |a#20#0#0@@1|) BoxType) (< (BoxRank |a#20#0#0@@1|) (DtRank (|#LinearOption.lOption.lSome| |a#20#0#0@@1|)))) :qid |LinearOptionidfy.11:53| :skolemid |1929| :pattern ( (|#LinearOption.lOption.lSome| |a#20#0#0@@1|)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (|$IsA#LinearOption.lOption| d@@61)) (or (LinearOption.lOption.lNone_q d@@61) (LinearOption.lOption.lSome_q d@@61))) :qid |unknown.0:0| :skolemid |1930| :pattern ( (|$IsA#LinearOption.lOption| d@@61)) )))
(assert (forall ((LinearOption.lOption$V@@7 T@U) (d@@62 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@7) TyType) (= (type d@@62) DatatypeTypeType)) ($Is d@@62 (Tclass.LinearOption.lOption LinearOption.lOption$V@@7))) (or (LinearOption.lOption.lNone_q d@@62) (LinearOption.lOption.lSome_q d@@62))) :qid |unknown.0:0| :skolemid |1931| :pattern ( (LinearOption.lOption.lSome_q d@@62) ($Is d@@62 (Tclass.LinearOption.lOption LinearOption.lOption$V@@7))) :pattern ( (LinearOption.lOption.lNone_q d@@62) ($Is d@@62 (Tclass.LinearOption.lOption LinearOption.lOption$V@@7))) )))
(assert (forall ((a@@131 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (LinearOption.lOption.lNone_q a@@131) (LinearOption.lOption.lNone_q b@@81))) (= (|LinearOption.lOption#Equal| a@@131 b@@81) true)) :qid |unknown.0:0| :skolemid |1932| :pattern ( (|LinearOption.lOption#Equal| a@@131 b@@81) (LinearOption.lOption.lNone_q a@@131)) :pattern ( (|LinearOption.lOption#Equal| a@@131 b@@81) (LinearOption.lOption.lNone_q b@@81)) )))
(assert (forall ((a@@132 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (LinearOption.lOption.lSome_q a@@132) (LinearOption.lOption.lSome_q b@@82))) (= (|LinearOption.lOption#Equal| a@@132 b@@82) (= (LinearOption.lOption.value a@@132) (LinearOption.lOption.value b@@82)))) :qid |unknown.0:0| :skolemid |1933| :pattern ( (|LinearOption.lOption#Equal| a@@132 b@@82) (LinearOption.lOption.lSome_q a@@132)) :pattern ( (|LinearOption.lOption#Equal| a@@132 b@@82) (LinearOption.lOption.lSome_q b@@82)) )))
(assert (forall ((a@@133 T@U) (b@@83 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (= (|LinearOption.lOption#Equal| a@@133 b@@83) (= a@@133 b@@83))) :qid |unknown.0:0| :skolemid |1934| :pattern ( (|LinearOption.lOption#Equal| a@@133 b@@83)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@158 T@U) (arg2@@85 T@U) (arg3@@47 T@U) (arg4@@30 T@U) ) (! (= (type (LinearOption.lOption.Map arg0@@410 arg1@@158 arg2@@85 arg3@@47 arg4@@30)) DatatypeTypeType) :qid |funType:LinearOption.lOption.Map| :pattern ( (LinearOption.lOption.Map arg0@@410 arg1@@158 arg2@@85 arg3@@47 arg4@@30)) )))
(assert (forall ((LinearOption.lOption$V@@8 T@U) (LinearOption.lOption.Map$V1 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (this@@7 T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type LinearOption.lOption$V@@8) TyType) (= (type LinearOption.lOption.Map$V1) TyType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type this@@7) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (and (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) ($Is this@@7 (Tclass.LinearOption.lOption LinearOption.lOption$V@@8))) (or (|LinearOption.lOption.Map#canCall| LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1 $h0@@1 this@@7 |f#0@@75|) ($Is |f#0@@75| (Tclass._System.___hFunc1 LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1)))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@17 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@17) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@17 null)) (U_2_bool (MapType0Select (ite (LinearOption.lOption.lSome_q this@@7) (Reads1 LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1 $h0@@1 |f#0@@75| (LinearOption.lOption.value this@@7)) (|Set#Empty| BoxType)) ($Box $o@@17))))) (= (MapType1Select (MapType0Select $h0@@1 $o@@17) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@17) $f@@1)))) :qid |unknown.0:0| :skolemid |1935| :no-pattern (type $o@@17) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@17) :no-pattern (U_2_bool $o@@17) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (LinearOption.lOption.Map LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1 $h0@@1 this@@7 |f#0@@75|) (LinearOption.lOption.Map LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1 $h1@@1 this@@7 |f#0@@75|))) :qid |unknown.0:0| :skolemid |1936| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (LinearOption.lOption.Map LinearOption.lOption$V@@8 LinearOption.lOption.Map$V1 $h1@@1 this@@7 |f#0@@75|)) )))
(assert  (=> true (forall ((LinearOption.lOption$V@@9 T@U) (LinearOption.lOption.Map$V1@@0 T@U) ($Heap@@8 T@U) (this@@8 T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type LinearOption.lOption$V@@9) TyType) (= (type LinearOption.lOption.Map$V1@@0) TyType)) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type this@@8) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (or (|LinearOption.lOption.Map#canCall| LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|) (and (and (and ($IsGoodHeap $Heap@@8) (and ($Is this@@8 (Tclass.LinearOption.lOption LinearOption.lOption$V@@9)) ($IsAlloc this@@8 (Tclass.LinearOption.lOption LinearOption.lOption$V@@9) $Heap@@8))) ($Is |f#0@@76| (Tclass._System.___hFunc1 LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0))) (=> (LinearOption.lOption.lSome_q this@@8) (Requires1 LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 |f#0@@76| (LinearOption.lOption.value this@@8)))))) (and (and (= (LinearOption.lOption.lSome_q this@@8) (LinearOption.lOption.lSome_q (LinearOption.lOption.Map LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|))) (=> (LinearOption.lOption.lSome_q (LinearOption.lOption.Map LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|)) (= (LinearOption.lOption.value (LinearOption.lOption.Map LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|)) (Apply1 LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 |f#0@@76| (LinearOption.lOption.value this@@8))))) ($Is (LinearOption.lOption.Map LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|) (Tclass.LinearOption.lOption LinearOption.lOption.Map$V1@@0)))) :qid |unknown.0:0| :skolemid |1937| :pattern ( (LinearOption.lOption.Map LinearOption.lOption$V@@9 LinearOption.lOption.Map$V1@@0 $Heap@@8 this@@8 |f#0@@76|)) ))))
(assert (forall ((LinearOption.lOption$V@@10 T@U) (LinearOption.lOption.Map$V1@@1 T@U) ($Heap@@9 T@U) (this@@9 T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type LinearOption.lOption$V@@10) TyType) (= (type LinearOption.lOption.Map$V1@@1) TyType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type this@@9) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@9) (and ($Is this@@9 (Tclass.LinearOption.lOption LinearOption.lOption$V@@10)) ($IsAlloc this@@9 (Tclass.LinearOption.lOption LinearOption.lOption$V@@10) $Heap@@9))) ($Is |f#0@@77| (Tclass._System.___hFunc1 LinearOption.lOption$V@@10 LinearOption.lOption.Map$V1@@1)))) (= (|LinearOption.lOption.Map#requires| LinearOption.lOption$V@@10 LinearOption.lOption.Map$V1@@1 $Heap@@9 this@@9 |f#0@@77|)  (=> (LinearOption.lOption.lSome_q this@@9) (Requires1 LinearOption.lOption$V@@10 LinearOption.lOption.Map$V1@@1 $Heap@@9 |f#0@@77| (LinearOption.lOption.value this@@9))))) :qid |unknown.0:0| :skolemid |1938| :pattern ( (|LinearOption.lOption.Map#requires| LinearOption.lOption$V@@10 LinearOption.lOption.Map$V1@@1 $Heap@@9 this@@9 |f#0@@77|) ($IsGoodHeap $Heap@@9)) )))
(assert  (=> true (forall ((LinearOption.lOption$V@@11 T@U) (LinearOption.lOption.Map$V1@@2 T@U) ($Heap@@10 T@U) (this@@10 T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type LinearOption.lOption$V@@11) TyType) (= (type LinearOption.lOption.Map$V1@@2) TyType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type this@@10) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (or (|LinearOption.lOption.Map#canCall| LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2 $Heap@@10 this@@10 |f#0@@78|) (and (and (and ($IsGoodHeap $Heap@@10) (and ($Is this@@10 (Tclass.LinearOption.lOption LinearOption.lOption$V@@11)) ($IsAlloc this@@10 (Tclass.LinearOption.lOption LinearOption.lOption$V@@11) $Heap@@10))) ($Is |f#0@@78| (Tclass._System.___hFunc1 LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2))) (=> (LinearOption.lOption.lSome_q this@@10) (Requires1 LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2 $Heap@@10 |f#0@@78| (LinearOption.lOption.value this@@10)))))) (= (LinearOption.lOption.Map LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2 $Heap@@10 this@@10 |f#0@@78|) (ite (LinearOption.lOption.lNone_q this@@10) |#LinearOption.lOption.lNone| (let ((|v#0@@1| (LinearOption.lOption.value this@@10))) (|#LinearOption.lOption.lSome| (Apply1 LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2 $Heap@@10 |f#0@@78| |v#0@@1|)))))) :qid |unknown.0:0| :skolemid |1939| :pattern ( (LinearOption.lOption.Map LinearOption.lOption$V@@11 LinearOption.lOption.Map$V1@@2 $Heap@@10 this@@10 |f#0@@78|) ($IsGoodHeap $Heap@@10)) ))))
(assert (forall ((arg0@@411 T@U) (arg1@@159 T@U) ) (! (= (type (LinearOption.lOption.Option arg0@@411 arg1@@159)) DatatypeTypeType) :qid |funType:LinearOption.lOption.Option| :pattern ( (LinearOption.lOption.Option arg0@@411 arg1@@159)) )))
(assert  (=> true (forall ((LinearOption.lOption$V@@12 T@U) (this@@11 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@12) TyType) (= (type this@@11) DatatypeTypeType)) (or (|LinearOption.lOption.Option#canCall| LinearOption.lOption$V@@12 this@@11) ($Is this@@11 (Tclass.LinearOption.lOption LinearOption.lOption$V@@12)))) ($Is (LinearOption.lOption.Option LinearOption.lOption$V@@12 this@@11) (Tclass.Options.Option LinearOption.lOption$V@@12))) :qid |unknown.0:0| :skolemid |1940| :pattern ( (LinearOption.lOption.Option LinearOption.lOption$V@@12 this@@11)) ))))
(assert (forall ((LinearOption.lOption$V@@13 T@U) (this@@12 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@13) TyType) (= (type this@@12) DatatypeTypeType)) ($Is this@@12 (Tclass.LinearOption.lOption LinearOption.lOption$V@@13))) (= (|LinearOption.lOption.Option#requires| LinearOption.lOption$V@@13 this@@12) true)) :qid |unknown.0:0| :skolemid |1941| :pattern ( (|LinearOption.lOption.Option#requires| LinearOption.lOption$V@@13 this@@12)) )))
(assert  (=> true (forall ((LinearOption.lOption$V@@14 T@U) (this@@13 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@14) TyType) (= (type this@@13) DatatypeTypeType)) (or (|LinearOption.lOption.Option#canCall| LinearOption.lOption$V@@14 this@@13) ($Is this@@13 (Tclass.LinearOption.lOption LinearOption.lOption$V@@14)))) (= (LinearOption.lOption.Option LinearOption.lOption$V@@14 this@@13) (ite (LinearOption.lOption.lNone_q this@@13) |#Options.Option.None| (let ((|v#0@@2| (LinearOption.lOption.value this@@13))) (|#Options.Option.Some| |v#0@@2|))))) :qid |unknown.0:0| :skolemid |1942| :pattern ( (LinearOption.lOption.Option LinearOption.lOption$V@@14 this@@13)) ))))
(assert  (=> true (forall ((LinearOption.lOption$V@@15 T@U) (this@@14 T@U) ) (!  (=> (and (and (= (type LinearOption.lOption$V@@15) TyType) (= (type this@@14) DatatypeTypeType)) (or (|LinearOption.lOption.Option#canCall| LinearOption.lOption$V@@15 (Lit this@@14)) ($Is this@@14 (Tclass.LinearOption.lOption LinearOption.lOption$V@@15)))) (= (LinearOption.lOption.Option LinearOption.lOption$V@@15 (Lit this@@14)) (ite (LinearOption.lOption.lNone_q (Lit this@@14)) |#Options.Option.None| (let ((|v#2| (Lit (LinearOption.lOption.value (Lit this@@14))))) (Lit (|#Options.Option.Some| |v#2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1943| :pattern ( (LinearOption.lOption.Option LinearOption.lOption$V@@15 (Lit this@@14))) ))))
(assert (= (type Tclass.LinearOption.__default) TyType))
(assert (= (Tag Tclass.LinearOption.__default) Tagclass.LinearOption.__default))
(assert (= (TagFamily Tclass.LinearOption.__default) tytagFamily$_default))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.LinearOption.__default)) (and (= ($Box ($Unbox refType bx@@133)) bx@@133) ($Is ($Unbox refType bx@@133) Tclass.LinearOption.__default))) :qid |unknown.0:0| :skolemid |1944| :pattern ( ($IsBox bx@@133 Tclass.LinearOption.__default)) )))
(assert (forall (($o@@18 T@U) ) (!  (=> (= (type $o@@18) refType) (= ($Is $o@@18 Tclass.LinearOption.__default)  (or (= $o@@18 null) (= (dtype $o@@18) Tclass.LinearOption.__default)))) :qid |unknown.0:0| :skolemid |1945| :pattern ( ($Is $o@@18 Tclass.LinearOption.__default)) )))
(assert (forall (($o@@19 T@U) ($h@@88 T@U) ) (!  (=> (and (= (type $o@@19) refType) (= (type $h@@88) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@19 Tclass.LinearOption.__default $h@@88)  (or (= $o@@19 null) (U_2_bool (MapType1Select (MapType0Select $h@@88 $o@@19) alloc))))) :qid |unknown.0:0| :skolemid |1946| :pattern ( ($IsAlloc $o@@19 Tclass.LinearOption.__default $h@@88)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@160 T@U) ) (! (= (type (LinearOption.__default.unwrap__value arg0@@412 arg1@@160)) BoxType) :qid |funType:LinearOption.__default.unwrap__value| :pattern ( (LinearOption.__default.unwrap__value arg0@@412 arg1@@160)) )))
(assert  (=> true (forall ((LinearOption._default.unwrap_value$V T@U) (|opt#0@@7| T@U) ) (!  (=> (and (and (= (type LinearOption._default.unwrap_value$V) TyType) (= (type |opt#0@@7|) DatatypeTypeType)) (or (|LinearOption.__default.unwrap__value#canCall| LinearOption._default.unwrap_value$V |opt#0@@7|) (and ($Is |opt#0@@7| (Tclass.LinearOption.lOption LinearOption._default.unwrap_value$V)) (LinearOption.lOption.lSome_q |opt#0@@7|)))) ($IsBox (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V |opt#0@@7|) LinearOption._default.unwrap_value$V)) :qid |unknown.0:0| :skolemid |1947| :pattern ( (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V |opt#0@@7|)) ))))
(assert (forall ((LinearOption._default.unwrap_value$V@@0 T@U) (|opt#0@@8| T@U) ) (!  (=> (and (and (= (type LinearOption._default.unwrap_value$V@@0) TyType) (= (type |opt#0@@8|) DatatypeTypeType)) ($Is |opt#0@@8| (Tclass.LinearOption.lOption LinearOption._default.unwrap_value$V@@0))) (= (|LinearOption.__default.unwrap__value#requires| LinearOption._default.unwrap_value$V@@0 |opt#0@@8|) (LinearOption.lOption.lSome_q |opt#0@@8|))) :qid |unknown.0:0| :skolemid |1948| :pattern ( (|LinearOption.__default.unwrap__value#requires| LinearOption._default.unwrap_value$V@@0 |opt#0@@8|)) )))
(assert  (=> true (forall ((LinearOption._default.unwrap_value$V@@1 T@U) (|opt#0@@9| T@U) ) (!  (=> (and (and (= (type LinearOption._default.unwrap_value$V@@1) TyType) (= (type |opt#0@@9|) DatatypeTypeType)) (or (|LinearOption.__default.unwrap__value#canCall| LinearOption._default.unwrap_value$V@@1 |opt#0@@9|) (and ($Is |opt#0@@9| (Tclass.LinearOption.lOption LinearOption._default.unwrap_value$V@@1)) (LinearOption.lOption.lSome_q |opt#0@@9|)))) (= (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V@@1 |opt#0@@9|) (let ((|v#0@@3| (LinearOption.lOption.value |opt#0@@9|))) |v#0@@3|))) :qid |unknown.0:0| :skolemid |1949| :pattern ( (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V@@1 |opt#0@@9|)) ))))
(assert  (=> true (forall ((LinearOption._default.unwrap_value$V@@2 T@U) (|opt#0@@10| T@U) ) (!  (=> (and (and (= (type LinearOption._default.unwrap_value$V@@2) TyType) (= (type |opt#0@@10|) DatatypeTypeType)) (or (|LinearOption.__default.unwrap__value#canCall| LinearOption._default.unwrap_value$V@@2 (Lit |opt#0@@10|)) (and ($Is |opt#0@@10| (Tclass.LinearOption.lOption LinearOption._default.unwrap_value$V@@2)) (U_2_bool (Lit (bool_2_U (LinearOption.lOption.lSome_q (Lit |opt#0@@10|)))))))) (= (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V@@2 (Lit |opt#0@@10|)) (let ((|v#1| (LinearOption.lOption.value (Lit |opt#0@@10|)))) |v#1|))) :qid |unknown.0:0| :weight 3 :skolemid |1950| :pattern ( (LinearOption.__default.unwrap__value LinearOption._default.unwrap_value$V@@2 (Lit |opt#0@@10|))) ))))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@134)) bx@@134) ($Is ($Unbox refType bx@@134) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |1951| :pattern ( ($IsBox bx@@134 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@20 T@U) ) (!  (=> (= (type $o@@20) refType) (= ($Is $o@@20 Tclass.SequencesLite.__default)  (or (= $o@@20 null) (= (dtype $o@@20) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |1952| :pattern ( ($Is $o@@20 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@21 T@U) ($h@@89 T@U) ) (!  (=> (and (= (type $o@@21) refType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@21 Tclass.SequencesLite.__default $h@@89)  (or (= $o@@21 null) (U_2_bool (MapType1Select (MapType0Select $h@@89 $o@@21) alloc))))) :qid |unknown.0:0| :skolemid |1953| :pattern ( ($IsAlloc $o@@21 Tclass.SequencesLite.__default $h@@89)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@161 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@413 arg1@@161)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@413 arg1@@161)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |1954| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |1955| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1956| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1957| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@414 T@U) (arg1@@162 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@414 arg1@@162)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@414 arg1@@162)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1958| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |1959| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1960| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1961| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@135)) bx@@135) ($Is ($Unbox refType bx@@135) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |1962| :pattern ( ($IsBox bx@@135 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (= ($Is $o@@22 Tclass.Mathematics.__default)  (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |1963| :pattern ( ($Is $o@@22 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@23 T@U) ($h@@90 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@23 Tclass.Mathematics.__default $h@@90)  (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@90 $o@@23) alloc))))) :qid |unknown.0:0| :skolemid |1964| :pattern ( ($IsAlloc $o@@23 Tclass.Mathematics.__default $h@@90)) )))
(assert  (=> true (forall ((|a#0@@1| Int) (|b#0@@1| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |1965| :pattern ( (Mathematics.__default.min |a#0@@1| |b#0@@1|)) ))))
(assert (forall ((|a#0@@2| Int) (|b#0@@2| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@2| |b#0@@2|) true) :qid |mathematicsidfy.6:15| :skolemid |1966| :pattern ( (|Mathematics.__default.min#requires| |a#0@@2| |b#0@@2|)) )))
(assert  (=> true (forall ((|a#0@@3| Int) (|b#0@@3| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@3| |b#0@@3|) (ite (< |a#0@@3| |b#0@@3|) |a#0@@3| |b#0@@3|))) :qid |mathematicsidfy.6:15| :skolemid |1967| :pattern ( (Mathematics.__default.min |a#0@@3| |b#0@@3|)) ))))
(assert  (=> true (forall ((|a#0@@4| Int) (|b#0@@4| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@4|) (LitInt |b#0@@4|)) (ite (< |a#0@@4| |b#0@@4|) |a#0@@4| |b#0@@4|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |1968| :pattern ( (Mathematics.__default.min (LitInt |a#0@@4|) (LitInt |b#0@@4|))) ))))
(assert  (=> true (forall ((|a#0@@5| Int) (|b#0@@5| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |1969| :pattern ( (Mathematics.__default.max |a#0@@5| |b#0@@5|)) ))))
(assert (forall ((|a#0@@6| Int) (|b#0@@6| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@6| |b#0@@6|) true) :qid |mathematicsidfy.14:15| :skolemid |1970| :pattern ( (|Mathematics.__default.max#requires| |a#0@@6| |b#0@@6|)) )))
(assert  (=> true (forall ((|a#0@@7| Int) (|b#0@@7| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@7| |b#0@@7|) (ite (< |a#0@@7| |b#0@@7|) |b#0@@7| |a#0@@7|))) :qid |mathematicsidfy.14:15| :skolemid |1971| :pattern ( (Mathematics.__default.max |a#0@@7| |b#0@@7|)) ))))
(assert  (=> true (forall ((|a#0@@8| Int) (|b#0@@8| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@8|) (LitInt |b#0@@8|)) (ite (< |a#0@@8| |b#0@@8|) |b#0@@8| |a#0@@8|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |1972| :pattern ( (Mathematics.__default.max (LitInt |a#0@@8|) (LitInt |b#0@@8|))) ))))
(assert (forall ((arg0@@415 T@U) (arg1@@163 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@415 arg1@@163)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@415 arg1@@163)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |1973| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |1974| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@416 T@U) (arg1@@164 T@U) (arg2@@86 Int) ) (! (= (type (|lambda#91| arg0@@416 arg1@@164 arg2@@86)) (MapType0Type BoxType boolType)) :qid |funType:lambda#91| :pattern ( (|lambda#91| arg0@@416 arg1@@164 arg2@@86)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#91| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#91| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1976| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@417 T@U) (arg1@@165 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@417 arg1@@165)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@417 arg1@@165)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |1977| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |1978| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@166 T@U) ) (! (= (type (|lambda#93| arg0@@418 arg1@@166)) (MapType0Type BoxType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@418 arg1@@166)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#93| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |1979| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#93| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |1980| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@136)) bx@@136) ($Is ($Unbox refType bx@@136) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1981| :pattern ( ($IsBox bx@@136 Tclass.Sequences.__default)) )))
(assert (forall (($o@@24 T@U) ) (!  (=> (= (type $o@@24) refType) (= ($Is $o@@24 Tclass.Sequences.__default)  (or (= $o@@24 null) (= (dtype $o@@24) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1982| :pattern ( ($Is $o@@24 Tclass.Sequences.__default)) )))
(assert (forall (($o@@25 T@U) ($h@@91 T@U) ) (!  (=> (and (= (type $o@@25) refType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@25 Tclass.Sequences.__default $h@@91)  (or (= $o@@25 null) (U_2_bool (MapType1Select (MapType0Select $h@@91 $o@@25) alloc))))) :qid |unknown.0:0| :skolemid |1983| :pattern ( ($IsAlloc $o@@25 Tclass.Sequences.__default $h@@91)) )))
(assert (forall ((arg0@@419 T@U) (arg1@@167 T@U) ) (! (= (type (Sequences.__default.Last arg0@@419 arg1@@167)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@419 arg1@@167)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1984| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |1985| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |1986| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1987| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@420 T@U) (arg1@@168 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@420 arg1@@168)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@420 arg1@@168)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |1988| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |1989| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |1990| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |1991| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((arg0@@421 T@U) (arg1@@169 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@421 arg1@@169)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@421 arg1@@169)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1992| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |1993| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |1994| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1995| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@422 T@U) (arg1@@170 T@U) ) (! (= (type (Sequences.__default.Set arg0@@422 arg1@@170)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@422 arg1@@170)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1996| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |1997| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#91| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |1998| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#91| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1999| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@171 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@423 arg1@@171)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@423 arg1@@171)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2000| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |2001| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#91| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |2002| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#91| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2003| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@5 T@U) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@5) LayerTypeType)) (= (type |a#0@@9|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@5) |a#0@@9|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@5 |a#0@@9|))) :qid |unknown.0:0| :skolemid |2004| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@5) |a#0@@9|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@6 T@U) (|a#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@6) LayerTypeType)) (= (type |a#0@@10|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@6 |a#0@@10|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@10|))) :qid |unknown.0:0| :skolemid |2005| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@6) |a#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@7 T@U) (|a#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@7) LayerTypeType)) (= (type |a#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@11|) ($Is |a#0@@11| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2006| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@7 |a#0@@11|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@8 T@U) (|a#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@8) LayerTypeType)) (= (type |a#0@@12|) (SeqType BoxType))) ($Is |a#0@@12| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@8 |a#0@@12|) true)) :qid |unknown.0:0| :skolemid |2007| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@8 |a#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@9 T@U) (|a#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@9) LayerTypeType)) (= (type |a#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@13|) ($Is |a#0@@13| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@9) |a#0@@13|) (forall ((|i#0@@31| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| (|Seq#Length| |a#0@@13|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@13|)))) (not (= |i#0@@31| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@13| |i#0@@31|) (|Seq#Index| |a#0@@13| |j#0@@0|))))) :qid |Sequencesidfy.66:13| :skolemid |2008| :pattern ( (|Seq#Index| |a#0@@13| |j#0@@0|) (|Seq#Index| |a#0@@13| |i#0@@31|)) )))) :qid |unknown.0:0| :skolemid |2009| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@9) |a#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@10 T@U) (|a#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@10) LayerTypeType)) (= (type |a#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@14|)) ($Is |a#0@@14| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@10) (Lit |a#0@@14|)) (forall ((|i#1| Int) (|j#1@@1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |a#0@@14|)))) (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| (|Seq#Length| (Lit |a#0@@14|))))) (not (= |i#1| |j#1@@1|))) (not (= (|Seq#Index| (Lit |a#0@@14|) |i#1|) (|Seq#Index| (Lit |a#0@@14|) |j#1@@1|))))) :qid |Sequencesidfy.66:13| :skolemid |2010| :pattern ( (|Seq#Index| |a#0@@14| |j#1@@1|) (|Seq#Index| |a#0@@14| |i#1|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |2011| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@10) (Lit |a#0@@14|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2012| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@11 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@11) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|))) :qid |unknown.0:0| :skolemid |2013| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@11)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |2014| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@12 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@12) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@32| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@32|)))) :qid |unknown.0:0| :skolemid |2015| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@12)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@13 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@0| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@0|)))) :qid |unknown.0:0| :weight 3 :skolemid |2016| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@13)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@14 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@14) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |2017| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@14)) ))))
(assert (forall ((arg0@@424 T@U) (arg1@@172 Int) ) (! (= (type (Sequences.__default.Range arg0@@424 arg1@@172)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@424 arg1@@172)) )))
(assert (forall (($ly@@11 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@11) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@11) |n#0|) (Sequences.__default.Range $ly@@11 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |2018| :pattern ( (Sequences.__default.Range ($LS $ly@@11) |n#0|)) )))
(assert (forall (($ly@@12 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (Sequences.__default.Range $ly@@12 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |2019| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@12) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@13 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@13) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@13 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@13 |n#0@@1|) |i#0@@33|))) |i#0@@33|)) :qid |Sequencesidfy.124:20| :skolemid |2020| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@13 |n#0@@1|) |i#0@@33|))) ))) ($Is (Sequences.__default.Range $ly@@13 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |2021| :pattern ( (Sequences.__default.Range $ly@@13 |n#0@@1|)) ))))
(assert (forall (($ly@@14 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@14) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@14 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |2022| :pattern ( (|Sequences.__default.Range#requires| $ly@@14 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@15 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@15) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@15) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@15 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |2023| :pattern ( (Sequences.__default.Range ($LS $ly@@15) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@16 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@16) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@16) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |2024| :pattern ( (Sequences.__default.Range ($LS $ly@@16) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@173 T@U) (arg2@@87 T@U) (arg3@@48 T@U) (arg4@@31 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@425 arg1@@173 arg2@@87 arg3@@48 arg4@@31 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@425 arg1@@173 arg2@@87 arg3@@48 arg4@@31 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@17 T@U) ($Heap@@15 T@U) (|f#0@@79| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@79|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@17) $Heap@@15 |f#0@@79| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@17 $Heap@@15 |f#0@@79| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2025| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@17) $Heap@@15 |f#0@@79| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@18 T@U) ($Heap@@16 T@U) (|f#0@@80| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@80|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@18 $Heap@@16 |f#0@@80| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@16 |f#0@@80| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2026| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@18) $Heap@@16 |f#0@@80| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@19 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@81| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@81|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@81| |run#0@@29|) (and ($Is |f#0@@81| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@26 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@26) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@26 null)) (exists ((|i#0@@34| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@34|)) ($Box |o#0|))))) (= ($Box $o@@26) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |2027| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@34|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@26) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@26) $f@@2)))) :qid |unknown.0:0| :skolemid |2028| :no-pattern (type $o@@26) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@26) :no-pattern (U_2_bool $o@@26) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@19 $h0@@2 |f#0@@81| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@19 $h1@@2 |f#0@@81| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2029| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@19 $h1@@2 |f#0@@81| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@20 T@U) ($Heap@@17 T@U) (|f#0@@82| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@82|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@17 |f#0@@82| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@82| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@17 |f#0@@82| (|Seq#Index| |run#0@@30| |i#1@@1|)))) :qid |Sequencesidfy.130:21| :skolemid |2030| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@1|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@20 $Heap@@17 |f#0@@82| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@20 $Heap@@17 |f#0@@82| |run#0@@30|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@17 |f#0@@82| (|Seq#Index| |run#0@@30| |i#2@@0|))))) :qid |Sequencesidfy.132:20| :skolemid |2031| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@20 $Heap@@17 |f#0@@82| |run#0@@30|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@20 $Heap@@17 |f#0@@82| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2032| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@20 $Heap@@17 |f#0@@82| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@21 T@U) ($Heap@@18 T@U) (|f#0@@83| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@83|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@83| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@21 $Heap@@18 |f#0@@83| |run#0@@31|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@18 |f#0@@83| (|Seq#Index| |run#0@@31| |i#3|)))) :qid |Sequencesidfy.130:21| :skolemid |2033| :pattern ( (|Seq#Index| |run#0@@31| |i#3|)) )))) :qid |unknown.0:0| :skolemid |2034| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@21 $Heap@@18 |f#0@@83| |run#0@@31|) ($IsGoodHeap $Heap@@18)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@22 T@U) ($Heap@@19 T@U) (|f#0@@84| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@84|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@19 |f#0@@84| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@84| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@19 |f#0@@84| (|Seq#Index| |run#0@@32| |i#3@@0|)))) :qid |Sequencesidfy.130:21| :skolemid |2033| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@0|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@19 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@22) $Heap@@19 |f#0@@84| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@19 |f#0@@84| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@22 $Heap@@19 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2035| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@22) $Heap@@19 |f#0@@84| |run#0@@32|) ($IsGoodHeap $Heap@@19)) ))))
(assert (forall ((arg0@@426 T@U) (arg1@@174 T@U) (arg2@@88 T@U) (arg3@@49 T@U) (arg4@@32 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@426 arg1@@174 arg2@@88 arg3@@49 arg4@@32 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@426 arg1@@174 arg2@@88 arg3@@49 arg4@@32 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@23 T@U) ($Heap@@20 T@U) (|f#0@@85| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@85|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@23) $Heap@@20 |f#0@@85| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@23 $Heap@@20 |f#0@@85| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2036| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@23) $Heap@@20 |f#0@@85| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@24 T@U) ($Heap@@21 T@U) (|f#0@@86| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@86|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@24 $Heap@@21 |f#0@@86| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@21 |f#0@@86| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2037| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@24) $Heap@@21 |f#0@@86| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@25 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@87| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@87| |run#0@@35|) (and ($Is |f#0@@87| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@27 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@27) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@27 null)) (exists ((|i#0@@35| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@35|)) ($Box |o#0@@0|))))) (= ($Box $o@@27) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |2038| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@35|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@27) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@27) $f@@3)))) :qid |unknown.0:0| :skolemid |2039| :no-pattern (type $o@@27) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@27) :no-pattern (U_2_bool $o@@27) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@25 $h0@@3 |f#0@@87| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@25 $h1@@3 |f#0@@87| |run#0@@35|))) :qid |unknown.0:0| :skolemid |2040| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@25 $h1@@3 |f#0@@87| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@26 T@U) ($Heap@@22 T@U) (|f#0@@88| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@22 |f#0@@88| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@88| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@22 |f#0@@88| (|Seq#Index| |run#0@@36| |i#1@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |2041| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@2|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@26 $Heap@@22 |f#0@@88| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@26 $Heap@@22 |f#0@@88| |run#0@@36|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@22 |f#0@@88| (|Seq#Index| |run#0@@36| |i#2@@1|))))) :qid |Sequencesidfy.143:20| :skolemid |2042| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@26 $Heap@@22 |f#0@@88| |run#0@@36|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@26 $Heap@@22 |f#0@@88| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2043| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@26 $Heap@@22 |f#0@@88| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@27 T@U) ($Heap@@23 T@U) (|f#0@@89| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@89| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@27 $Heap@@23 |f#0@@89| |run#0@@37|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@23 |f#0@@89| (|Seq#Index| |run#0@@37| |i#3@@1|)))) :qid |Sequencesidfy.141:21| :skolemid |2044| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@1|)) )))) :qid |unknown.0:0| :skolemid |2045| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@27 $Heap@@23 |f#0@@89| |run#0@@37|) ($IsGoodHeap $Heap@@23)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@28 T@U) ($Heap@@24 T@U) (|f#0@@90| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@24 |f#0@@90| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@90| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@24 |f#0@@90| (|Seq#Index| |run#0@@38| |i#3@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |2044| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@2|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@24 |f#0@@90| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@28) $Heap@@24 |f#0@@90| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@24 |f#0@@90| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |2046| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@28) $Heap@@24 |f#0@@90| |run#0@@38|) ($IsGoodHeap $Heap@@24)) ))))
(assert (forall ((arg0@@427 T@U) (arg1@@175 T@U) (arg2@@89 T@U) (arg3@@50 T@U) (arg4@@33 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@427 arg1@@175 arg2@@89 arg3@@50 arg4@@33)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@427 arg1@@175 arg2@@89 arg3@@50 arg4@@33)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@29 T@U) ($Heap@@25 T@U) (|f#0@@91| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@29) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@29) $Heap@@25 |f#0@@91| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@29 $Heap@@25 |f#0@@91| |run#0@@39|))) :qid |unknown.0:0| :skolemid |2047| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@29) $Heap@@25 |f#0@@91| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@30 T@U) ($Heap@@26 T@U) (|f#0@@92| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@30) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@30 $Heap@@26 |f#0@@92| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@26 |f#0@@92| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2048| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@30) $Heap@@26 |f#0@@92| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@31 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|f#0@@93| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@31) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@4 |f#0@@93| |run#0@@41|) (and ($Is |f#0@@93| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@28 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@28) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@28 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@4 |f#0@@93| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@28) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |2049| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@28) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@28) $f@@4)))) :qid |unknown.0:0| :skolemid |2050| :no-pattern (type $o@@28) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@28) :no-pattern (U_2_bool $o@@28) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@31 $h0@@4 |f#0@@93| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@31 $h1@@4 |f#0@@93| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2051| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@31 $h1@@4 |f#0@@93| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@32 T@U) ($Heap@@27 T@U) (|f#0@@94| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@32) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@27 |f#0@@94| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@94| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@36| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@27 |f#0@@94| (|Seq#Index| |run#0@@42| |i#0@@36|)))) :qid |Sequencesidfy.150:21| :skolemid |2052| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@36|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@3| Int) ) (!  (=> (<= (LitInt 0) |i#1@@3|) (=> (and (< |i#1@@3| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@27 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|) |i#1@@3|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@27 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|) |i#1@@3|)))))) :qid |Sequencesidfy.152:20| :skolemid |2053| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|) |i#1@@3|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2054| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@32 $Heap@@27 |f#0@@94| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@33 T@U) ($Heap@@28 T@U) (|f#0@@95| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@95| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@33 $Heap@@28 |f#0@@95| |run#0@@43|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@28 |f#0@@95| (|Seq#Index| |run#0@@43| |i#2@@2|)))) :qid |Sequencesidfy.150:21| :skolemid |2055| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@2|)) )))) :qid |unknown.0:0| :skolemid |2056| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@33 $Heap@@28 |f#0@@95| |run#0@@43|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@34 T@U) ($Heap@@29 T@U) (|f#0@@96| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@29 |f#0@@96| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@96| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@96| (|Seq#Index| |run#0@@44| |i#2@@3|)))) :qid |Sequencesidfy.150:21| :skolemid |2055| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@29 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@34) $Heap@@29 |f#0@@96| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@29 |f#0@@96| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@34 $Heap@@29 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2057| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@34) $Heap@@29 |f#0@@96| |run#0@@44|) ($IsGoodHeap $Heap@@29)) ))))
(assert (forall ((arg0@@428 T@U) (arg1@@176 T@U) (arg2@@90 T@U) (arg3@@51 T@U) (arg4@@34 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@428 arg1@@176 arg2@@90 arg3@@51 arg4@@34 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@428 arg1@@176 arg2@@90 arg3@@51 arg4@@34 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@35 T@U) (|f#0@@97| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type |f#0@@97|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@35) |f#0@@97| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@35 |f#0@@97| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@35) |f#0@@97| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@36 T@U) (|f#0@@98| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@98|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@36 |f#0@@98| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@98| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |2059| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@36) |f#0@@98| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@37 T@U) (|f#0@@99| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |f#0@@99|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@99| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@99| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@37 |f#0@@99| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2060| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@37 |f#0@@99| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@38 T@U) ($Heap@@30 T@U) (|f#0@@100| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@100|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@100| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@38 |f#0@@100| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |2061| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@38 |f#0@@100| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@30)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@39 T@U) ($Heap@@31 T@U) (|f#0@@101| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@101|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@101| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@31 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@39) |f#0@@101| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@39 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@31 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2062| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@39) |f#0@@101| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@31)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@40 T@U) ($Heap@@32 T@U) (|f#0@@102| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@102|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@102| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@32 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@40) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@40) |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@32 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2063| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@40) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@32)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@41 T@U) ($Heap@@33 T@U) (|f#0@@103| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@103|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@103| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@33 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@41) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@41) (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@33 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2064| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@41) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@33)) ))))
(assert (forall ((arg0@@429 T@U) (arg1@@177 T@U) (arg2@@91 T@U) (arg3@@52 T@U) (arg4@@35 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@429 arg1@@177 arg2@@91 arg3@@52 arg4@@35 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@429 arg1@@177 arg2@@91 arg3@@52 arg4@@35 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@42 T@U) (|f#0@@104| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type |f#0@@104|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@42) |f#0@@104| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@42 |f#0@@104| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |2065| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@42) |f#0@@104| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@43 T@U) (|f#0@@105| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@43 |f#0@@105| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@105| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |2066| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@43) |f#0@@105| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@44 T@U) (|f#0@@106| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@106| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@106| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@44 |f#0@@106| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2067| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@44 |f#0@@106| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@45 T@U) ($Heap@@34 T@U) (|f#0@@107| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@107| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@45 |f#0@@107| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |2068| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@45 |f#0@@107| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@34)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@46 T@U) ($Heap@@35 T@U) (|f#0@@108| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@108| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@46) |f#0@@108| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@35 |f#0@@108| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@46 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2069| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@46) |f#0@@108| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@35)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@47 T@U) ($Heap@@36 T@U) (|f#0@@109| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@109| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@47) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@36 |f#0@@109| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@47) |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2070| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@47) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@48 T@U) ($Heap@@37 T@U) (|f#0@@110| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@48) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@37 (Lit |f#0@@110|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@48) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2071| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@48) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@37)) ))))
(assert (forall ((arg0@@430 T@U) (arg1@@178 T@U) (arg2@@92 T@U) (arg3@@53 T@U) (arg4@@36 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@430 arg1@@178 arg2@@92 arg3@@53 arg4@@36 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@430 arg1@@178 arg2@@92 arg3@@53 arg4@@36 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@49 T@U) (|f#0@@111| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@49) |f#0@@111| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@49 |f#0@@111| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |2072| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@49) |f#0@@111| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@50 T@U) (|f#0@@112| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@50 |f#0@@112| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@112| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |2073| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@50) |f#0@@112| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@51 T@U) (|f#0@@113| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@113| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@113| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@51 |f#0@@113| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2074| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@51 |f#0@@113| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@52 T@U) ($Heap@@38 T@U) (|f#0@@114| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@114| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@52 |f#0@@114| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |2075| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@52 |f#0@@114| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@38)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@53 T@U) ($Heap@@39 T@U) (|f#0@@115| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |f#0@@115| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@53) |f#0@@115| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@39 |f#0@@115| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@53 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |2076| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@53) |f#0@@115| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@39)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@54 T@U) ($Heap@@40 T@U) (|f#0@@116| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@40) ($Is |f#0@@116| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@54) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@40 |f#0@@116| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@54) |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2077| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@54) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@40)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@55 T@U) ($Heap@@41 T@U) (|f#0@@117| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@41) ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@55) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@41 (Lit |f#0@@117|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@55) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2078| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@55) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@41)) ))))
(assert (forall ((arg0@@431 T@U) (arg1@@179 T@U) (arg2@@93 T@U) (arg3@@54 Int) ) (! (= (type (Sequences.__default.remove arg0@@431 arg1@@179 arg2@@93 arg3@@54)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@431 arg1@@179 arg2@@93 arg3@@54)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@56 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@56) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@56 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |2079| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@56) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@57 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@57 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2080| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@57) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@58 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@37| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|) |i#0@@37|) (|Seq#Index| |s#0@@6| |i#0@@37|))) :qid |Sequencesidfy.180:18| :skolemid |2081| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@37|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|) |i#0@@37|)) ))) (forall ((|i#1@@4| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@4|) (< |i#1@@4| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|) |i#1@@4|) (|Seq#Index| |s#0@@6| (+ |i#1@@4| 1)))) :qid |Sequencesidfy.181:18| :skolemid |2082| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|) |i#1@@4|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2083| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@58 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@59 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@59 |s#0@@7| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))))) :qid |unknown.0:0| :skolemid |2084| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@59 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@60 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@60) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2085| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@60) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@61 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@61) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2086| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@61) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@432 T@U) (arg1@@180 T@U) (arg2@@94 T@U) (arg3@@55 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@432 arg1@@180 arg2@@94 arg3@@55)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@432 arg1@@180 arg2@@94 arg3@@55)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@62 T@U) (|s#0@@10| T@U) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |v#0@@4|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@62) |s#0@@10| |v#0@@4|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@62 |s#0@@10| |v#0@@4|))) :qid |unknown.0:0| :skolemid |2087| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@62) |s#0@@10| |v#0@@4|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@63 T@U) (|s#0@@11| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@63 |s#0@@11| |v#0@@5|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@11| |v#0@@5|))) :qid |unknown.0:0| :skolemid |2088| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@63) |s#0@@11| |v#0@@5|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@64 T@U) (|s#0@@12| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@12| |v#0@@6|) (and ($Is |s#0@@12| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@6| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@12|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@64 |s#0@@12| |v#0@@6|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@64 |s#0@@12| |v#0@@6|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@12|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@6|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@64 |s#0@@12| |v#0@@6|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |2089| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@64 |s#0@@12| |v#0@@6|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@65 T@U) ($Heap@@42 T@U) (|s#0@@13| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@65) LayerTypeType)) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (and (and ($IsGoodHeap $Heap@@42) ($Is |s#0@@13| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@7| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@65 |s#0@@13| |v#0@@7|) true)) :qid |unknown.0:0| :skolemid |2090| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@65 |s#0@@13| |v#0@@7|) ($IsGoodHeap $Heap@@42)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@54 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@54) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) v@@54))) :qid |Sequencesidfy.191:5| :skolemid |2091| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@66 T@U) ($Heap@@43 T@U) (|s#0@@14| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@66) LayerTypeType)) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |v#0@@8|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@8|) (and (and ($IsGoodHeap $Heap@@43) ($Is |s#0@@14| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@8| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@14| |v#0@@8|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@8|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@66) |s#0@@14| |v#0@@8|) (ite  (not (|Seq#Contains| |s#0@@14| |v#0@@8|)) |s#0@@14| (let ((|i#0@@38| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@8|))) (|Seq#Append| (|Seq#Take| |s#0@@14| |i#0@@38|) (|Seq#Drop| |s#0@@14| (+ |i#0@@38| 1))))))))) :qid |unknown.0:0| :skolemid |2092| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@66) |s#0@@14| |v#0@@8|) ($IsGoodHeap $Heap@@43)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@67 T@U) ($Heap@@44 T@U) (|s#0@@15| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@67) LayerTypeType)) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |v#0@@9|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@9|) (and (and ($IsGoodHeap $Heap@@44) ($Is |s#0@@15| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@9| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@15| |v#0@@9|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@9|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@67) (Lit |s#0@@15|) |v#0@@9|) (ite  (not (|Seq#Contains| |s#0@@15| |v#0@@9|)) |s#0@@15| (let ((|i#1@@5| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@9|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) |i#1@@5|) (|Seq#Drop| (Lit |s#0@@15|) (+ |i#1@@5| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2093| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@67) (Lit |s#0@@15|) |v#0@@9|) ($IsGoodHeap $Heap@@44)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@68 T@U) ($Heap@@45 T@U) (|s#0@@16| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@68) LayerTypeType)) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@10|)) (and (and ($IsGoodHeap $Heap@@45) ($Is |s#0@@16| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@10| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@16| |v#0@@10|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@10|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@68) (Lit |s#0@@16|) (Lit |v#0@@10|)) (ite  (not (|Seq#Contains| |s#0@@16| |v#0@@10|)) |s#0@@16| (let ((|i#2@@4| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@10|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) |i#2@@4|) (|Seq#Drop| (Lit |s#0@@16|) (+ |i#2@@4| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2094| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@68) (Lit |s#0@@16|) (Lit |v#0@@10|)) ($IsGoodHeap $Heap@@45)) ))))
(assert (forall ((arg0@@433 T@U) (arg1@@181 T@U) (arg2@@95 T@U) (arg3@@56 T@U) (arg4@@37 Int) ) (! (= (type (Sequences.__default.insert arg0@@433 arg1@@181 arg2@@95 arg3@@56 arg4@@37)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@433 arg1@@181 arg2@@95 arg3@@56 arg4@@37)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@69 T@U) (|s#0@@17| T@U) (|a#0@@15| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@69) |s#0@@17| |a#0@@15| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@69 |s#0@@17| |a#0@@15| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2095| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@69) |s#0@@17| |a#0@@15| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@70 T@U) (|s#0@@18| T@U) (|a#0@@16| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@70 |s#0@@18| |a#0@@16| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@18| |a#0@@16| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2096| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@70) |s#0@@18| |a#0@@16| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@71 T@U) (|s#0@@19| T@U) (|a#0@@17| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@19| |a#0@@17| |pos#0@@7|) (and (and ($Is |s#0@@19| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@17| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|) |i#0@@39|) (|Seq#Index| |s#0@@19| |i#0@@39|)))) :qid |Sequencesidfy.198:18| :skolemid |2097| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@39|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|) |i#0@@39|)) ))) (forall ((|i#1@@6| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@6|) (< |i#1@@6| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|) (+ |i#1@@6| 1)) (|Seq#Index| |s#0@@19| |i#1@@6|)))) :qid |Sequencesidfy.199:18| :skolemid |2098| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@6|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|) |pos#0@@7|) |a#0@@17|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2099| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@71 |s#0@@19| |a#0@@17| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@72 T@U) (|s#0@@20| T@U) (|a#0@@18| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (and ($Is |s#0@@20| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@18| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@72 |s#0@@20| |a#0@@18| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@20|))))) :qid |unknown.0:0| :skolemid |2100| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@72 |s#0@@20| |a#0@@18| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@73 T@U) (|s#0@@21| T@U) (|a#0@@19| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@21| |a#0@@19| |pos#0@@9|) (and (and ($Is |s#0@@21| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@19| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@73) |s#0@@21| |a#0@@19| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|)) (|Seq#Drop| |s#0@@21| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2101| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@73) |s#0@@21| |a#0@@19| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@74 T@U) (|s#0@@22| T@U) (|a#0@@20| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@22|) |a#0@@20| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@22| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@20| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@74) (Lit |s#0@@22|) |a#0@@20| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@20|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2102| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@74) (Lit |s#0@@22|) |a#0@@20| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@75 T@U) (|s#0@@23| T@U) (|a#0@@21| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@23|) (Lit |a#0@@21|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@23| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@21| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@75) (Lit |s#0@@23|) (Lit |a#0@@21|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@21|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2103| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@75) (Lit |s#0@@23|) (Lit |a#0@@21|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@434 T@U) (arg1@@182 T@U) (arg2@@96 T@U) (arg3@@57 T@U) (arg4@@38 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@434 arg1@@182 arg2@@96 arg3@@57 arg4@@38 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@434 arg1@@182 arg2@@96 arg3@@57 arg4@@38 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@76 T@U) (|s#0@@24| T@U) (|a#0@@22| T@U) (|b#0@@9| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (type |b#0@@9|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@76) |s#0@@24| |a#0@@22| |b#0@@9| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@76 |s#0@@24| |a#0@@22| |b#0@@9| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2104| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@76) |s#0@@24| |a#0@@22| |b#0@@9| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@77 T@U) (|s#0@@25| T@U) (|a#0@@23| T@U) (|b#0@@10| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (= (type |b#0@@10|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@77 |s#0@@25| |a#0@@23| |b#0@@10| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@25| |a#0@@23| |b#0@@10| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2105| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@77) |s#0@@25| |a#0@@23| |b#0@@10| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@78 T@U) (|s#0@@26| T@U) (|a#0@@24| T@U) (|b#0@@11| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (= (type |b#0@@11|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) (and (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@24| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@11| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@26|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) |i#0@@40|) (|Seq#Index| |s#0@@26| |i#0@@40|)))) :qid |Sequencesidfy.223:18| :skolemid |2106| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@40|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) |i#0@@40|)) ))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@7|) (< |i#1@@7| (|Seq#Length| |s#0@@26|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) (+ |i#1@@7| 1)) (|Seq#Index| |s#0@@26| |i#1@@7|)))) :qid |Sequencesidfy.224:18| :skolemid |2107| :pattern ( (|Seq#Index| |s#0@@26| |i#1@@7|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) |pos#0@@14|) |a#0@@24|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@11|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2108| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@78 |s#0@@26| |a#0@@24| |b#0@@11| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@79 T@U) (|s#0@@27| T@U) (|a#0@@25| T@U) (|b#0@@12| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (= (type |b#0@@12|) BoxType)) (and (and ($Is |s#0@@27| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@25| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@12| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@79 |s#0@@27| |a#0@@25| |b#0@@12| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@27|))))) :qid |unknown.0:0| :skolemid |2109| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@79 |s#0@@27| |a#0@@25| |b#0@@12| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@80 T@U) (|s#0@@28| T@U) (|a#0@@26| T@U) (|b#0@@13| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (type |b#0@@13|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@28| |a#0@@26| |b#0@@13| |pos#0@@16|) (and (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@26| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@13| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@28|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@80) |s#0@@28| |a#0@@26| |b#0@@13| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|) |b#0@@13|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2110| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@80) |s#0@@28| |a#0@@26| |b#0@@13| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@81 T@U) (|s#0@@29| T@U) (|a#0@@27| T@U) (|b#0@@14| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@29|) |a#0@@27| |b#0@@14| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@27| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@29|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@81) (Lit |s#0@@29|) |a#0@@27| |b#0@@14| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@27|) |b#0@@14|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2111| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@81) (Lit |s#0@@29|) |a#0@@27| |b#0@@14| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@82 T@U) (|s#0@@30| T@U) (|a#0@@28| T@U) (|b#0@@15| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (type |b#0@@15|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@30|) (Lit |a#0@@28|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@28| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@30|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@82) (Lit |s#0@@30|) (Lit |a#0@@28|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@28|)) (Lit |b#0@@15|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2112| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@82) (Lit |s#0@@30|) (Lit |a#0@@28|) (Lit |b#0@@15|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@435 T@U) (arg1@@183 T@U) (arg2@@97 T@U) (arg3@@58 T@U) (arg4@@39 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@435 arg1@@183 arg2@@97 arg3@@58 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@435 arg1@@183 arg2@@97 arg3@@58 arg4@@39)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@83 T@U) (|s#0@@31| T@U) (|a#0@@29| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@83) |s#0@@31| |a#0@@29| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@83 |s#0@@31| |a#0@@29| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2113| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@83) |s#0@@31| |a#0@@29| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@84 T@U) (|s#0@@32| T@U) (|a#0@@30| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@84 |s#0@@32| |a#0@@30| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@32| |a#0@@30| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2114| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@84) |s#0@@32| |a#0@@30| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@85 T@U) (|s#0@@33| T@U) (|a#0@@31| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@33| |a#0@@31| |pos#0@@21|) (and (and ($Is |s#0@@33| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@31| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@33|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|)) (- (|Seq#Length| |s#0@@33|) 1)) (forall ((|i#0@@41| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) |i#0@@41|) (|Seq#Index| |s#0@@33| |i#0@@41|)))) :qid |Sequencesidfy.242:18| :skolemid |2115| :pattern ( (|Seq#Index| |s#0@@33| |i#0@@41|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) |i#0@@41|)) ))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@8|) (< |i#1@@8| (- (|Seq#Length| |s#0@@33|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) |i#1@@8|) (|Seq#Index| |s#0@@33| (+ |i#1@@8| 1))))) :qid |Sequencesidfy.243:18| :skolemid |2116| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) |i#1@@8|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) |pos#0@@21|) |a#0@@31|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2117| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@85 |s#0@@33| |a#0@@31| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@86 T@U) (|s#0@@34| T@U) (|a#0@@32| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (and ($Is |s#0@@34| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@32| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@86 |s#0@@34| |a#0@@32| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@34|) 1))))) :qid |unknown.0:0| :skolemid |2118| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@86 |s#0@@34| |a#0@@32| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@87 T@U) (|s#0@@35| T@U) (|a#0@@33| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@35| |a#0@@33| |pos#0@@23|) (and (and ($Is |s#0@@35| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@33| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@35|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@87) |s#0@@35| |a#0@@33| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@33|)) (|Seq#Drop| |s#0@@35| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2119| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@87) |s#0@@35| |a#0@@33| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@88 T@U) (|s#0@@36| T@U) (|a#0@@34| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@36|) |a#0@@34| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@36| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@34| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@36|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@88) (Lit |s#0@@36|) |a#0@@34| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@34|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2120| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@88) (Lit |s#0@@36|) |a#0@@34| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@89 T@U) (|s#0@@37| T@U) (|a#0@@35| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@37|) (Lit |a#0@@35|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@37| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@35| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@37|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@89) (Lit |s#0@@37|) (Lit |a#0@@35|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@35|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2121| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@89) (Lit |s#0@@37|) (Lit |a#0@@35|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@436 T@U) (arg1@@184 T@U) (arg2@@98 T@U) (arg3@@59 T@U) ) (! (= (type (Sequences.__default.concat arg0@@436 arg1@@184 arg2@@98 arg3@@59)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@436 arg1@@184 arg2@@98 arg3@@59)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@90 T@U) (|a#0@@36| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@16|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@90) |a#0@@36| |b#0@@16|) (Sequences.__default.concat Sequences._default.concat$A $ly@@90 |a#0@@36| |b#0@@16|))) :qid |unknown.0:0| :skolemid |2122| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@90) |a#0@@36| |b#0@@16|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@91 T@U) (|a#0@@37| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@17|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@91 |a#0@@37| |b#0@@17|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@37| |b#0@@17|))) :qid |unknown.0:0| :skolemid |2123| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@91) |a#0@@37| |b#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@92 T@U) (|a#0@@38| T@U) (|b#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@38| |b#0@@18|) (and ($Is |a#0@@38| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@18| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|)) (+ (|Seq#Length| |a#0@@38|) (|Seq#Length| |b#0@@18|))) (forall ((|i#0@@42| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |a#0@@38|))) (= (|Seq#Index| |a#0@@38| |i#0@@42|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|) |i#0@@42|)))) :qid |Sequencesidfy.251:18| :skolemid |2124| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|) |i#0@@42|)) :pattern ( (|Seq#Index| |a#0@@38| |i#0@@42|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |b#0@@18|))) (= (|Seq#Index| |b#0@@18| |i#1@@9|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|) (+ (|Seq#Length| |a#0@@38|) |i#1@@9|))))) :qid |Sequencesidfy.252:18| :skolemid |2125| :pattern ( (|Seq#Index| |b#0@@18| |i#1@@9|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2126| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@92 |a#0@@38| |b#0@@18|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@93 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (and ($Is |a#0@@39| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@19| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@93 |a#0@@39| |b#0@@19|) true)) :qid |unknown.0:0| :skolemid |2127| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@93 |a#0@@39| |b#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@94 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@40| |b#0@@20|) (and ($Is |a#0@@40| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@20| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@94) |a#0@@40| |b#0@@20|) (|Seq#Append| |a#0@@40| |b#0@@20|))) :qid |unknown.0:0| :skolemid |2128| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@94) |a#0@@40| |b#0@@20|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@95 T@U) (|a#0@@41| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@41|) (Lit |b#0@@21|)) (and ($Is |a#0@@41| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@95) (Lit |a#0@@41|) (Lit |b#0@@21|)) (|Seq#Append| |a#0@@41| |b#0@@21|))) :qid |unknown.0:0| :weight 3 :skolemid |2129| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@95) (Lit |a#0@@41|) (Lit |b#0@@21|))) ))))
(assert (forall ((arg0@@437 T@U) (arg1@@185 T@U) (arg2@@99 T@U) (arg3@@60 T@U) (arg4@@40 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@437 arg1@@185 arg2@@99 arg3@@60 arg4@@40)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@437 arg1@@185 arg2@@99 arg3@@60 arg4@@40)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@96 T@U) (|a#0@@42| T@U) (|b#0@@22| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (type |b#0@@22|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@96) |a#0@@42| |b#0@@22| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@96 |a#0@@42| |b#0@@22| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2130| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@96) |a#0@@42| |b#0@@22| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@97 T@U) (|a#0@@43| T@U) (|b#0@@23| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (= (type |b#0@@23|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@97 |a#0@@43| |b#0@@23| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@43| |b#0@@23| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2131| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@97) |a#0@@43| |b#0@@23| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@98 T@U) (|a#0@@44| T@U) (|b#0@@24| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@24|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@44| |b#0@@24| |c#0@@5|) (and (and ($Is |a#0@@44| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@24| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@44|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@43| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |a#0@@44|))) (= (|Seq#Index| |a#0@@44| |i#0@@43|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|) |i#0@@43|)))) :qid |Sequencesidfy.259:18| :skolemid |2132| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|) |i#0@@43|)) :pattern ( (|Seq#Index| |a#0@@44| |i#0@@43|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|) (|Seq#Length| |a#0@@44|)) |b#0@@24|)) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@10|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@44|) 1) |i#1@@10|))))) :qid |Sequencesidfy.261:18| :skolemid |2133| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@10|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2134| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@98 |a#0@@44| |b#0@@24| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@99 T@U) (|a#0@@45| T@U) (|b#0@@25| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@45| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@25| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@99 |a#0@@45| |b#0@@25| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |2135| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@99 |a#0@@45| |b#0@@25| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@100 T@U) (|a#0@@46| T@U) (|b#0@@26| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@46| |b#0@@26| |c#0@@7|) (and (and ($Is |a#0@@46| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@26| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@100) |a#0@@46| |b#0@@26| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@46| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@26|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2136| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@100) |a#0@@46| |b#0@@26| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@101 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@47|) |b#0@@27| (Lit |c#0@@8|)) (and (and ($Is |a#0@@47| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@101) (Lit |a#0@@47|) |b#0@@27| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@47| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@27|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2137| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@101) (Lit |a#0@@47|) |b#0@@27| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@102 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@48|) (Lit |b#0@@28|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@48| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@102) (Lit |a#0@@48|) (Lit |b#0@@28|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@48| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@28|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2138| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@102) (Lit |a#0@@48|) (Lit |b#0@@28|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@438 T@U) (arg1@@186 T@U) (arg2@@100 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@438 arg1@@186 arg2@@100)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@438 arg1@@186 arg2@@100)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@103 T@U) (|a#0@@49| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@103) |a#0@@49|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@103 |a#0@@49|))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@103) |a#0@@49|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@104 T@U) (|a#0@@50| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@104 |a#0@@50|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@50|))) :qid |unknown.0:0| :skolemid |2140| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@104) |a#0@@50|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@105 T@U) (|a#0@@51| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@51|) ($Is |a#0@@51| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@105 |a#0@@51|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2141| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@105 |a#0@@51|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@106 T@U) (|a#0@@52| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) ($Is |a#0@@52| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@106 |a#0@@52|) true)) :qid |unknown.0:0| :skolemid |2142| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@106 |a#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@107 T@U) (|a#0@@53| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@53|) ($Is |a#0@@53| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@53|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@107) |a#0@@53|) (ite (= (|Seq#Length| |a#0@@53|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@107 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))))))) :qid |unknown.0:0| :skolemid |2143| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@107) |a#0@@53|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@108 T@U) (|a#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@54|)) ($Is |a#0@@54| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@54|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@108) (Lit |a#0@@54|)) (ite (= (|Seq#Length| (Lit |a#0@@54|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@108) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2144| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@108) (Lit |a#0@@54|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@109 T@U) (|a#0@@55| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@109) |a#0@@55| |b#0@@29|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@109 |a#0@@55| |b#0@@29|))) :qid |unknown.0:0| :skolemid |2145| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@109) |a#0@@55| |b#0@@29|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@110 T@U) (|a#0@@56| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@110 |a#0@@56| |b#0@@30|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@56| |b#0@@30|))) :qid |unknown.0:0| :skolemid |2146| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@110) |a#0@@56| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@111 T@U) (|a#0@@57| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@57| |b#0@@31|) (and ($Is |a#0@@57| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@31| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@111 |a#0@@57| |b#0@@31|)) (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|))) :qid |unknown.0:0| :skolemid |2147| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@111 |a#0@@57| |b#0@@31|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@112 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and ($Is |a#0@@58| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@32| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@112 |a#0@@58| |b#0@@32|) true)) :qid |unknown.0:0| :skolemid |2148| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@112 |a#0@@58| |b#0@@32|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@113 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@59| |b#0@@33|) (and ($Is |a#0@@59| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@33| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@113) |a#0@@59| |b#0@@33|)  (and (<= (|Seq#Length| |a#0@@59|) (|Seq#Length| |b#0@@33|)) (|Seq#Equal| |a#0@@59| (|Seq#Take| |b#0@@33| (|Seq#Length| |a#0@@59|)))))) :qid |unknown.0:0| :skolemid |2149| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@113) |a#0@@59| |b#0@@33|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@114 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@60|) (Lit |b#0@@34|)) (and ($Is |a#0@@60| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@114) (Lit |a#0@@60|) (Lit |b#0@@34|))  (and (<= (|Seq#Length| (Lit |a#0@@60|)) (|Seq#Length| (Lit |b#0@@34|))) (|Seq#Equal| |a#0@@60| (|Seq#Take| (Lit |b#0@@34|) (|Seq#Length| (Lit |a#0@@60|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2150| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@114) (Lit |a#0@@60|) (Lit |b#0@@34|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@115 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@115) |a#0@@61| |b#0@@35|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@115 |a#0@@61| |b#0@@35|))) :qid |unknown.0:0| :skolemid |2151| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@115) |a#0@@61| |b#0@@35|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@116 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@116 |a#0@@62| |b#0@@36|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@62| |b#0@@36|))) :qid |unknown.0:0| :skolemid |2152| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@116) |a#0@@62| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@117 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@63| |b#0@@37|) (and ($Is |a#0@@63| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@37| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2153| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@117 |a#0@@63| |b#0@@37|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@118 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and ($Is |a#0@@64| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@38| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@118 |a#0@@64| |b#0@@38|) true)) :qid |unknown.0:0| :skolemid |2154| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@118 |a#0@@64| |b#0@@38|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@119 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@65| |b#0@@39|) (and ($Is |a#0@@65| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@39| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@119) |a#0@@65| |b#0@@39|)  (and (<= (|Seq#Length| |a#0@@65|) (|Seq#Length| |b#0@@39|)) (|Seq#Equal| |a#0@@65| (|Seq#Drop| |b#0@@39| (- (|Seq#Length| |b#0@@39|) (|Seq#Length| |a#0@@65|))))))) :qid |unknown.0:0| :skolemid |2155| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@119) |a#0@@65| |b#0@@39|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@120 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@66|) (Lit |b#0@@40|)) (and ($Is |a#0@@66| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@120) (Lit |a#0@@66|) (Lit |b#0@@40|))  (and (<= (|Seq#Length| (Lit |a#0@@66|)) (|Seq#Length| (Lit |b#0@@40|))) (|Seq#Equal| |a#0@@66| (|Seq#Drop| (Lit |b#0@@40|) (- (|Seq#Length| (Lit |b#0@@40|)) (|Seq#Length| (Lit |a#0@@66|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2156| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@120) (Lit |a#0@@66|) (Lit |b#0@@40|))) ))))
(assert (forall ((arg0@@439 T@U) (arg1@@187 T@U) (arg2@@101 T@U) (arg3@@61 T@U) (arg4@@41 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@439 arg1@@187 arg2@@101 arg3@@61 arg4@@41)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@439 arg1@@187 arg2@@101 arg3@@61 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@121 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@121) |run#0@@66| |needle#0| |i#0@@44|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@121 |run#0@@66| |needle#0| |i#0@@44|))) :qid |unknown.0:0| :skolemid |2157| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@121) |run#0@@66| |needle#0| |i#0@@44|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@122 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@122 |run#0@@67| |needle#0@@0| |i#0@@45|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@45|))) :qid |unknown.0:0| :skolemid |2158| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@122) |run#0@@67| |needle#0@@0| |i#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@123 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@46|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@46|) (<= |i#0@@46| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@46| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@1|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |2159| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2160| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@123 |run#0@@68| |needle#0@@1| |i#0@@46|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@124 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@124 |run#0@@69| |needle#0@@2| |i#0@@47|)  (and (<= (LitInt 0) |i#0@@47|) (<= |i#0@@47| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |2161| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@124 |run#0@@69| |needle#0@@2| |i#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@125 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@48|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@48|) (<= |i#0@@48| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@48| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@48|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@48| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@125) |run#0@@70| |needle#0@@3| |i#0@@48|) (ite (= |i#0@@48| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@48|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@48|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@125 |run#0@@70| |needle#0@@3| (+ |i#0@@48| 1))))))) :qid |unknown.0:0| :skolemid |2162| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@125) |run#0@@70| |needle#0@@3| |i#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@126 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@49| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@49|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@49|)) (<= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@49|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@49| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@126) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@49|)) (ite (= (LitInt |i#0@@49|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@49|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@49|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@126) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@49| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2163| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@126) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@49|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@127 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@50| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@50|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@50|)) (<= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@50|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@50| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@127) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@50|)) (ite (= (LitInt |i#0@@50|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@50|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@50|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@127) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@50| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2164| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@127) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@50|))) ))))
(assert (forall ((arg0@@440 T@U) (arg1@@188 T@U) (arg2@@102 T@U) (arg3@@62 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@440 arg1@@188 arg2@@102 arg3@@62)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@440 arg1@@188 arg2@@102 arg3@@62)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@128 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@128) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@128 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2165| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@128) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@129 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@129 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2166| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@129) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@130 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@51| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@51|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |2167| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@51|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2168| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@130 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@131 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@131 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |2169| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@131 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@132 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@132) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2170| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@132) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@133 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@133) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2171| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@133) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@134 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@134) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2172| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@134) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@441 T@U) (arg1@@189 T@U) (arg2@@103 Int) (arg3@@63 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@441 arg1@@189 arg2@@103 arg3@@63)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@441 arg1@@189 arg2@@103 arg3@@63)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@135 T@U) (|length#0| Int) (|v#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |v#0@@11|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@135) |length#0| |v#0@@11|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@135 |length#0| |v#0@@11|))) :qid |unknown.0:0| :skolemid |2173| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@135) |length#0| |v#0@@11|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@136 T@U) (|length#0@@0| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@136 |length#0@@0| |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@12|))) :qid |unknown.0:0| :skolemid |2174| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@136) |length#0@@0| |v#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@137 T@U) (|length#0@@1| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@13|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@13| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|)) |length#0@@1|) (forall ((|i#0@@52| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|) |i#0@@52|) |v#0@@13|)) :qid |Sequencesidfy.358:18| :skolemid |2175| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|) |i#0@@52|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2176| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@137 |length#0@@1| |v#0@@13|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@138 T@U) (|length#0@@2| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@138 |length#0@@2| |v#0@@14|) true)) :qid |unknown.0:0| :skolemid |2177| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@138 |length#0@@2| |v#0@@14|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@139 T@U) (|length#0@@3| Int) (|v#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |v#0@@15|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@15|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@15| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@15|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@139) |length#0@@3| |v#0@@15|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@15|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@139 (- |length#0@@3| 1) |v#0@@15|)))))) :qid |unknown.0:0| :skolemid |2178| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@139) |length#0@@3| |v#0@@15|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@140 T@U) (|length#0@@4| Int) (|v#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |v#0@@16|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@16|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@16| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@16|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@140) (LitInt |length#0@@4|) |v#0@@16|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@16|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@140) (LitInt (- |length#0@@4| 1)) |v#0@@16|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2179| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@140) (LitInt |length#0@@4|) |v#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@141 T@U) (|length#0@@5| Int) (|v#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |v#0@@17|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@17|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@17| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@17|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@141) (LitInt |length#0@@5|) (Lit |v#0@@17|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@17|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@141) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@17|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2180| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@141) (LitInt |length#0@@5|) (Lit |v#0@@17|))) ))))
(assert (forall ((arg0@@442 T@U) (arg1@@190 T@U) (arg2@@104 T@U) (arg3@@64 Int) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@442 arg1@@190 arg2@@104 arg3@@64 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@442 arg1@@190 arg2@@104 arg3@@64 arg4@@42)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@142 T@U) (|s#0@@38| T@U) (|i#0@@53| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@142) |s#0@@38| |i#0@@53| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@142 |s#0@@38| |i#0@@53| |t#0|))) :qid |unknown.0:0| :skolemid |2181| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@142) |s#0@@38| |i#0@@53| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@143 T@U) (|s#0@@39| T@U) (|i#0@@54| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@143 |s#0@@39| |i#0@@54| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@39| |i#0@@54| |t#0@@0|))) :qid |unknown.0:0| :skolemid |2182| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@143) |s#0@@39| |i#0@@54| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@144 T@U) (|s#0@@40| T@U) (|i#0@@55| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@40| |i#0@@55| |t#0@@1|) (and (and (and ($Is |s#0@@40| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@55| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| (|Seq#Length| |s#0@@40|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@144 |s#0@@40| |i#0@@55| |t#0@@1|) (|Seq#Update| |s#0@@40| |i#0@@55| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@144 |s#0@@40| |i#0@@55| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2183| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@144 |s#0@@40| |i#0@@55| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@145 T@U) (|s#0@@41| T@U) (|i#0@@56| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@41| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@145 |s#0@@41| |i#0@@56| |t#0@@2|)  (and (< (+ |i#0@@56| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| (|Seq#Length| |s#0@@41|)))))) :qid |unknown.0:0| :skolemid |2184| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@145 |s#0@@41| |i#0@@56| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@146 T@U) (|s#0@@42| T@U) (|i#0@@57| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@42| |i#0@@57| |t#0@@3|) (and (and (and ($Is |s#0@@42| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@57| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| (|Seq#Length| |s#0@@42|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@146) |s#0@@42| |i#0@@57| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@42| |i#0@@57|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@42| (+ |i#0@@57| 1))))) :qid |unknown.0:0| :skolemid |2185| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@146) |s#0@@42| |i#0@@57| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@147 T@U) (|s#0@@43| T@U) (|i#0@@58| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@43|) (LitInt |i#0@@58|) |t#0@@4|) (and (and (and ($Is |s#0@@43| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@58| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@58|)) (< |i#0@@58| (|Seq#Length| (Lit |s#0@@43|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@147) (Lit |s#0@@43|) (LitInt |i#0@@58|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@43|) (LitInt |i#0@@58|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@43|) (LitInt (+ |i#0@@58| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2186| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@147) (Lit |s#0@@43|) (LitInt |i#0@@58|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@148 T@U) (|s#0@@44| T@U) (|i#0@@59| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@44|) (LitInt |i#0@@59|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@44| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@59| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@59|)) (< |i#0@@59| (|Seq#Length| (Lit |s#0@@44|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@148) (Lit |s#0@@44|) (LitInt |i#0@@59|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@44|) (LitInt |i#0@@59|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@44|) (LitInt (+ |i#0@@59| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2187| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@148) (Lit |s#0@@44|) (LitInt |i#0@@59|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@443 T@U) (arg1@@191 T@U) (arg2@@105 T@U) (arg3@@65 T@U) (arg4@@43 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@443 arg1@@191 arg2@@105 arg3@@65 arg4@@43)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@443 arg1@@191 arg2@@105 arg3@@65 arg4@@43)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@149 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@149) |a#0@@67| |b#0@@41|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@149 |a#0@@67| |b#0@@41|))) :qid |unknown.0:0| :skolemid |2188| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@149) |a#0@@67| |b#0@@41|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@150 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@150 |a#0@@68| |b#0@@42|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@68| |b#0@@42|))) :qid |unknown.0:0| :skolemid |2189| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@150) |a#0@@68| |b#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@151 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@69| |b#0@@43|) (and (and ($Is |a#0@@69| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@43| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@43|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|)) (|Seq#Length| |a#0@@69|)) (forall ((|i#0@@60| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|) |i#0@@60|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@69| |i#0@@60|) (|Seq#Index| |b#0@@43| |i#0@@60|))))) :qid |Sequencesidfy.379:20| :skolemid |2190| :pattern ( (|Seq#Index| |b#0@@43| |i#0@@60|)) :pattern ( (|Seq#Index| |a#0@@69| |i#0@@60|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|) |i#0@@60|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2191| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@151 |a#0@@69| |b#0@@43|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@152 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and ($Is |a#0@@70| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@44| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@152 |a#0@@70| |b#0@@44|) (= (|Seq#Length| |a#0@@70|) (|Seq#Length| |b#0@@44|)))) :qid |unknown.0:0| :skolemid |2192| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@152 |a#0@@70| |b#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@153 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@71| |b#0@@45|) (and (and ($Is |a#0@@71| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@45| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@71|) (|Seq#Length| |b#0@@45|))))) (and (=> (not (= (|Seq#Length| |a#0@@71|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@71|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@71|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@153) |a#0@@71| |b#0@@45|) (ite (= (|Seq#Length| |a#0@@71|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@153 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@45|))))))))) :qid |unknown.0:0| :skolemid |2193| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@153) |a#0@@71| |b#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@154 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@72|) (Lit |b#0@@46|)) (and (and ($Is |a#0@@72| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@72|)) (|Seq#Length| (Lit |b#0@@46|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@72|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@72|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@154) (Lit |a#0@@72|) (Lit |b#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@46|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2194| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@154) (Lit |a#0@@72|) (Lit |b#0@@46|))) ))))
(assert (forall ((arg0@@444 T@U) (arg1@@192 T@U) (arg2@@106 T@U) (arg3@@66 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@444 arg1@@192 arg2@@106 arg3@@66)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@444 arg1@@192 arg2@@106 arg3@@66)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@155 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@155) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@155) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@155 |z#0|))) :qid |unknown.0:0| :skolemid |2195| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@155) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@156 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@156) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@156 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2196| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@156) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@157 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@157) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@61| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|))) |i#0@@61|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|))) |i#0@@61|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@61|))))) :qid |Sequencesidfy.387:20| :skolemid |2197| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@61|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|))) |i#0@@61|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|))) |i#0@@61|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2198| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@157 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@158 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@158) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@158 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |2199| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@158 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@159 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@159) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@159) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@47| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@159 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@73| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@159 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@73| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@47| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2200| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@159) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@160 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@160) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@160) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@160) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@160) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2201| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@160) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@445 T@U) (arg1@@193 T@U) (arg2@@107 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@445 arg1@@193 arg2@@107)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@445 arg1@@193 arg2@@107)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@161 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@161) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@161 |seqs#0|))) :qid |unknown.0:0| :skolemid |2202| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@161) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@162 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@162 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2203| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@162) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@163 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@62| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|) |i#0@@62|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@62|)))))) :qid |Sequencesidfy.409:20| :skolemid |2204| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@62|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|) |i#0@@62|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2205| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@163 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@164 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@164 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |2206| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@164 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@165 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@165) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@165 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2207| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@165) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@166 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@166) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@166) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2208| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@166) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@167 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@167) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@167) |shape#0|) (Sequences.__default.FlattenLength $ly@@167 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |2209| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@167) |shape#0|)) )))
(assert (forall (($ly@@168 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@168) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@168 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |2210| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@168) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@169 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@169) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@169 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@169 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |2211| :pattern ( (Sequences.__default.FlattenLength $ly@@169 |shape#0@@1|)) ))))
(assert (forall (($ly@@170 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@170) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@170 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |2212| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@170 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@171 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@171) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@171) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@171 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |2213| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@171) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@172 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@172) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@172) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@172) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |2214| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@172) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@446 T@U) (arg1@@194 T@U) (arg2@@108 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@446 arg1@@194 arg2@@108)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@446 arg1@@194 arg2@@108)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@173 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@173) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@173 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2215| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@173) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@174 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@174 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2216| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@174) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@175 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@175 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@175 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@175 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2217| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@175 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@176 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@176 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |2218| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@176 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@177 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@177) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@177 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2219| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@177) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@178 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@178) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@178) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2220| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@178) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@63| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@63| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@63| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@63|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@63| |j#0@@2|))) :qid |Sequencesidfy.489:25| :skolemid |2221| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@63| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@64| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@64|)) (<= (LitInt 0) |j#0@@3|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@64| |j#0@@3|)  (and (< |i#0@@64| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@64|)))))))) :qid |Sequencesidfy.489:25| :skolemid |2222| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@64| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@65| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@65| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@65|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@65| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@65|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@65|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@65| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@65|)) |j#0@@4|)))) :qid |Sequencesidfy.489:25| :skolemid |2223| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@65| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@66| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@66|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@66| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@66|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@66|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@66|)))) |j#0@@5|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |2224| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@66|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@447 T@U) (arg1@@195 T@U) (arg2@@109 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@447 arg1@@195 arg2@@109)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@447 arg1@@195 arg2@@109)) )))
(assert (forall (($ly@@179 T@U) (|shape#0@@9| T@U) (|i#0@@67| Int) ) (!  (=> (and (= (type $ly@@179) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@179) |shape#0@@9| |i#0@@67|) (Sequences.__default.UnflattenIndex $ly@@179 |shape#0@@9| |i#0@@67|))) :qid |Sequencesidfy.496:12| :skolemid |2225| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@179) |shape#0@@9| |i#0@@67|)) )))
(assert (forall (($ly@@180 T@U) (|shape#0@@10| T@U) (|i#0@@68| Int) ) (!  (=> (and (= (type $ly@@180) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@180 |shape#0@@10| |i#0@@68|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@68|))) :qid |Sequencesidfy.496:12| :skolemid |2226| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@180) |shape#0@@10| |i#0@@68|)) )))
(assert  (=> true (forall (($ly@@181 T@U) (|shape#0@@11| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@181) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@69|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@69|)) (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@181 |shape#0@@11| |i#0@@69|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |2227| :pattern ( (Sequences.__default.UnflattenIndex $ly@@181 |shape#0@@11| |i#0@@69|)) ))))
(assert (forall (($ly@@182 T@U) (|shape#0@@12| T@U) (|i#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@182) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@182 |shape#0@@12| |i#0@@70|) (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |2228| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@182 |shape#0@@12| |i#0@@70|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@183 T@U) (|shape#0@@13| T@U) (|i#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@183) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@71|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@71|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@71|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@183) |shape#0@@13| |i#0@@71|) (ite (< |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@183 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@71|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@71| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |2229| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@183) |shape#0@@13| |i#0@@71|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@184 T@U) (|shape#0@@14| T@U) (|i#0@@72| Int) ) (!  (=> (and (and (= (type $ly@@184) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@72|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@72|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@72|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@184) (Lit |shape#0@@14|) (LitInt |i#0@@72|)) (ite (< |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@184) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@72|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@72| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |2230| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@184) (Lit |shape#0@@14|) (LitInt |i#0@@72|))) ))))
(assert (forall (($ly@@185 T@U) (|s#0@@45| T@U) ) (!  (=> (and (= (type $ly@@185) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@185) |s#0@@45|) (Sequences.__default.seqMax $ly@@185 |s#0@@45|))) :qid |Sequencesidfy.606:22| :skolemid |2231| :pattern ( (Sequences.__default.seqMax ($LS $ly@@185) |s#0@@45|)) )))
(assert (forall (($ly@@186 T@U) (|s#0@@46| T@U) ) (!  (=> (and (= (type $ly@@186) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@186 |s#0@@46|) (Sequences.__default.seqMax $LZ |s#0@@46|))) :qid |Sequencesidfy.606:22| :skolemid |2232| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@186) |s#0@@46|)) )))
(assert  (=> true (forall (($ly@@187 T@U) (|s#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@187) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@47|) (and ($Is |s#0@@47| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@47|))))) (and (forall ((|k#0| T@U) ) (!  (=> (and (and (= (type |k#0|) intType) true) (|Seq#Contains| |s#0@@47| ($Box |k#0|))) (>= (Sequences.__default.seqMax $ly@@187 |s#0@@47|) (U_2_int |k#0|))) :qid |Sequencesidfy.608:20| :skolemid |2233| :pattern ( (|Seq#Contains| |s#0@@47| ($Box |k#0|))) )) (|Seq#Contains| |s#0@@47| ($Box (int_2_U (Sequences.__default.seqMax $ly@@187 |s#0@@47|)))))) :qid |Sequencesidfy.606:22| :skolemid |2234| :pattern ( (Sequences.__default.seqMax $ly@@187 |s#0@@47|)) ))))
(assert (forall (($ly@@188 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@188) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) ($Is |s#0@@48| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@188 |s#0@@48|) (< 0 (|Seq#Length| |s#0@@48|)))) :qid |Sequencesidfy.606:22| :skolemid |2235| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@188 |s#0@@48|)) )))
(assert  (=> true (forall (($ly@@189 T@U) (|s#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@189) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@49|) (and ($Is |s#0@@49| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@49|))))) (and (=> (not (= (|Seq#Length| |s#0@@49|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@49|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@49|))) (|Sequences.__default.Last#canCall| TInt |s#0@@49|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@189 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))) (= (Sequences.__default.seqMax ($LS $ly@@189) |s#0@@49|) (ite (= (|Seq#Length| |s#0@@49|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@49| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@189 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))))) :qid |Sequencesidfy.606:22| :skolemid |2236| :pattern ( (Sequences.__default.seqMax ($LS $ly@@189) |s#0@@49|)) ))))
(assert  (=> true (forall (($ly@@190 T@U) (|s#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@190) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@50|)) (and ($Is |s#0@@50| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@50|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@50|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@50|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@190) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@190) (Lit |s#0@@50|)) (ite (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@50|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@190) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |2237| :pattern ( (Sequences.__default.seqMax ($LS $ly@@190) (Lit |s#0@@50|))) ))))
(assert (forall ((arg0@@448 T@U) (arg1@@196 T@U) (arg2@@110 Int) (arg3@@67 T@U) ) (! (= (type (Sequences.__default.fill arg0@@448 arg1@@196 arg2@@110 arg3@@67)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@448 arg1@@196 arg2@@110 arg3@@67)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@191 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@191) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@191 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |2238| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@191) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@192 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@192 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |2239| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@192) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@193 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@193 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@73| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@193 |n#0@@7| |t#0@@8|) |i#0@@73|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |2240| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@193 |n#0@@7| |t#0@@8|) |i#0@@73|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@193 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |2241| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@193 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@194 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@194 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |2242| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@194 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@195 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@195) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@195 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |2243| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@195) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@196 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@196) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@196) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2244| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@196) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@197 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@197) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@197) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2245| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@197) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (= (TagFamily Tclass.Sets.__default) tytagFamily$_default))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@137)) bx@@137) ($Is ($Unbox refType bx@@137) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |2246| :pattern ( ($IsBox bx@@137 Tclass.Sets.__default)) )))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (= ($Is $o@@29 Tclass.Sets.__default)  (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |2247| :pattern ( ($Is $o@@29 Tclass.Sets.__default)) )))
(assert (forall (($o@@30 T@U) ($h@@92 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@30 Tclass.Sets.__default $h@@92)  (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@92 $o@@30) alloc))))) :qid |unknown.0:0| :skolemid |2248| :pattern ( ($IsAlloc $o@@30 Tclass.Sets.__default $h@@92)) )))
(assert (forall ((arg0@@449 Int) ) (! (= (type (Sets.__default.SetRange arg0@@449)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@449)) )))
(assert  (=> true (forall ((|n#0@@12| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@12|) (TSet TInt))) :qid |Setsidfy.35:21| :skolemid |2249| :pattern ( (Sets.__default.SetRange |n#0@@12|)) ))))
(assert (forall ((|n#0@@13| Int) ) (! (= (|Sets.__default.SetRange#requires| |n#0@@13|) true) :qid |Setsidfy.35:21| :skolemid |2250| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@13|)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@197 Int) (arg2@@111 Int) ) (! (= (type (|lambda#36| arg0@@450 arg1@@197 arg2@@111)) (MapType0Type BoxType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@450 arg1@@197 arg2@@111)) )))
(assert  (=> true (forall ((|n#0@@14| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@14|) (|lambda#36| TInt (LitInt 0) |n#0@@14|))) :qid |Setsidfy.35:21| :skolemid |2251| :pattern ( (Sets.__default.SetRange |n#0@@14|)) ))))
(assert  (=> true (forall ((|n#0@@15| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@15|)) (|lambda#36| TInt (LitInt 0) |n#0@@15|))) :qid |Setsidfy.35:21| :weight 3 :skolemid |2252| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@15|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@138)) bx@@138) ($Is ($Unbox refType bx@@138) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |2253| :pattern ( ($IsBox bx@@138 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@31 T@U) ) (!  (=> (= (type $o@@31) refType) (= ($Is $o@@31 Tclass.MapRemove_s.__default)  (or (= $o@@31 null) (= (dtype $o@@31) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |2254| :pattern ( ($Is $o@@31 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@32 T@U) ($h@@93 T@U) ) (!  (=> (and (= (type $o@@32) refType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@32 Tclass.MapRemove_s.__default $h@@93)  (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@93 $o@@32) alloc))))) :qid |unknown.0:0| :skolemid |2255| :pattern ( ($IsAlloc $o@@32 Tclass.MapRemove_s.__default $h@@93)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@198 T@U) (arg2@@112 T@U) (arg3@@68 T@U) (arg4@@44 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@451 arg1@@198 arg2@@112 arg3@@68 arg4@@44)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@451 arg1@@198 arg2@@112 arg3@@68 arg4@@44)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@198 T@U) (|m#0| T@U) (|k#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@198) LayerTypeType)) (= (type |m#0|) (MapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@198) |m#0| |k#0@@0|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@198 |m#0| |k#0@@0|))) :qid |unknown.0:0| :skolemid |2256| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@198) |m#0| |k#0@@0|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@199 T@U) (|m#0@@0| T@U) (|k#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@199) LayerTypeType)) (= (type |m#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@199 |m#0@@0| |k#0@@1|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@0| |k#0@@1|))) :qid |unknown.0:0| :skolemid |2257| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@199) |m#0@@0| |k#0@@1|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@200 T@U) (|m#0@@1| T@U) (|k#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@200) LayerTypeType)) (= (type |m#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@1| |k#0@@2|) (and ($Is |m#0@@1| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@2| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@6| T@U) ) (!  (=> (and (and (= (type |j#0@@6|) BoxType) ($IsBox |j#0@@6| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@6|)) (not (= |j#0@@6| |k#0@@2|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#0@@6|))) :qid |MapRemovesdfy.15:20| :skolemid |2258| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@6|)) )) (forall ((|j#1@@2| T@U) ) (!  (=> (and (= (type |j#1@@2|) BoxType) ($IsBox |j#1@@2| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#1@@2|)) (not (= |j#1@@2| |k#0@@2|))))) :qid |MapRemovesdfy.16:20| :skolemid |2259| :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#1@@2|)) ))) (forall ((|j#2@@0| T@U) ) (!  (=> (and (and (= (type |j#2@@0|) BoxType) ($IsBox |j#2@@0| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#2@@0|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#2@@0|) (MapType0Select (|Map#Elements| |m#0@@1|) |j#2@@0|))) :qid |MapRemovesdfy.17:20| :skolemid |2260| :pattern ( (MapType0Select (|Map#Elements| |m#0@@1|) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) |j#2@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|))) (|Set#Card| (|Map#Domain| |m#0@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@2|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) (- (|Map#Card| |m#0@@1|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@2|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) (|Map#Card| |m#0@@1|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2261| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@200 |m#0@@1| |k#0@@2|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@201 T@U) (|m#0@@2| T@U) (|k#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@201) LayerTypeType)) (= (type |m#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (and ($Is |m#0@@2| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@3| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@201 |m#0@@2| |k#0@@3|) true)) :qid |unknown.0:0| :skolemid |2262| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@201 |m#0@@2| |k#0@@3|)) )))
(assert  (and (forall ((arg0@@452 T@U) (arg1@@199 T@U) (arg2@@113 T@U) ) (! (= (type (|lambda#102| arg0@@452 arg1@@199 arg2@@113)) (MapType0Type BoxType boolType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@452 arg1@@199 arg2@@113)) )) (forall ((arg0@@453 T@U) ) (! (= (type (|lambda#81| arg0@@453)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@453)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@202 T@U) (|m#0@@3| T@U) (|k#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@202) LayerTypeType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@3| |k#0@@4|) (and ($Is |m#0@@3| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@4| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@202) |m#0@@3| |k#0@@4|) (let ((|m'#0| (|Map#Glue| (|lambda#102| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@3|) |k#0@@4|) (|lambda#81| (|Map#Elements| |m#0@@3|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |2263| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@202) |m#0@@3| |k#0@@4|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@203 T@U) (|m#0@@4| T@U) (|k#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@203) LayerTypeType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@4|) |k#0@@5|) (and ($Is |m#0@@4| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@5| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@203) (Lit |m#0@@4|) |k#0@@5|) (let ((|m'#1| (|Map#Glue| (|lambda#102| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@4|) |k#0@@5|) (|lambda#81| (|Map#Elements| (Lit |m#0@@4|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2264| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@203) (Lit |m#0@@4|) |k#0@@5|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@204 T@U) (|m#0@@5| T@U) (|k#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@204) LayerTypeType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@5|) (Lit |k#0@@6|)) (and ($Is |m#0@@5| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@6| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@204) (Lit |m#0@@5|) (Lit |k#0@@6|)) (let ((|m'#2| (|Map#Glue| (|lambda#102| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@5|) |k#0@@6|) (|lambda#81| (|Map#Elements| (Lit |m#0@@5|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2265| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@204) (Lit |m#0@@5|) (Lit |k#0@@6|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (= (TagFamily Tclass.Maps.__default) tytagFamily$_default))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@139)) bx@@139) ($Is ($Unbox refType bx@@139) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |2266| :pattern ( ($IsBox bx@@139 Tclass.Maps.__default)) )))
(assert (forall (($o@@33 T@U) ) (!  (=> (= (type $o@@33) refType) (= ($Is $o@@33 Tclass.Maps.__default)  (or (= $o@@33 null) (= (dtype $o@@33) Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |2267| :pattern ( ($Is $o@@33 Tclass.Maps.__default)) )))
(assert (forall (($o@@34 T@U) ($h@@94 T@U) ) (!  (=> (and (= (type $o@@34) refType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@34 Tclass.Maps.__default $h@@94)  (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@94 $o@@34) alloc))))) :qid |unknown.0:0| :skolemid |2268| :pattern ( ($IsAlloc $o@@34 Tclass.Maps.__default $h@@94)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@6| T@U) (|k#0@@7| T@U) (|v#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@18|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@7| |v#0@@18|) (and (and ($Is |m#0@@6| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@7| Maps._default.IMapsTo$K)) ($IsBox |v#0@@18| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2269| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@7| |v#0@@18|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@7| T@U) (|k#0@@8| T@U) (|v#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (= (type |v#0@@19|) BoxType)) (and (and ($Is |m#0@@7| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@8| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@19| Maps._default.IMapsTo$V@@0))) (= (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@8| |v#0@@19|) true)) :qid |unknown.0:0| :skolemid |2270| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@8| |v#0@@19|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@8| T@U) (|k#0@@9| T@U) (|v#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (= (type |v#0@@20|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@9| |v#0@@20|) (and (and ($Is |m#0@@8| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@9| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@20| Maps._default.IMapsTo$V@@1)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@9| |v#0@@20|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@8|) |k#0@@9|)) (= (MapType0Select (|IMap#Elements| |m#0@@8|) |k#0@@9|) |v#0@@20|)))) :qid |unknown.0:0| :skolemid |2271| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@9| |v#0@@20|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@9| T@U) (|k#0@@10| T@U) (|v#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@9|) (IMapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (= (type |v#0@@21|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@10|) (Lit |v#0@@21|)) (and (and ($Is |m#0@@9| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@10| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@21| Maps._default.IMapsTo$V@@2)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@10|) (Lit |v#0@@21|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@9|) |k#0@@10|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@9|)) (Lit |k#0@@10|)) (Lit |v#0@@21|))))) :qid |unknown.0:0| :weight 3 :skolemid |2272| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@10|) (Lit |v#0@@21|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@10| T@U) (|k#0@@11| T@U) (|v#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (= (type |v#0@@22|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@11| |v#0@@22|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@11| Maps._default.MapsTo$K)) ($IsBox |v#0@@22| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2273| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@11| |v#0@@22|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@11| T@U) (|k#0@@12| T@U) (|v#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (= (type |v#0@@23|) BoxType)) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@12| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@23| Maps._default.MapsTo$V@@0))) (= (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@12| |v#0@@23|) true)) :qid |unknown.0:0| :skolemid |2274| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@12| |v#0@@23|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@12| T@U) (|k#0@@13| T@U) (|v#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (= (type |v#0@@24|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@13| |v#0@@24|) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@13| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@24| Maps._default.MapsTo$V@@1)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@13| |v#0@@24|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@13|)) (= (MapType0Select (|Map#Elements| |m#0@@12|) |k#0@@13|) |v#0@@24|)))) :qid |unknown.0:0| :skolemid |2275| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@13| |v#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@13| T@U) (|k#0@@14| T@U) (|v#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (= (type |v#0@@25|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@14| |v#0@@25|) (and (and ($Is |m#0@@13| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@14| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@25| Maps._default.MapsTo$V@@2)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@14| |v#0@@25|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@13|) |k#0@@14|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@13|)) |k#0@@14|) |v#0@@25|)))) :qid |unknown.0:0| :weight 3 :skolemid |2276| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@14| |v#0@@25|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@14| T@U) (|k#0@@15| T@U) (|v#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (= (type |v#0@@26|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@15|) (Lit |v#0@@26|)) (and (and ($Is |m#0@@14| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@15| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@26| Maps._default.MapsTo$V@@3)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@15|) (Lit |v#0@@26|))  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@14|) |k#0@@15|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@14|)) (Lit |k#0@@15|)) (Lit |v#0@@26|))))) :qid |unknown.0:0| :weight 3 :skolemid |2277| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@15|) (Lit |v#0@@26|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@15| T@U) (|m'#0@@0| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@15|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@16|) (and (and ($Is |m#0@@15| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@16| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2278| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@16|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@16| T@U) (|m'#0@@1| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@16|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (and (and ($Is |m#0@@16| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@17| Maps._default.MapsAgreeOnKey$K@@0))) (= (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@17|) true)) :qid |unknown.0:0| :skolemid |2279| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@17|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@17| T@U) (|m'#0@@2| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@18|) (and (and ($Is |m#0@@17| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@18| Maps._default.MapsAgreeOnKey$K@@1)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@18|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@18|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@18|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@18|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@18|))) (= (MapType0Select (|Map#Elements| |m#0@@17|) |k#0@@18|) (MapType0Select (|Map#Elements| |m'#0@@2|) |k#0@@18|)))))) :qid |unknown.0:0| :skolemid |2280| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@18|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@18| T@U) (|m'#0@@3| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@19|) (and (and ($Is |m#0@@18| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@19| Maps._default.MapsAgreeOnKey$K@@2)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@19|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@19|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@19|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@19|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@19|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@18|)) |k#0@@19|) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) |k#0@@19|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2281| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@19| T@U) (|m'#0@@4| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@20|)) (and (and ($Is |m#0@@19| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@20| Maps._default.MapsAgreeOnKey$K@@3)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@20|))  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@20|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@20|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@20|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@20|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@19|)) (Lit |k#0@@20|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) (Lit |k#0@@20|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2282| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@20|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@20| T@U) (|m'#0@@5| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@21|) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@21| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2283| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@21|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@21| T@U) (|m'#0@@6| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@21|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (and (and ($Is |m#0@@21| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@22| Maps._default.IMapsAgreeOnKey$K@@0))) (= (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@22|) true)) :qid |unknown.0:0| :skolemid |2284| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@22| T@U) (|m'#0@@7| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@22|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@23|) (and (and ($Is |m#0@@22| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@23| Maps._default.IMapsAgreeOnKey$K@@1)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@23|)  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@23|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@23|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@23|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@23|))) (= (MapType0Select (|IMap#Elements| |m#0@@22|) |k#0@@23|) (MapType0Select (|IMap#Elements| |m'#0@@7|) |k#0@@23|)))))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@23| T@U) (|m'#0@@8| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@23|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@24|)) (and (and ($Is |m#0@@23| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@24| Maps._default.IMapsAgreeOnKey$K@@2)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@24|))  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@24|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@24|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@24|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@24|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@23|)) (Lit |k#0@@24|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@8|)) (Lit |k#0@@24|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2286| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@24|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |2287| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (= (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true)) :qid |unknown.0:0| :skolemid |2288| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@7| T@U) ) (!  (=> (and (and (= (type |key#0@@7|) BoxType) ($IsBox |key#0@@7| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@7|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@7|)) :qid |Mapsidfy.31:16| :skolemid |2290| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@7|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@7|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)  (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@8| T@U) ) (!  (=> (and (and (= (type |key#0@@8|) BoxType) ($IsBox |key#0@@8| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@8|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@8|)) :qid |Mapsidfy.31:16| :skolemid |2289| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@8|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@8|)) )))))) :qid |unknown.0:0| :skolemid |2291| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@2|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@2|)) :qid |Mapsidfy.31:16| :skolemid |2293| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@2|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))  (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@3|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@3|)) :qid |Mapsidfy.31:16| :skolemid |2292| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@3|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2294| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |2295| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (= (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true)) :qid |unknown.0:0| :skolemid |2296| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0@@9|) BoxType) ($IsBox |key#0@@9| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@9|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@9|)) :qid |Mapsidfy.36:16| :skolemid |2298| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@9|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)  (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@10|) BoxType) ($IsBox |key#0@@10| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@10|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@10|)) :qid |Mapsidfy.36:16| :skolemid |2297| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@10|)) )))))) :qid |unknown.0:0| :skolemid |2299| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapsidfy.36:16| :skolemid |2301| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))  (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@5| T@U) ) (!  (=> (and (and (= (type |key#1@@5|) BoxType) ($IsBox |key#1@@5| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@5|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@5|)) :qid |Mapsidfy.36:16| :skolemid |2300| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@5|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@5|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2302| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@454 T@U) (arg1@@200 T@U) (arg2@@114 T@U) (arg3@@69 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@454 arg1@@200 arg2@@114 arg3@@69 arg4@@45)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@454 arg1@@200 arg2@@114 arg3@@69 arg4@@45)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@205 T@U) (|m#0@@24| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@205) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@205) |m#0@@24| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@205 |m#0@@24| |ks#0|))) :qid |unknown.0:0| :skolemid |2303| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@205) |m#0@@24| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@206 T@U) (|m#0@@25| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@206) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@206 |m#0@@25| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@25| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |2304| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@206) |m#0@@25| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@207 T@U) (|m#0@@26| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@207) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@26| |ks#0@@1|) (and ($Is |m#0@@26| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@25| T@U) ) (!  (=> (and (and (= (type |k#0@@25|) BoxType) ($IsBox |k#0@@25| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@25|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@25|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |k#0@@25|))) :qid |Mapsidfy.40:20| :skolemid |2305| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |k#0@@25|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@25|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@25|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapsidfy.41:20| :skolemid |2306| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0@@7| T@U) ) (!  (=> (and (and (= (type |j#0@@7|) BoxType) ($IsBox |j#0@@7| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |j#0@@7|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |j#0@@7|) (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@7|))) :qid |Mapsidfy.42:20| :skolemid |2307| :pattern ( (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) |j#0@@7|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@26|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) (|Map#Card| |m#0@@26|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2308| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@207 |m#0@@26| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@208 T@U) (|m#0@@27| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@208) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@27| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (= (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@208 |m#0@@27| |ks#0@@2|) true)) :qid |unknown.0:0| :skolemid |2309| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@208 |m#0@@27| |ks#0@@2|)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@201 T@U) (arg2@@115 T@U) ) (! (= (type (|lambda#108| arg0@@455 arg1@@201 arg2@@115)) (MapType0Type BoxType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@455 arg1@@201 arg2@@115)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@209 T@U) (|m#0@@28| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@209) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@28| |ks#0@@3|) (and ($Is |m#0@@28| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@209) |m#0@@28| |ks#0@@3|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#108| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@28|) |ks#0@@3|) (|lambda#81| (|Map#Elements| |m#0@@28|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |2310| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@209) |m#0@@28| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@210 T@U) (|m#0@@29| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@210) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@29|) (Lit |ks#0@@4|)) (and ($Is |m#0@@29| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@210) (Lit |m#0@@29|) (Lit |ks#0@@4|)) (let ((|m'#1@@0| (|Map#Glue| (|lambda#108| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@29|) (Lit |ks#0@@4|)) (|lambda#81| (|Map#Elements| (Lit |m#0@@29|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |2311| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@210) (Lit |m#0@@29|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@456 T@U) (arg1@@202 T@U) (arg2@@116 T@U) (arg3@@70 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@456 arg1@@202 arg2@@116 arg3@@70 arg4@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@456 arg1@@202 arg2@@116 arg3@@70 arg4@@46)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@211 T@U) (|m#0@@30| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@211) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@211) |m#0@@30| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@211 |m#0@@30| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |2312| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@211) |m#0@@30| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@212 T@U) (|m#0@@31| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@212) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@212 |m#0@@31| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@31| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |2313| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@212) |m#0@@31| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@213 T@U) (|m#0@@32| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@213) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@32| |ks#0@@7|) (and ($Is |m#0@@32| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@32|) |ks#0@@7|)) (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) |j#0@@8|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) |j#0@@8|) (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@8|))) :qid |Mapsidfy.53:20| :skolemid |2314| :pattern ( (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) |j#0@@8|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@32|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) (|Map#Card| |m#0@@32|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |2315| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@213 |m#0@@32| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@214 T@U) (|m#0@@33| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@33| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (= (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@214 |m#0@@33| |ks#0@@8|) true)) :qid |unknown.0:0| :skolemid |2316| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@214 |m#0@@33| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@215 T@U) (|m#0@@34| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@215) |m#0@@34| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@34| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |2317| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@215) |m#0@@34| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@216 T@U) (|m#0@@35| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@216) (Lit |m#0@@35|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@35|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2318| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@216) (Lit |m#0@@35|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@457 T@U) (arg1@@203 T@U) (arg2@@117 T@U) (arg3@@71 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@457 arg1@@203 arg2@@117 arg3@@71)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@457 arg1@@203 arg2@@117 arg3@@71)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) (|m#0@@36| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|) (and ($Is |m#0@@36| (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)) ($IsBox |k#0@@26| Maps._default.MapRemove1$K)))) (and (and (and (and (and (and (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemove1$K)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@9|)) (not (= |j#0@@9| |k#0@@26|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#0@@9|))) :qid |Mapsidfy.62:18| :skolemid |2319| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@9|)) )) (forall ((|j#1@@3| T@U) ) (!  (=> (and (= (type |j#1@@3|) BoxType) ($IsBox |j#1@@3| Maps._default.MapRemove1$K)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#1@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#1@@3|)) (not (= |j#1@@3| |k#0@@26|))))) :qid |Mapsidfy.63:18| :skolemid |2320| :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#1@@3|)) ))) (forall ((|j#2@@1| T@U) ) (!  (=> (and (and (= (type |j#2@@1|) BoxType) ($IsBox |j#2@@1| Maps._default.MapRemove1$K)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#2@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#2@@1|) (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@1|))) :qid |Mapsidfy.64:18| :skolemid |2321| :pattern ( (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) |j#2@@1|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|))) (|Set#Card| (|Map#Domain| |m#0@@36|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@26|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) (- (|Map#Card| |m#0@@36|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@26|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) (|Map#Card| |m#0@@36|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|) (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)))) :qid |unknown.0:0| :skolemid |2322| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@26|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) (|m#0@@37| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (and ($Is |m#0@@37| (TMap Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0)) ($IsBox |k#0@@27| Maps._default.MapRemove1$K@@0))) (= (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@27|) true)) :qid |unknown.0:0| :skolemid |2323| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@27|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) (|m#0@@38| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@28|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@28| Maps._default.MapRemove1$K@@1)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@28|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@28|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 StartFuel_MapRemove_s._default.MapRemove1 |m#0@@38| |k#0@@28|)))) :qid |unknown.0:0| :skolemid |2324| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) (|m#0@@39| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@29|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@29| Maps._default.MapRemove1$K@@2)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@29|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@29|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@39|) |k#0@@29|)))) :qid |unknown.0:0| :weight 3 :skolemid |2325| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@29|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) (|m#0@@40| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@30|)) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@30| Maps._default.MapRemove1$K@@3)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@30|)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@30|)) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@40|) (Lit |k#0@@30|))))) :qid |unknown.0:0| :weight 3 :skolemid |2326| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@30|))) ))))
(assert (forall ((arg0@@458 T@U) (arg1@@204 T@U) (arg2@@118 T@U) (arg3@@72 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@458 arg1@@204 arg2@@118 arg3@@72 arg4@@47)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@458 arg1@@204 arg2@@118 arg3@@72 arg4@@47)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@217 T@U) (|m#0@@41| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@217) |m#0@@41| |k#0@@31|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@217 |m#0@@41| |k#0@@31|))) :qid |unknown.0:0| :skolemid |2327| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@217) |m#0@@41| |k#0@@31|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@218 T@U) (|m#0@@42| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@218 |m#0@@42| |k#0@@32|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@42| |k#0@@32|))) :qid |unknown.0:0| :skolemid |2328| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@218) |m#0@@42| |k#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@219 T@U) (|m#0@@43| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@43| |k#0@@33|) (and ($Is |m#0@@43| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@33| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) (|Set#Difference| (|Map#Domain| |m#0@@43|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@33|))) (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) |j#0@@10|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) |j#0@@10|) (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@10|))) :qid |Mapsidfy.74:20| :skolemid |2329| :pattern ( (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@10|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) |j#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) |j#0@@10|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|))) (|Set#Card| (|Map#Domain| |m#0@@43|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) (|Map#Card| |m#0@@43|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |2330| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@219 |m#0@@43| |k#0@@33|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@220 T@U) (|m#0@@44| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (and ($Is |m#0@@44| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@34| Maps._default.MapRemove1Strong$K@@2))) (= (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@220 |m#0@@44| |k#0@@34|) true)) :qid |unknown.0:0| :skolemid |2331| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@220 |m#0@@44| |k#0@@34|)) )))
(assert  (and (= (type MoreFuel_MapRemove_s._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@221 T@U) (|m#0@@45| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@35|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@35| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@35|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove10)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove10) MoreFuel_MapRemove_s._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@221) |m#0@@45| |k#0@@35|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@35|))))) :qid |unknown.0:0| :skolemid |2332| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@221) |m#0@@45| |k#0@@35|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@222 T@U) (|m#0@@46| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@36|) (and ($Is |m#0@@46| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@36| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@36|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove11)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove11) MoreFuel_MapRemove_s._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@222) (Lit |m#0@@46|) |k#0@@36|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@36|))))) :qid |unknown.0:0| :weight 3 :skolemid |2333| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@222) (Lit |m#0@@46|) |k#0@@36|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@223 T@U) (|m#0@@47| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@37|)) (and ($Is |m#0@@47| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@37| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@37|)) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove12)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove12) MoreFuel_MapRemove_s._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@223) (Lit |m#0@@47|) (Lit |k#0@@37|)) (Lit (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@37|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2334| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@223) (Lit |m#0@@47|) (Lit |k#0@@37|))) ))))
(assert (forall ((arg0@@459 T@U) (arg1@@205 T@U) (arg2@@119 T@U) (arg3@@73 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@459 arg1@@205 arg2@@119 arg3@@73 arg4@@48)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@459 arg1@@205 arg2@@119 arg3@@73 arg4@@48)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@224 T@U) (|m#0@@48| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@224) |m#0@@48| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@224 |m#0@@48| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |2335| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@224) |m#0@@48| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@225 T@U) (|m#0@@49| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@225 |m#0@@49| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@49| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |2336| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@225) |m#0@@49| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@226 T@U) (|m#0@@50| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@50| |ks#0@@13|) (and ($Is |m#0@@50| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@50|) |ks#0@@13|)) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) |j#0@@11|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) |j#0@@11|) (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@11|))) :qid |Mapsidfy.84:20| :skolemid |2337| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) |j#0@@11|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2338| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@226 |m#0@@50| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@227 T@U) (|m#0@@51| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (= (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@227 |m#0@@51| |ks#0@@14|) true)) :qid |unknown.0:0| :skolemid |2339| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@227 |m#0@@51| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@228 T@U) (|m#0@@52| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@52| |ks#0@@15|) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@228) |m#0@@52| |ks#0@@15|) (|IMap#Glue| (|lambda#108| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@52|) |ks#0@@15|) (|lambda#81| (|IMap#Elements| |m#0@@52|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |2340| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@228) |m#0@@52| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@229 T@U) (|m#0@@53| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@53|) (Lit |ks#0@@16|)) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@229) (Lit |m#0@@53|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#108| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@53|) (Lit |ks#0@@16|)) (|lambda#81| (|IMap#Elements| (Lit |m#0@@53|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2341| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@229) (Lit |m#0@@53|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@460 T@U) (arg1@@206 T@U) (arg2@@120 T@U) (arg3@@74 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@460 arg1@@206 arg2@@120 arg3@@74 arg4@@49)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@460 arg1@@206 arg2@@120 arg3@@74 arg4@@49)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@230 T@U) (|m#0@@54| T@U) (|k#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@38|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@230) |m#0@@54| |k#0@@38|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@230 |m#0@@54| |k#0@@38|))) :qid |unknown.0:0| :skolemid |2342| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@230) |m#0@@54| |k#0@@38|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@231 T@U) (|m#0@@55| T@U) (|k#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@55|) (IMapType BoxType BoxType))) (= (type |k#0@@39|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@231 |m#0@@55| |k#0@@39|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@55| |k#0@@39|))) :qid |unknown.0:0| :skolemid |2343| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@231) |m#0@@55| |k#0@@39|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@232 T@U) (|m#0@@56| T@U) (|k#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@56|) (IMapType BoxType BoxType))) (= (type |k#0@@40|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@56| |k#0@@40|) (and ($Is |m#0@@56| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@40| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) (|ISet#Difference| (|IMap#Domain| |m#0@@56|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@40|))) (forall ((|j#0@@12| T@U) ) (!  (=> (and (and (= (type |j#0@@12|) BoxType) ($IsBox |j#0@@12| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) |j#0@@12|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) |j#0@@12|) (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@12|))) :qid |Mapsidfy.91:20| :skolemid |2344| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) |j#0@@12|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2345| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@232 |m#0@@56| |k#0@@40|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@233 T@U) (|m#0@@57| T@U) (|k#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@57|) (IMapType BoxType BoxType))) (= (type |k#0@@41|) BoxType)) (and ($Is |m#0@@57| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@41| Maps._default.IMapRemove1$K@@2))) (= (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@233 |m#0@@57| |k#0@@41|) true)) :qid |unknown.0:0| :skolemid |2346| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@233 |m#0@@57| |k#0@@41|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@234 T@U) (|m#0@@58| T@U) (|k#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@58|) (IMapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@58| |k#0@@42|) (and ($Is |m#0@@58| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@42| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@234) |m#0@@58| |k#0@@42|) (|IMap#Glue| (|lambda#102| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@58|) |k#0@@42|) (|lambda#81| (|IMap#Elements| |m#0@@58|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |2347| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@234) |m#0@@58| |k#0@@42|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@235 T@U) (|m#0@@59| T@U) (|k#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@59|) (IMapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@59|) (Lit |k#0@@43|)) (and ($Is |m#0@@59| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@43| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@235) (Lit |m#0@@59|) (Lit |k#0@@43|)) (|IMap#Glue| (|lambda#102| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@59|) |k#0@@43|) (|lambda#81| (|IMap#Elements| (Lit |m#0@@59|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2348| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@235) (Lit |m#0@@59|) (Lit |k#0@@43|))) ))))
(assert (forall ((arg0@@461 T@U) (arg1@@207 T@U) (arg2@@121 T@U) (arg3@@75 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@461 arg1@@207 arg2@@121 arg3@@75)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@461 arg1@@207 arg2@@121 arg3@@75)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@60| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (and ($Is |m#0@@60| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |2349| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@61| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@61| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (= (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|) true)) :qid |unknown.0:0| :skolemid |2350| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@208 T@U) (arg2@@122 T@U) ) (! (= (type (|lambda#120| arg0@@462 arg1@@208 arg2@@122)) (MapType0Type BoxType boolType)) :qid |funType:lambda#120| :pattern ( (|lambda#120| arg0@@462 arg1@@208 arg2@@122)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@62| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (and ($Is |m#0@@62| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (|Map#Glue| (|lambda#120| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@62|)) (|lambda#81| (|Map#Elements| |m#0@@62|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2351| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@63| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (and ($Is |m#0@@63| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#120| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@63|)) (|lambda#81| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2352| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@463 T@U) (arg1@@209 T@U) (arg2@@123 T@U) (arg3@@76 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@463 arg1@@209 arg2@@123 arg3@@76)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@463 arg1@@209 arg2@@123 arg3@@76)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@64|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (and ($Is |m#0@@64| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |2353| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@65|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (= (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|) true)) :qid |unknown.0:0| :skolemid |2354| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@66|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (and ($Is |m#0@@66| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (|Map#Glue| (|lambda#120| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@66|) |ks#0@@23|) (|lambda#81| (|Map#Elements| |m#0@@66|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2355| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@67|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (and ($Is |m#0@@67| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (|Map#Glue| (|lambda#120| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@67|) |ks#0@@24|) (|lambda#81| (|Map#Elements| (Lit |m#0@@67|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2356| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@68| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (and ($Is |m#0@@68| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#120| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@68|) (Lit |ks#0@@25|)) (|lambda#81| (|Map#Elements| (Lit |m#0@@68|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |2357| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@464 T@U) (arg1@@210 T@U) (arg2@@124 T@U) (arg3@@77 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@464 arg1@@210 arg2@@124 arg3@@77)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@464 arg1@@210 arg2@@124 arg3@@77)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@69| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (and ($Is |m#0@@69| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@70| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@70| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (= (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|) true)) :qid |unknown.0:0| :skolemid |2359| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@71| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (and ($Is |m#0@@71| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (|IMap#Glue| (|lambda#120| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@71|)) (|lambda#81| (|IMap#Elements| |m#0@@71|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2360| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@72| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (and ($Is |m#0@@72| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#120| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@72|)) (|lambda#81| (|IMap#Elements| (Lit |m#0@@72|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2361| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@465 T@U) (arg1@@211 T@U) (arg2@@125 T@U) (arg3@@78 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@465 arg1@@211 arg2@@125 arg3@@78 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@465 arg1@@211 arg2@@125 arg3@@78 arg4@@50)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@236 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@236) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@236 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |2362| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@236) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@237 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@237 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |2363| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@237) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@238 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@44| T@U) ) (!  (=> (and (and (= (type |k#0@@44|) BoxType) ($IsBox |k#0@@44| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@44|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@44|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) |k#0@@44|))) :qid |Mapsidfy.112:18| :skolemid |2364| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) |k#0@@44|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@44|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@44|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapsidfy.113:18| :skolemid |2365| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2366| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@238 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@239 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (= (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@239 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |2367| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@239 |mapa#0@@2| |mapb#0@@2|)) )))
(assert (forall ((arg0@@466 T@U) (arg1@@212 T@U) (arg2@@126 T@U) ) (! (= (type (|lambda#135| arg0@@466 arg1@@212 arg2@@126)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#135| :pattern ( (|lambda#135| arg0@@466 arg1@@212 arg2@@126)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@240 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@240) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#93| Maps._default.MapDisjointUnion$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))) (|lambda#135| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |2368| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@240) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@241 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@241) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#93| Maps._default.MapDisjointUnion$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#135| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2369| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@241) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@467 T@U) (arg1@@213 T@U) (arg2@@127 T@U) (arg3@@79 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@467 arg1@@213 arg2@@127 arg3@@79 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@467 arg1@@213 arg2@@127 arg3@@79 arg4@@51)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@242 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@242) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@242 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |2370| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@242) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@243 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@243 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |2371| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@243) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@244 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@45| T@U) ) (!  (=> (and (and (= (type |k#0@@45|) BoxType) ($IsBox |k#0@@45| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@45|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#0@@45|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@45|))) :qid |Mapsidfy.122:20| :skolemid |2372| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@45|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapsidfy.123:20| :skolemid |2373| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapsidfy.124:20| :skolemid |2374| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2375| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@244 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@245 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (= (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@245 |mapa#0@@8| |mapb#0@@8|) true)) :qid |unknown.0:0| :skolemid |2376| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@245 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@246 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@246) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#93| Maps._default.MapUnionPreferA$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|))) (|lambda#135| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2377| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@246) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@247 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@247) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#93| Maps._default.MapUnionPreferA$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@10|)) (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#135| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2378| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@247) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@468 T@U) (arg1@@214 T@U) (arg2@@128 T@U) (arg3@@80 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@468 arg1@@214 arg2@@128 arg3@@80 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@468 arg1@@214 arg2@@128 arg3@@80 arg4@@52)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@248 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@248) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@248 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |2379| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@248) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@249 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@249 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |2380| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@249) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@250 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@46| T@U) ) (!  (=> (and (and (= (type |k#0@@46|) BoxType) ($IsBox |k#0@@46| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@46|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#0@@46|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@46|))) :qid |Mapsidfy.131:20| :skolemid |2381| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@46|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#0@@46|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@46|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapsidfy.132:20| :skolemid |2382| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapsidfy.133:20| :skolemid |2383| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2384| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@250 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@251 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (= (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@251 |mapa#0@@14| |mapb#0@@14|) true)) :qid |unknown.0:0| :skolemid |2385| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@251 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@252 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@252) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#93| Maps._default.MapUnionPreferB$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|))) (|lambda#135| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2386| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@252) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@253 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@253) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#93| Maps._default.MapUnionPreferB$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@16|)) (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#135| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2387| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@253) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@469 T@U) (arg1@@215 T@U) (arg2@@129 T@U) (arg3@@81 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@469 arg1@@215 arg2@@129 arg3@@81 arg4@@53)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@469 arg1@@215 arg2@@129 arg3@@81 arg4@@53)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@254 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@254) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@254 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |2388| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@254) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@255 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@255 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |2389| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@255) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@256 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@47| T@U) ) (!  (=> (and (and (= (type |k#0@@47|) BoxType) ($IsBox |k#0@@47| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@47|))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@47|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#0@@47|))) :qid |Mapsidfy.142:18| :skolemid |2390| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#0@@47|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@47|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@47|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapsidfy.143:18| :skolemid |2391| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapsidfy.144:18| :skolemid |2392| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2393| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@256 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@257 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (= (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@257 |mapa#0@@20| |mapb#0@@20|) true)) :qid |unknown.0:0| :skolemid |2394| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@257 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@258 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@258) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |2395| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@258) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@259 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@259) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |2396| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@259) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@470 T@U) (arg1@@216 T@U) (arg2@@130 T@U) (arg3@@82 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@470 arg1@@216 arg2@@130 arg3@@82 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@470 arg1@@216 arg2@@130 arg3@@82 arg4@@54)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@260 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@260) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@260 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |2397| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@260) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@261 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@261 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |2398| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@261) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@262 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@48| T@U) ) (!  (=> (and (and (= (type |k#0@@48|) BoxType) ($IsBox |k#0@@48| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@48|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#0@@48|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@48|))) :qid |Mapsidfy.151:20| :skolemid |2399| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@48|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#0@@48|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@48|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapsidfy.152:20| :skolemid |2400| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapsidfy.153:20| :skolemid |2401| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2402| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@262 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@263 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (= (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@263 |mapa#0@@26| |mapb#0@@26|) true)) :qid |unknown.0:0| :skolemid |2403| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@263 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@264 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@264) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#93| Maps._default.IMapUnionPreferA$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|))) (|lambda#135| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2404| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@264) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@265 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@265) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#93| Maps._default.IMapUnionPreferA$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@28|)) (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#135| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2405| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@265) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@471 T@U) (arg1@@217 T@U) (arg2@@131 T@U) (arg3@@83 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@471 arg1@@217 arg2@@131 arg3@@83 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@471 arg1@@217 arg2@@131 arg3@@83 arg4@@55)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@266 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@266) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@266 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |2406| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@266) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@267 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@267 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |2407| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@267) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@268 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@49| T@U) ) (!  (=> (and (and (= (type |k#0@@49|) BoxType) ($IsBox |k#0@@49| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@49|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#0@@49|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@49|))) :qid |Mapsidfy.160:20| :skolemid |2408| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@49|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#0@@49|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@49|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapsidfy.161:20| :skolemid |2409| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapsidfy.162:20| :skolemid |2410| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2411| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@268 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@269 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (= (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@269 |mapa#0@@32| |mapb#0@@32|) true)) :qid |unknown.0:0| :skolemid |2412| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@269 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@270 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@270) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#93| Maps._default.IMapUnionPreferB$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|))) (|lambda#135| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2413| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@270) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@271 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@271) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#93| Maps._default.IMapUnionPreferB$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@34|)) (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#135| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2414| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@271) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@472 T@U) (arg1@@218 T@U) (arg2@@132 T@U) (arg3@@84 T@U) (arg4@@56 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@472 arg1@@218 arg2@@132 arg3@@84 arg4@@56)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@472 arg1@@218 arg2@@132 arg3@@84 arg4@@56)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@272 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@272) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@272 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |2415| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@272) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@273 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@273 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |2416| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@273) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@274 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@50| T@U) ) (!  (=> (and (and (= (type |k#0@@50|) BoxType) ($IsBox |k#0@@50| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@50|))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@50|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#0@@50|))) :qid |Mapsidfy.171:18| :skolemid |2417| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#0@@50|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@50|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@50|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapsidfy.172:18| :skolemid |2418| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapsidfy.173:18| :skolemid |2419| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2420| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@274 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@275 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (= (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@275 |mapa#0@@38| |mapb#0@@38|) true)) :qid |unknown.0:0| :skolemid |2421| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@275 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@276 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@276) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |2422| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@276) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@277 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@277) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |2423| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@277) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@473 T@U) (arg1@@219 T@U) (arg2@@133 T@U) (arg3@@85 T@U) (arg4@@57 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@473 arg1@@219 arg2@@133 arg3@@85 arg4@@57 arg5@@21)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@473 arg1@@219 arg2@@133 arg3@@85 arg4@@57 arg5@@21)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@278 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@278) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@278 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |2424| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@278) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@279 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@279 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |2425| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@279) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@280 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@51| T@U) ) (!  (=> (and (and (= (type |k#0@@51|) BoxType) ($IsBox |k#0@@51| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@51|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@51|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@51|))) :qid |Mapsidfy.183:18| :skolemid |2426| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@51|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@51|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@51|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapsidfy.184:18| :skolemid |2427| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapsidfy.185:18| :skolemid |2428| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |2429| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@280 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@281 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (= (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@281 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)  (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))))) :qid |unknown.0:0| :skolemid |2430| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@281 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@220 T@U) (arg2@@134 T@U) (arg3@@86 T@U) (arg4@@58 T@U) ) (! (= (type (|lambda#155| arg0@@474 arg1@@220 arg2@@134 arg3@@86 arg4@@58)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#155| :pattern ( (|lambda#155| arg0@@474 arg1@@220 arg2@@134 arg3@@86 arg4@@58)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@282 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@282) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#93| Maps._default.MapDisjointUnion3$U@@3 (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|))) (|lambda#155| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |2431| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@282) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@283 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@283) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#93| Maps._default.MapDisjointUnion3$U@@4 (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#155| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2432| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@283) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@475 T@U) (arg1@@221 T@U) (arg2@@135 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@475 arg1@@221 arg2@@135)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@475 arg1@@221 arg2@@135)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@73| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) ($Is |m#0@@73| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |2433| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@74| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) ($Is |m#0@@74| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (= (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|) true)) :qid |unknown.0:0| :skolemid |2434| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@75| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) ($Is |m#0@@75| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) (|IMap#Glue| (|lambda#93| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@75|)) (|lambda#81| (|Map#Elements| |m#0@@75|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |2435| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@76| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) ($Is |m#0@@76| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) (|IMap#Glue| (|lambda#93| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@76|)) (|lambda#81| (|Map#Elements| (Lit |m#0@@76|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2436| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|))) ))))
(assert (forall ((arg0@@476 T@U) (arg1@@222 T@U) (arg2@@136 T@U) (arg3@@87 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@476 arg1@@222 arg2@@136 arg3@@87)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@476 arg1@@222 arg2@@136 arg3@@87)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@77|) (MapType BoxType BoxType))) (= (type |key#0@@11|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@11|) (and ($Is |m#0@@77| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@11| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@11|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |2437| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@11|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (MapType BoxType BoxType))) (= (type |key#0@@12|) BoxType)) (and ($Is |m#0@@78| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@12| Maps._default.MapLookupOption$K@@0))) (= (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@12|) true)) :qid |unknown.0:0| :skolemid |2438| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (MapType BoxType BoxType))) (= (type |key#0@@13|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@13|) (and ($Is |m#0@@79| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@13| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@13|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@79|) |key#0@@13|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@79|) |key#0@@13|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2439| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (= (type |key#0@@14|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@14|) (and ($Is |m#0@@80| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@14| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@14|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@80|) |key#0@@14|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@80|)) |key#0@@14|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2440| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@14|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@81| T@U) (|key#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) (= (type |key#0@@15|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@15|)) (and ($Is |m#0@@81| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@15| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@15|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@81|) |key#0@@15|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@81|)) (Lit |key#0@@15|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2441| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@15|))) ))))
(assert (forall ((arg0@@477 T@U) (arg1@@223 T@U) (arg2@@137 T@U) (arg3@@88 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@477 arg1@@223 arg2@@137 arg3@@88)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@477 arg1@@223 arg2@@137 arg3@@88)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@82| T@U) (|key#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@82|) (IMapType BoxType BoxType))) (= (type |key#0@@16|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@16|) (and ($Is |m#0@@82| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@16| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@16|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |2442| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@16|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@83| T@U) (|key#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@83|) (IMapType BoxType BoxType))) (= (type |key#0@@17|) BoxType)) (and ($Is |m#0@@83| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@17| Maps._default.ImapLookupOption$K@@0))) (= (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@17|) true)) :qid |unknown.0:0| :skolemid |2443| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@17|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@84| T@U) (|key#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@84|) (IMapType BoxType BoxType))) (= (type |key#0@@18|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@18|) (and ($Is |m#0@@84| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@18| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@18|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@84|) |key#0@@18|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@84|) |key#0@@18|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2444| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@18|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@85| T@U) (|key#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@85|) (IMapType BoxType BoxType))) (= (type |key#0@@19|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@19|)) (and ($Is |m#0@@85| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@19| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@19|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@85|) |key#0@@19|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@85|)) (Lit |key#0@@19|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2445| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@19|))) ))))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@140)) bx@@140) ($Is ($Unbox refType bx@@140) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |2446| :pattern ( ($IsBox bx@@140 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@35 T@U) ) (!  (=> (= (type $o@@35) refType) (= ($Is $o@@35 Tclass.LinearMaybe.__default)  (or (= $o@@35 null) (= (dtype $o@@35) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |2447| :pattern ( ($Is $o@@35 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@36 T@U) ($h@@95 T@U) ) (!  (=> (and (= (type $o@@36) refType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@36 Tclass.LinearMaybe.__default $h@@95)  (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@95 $o@@36) alloc))))) :qid |unknown.0:0| :skolemid |2448| :pattern ( ($IsAlloc $o@@36 Tclass.LinearMaybe.__default $h@@95)) )))
(assert (forall ((arg0@@478 T@U) ) (! (= (type (|#$maybe| arg0@@478)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@478)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0@@86| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0@@86|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0@@86|) ($IsBox |m#0@@86| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |2449| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0@@86|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@87| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@87|) BoxType)) ($IsBox |m#0@@87| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|) true)) :qid |unknown.0:0| :skolemid |2450| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|)) )))
(assert (forall ((arg0@@479 T@U) (arg1@@224 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@479 arg1@@224)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@479 arg1@@224)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@88| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@88|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@88|) ($IsBox |m#0@@88| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |2451| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@89| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@89|) BoxType)) ($IsBox |m#0@@89| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|) true)) :qid |unknown.0:0| :skolemid |2452| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@225 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@480 arg1@@225)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@480 arg1@@225)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@90| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@90|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@90|) (and ($IsBox |m#0@@90| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@90|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@90|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |2453| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@91| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@91|) BoxType)) ($IsBox |m#0@@91| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@91|))) :qid |unknown.0:0| :skolemid |2454| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@226 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@481 arg1@@226)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@481 arg1@@226)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@92| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@92|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@92|) (and ($IsBox |m#0@@92| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@92|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@92|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |2455| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@93|) BoxType)) ($IsBox |m#0@@93| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@93|))) :qid |unknown.0:0| :skolemid |2456| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@227 T@U) (arg2@@138 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@482 arg1@@227 arg2@@138)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@482 arg1@@227 arg2@@138)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly@@284 T@U) (|a#0@@74| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly@@284) LayerTypeType)) (= (type |a#0@@74|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@284) |a#0@@74|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly@@284 |a#0@@74|))) :qid |unknown.0:0| :skolemid |2457| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@284) |a#0@@74|)) )))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@285 T@U) (|a#0@@75| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@285) LayerTypeType)) (= (type |a#0@@75|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@285 |a#0@@75|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@75|))) :qid |unknown.0:0| :skolemid |2458| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@285) |a#0@@75|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@286 T@U) (|a#0@@76| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@286) LayerTypeType)) (= (type |a#0@@76|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@76|) ($IsBox |a#0@@76| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 |a#0@@76|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 |a#0@@76|)) |a#0@@76|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@76| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 |a#0@@76|) |x#0@@1|))) :qid |LinearMaybesdfy.25:20| :skolemid |2459| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 |a#0@@76|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |2460| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@286 |a#0@@76|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@287 T@U) (|a#0@@77| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@287) LayerTypeType)) (= (type |a#0@@77|) BoxType)) ($IsBox |a#0@@77| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@287 |a#0@@77|) true)) :qid |unknown.0:0| :skolemid |2461| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@287 |a#0@@77|)) )))
(assert (forall ((arg0@@483 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@483)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@483)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |2462| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |2463| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@484 T@U) (arg1@@228 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@484 arg1@@228)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@484 arg1@@228)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@94|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@94|) (and ($IsBox |m#0@@94| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@94|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |2464| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@95|) BoxType)) ($IsBox |m#0@@95| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@95|)))) :qid |unknown.0:0| :skolemid |2465| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)) )))
(assert (forall ((arg0@@485 T@U) (arg1@@229 Bool) (arg2@@139 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@485 arg1@@229 arg2@@139)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@485 arg1@@229 arg2@@139)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0@@0| Bool) (|a#0@@78| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@78|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0@@0| |a#0@@78|) ($IsBox |a#0@@78| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0@@0| |a#0@@78|)) |h#0@@0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0@@0| |a#0@@78|)) |a#0@@78|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0@@0| |a#0@@78|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |2466| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0@@0| |a#0@@78|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@1| Bool) (|a#0@@79| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@79|) BoxType)) ($IsBox |a#0@@79| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@1| |a#0@@79|) true)) :qid |unknown.0:0| :skolemid |2467| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@1| |a#0@@79|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@141)) bx@@141) ($Is ($Unbox refType bx@@141) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |2468| :pattern ( ($IsBox bx@@141 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@37 T@U) ) (!  (=> (= (type $o@@37) refType) (= ($Is $o@@37 Tclass.LinearExtern.__default)  (or (= $o@@37 null) (= (dtype $o@@37) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |2469| :pattern ( ($Is $o@@37 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@38 T@U) ($h@@96 T@U) ) (!  (=> (and (= (type $o@@38) refType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@38 Tclass.LinearExtern.__default $h@@96)  (or (= $o@@38 null) (U_2_bool (MapType1Select (MapType0Select $h@@96 $o@@38) alloc))))) :qid |unknown.0:0| :skolemid |2470| :pattern ( ($IsAlloc $o@@38 Tclass.LinearExtern.__default $h@@96)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@230 T@U) (arg2@@140 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@486 arg1@@230 arg2@@140)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@486 arg1@@230 arg2@@140)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@51| T@U) (|i#0@@74| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@51|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@51| |i#0@@74|) (and (and ($Is |s#0@@51| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| 18446744073709551616))) (< |i#0@@74| (|Seq#Length| |s#0@@51|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@51| |i#0@@74|) (|Seq#Index| |s#0@@51| |i#0@@74|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@51| |i#0@@74|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |2471| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@51| |i#0@@74|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@52| T@U) (|i#0@@75| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@52|) (SeqType BoxType))) (and ($Is |s#0@@52| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@52| |i#0@@75|) (< |i#0@@75| (|Seq#Length| |s#0@@52|)))) :qid |unknown.0:0| :skolemid |2472| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@52| |i#0@@75|)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@231 T@U) (arg2@@141 Int) (arg3@@89 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@487 arg1@@231 arg2@@141 arg3@@89)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@487 arg1@@231 arg2@@141 arg3@@89)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@76| Int) (|a#0@@80| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@80|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@76| |a#0@@80|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| 18446744073709551616))) ($IsBox |a#0@@80| LinearSequence_s._default.seq_set$A)) (< |i#0@@76| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@76| |a#0@@80|) (|Seq#Update| |s1#0| |i#0@@76| |a#0@@80|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@76| |a#0@@80|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |2473| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@76| |a#0@@80|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@77| Int) (|a#0@@81| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@81|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| 18446744073709551616))) ($IsBox |a#0@@81| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@77| |a#0@@81|) (< |i#0@@77| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |2474| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@77| |a#0@@81|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@53| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@53|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@53|) (and ($Is |s#0@@53| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@53|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@53|) (|Seq#Length| |s#0@@53|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@53|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@53|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2475| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@53|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@54| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@54|) (SeqType BoxType))) ($Is |s#0@@54| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@54|) (<= (|Seq#Length| |s#0@@54|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |2476| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@54|)) )))
(assert (forall ((arg0@@488 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@488)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@488)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |2477| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |2478| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@489 T@U) (arg1@@232 Int) (arg2@@142 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@489 arg1@@232 arg2@@142)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@489 arg1@@232 arg2@@142)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0@@6| Int) (|a#0@@82| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@82|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|) (and (and (<= (LitInt 0) |length#0@@6|) (< |length#0@@6| 18446744073709551616)) ($IsBox |a#0@@82| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|)) |length#0@@6|) (forall ((|i#0@@78| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|) |i#0@@78|) |a#0@@82|))) :qid |LinearSequencesdfy.32:20| :skolemid |2479| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|) |i#0@@78|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |2480| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@82|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@7| Int) (|a#0@@83| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@83|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@7|) (< |length#0@@7| 18446744073709551616)) ($IsBox |a#0@@83| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@83|) true))) :qid |unknown.0:0| :skolemid |2481| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@83|)) )))
(assert (forall ((arg0@@490 T@U) (arg1@@233 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@490 arg1@@233)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@490 arg1@@233)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@55| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@55|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@55|) ($Is |s#0@@55| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@55|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |2482| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@55|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@56| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@56|) (SeqType BoxType))) ($Is |s#0@@56| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@56|) true)) :qid |unknown.0:0| :skolemid |2483| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@56|)) )))
(assert (forall ((arg0@@491 T@U) (arg1@@234 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@491 arg1@@234)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@491 arg1@@234)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |2484| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |2485| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert (forall ((arg0@@492 T@U) (arg1@@235 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@492 arg1@@235)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@492 arg1@@235)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0|) ($IsBox |l#0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |2486| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@0|) BoxType)) ($IsBox |l#0@@0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|) true)) :qid |unknown.0:0| :skolemid |2487| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|)) )))
(assert (forall ((arg0@@493 T@U) (arg1@@236 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@493 arg1@@236)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@493 arg1@@236)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@1|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@1|) ($IsBox |l#0@@1| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@1|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |2488| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@46 T@U) (|l#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |l#0@@2|) BoxType)) (and ($IsGoodHeap $Heap@@46) ($IsBox |l#0@@2| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) true)) :qid |unknown.0:0| :skolemid |2489| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) ($IsGoodHeap $Heap@@46)) )))
(assert (forall ((arg0@@494 T@U) (arg1@@237 T@U) ) (! (= (type (|lambda#162| arg0@@494 arg1@@237)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#162| :pattern ( (|lambda#162| arg0@@494 arg1@@237)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@47 T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (and ($IsGoodHeap $Heap@@47) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (forall ((|$l#1#i#0@@0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0@@0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (=> (and (<= (LitInt 0) |$l#1#i#0@@0|) (< |$l#1#i#0@@0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) |$l#1#i#0@@0|))))) :qid |unknown.0:0| :skolemid |2490| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|Seq#Create| TBool $Heap@@47 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (Lit (AtLayer (|lambda#7| (Handle1 (|lambda#162| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (|lambda#4| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|))) (|lambda#6| (SetRef_to_SetBox (|lambda#5| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |2491| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) ($IsGoodHeap $Heap@@47)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@48 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |l#0@@4|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (and ($IsGoodHeap $Heap@@48) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (forall ((|$l#3#i#0@@0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0@@0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (=> (and (<= (LitInt 0) |$l#3#i#0@@0|) (< |$l#3#i#0@@0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) |$l#3#i#0@@0|))))) :qid |unknown.0:0| :skolemid |2492| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|Seq#Create| TBool $Heap@@48 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (Lit (AtLayer (|lambda#7| (Handle1 (|lambda#162| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (|lambda#4| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)))) (|lambda#6| (SetRef_to_SetBox (|lambda#5| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |2493| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) ($IsGoodHeap $Heap@@48)) ))))
(assert (forall ((arg0@@495 T@U) (arg1@@238 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@495 arg1@@238)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@495 arg1@@238)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@57| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@57|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@57|) ($Is |s#0@@57| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@57|)) |s#0@@57|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@57|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |2494| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@57|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@58| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@58|) (SeqType BoxType))) ($Is |s#0@@58| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@58|) true)) :qid |unknown.0:0| :skolemid |2495| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@58|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@59| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@59|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@59|) (and ($IsBox |s#0@@59| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2496| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@59|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@60| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@60|) BoxType)) ($IsBox |s#0@@60| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@60|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@60|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |2497| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@60|)) )))
(assert (forall ((arg0@@496 T@U) (arg1@@239 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@496 arg1@@239)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@496 arg1@@239)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@8| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (and (<= (LitInt 0) |length#0@@8|) (< |length#0@@8| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|))) |length#0@@8|) (forall ((|i#0@@79| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| |length#0@@8|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@79|)))) :qid |LinearSequencesdfy.90:22| :skolemid |2498| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@79|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |2499| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@9| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@9|) (< |length#0@@9| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|) true))) :qid |unknown.0:0| :skolemid |2500| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|)) )))
(assert (forall ((arg0@@497 T@U) (arg1@@240 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@497 arg1@@240)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@497 arg1@@240)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@61| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@61|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@61|) (and ($IsBox |s#0@@61| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@61|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@61|) |i#0@@80|)))) :qid |LinearSequencesdfy.93:23| :skolemid |2501| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@61|) |i#0@@80|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@61|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |2502| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@61|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@62| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@62|) BoxType)) ($IsBox |s#0@@62| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@62|) (forall ((|i#1@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@62|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@62|) |i#1@@11|)))) :qid |LinearSequencesdfy.93:23| :skolemid |2503| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@62|) |i#1@@11|)) )))) :qid |unknown.0:0| :skolemid |2504| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@62|)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@241 T@U) (arg2@@143 Int) (arg3@@90 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@498 arg1@@241 arg2@@143 arg3@@90)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@498 arg1@@241 arg2@@143 arg3@@90)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@81| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@81| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@81| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@81| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@81|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@81| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@81| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@81| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |2505| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@81| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@82| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@82| |a1#0@@0|) (< |i#0@@82| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |2506| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@82| |a1#0@@0|)) )))
(assert (forall ((arg0@@499 T@U) (arg1@@242 T@U) (arg2@@144 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@499 arg1@@242 arg2@@144)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@499 arg1@@242 arg2@@144)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@63| T@U) (|i#0@@83| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@63|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@63| |i#0@@83|) (and (and ($IsBox |s#0@@63| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| 18446744073709551616))) (< |i#0@@83| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@63|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@63| |i#0@@83|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@63|) |i#0@@83|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@63| |i#0@@83|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |2507| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@63| |i#0@@83|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@64| T@U) (|i#0@@84| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@64|) BoxType)) (and ($IsBox |s#0@@64| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@64| |i#0@@84|) (< |i#0@@84| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@64|))))) :qid |unknown.0:0| :skolemid |2508| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@64| |i#0@@84|)) )))
(assert (= (type Tclass.LinearSequence__i.__default) TyType))
(assert (= (Tag Tclass.LinearSequence__i.__default) Tagclass.LinearSequence__i.__default))
(assert (= (TagFamily Tclass.LinearSequence__i.__default) tytagFamily$_default))
(assert (forall (($o@@39 T@U) ) (!  (=> (= (type $o@@39) refType) (= ($Is $o@@39 Tclass.LinearSequence__i.__default)  (or (= $o@@39 null) (= (dtype $o@@39) Tclass.LinearSequence__i.__default)))) :qid |unknown.0:0| :skolemid |2509| :pattern ( ($Is $o@@39 Tclass.LinearSequence__i.__default)) )))
(assert (forall (($o@@40 T@U) ($h@@97 T@U) ) (!  (=> (and (= (type $o@@40) refType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@40 Tclass.LinearSequence__i.__default $h@@97)  (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@97 $o@@40) alloc))))) :qid |unknown.0:0| :skolemid |2510| :pattern ( ($IsAlloc $o@@40 Tclass.LinearSequence__i.__default $h@@97)) )))
(assert (forall ((arg0@@500 T@U) (arg1@@243 Int) (arg2@@145 T@U) ) (! (= (type (LinearSequence__i.__default.seq__alloc__init arg0@@500 arg1@@243 arg2@@145)) (SeqType BoxType)) :qid |funType:LinearSequence__i.__default.seq__alloc__init| :pattern ( (LinearSequence__i.__default.seq__alloc__init arg0@@500 arg1@@243 arg2@@145)) )))
(assert  (=> true (forall ((LinearSequence_i._default.seq_alloc_init$A T@U) (|length#0@@10| Int) (|a#0@@84| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.seq_alloc_init$A) TyType) (= (type |a#0@@84|) BoxType)) (or (|LinearSequence__i.__default.seq__alloc__init#canCall| LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|) (and (and (<= (LitInt 0) |length#0@@10|) (< |length#0@@10| 18446744073709551616)) ($IsBox |a#0@@84| LinearSequence_i._default.seq_alloc_init$A)))) (and (and (= (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|)) |length#0@@10|) (forall ((|i#0@@85| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@85|) (< |i#0@@85| (|Seq#Length| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|)))) (= (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|) |i#0@@85|) |a#0@@84|)) :qid |LinearSequenceidfy.22:22| :skolemid |2511| :pattern ( (|Seq#Index| (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|) |i#0@@85|)) ))) ($Is (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|) (TSeq LinearSequence_i._default.seq_alloc_init$A)))) :qid |unknown.0:0| :skolemid |2512| :pattern ( (LinearSequence__i.__default.seq__alloc__init LinearSequence_i._default.seq_alloc_init$A |length#0@@10| |a#0@@84|)) ))))
(assert (forall ((LinearSequence_i._default.seq_alloc_init$A@@0 T@U) (|length#0@@11| Int) (|a#0@@85| T@U) ) (!  (=> (and (= (type LinearSequence_i._default.seq_alloc_init$A@@0) TyType) (= (type |a#0@@85|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@11|) (< |length#0@@11| 18446744073709551616)) ($IsBox |a#0@@85| LinearSequence_i._default.seq_alloc_init$A@@0)) (= (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@11| |a#0@@85|) true))) :qid |unknown.0:0| :skolemid |2513| :pattern ( (|LinearSequence__i.__default.seq__alloc__init#requires| LinearSequence_i._default.seq_alloc_init$A@@0 |length#0@@11| |a#0@@85|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseqs$A T@U) (|l#0@@5| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A) TyType) (= (type |l#0@@5|) BoxType)) (or (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseqs$A |l#0@@5|) ($IsBox |l#0@@5| (|#$lseq| LinearSequence_i._default.lseqs$A)))) (and (= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_i._default.lseqs$A |l#0@@5|))) ($Is (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|) (TSeq LinearSequence_i._default.lseqs$A)))) :qid |unknown.0:0| :skolemid |2514| :pattern ( (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseqs$A |l#0@@5|)) ))))
(assert (forall ((LinearSequence_i._default.lseqs$A@@0 T@U) (|l#0@@6| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseqs$A@@0) TyType) (= (type |l#0@@6|) BoxType)) ($IsBox |l#0@@6| (|#$lseq| LinearSequence_i._default.lseqs$A@@0))) (= (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@6|) true)) :qid |unknown.0:0| :skolemid |2515| :pattern ( (|LinearSequence__i.__default.lseqs#requires| LinearSequence_i._default.lseqs$A@@0 |l#0@@6|)) )))
(assert (forall ((arg0@@501 T@U) (arg1@@244 T@U) ) (! (= (type (LinearSequence__i.__default.imagine__lseq arg0@@501 arg1@@244)) BoxType) :qid |funType:LinearSequence__i.__default.imagine__lseq| :pattern ( (LinearSequence__i.__default.imagine__lseq arg0@@501 arg1@@244)) )))
(assert  (=> true (forall ((LinearSequence_i._default.imagine_lseq$A T@U) (|s#0@@65| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A) TyType) (= (type |s#0@@65|) (SeqType BoxType))) (or (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.imagine_lseq$A |s#0@@65|) ($Is |s#0@@65| (TSeq LinearSequence_i._default.imagine_lseq$A)))) (and (and (|Seq#Equal| (LinearSequence__i.__default.lseqs LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@65|)) |s#0@@65|) (forall ((|i#0@@86| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@86|) (< |i#0@@86| (|Seq#Length| |s#0@@65|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@65|)) |i#0@@86|))))) :qid |LinearSequenceidfy.37:20| :skolemid |2516| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.imagine_lseq$A (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@65|)) |i#0@@86|))) ))) ($IsBox (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@65|) (|#$lseq| LinearSequence_i._default.imagine_lseq$A)))) :qid |unknown.0:0| :skolemid |2517| :pattern ( (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.imagine_lseq$A |s#0@@65|)) ))))
(assert (forall ((LinearSequence_i._default.imagine_lseq$A@@0 T@U) (|s#0@@66| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.imagine_lseq$A@@0) TyType) (= (type |s#0@@66|) (SeqType BoxType))) ($Is |s#0@@66| (TSeq LinearSequence_i._default.imagine_lseq$A@@0))) (= (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@66|) true)) :qid |unknown.0:0| :skolemid |2518| :pattern ( (|LinearSequence__i.__default.imagine__lseq#requires| LinearSequence_i._default.imagine_lseq$A@@0 |s#0@@66|)) )))
(assert (forall ((arg0@@502 T@U) (arg1@@245 T@U) ) (! (= (type (LinearSequence__i.__default.linLast arg0@@502 arg1@@245)) BoxType) :qid |funType:LinearSequence__i.__default.linLast| :pattern ( (LinearSequence__i.__default.linLast arg0@@502 arg1@@245)) )))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A T@U) (|l#0@@7| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A) TyType) (= (type |l#0@@7|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A |l#0@@7|) (and ($IsBox |l#0@@7| (|#$lseq| LinearSequence_i._default.linLast$A)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A |l#0@@7|))))) ($IsBox (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@7|) LinearSequence_i._default.linLast$A)) :qid |unknown.0:0| :skolemid |2520| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A |l#0@@7|)) ))))
(assert (forall ((LinearSequence_i._default.linLast$A@@0 T@U) (|l#0@@8| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@0) TyType) (= (type |l#0@@8|) BoxType)) ($IsBox |l#0@@8| (|#$lseq| LinearSequence_i._default.linLast$A@@0))) (= (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@8|) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@0 |l#0@@8|)))) :qid |unknown.0:0| :skolemid |2521| :pattern ( (|LinearSequence__i.__default.linLast#requires| LinearSequence_i._default.linLast$A@@0 |l#0@@8|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@1 T@U) (|l#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@1) TyType) (= (type |l#0@@9|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (and ($IsBox |l#0@@9| (|#$lseq| LinearSequence_i._default.linLast$A@@1)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@9|))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@1 |l#0@@9|)) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@1 |l#0@@9|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@1 |l#0@@9|) 1))))) :qid |unknown.0:0| :skolemid |2522| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@1 |l#0@@9|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.linLast$A@@2 T@U) (|l#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.linLast$A@@2) TyType) (= (type |l#0@@10|) BoxType)) (or (|LinearSequence__i.__default.linLast#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (and ($IsBox |l#0@@10| (|#$lseq| LinearSequence_i._default.linLast$A@@2)) (U_2_bool (Lit (bool_2_U (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|))))))))) (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|))) (= (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|)) 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2523| :pattern ( (LinearSequence__i.__default.linLast LinearSequence_i._default.linLast$A@@2 (Lit |l#0@@10|))) ))))
(assert (forall ((arg0@@503 T@U) (arg1@@246 T@U) ) (! (= (type (LinearSequence__i.__default.ldroplast arg0@@503 arg1@@246)) BoxType) :qid |funType:LinearSequence__i.__default.ldroplast| :pattern ( (LinearSequence__i.__default.ldroplast arg0@@503 arg1@@246)) )))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A T@U) (|l#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A) TyType) (= (type |l#0@@11|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A |l#0@@11|) (and ($IsBox |l#0@@11| (|#$lseq| LinearSequence_i._default.ldroplast$A)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@11|))))) (and (and (= (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A |l#0@@11|) (+ (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) 1)) (forall ((|i#0@@87| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) |i#0@@87|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@11|) |i#0@@87|)))) :qid |LinearSequenceidfy.58:20| :skolemid |2524| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A |l#0@@11|) |i#0@@87|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) |i#0@@87|)) ))) ($IsBox (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|) (|#$lseq| LinearSequence_i._default.ldroplast$A)))) :qid |unknown.0:0| :skolemid |2525| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A |l#0@@11|)) ))))
(assert (forall ((LinearSequence_i._default.ldroplast$A@@0 T@U) (|l#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@0) TyType) (= (type |l#0@@12|) BoxType)) ($IsBox |l#0@@12| (|#$lseq| LinearSequence_i._default.ldroplast$A@@0))) (= (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|)))) :qid |unknown.0:0| :skolemid |2526| :pattern ( (|LinearSequence__i.__default.ldroplast#requires| LinearSequence_i._default.ldroplast$A@@0 |l#0@@12|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@1 T@U) (|l#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@1) TyType) (= (type |l#0@@13|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (and ($IsBox |l#0@@13| (|#$lseq| LinearSequence_i._default.ldroplast$A@@1)) (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|)) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) 1)))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@1 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|) 1)))))) :qid |unknown.0:0| :skolemid |2527| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@1 |l#0@@13|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.ldroplast$A@@2 T@U) (|l#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.ldroplast$A@@2) TyType) (= (type |l#0@@14|) BoxType)) (or (|LinearSequence__i.__default.ldroplast#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (and ($IsBox |l#0@@14| (|#$lseq| LinearSequence_i._default.ldroplast$A@@2)) (U_2_bool (Lit (bool_2_U (< 0 (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|))))))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|))) (|LinearSequence__i.__default.imagine__lseq#canCall| LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) 1))))) (= (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LinearSequence__i.__default.imagine__lseq LinearSequence_i._default.ldroplast$A@@2 (|Seq#Take| (LinearSequence__i.__default.lseqs LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) (LitInt (- (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|)) 1))))))) :qid |unknown.0:0| :weight 3 :skolemid |2528| :pattern ( (LinearSequence__i.__default.ldroplast LinearSequence_i._default.ldroplast$A@@2 (Lit |l#0@@14|))) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A T@U) (|l#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A) TyType) (= (type |l#0@@15|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A |l#0@@15|) ($IsBox |l#0@@15| (|#$lseq| LinearSequence_i._default.lseq_has_all$A)))) true) :qid |unknown.0:0| :skolemid |2529| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A |l#0@@15|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_has_all$A@@0 T@U) (|l#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@0) TyType) (= (type |l#0@@16|) BoxType)) ($IsBox |l#0@@16| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@0))) (= (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@16|) true)) :qid |unknown.0:0| :skolemid |2530| :pattern ( (|LinearSequence__i.__default.lseq__has__all#requires| LinearSequence_i._default.lseq_has_all$A@@0 |l#0@@16|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@1 T@U) (|l#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@1) TyType) (= (type |l#0@@17|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) ($IsBox |l#0@@17| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@1)))) (and (forall ((|i#0@@88| Int) ) (!  (=> (<= (LitInt 0) |i#0@@88|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) (=> (< |i#0@@88| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|)) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|)))) :qid |LinearSequenceidfy.80:12| :skolemid |2532| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@88|))) )) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) (forall ((|i#0@@89| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@89|))))) :qid |LinearSequenceidfy.80:12| :skolemid |2531| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|) |i#0@@89|))) ))))) :qid |unknown.0:0| :skolemid |2533| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@1 |l#0@@17|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_has_all$A@@2 T@U) (|l#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_has_all$A@@2) TyType) (= (type |l#0@@18|) BoxType)) (or (|LinearSequence__i.__default.lseq__has__all#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) ($IsBox |l#0@@18| (|#$lseq| LinearSequence_i._default.lseq_has_all$A@@2)))) (and (forall ((|i#1@@12| Int) ) (!  (=> (<= (LitInt 0) |i#1@@12|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) (=> (< |i#1@@12| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))) (|LinearExtern.__default.lseq__has#canCall| LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))))) :qid |LinearSequenceidfy.80:12| :skolemid |2535| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@18|) |i#1@@12|))) )) (= (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))) |i#1@@13|))))) :qid |LinearSequenceidfy.80:12| :skolemid |2534| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_has_all$A@@2 |l#0@@18|) |i#1@@13|))) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2536| :pattern ( (LinearSequence__i.__default.lseq__has__all LinearSequence_i._default.lseq_has_all$A@@2 (Lit |l#0@@18|))) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length_as_uint64$A T@U) (|s#0@@67| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A) TyType) (= (type |s#0@@67|) BoxType)) (or (|LinearSequence__i.__default.lseq__length__as__uint64#canCall| LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|) (and ($IsBox |s#0@@67| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A)) (<= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|)) (LitInt 18446744073709551615))))) (and (= (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|))) (and (<= (LitInt 0) (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|)) (< (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2537| :pattern ( (LinearSequence__i.__default.lseq__length__as__uint64 LinearSequence_i._default.lseq_length_as_uint64$A |s#0@@67|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_length_as_uint64$A@@0 T@U) (|s#0@@68| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length_as_uint64$A@@0) TyType) (= (type |s#0@@68|) BoxType)) ($IsBox |s#0@@68| (|#$lseq| LinearSequence_i._default.lseq_length_as_uint64$A@@0))) (= (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@68|) (<= (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@68|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |2538| :pattern ( (|LinearSequence__i.__default.lseq__length__as__uint64#requires| LinearSequence_i._default.lseq_length_as_uint64$A@@0 |s#0@@68|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A T@U) (|s#0@@69| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A) TyType) (= (type |s#0@@69|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A |s#0@@69|) ($IsBox |s#0@@69| (|#$lseq| LinearSequence_i._default.lseq_length$A)))) (<= (LitInt 0) (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@69|))) :qid |unknown.0:0| :skolemid |2540| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A |s#0@@69|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_length$A@@0 T@U) (|s#0@@70| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@0) TyType) (= (type |s#0@@70|) BoxType)) ($IsBox |s#0@@70| (|#$lseq| LinearSequence_i._default.lseq_length$A@@0))) (= (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@70|) true)) :qid |unknown.0:0| :skolemid |2541| :pattern ( (|LinearSequence__i.__default.lseq__length#requires| LinearSequence_i._default.lseq_length$A@@0 |s#0@@70|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@1 T@U) (|s#0@@71| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@1) TyType) (= (type |s#0@@71|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@71|) ($IsBox |s#0@@71| (|#$lseq| LinearSequence_i._default.lseq_length$A@@1)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@1 |s#0@@71|) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@71|) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@1 |s#0@@71|))))) :qid |unknown.0:0| :skolemid |2542| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@1 |s#0@@71|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_length$A@@2 T@U) (|s#0@@72| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_length$A@@2) TyType) (= (type |s#0@@72|) BoxType)) (or (|LinearSequence__i.__default.lseq__length#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@72|)) ($IsBox |s#0@@72| (|#$lseq| LinearSequence_i._default.lseq_length$A@@2)))) (and (|LinearSequence__i.__default.lseqs#canCall| LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@72|)) (= (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@72|)) (|Seq#Length| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@72|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2543| :pattern ( (LinearSequence__i.__default.lseq__length LinearSequence_i._default.lseq_length$A@@2 (Lit |s#0@@72|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A| T@U) (|s#0@@73| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A|) TyType) (= (type |s#0@@73|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@73|) ($IsBox |s#0@@73| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A|)))) (<= (LitInt 0) (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@73|))) :qid |unknown.0:0| :skolemid |2544| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A| |s#0@@73|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@0| T@U) (|s#0@@74| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@0|) TyType) (= (type |s#0@@74|) BoxType)) ($IsBox |s#0@@74| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@0|))) (= (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@74|) true)) :qid |unknown.0:0| :skolemid |2545| :pattern ( (|LinearSequence__i.__default.operator_kcardinality_qlseq#requires| |LinearSequence_i._default.operator'cardinality?lseq$A@@0| |s#0@@74|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@1| T@U) (|s#0@@75| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@1|) TyType) (= (type |s#0@@75|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@75|) ($IsBox |s#0@@75| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@1|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@75|) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@75|) (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@75|)))) :qid |unknown.0:0| :skolemid |2546| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@1| |s#0@@75|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'cardinality?lseq$A@@2| T@U) (|s#0@@76| T@U) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'cardinality?lseq$A@@2|) TyType) (= (type |s#0@@76|) BoxType)) (or (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@76|)) ($IsBox |s#0@@76| (|#$lseq| |LinearSequence_i._default.operator'cardinality?lseq$A@@2|)))) (and (|LinearSequence__i.__default.lseq__length#canCall| |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@76|)) (= (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@76|)) (LitInt (LinearSequence__i.__default.lseq__length |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@76|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2547| :pattern ( (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'cardinality?lseq$A@@2| (Lit |s#0@@76|))) ))))
(assert (forall ((arg0@@504 T@U) (arg1@@247 T@U) (arg2@@146 Int) ) (! (= (type (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@504 arg1@@247 arg2@@146)) BoxType) :qid |funType:LinearSequence__i.__default.operator_ksubscript_qlseq| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq arg0@@504 arg1@@247 arg2@@146)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A| T@U) (|s#0@@77| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A|) TyType) (= (type |s#0@@77|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@77| |i#0@@90|) (and (and ($IsBox |s#0@@77| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A|)) (<= (LitInt 0) |i#0@@90|)) (< |i#0@@90| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@77|))))) ($IsBox (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@77| |i#0@@90|) |LinearSequence_i._default.operator'subscript?lseq$A|)) :qid |unknown.0:0| :skolemid |2548| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A| |s#0@@77| |i#0@@90|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@0| T@U) (|s#0@@78| T@U) (|i#0@@91| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@0|) TyType) (= (type |s#0@@78|) BoxType)) (and ($IsBox |s#0@@78| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@0|)) (<= (LitInt 0) |i#0@@91|))) (= (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@78| |i#0@@91|) (< |i#0@@91| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@78|)))) :qid |unknown.0:0| :skolemid |2549| :pattern ( (|LinearSequence__i.__default.operator_ksubscript_qlseq#requires| |LinearSequence_i._default.operator'subscript?lseq$A@@0| |s#0@@78| |i#0@@91|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@1| T@U) (|s#0@@79| T@U) (|i#0@@92| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@1|) TyType) (= (type |s#0@@79|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79| |i#0@@92|) (and (and ($IsBox |s#0@@79| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@1|)) (<= (LitInt 0) |i#0@@92|)) (< |i#0@@92| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79| |i#0@@92|) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79|) |i#0@@92|)))) :qid |unknown.0:0| :skolemid |2550| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@1| |s#0@@79| |i#0@@92|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@2| T@U) (|s#0@@80| T@U) (|i#0@@93| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@2|) TyType) (= (type |s#0@@80|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80| (LitInt |i#0@@93|)) (and (and ($IsBox |s#0@@80| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@2|)) (<= (LitInt 0) |i#0@@93|)) (< |i#0@@93| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80|))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80|) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80| (LitInt |i#0@@93|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80|) (LitInt |i#0@@93|))))) :qid |unknown.0:0| :weight 3 :skolemid |2551| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@2| |s#0@@80| (LitInt |i#0@@93|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'subscript?lseq$A@@3| T@U) (|s#0@@81| T@U) (|i#0@@94| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'subscript?lseq$A@@3|) TyType) (= (type |s#0@@81|) BoxType)) (or (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|) (LitInt |i#0@@94|)) (and (and ($IsBox |s#0@@81| (|#$lseq| |LinearSequence_i._default.operator'subscript?lseq$A@@3|)) (<= (LitInt 0) |i#0@@94|)) (U_2_bool (Lit (bool_2_U (< |i#0@@94| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|))))))))) (and (|LinearSequence__i.__default.lseqs#canCall| |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|)) (= (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|) (LitInt |i#0@@94|)) (|Seq#Index| (LinearSequence__i.__default.lseqs |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|)) (LitInt |i#0@@94|))))) :qid |unknown.0:0| :weight 3 :skolemid |2552| :pattern ( (LinearSequence__i.__default.operator_ksubscript_qlseq |LinearSequence_i._default.operator'subscript?lseq$A@@3| (Lit |s#0@@81|) (LitInt |i#0@@94|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A| T@U) (|s#0@@82| T@U) (|i#0@@95| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A|) TyType) (= (type |s#0@@82|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A| |s#0@@82| |i#0@@95|) (and (and ($IsBox |s#0@@82| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A|)) (<= (LitInt 0) |i#0@@95|)) (< |i#0@@95| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@82|))))) true) :qid |unknown.0:0| :skolemid |2553| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A| |s#0@@82| |i#0@@95|)) ))))
(assert (forall ((|LinearSequence_i._default.operator'in?lseq$A@@0| T@U) (|s#0@@83| T@U) (|i#0@@96| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@0|) TyType) (= (type |s#0@@83|) BoxType)) (and ($IsBox |s#0@@83| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@0|)) (<= (LitInt 0) |i#0@@96|))) (= (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@83| |i#0@@96|) (< |i#0@@96| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@83|)))) :qid |unknown.0:0| :skolemid |2554| :pattern ( (|LinearSequence__i.__default.operator_kin_qlseq#requires| |LinearSequence_i._default.operator'in?lseq$A@@0| |s#0@@83| |i#0@@96|)) )))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@1| T@U) (|s#0@@84| T@U) (|i#0@@97| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@1|) TyType) (= (type |s#0@@84|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84| |i#0@@97|) (and (and ($IsBox |s#0@@84| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@1|)) (<= (LitInt 0) |i#0@@97|)) (< |i#0@@97| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84| |i#0@@97|) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84|) |i#0@@97|)))))) :qid |unknown.0:0| :skolemid |2555| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@1| |s#0@@84| |i#0@@97|)) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@2| T@U) (|s#0@@85| T@U) (|i#0@@98| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@2|) TyType) (= (type |s#0@@85|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85| (LitInt |i#0@@98|)) (and (and ($IsBox |s#0@@85| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@2|)) (<= (LitInt 0) |i#0@@98|)) (< |i#0@@98| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85|))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85|) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85| (LitInt |i#0@@98|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85|) (LitInt |i#0@@98|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2556| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@2| |s#0@@85| (LitInt |i#0@@98|))) ))))
(assert  (=> true (forall ((|LinearSequence_i._default.operator'in?lseq$A@@3| T@U) (|s#0@@86| T@U) (|i#0@@99| Int) ) (!  (=> (and (and (= (type |LinearSequence_i._default.operator'in?lseq$A@@3|) TyType) (= (type |s#0@@86|) BoxType)) (or (|LinearSequence__i.__default.operator_kin_qlseq#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|) (LitInt |i#0@@99|)) (and (and ($IsBox |s#0@@86| (|#$lseq| |LinearSequence_i._default.operator'in?lseq$A@@3|)) (<= (LitInt 0) |i#0@@99|)) (U_2_bool (Lit (bool_2_U (< |i#0@@99| (LinearSequence__i.__default.operator_kcardinality_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|))))))))) (and (|LinearExtern.__default.lseq__has#canCall| |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|)) (= (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|) (LitInt |i#0@@99|)) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|))) (LitInt |i#0@@99|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2557| :pattern ( (LinearSequence__i.__default.operator_kin_qlseq |LinearSequence_i._default.operator'in?lseq$A@@3| (Lit |s#0@@86|) (LitInt |i#0@@99|))) ))))
(assert (forall ((arg0@@505 T@U) (arg1@@248 T@U) (arg2@@147 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__add arg0@@505 arg1@@248 arg2@@147)) BoxType) :qid |funType:LinearSequence__i.__default.lseq__add| :pattern ( (LinearSequence__i.__default.lseq__add arg0@@505 arg1@@248 arg2@@147)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_add$A T@U) (|l#0@@19| T@U) (|r#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A) TyType) (= (type |l#0@@19|) BoxType)) (= (type |r#0|) BoxType)) (or (|LinearSequence__i.__default.lseq__add#canCall| LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|) (and ($IsBox |l#0@@19| (|#$lseq| LinearSequence_i._default.lseq_add$A)) ($IsBox |r#0| (|#$lseq| LinearSequence_i._default.lseq_add$A))))) ($IsBox (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|) (|#$lseq| LinearSequence_i._default.lseq_add$A))) :qid |unknown.0:0| :skolemid |2558| :pattern ( (LinearSequence__i.__default.lseq__add LinearSequence_i._default.lseq_add$A |l#0@@19| |r#0|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_add$A@@0 T@U) (|l#0@@20| T@U) (|r#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_i._default.lseq_add$A@@0) TyType) (= (type |l#0@@20|) BoxType)) (= (type |r#0@@0|) BoxType)) (and ($IsBox |l#0@@20| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)) ($IsBox |r#0@@0| (|#$lseq| LinearSequence_i._default.lseq_add$A@@0)))) (= (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@20| |r#0@@0|) true)) :qid |unknown.0:0| :skolemid |2559| :pattern ( (|LinearSequence__i.__default.lseq__add#requires| LinearSequence_i._default.lseq_add$A@@0 |l#0@@20| |r#0@@0|)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@249 T@U) (arg2@@148 Int) ) (! (= (type (LinearSequence__i.__default.lseq__peek arg0@@506 arg1@@249 arg2@@148)) BoxType) :qid |funType:LinearSequence__i.__default.lseq__peek| :pattern ( (LinearSequence__i.__default.lseq__peek arg0@@506 arg1@@249 arg2@@148)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_peek$A T@U) (|s#0@@87| T@U) (|i#0@@100| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A) TyType) (= (type |s#0@@87|) BoxType)) (or (|LinearSequence__i.__default.lseq__peek#canCall| LinearSequence_i._default.lseq_peek$A |s#0@@87| |i#0@@100|) (and (and ($IsBox |s#0@@87| (|#$lseq| LinearSequence_i._default.lseq_peek$A)) (and (<= (LitInt 0) |i#0@@100|) (< |i#0@@100| 18446744073709551616))) (and (< |i#0@@100| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A |s#0@@87|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A |s#0@@87|) |i#0@@100|))))))) (and (= (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@87| |i#0@@100|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_peek$A |s#0@@87|) |i#0@@100|)) ($IsBox (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@87| |i#0@@100|) LinearSequence_i._default.lseq_peek$A))) :qid |unknown.0:0| :skolemid |2560| :pattern ( (LinearSequence__i.__default.lseq__peek LinearSequence_i._default.lseq_peek$A |s#0@@87| |i#0@@100|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_peek$A@@0 T@U) (|s#0@@88| T@U) (|i#0@@101| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_peek$A@@0) TyType) (= (type |s#0@@88|) BoxType)) (and ($IsBox |s#0@@88| (|#$lseq| LinearSequence_i._default.lseq_peek$A@@0)) (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@88| |i#0@@101|)  (and (< |i#0@@101| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_peek$A@@0 |s#0@@88|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_peek$A@@0 |s#0@@88|) |i#0@@101|)))))) :qid |unknown.0:0| :skolemid |2561| :pattern ( (|LinearSequence__i.__default.lseq__peek#requires| LinearSequence_i._default.lseq_peek$A@@0 |s#0@@88| |i#0@@101|)) )))
(assert (forall ((arg0@@507 T@U) (arg1@@250 T@U) ) (! (= (type (LinearSequence__i.__default.lseq__free__fun arg0@@507 arg1@@250)) DatatypeTypeType) :qid |funType:LinearSequence__i.__default.lseq__free__fun| :pattern ( (LinearSequence__i.__default.lseq__free__fun arg0@@507 arg1@@250)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_free_fun$A T@U) (|s#0@@89| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A) TyType) (= (type |s#0@@89|) BoxType)) (or (|LinearSequence__i.__default.lseq__free__fun#canCall| LinearSequence_i._default.lseq_free_fun$A |s#0@@89|) (and ($IsBox |s#0@@89| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A)) (forall ((|i#0@@102| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A |s#0@@89|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@89|) |i#0@@102|))))) :qid |LinearSequenceidfy.146:23| :skolemid |2567| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A |s#0@@89|) |i#0@@102|))) ))))) ($Is (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@89|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |2568| :pattern ( (LinearSequence__i.__default.lseq__free__fun LinearSequence_i._default.lseq_free_fun$A |s#0@@89|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_free_fun$A@@0 T@U) (|s#0@@90| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_free_fun$A@@0) TyType) (= (type |s#0@@90|) BoxType)) ($IsBox |s#0@@90| (|#$lseq| LinearSequence_i._default.lseq_free_fun$A@@0))) (= (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@90|) (forall ((|i#1@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@90|))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@90|) |i#1@@14|))))) :qid |LinearSequenceidfy.146:23| :skolemid |2569| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@90|) |i#1@@14|))) )))) :qid |unknown.0:0| :skolemid |2570| :pattern ( (|LinearSequence__i.__default.lseq__free__fun#requires| LinearSequence_i._default.lseq_free_fun$A@@0 |s#0@@90|)) )))
(assert (forall ((arg0@@508 T@U) (arg1@@251 T@U) (arg2@@149 Int) ) (! (= (type (LinearSequence__i.__default.lseq__take__fun arg0@@508 arg1@@251 arg2@@149)) DatatypeTypeType) :qid |funType:LinearSequence__i.__default.lseq__take__fun| :pattern ( (LinearSequence__i.__default.lseq__take__fun arg0@@508 arg1@@251 arg2@@149)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_take_fun$A T@U) (|s1#0@@5| T@U) (|i#0@@103| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A) TyType) (= (type |s1#0@@5|) BoxType)) (or (|LinearSequence__i.__default.lseq__take__fun#canCall| LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|) (and (and ($IsBox |s1#0@@5| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A)) (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| 18446744073709551616))) (and (< |i#0@@103| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@103|))))))) (and (and (and (= (_System.Tuple2OLL._1 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|)) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@103|)) (|Seq#Equal| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|))) (|Seq#Update| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |i#0@@103| ($Box (Lit (bool_2_U false)))))) (forall ((|j#0@@13| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@13|) (and (< |j#0@@13| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|)) (not (= |j#0@@13| |i#0@@103|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|))) |j#0@@13|) (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0@@13|))) :qid |LinearSequenceidfy.199:22| :skolemid |2579| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A |s1#0@@5|) |j#0@@13|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs LinearSequence_i._default.lseq_take_fun$A (_System.Tuple2OLL._0 (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|))) |j#0@@13|)) ))) ($Is (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_i._default.lseq_take_fun$A) LinearSequence_i._default.lseq_take_fun$A)))) :qid |unknown.0:0| :skolemid |2580| :pattern ( (LinearSequence__i.__default.lseq__take__fun LinearSequence_i._default.lseq_take_fun$A |s1#0@@5| |i#0@@103|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_take_fun$A@@0 T@U) (|s1#0@@6| T@U) (|i#0@@104| Int) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_take_fun$A@@0) TyType) (= (type |s1#0@@6|) BoxType)) (and ($IsBox |s1#0@@6| (|#$lseq| LinearSequence_i._default.lseq_take_fun$A@@0)) (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| 18446744073709551616)))) (= (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@104|)  (and (< |i#0@@104| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|)) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6|) |i#0@@104|)))))) :qid |unknown.0:0| :skolemid |2581| :pattern ( (|LinearSequence__i.__default.lseq__take__fun#requires| LinearSequence_i._default.lseq_take_fun$A@@0 |s1#0@@6| |i#0@@104|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A T@U) (|s#0@@91| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A) TyType) (= (type |s#0@@91|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A |s#0@@91|) ($IsBox |s#0@@91| (|#$lseq| LinearSequence_i._default.lseq_full$A)))) true) :qid |unknown.0:0| :skolemid |2584| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A |s#0@@91|)) ))))
(assert (forall ((LinearSequence_i._default.lseq_full$A@@0 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@0) TyType) (= (type |s#0@@92|) BoxType)) ($IsBox |s#0@@92| (|#$lseq| LinearSequence_i._default.lseq_full$A@@0))) (= (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@92|) true)) :qid |unknown.0:0| :skolemid |2585| :pattern ( (|LinearSequence__i.__default.lseq__full#requires| LinearSequence_i._default.lseq_full$A@@0 |s#0@@92|)) )))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@1 T@U) (|s#0@@93| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@1) TyType) (= (type |s#0@@93|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|) ($IsBox |s#0@@93| (|#$lseq| LinearSequence_i._default.lseq_full$A@@1)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@105| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@105|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|)) (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@1 |s#0@@93| |i#0@@105|))) :qid |LinearSequenceidfy.230:18| :skolemid |2587| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|) |i#0@@105|))) ))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|)  (and true (forall ((|i#0@@106| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|) |i#0@@106|)))) :qid |LinearSequenceidfy.230:18| :skolemid |2586| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|) |i#0@@106|))) )))))) :qid |unknown.0:0| :skolemid |2588| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@1 |s#0@@93|)) ))))
(assert  (=> true (forall ((LinearSequence_i._default.lseq_full$A@@2 T@U) (|s#0@@94| T@U) ) (!  (=> (and (and (= (type LinearSequence_i._default.lseq_full$A@@2) TyType) (= (type |s#0@@94|) BoxType)) (or (|LinearSequence__i.__default.lseq__full#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|)) ($IsBox |s#0@@94| (|#$lseq| LinearSequence_i._default.lseq_full$A@@2)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@15| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@15|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|))) (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|)))) (|LinearSequence__i.__default.operator_kin_qlseq#canCall| LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|) |i#1@@15|))) :qid |LinearSequenceidfy.230:18| :skolemid |2590| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@94|) |i#1@@15|))) ))) (= (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|))  (and true (forall ((|i#1@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (LinearSequence__i.__default.operator_kcardinality_qlseq LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|))) |i#1@@16|)))) :qid |LinearSequenceidfy.230:18| :skolemid |2589| :pattern ( ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has LinearSequence_i._default.lseq_full$A@@2 |s#0@@94|) |i#1@@16|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2591| :pattern ( (LinearSequence__i.__default.lseq__full LinearSequence_i._default.lseq_full$A@@2 (Lit |s#0@@94|))) ))))
(assert (= (type Tclass.Inout.__default) TyType))
(assert (= (Tag Tclass.Inout.__default) Tagclass.Inout.__default))
(assert (= (TagFamily Tclass.Inout.__default) tytagFamily$_default))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.Inout.__default)) (and (= ($Box ($Unbox refType bx@@142)) bx@@142) ($Is ($Unbox refType bx@@142) Tclass.Inout.__default))) :qid |unknown.0:0| :skolemid |2625| :pattern ( ($IsBox bx@@142 Tclass.Inout.__default)) )))
(assert (forall (($o@@41 T@U) ) (!  (=> (= (type $o@@41) refType) (= ($Is $o@@41 Tclass.Inout.__default)  (or (= $o@@41 null) (= (dtype $o@@41) Tclass.Inout.__default)))) :qid |unknown.0:0| :skolemid |2626| :pattern ( ($Is $o@@41 Tclass.Inout.__default)) )))
(assert (forall (($o@@42 T@U) ($h@@98 T@U) ) (!  (=> (and (= (type $o@@42) refType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@42 Tclass.Inout.__default $h@@98)  (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@98 $o@@42) alloc))))) :qid |unknown.0:0| :skolemid |2627| :pattern ( ($IsAlloc $o@@42 Tclass.Inout.__default $h@@98)) )))
(assert (= (type Tclass.SetBijectivity.__default) TyType))
(assert (= (Tag Tclass.SetBijectivity.__default) Tagclass.SetBijectivity.__default))
(assert (= (TagFamily Tclass.SetBijectivity.__default) tytagFamily$_default))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.SetBijectivity.__default)) (and (= ($Box ($Unbox refType bx@@143)) bx@@143) ($Is ($Unbox refType bx@@143) Tclass.SetBijectivity.__default))) :qid |unknown.0:0| :skolemid |2629| :pattern ( ($IsBox bx@@143 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@43 T@U) ) (!  (=> (= (type $o@@43) refType) (= ($Is $o@@43 Tclass.SetBijectivity.__default)  (or (= $o@@43 null) (= (dtype $o@@43) Tclass.SetBijectivity.__default)))) :qid |unknown.0:0| :skolemid |2630| :pattern ( ($Is $o@@43 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@44 T@U) ($h@@99 T@U) ) (!  (=> (and (= (type $o@@44) refType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@44 Tclass.SetBijectivity.__default $h@@99)  (or (= $o@@44 null) (U_2_bool (MapType1Select (MapType0Select $h@@99 $o@@44) alloc))))) :qid |unknown.0:0| :skolemid |2631| :pattern ( ($IsAlloc $o@@44 Tclass.SetBijectivity.__default $h@@99)) )))
(assert (= (type Tclass.NativeArithmetic.__default) TyType))
(assert (= (Tag Tclass.NativeArithmetic.__default) Tagclass.NativeArithmetic.__default))
(assert (= (TagFamily Tclass.NativeArithmetic.__default) tytagFamily$_default))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.NativeArithmetic.__default)) (and (= ($Box ($Unbox refType bx@@144)) bx@@144) ($Is ($Unbox refType bx@@144) Tclass.NativeArithmetic.__default))) :qid |unknown.0:0| :skolemid |2632| :pattern ( ($IsBox bx@@144 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@45 T@U) ) (!  (=> (= (type $o@@45) refType) (= ($Is $o@@45 Tclass.NativeArithmetic.__default)  (or (= $o@@45 null) (= (dtype $o@@45) Tclass.NativeArithmetic.__default)))) :qid |unknown.0:0| :skolemid |2633| :pattern ( ($Is $o@@45 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@46 T@U) ($h@@100 T@U) ) (!  (=> (and (= (type $o@@46) refType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@46 Tclass.NativeArithmetic.__default $h@@100)  (or (= $o@@46 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@46) alloc))))) :qid |unknown.0:0| :skolemid |2634| :pattern ( ($IsAlloc $o@@46 Tclass.NativeArithmetic.__default $h@@100)) )))
(assert  (=> true (forall ((|a#0@@86| Int) (|b#0@@48| Int) ) (!  (=> (or (|NativeArithmetic.__default.u64add#canCall| |a#0@@86| |b#0@@48|) (and (and (<= (LitInt 0) |a#0@@86|) (< |a#0@@86| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@48|) (< |b#0@@48| 18446744073709551616)))) (and (= (NativeArithmetic.__default.u64add |a#0@@86| |b#0@@48|) (ite (< (+ |a#0@@86| |b#0@@48|) 18446744073709551616) (+ |a#0@@86| |b#0@@48|) (- (+ |a#0@@86| |b#0@@48|) 18446744073709551616))) (and (<= (LitInt 0) (NativeArithmetic.__default.u64add |a#0@@86| |b#0@@48|)) (< (NativeArithmetic.__default.u64add |a#0@@86| |b#0@@48|) 18446744073709551616)))) :qid |Arithmeticsdfy.12:10| :skolemid |2635| :pattern ( (NativeArithmetic.__default.u64add |a#0@@86| |b#0@@48|)) ))))
(assert (forall ((|a#0@@87| Int) (|b#0@@49| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@49|) (< |b#0@@49| 18446744073709551616))) (= (|NativeArithmetic.__default.u64add#requires| |a#0@@87| |b#0@@49|) true)) :qid |Arithmeticsdfy.12:10| :skolemid |2636| :pattern ( (|NativeArithmetic.__default.u64add#requires| |a#0@@87| |b#0@@49|)) )))
(assert (forall ((|a#0#0#0@@1| Int) ) (! (= (DatatypeCtorId (|#LinearMutableMapBase.Slot.Slot| |a#0#0#0@@1|)) |##LinearMutableMapBase.Slot.Slot|) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2637| :pattern ( (|#LinearMutableMapBase.Slot.Slot| |a#0#0#0@@1|)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (= (type d@@63) DatatypeTypeType) (= (LinearMutableMapBase.Slot.Slot_q d@@63) (= (DatatypeCtorId d@@63) |##LinearMutableMapBase.Slot.Slot|))) :qid |unknown.0:0| :skolemid |2638| :pattern ( (LinearMutableMapBase.Slot.Slot_q d@@63)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (LinearMutableMapBase.Slot.Slot_q d@@64)) (exists ((|a#1#0#0@@1| Int) ) (! (= d@@64 (|#LinearMutableMapBase.Slot.Slot| |a#1#0#0@@1|)) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2639| ))) :qid |unknown.0:0| :skolemid |2640| :pattern ( (LinearMutableMapBase.Slot.Slot_q d@@64)) )))
(assert (forall ((|a#2#0#0@@1| Int) ) (! (= ($Is (|#LinearMutableMapBase.Slot.Slot| |a#2#0#0@@1|) Tclass.LinearMutableMapBase.Slot) ($Is (int_2_U |a#2#0#0@@1|) Tclass._System.nat)) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2641| :pattern ( ($Is (|#LinearMutableMapBase.Slot.Slot| |a#2#0#0@@1|) Tclass.LinearMutableMapBase.Slot)) )))
(assert (forall ((|a#3#0#0@@1| Int) ($h@@101 T@U) ) (!  (=> (and (= (type $h@@101) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@101)) (= ($IsAlloc (|#LinearMutableMapBase.Slot.Slot| |a#3#0#0@@1|) Tclass.LinearMutableMapBase.Slot $h@@101) ($IsAlloc (int_2_U |a#3#0#0@@1|) Tclass._System.nat $h@@101))) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2642| :pattern ( ($IsAlloc (|#LinearMutableMapBase.Slot.Slot| |a#3#0#0@@1|) Tclass.LinearMutableMapBase.Slot $h@@101)) )))
(assert (forall ((d@@65 T@U) ($h@@102 T@U) ) (!  (=> (and (and (= (type d@@65) DatatypeTypeType) (= (type $h@@102) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@102) (and (LinearMutableMapBase.Slot.Slot_q d@@65) ($IsAlloc d@@65 Tclass.LinearMutableMapBase.Slot $h@@102)))) ($IsAlloc (int_2_U (LinearMutableMapBase.Slot.slot d@@65)) Tclass._System.nat $h@@102)) :qid |unknown.0:0| :skolemid |2643| :pattern ( ($IsAlloc (int_2_U (LinearMutableMapBase.Slot.slot d@@65)) Tclass._System.nat $h@@102)) )))
(assert (forall ((|a#4#0#0@@1| Int) ) (! (= (|#LinearMutableMapBase.Slot.Slot| (LitInt |a#4#0#0@@1|)) (Lit (|#LinearMutableMapBase.Slot.Slot| |a#4#0#0@@1|))) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2644| :pattern ( (|#LinearMutableMapBase.Slot.Slot| (LitInt |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@3| Int) ) (! (= (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |a#5#0#0@@3|)) |a#5#0#0@@3|) :qid |LinearMutableMapBaseidfy.52:30| :skolemid |2645| :pattern ( (|#LinearMutableMapBase.Slot.Slot| |a#5#0#0@@3|)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (|$IsA#LinearMutableMapBase.Slot| d@@66)) (LinearMutableMapBase.Slot.Slot_q d@@66)) :qid |unknown.0:0| :skolemid |2646| :pattern ( (|$IsA#LinearMutableMapBase.Slot| d@@66)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) ($Is d@@67 Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.Slot.Slot_q d@@67)) :qid |unknown.0:0| :skolemid |2647| :pattern ( (LinearMutableMapBase.Slot.Slot_q d@@67) ($Is d@@67 Tclass.LinearMutableMapBase.Slot)) )))
(assert (forall ((a@@134 T@U) (b@@84 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) true) (= (|LinearMutableMapBase.Slot#Equal| a@@134 b@@84) (= (LinearMutableMapBase.Slot.slot a@@134) (LinearMutableMapBase.Slot.slot b@@84)))) :qid |unknown.0:0| :skolemid |2648| :pattern ( (|LinearMutableMapBase.Slot#Equal| a@@134 b@@84)) )))
(assert (forall ((a@@135 T@U) (b@@85 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (= (|LinearMutableMapBase.Slot#Equal| a@@135 b@@85) (= a@@135 b@@85))) :qid |unknown.0:0| :skolemid |2649| :pattern ( (|LinearMutableMapBase.Slot#Equal| a@@135 b@@85)) )))
(assert (= (DatatypeCtorId |#LinearMutableMapBase.Item.Empty|) |##LinearMutableMapBase.Item.Empty|))
(assert (forall ((d@@68 T@U) ) (!  (=> (= (type d@@68) DatatypeTypeType) (= (LinearMutableMapBase.Item.Empty_q d@@68) (= (DatatypeCtorId d@@68) |##LinearMutableMapBase.Item.Empty|))) :qid |unknown.0:0| :skolemid |2650| :pattern ( (LinearMutableMapBase.Item.Empty_q d@@68)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) (LinearMutableMapBase.Item.Empty_q d@@69)) (= d@@69 |#LinearMutableMapBase.Item.Empty|)) :qid |unknown.0:0| :skolemid |2651| :pattern ( (LinearMutableMapBase.Item.Empty_q d@@69)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@2 T@U) ) (!  (=> (= (type LinearMutableMapBase.Item$V@@2) TyType) ($Is |#LinearMutableMapBase.Item.Empty| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@2))) :qid |unknown.0:0| :skolemid |2652| :pattern ( ($Is |#LinearMutableMapBase.Item.Empty| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@2))) )))
(assert (forall ((LinearMutableMapBase.Item$V@@3 T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase.Item$V@@3) TyType) (= (type $h@@103) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@103)) ($IsAlloc |#LinearMutableMapBase.Item.Empty| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@3) $h@@103)) :qid |unknown.0:0| :skolemid |2653| :pattern ( ($IsAlloc |#LinearMutableMapBase.Item.Empty| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@3) $h@@103)) )))
(assert (= |#LinearMutableMapBase.Item.Empty| (Lit |#LinearMutableMapBase.Item.Empty|)))
(assert (forall ((|a#11#0#0@@2| Int) (|a#11#1#0@@1| T@U) ) (!  (=> (= (type |a#11#1#0@@1|) BoxType) (= (DatatypeCtorId (|#LinearMutableMapBase.Item.Entry| |a#11#0#0@@2| |a#11#1#0@@1|)) |##LinearMutableMapBase.Item.Entry|)) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2654| :pattern ( (|#LinearMutableMapBase.Item.Entry| |a#11#0#0@@2| |a#11#1#0@@1|)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (= (type d@@70) DatatypeTypeType) (= (LinearMutableMapBase.Item.Entry_q d@@70) (= (DatatypeCtorId d@@70) |##LinearMutableMapBase.Item.Entry|))) :qid |unknown.0:0| :skolemid |2655| :pattern ( (LinearMutableMapBase.Item.Entry_q d@@70)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) (LinearMutableMapBase.Item.Entry_q d@@71)) (exists ((|a#12#0#0@@1| Int) (|a#12#1#0@@1| T@U) ) (!  (and (= (type |a#12#1#0@@1|) BoxType) (= d@@71 (|#LinearMutableMapBase.Item.Entry| |a#12#0#0@@1| |a#12#1#0@@1|))) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2656| :no-pattern (type |a#12#1#0@@1|) :no-pattern (U_2_int |a#12#1#0@@1|) :no-pattern (U_2_bool |a#12#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |2657| :pattern ( (LinearMutableMapBase.Item.Entry_q d@@71)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@4 T@U) (|a#13#0#0@@1| Int) (|a#13#1#0@@1| T@U) ) (!  (=> (and (= (type LinearMutableMapBase.Item$V@@4) TyType) (= (type |a#13#1#0@@1|) BoxType)) (= ($Is (|#LinearMutableMapBase.Item.Entry| |a#13#0#0@@1| |a#13#1#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@4))  (and ($Is (int_2_U |a#13#0#0@@1|) Tclass.NativeTypes.uint64) ($IsBox |a#13#1#0@@1| LinearMutableMapBase.Item$V@@4)))) :qid |unknown.0:0| :skolemid |2658| :pattern ( ($Is (|#LinearMutableMapBase.Item.Entry| |a#13#0#0@@1| |a#13#1#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@4))) )))
(assert (forall ((LinearMutableMapBase.Item$V@@5 T@U) (|a#14#0#0@@2| Int) (|a#14#1#0@@1| T@U) ($h@@104 T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase.Item$V@@5) TyType) (= (type |a#14#1#0@@1|) BoxType)) (= (type $h@@104) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@104)) (= ($IsAlloc (|#LinearMutableMapBase.Item.Entry| |a#14#0#0@@2| |a#14#1#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@5) $h@@104)  (and ($IsAlloc (int_2_U |a#14#0#0@@2|) Tclass.NativeTypes.uint64 $h@@104) ($IsAllocBox |a#14#1#0@@1| LinearMutableMapBase.Item$V@@5 $h@@104)))) :qid |unknown.0:0| :skolemid |2659| :pattern ( ($IsAlloc (|#LinearMutableMapBase.Item.Entry| |a#14#0#0@@2| |a#14#1#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@5) $h@@104)) )))
(assert (forall ((d@@72 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type d@@72) DatatypeTypeType) (= (type $h@@105) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@105) (and (LinearMutableMapBase.Item.Entry_q d@@72) (exists ((LinearMutableMapBase.Item$V@@6 T@U) ) (!  (and (= (type LinearMutableMapBase.Item$V@@6) TyType) ($IsAlloc d@@72 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@6) $h@@105)) :qid |unknown.0:0| :skolemid |2660| :pattern ( ($IsAlloc d@@72 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@6) $h@@105)) ))))) ($IsAlloc (int_2_U (LinearMutableMapBase.Item.key d@@72)) Tclass.NativeTypes.uint64 $h@@105)) :qid |unknown.0:0| :skolemid |2661| :pattern ( ($IsAlloc (int_2_U (LinearMutableMapBase.Item.key d@@72)) Tclass.NativeTypes.uint64 $h@@105)) )))
(assert (forall ((arg0@@509 T@U) ) (! (= (type (LinearMutableMapBase.Item.value arg0@@509)) BoxType) :qid |funType:LinearMutableMapBase.Item.value| :pattern ( (LinearMutableMapBase.Item.value arg0@@509)) )))
(assert (forall ((d@@73 T@U) (LinearMutableMapBase.Item$V@@7 T@U) ($h@@106 T@U) ) (!  (=> (and (and (and (= (type d@@73) DatatypeTypeType) (= (type LinearMutableMapBase.Item$V@@7) TyType)) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (LinearMutableMapBase.Item.Entry_q d@@73) ($IsAlloc d@@73 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@7) $h@@106)))) ($IsAllocBox (LinearMutableMapBase.Item.value d@@73) LinearMutableMapBase.Item$V@@7 $h@@106)) :qid |unknown.0:0| :skolemid |2662| :pattern ( ($IsAllocBox (LinearMutableMapBase.Item.value d@@73) LinearMutableMapBase.Item$V@@7 $h@@106)) )))
(assert (forall ((|a#15#0#0@@2| Int) (|a#15#1#0@@1| T@U) ) (!  (=> (= (type |a#15#1#0@@1|) BoxType) (= (|#LinearMutableMapBase.Item.Entry| (LitInt |a#15#0#0@@2|) (Lit |a#15#1#0@@1|)) (Lit (|#LinearMutableMapBase.Item.Entry| |a#15#0#0@@2| |a#15#1#0@@1|)))) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2663| :pattern ( (|#LinearMutableMapBase.Item.Entry| (LitInt |a#15#0#0@@2|) (Lit |a#15#1#0@@1|))) )))
(assert (forall ((|a#16#0#0@@2| Int) (|a#16#1#0@@1| T@U) ) (!  (=> (= (type |a#16#1#0@@1|) BoxType) (= (LinearMutableMapBase.Item.key (|#LinearMutableMapBase.Item.Entry| |a#16#0#0@@2| |a#16#1#0@@1|)) |a#16#0#0@@2|)) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2664| :pattern ( (|#LinearMutableMapBase.Item.Entry| |a#16#0#0@@2| |a#16#1#0@@1|)) )))
(assert (forall ((|a#17#0#0@@2| Int) (|a#17#1#0@@1| T@U) ) (!  (=> (= (type |a#17#1#0@@1|) BoxType) (= (LinearMutableMapBase.Item.value (|#LinearMutableMapBase.Item.Entry| |a#17#0#0@@2| |a#17#1#0@@1|)) |a#17#1#0@@1|)) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2665| :pattern ( (|#LinearMutableMapBase.Item.Entry| |a#17#0#0@@2| |a#17#1#0@@1|)) )))
(assert (forall ((|a#18#0#0@@2| Int) (|a#18#1#0@@1| T@U) ) (!  (=> (= (type |a#18#1#0@@1|) BoxType) (< (BoxRank |a#18#1#0@@1|) (DtRank (|#LinearMutableMapBase.Item.Entry| |a#18#0#0@@2| |a#18#1#0@@1|)))) :qid |LinearMutableMapBaseidfy.53:36| :skolemid |2666| :pattern ( (|#LinearMutableMapBase.Item.Entry| |a#18#0#0@@2| |a#18#1#0@@1|)) )))
(assert (forall ((|a#19#0#0@@2| Int) ) (! (= (DatatypeCtorId (|#LinearMutableMapBase.Item.Tombstone| |a#19#0#0@@2|)) |##LinearMutableMapBase.Item.Tombstone|) :qid |LinearMutableMapBaseidfy.53:71| :skolemid |2667| :pattern ( (|#LinearMutableMapBase.Item.Tombstone| |a#19#0#0@@2|)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (= (LinearMutableMapBase.Item.Tombstone_q d@@74) (= (DatatypeCtorId d@@74) |##LinearMutableMapBase.Item.Tombstone|))) :qid |unknown.0:0| :skolemid |2668| :pattern ( (LinearMutableMapBase.Item.Tombstone_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (LinearMutableMapBase.Item.Tombstone_q d@@75)) (exists ((|a#20#0#0@@2| Int) ) (! (= d@@75 (|#LinearMutableMapBase.Item.Tombstone| |a#20#0#0@@2|)) :qid |LinearMutableMapBaseidfy.53:71| :skolemid |2669| ))) :qid |unknown.0:0| :skolemid |2670| :pattern ( (LinearMutableMapBase.Item.Tombstone_q d@@75)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@8 T@U) (|a#21#0#0@@1| Int) ) (!  (=> (= (type LinearMutableMapBase.Item$V@@8) TyType) (= ($Is (|#LinearMutableMapBase.Item.Tombstone| |a#21#0#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@8)) ($Is (int_2_U |a#21#0#0@@1|) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |2671| :pattern ( ($Is (|#LinearMutableMapBase.Item.Tombstone| |a#21#0#0@@1|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@8))) )))
(assert (forall ((LinearMutableMapBase.Item$V@@9 T@U) (|a#22#0#0@@0| Int) ($h@@107 T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase.Item$V@@9) TyType) (= (type $h@@107) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@107)) (= ($IsAlloc (|#LinearMutableMapBase.Item.Tombstone| |a#22#0#0@@0|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@9) $h@@107) ($IsAlloc (int_2_U |a#22#0#0@@0|) Tclass.NativeTypes.uint64 $h@@107))) :qid |unknown.0:0| :skolemid |2672| :pattern ( ($IsAlloc (|#LinearMutableMapBase.Item.Tombstone| |a#22#0#0@@0|) (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@9) $h@@107)) )))
(assert (forall ((d@@76 T@U) ($h@@108 T@U) ) (!  (=> (and (and (= (type d@@76) DatatypeTypeType) (= (type $h@@108) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@108) (and (LinearMutableMapBase.Item.Tombstone_q d@@76) (exists ((LinearMutableMapBase.Item$V@@10 T@U) ) (!  (and (= (type LinearMutableMapBase.Item$V@@10) TyType) ($IsAlloc d@@76 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@10) $h@@108)) :qid |unknown.0:0| :skolemid |2673| :pattern ( ($IsAlloc d@@76 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@10) $h@@108)) ))))) ($IsAlloc (int_2_U (LinearMutableMapBase.Item.key d@@76)) Tclass.NativeTypes.uint64 $h@@108)) :qid |unknown.0:0| :skolemid |2674| :pattern ( ($IsAlloc (int_2_U (LinearMutableMapBase.Item.key d@@76)) Tclass.NativeTypes.uint64 $h@@108)) )))
(assert (forall ((|a#23#0#0| Int) ) (! (= (|#LinearMutableMapBase.Item.Tombstone| (LitInt |a#23#0#0|)) (Lit (|#LinearMutableMapBase.Item.Tombstone| |a#23#0#0|))) :qid |LinearMutableMapBaseidfy.53:71| :skolemid |2675| :pattern ( (|#LinearMutableMapBase.Item.Tombstone| (LitInt |a#23#0#0|))) )))
(assert (forall ((|a#24#0#0| Int) ) (! (= (LinearMutableMapBase.Item.key (|#LinearMutableMapBase.Item.Tombstone| |a#24#0#0|)) |a#24#0#0|) :qid |LinearMutableMapBaseidfy.53:71| :skolemid |2676| :pattern ( (|#LinearMutableMapBase.Item.Tombstone| |a#24#0#0|)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (|$IsA#LinearMutableMapBase.Item| d@@77)) (or (or (LinearMutableMapBase.Item.Empty_q d@@77) (LinearMutableMapBase.Item.Entry_q d@@77)) (LinearMutableMapBase.Item.Tombstone_q d@@77))) :qid |unknown.0:0| :skolemid |2677| :pattern ( (|$IsA#LinearMutableMapBase.Item| d@@77)) )))
(assert (forall ((LinearMutableMapBase.Item$V@@11 T@U) (d@@78 T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase.Item$V@@11) TyType) (= (type d@@78) DatatypeTypeType)) ($Is d@@78 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@11))) (or (or (LinearMutableMapBase.Item.Empty_q d@@78) (LinearMutableMapBase.Item.Entry_q d@@78)) (LinearMutableMapBase.Item.Tombstone_q d@@78))) :qid |unknown.0:0| :skolemid |2678| :pattern ( (LinearMutableMapBase.Item.Tombstone_q d@@78) ($Is d@@78 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@11))) :pattern ( (LinearMutableMapBase.Item.Entry_q d@@78) ($Is d@@78 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@11))) :pattern ( (LinearMutableMapBase.Item.Empty_q d@@78) ($Is d@@78 (Tclass.LinearMutableMapBase.Item LinearMutableMapBase.Item$V@@11))) )))
(assert (forall ((a@@136 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (LinearMutableMapBase.Item.Empty_q a@@136) (LinearMutableMapBase.Item.Empty_q b@@86))) (= (|LinearMutableMapBase.Item#Equal| a@@136 b@@86) true)) :qid |unknown.0:0| :skolemid |2679| :pattern ( (|LinearMutableMapBase.Item#Equal| a@@136 b@@86) (LinearMutableMapBase.Item.Empty_q a@@136)) :pattern ( (|LinearMutableMapBase.Item#Equal| a@@136 b@@86) (LinearMutableMapBase.Item.Empty_q b@@86)) )))
(assert (forall ((a@@137 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (LinearMutableMapBase.Item.Entry_q a@@137) (LinearMutableMapBase.Item.Entry_q b@@87))) (= (|LinearMutableMapBase.Item#Equal| a@@137 b@@87)  (and (= (LinearMutableMapBase.Item.key a@@137) (LinearMutableMapBase.Item.key b@@87)) (= (LinearMutableMapBase.Item.value a@@137) (LinearMutableMapBase.Item.value b@@87))))) :qid |unknown.0:0| :skolemid |2680| :pattern ( (|LinearMutableMapBase.Item#Equal| a@@137 b@@87) (LinearMutableMapBase.Item.Entry_q a@@137)) :pattern ( (|LinearMutableMapBase.Item#Equal| a@@137 b@@87) (LinearMutableMapBase.Item.Entry_q b@@87)) )))
(assert (forall ((a@@138 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (LinearMutableMapBase.Item.Tombstone_q a@@138) (LinearMutableMapBase.Item.Tombstone_q b@@88))) (= (|LinearMutableMapBase.Item#Equal| a@@138 b@@88) (= (LinearMutableMapBase.Item.key a@@138) (LinearMutableMapBase.Item.key b@@88)))) :qid |unknown.0:0| :skolemid |2681| :pattern ( (|LinearMutableMapBase.Item#Equal| a@@138 b@@88) (LinearMutableMapBase.Item.Tombstone_q a@@138)) :pattern ( (|LinearMutableMapBase.Item#Equal| a@@138 b@@88) (LinearMutableMapBase.Item.Tombstone_q b@@88)) )))
(assert (forall ((a@@139 T@U) (b@@89 T@U) ) (!  (=> (and (= (type a@@139) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (= (|LinearMutableMapBase.Item#Equal| a@@139 b@@89) (= a@@139 b@@89))) :qid |unknown.0:0| :skolemid |2682| :pattern ( (|LinearMutableMapBase.Item#Equal| a@@139 b@@89)) )))
(assert (= (type Tclass.LinearMutableMapBase.__default) TyType))
(assert (= (Tag Tclass.LinearMutableMapBase.__default) Tagclass.LinearMutableMapBase.__default))
(assert (= (TagFamily Tclass.LinearMutableMapBase.__default) tytagFamily$_default))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.LinearMutableMapBase.__default)) (and (= ($Box ($Unbox refType bx@@145)) bx@@145) ($Is ($Unbox refType bx@@145) Tclass.LinearMutableMapBase.__default))) :qid |unknown.0:0| :skolemid |2683| :pattern ( ($IsBox bx@@145 Tclass.LinearMutableMapBase.__default)) )))
(assert (forall (($o@@47 T@U) ) (!  (=> (= (type $o@@47) refType) (= ($Is $o@@47 Tclass.LinearMutableMapBase.__default)  (or (= $o@@47 null) (= (dtype $o@@47) Tclass.LinearMutableMapBase.__default)))) :qid |unknown.0:0| :skolemid |2684| :pattern ( ($Is $o@@47 Tclass.LinearMutableMapBase.__default)) )))
(assert (forall (($o@@48 T@U) ($h@@109 T@U) ) (!  (=> (and (= (type $o@@48) refType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@48 Tclass.LinearMutableMapBase.__default $h@@109)  (or (= $o@@48 null) (U_2_bool (MapType1Select (MapType0Select $h@@109 $o@@48) alloc))))) :qid |unknown.0:0| :skolemid |2685| :pattern ( ($IsAlloc $o@@48 Tclass.LinearMutableMapBase.__default $h@@109)) )))
(assert (forall (($ly@@288 T@U) (|a#0@@88| Int) (|b#0@@50| Int) ) (!  (=> (= (type $ly@@288) LayerTypeType) (= (LinearMutableMapBase.__default.lshift ($LS $ly@@288) |a#0@@88| |b#0@@50|) (LinearMutableMapBase.__default.lshift $ly@@288 |a#0@@88| |b#0@@50|))) :qid |LinearMutableMapBaseidfy.17:29| :skolemid |2686| :pattern ( (LinearMutableMapBase.__default.lshift ($LS $ly@@288) |a#0@@88| |b#0@@50|)) )))
(assert (forall (($ly@@289 T@U) (|a#0@@89| Int) (|b#0@@51| Int) ) (!  (=> (= (type $ly@@289) LayerTypeType) (= (LinearMutableMapBase.__default.lshift $ly@@289 |a#0@@89| |b#0@@51|) (LinearMutableMapBase.__default.lshift $LZ |a#0@@89| |b#0@@51|))) :qid |LinearMutableMapBaseidfy.17:29| :skolemid |2687| :pattern ( (LinearMutableMapBase.__default.lshift (AsFuelBottom $ly@@289) |a#0@@89| |b#0@@51|)) )))
(assert  (=> true (forall (($ly@@290 T@U) (|a#0@@90| Int) (|b#0@@52| Int) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) (or (|LinearMutableMapBase.__default.lshift#canCall| |a#0@@90| |b#0@@52|) (and (and (and (<= (LitInt 0) |a#0@@90|) (< |a#0@@90| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@52|) (< |b#0@@52| 4294967296))) (and (<= (LitInt 0) |b#0@@52|) (< |b#0@@52| 64))))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.lshift $ly@@290 |a#0@@90| |b#0@@52|)) (< (LinearMutableMapBase.__default.lshift $ly@@290 |a#0@@90| |b#0@@52|) 18446744073709551616))) :qid |LinearMutableMapBaseidfy.17:29| :skolemid |2688| :pattern ( (LinearMutableMapBase.__default.lshift $ly@@290 |a#0@@90| |b#0@@52|)) ))))
(assert (forall (($ly@@291 T@U) (|a#0@@91| Int) (|b#0@@53| Int) ) (!  (=> (= (type $ly@@291) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@91|) (< |a#0@@91| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@53|) (< |b#0@@53| 4294967296))) (= (|LinearMutableMapBase.__default.lshift#requires| $ly@@291 |a#0@@91| |b#0@@53|)  (and (<= (LitInt 0) |b#0@@53|) (< |b#0@@53| 64))))) :qid |LinearMutableMapBaseidfy.17:29| :skolemid |2689| :pattern ( (|LinearMutableMapBase.__default.lshift#requires| $ly@@291 |a#0@@91| |b#0@@53|)) )))
(assert  (=> true (forall (($ly@@292 T@U) (|a#0@@92| Int) (|b#0@@54| Int) ) (!  (=> (and (= (type $ly@@292) LayerTypeType) (or (|LinearMutableMapBase.__default.lshift#canCall| |a#0@@92| |b#0@@54|) (and (and (and (<= (LitInt 0) |a#0@@92|) (< |a#0@@92| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@54|) (< |b#0@@54| 4294967296))) (and (<= (LitInt 0) |b#0@@54|) (< |b#0@@54| 64))))) (= (LinearMutableMapBase.__default.lshift ($LS $ly@@292) |a#0@@92| |b#0@@54|) (nat_from_bv64 (bvshl ((_ int2bv 64) |a#0@@92|) ((_ int2bv 64) |b#0@@54|))))) :qid |LinearMutableMapBaseidfy.17:29| :skolemid |2690| :pattern ( (LinearMutableMapBase.__default.lshift ($LS $ly@@292) |a#0@@92| |b#0@@54|)) ))))
(assert  (=> true (forall (($ly@@293 T@U) (|a#0@@93| Int) (|b#0@@55| Int) ) (!  (=> (and (= (type $ly@@293) LayerTypeType) (or (|LinearMutableMapBase.__default.lshift#canCall| (LitInt |a#0@@93|) (LitInt |b#0@@55|)) (and (and (and (<= (LitInt 0) |a#0@@93|) (< |a#0@@93| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@55|) (< |b#0@@55| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@55|)) (< |b#0@@55| 64))))) (= (LinearMutableMapBase.__default.lshift ($LS $ly@@293) (LitInt |a#0@@93|) (LitInt |b#0@@55|)) (nat_from_bv64 (bvshl ((_ int2bv 64) (LitInt |a#0@@93|)) ((_ int2bv 64) |b#0@@55|))))) :qid |LinearMutableMapBaseidfy.17:29| :weight 3 :skolemid |2691| :pattern ( (LinearMutableMapBase.__default.lshift ($LS $ly@@293) (LitInt |a#0@@93|) (LitInt |b#0@@55|))) ))))
(assert (forall (($ly@@294 T@U) (|a#0@@94| Int) (|b#0@@56| Int) ) (!  (=> (= (type $ly@@294) LayerTypeType) (= (LinearMutableMapBase.__default.rshift ($LS $ly@@294) |a#0@@94| |b#0@@56|) (LinearMutableMapBase.__default.rshift $ly@@294 |a#0@@94| |b#0@@56|))) :qid |LinearMutableMapBaseidfy.23:29| :skolemid |2692| :pattern ( (LinearMutableMapBase.__default.rshift ($LS $ly@@294) |a#0@@94| |b#0@@56|)) )))
(assert (forall (($ly@@295 T@U) (|a#0@@95| Int) (|b#0@@57| Int) ) (!  (=> (= (type $ly@@295) LayerTypeType) (= (LinearMutableMapBase.__default.rshift $ly@@295 |a#0@@95| |b#0@@57|) (LinearMutableMapBase.__default.rshift $LZ |a#0@@95| |b#0@@57|))) :qid |LinearMutableMapBaseidfy.23:29| :skolemid |2693| :pattern ( (LinearMutableMapBase.__default.rshift (AsFuelBottom $ly@@295) |a#0@@95| |b#0@@57|)) )))
(assert  (=> true (forall (($ly@@296 T@U) (|a#0@@96| Int) (|b#0@@58| Int) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) (or (|LinearMutableMapBase.__default.rshift#canCall| |a#0@@96| |b#0@@58|) (and (and (and (<= (LitInt 0) |a#0@@96|) (< |a#0@@96| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@58|) (< |b#0@@58| 4294967296))) (and (<= (LitInt 0) |b#0@@58|) (< |b#0@@58| 64))))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.rshift $ly@@296 |a#0@@96| |b#0@@58|)) (< (LinearMutableMapBase.__default.rshift $ly@@296 |a#0@@96| |b#0@@58|) 18446744073709551616))) :qid |LinearMutableMapBaseidfy.23:29| :skolemid |2694| :pattern ( (LinearMutableMapBase.__default.rshift $ly@@296 |a#0@@96| |b#0@@58|)) ))))
(assert (forall (($ly@@297 T@U) (|a#0@@97| Int) (|b#0@@59| Int) ) (!  (=> (= (type $ly@@297) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@97|) (< |a#0@@97| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@59|) (< |b#0@@59| 4294967296))) (= (|LinearMutableMapBase.__default.rshift#requires| $ly@@297 |a#0@@97| |b#0@@59|)  (and (<= (LitInt 0) |b#0@@59|) (< |b#0@@59| 64))))) :qid |LinearMutableMapBaseidfy.23:29| :skolemid |2695| :pattern ( (|LinearMutableMapBase.__default.rshift#requires| $ly@@297 |a#0@@97| |b#0@@59|)) )))
(assert  (=> true (forall (($ly@@298 T@U) (|a#0@@98| Int) (|b#0@@60| Int) ) (!  (=> (and (= (type $ly@@298) LayerTypeType) (or (|LinearMutableMapBase.__default.rshift#canCall| |a#0@@98| |b#0@@60|) (and (and (and (<= (LitInt 0) |a#0@@98|) (< |a#0@@98| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@60|) (< |b#0@@60| 4294967296))) (and (<= (LitInt 0) |b#0@@60|) (< |b#0@@60| 64))))) (= (LinearMutableMapBase.__default.rshift ($LS $ly@@298) |a#0@@98| |b#0@@60|) (nat_from_bv64 (bvlshr ((_ int2bv 64) |a#0@@98|) ((_ int2bv 64) |b#0@@60|))))) :qid |LinearMutableMapBaseidfy.23:29| :skolemid |2696| :pattern ( (LinearMutableMapBase.__default.rshift ($LS $ly@@298) |a#0@@98| |b#0@@60|)) ))))
(assert  (=> true (forall (($ly@@299 T@U) (|a#0@@99| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@299) LayerTypeType) (or (|LinearMutableMapBase.__default.rshift#canCall| (LitInt |a#0@@99|) (LitInt |b#0@@61|)) (and (and (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@61|)) (< |b#0@@61| 64))))) (= (LinearMutableMapBase.__default.rshift ($LS $ly@@299) (LitInt |a#0@@99|) (LitInt |b#0@@61|)) (nat_from_bv64 (bvlshr ((_ int2bv 64) (LitInt |a#0@@99|)) ((_ int2bv 64) |b#0@@61|))))) :qid |LinearMutableMapBaseidfy.23:29| :weight 3 :skolemid |2697| :pattern ( (LinearMutableMapBase.__default.rshift ($LS $ly@@299) (LitInt |a#0@@99|) (LitInt |b#0@@61|))) ))))
(assert (forall (($ly@@300 T@U) (|a#0@@100| Int) ) (!  (=> (= (type $ly@@300) LayerTypeType) (= (LinearMutableMapBase.__default.bitnot ($LS $ly@@300) |a#0@@100|) (LinearMutableMapBase.__default.bitnot $ly@@300 |a#0@@100|))) :qid |LinearMutableMapBaseidfy.29:29| :skolemid |2698| :pattern ( (LinearMutableMapBase.__default.bitnot ($LS $ly@@300) |a#0@@100|)) )))
(assert (forall (($ly@@301 T@U) (|a#0@@101| Int) ) (!  (=> (= (type $ly@@301) LayerTypeType) (= (LinearMutableMapBase.__default.bitnot $ly@@301 |a#0@@101|) (LinearMutableMapBase.__default.bitnot $LZ |a#0@@101|))) :qid |LinearMutableMapBaseidfy.29:29| :skolemid |2699| :pattern ( (LinearMutableMapBase.__default.bitnot (AsFuelBottom $ly@@301) |a#0@@101|)) )))
(assert  (=> true (forall (($ly@@302 T@U) (|a#0@@102| Int) ) (!  (=> (and (= (type $ly@@302) LayerTypeType) (or (|LinearMutableMapBase.__default.bitnot#canCall| |a#0@@102|) (and (<= (LitInt 0) |a#0@@102|) (< |a#0@@102| 18446744073709551616)))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.bitnot $ly@@302 |a#0@@102|)) (< (LinearMutableMapBase.__default.bitnot $ly@@302 |a#0@@102|) 18446744073709551616))) :qid |LinearMutableMapBaseidfy.29:29| :skolemid |2700| :pattern ( (LinearMutableMapBase.__default.bitnot $ly@@302 |a#0@@102|)) ))))
(assert (forall (($ly@@303 T@U) (|a#0@@103| Int) ) (!  (=> (= (type $ly@@303) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@103|) (< |a#0@@103| 18446744073709551616)) (= (|LinearMutableMapBase.__default.bitnot#requires| $ly@@303 |a#0@@103|) true))) :qid |LinearMutableMapBaseidfy.29:29| :skolemid |2701| :pattern ( (|LinearMutableMapBase.__default.bitnot#requires| $ly@@303 |a#0@@103|)) )))
(assert  (=> true (forall (($ly@@304 T@U) (|a#0@@104| Int) ) (!  (=> (and (= (type $ly@@304) LayerTypeType) (or (|LinearMutableMapBase.__default.bitnot#canCall| |a#0@@104|) (and (<= (LitInt 0) |a#0@@104|) (< |a#0@@104| 18446744073709551616)))) (= (LinearMutableMapBase.__default.bitnot ($LS $ly@@304) |a#0@@104|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@104|) #xffffffffffffffff)))) :qid |LinearMutableMapBaseidfy.29:29| :skolemid |2702| :pattern ( (LinearMutableMapBase.__default.bitnot ($LS $ly@@304) |a#0@@104|)) ))))
(assert  (=> true (forall (($ly@@305 T@U) (|a#0@@105| Int) ) (!  (=> (and (= (type $ly@@305) LayerTypeType) (or (|LinearMutableMapBase.__default.bitnot#canCall| (LitInt |a#0@@105|)) (and (<= (LitInt 0) |a#0@@105|) (< |a#0@@105| 18446744073709551616)))) (= (LinearMutableMapBase.__default.bitnot ($LS $ly@@305) (LitInt |a#0@@105|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@105|)) #xffffffffffffffff)))) :qid |LinearMutableMapBaseidfy.29:29| :weight 3 :skolemid |2703| :pattern ( (LinearMutableMapBase.__default.bitnot ($LS $ly@@305) (LitInt |a#0@@105|))) ))))
(assert (forall (($ly@@306 T@U) (|a#0@@106| Int) (|b#0@@62| Int) ) (!  (=> (= (type $ly@@306) LayerTypeType) (= (LinearMutableMapBase.__default.bitxor ($LS $ly@@306) |a#0@@106| |b#0@@62|) (LinearMutableMapBase.__default.bitxor $ly@@306 |a#0@@106| |b#0@@62|))) :qid |LinearMutableMapBaseidfy.34:29| :skolemid |2704| :pattern ( (LinearMutableMapBase.__default.bitxor ($LS $ly@@306) |a#0@@106| |b#0@@62|)) )))
(assert (forall (($ly@@307 T@U) (|a#0@@107| Int) (|b#0@@63| Int) ) (!  (=> (= (type $ly@@307) LayerTypeType) (= (LinearMutableMapBase.__default.bitxor $ly@@307 |a#0@@107| |b#0@@63|) (LinearMutableMapBase.__default.bitxor $LZ |a#0@@107| |b#0@@63|))) :qid |LinearMutableMapBaseidfy.34:29| :skolemid |2705| :pattern ( (LinearMutableMapBase.__default.bitxor (AsFuelBottom $ly@@307) |a#0@@107| |b#0@@63|)) )))
(assert  (=> true (forall (($ly@@308 T@U) (|a#0@@108| Int) (|b#0@@64| Int) ) (!  (=> (and (= (type $ly@@308) LayerTypeType) (or (|LinearMutableMapBase.__default.bitxor#canCall| |a#0@@108| |b#0@@64|) (and (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@64|) (< |b#0@@64| 18446744073709551616))))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.bitxor $ly@@308 |a#0@@108| |b#0@@64|)) (< (LinearMutableMapBase.__default.bitxor $ly@@308 |a#0@@108| |b#0@@64|) 18446744073709551616))) :qid |LinearMutableMapBaseidfy.34:29| :skolemid |2706| :pattern ( (LinearMutableMapBase.__default.bitxor $ly@@308 |a#0@@108| |b#0@@64|)) ))))
(assert (forall (($ly@@309 T@U) (|a#0@@109| Int) (|b#0@@65| Int) ) (!  (=> (= (type $ly@@309) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@65|) (< |b#0@@65| 18446744073709551616))) (= (|LinearMutableMapBase.__default.bitxor#requires| $ly@@309 |a#0@@109| |b#0@@65|) true))) :qid |LinearMutableMapBaseidfy.34:29| :skolemid |2707| :pattern ( (|LinearMutableMapBase.__default.bitxor#requires| $ly@@309 |a#0@@109| |b#0@@65|)) )))
(assert  (=> true (forall (($ly@@310 T@U) (|a#0@@110| Int) (|b#0@@66| Int) ) (!  (=> (and (= (type $ly@@310) LayerTypeType) (or (|LinearMutableMapBase.__default.bitxor#canCall| |a#0@@110| |b#0@@66|) (and (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@66|) (< |b#0@@66| 18446744073709551616))))) (= (LinearMutableMapBase.__default.bitxor ($LS $ly@@310) |a#0@@110| |b#0@@66|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@110|) ((_ int2bv 64) |b#0@@66|))))) :qid |LinearMutableMapBaseidfy.34:29| :skolemid |2708| :pattern ( (LinearMutableMapBase.__default.bitxor ($LS $ly@@310) |a#0@@110| |b#0@@66|)) ))))
(assert  (=> true (forall (($ly@@311 T@U) (|a#0@@111| Int) (|b#0@@67| Int) ) (!  (=> (and (= (type $ly@@311) LayerTypeType) (or (|LinearMutableMapBase.__default.bitxor#canCall| (LitInt |a#0@@111|) (LitInt |b#0@@67|)) (and (and (<= (LitInt 0) |a#0@@111|) (< |a#0@@111| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 18446744073709551616))))) (= (LinearMutableMapBase.__default.bitxor ($LS $ly@@311) (LitInt |a#0@@111|) (LitInt |b#0@@67|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@111|)) ((_ int2bv 64) (LitInt |b#0@@67|)))))) :qid |LinearMutableMapBaseidfy.34:29| :weight 3 :skolemid |2709| :pattern ( (LinearMutableMapBase.__default.bitxor ($LS $ly@@311) (LitInt |a#0@@111|) (LitInt |b#0@@67|))) ))))
(assert (forall (($ly@@312 T@U) (|k#0@@52| Int) ) (!  (=> (= (type $ly@@312) LayerTypeType) (= (LinearMutableMapBase.__default.hash64 ($LS $ly@@312) |k#0@@52|) (LinearMutableMapBase.__default.hash64 $ly@@312 |k#0@@52|))) :qid |LinearMutableMapBaseidfy.39:29| :skolemid |2710| :pattern ( (LinearMutableMapBase.__default.hash64 ($LS $ly@@312) |k#0@@52|)) )))
(assert (forall (($ly@@313 T@U) (|k#0@@53| Int) ) (!  (=> (= (type $ly@@313) LayerTypeType) (= (LinearMutableMapBase.__default.hash64 $ly@@313 |k#0@@53|) (LinearMutableMapBase.__default.hash64 $LZ |k#0@@53|))) :qid |LinearMutableMapBaseidfy.39:29| :skolemid |2711| :pattern ( (LinearMutableMapBase.__default.hash64 (AsFuelBottom $ly@@313) |k#0@@53|)) )))
(assert  (=> true (forall (($ly@@314 T@U) (|k#0@@54| Int) ) (!  (=> (and (= (type $ly@@314) LayerTypeType) (or (|LinearMutableMapBase.__default.hash64#canCall| |k#0@@54|) (and (<= (LitInt 0) |k#0@@54|) (< |k#0@@54| 18446744073709551616)))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.hash64 $ly@@314 |k#0@@54|)) (< (LinearMutableMapBase.__default.hash64 $ly@@314 |k#0@@54|) 18446744073709551616))) :qid |LinearMutableMapBaseidfy.39:29| :skolemid |2712| :pattern ( (LinearMutableMapBase.__default.hash64 $ly@@314 |k#0@@54|)) ))))
(assert (forall (($ly@@315 T@U) (|k#0@@55| Int) ) (!  (=> (= (type $ly@@315) LayerTypeType) (=> (and (<= (LitInt 0) |k#0@@55|) (< |k#0@@55| 18446744073709551616)) (= (|LinearMutableMapBase.__default.hash64#requires| $ly@@315 |k#0@@55|) true))) :qid |LinearMutableMapBaseidfy.39:29| :skolemid |2713| :pattern ( (|LinearMutableMapBase.__default.hash64#requires| $ly@@315 |k#0@@55|)) )))
(assert  (and (and (and (= (type StartFuel_LinearMutableMapBase._default.bitnot) LayerTypeType) (= (type StartFuel_LinearMutableMapBase._default.lshift) LayerTypeType)) (= (type StartFuel_LinearMutableMapBase._default.rshift) LayerTypeType)) (= (type StartFuel_LinearMutableMapBase._default.bitxor) LayerTypeType)))
(assert  (=> true (forall (($ly@@316 T@U) (|k#0@@56| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (or (|LinearMutableMapBase.__default.hash64#canCall| |k#0@@56|) (and (<= (LitInt 0) |k#0@@56|) (< |k#0@@56| 18446744073709551616)))) (and (and (and (and (|LinearMutableMapBase.__default.bitnot#canCall| |k#0@@56|) (|LinearMutableMapBase.__default.lshift#canCall| |k#0@@56| (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot |k#0@@56|) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k#0@@56| (LitInt 21)))) (let ((|k0#0| (NativeArithmetic.__default.u64add (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot |k#0@@56|) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k#0@@56| (LitInt 21))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k0#0| (LitInt 24)) (|LinearMutableMapBase.__default.bitxor#canCall| |k0#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#0| (LitInt 24)))) (let ((|k1#0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k0#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#0| (LitInt 24))))) (and (and (and (and (|LinearMutableMapBase.__default.lshift#canCall| |k1#0| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0| (LitInt 3)))) (|LinearMutableMapBase.__default.lshift#canCall| |k1#0| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0| (LitInt 8)))) (let ((|k2#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0| (LitInt 8))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k2#0| (LitInt 14)) (|LinearMutableMapBase.__default.bitxor#canCall| |k2#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#0| (LitInt 14)))) (let ((|k3#0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k2#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#0| (LitInt 14))))) (and (and (and (and (|LinearMutableMapBase.__default.lshift#canCall| |k3#0| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0| (LitInt 2)))) (|LinearMutableMapBase.__default.lshift#canCall| |k3#0| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0| (LitInt 4)))) (let ((|k4#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0| (LitInt 4))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k4#0| (LitInt 28)) (|LinearMutableMapBase.__default.bitxor#canCall| |k4#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#0| (LitInt 28)))) (let ((|k5#0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k4#0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#0| (LitInt 28))))) (and (|LinearMutableMapBase.__default.lshift#canCall| |k5#0| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k5#0| (LitInt 31)))))))))))))))) (= (LinearMutableMapBase.__default.hash64 ($LS $ly@@316) |k#0@@56|) (let ((|k0#0@@0| (NativeArithmetic.__default.u64add (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot |k#0@@56|) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k#0@@56| (LitInt 21))))) (let ((|k1#0@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k0#0@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#0@@0| (LitInt 24))))) (let ((|k2#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0@@0| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#0@@0| (LitInt 8))))) (let ((|k3#0@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k2#0@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#0@@0| (LitInt 14))))) (let ((|k4#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0@@0| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#0@@0| (LitInt 4))))) (let ((|k5#0@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k4#0@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#0@@0| (LitInt 28))))) (let ((|k6#0| (NativeArithmetic.__default.u64add |k5#0@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k5#0@@0| (LitInt 31))))) |k6#0|)))))))))) :qid |LinearMutableMapBaseidfy.39:29| :skolemid |2714| :pattern ( (LinearMutableMapBase.__default.hash64 ($LS $ly@@316) |k#0@@56|)) ))))
(assert  (=> true (forall (($ly@@317 T@U) (|k#0@@57| Int) ) (!  (=> (and (= (type $ly@@317) LayerTypeType) (or (|LinearMutableMapBase.__default.hash64#canCall| (LitInt |k#0@@57|)) (and (<= (LitInt 0) |k#0@@57|) (< |k#0@@57| 18446744073709551616)))) (and (and (and (and (|LinearMutableMapBase.__default.bitnot#canCall| (LitInt |k#0@@57|)) (|LinearMutableMapBase.__default.lshift#canCall| (LitInt |k#0@@57|) (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot (LitInt |k#0@@57|)) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift (LitInt |k#0@@57|) (LitInt 21)))) (let ((|k0#1| (NativeArithmetic.__default.u64add (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot (LitInt |k#0@@57|)) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift (LitInt |k#0@@57|) (LitInt 21))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k0#1| (LitInt 24)) (|LinearMutableMapBase.__default.bitxor#canCall| |k0#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#1| (LitInt 24)))) (let ((|k1#1| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k0#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#1| (LitInt 24))))) (and (and (and (and (|LinearMutableMapBase.__default.lshift#canCall| |k1#1| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1| (LitInt 3)))) (|LinearMutableMapBase.__default.lshift#canCall| |k1#1| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1| (LitInt 8)))) (let ((|k2#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1| (LitInt 8))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k2#1| (LitInt 14)) (|LinearMutableMapBase.__default.bitxor#canCall| |k2#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#1| (LitInt 14)))) (let ((|k3#1| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k2#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#1| (LitInt 14))))) (and (and (and (and (|LinearMutableMapBase.__default.lshift#canCall| |k3#1| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1| (LitInt 2)))) (|LinearMutableMapBase.__default.lshift#canCall| |k3#1| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1| (LitInt 4)))) (let ((|k4#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1| (LitInt 4))))) (and (and (|LinearMutableMapBase.__default.rshift#canCall| |k4#1| (LitInt 28)) (|LinearMutableMapBase.__default.bitxor#canCall| |k4#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#1| (LitInt 28)))) (let ((|k5#1| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k4#1| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#1| (LitInt 28))))) (and (|LinearMutableMapBase.__default.lshift#canCall| |k5#1| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#1| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k5#1| (LitInt 31)))))))))))))))) (= (LinearMutableMapBase.__default.hash64 ($LS $ly@@317) (LitInt |k#0@@57|)) (let ((|k0#1@@0| (NativeArithmetic.__default.u64add (LinearMutableMapBase.__default.bitnot StartFuel_LinearMutableMapBase._default.bitnot (LitInt |k#0@@57|)) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift (LitInt |k#0@@57|) (LitInt 21))))) (let ((|k1#1@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k0#1@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k0#1@@0| (LitInt 24))))) (let ((|k2#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1@@0| (LitInt 3))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k1#1@@0| (LitInt 8))))) (let ((|k3#1@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k2#1@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k2#1@@0| (LitInt 14))))) (let ((|k4#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1@@0| (LitInt 2))) (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k3#1@@0| (LitInt 4))))) (let ((|k5#1@@0| (LinearMutableMapBase.__default.bitxor StartFuel_LinearMutableMapBase._default.bitxor |k4#1@@0| (LinearMutableMapBase.__default.rshift StartFuel_LinearMutableMapBase._default.rshift |k4#1@@0| (LitInt 28))))) (let ((|k6#1| (NativeArithmetic.__default.u64add |k5#1@@0| (LinearMutableMapBase.__default.lshift StartFuel_LinearMutableMapBase._default.lshift |k5#1@@0| (LitInt 31))))) |k6#1|)))))))))) :qid |LinearMutableMapBaseidfy.39:29| :weight 3 :skolemid |2715| :pattern ( (LinearMutableMapBase.__default.hash64 ($LS $ly@@317) (LitInt |k#0@@57|))) ))))
(assert  (=> true (forall ((|elementsLength#0| Int) (|slot#0@@2| T@U) ) (!  (=> (and (= (type |slot#0@@2|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.ValidSlot#canCall| |elementsLength#0| |slot#0@@2|) (and (<= (LitInt 0) |elementsLength#0|) ($Is |slot#0@@2| Tclass.LinearMutableMapBase.Slot)))) true) :qid |LinearMutableMapBaseidfy.55:23| :skolemid |2716| :pattern ( (LinearMutableMapBase.__default.ValidSlot |elementsLength#0| |slot#0@@2|)) ))))
(assert (forall ((|elementsLength#0@@0| Int) (|slot#0@@3| T@U) ) (!  (=> (= (type |slot#0@@3|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@0|) ($Is |slot#0@@3| Tclass.LinearMutableMapBase.Slot)) (= (|LinearMutableMapBase.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@3|) true))) :qid |LinearMutableMapBaseidfy.55:23| :skolemid |2717| :pattern ( (|LinearMutableMapBase.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@3|)) )))
(assert  (=> true (forall ((|elementsLength#0@@1| Int) (|slot#0@@4| T@U) ) (!  (=> (and (= (type |slot#0@@4|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.ValidSlot#canCall| |elementsLength#0@@1| |slot#0@@4|) (and (<= (LitInt 0) |elementsLength#0@@1|) ($Is |slot#0@@4| Tclass.LinearMutableMapBase.Slot)))) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@4|) (= (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@1| |slot#0@@4|) (< (LinearMutableMapBase.Slot.slot |slot#0@@4|) |elementsLength#0@@1|)))) :qid |LinearMutableMapBaseidfy.55:23| :skolemid |2718| :pattern ( (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@1| |slot#0@@4|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@2| Int) (|slot#0@@5| T@U) ) (!  (=> (and (= (type |slot#0@@5|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.ValidSlot#canCall| (LitInt |elementsLength#0@@2|) (Lit |slot#0@@5|)) (and (<= (LitInt 0) |elementsLength#0@@2|) ($Is |slot#0@@5| Tclass.LinearMutableMapBase.Slot)))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@5|)) (= (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@5|)) (U_2_bool (Lit (bool_2_U (< (LinearMutableMapBase.Slot.slot (Lit |slot#0@@5|)) |elementsLength#0@@2|))))))) :qid |LinearMutableMapBaseidfy.55:23| :weight 3 :skolemid |2719| :pattern ( (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@5|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.ValidElements$V T@U) (|elements#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.ValidElements$V) TyType) (= (type |elements#0@@1|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.ValidElements#canCall| LinearMutableMapBase._default.ValidElements$V |elements#0@@1|) ($Is |elements#0@@1| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.ValidElements$V))))) true) :qid |unknown.0:0| :skolemid |2720| :pattern ( (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.ValidElements$V |elements#0@@1|)) ))))
(assert (forall ((LinearMutableMapBase._default.ValidElements$V@@0 T@U) (|elements#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.ValidElements$V@@0) TyType) (= (type |elements#0@@2|) (SeqType BoxType))) ($Is |elements#0@@2| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.ValidElements$V@@0)))) (= (|LinearMutableMapBase.__default.ValidElements#requires| LinearMutableMapBase._default.ValidElements$V@@0 |elements#0@@2|) true)) :qid |unknown.0:0| :skolemid |2721| :pattern ( (|LinearMutableMapBase.__default.ValidElements#requires| LinearMutableMapBase._default.ValidElements$V@@0 |elements#0@@2|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.ValidElements$V@@1 T@U) (|elements#0@@3| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.ValidElements$V@@1) TyType) (= (type |elements#0@@3|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.ValidElements#canCall| LinearMutableMapBase._default.ValidElements$V@@1 |elements#0@@3|) ($Is |elements#0@@3| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.ValidElements$V@@1))))) (= (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.ValidElements$V@@1 |elements#0@@3|)  (and true (and (< 0 (|Seq#Length| |elements#0@@3|)) (< (|Seq#Length| |elements#0@@3|) 18446744073709551616))))) :qid |unknown.0:0| :skolemid |2722| :pattern ( (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.ValidElements$V@@1 |elements#0@@3|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.ValidElements$V@@2 T@U) (|elements#0@@4| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.ValidElements$V@@2) TyType) (= (type |elements#0@@4|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.ValidElements#canCall| LinearMutableMapBase._default.ValidElements$V@@2 (Lit |elements#0@@4|)) ($Is |elements#0@@4| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.ValidElements$V@@2))))) (= (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.ValidElements$V@@2 (Lit |elements#0@@4|))  (and true (and (< 0 (|Seq#Length| (Lit |elements#0@@4|))) (< (|Seq#Length| (Lit |elements#0@@4|)) 18446744073709551616))))) :qid |unknown.0:0| :weight 3 :skolemid |2723| :pattern ( (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.ValidElements$V@@2 (Lit |elements#0@@4|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@3| Int) (|key#0@@20| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.SlotForKey#canCall| |elementsLength#0@@3| |key#0@@20|) (and (and (<= (LitInt 0) |elementsLength#0@@3|) (and (<= (LitInt 0) |key#0@@20|) (< |key#0@@20| 18446744073709551616))) (< 0 |elementsLength#0@@3|))) (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@3| (LinearMutableMapBase.__default.SlotForKey |elementsLength#0@@3| |key#0@@20|)) ($Is (LinearMutableMapBase.__default.SlotForKey |elementsLength#0@@3| |key#0@@20|) Tclass.LinearMutableMapBase.Slot))) :qid |LinearMutableMapBaseidfy.65:23| :skolemid |2724| :pattern ( (LinearMutableMapBase.__default.SlotForKey |elementsLength#0@@3| |key#0@@20|)) ))))
(assert (forall ((|elementsLength#0@@4| Int) (|key#0@@21| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@4|) (and (<= (LitInt 0) |key#0@@21|) (< |key#0@@21| 18446744073709551616))) (= (|LinearMutableMapBase.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@21|) (< 0 |elementsLength#0@@4|))) :qid |LinearMutableMapBaseidfy.65:23| :skolemid |2725| :pattern ( (|LinearMutableMapBase.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@21|)) )))
(assert  (=> true (forall ((|elementsLength#0@@5| Int) (|key#0@@22| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.SlotForKey#canCall| |elementsLength#0@@5| |key#0@@22|) (and (and (<= (LitInt 0) |elementsLength#0@@5|) (and (<= (LitInt 0) |key#0@@22|) (< |key#0@@22| 18446744073709551616))) (< 0 |elementsLength#0@@5|))) (and (|LinearMutableMapBase.__default.hash64#canCall| |key#0@@22|) (= (LinearMutableMapBase.__default.SlotForKey |elementsLength#0@@5| |key#0@@22|) (let ((|h#0@@2| (LinearMutableMapBase.__default.hash64 StartFuel_LinearMutableMapBase._default.hash64 |key#0@@22|))) (|#LinearMutableMapBase.Slot.Slot| (Mod |h#0@@2| |elementsLength#0@@5|)))))) :qid |LinearMutableMapBaseidfy.65:23| :skolemid |2726| :pattern ( (LinearMutableMapBase.__default.SlotForKey |elementsLength#0@@5| |key#0@@22|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@6| Int) (|key#0@@23| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.SlotForKey#canCall| (LitInt |elementsLength#0@@6|) (LitInt |key#0@@23|)) (and (and (<= (LitInt 0) |elementsLength#0@@6|) (and (<= (LitInt 0) |key#0@@23|) (< |key#0@@23| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< 0 |elementsLength#0@@6|)))))) (and (|LinearMutableMapBase.__default.hash64#canCall| (LitInt |key#0@@23|)) (= (LinearMutableMapBase.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@23|)) (let ((|h#1@@0| (LinearMutableMapBase.__default.hash64 StartFuel_LinearMutableMapBase._default.hash64 (LitInt |key#0@@23|)))) (|#LinearMutableMapBase.Slot.Slot| (Mod |h#1@@0| (LitInt |elementsLength#0@@6|))))))) :qid |LinearMutableMapBaseidfy.65:23| :weight 3 :skolemid |2727| :pattern ( (LinearMutableMapBase.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@23|))) ))))
(assert (forall ((arg0@@510 Int) (arg1@@252 T@U) ) (! (= (type (LinearMutableMapBase.__default.SlotSuccessor arg0@@510 arg1@@252)) DatatypeTypeType) :qid |funType:LinearMutableMapBase.__default.SlotSuccessor| :pattern ( (LinearMutableMapBase.__default.SlotSuccessor arg0@@510 arg1@@252)) )))
(assert  (=> true (forall ((|elementsLength#0@@7| Int) (|slot#0@@6| T@U) ) (!  (=> (and (= (type |slot#0@@6|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.SlotSuccessor#canCall| |elementsLength#0@@7| |slot#0@@6|) (and (and (<= (LitInt 0) |elementsLength#0@@7|) ($Is |slot#0@@6| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@7| |slot#0@@6|)))) (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@7| (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@6|)) ($Is (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@6|) Tclass.LinearMutableMapBase.Slot))) :qid |LinearMutableMapBaseidfy.73:26| :skolemid |2728| :pattern ( (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@6|)) ))))
(assert (forall ((|elementsLength#0@@8| Int) (|slot#0@@7| T@U) ) (!  (=> (= (type |slot#0@@7|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@8|) ($Is |slot#0@@7| Tclass.LinearMutableMapBase.Slot)) (= (|LinearMutableMapBase.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@7|) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@8| |slot#0@@7|)))) :qid |LinearMutableMapBaseidfy.73:26| :skolemid |2729| :pattern ( (|LinearMutableMapBase.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@7|)) )))
(assert  (=> true (forall ((|elementsLength#0@@9| Int) (|slot#0@@8| T@U) ) (!  (=> (and (= (type |slot#0@@8|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.SlotSuccessor#canCall| |elementsLength#0@@9| |slot#0@@8|) (and (and (<= (LitInt 0) |elementsLength#0@@9|) ($Is |slot#0@@8| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@9| |slot#0@@8|)))) (and (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@8|) (=> (not (= (LinearMutableMapBase.Slot.slot |slot#0@@8|) (- |elementsLength#0@@9| 1))) (LinearMutableMapBase.Slot.Slot_q |slot#0@@8|))) (= (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@8|) (|#LinearMutableMapBase.Slot.Slot| (ite (= (LinearMutableMapBase.Slot.slot |slot#0@@8|) (- |elementsLength#0@@9| 1)) 0 (+ (LinearMutableMapBase.Slot.slot |slot#0@@8|) 1)))))) :qid |LinearMutableMapBaseidfy.73:26| :skolemid |2730| :pattern ( (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@8|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@10| Int) (|slot#0@@9| T@U) ) (!  (=> (and (= (type |slot#0@@9|) DatatypeTypeType) (or (|LinearMutableMapBase.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@10|) (Lit |slot#0@@9|)) (and (and (<= (LitInt 0) |elementsLength#0@@10|) ($Is |slot#0@@9| Tclass.LinearMutableMapBase.Slot)) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@10|) (Lit |slot#0@@9|)))))))) (and (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@9|)) (=> (not (= (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@9|))) (LitInt (- |elementsLength#0@@10| 1)))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@9|)))) (= (LinearMutableMapBase.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@9|)) (|#LinearMutableMapBase.Slot.Slot| (ite (= (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@9|))) (LitInt (- |elementsLength#0@@10| 1))) 0 (+ (LinearMutableMapBase.Slot.slot (Lit |slot#0@@9|)) 1)))))) :qid |LinearMutableMapBaseidfy.73:26| :weight 3 :skolemid |2731| :pattern ( (LinearMutableMapBase.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@9|))) ))))
(assert (forall ((arg0@@511 T@U) (arg1@@253 Int) (arg2@@150 T@U) (arg3@@91 Int) ) (! (= (type (LinearMutableMapBase.__default.KthSlotSuccessor arg0@@511 arg1@@253 arg2@@150 arg3@@91)) DatatypeTypeType) :qid |funType:LinearMutableMapBase.__default.KthSlotSuccessor| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor arg0@@511 arg1@@253 arg2@@150 arg3@@91)) )))
(assert (forall (($ly@@318 T@U) (|elementsLength#0@@11| Int) (|slot#0@@10| T@U) (|k#0@@58| Int) ) (!  (=> (and (= (type $ly@@318) LayerTypeType) (= (type |slot#0@@10|) DatatypeTypeType)) (= (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@318) |elementsLength#0@@11| |slot#0@@10| |k#0@@58|) (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@318 |elementsLength#0@@11| |slot#0@@10| |k#0@@58|))) :qid |LinearMutableMapBaseidfy.83:12| :skolemid |2732| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@318) |elementsLength#0@@11| |slot#0@@10| |k#0@@58|)) )))
(assert (forall (($ly@@319 T@U) (|elementsLength#0@@12| Int) (|slot#0@@11| T@U) (|k#0@@59| Int) ) (!  (=> (and (= (type $ly@@319) LayerTypeType) (= (type |slot#0@@11|) DatatypeTypeType)) (= (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@319 |elementsLength#0@@12| |slot#0@@11| |k#0@@59|) (LinearMutableMapBase.__default.KthSlotSuccessor $LZ |elementsLength#0@@12| |slot#0@@11| |k#0@@59|))) :qid |LinearMutableMapBaseidfy.83:12| :skolemid |2733| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor (AsFuelBottom $ly@@319) |elementsLength#0@@12| |slot#0@@11| |k#0@@59|)) )))
(assert  (=> true (forall (($ly@@320 T@U) (|elementsLength#0@@13| Int) (|slot#0@@12| T@U) (|k#0@@60| Int) ) (!  (=> (and (and (= (type $ly@@320) LayerTypeType) (= (type |slot#0@@12|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| |elementsLength#0@@13| |slot#0@@12| |k#0@@60|) (and (and (and (<= (LitInt 0) |elementsLength#0@@13|) ($Is |slot#0@@12| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |k#0@@60|)) (and (>= |k#0@@60| (LitInt 0)) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@13| |slot#0@@12|))))) (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@13| (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@320 |elementsLength#0@@13| |slot#0@@12| |k#0@@60|)) ($Is (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@320 |elementsLength#0@@13| |slot#0@@12| |k#0@@60|) Tclass.LinearMutableMapBase.Slot))) :qid |LinearMutableMapBaseidfy.83:12| :skolemid |2734| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@320 |elementsLength#0@@13| |slot#0@@12| |k#0@@60|)) ))))
(assert (forall (($ly@@321 T@U) (|elementsLength#0@@14| Int) (|slot#0@@13| T@U) (|k#0@@61| Int) ) (!  (=> (and (= (type $ly@@321) LayerTypeType) (= (type |slot#0@@13|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@14|) ($Is |slot#0@@13| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |k#0@@61|)) (= (|LinearMutableMapBase.__default.KthSlotSuccessor#requires| $ly@@321 |elementsLength#0@@14| |slot#0@@13| |k#0@@61|)  (and (>= |k#0@@61| (LitInt 0)) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@14| |slot#0@@13|))))) :qid |LinearMutableMapBaseidfy.83:12| :skolemid |2735| :pattern ( (|LinearMutableMapBase.__default.KthSlotSuccessor#requires| $ly@@321 |elementsLength#0@@14| |slot#0@@13| |k#0@@61|)) )))
(assert  (=> true (forall (($ly@@322 T@U) (|elementsLength#0@@15| Int) (|slot#0@@14| T@U) (|k#0@@62| Int) ) (!  (=> (and (and (= (type $ly@@322) LayerTypeType) (= (type |slot#0@@14|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@14| |k#0@@62|) (and (and (and (<= (LitInt 0) |elementsLength#0@@15|) ($Is |slot#0@@14| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |k#0@@62|)) (and (>= |k#0@@62| (LitInt 0)) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@15| |slot#0@@14|))))) (and (=> (not (= |k#0@@62| (LitInt 0))) (and (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@14| (- |k#0@@62| 1)) (|LinearMutableMapBase.__default.SlotSuccessor#canCall| |elementsLength#0@@15| (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@322 |elementsLength#0@@15| |slot#0@@14| (- |k#0@@62| 1))))) (= (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@322) |elementsLength#0@@15| |slot#0@@14| |k#0@@62|) (ite (= |k#0@@62| (LitInt 0)) |slot#0@@14| (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@15| (LinearMutableMapBase.__default.KthSlotSuccessor $ly@@322 |elementsLength#0@@15| |slot#0@@14| (- |k#0@@62| 1))))))) :qid |LinearMutableMapBaseidfy.83:12| :skolemid |2736| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@322) |elementsLength#0@@15| |slot#0@@14| |k#0@@62|)) ))))
(assert  (=> true (forall (($ly@@323 T@U) (|elementsLength#0@@16| Int) (|slot#0@@15| T@U) (|k#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@323) LayerTypeType) (= (type |slot#0@@15|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt |k#0@@63|)) (and (and (and (<= (LitInt 0) |elementsLength#0@@16|) ($Is |slot#0@@15| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |k#0@@63|)) (and (>= (LitInt |k#0@@63|) (LitInt 0)) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|))))))))) (and (=> (not (= (LitInt |k#0@@63|) (LitInt 0))) (and (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt (- |k#0@@63| 1))) (|LinearMutableMapBase.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@323) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt (- |k#0@@63| 1))))))) (= (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@323) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt |k#0@@63|)) (ite (= (LitInt |k#0@@63|) (LitInt 0)) |slot#0@@15| (LinearMutableMapBase.__default.SlotSuccessor (LitInt |elementsLength#0@@16|) (Lit (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@323) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt (- |k#0@@63| 1))))))))) :qid |LinearMutableMapBaseidfy.83:12| :weight 3 :skolemid |2737| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $ly@@323) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@15|) (LitInt |k#0@@63|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEmpty$V T@U) (|elements#0@@5| T@U) (|slot#0@@16| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEmpty$V) TyType) (= (type |elements#0@@5|) (SeqType BoxType))) (= (type |slot#0@@16|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEmpty#canCall| LinearMutableMapBase._default.SlotIsEmpty$V |elements#0@@5| |slot#0@@16|) (and (and ($Is |elements#0@@5| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEmpty$V))) ($Is |slot#0@@16| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@5|) |slot#0@@16|)))) true) :qid |unknown.0:0| :skolemid |2738| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearMutableMapBase._default.SlotIsEmpty$V |elements#0@@5| |slot#0@@16|)) ))))
(assert (forall ((LinearMutableMapBase._default.SlotIsEmpty$V@@0 T@U) (|elements#0@@6| T@U) (|slot#0@@17| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEmpty$V@@0) TyType) (= (type |elements#0@@6|) (SeqType BoxType))) (= (type |slot#0@@17|) DatatypeTypeType)) (and ($Is |elements#0@@6| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEmpty$V@@0))) ($Is |slot#0@@17| Tclass.LinearMutableMapBase.Slot))) (= (|LinearMutableMapBase.__default.SlotIsEmpty#requires| LinearMutableMapBase._default.SlotIsEmpty$V@@0 |elements#0@@6| |slot#0@@17|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@6|) |slot#0@@17|))) :qid |unknown.0:0| :skolemid |2739| :pattern ( (|LinearMutableMapBase.__default.SlotIsEmpty#requires| LinearMutableMapBase._default.SlotIsEmpty$V@@0 |elements#0@@6| |slot#0@@17|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEmpty$V@@1 T@U) (|elements#0@@7| T@U) (|slot#0@@18| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEmpty$V@@1) TyType) (= (type |elements#0@@7|) (SeqType BoxType))) (= (type |slot#0@@18|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEmpty#canCall| LinearMutableMapBase._default.SlotIsEmpty$V@@1 |elements#0@@7| |slot#0@@18|) (and (and ($Is |elements#0@@7| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEmpty$V@@1))) ($Is |slot#0@@18| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@7|) |slot#0@@18|)))) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@18|) (= (LinearMutableMapBase.__default.SlotIsEmpty LinearMutableMapBase._default.SlotIsEmpty$V@@1 |elements#0@@7| |slot#0@@18|) (LinearMutableMapBase.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@7| (LinearMutableMapBase.Slot.slot |slot#0@@18|))))))) :qid |unknown.0:0| :skolemid |2740| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearMutableMapBase._default.SlotIsEmpty$V@@1 |elements#0@@7| |slot#0@@18|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEmpty$V@@2 T@U) (|elements#0@@8| T@U) (|slot#0@@19| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEmpty$V@@2) TyType) (= (type |elements#0@@8|) (SeqType BoxType))) (= (type |slot#0@@19|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEmpty#canCall| LinearMutableMapBase._default.SlotIsEmpty$V@@2 (Lit |elements#0@@8|) (Lit |slot#0@@19|)) (and (and ($Is |elements#0@@8| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEmpty$V@@2))) ($Is |slot#0@@19| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@8|)) (Lit |slot#0@@19|))))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@19|)) (= (LinearMutableMapBase.__default.SlotIsEmpty LinearMutableMapBase._default.SlotIsEmpty$V@@2 (Lit |elements#0@@8|) (Lit |slot#0@@19|)) (LinearMutableMapBase.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@8|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@19|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2741| :pattern ( (LinearMutableMapBase.__default.SlotIsEmpty LinearMutableMapBase._default.SlotIsEmpty$V@@2 (Lit |elements#0@@8|) (Lit |slot#0@@19|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEntry$V T@U) (|elements#0@@9| T@U) (|slot#0@@20| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEntry$V) TyType) (= (type |elements#0@@9|) (SeqType BoxType))) (= (type |slot#0@@20|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.SlotIsEntry$V |elements#0@@9| |slot#0@@20|) (and (and ($Is |elements#0@@9| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEntry$V))) ($Is |slot#0@@20| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@9|) |slot#0@@20|)))) true) :qid |unknown.0:0| :skolemid |2742| :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SlotIsEntry$V |elements#0@@9| |slot#0@@20|)) ))))
(assert (forall ((LinearMutableMapBase._default.SlotIsEntry$V@@0 T@U) (|elements#0@@10| T@U) (|slot#0@@21| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEntry$V@@0) TyType) (= (type |elements#0@@10|) (SeqType BoxType))) (= (type |slot#0@@21|) DatatypeTypeType)) (and ($Is |elements#0@@10| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEntry$V@@0))) ($Is |slot#0@@21| Tclass.LinearMutableMapBase.Slot))) (= (|LinearMutableMapBase.__default.SlotIsEntry#requires| LinearMutableMapBase._default.SlotIsEntry$V@@0 |elements#0@@10| |slot#0@@21|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@10|) |slot#0@@21|))) :qid |unknown.0:0| :skolemid |2743| :pattern ( (|LinearMutableMapBase.__default.SlotIsEntry#requires| LinearMutableMapBase._default.SlotIsEntry$V@@0 |elements#0@@10| |slot#0@@21|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEntry$V@@1 T@U) (|elements#0@@11| T@U) (|slot#0@@22| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEntry$V@@1) TyType) (= (type |elements#0@@11|) (SeqType BoxType))) (= (type |slot#0@@22|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.SlotIsEntry$V@@1 |elements#0@@11| |slot#0@@22|) (and (and ($Is |elements#0@@11| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEntry$V@@1))) ($Is |slot#0@@22| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@11|) |slot#0@@22|)))) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@22|) (= (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SlotIsEntry$V@@1 |elements#0@@11| |slot#0@@22|) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@11| (LinearMutableMapBase.Slot.slot |slot#0@@22|))))))) :qid |unknown.0:0| :skolemid |2744| :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SlotIsEntry$V@@1 |elements#0@@11| |slot#0@@22|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsEntry$V@@2 T@U) (|elements#0@@12| T@U) (|slot#0@@23| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsEntry$V@@2) TyType) (= (type |elements#0@@12|) (SeqType BoxType))) (= (type |slot#0@@23|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.SlotIsEntry$V@@2 (Lit |elements#0@@12|) (Lit |slot#0@@23|)) (and (and ($Is |elements#0@@12| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsEntry$V@@2))) ($Is |slot#0@@23| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@12|)) (Lit |slot#0@@23|))))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@23|)) (= (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SlotIsEntry$V@@2 (Lit |elements#0@@12|) (Lit |slot#0@@23|)) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@12|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@23|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2745| :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SlotIsEntry$V@@2 (Lit |elements#0@@12|) (Lit |slot#0@@23|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsTombstone$V T@U) (|elements#0@@13| T@U) (|slot#0@@24| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsTombstone$V) TyType) (= (type |elements#0@@13|) (SeqType BoxType))) (= (type |slot#0@@24|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.SlotIsTombstone$V |elements#0@@13| |slot#0@@24|) (and (and ($Is |elements#0@@13| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsTombstone$V))) ($Is |slot#0@@24| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@13|) |slot#0@@24|)))) true) :qid |unknown.0:0| :skolemid |2746| :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SlotIsTombstone$V |elements#0@@13| |slot#0@@24|)) ))))
(assert (forall ((LinearMutableMapBase._default.SlotIsTombstone$V@@0 T@U) (|elements#0@@14| T@U) (|slot#0@@25| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsTombstone$V@@0) TyType) (= (type |elements#0@@14|) (SeqType BoxType))) (= (type |slot#0@@25|) DatatypeTypeType)) (and ($Is |elements#0@@14| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsTombstone$V@@0))) ($Is |slot#0@@25| Tclass.LinearMutableMapBase.Slot))) (= (|LinearMutableMapBase.__default.SlotIsTombstone#requires| LinearMutableMapBase._default.SlotIsTombstone$V@@0 |elements#0@@14| |slot#0@@25|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@14|) |slot#0@@25|))) :qid |unknown.0:0| :skolemid |2747| :pattern ( (|LinearMutableMapBase.__default.SlotIsTombstone#requires| LinearMutableMapBase._default.SlotIsTombstone$V@@0 |elements#0@@14| |slot#0@@25|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsTombstone$V@@1 T@U) (|elements#0@@15| T@U) (|slot#0@@26| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsTombstone$V@@1) TyType) (= (type |elements#0@@15|) (SeqType BoxType))) (= (type |slot#0@@26|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.SlotIsTombstone$V@@1 |elements#0@@15| |slot#0@@26|) (and (and ($Is |elements#0@@15| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsTombstone$V@@1))) ($Is |slot#0@@26| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@15|) |slot#0@@26|)))) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@26|) (= (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SlotIsTombstone$V@@1 |elements#0@@15| |slot#0@@26|) (LinearMutableMapBase.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@15| (LinearMutableMapBase.Slot.slot |slot#0@@26|))))))) :qid |unknown.0:0| :skolemid |2748| :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SlotIsTombstone$V@@1 |elements#0@@15| |slot#0@@26|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotIsTombstone$V@@2 T@U) (|elements#0@@16| T@U) (|slot#0@@27| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SlotIsTombstone$V@@2) TyType) (= (type |elements#0@@16|) (SeqType BoxType))) (= (type |slot#0@@27|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.SlotIsTombstone$V@@2 (Lit |elements#0@@16|) (Lit |slot#0@@27|)) (and (and ($Is |elements#0@@16| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotIsTombstone$V@@2))) ($Is |slot#0@@27| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@16|)) (Lit |slot#0@@27|))))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@27|)) (= (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SlotIsTombstone$V@@2 (Lit |elements#0@@16|) (Lit |slot#0@@27|)) (LinearMutableMapBase.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@16|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@27|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2749| :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SlotIsTombstone$V@@2 (Lit |elements#0@@16|) (Lit |slot#0@@27|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKey$V T@U) (|elements#0@@17| T@U) (|slot#0@@28| T@U) (|excludingKey#0| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKey$V) TyType) (= (type |elements#0@@17|) (SeqType BoxType))) (= (type |slot#0@@28|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKey#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V |elements#0@@17| |slot#0@@28| |excludingKey#0|) (and (and (and ($Is |elements#0@@17| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKey$V))) ($Is |slot#0@@28| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |excludingKey#0|) (< |excludingKey#0| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKey$V |elements#0@@17|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@17|) |slot#0@@28|))))) true) :qid |unknown.0:0| :skolemid |2750| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKey$V |elements#0@@17| |slot#0@@28| |excludingKey#0|)) ))))
(assert (forall ((LinearMutableMapBase._default.FilledWithOtherKey$V@@0 T@U) (|elements#0@@18| T@U) (|slot#0@@29| T@U) (|excludingKey#0@@0| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKey$V@@0) TyType) (= (type |elements#0@@18|) (SeqType BoxType))) (= (type |slot#0@@29|) DatatypeTypeType)) (and (and ($Is |elements#0@@18| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKey$V@@0))) ($Is |slot#0@@29| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |excludingKey#0@@0|) (< |excludingKey#0@@0| 18446744073709551616)))) (= (|LinearMutableMapBase.__default.FilledWithOtherKey#requires| LinearMutableMapBase._default.FilledWithOtherKey$V@@0 |elements#0@@18| |slot#0@@29| |excludingKey#0@@0|)  (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKey$V@@0 |elements#0@@18|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@18|) |slot#0@@29|)))) :qid |unknown.0:0| :skolemid |2751| :pattern ( (|LinearMutableMapBase.__default.FilledWithOtherKey#requires| LinearMutableMapBase._default.FilledWithOtherKey$V@@0 |elements#0@@18| |slot#0@@29| |excludingKey#0@@0|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKey$V@@1 T@U) (|elements#0@@19| T@U) (|slot#0@@30| T@U) (|excludingKey#0@@1| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKey$V@@1) TyType) (= (type |elements#0@@19|) (SeqType BoxType))) (= (type |slot#0@@30|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKey#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30| |excludingKey#0@@1|) (and (and (and ($Is |elements#0@@19| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKey$V@@1))) ($Is |slot#0@@30| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |excludingKey#0@@1|) (< |excludingKey#0@@1| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@19|) |slot#0@@30|))))) (and (and (and (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (=> (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (LinearMutableMapBase.Slot.Slot_q |slot#0@@30|))) (=> (not (and (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@19| (LinearMutableMapBase.Slot.slot |slot#0@@30|)))) |excludingKey#0@@1|)))) (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (=> (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (LinearMutableMapBase.Slot.Slot_q |slot#0@@30|))))) (= (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30| |excludingKey#0@@1|)  (or (and (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@19| (LinearMutableMapBase.Slot.slot |slot#0@@30|)))) |excludingKey#0@@1|))) (and (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30|) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@19| (LinearMutableMapBase.Slot.slot |slot#0@@30|)))) |excludingKey#0@@1|))))))) :qid |unknown.0:0| :skolemid |2752| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKey$V@@1 |elements#0@@19| |slot#0@@30| |excludingKey#0@@1|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKey$V@@2 T@U) (|elements#0@@20| T@U) (|slot#0@@31| T@U) (|excludingKey#0@@2| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKey$V@@2) TyType) (= (type |elements#0@@20|) (SeqType BoxType))) (= (type |slot#0@@31|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKey#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|) (LitInt |excludingKey#0@@2|)) (and (and (and ($Is |elements#0@@20| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKey$V@@2))) ($Is |slot#0@@31| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |excludingKey#0@@2|) (< |excludingKey#0@@2| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|))))) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@20|)) (Lit |slot#0@@31|)))))) (and (and (and (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|)) (=> (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|))))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@31|)))) (=> (not (and (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|)) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@20|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@31|)))))) |excludingKey#0@@2|)))) (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|)) (=> (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|))))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@31|)))))) (= (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|) (LitInt |excludingKey#0@@2|))  (or (and (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|)) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@20|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@31|)))))) |excludingKey#0@@2|))) (and (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|)) (not (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@20|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@31|)))))) |excludingKey#0@@2|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2753| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@20|) (Lit |slot#0@@31|) (LitInt |excludingKey#0@@2|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKeys$V T@U) (|elements#0@@21| T@U) (|start#0| T@U) (|count#0| Int) (|excludingKey#0@@3| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKeys$V) TyType) (= (type |elements#0@@21|) (SeqType BoxType))) (= (type |start#0|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearMutableMapBase._default.FilledWithOtherKeys$V |elements#0@@21| |start#0| |count#0| |excludingKey#0@@3|) (and (and (and (and ($Is |elements#0@@21| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKeys$V))) ($Is |start#0| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |count#0|)) (and (<= (LitInt 0) |excludingKey#0@@3|) (< |excludingKey#0@@3| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKeys$V |elements#0@@21|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@21|) |start#0|))))) true) :qid |unknown.0:0| :skolemid |2754| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.FilledWithOtherKeys$V |elements#0@@21| |start#0| |count#0| |excludingKey#0@@3|)) ))))
(assert (forall ((LinearMutableMapBase._default.FilledWithOtherKeys$V@@0 T@U) (|elements#0@@22| T@U) (|start#0@@0| T@U) (|count#0@@0| Int) (|excludingKey#0@@4| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKeys$V@@0) TyType) (= (type |elements#0@@22|) (SeqType BoxType))) (= (type |start#0@@0|) DatatypeTypeType)) (=> (and (and (and ($Is |elements#0@@22| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKeys$V@@0))) ($Is |start#0@@0| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |count#0@@0|)) (and (<= (LitInt 0) |excludingKey#0@@4|) (< |excludingKey#0@@4| 18446744073709551616))) (= (|LinearMutableMapBase.__default.FilledWithOtherKeys#requires| LinearMutableMapBase._default.FilledWithOtherKeys$V@@0 |elements#0@@22| |start#0@@0| |count#0@@0| |excludingKey#0@@4|)  (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKeys$V@@0 |elements#0@@22|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@22|) |start#0@@0|))))) :qid |unknown.0:0| :skolemid |2755| :pattern ( (|LinearMutableMapBase.__default.FilledWithOtherKeys#requires| LinearMutableMapBase._default.FilledWithOtherKeys$V@@0 |elements#0@@22| |start#0@@0| |count#0@@0| |excludingKey#0@@4|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 T@U) (|elements#0@@23| T@U) (|start#0@@1| T@U) (|count#0@@1| Int) (|excludingKey#0@@5| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKeys$V@@1) TyType) (= (type |elements#0@@23|) (SeqType BoxType))) (= (type |start#0@@1|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23| |start#0@@1| |count#0@@1| |excludingKey#0@@5|) (and (and (and (and ($Is |elements#0@@23| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKeys$V@@1))) ($Is |start#0@@1| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |count#0@@1|)) (and (<= (LitInt 0) |excludingKey#0@@5|) (< |excludingKey#0@@5| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@23|) |start#0@@1|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#0| Int) ) (!  (=> (<= (LitInt 0) |offset#0|) (=> (< |offset#0| |count#0@@1|) (and (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@23|) |start#0@@1| |offset#0|) (|LinearMutableMapBase.__default.FilledWithOtherKey#canCall| LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@23|) |start#0@@1| |offset#0|) |excludingKey#0@@5|)))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |2757| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@23|) |start#0@@1| |offset#0|)) ))) (= (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23| |start#0@@1| |count#0@@1| |excludingKey#0@@5|)  (and true (forall ((|offset#0@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#0@@0|) (=> (< |offset#0@@0| |count#0@@1|) (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@23|) |start#0@@1| |offset#0@@0|) |excludingKey#0@@5|))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |2756| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@23|) |start#0@@1| |offset#0@@0|)) )))))) :qid |unknown.0:0| :skolemid |2758| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.FilledWithOtherKeys$V@@1 |elements#0@@23| |start#0@@1| |count#0@@1| |excludingKey#0@@5|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 T@U) (|elements#0@@24| T@U) (|start#0@@2| T@U) (|count#0@@2| Int) (|excludingKey#0@@6| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithOtherKeys$V@@2) TyType) (= (type |elements#0@@24|) (SeqType BoxType))) (= (type |start#0@@2|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|)) (and (and (and (and ($Is |elements#0@@24| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithOtherKeys$V@@2))) ($Is |start#0@@2| Tclass.LinearMutableMapBase.Slot)) (<= (LitInt 0) |count#0@@2|)) (and (<= (LitInt 0) |excludingKey#0@@6|) (< |excludingKey#0@@6| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|))))) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@24|)) (Lit |start#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#1| Int) ) (!  (=> (<= (LitInt 0) |offset#1|) (=> (< |offset#1| |count#0@@2|) (and (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@24|)) (Lit |start#0@@2|) |offset#1|) (|LinearMutableMapBase.__default.FilledWithOtherKey#canCall| LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|) (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@24|)) (Lit |start#0@@2|) |offset#1|) (LitInt |excludingKey#0@@6|))))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |2760| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@24|) |start#0@@2| |offset#1|)) ))) (= (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|))  (and true (forall ((|offset#1@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#1@@0|) (=> (< |offset#1@@0| |count#0@@2|) (LinearMutableMapBase.__default.FilledWithOtherKey LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|) (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@24|)) (Lit |start#0@@2|) |offset#1@@0|) (LitInt |excludingKey#0@@6|)))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |2759| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@24|) |start#0@@2| |offset#1@@0|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2761| :pattern ( (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@24|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithKey$V T@U) (|elements#0@@25| T@U) (|slot#0@@32| T@U) (|key#0@@24| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithKey$V) TyType) (= (type |elements#0@@25|) (SeqType BoxType))) (= (type |slot#0@@32|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearMutableMapBase._default.FilledWithKey$V |elements#0@@25| |slot#0@@32| |key#0@@24|) (and (and (and ($Is |elements#0@@25| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithKey$V))) ($Is |slot#0@@32| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@24|) (< |key#0@@24| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithKey$V |elements#0@@25|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@25|) |slot#0@@32|))))) true) :qid |unknown.0:0| :skolemid |2762| :pattern ( (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.FilledWithKey$V |elements#0@@25| |slot#0@@32| |key#0@@24|)) ))))
(assert (forall ((LinearMutableMapBase._default.FilledWithKey$V@@0 T@U) (|elements#0@@26| T@U) (|slot#0@@33| T@U) (|key#0@@25| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithKey$V@@0) TyType) (= (type |elements#0@@26|) (SeqType BoxType))) (= (type |slot#0@@33|) DatatypeTypeType)) (and (and ($Is |elements#0@@26| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithKey$V@@0))) ($Is |slot#0@@33| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 18446744073709551616)))) (= (|LinearMutableMapBase.__default.FilledWithKey#requires| LinearMutableMapBase._default.FilledWithKey$V@@0 |elements#0@@26| |slot#0@@33| |key#0@@25|)  (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithKey$V@@0 |elements#0@@26|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@26|) |slot#0@@33|)))) :qid |unknown.0:0| :skolemid |2763| :pattern ( (|LinearMutableMapBase.__default.FilledWithKey#requires| LinearMutableMapBase._default.FilledWithKey$V@@0 |elements#0@@26| |slot#0@@33| |key#0@@25|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithKey$V@@1 T@U) (|elements#0@@27| T@U) (|slot#0@@34| T@U) (|key#0@@26| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithKey$V@@1) TyType) (= (type |elements#0@@27|) (SeqType BoxType))) (= (type |slot#0@@34|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34| |key#0@@26|) (and (and (and ($Is |elements#0@@27| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithKey$V@@1))) ($Is |slot#0@@34| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@27|) |slot#0@@34|))))) (and (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|) (=> (not (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|)) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|))) (=> (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|)) (LinearMutableMapBase.Slot.Slot_q |slot#0@@34|))) (= (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34| |key#0@@26|)  (and (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34|)) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@27| (LinearMutableMapBase.Slot.slot |slot#0@@34|)))) |key#0@@26|))))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.FilledWithKey$V@@1 |elements#0@@27| |slot#0@@34| |key#0@@26|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithKey$V@@2 T@U) (|elements#0@@28| T@U) (|slot#0@@35| T@U) (|key#0@@27| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithKey$V@@2) TyType) (= (type |elements#0@@28|) (SeqType BoxType))) (= (type |slot#0@@35|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|) (LitInt |key#0@@27|)) (and (and (and ($Is |elements#0@@28| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithKey$V@@2))) ($Is |slot#0@@35| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@27|) (< |key#0@@27| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|))))) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@28|)) (Lit |slot#0@@35|)))))) (and (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)) (=> (not (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)))))) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)))) (=> (U_2_bool (Lit (bool_2_U  (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)))))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@35|)))) (= (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|) (LitInt |key#0@@27|))  (and (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|))) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@28|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@35|)))))) (LitInt |key#0@@27|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2765| :pattern ( (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.FilledWithKey$V@@2 (Lit |elements#0@@28|) (Lit |slot#0@@35|) (LitInt |key#0@@27|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithEntryKey$V T@U) (|elements#0@@29| T@U) (|slot#0@@36| T@U) (|key#0@@28| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithEntryKey$V) TyType) (= (type |elements#0@@29|) (SeqType BoxType))) (= (type |slot#0@@36|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithEntryKey#canCall| LinearMutableMapBase._default.FilledWithEntryKey$V |elements#0@@29| |slot#0@@36| |key#0@@28|) (and (and (and ($Is |elements#0@@29| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithEntryKey$V))) ($Is |slot#0@@36| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@28|) (< |key#0@@28| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithEntryKey$V |elements#0@@29|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@29|) |slot#0@@36|))))) true) :qid |unknown.0:0| :skolemid |2766| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.FilledWithEntryKey$V |elements#0@@29| |slot#0@@36| |key#0@@28|)) ))))
(assert (forall ((LinearMutableMapBase._default.FilledWithEntryKey$V@@0 T@U) (|elements#0@@30| T@U) (|slot#0@@37| T@U) (|key#0@@29| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithEntryKey$V@@0) TyType) (= (type |elements#0@@30|) (SeqType BoxType))) (= (type |slot#0@@37|) DatatypeTypeType)) (and (and ($Is |elements#0@@30| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithEntryKey$V@@0))) ($Is |slot#0@@37| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@29|) (< |key#0@@29| 18446744073709551616)))) (= (|LinearMutableMapBase.__default.FilledWithEntryKey#requires| LinearMutableMapBase._default.FilledWithEntryKey$V@@0 |elements#0@@30| |slot#0@@37| |key#0@@29|)  (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithEntryKey$V@@0 |elements#0@@30|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@30|) |slot#0@@37|)))) :qid |unknown.0:0| :skolemid |2767| :pattern ( (|LinearMutableMapBase.__default.FilledWithEntryKey#requires| LinearMutableMapBase._default.FilledWithEntryKey$V@@0 |elements#0@@30| |slot#0@@37| |key#0@@29|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithEntryKey$V@@1 T@U) (|elements#0@@31| T@U) (|slot#0@@38| T@U) (|key#0@@30| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithEntryKey$V@@1) TyType) (= (type |elements#0@@31|) (SeqType BoxType))) (= (type |slot#0@@38|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithEntryKey#canCall| LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38| |key#0@@30|) (and (and (and ($Is |elements#0@@31| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithEntryKey$V@@1))) ($Is |slot#0@@38| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@30|) (< |key#0@@30| 18446744073709551616))) (and (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@31|) |slot#0@@38|))))) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38|) (=> (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38|) (LinearMutableMapBase.Slot.Slot_q |slot#0@@38|))) (= (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38| |key#0@@30|)  (and (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38|) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@31| (LinearMutableMapBase.Slot.slot |slot#0@@38|)))) |key#0@@30|))))) :qid |unknown.0:0| :skolemid |2768| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.FilledWithEntryKey$V@@1 |elements#0@@31| |slot#0@@38| |key#0@@30|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.FilledWithEntryKey$V@@2 T@U) (|elements#0@@32| T@U) (|slot#0@@39| T@U) (|key#0@@31| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.FilledWithEntryKey$V@@2) TyType) (= (type |elements#0@@32|) (SeqType BoxType))) (= (type |slot#0@@39|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.FilledWithEntryKey#canCall| LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|) (LitInt |key#0@@31|)) (and (and (and ($Is |elements#0@@32| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.FilledWithEntryKey$V@@2))) ($Is |slot#0@@39| Tclass.LinearMutableMapBase.Slot)) (and (<= (LitInt 0) |key#0@@31|) (< |key#0@@31| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|))))) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@32|)) (Lit |slot#0@@39|)))))) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|)) (=> (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|))))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@39|)))) (= (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|) (LitInt |key#0@@31|))  (and (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|)) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@32|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@39|)))))) (LitInt |key#0@@31|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2769| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@32|) (Lit |slot#0@@39|) (LitInt |key#0@@31|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotExplainsKey$V T@U) (|elements#0@@33| T@U) (|skips#0| Int) (|key#0@@32| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.SlotExplainsKey$V) TyType) (= (type |elements#0@@33|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SlotExplainsKey$V |elements#0@@33| |skips#0| |key#0@@32|) (and (and (and ($Is |elements#0@@33| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotExplainsKey$V))) (<= (LitInt 0) |skips#0|)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 18446744073709551616))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SlotExplainsKey$V |elements#0@@33|)))) true) :qid |unknown.0:0| :skolemid |2770| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SlotExplainsKey$V |elements#0@@33| |skips#0| |key#0@@32|)) ))))
(assert (forall ((LinearMutableMapBase._default.SlotExplainsKey$V@@0 T@U) (|elements#0@@34| T@U) (|skips#0@@0| Int) (|key#0@@33| Int) ) (!  (=> (and (= (type LinearMutableMapBase._default.SlotExplainsKey$V@@0) TyType) (= (type |elements#0@@34|) (SeqType BoxType))) (=> (and (and ($Is |elements#0@@34| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotExplainsKey$V@@0))) (<= (LitInt 0) |skips#0@@0|)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 18446744073709551616))) (= (|LinearMutableMapBase.__default.SlotExplainsKey#requires| LinearMutableMapBase._default.SlotExplainsKey$V@@0 |elements#0@@34| |skips#0@@0| |key#0@@33|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SlotExplainsKey$V@@0 |elements#0@@34|)))) :qid |unknown.0:0| :skolemid |2771| :pattern ( (|LinearMutableMapBase.__default.SlotExplainsKey#requires| LinearMutableMapBase._default.SlotExplainsKey$V@@0 |elements#0@@34| |skips#0@@0| |key#0@@33|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotExplainsKey$V@@1 T@U) (|elements#0@@35| T@U) (|skips#0@@1| Int) (|key#0@@34| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.SlotExplainsKey$V@@1) TyType) (= (type |elements#0@@35|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| |skips#0@@1| |key#0@@34|) (and (and (and ($Is |elements#0@@35| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotExplainsKey$V@@1))) (<= (LitInt 0) |skips#0@@1|)) (and (<= (LitInt 0) |key#0@@34|) (< |key#0@@34| 18446744073709551616))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35|)))) (and (and (and (|LinearMutableMapBase.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@35|) |key#0@@34|) (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@35|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1|)) (let ((|foundSlot#0| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@35|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1|))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@35|) |foundSlot#0|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@35|) |foundSlot#0|) (and (and (|LinearMutableMapBase.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@35|) |key#0@@34|) (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1| |key#0@@34|)) (=> (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1| |key#0@@34|) (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| |foundSlot#0| |key#0@@34|))))))) (= (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| |skips#0@@1| |key#0@@34|) (let ((|foundSlot#0@@0| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@35|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1|))) (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@35|) |foundSlot#0@@0|) (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| |elements#0@@35|) |key#0@@34|) |skips#0@@1| |key#0@@34|)) (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| |foundSlot#0@@0| |key#0@@34|)))))) :qid |unknown.0:0| :skolemid |2772| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SlotExplainsKey$V@@1 |elements#0@@35| |skips#0@@1| |key#0@@34|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SlotExplainsKey$V@@2 T@U) (|elements#0@@36| T@U) (|skips#0@@2| Int) (|key#0@@35| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.SlotExplainsKey$V@@2) TyType) (= (type |elements#0@@36|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LitInt |skips#0@@2|) (LitInt |key#0@@35|)) (and (and (and ($Is |elements#0@@36| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SlotExplainsKey$V@@2))) (<= (LitInt 0) |skips#0@@2|)) (and (<= (LitInt 0) |key#0@@35|) (< |key#0@@35| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|)))))))) (and (and (and (|LinearMutableMapBase.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@36|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|))) (let ((|foundSlot#1| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@36|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|)))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@36|)) |foundSlot#1|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@36|)) |foundSlot#1|) (and (and (|LinearMutableMapBase.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|) (LitInt |key#0@@35|))) (=> (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|) (LitInt |key#0@@35|)) (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) |foundSlot#1| (LitInt |key#0@@35|)))))))) (= (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LitInt |skips#0@@2|) (LitInt |key#0@@35|)) (let ((|foundSlot#1@@0| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@36|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|)))) (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@36|)) |foundSlot#1@@0|) (LinearMutableMapBase.__default.FilledWithOtherKeys LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@36|)) (LitInt |key#0@@35|)) (LitInt |skips#0@@2|) (LitInt |key#0@@35|))) (LinearMutableMapBase.__default.FilledWithKey LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) |foundSlot#1@@0| (LitInt |key#0@@35|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2773| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SlotExplainsKey$V@@2 (Lit |elements#0@@36|) (LitInt |skips#0@@2|) (LitInt |key#0@@35|))) ))))
(assert (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V T@U) ($ly@@324 T@U) (|elements#0@@37| T@U) (|key#0@@36| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V) TyType) (= (type $ly@@324) LayerTypeType)) (= (type |elements#0@@37|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V ($LS $ly@@324) |elements#0@@37| |key#0@@36|) (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V $ly@@324 |elements#0@@37| |key#0@@36|))) :qid |unknown.0:0| :skolemid |2774| :pattern ( (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V ($LS $ly@@324) |elements#0@@37| |key#0@@36|)) )))
(assert (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@0 T@U) ($ly@@325 T@U) (|elements#0@@38| T@U) (|key#0@@37| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@0) TyType) (= (type $ly@@325) LayerTypeType)) (= (type |elements#0@@38|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@0 $ly@@325 |elements#0@@38| |key#0@@37|) (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@0 $LZ |elements#0@@38| |key#0@@37|))) :qid |unknown.0:0| :skolemid |2775| :pattern ( (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@0 (AsFuelBottom $ly@@325) |elements#0@@38| |key#0@@37|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1 T@U) ($ly@@326 T@U) (|elements#0@@39| T@U) (|key#0@@38| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1) TyType) (= (type $ly@@326) LayerTypeType)) (= (type |elements#0@@39|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SomeSkipCountExplainsKey#canCall| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1 |elements#0@@39| |key#0@@38|) (and (and ($Is |elements#0@@39| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1))) (and (<= (LitInt 0) |key#0@@38|) (< |key#0@@38| 18446744073709551616))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1 |elements#0@@39|)))) true) :qid |unknown.0:0| :skolemid |2776| :pattern ( (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@1 $ly@@326 |elements#0@@39| |key#0@@38|)) ))))
(assert (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2 T@U) ($ly@@327 T@U) (|elements#0@@40| T@U) (|key#0@@39| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2) TyType) (= (type $ly@@327) LayerTypeType)) (= (type |elements#0@@40|) (SeqType BoxType))) (and ($Is |elements#0@@40| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2))) (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 18446744073709551616)))) (= (|LinearMutableMapBase.__default.SomeSkipCountExplainsKey#requires| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2 $ly@@327 |elements#0@@40| |key#0@@39|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2 |elements#0@@40|))) :qid |unknown.0:0| :skolemid |2777| :pattern ( (|LinearMutableMapBase.__default.SomeSkipCountExplainsKey#requires| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@2 $ly@@327 |elements#0@@40| |key#0@@39|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 T@U) ($ly@@328 T@U) (|elements#0@@41| T@U) (|key#0@@40| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3) TyType) (= (type $ly@@328) LayerTypeType)) (= (type |elements#0@@41|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SomeSkipCountExplainsKey#canCall| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41| |key#0@@40|) (and (and ($Is |elements#0@@41| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3))) (and (<= (LitInt 0) |key#0@@40|) (< |key#0@@40| 18446744073709551616))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41|)))) (and (forall ((|skips#0@@3| Int) ) (!  (=> (<= (LitInt 0) |skips#0@@3|) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41| |skips#0@@3| |key#0@@40|)) :qid |LinearMutableMapBaseidfy.186:12| :skolemid |2779| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41| |skips#0@@3| |key#0@@40|)) )) (= (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 ($LS $ly@@328) |elements#0@@41| |key#0@@40|) (exists ((|skips#0@@4| Int) ) (!  (and (<= (LitInt 0) |skips#0@@4|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41| |skips#0@@4| |key#0@@40|)) :qid |LinearMutableMapBaseidfy.186:12| :skolemid |2778| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 |elements#0@@41| |skips#0@@4| |key#0@@40|)) ))))) :qid |unknown.0:0| :skolemid |2780| :pattern ( (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@3 ($LS $ly@@328) |elements#0@@41| |key#0@@40|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 T@U) ($ly@@329 T@U) (|elements#0@@42| T@U) (|key#0@@41| Int) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4) TyType) (= (type $ly@@329) LayerTypeType)) (= (type |elements#0@@42|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.SomeSkipCountExplainsKey#canCall| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 (Lit |elements#0@@42|) (LitInt |key#0@@41|)) (and (and ($Is |elements#0@@42| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4))) (and (<= (LitInt 0) |key#0@@41|) (< |key#0@@41| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 (Lit |elements#0@@42|)))))))) (and (forall ((|skips#1| Int) ) (!  (=> (<= (LitInt 0) |skips#1|) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 (Lit |elements#0@@42|) |skips#1| (LitInt |key#0@@41|))) :qid |LinearMutableMapBaseidfy.186:12| :skolemid |2782| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 |elements#0@@42| |skips#1| |key#0@@41|)) )) (= (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 ($LS $ly@@329) (Lit |elements#0@@42|) (LitInt |key#0@@41|)) (exists ((|skips#1@@0| Int) ) (!  (and (<= (LitInt 0) |skips#1@@0|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 (Lit |elements#0@@42|) |skips#1@@0| (LitInt |key#0@@41|))) :qid |LinearMutableMapBaseidfy.186:12| :skolemid |2781| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 |elements#0@@42| |skips#1@@0| |key#0@@41|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2783| :pattern ( (LinearMutableMapBase.__default.SomeSkipCountExplainsKey LinearMutableMapBase._default.SomeSkipCountExplainsKey$V@@4 ($LS $ly@@329) (Lit |elements#0@@42|) (LitInt |key#0@@41|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V T@U) (|elements#0@@43| T@U) (|slot1#0| T@U) (|slot2#0| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V) TyType) (= (type |elements#0@@43|) (SeqType BoxType))) (= (type |slot1#0|) DatatypeTypeType)) (= (type |slot2#0|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@43| |slot1#0| |slot2#0|) (and (and (and ($Is |elements#0@@43| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V))) ($Is |slot1#0| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@43|)))) true) :qid |unknown.0:0| :skolemid |2784| :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@43| |slot1#0| |slot2#0|)) ))))
(assert (forall ((LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 T@U) (|elements#0@@44| T@U) (|slot1#0@@0| T@U) (|slot2#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0) TyType) (= (type |elements#0@@44|) (SeqType BoxType))) (= (type |slot1#0@@0|) DatatypeTypeType)) (= (type |slot2#0@@0|) DatatypeTypeType)) (and (and ($Is |elements#0@@44| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0))) ($Is |slot1#0@@0| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@0| Tclass.LinearMutableMapBase.Slot))) (= (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#requires| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@44| |slot1#0@@0| |slot2#0@@0|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@44|))) :qid |unknown.0:0| :skolemid |2785| :pattern ( (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#requires| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@44| |slot1#0@@0| |slot2#0@@0|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 T@U) (|elements#0@@45| T@U) (|slot1#0@@1| T@U) (|slot2#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1) TyType) (= (type |elements#0@@45|) (SeqType BoxType))) (= (type |slot1#0@@1|) DatatypeTypeType)) (= (type |slot2#0@@1|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1| |slot2#0@@1|) (and (and (and ($Is |elements#0@@45| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1))) ($Is |slot1#0@@1| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@1| Tclass.LinearMutableMapBase.Slot)) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45|)))) (and (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@45|) |slot1#0@@1|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot1#0@@1|) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@45|) |slot2#0@@1|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot2#0@@1|) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|) (=> (not (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|)) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|))) (=> (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|)) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|) (=> (not (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|)) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|))) (=> (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|)) (and (LinearMutableMapBase.Slot.Slot_q |slot1#0@@1|) (LinearMutableMapBase.Slot.Slot_q |slot2#0@@1|)))))))))) (= (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1| |slot2#0@@1|)  (and (and (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot1#0@@1|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot2#0@@1|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1|))) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot2#0@@1|))) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@45| (LinearMutableMapBase.Slot.slot |slot1#0@@1|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@45| (LinearMutableMapBase.Slot.slot |slot2#0@@1|))))))))) :qid |unknown.0:0| :skolemid |2786| :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@45| |slot1#0@@1| |slot2#0@@1|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 T@U) (|elements#0@@46| T@U) (|slot1#0@@2| T@U) (|slot2#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2) TyType) (= (type |elements#0@@46|) (SeqType BoxType))) (= (type |slot1#0@@2|) DatatypeTypeType)) (= (type |slot2#0@@2|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|)) (and (and (and ($Is |elements#0@@46| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2))) ($Is |slot1#0@@2| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@2| Tclass.LinearMutableMapBase.Slot)) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|)))))))) (and (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot1#0@@2|)) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot1#0@@2|)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot2#0@@2|)) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot2#0@@2|)) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)))))) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U  (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)))))) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)))))) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U  (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)))))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot1#0@@2|)) (LinearMutableMapBase.Slot.Slot_q (Lit |slot2#0@@2|))))))))))) (= (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|))  (and (and (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot1#0@@2|)) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot2#0@@2|))) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|)))) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot2#0@@2|)))) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@46|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot1#0@@2|)))))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@46|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot2#0@@2|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2787| :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@46|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@17| Int) (|slot1#0@@3| T@U) (|slot2#0@@3| T@U) ) (!  (=> (and (and (= (type |slot1#0@@3|) DatatypeTypeType) (= (type |slot2#0@@3|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SameSlot#canCall| |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|) (and (and (and (<= (LitInt 0) |elementsLength#0@@17|) ($Is |slot1#0@@3| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@3| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@17| |slot1#0@@3|) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@17| |slot2#0@@3|))))) true) :qid |LinearMutableMapBaseidfy.201:22| :skolemid |2788| :pattern ( (LinearMutableMapBase.__default.SameSlot |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|)) ))))
(assert (forall ((|elementsLength#0@@18| Int) (|slot1#0@@4| T@U) (|slot2#0@@4| T@U) ) (!  (=> (and (= (type |slot1#0@@4|) DatatypeTypeType) (= (type |slot2#0@@4|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@18|) ($Is |slot1#0@@4| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@4| Tclass.LinearMutableMapBase.Slot)) (= (|LinearMutableMapBase.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|)  (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@18| |slot1#0@@4|) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@18| |slot2#0@@4|))))) :qid |LinearMutableMapBaseidfy.201:22| :skolemid |2789| :pattern ( (|LinearMutableMapBase.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|)) )))
(assert  (=> true (forall ((|elementsLength#0@@19| Int) (|slot1#0@@5| T@U) (|slot2#0@@5| T@U) ) (!  (=> (and (and (= (type |slot1#0@@5|) DatatypeTypeType) (= (type |slot2#0@@5|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SameSlot#canCall| |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (and (and (and (<= (LitInt 0) |elementsLength#0@@19|) ($Is |slot1#0@@5| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@5| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@19| |slot1#0@@5|) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@19| |slot2#0@@5|))))) (and (and (|$IsA#LinearMutableMapBase.Slot| |slot1#0@@5|) (|$IsA#LinearMutableMapBase.Slot| |slot2#0@@5|)) (= (LinearMutableMapBase.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (|LinearMutableMapBase.Slot#Equal| |slot1#0@@5| |slot2#0@@5|)))) :qid |LinearMutableMapBaseidfy.201:22| :skolemid |2790| :pattern ( (LinearMutableMapBase.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@20| Int) (|slot1#0@@6| T@U) (|slot2#0@@6| T@U) ) (!  (=> (and (and (= (type |slot1#0@@6|) DatatypeTypeType) (= (type |slot2#0@@6|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.SameSlot#canCall| (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (and (and (and (<= (LitInt 0) |elementsLength#0@@20|) ($Is |slot1#0@@6| Tclass.LinearMutableMapBase.Slot)) ($Is |slot2#0@@6| Tclass.LinearMutableMapBase.Slot)) (and (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|))))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot2#0@@6|))))))))) (and (and (|$IsA#LinearMutableMapBase.Slot| (Lit |slot1#0@@6|)) (|$IsA#LinearMutableMapBase.Slot| (Lit |slot2#0@@6|))) (= (LinearMutableMapBase.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (|LinearMutableMapBase.Slot#Equal| |slot1#0@@6| |slot2#0@@6|)))) :qid |LinearMutableMapBaseidfy.201:22| :weight 3 :skolemid |2791| :pattern ( (LinearMutableMapBase.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocateStorageKey$V T@U) (|elements#0@@47| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocateStorageKey$V) TyType) (= (type |elements#0@@47|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| LinearMutableMapBase._default.CantEquivocateStorageKey$V |elements#0@@47|) (and ($Is |elements#0@@47| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocateStorageKey$V))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.CantEquivocateStorageKey$V |elements#0@@47|)))) true) :qid |unknown.0:0| :skolemid |2792| :pattern ( (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.CantEquivocateStorageKey$V |elements#0@@47|)) ))))
(assert (forall ((LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0 T@U) (|elements#0@@48| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0) TyType) (= (type |elements#0@@48|) (SeqType BoxType))) ($Is |elements#0@@48| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0)))) (= (|LinearMutableMapBase.__default.CantEquivocateStorageKey#requires| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0 |elements#0@@48|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0 |elements#0@@48|))) :qid |unknown.0:0| :skolemid |2793| :pattern ( (|LinearMutableMapBase.__default.CantEquivocateStorageKey#requires| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@0 |elements#0@@48|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 T@U) (|elements#0@@49| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1) TyType) (= (type |elements#0@@49|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49|) (and ($Is |elements#0@@49| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49|)))) (and (forall ((|slot1#0@@7| T@U) (|slot2#0@@7| T@U) ) (!  (=> (and (and (= (type |slot1#0@@7|) DatatypeTypeType) (= (type |slot2#0@@7|) DatatypeTypeType)) (and ($Is |slot1#0@@7| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#0@@7| Tclass.LinearMutableMapBase.Slot))) (and (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49| |slot1#0@@7| |slot2#0@@7|) (=> (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49| |slot1#0@@7| |slot2#0@@7|) (|LinearMutableMapBase.__default.SameSlot#canCall| (|Seq#Length| |elements#0@@49|) |slot1#0@@7| |slot2#0@@7|)))) :qid |LinearMutableMapBaseidfy.211:12| :skolemid |2795| :pattern ( (LinearMutableMapBase.__default.SameSlot (|Seq#Length| |elements#0@@49|) |slot1#0@@7| |slot2#0@@7|)) :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49| |slot1#0@@7| |slot2#0@@7|)) )) (= (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49|) (forall ((|slot1#0@@8| T@U) (|slot2#0@@8| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@8|) DatatypeTypeType) (= (type |slot2#0@@8|) DatatypeTypeType)) (and ($Is |slot1#0@@8| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#0@@8| Tclass.LinearMutableMapBase.Slot))) (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49| |slot1#0@@8| |slot2#0@@8|)) (LinearMutableMapBase.__default.SameSlot (|Seq#Length| |elements#0@@49|) |slot1#0@@8| |slot2#0@@8|)) :qid |LinearMutableMapBaseidfy.211:12| :skolemid |2794| :pattern ( (LinearMutableMapBase.__default.SameSlot (|Seq#Length| |elements#0@@49|) |slot1#0@@8| |slot2#0@@8|)) :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49| |slot1#0@@8| |slot2#0@@8|)) ))))) :qid |unknown.0:0| :skolemid |2796| :pattern ( (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@1 |elements#0@@49|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 T@U) (|elements#0@@50| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2) TyType) (= (type |elements#0@@50|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|)) (and ($Is |elements#0@@50| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|)))))))) (and (forall ((|slot1#1| T@U) (|slot2#1| T@U) ) (!  (=> (and (and (= (type |slot1#1|) DatatypeTypeType) (= (type |slot2#1|) DatatypeTypeType)) (and ($Is |slot1#1| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#1| Tclass.LinearMutableMapBase.Slot))) (and (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|) |slot1#1| |slot2#1|) (=> (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|) |slot1#1| |slot2#1|) (|LinearMutableMapBase.__default.SameSlot#canCall| (|Seq#Length| (Lit |elements#0@@50|)) |slot1#1| |slot2#1|)))) :qid |LinearMutableMapBaseidfy.211:12| :skolemid |2798| :pattern ( (LinearMutableMapBase.__default.SameSlot (|Seq#Length| |elements#0@@50|) |slot1#1| |slot2#1|)) :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 |elements#0@@50| |slot1#1| |slot2#1|)) )) (= (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|)) (forall ((|slot1#1@@0| T@U) (|slot2#1@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@0|) DatatypeTypeType) (= (type |slot2#1@@0|) DatatypeTypeType)) (and ($Is |slot1#1@@0| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#1@@0| Tclass.LinearMutableMapBase.Slot))) (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|) |slot1#1@@0| |slot2#1@@0|)) (LinearMutableMapBase.__default.SameSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot1#1@@0| |slot2#1@@0|)) :qid |LinearMutableMapBaseidfy.211:12| :skolemid |2797| :pattern ( (LinearMutableMapBase.__default.SameSlot (|Seq#Length| |elements#0@@50|) |slot1#1@@0| |slot2#1@@0|)) :pattern ( (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 |elements#0@@50| |slot1#1@@0| |slot2#1@@0|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2799| :pattern ( (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@50|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.KeyInSlotIsInContents$V T@U) (|elements#0@@51| T@U) (|contents#0@@3| T@U) (|slot#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.KeyInSlotIsInContents$V) TyType) (= (type |elements#0@@51|) (SeqType BoxType))) (= (type |contents#0@@3|) (MapType BoxType BoxType))) (= (type |slot#0@@40|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| LinearMutableMapBase._default.KeyInSlotIsInContents$V |elements#0@@51| |contents#0@@3| |slot#0@@40|) (and (and (and ($Is |elements#0@@51| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.KeyInSlotIsInContents$V))) ($Is |contents#0@@3| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.KeyInSlotIsInContents$V)))) ($Is |slot#0@@40| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@51|) |slot#0@@40|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.KeyInSlotIsInContents$V |elements#0@@51| |slot#0@@40|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.KeyInSlotIsInContents$V |elements#0@@51| |slot#0@@40|)))))) true) :qid |unknown.0:0| :skolemid |2800| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.KeyInSlotIsInContents$V |elements#0@@51| |contents#0@@3| |slot#0@@40|)) ))))
(assert (forall ((LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0 T@U) (|elements#0@@52| T@U) (|contents#0@@4| T@U) (|slot#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0) TyType) (= (type |elements#0@@52|) (SeqType BoxType))) (= (type |contents#0@@4|) (MapType BoxType BoxType))) (= (type |slot#0@@41|) DatatypeTypeType)) (and (and ($Is |elements#0@@52| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0))) ($Is |contents#0@@4| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0)))) ($Is |slot#0@@41| Tclass.LinearMutableMapBase.Slot))) (= (|LinearMutableMapBase.__default.KeyInSlotIsInContents#requires| LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0 |elements#0@@52| |contents#0@@4| |slot#0@@41|)  (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@52|) |slot#0@@41|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0 |elements#0@@52| |slot#0@@41|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0 |elements#0@@52| |slot#0@@41|))))) :qid |unknown.0:0| :skolemid |2801| :pattern ( (|LinearMutableMapBase.__default.KeyInSlotIsInContents#requires| LinearMutableMapBase._default.KeyInSlotIsInContents$V@@0 |elements#0@@52| |contents#0@@4| |slot#0@@41|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 T@U) (|elements#0@@53| T@U) (|contents#0@@5| T@U) (|slot#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1) TyType) (= (type |elements#0@@53|) (SeqType BoxType))) (= (type |contents#0@@5|) (MapType BoxType BoxType))) (= (type |slot#0@@42|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 |elements#0@@53| |contents#0@@5| |slot#0@@42|) (and (and (and ($Is |elements#0@@53| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1))) ($Is |contents#0@@5| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1)))) ($Is |slot#0@@42| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@53|) |slot#0@@42|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 |elements#0@@53| |slot#0@@42|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 |elements#0@@53| |slot#0@@42|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (LinearMutableMapBase.Slot.Slot_q |slot#0@@42|)) (= (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 |elements#0@@53| |contents#0@@5| |slot#0@@42|)  (and true (let ((|key#0@@42| (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (LinearMutableMapBase.Slot.slot |slot#0@@42|)))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@42|)))))))))) :qid |unknown.0:0| :skolemid |2802| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.KeyInSlotIsInContents$V@@1 |elements#0@@53| |contents#0@@5| |slot#0@@42|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 T@U) (|elements#0@@54| T@U) (|contents#0@@6| T@U) (|slot#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2) TyType) (= (type |elements#0@@54|) (SeqType BoxType))) (= (type |contents#0@@6|) (MapType BoxType BoxType))) (= (type |slot#0@@43|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@54|) (Lit |contents#0@@6|) (Lit |slot#0@@43|)) (and (and (and ($Is |elements#0@@54| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2))) ($Is |contents#0@@6| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2)))) ($Is |slot#0@@43| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@54|)) (Lit |slot#0@@43|)) (U_2_bool (Lit (bool_2_U  (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@43|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@43|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@43|))) (= (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@54|) (Lit |contents#0@@6|) (Lit |slot#0@@43|))  (and true (let ((|key#1@@6| (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@43|)))))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@6|)))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2803| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@54|) (Lit |contents#0@@6|) (Lit |slot#0@@43|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SeqMatchesContentKeys$V T@U) (|elements#0@@55| T@U) (|contents#0@@7| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SeqMatchesContentKeys$V) TyType) (= (type |elements#0@@55|) (SeqType BoxType))) (= (type |contents#0@@7|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V |elements#0@@55| |contents#0@@7|) (and (and ($Is |elements#0@@55| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SeqMatchesContentKeys$V))) ($Is |contents#0@@7| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.SeqMatchesContentKeys$V)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SeqMatchesContentKeys$V |elements#0@@55|)))) true) :qid |unknown.0:0| :skolemid |2804| :pattern ( (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearMutableMapBase._default.SeqMatchesContentKeys$V |elements#0@@55| |contents#0@@7|)) ))))
(assert (forall ((LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0 T@U) (|elements#0@@56| T@U) (|contents#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0) TyType) (= (type |elements#0@@56|) (SeqType BoxType))) (= (type |contents#0@@8|) (MapType BoxType BoxType))) (and ($Is |elements#0@@56| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0))) ($Is |contents#0@@8| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0))))) (= (|LinearMutableMapBase.__default.SeqMatchesContentKeys#requires| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0 |elements#0@@56| |contents#0@@8|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0 |elements#0@@56|))) :qid |unknown.0:0| :skolemid |2805| :pattern ( (|LinearMutableMapBase.__default.SeqMatchesContentKeys#requires| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@0 |elements#0@@56| |contents#0@@8|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 T@U) (|elements#0@@57| T@U) (|contents#0@@9| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1) TyType) (= (type |elements#0@@57|) (SeqType BoxType))) (= (type |contents#0@@9|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9|) (and (and ($Is |elements#0@@57| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1))) ($Is |contents#0@@9| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57|)))) (and (and (forall ((|key#0@@43| T@U) ) (!  (=> (= (type |key#0@@43|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@43|)) (< (U_2_int |key#0@@43|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box |key#0@@43|))) (forall ((|skips#0@@5| Int) ) (!  (=> (<= (LitInt 0) |skips#0@@5|) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@5| (U_2_int |key#0@@43|))) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2809| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@5| (U_2_int |key#0@@43|))) ))))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2810| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box |key#0@@43|))) )) (=> (forall ((|key#0@@44| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U |key#0@@44|)))) (exists ((|skips#0@@6| Int) ) (!  (and (<= (LitInt 0) |skips#0@@6|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@6| |key#0@@44|)) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2813| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@6| |key#0@@44|)) )))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2814| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U |key#0@@44|)))) )) (and (forall ((|slot#0@@44| T@U) ) (!  (=> (and (= (type |slot#0@@44|) DatatypeTypeType) ($Is |slot#0@@44| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@57|) |slot#0@@44|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@44|) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|) (=> (not (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|)) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|))) (=> (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|)) (|LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@44|)))))) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2811| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@44|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@44|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@44|)) )) (=> (forall ((|slot#0@@45| T@U) ) (!  (=> (and (and (= (type |slot#0@@45|) DatatypeTypeType) ($Is |slot#0@@45| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@45|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@45|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@45|)))) (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@45|)) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2812| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@45|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@45|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@45|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@45|)) )) (|LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57|))))) (= (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9|)  (and (and (forall ((|key#0@@45| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U |key#0@@45|)))) (exists ((|skips#0@@7| Int) ) (!  (and (<= (LitInt 0) |skips#0@@7|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@7| |key#0@@45|)) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2806| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |skips#0@@7| |key#0@@45|)) )))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2807| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U |key#0@@45|)))) )) (forall ((|slot#0@@46| T@U) ) (!  (=> (and (and (= (type |slot#0@@46|) DatatypeTypeType) ($Is |slot#0@@46| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@46|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@46|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@46|)))) (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@46|)) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2808| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9| |slot#0@@46|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@46|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |slot#0@@46|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@46|)) ))) (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57|))))) :qid |unknown.0:0| :skolemid |2815| :pattern ( (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearMutableMapBase._default.SeqMatchesContentKeys$V@@1 |elements#0@@57| |contents#0@@9|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 T@U) (|elements#0@@58| T@U) (|contents#0@@10| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2) TyType) (= (type |elements#0@@58|) (SeqType BoxType))) (= (type |contents#0@@10|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.SeqMatchesContentKeys#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|)) (and (and ($Is |elements#0@@58| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2))) ($Is |contents#0@@10| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2)))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|)))))))) (and (and (forall ((|key#1@@7| T@U) ) (!  (=> (= (type |key#1@@7|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@7|)) (< (U_2_int |key#1@@7|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box |key#1@@7|))) (forall ((|skips#1@@1| Int) ) (!  (=> (<= (LitInt 0) |skips#1@@1|) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |skips#1@@1| (U_2_int |key#1@@7|))) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2819| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |skips#1@@1| (U_2_int |key#1@@7|))) ))))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2820| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box |key#1@@7|))) )) (=> (forall ((|key#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@8|) (< |key#1@@8| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U |key#1@@8|)))) (exists ((|skips#1@@2| Int) ) (!  (and (<= (LitInt 0) |skips#1@@2|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |skips#1@@2| |key#1@@8|)) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2823| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |skips#1@@2| |key#1@@8|)) )))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2824| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U |key#1@@8|)))) )) (and (forall ((|slot#1@@2| T@U) ) (!  (=> (and (= (type |slot#1@@2|) DatatypeTypeType) ($Is |slot#1@@2| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@58|)) |slot#1@@2|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@58|)) |slot#1@@2|) (and (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@2|) (=> (not (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@2|)) (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@2|))) (=> (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@2|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@2|)) (|LinearMutableMapBase.__default.KeyInSlotIsInContents#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|) |slot#1@@2|)))))) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2821| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |contents#0@@10| |slot#1@@2|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@2|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@2|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@58|) |slot#1@@2|)) )) (=> (forall ((|slot#1@@3| T@U) ) (!  (=> (and (and (= (type |slot#1@@3|) DatatypeTypeType) ($Is |slot#1@@3| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@58|)) |slot#1@@3|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@3|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@3|)))) (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|) |slot#1@@3|)) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2822| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |contents#0@@10| |slot#1@@3|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@3|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@3|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@58|) |slot#1@@3|)) )) (|LinearMutableMapBase.__default.CantEquivocateStorageKey#canCall| LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|)))))) (= (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|))  (and (and (forall ((|key#1@@9| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@9|) (< |key#1@@9| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U |key#1@@9|)))) (exists ((|skips#1@@3| Int) ) (!  (and (<= (LitInt 0) |skips#1@@3|) (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |skips#1@@3| |key#1@@9|)) :qid |LinearMutableMapBaseidfy.226:50| :skolemid |2816| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |skips#1@@3| |key#1@@9|)) )))) :qid |LinearMutableMapBaseidfy.226:16| :skolemid |2817| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U |key#1@@9|)))) )) (forall ((|slot#1@@4| T@U) ) (!  (=> (and (and (= (type |slot#1@@4|) DatatypeTypeType) ($Is |slot#1@@4| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@58|)) |slot#1@@4|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@4|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) |slot#1@@4|)))) (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|) |slot#1@@4|)) :qid |LinearMutableMapBaseidfy.227:16| :skolemid |2818| :pattern ( (LinearMutableMapBase.__default.KeyInSlotIsInContents LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |contents#0@@10| |slot#1@@4|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@4|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 |elements#0@@58| |slot#1@@4|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@58|) |slot#1@@4|)) ))) (LinearMutableMapBase.__default.CantEquivocateStorageKey LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2825| :pattern ( (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearMutableMapBase._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@58|) (Lit |contents#0@@10|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryInSlotMatchesContents$V T@U) (|elements#0@@59| T@U) (|slot#0@@47| T@U) (|contents#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.EntryInSlotMatchesContents$V) TyType) (= (type |elements#0@@59|) (SeqType BoxType))) (= (type |slot#0@@47|) DatatypeTypeType)) (= (type |contents#0@@11|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| LinearMutableMapBase._default.EntryInSlotMatchesContents$V |elements#0@@59| |slot#0@@47| |contents#0@@11|) (and (and (and ($Is |elements#0@@59| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryInSlotMatchesContents$V))) ($Is |slot#0@@47| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@11| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntryInSlotMatchesContents$V)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@59|) |slot#0@@47|) (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntryInSlotMatchesContents$V |elements#0@@59| |slot#0@@47|))))) true) :qid |unknown.0:0| :skolemid |2826| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntryInSlotMatchesContents$V |elements#0@@59| |slot#0@@47| |contents#0@@11|)) ))))
(assert (forall ((LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0 T@U) (|elements#0@@60| T@U) (|slot#0@@48| T@U) (|contents#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@60|) (SeqType BoxType))) (= (type |slot#0@@48|) DatatypeTypeType)) (= (type |contents#0@@12|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@60| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0))) ($Is |slot#0@@48| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@12| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0))))) (= (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#requires| LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0 |elements#0@@60| |slot#0@@48| |contents#0@@12|)  (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@60|) |slot#0@@48|) (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0 |elements#0@@60| |slot#0@@48|)))) :qid |unknown.0:0| :skolemid |2827| :pattern ( (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#requires| LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@0 |elements#0@@60| |slot#0@@48| |contents#0@@12|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1 T@U) (|elements#0@@61| T@U) (|slot#0@@49| T@U) (|contents#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@61|) (SeqType BoxType))) (= (type |slot#0@@49|) DatatypeTypeType)) (= (type |contents#0@@13|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1 |elements#0@@61| |slot#0@@49| |contents#0@@13|) (and (and (and ($Is |elements#0@@61| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1))) ($Is |slot#0@@49| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@13| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@49|) (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1 |elements#0@@61| |slot#0@@49|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@49|) (let ((|item#0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@61| (LinearMutableMapBase.Slot.slot |slot#0@@49|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@13|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@13|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0|)))))))))) (= (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1 |elements#0@@61| |slot#0@@49| |contents#0@@13|)  (and true (let ((|item#0@@0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@61| (LinearMutableMapBase.Slot.slot |slot#0@@49|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@13|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@13|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0@@0|))))) (|#Options.Option.Some| (LinearMutableMapBase.Item.value |item#0@@0|))))))))) :qid |unknown.0:0| :skolemid |2828| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@1 |elements#0@@61| |slot#0@@49| |contents#0@@13|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2 T@U) (|elements#0@@62| T@U) (|slot#0@@50| T@U) (|contents#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@62|) (SeqType BoxType))) (= (type |slot#0@@50|) DatatypeTypeType)) (= (type |contents#0@@14|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@62|) (Lit |slot#0@@50|) (Lit |contents#0@@14|)) (and (and (and ($Is |elements#0@@62| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2))) ($Is |slot#0@@50| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@14| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) (Lit |slot#0@@50|)) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@62|) (Lit |slot#0@@50|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@50|)) (let ((|item#1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@62|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@50|))))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@14|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@14|)) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1|)))))))))) (= (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@62|) (Lit |slot#0@@50|) (Lit |contents#0@@14|))  (and true (let ((|item#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@62|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@50|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@14|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@14|)) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1@@0|))))) (|#Options.Option.Some| (LinearMutableMapBase.Item.value |item#1@@0|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2829| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@62|) (Lit |slot#0@@50|) (Lit |contents#0@@14|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V T@U) (|elements#0@@63| T@U) (|slot#0@@51| T@U) (|contents#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V) TyType) (= (type |elements#0@@63|) (SeqType BoxType))) (= (type |slot#0@@51|) DatatypeTypeType)) (= (type |contents#0@@15|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V |elements#0@@63| |slot#0@@51| |contents#0@@15|) (and (and (and ($Is |elements#0@@63| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V))) ($Is |slot#0@@51| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@15| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@63|) |slot#0@@51|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V |elements#0@@63| |slot#0@@51|))))) true) :qid |unknown.0:0| :skolemid |2830| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V |elements#0@@63| |slot#0@@51| |contents#0@@15|)) ))))
(assert (forall ((LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0 T@U) (|elements#0@@64| T@U) (|slot#0@@52| T@U) (|contents#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@64|) (SeqType BoxType))) (= (type |slot#0@@52|) DatatypeTypeType)) (= (type |contents#0@@16|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@64| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0))) ($Is |slot#0@@52| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@16| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0))))) (= (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#requires| LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@64| |slot#0@@52| |contents#0@@16|)  (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@64|) |slot#0@@52|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@64| |slot#0@@52|)))) :qid |unknown.0:0| :skolemid |2831| :pattern ( (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#requires| LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@64| |slot#0@@52| |contents#0@@16|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1 T@U) (|elements#0@@65| T@U) (|slot#0@@53| T@U) (|contents#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@65|) (SeqType BoxType))) (= (type |slot#0@@53|) DatatypeTypeType)) (= (type |contents#0@@17|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@65| |slot#0@@53| |contents#0@@17|) (and (and (and ($Is |elements#0@@65| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1))) ($Is |slot#0@@53| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@17| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@53|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@65| |slot#0@@53|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (LinearMutableMapBase.Slot.Slot_q |slot#0@@53|)) (= (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@65| |slot#0@@53| |contents#0@@17|)  (and true (let ((|item#0@@1| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@65| (LinearMutableMapBase.Slot.slot |slot#0@@53|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@17|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@17|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0@@1|)))))))))))) :qid |unknown.0:0| :skolemid |2832| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@65| |slot#0@@53| |contents#0@@17|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2 T@U) (|elements#0@@66| T@U) (|slot#0@@54| T@U) (|contents#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@66|) (SeqType BoxType))) (= (type |slot#0@@54|) DatatypeTypeType)) (= (type |contents#0@@18|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@66|) (Lit |slot#0@@54|) (Lit |contents#0@@18|)) (and (and (and ($Is |elements#0@@66| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2))) ($Is |slot#0@@54| Tclass.LinearMutableMapBase.Slot)) ($Is |contents#0@@18| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2)))) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) (Lit |slot#0@@54|)) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@66|) (Lit |slot#0@@54|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (LinearMutableMapBase.Slot.Slot_q (Lit |slot#0@@54|))) (= (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@66|) (Lit |slot#0@@54|) (Lit |contents#0@@18|))  (and true (let ((|item#1@@1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@66|) (LitInt (LinearMutableMapBase.Slot.slot (Lit |slot#0@@54|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@18|) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@18|)) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1@@1|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2833| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@66|) (Lit |slot#0@@54|) (Lit |contents#0@@18|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntriesMatchContentValue$V T@U) (|elements#0@@67| T@U) (|contents#0@@19| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.EntriesMatchContentValue$V) TyType) (= (type |elements#0@@67|) (SeqType BoxType))) (= (type |contents#0@@19|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V |elements#0@@67| |contents#0@@19|) (and (and ($Is |elements#0@@67| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntriesMatchContentValue$V))) ($Is |contents#0@@19| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntriesMatchContentValue$V)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntriesMatchContentValue$V |elements#0@@67|)))) true) :qid |unknown.0:0| :skolemid |2834| :pattern ( (LinearMutableMapBase.__default.EntriesMatchContentValue LinearMutableMapBase._default.EntriesMatchContentValue$V |elements#0@@67| |contents#0@@19|)) ))))
(assert (forall ((LinearMutableMapBase._default.EntriesMatchContentValue$V@@0 T@U) (|elements#0@@68| T@U) (|contents#0@@20| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.EntriesMatchContentValue$V@@0) TyType) (= (type |elements#0@@68|) (SeqType BoxType))) (= (type |contents#0@@20|) (MapType BoxType BoxType))) (and ($Is |elements#0@@68| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntriesMatchContentValue$V@@0))) ($Is |contents#0@@20| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntriesMatchContentValue$V@@0))))) (= (|LinearMutableMapBase.__default.EntriesMatchContentValue#requires| LinearMutableMapBase._default.EntriesMatchContentValue$V@@0 |elements#0@@68| |contents#0@@20|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntriesMatchContentValue$V@@0 |elements#0@@68|))) :qid |unknown.0:0| :skolemid |2835| :pattern ( (|LinearMutableMapBase.__default.EntriesMatchContentValue#requires| LinearMutableMapBase._default.EntriesMatchContentValue$V@@0 |elements#0@@68| |contents#0@@20|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 T@U) (|elements#0@@69| T@U) (|contents#0@@21| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.EntriesMatchContentValue$V@@1) TyType) (= (type |elements#0@@69|) (SeqType BoxType))) (= (type |contents#0@@21|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |contents#0@@21|) (and (and ($Is |elements#0@@69| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntriesMatchContentValue$V@@1))) ($Is |contents#0@@21| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntriesMatchContentValue$V@@1)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69|)))) (and (forall ((|slot#0@@55| T@U) ) (!  (=> (and (= (type |slot#0@@55|) DatatypeTypeType) ($Is |slot#0@@55| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@69|) |slot#0@@55|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@69|) |slot#0@@55|) (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@55|) (=> (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@55|) (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@55| |contents#0@@21|)))))) :qid |LinearMutableMapBaseidfy.253:12| :skolemid |2837| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@55| |contents#0@@21|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@55|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@69|) |slot#0@@55|)) )) (= (LinearMutableMapBase.__default.EntriesMatchContentValue LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |contents#0@@21|) (forall ((|slot#0@@56| T@U) ) (!  (=> (and (and (= (type |slot#0@@56|) DatatypeTypeType) ($Is |slot#0@@56| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@69|) |slot#0@@56|) (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@56|))) (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@56| |contents#0@@21|)) :qid |LinearMutableMapBaseidfy.253:12| :skolemid |2836| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@56| |contents#0@@21|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |slot#0@@56|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@69|) |slot#0@@56|)) ))))) :qid |unknown.0:0| :skolemid |2838| :pattern ( (LinearMutableMapBase.__default.EntriesMatchContentValue LinearMutableMapBase._default.EntriesMatchContentValue$V@@1 |elements#0@@69| |contents#0@@21|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 T@U) (|elements#0@@70| T@U) (|contents#0@@22| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.EntriesMatchContentValue$V@@2) TyType) (= (type |elements#0@@70|) (SeqType BoxType))) (= (type |contents#0@@22|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.EntriesMatchContentValue#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) (Lit |contents#0@@22|)) (and (and ($Is |elements#0@@70| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntriesMatchContentValue$V@@2))) ($Is |contents#0@@22| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.EntriesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|)))))))) (and (forall ((|slot#1@@5| T@U) ) (!  (=> (and (= (type |slot#1@@5|) DatatypeTypeType) ($Is |slot#1@@5| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@70|)) |slot#1@@5|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@70|)) |slot#1@@5|) (and (|LinearMutableMapBase.__default.SlotIsEntry#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) |slot#1@@5|) (=> (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) |slot#1@@5|) (|LinearMutableMapBase.__default.EntryInSlotMatchesContents#canCall| LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) |slot#1@@5| (Lit |contents#0@@22|))))))) :qid |LinearMutableMapBaseidfy.253:12| :skolemid |2840| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 |elements#0@@70| |slot#1@@5| |contents#0@@22|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 |elements#0@@70| |slot#1@@5|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@70|) |slot#1@@5|)) )) (= (LinearMutableMapBase.__default.EntriesMatchContentValue LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) (Lit |contents#0@@22|)) (forall ((|slot#1@@6| T@U) ) (!  (=> (and (and (= (type |slot#1@@6|) DatatypeTypeType) ($Is |slot#1@@6| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@70|)) |slot#1@@6|) (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) |slot#1@@6|))) (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) |slot#1@@6| (Lit |contents#0@@22|))) :qid |LinearMutableMapBaseidfy.253:12| :skolemid |2839| :pattern ( (LinearMutableMapBase.__default.EntryInSlotMatchesContents LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 |elements#0@@70| |slot#1@@6| |contents#0@@22|)) :pattern ( (LinearMutableMapBase.__default.SlotIsEntry LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 |elements#0@@70| |slot#1@@6|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@70|) |slot#1@@6|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2841| :pattern ( (LinearMutableMapBase.__default.EntriesMatchContentValue LinearMutableMapBase._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@70|) (Lit |contents#0@@22|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstonesMatchContentValue$V T@U) (|elements#0@@71| T@U) (|contents#0@@23| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.TombstonesMatchContentValue$V) TyType) (= (type |elements#0@@71|) (SeqType BoxType))) (= (type |contents#0@@23|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V |elements#0@@71| |contents#0@@23|) (and (and ($Is |elements#0@@71| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstonesMatchContentValue$V))) ($Is |contents#0@@23| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstonesMatchContentValue$V)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TombstonesMatchContentValue$V |elements#0@@71|)))) true) :qid |unknown.0:0| :skolemid |2842| :pattern ( (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearMutableMapBase._default.TombstonesMatchContentValue$V |elements#0@@71| |contents#0@@23|)) ))))
(assert (forall ((LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0 T@U) (|elements#0@@72| T@U) (|contents#0@@24| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0) TyType) (= (type |elements#0@@72|) (SeqType BoxType))) (= (type |contents#0@@24|) (MapType BoxType BoxType))) (and ($Is |elements#0@@72| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0))) ($Is |contents#0@@24| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0))))) (= (|LinearMutableMapBase.__default.TombstonesMatchContentValue#requires| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0 |elements#0@@72| |contents#0@@24|) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0 |elements#0@@72|))) :qid |unknown.0:0| :skolemid |2843| :pattern ( (|LinearMutableMapBase.__default.TombstonesMatchContentValue#requires| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@0 |elements#0@@72| |contents#0@@24|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 T@U) (|elements#0@@73| T@U) (|contents#0@@25| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1) TyType) (= (type |elements#0@@73|) (SeqType BoxType))) (= (type |contents#0@@25|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |contents#0@@25|) (and (and ($Is |elements#0@@73| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1))) ($Is |contents#0@@25| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1)))) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73|)))) (and (forall ((|slot#0@@57| T@U) ) (!  (=> (and (= (type |slot#0@@57|) DatatypeTypeType) ($Is |slot#0@@57| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@73|) |slot#0@@57|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@73|) |slot#0@@57|) (and (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@57|) (=> (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@57|) (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@57| |contents#0@@25|)))))) :qid |LinearMutableMapBaseidfy.260:12| :skolemid |2845| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@57| |contents#0@@25|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@57|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@73|) |slot#0@@57|)) )) (= (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |contents#0@@25|) (forall ((|slot#0@@58| T@U) ) (!  (=> (and (and (= (type |slot#0@@58|) DatatypeTypeType) ($Is |slot#0@@58| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@73|) |slot#0@@58|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@58|))) (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@58| |contents#0@@25|)) :qid |LinearMutableMapBaseidfy.260:12| :skolemid |2844| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@58| |contents#0@@25|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |slot#0@@58|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@73|) |slot#0@@58|)) ))))) :qid |unknown.0:0| :skolemid |2846| :pattern ( (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearMutableMapBase._default.TombstonesMatchContentValue$V@@1 |elements#0@@73| |contents#0@@25|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 T@U) (|elements#0@@74| T@U) (|contents#0@@26| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2) TyType) (= (type |elements#0@@74|) (SeqType BoxType))) (= (type |contents#0@@26|) (MapType BoxType BoxType))) (or (|LinearMutableMapBase.__default.TombstonesMatchContentValue#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) (Lit |contents#0@@26|)) (and (and ($Is |elements#0@@74| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2))) ($Is |contents#0@@26| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|)))))))) (and (forall ((|slot#1@@7| T@U) ) (!  (=> (and (= (type |slot#1@@7|) DatatypeTypeType) ($Is |slot#1@@7| Tclass.LinearMutableMapBase.Slot)) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@74|)) |slot#1@@7|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@74|)) |slot#1@@7|) (and (|LinearMutableMapBase.__default.SlotIsTombstone#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) |slot#1@@7|) (=> (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) |slot#1@@7|) (|LinearMutableMapBase.__default.TombstoneInSlotMatchesContents#canCall| LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) |slot#1@@7| (Lit |contents#0@@26|))))))) :qid |LinearMutableMapBaseidfy.260:12| :skolemid |2848| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 |elements#0@@74| |slot#1@@7| |contents#0@@26|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 |elements#0@@74| |slot#1@@7|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@74|) |slot#1@@7|)) )) (= (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) (Lit |contents#0@@26|)) (forall ((|slot#1@@8| T@U) ) (!  (=> (and (and (= (type |slot#1@@8|) DatatypeTypeType) ($Is |slot#1@@8| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@74|)) |slot#1@@8|) (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) |slot#1@@8|))) (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) |slot#1@@8| (Lit |contents#0@@26|))) :qid |LinearMutableMapBaseidfy.260:12| :skolemid |2847| :pattern ( (LinearMutableMapBase.__default.TombstoneInSlotMatchesContents LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 |elements#0@@74| |slot#1@@8| |contents#0@@26|)) :pattern ( (LinearMutableMapBase.__default.SlotIsTombstone LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 |elements#0@@74| |slot#1@@8|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@74|) |slot#1@@8|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2849| :pattern ( (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearMutableMapBase._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@74|) (Lit |contents#0@@26|))) ))))
(assert (forall ((arg0@@512 T@U) (arg1@@254 T@U) (arg2@@151 Int) ) (! (= (type (LinearMutableMapBase.__default.IndexSetThrough arg0@@512 arg1@@254 arg2@@151)) (MapType0Type BoxType boolType)) :qid |funType:LinearMutableMapBase.__default.IndexSetThrough| :pattern ( (LinearMutableMapBase.__default.IndexSetThrough arg0@@512 arg1@@254 arg2@@151)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSetThrough$V T@U) (|elements#0@@75| T@U) (|through#0| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSetThrough$V) TyType) (= (type |elements#0@@75|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSetThrough#canCall| LinearMutableMapBase._default.IndexSetThrough$V |elements#0@@75| |through#0|) (and (and ($Is |elements#0@@75| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSetThrough$V))) (<= (LitInt 0) |through#0|)) (<= |through#0| (|Seq#Length| |elements#0@@75|))))) ($Is (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V |elements#0@@75| |through#0|) (TSet TInt))) :qid |unknown.0:0| :skolemid |2850| :pattern ( (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V |elements#0@@75| |through#0|)) ))))
(assert (forall ((LinearMutableMapBase._default.IndexSetThrough$V@@0 T@U) (|elements#0@@76| T@U) (|through#0@@0| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSetThrough$V@@0) TyType) (= (type |elements#0@@76|) (SeqType BoxType))) (and ($Is |elements#0@@76| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSetThrough$V@@0))) (<= (LitInt 0) |through#0@@0|))) (= (|LinearMutableMapBase.__default.IndexSetThrough#requires| LinearMutableMapBase._default.IndexSetThrough$V@@0 |elements#0@@76| |through#0@@0|) (<= |through#0@@0| (|Seq#Length| |elements#0@@76|)))) :qid |unknown.0:0| :skolemid |2851| :pattern ( (|LinearMutableMapBase.__default.IndexSetThrough#requires| LinearMutableMapBase._default.IndexSetThrough$V@@0 |elements#0@@76| |through#0@@0|)) )))
(assert (forall ((arg0@@513 T@U) (arg1@@255 Int) (arg2@@152 Int) (arg3@@92 T@U) (arg4@@59 T@U) ) (! (= (type (|lambda#172| arg0@@513 arg1@@255 arg2@@152 arg3@@92 arg4@@59)) (MapType0Type BoxType boolType)) :qid |funType:lambda#172| :pattern ( (|lambda#172| arg0@@513 arg1@@255 arg2@@152 arg3@@92 arg4@@59)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSetThrough$V@@1 T@U) (|elements#0@@77| T@U) (|through#0@@1| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSetThrough$V@@1) TyType) (= (type |elements#0@@77|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSetThrough#canCall| LinearMutableMapBase._default.IndexSetThrough$V@@1 |elements#0@@77| |through#0@@1|) (and (and ($Is |elements#0@@77| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSetThrough$V@@1))) (<= (LitInt 0) |through#0@@1|)) (<= |through#0@@1| (|Seq#Length| |elements#0@@77|))))) (= (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V@@1 |elements#0@@77| |through#0@@1|) (|lambda#172| TInt (LitInt 0) |through#0@@1| |elements#0@@77| |elements#0@@77|))) :qid |unknown.0:0| :skolemid |2852| :pattern ( (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V@@1 |elements#0@@77| |through#0@@1|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSetThrough$V@@2 T@U) (|elements#0@@78| T@U) (|through#0@@2| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSetThrough$V@@2) TyType) (= (type |elements#0@@78|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSetThrough#canCall| LinearMutableMapBase._default.IndexSetThrough$V@@2 (Lit |elements#0@@78|) (LitInt |through#0@@2|)) (and (and ($Is |elements#0@@78| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSetThrough$V@@2))) (<= (LitInt 0) |through#0@@2|)) (<= (LitInt |through#0@@2|) (|Seq#Length| (Lit |elements#0@@78|)))))) (= (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V@@2 (Lit |elements#0@@78|) (LitInt |through#0@@2|)) (|lambda#172| TInt (LitInt 0) |through#0@@2| (Lit |elements#0@@78|) (Lit |elements#0@@78|)))) :qid |unknown.0:0| :weight 3 :skolemid |2853| :pattern ( (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSetThrough$V@@2 (Lit |elements#0@@78|) (LitInt |through#0@@2|))) ))))
(assert (forall ((arg0@@514 T@U) (arg1@@256 T@U) ) (! (= (type (LinearMutableMapBase.__default.IndexSet arg0@@514 arg1@@256)) (MapType0Type BoxType boolType)) :qid |funType:LinearMutableMapBase.__default.IndexSet| :pattern ( (LinearMutableMapBase.__default.IndexSet arg0@@514 arg1@@256)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSet$V T@U) (|elements#0@@79| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSet$V) TyType) (= (type |elements#0@@79|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSet#canCall| LinearMutableMapBase._default.IndexSet$V |elements#0@@79|) ($Is |elements#0@@79| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSet$V))))) ($Is (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V |elements#0@@79|) (TSet TInt))) :qid |unknown.0:0| :skolemid |2854| :pattern ( (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V |elements#0@@79|)) ))))
(assert (forall ((LinearMutableMapBase._default.IndexSet$V@@0 T@U) (|elements#0@@80| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSet$V@@0) TyType) (= (type |elements#0@@80|) (SeqType BoxType))) ($Is |elements#0@@80| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSet$V@@0)))) (= (|LinearMutableMapBase.__default.IndexSet#requires| LinearMutableMapBase._default.IndexSet$V@@0 |elements#0@@80|) true)) :qid |unknown.0:0| :skolemid |2855| :pattern ( (|LinearMutableMapBase.__default.IndexSet#requires| LinearMutableMapBase._default.IndexSet$V@@0 |elements#0@@80|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSet$V@@1 T@U) (|elements#0@@81| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSet$V@@1) TyType) (= (type |elements#0@@81|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSet#canCall| LinearMutableMapBase._default.IndexSet$V@@1 |elements#0@@81|) ($Is |elements#0@@81| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSet$V@@1))))) (and (|LinearMutableMapBase.__default.IndexSetThrough#canCall| LinearMutableMapBase._default.IndexSet$V@@1 |elements#0@@81| (|Seq#Length| |elements#0@@81|)) (= (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V@@1 |elements#0@@81|) (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSet$V@@1 |elements#0@@81| (|Seq#Length| |elements#0@@81|))))) :qid |unknown.0:0| :skolemid |2856| :pattern ( (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V@@1 |elements#0@@81|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.IndexSet$V@@2 T@U) (|elements#0@@82| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.IndexSet$V@@2) TyType) (= (type |elements#0@@82|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.IndexSet#canCall| LinearMutableMapBase._default.IndexSet$V@@2 (Lit |elements#0@@82|)) ($Is |elements#0@@82| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.IndexSet$V@@2))))) (and (|LinearMutableMapBase.__default.IndexSetThrough#canCall| LinearMutableMapBase._default.IndexSet$V@@2 (Lit |elements#0@@82|) (|Seq#Length| (Lit |elements#0@@82|))) (= (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V@@2 (Lit |elements#0@@82|)) (LinearMutableMapBase.__default.IndexSetThrough LinearMutableMapBase._default.IndexSet$V@@2 (Lit |elements#0@@82|) (|Seq#Length| (Lit |elements#0@@82|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2857| :pattern ( (LinearMutableMapBase.__default.IndexSet LinearMutableMapBase._default.IndexSet$V@@2 (Lit |elements#0@@82|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.Count1$V T@U) (|item#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.Count1$V) TyType) (= (type |item#0@@2|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.Count1#canCall| LinearMutableMapBase._default.Count1$V |item#0@@2|) ($Is |item#0@@2| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.Count1$V)))) (<= (LitInt 0) (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V |item#0@@2|))) :qid |unknown.0:0| :skolemid |2858| :pattern ( (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V |item#0@@2|)) ))))
(assert (forall ((LinearMutableMapBase._default.Count1$V@@0 T@U) (|item#0@@3| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.Count1$V@@0) TyType) (= (type |item#0@@3|) DatatypeTypeType)) ($Is |item#0@@3| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.Count1$V@@0))) (= (|LinearMutableMapBase.__default.Count1#requires| LinearMutableMapBase._default.Count1$V@@0 |item#0@@3|) true)) :qid |unknown.0:0| :skolemid |2859| :pattern ( (|LinearMutableMapBase.__default.Count1#requires| LinearMutableMapBase._default.Count1$V@@0 |item#0@@3|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.Count1$V@@1 T@U) (|item#0@@4| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.Count1$V@@1) TyType) (= (type |item#0@@4|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.Count1#canCall| LinearMutableMapBase._default.Count1$V@@1 |item#0@@4|) ($Is |item#0@@4| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.Count1$V@@1)))) (= (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V@@1 |item#0@@4|) (ite  (or (LinearMutableMapBase.Item.Entry_q |item#0@@4|) (LinearMutableMapBase.Item.Tombstone_q |item#0@@4|)) 1 0))) :qid |unknown.0:0| :skolemid |2860| :pattern ( (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V@@1 |item#0@@4|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.Count1$V@@2 T@U) (|item#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.Count1$V@@2) TyType) (= (type |item#0@@5|) DatatypeTypeType)) (or (|LinearMutableMapBase.__default.Count1#canCall| LinearMutableMapBase._default.Count1$V@@2 (Lit |item#0@@5|)) ($Is |item#0@@5| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.Count1$V@@2)))) (= (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V@@2 (Lit |item#0@@5|)) (ite  (or (LinearMutableMapBase.Item.Entry_q (Lit |item#0@@5|)) (LinearMutableMapBase.Item.Tombstone_q (Lit |item#0@@5|))) 1 0))) :qid |unknown.0:0| :weight 3 :skolemid |2861| :pattern ( (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.Count1$V@@2 (Lit |item#0@@5|))) ))))
(assert (forall ((LinearMutableMapBase._default.CountFilled$V T@U) ($ly@@330 T@U) (|view#0| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CountFilled$V) TyType) (= (type $ly@@330) LayerTypeType)) (= (type |view#0|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V ($LS $ly@@330) |view#0|) (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V $ly@@330 |view#0|))) :qid |unknown.0:0| :skolemid |2862| :pattern ( (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V ($LS $ly@@330) |view#0|)) )))
(assert (forall ((LinearMutableMapBase._default.CountFilled$V@@0 T@U) ($ly@@331 T@U) (|view#0@@0| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CountFilled$V@@0) TyType) (= (type $ly@@331) LayerTypeType)) (= (type |view#0@@0|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@0 $ly@@331 |view#0@@0|) (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@0 $LZ |view#0@@0|))) :qid |unknown.0:0| :skolemid |2863| :pattern ( (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@0 (AsFuelBottom $ly@@331) |view#0@@0|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.CountFilled$V@@1 T@U) ($ly@@332 T@U) (|view#0@@1| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.CountFilled$V@@1) TyType) (= (type $ly@@332) LayerTypeType)) (= (type |view#0@@1|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CountFilled#canCall| LinearMutableMapBase._default.CountFilled$V@@1 |view#0@@1|) ($Is |view#0@@1| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CountFilled$V@@1))))) (<= (LitInt 0) (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@1 $ly@@332 |view#0@@1|))) :qid |unknown.0:0| :skolemid |2864| :pattern ( (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@1 $ly@@332 |view#0@@1|)) ))))
(assert (forall ((LinearMutableMapBase._default.CountFilled$V@@2 T@U) ($ly@@333 T@U) (|view#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.CountFilled$V@@2) TyType) (= (type $ly@@333) LayerTypeType)) (= (type |view#0@@2|) (SeqType BoxType))) ($Is |view#0@@2| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CountFilled$V@@2)))) (= (|LinearMutableMapBase.__default.CountFilled#requires| LinearMutableMapBase._default.CountFilled$V@@2 $ly@@333 |view#0@@2|) true)) :qid |unknown.0:0| :skolemid |2865| :pattern ( (|LinearMutableMapBase.__default.CountFilled#requires| LinearMutableMapBase._default.CountFilled$V@@2 $ly@@333 |view#0@@2|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.CountFilled$V@@3 T@U) ($ly@@334 T@U) (|view#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.CountFilled$V@@3) TyType) (= (type $ly@@334) LayerTypeType)) (= (type |view#0@@3|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CountFilled#canCall| LinearMutableMapBase._default.CountFilled$V@@3 |view#0@@3|) ($Is |view#0@@3| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CountFilled$V@@3))))) (and (=> (not (= (|Seq#Length| |view#0@@3|) (LitInt 0))) (and (|LinearMutableMapBase.__default.CountFilled#canCall| LinearMutableMapBase._default.CountFilled$V@@3 (|Seq#Drop| |view#0@@3| (LitInt 1))) (|LinearMutableMapBase.__default.Count1#canCall| LinearMutableMapBase._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0)))))) (= (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@3 ($LS $ly@@334) |view#0@@3|) (ite (= (|Seq#Length| |view#0@@3|) (LitInt 0)) 0 (+ (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@3 $ly@@334 (|Seq#Drop| |view#0@@3| (LitInt 1))) (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0))))))))) :qid |unknown.0:0| :skolemid |2866| :pattern ( (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@3 ($LS $ly@@334) |view#0@@3|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.CountFilled$V@@4 T@U) ($ly@@335 T@U) (|view#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.CountFilled$V@@4) TyType) (= (type $ly@@335) LayerTypeType)) (= (type |view#0@@4|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CountFilled#canCall| LinearMutableMapBase._default.CountFilled$V@@4 (Lit |view#0@@4|)) ($Is |view#0@@4| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CountFilled$V@@4))))) (and (=> (not (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0))) (and (|LinearMutableMapBase.__default.CountFilled#canCall| LinearMutableMapBase._default.CountFilled$V@@4 (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (|LinearMutableMapBase.__default.Count1#canCall| LinearMutableMapBase._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0)))))) (= (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@4 ($LS $ly@@335) (Lit |view#0@@4|)) (ite (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0)) 0 (+ (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@4 ($LS $ly@@335) (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (LinearMutableMapBase.__default.Count1 LinearMutableMapBase._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2867| :pattern ( (LinearMutableMapBase.__default.CountFilled LinearMutableMapBase._default.CountFilled$V@@4 ($LS $ly@@335) (Lit |view#0@@4|))) ))))
(assert (forall ((arg0@@515 T@U) (arg1@@257 T@U) (arg2@@153 Int) ) (! (= (type (LinearMutableMapBase.__default.View arg0@@515 arg1@@257 arg2@@153)) (SeqType BoxType)) :qid |funType:LinearMutableMapBase.__default.View| :pattern ( (LinearMutableMapBase.__default.View arg0@@515 arg1@@257 arg2@@153)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.View$V T@U) (|elements#0@@83| T@U) (|start#0@@3| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.View$V) TyType) (= (type |elements#0@@83|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.View#canCall| LinearMutableMapBase._default.View$V |elements#0@@83| |start#0@@3|) (and (and ($Is |elements#0@@83| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.View$V))) (<= (LitInt 0) |start#0@@3|)) (< |start#0@@3| (|Seq#Length| |elements#0@@83|))))) (and (= (|Seq#Length| (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V |elements#0@@83| |start#0@@3|)) (|Seq#Length| |elements#0@@83|)) ($Is (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V |elements#0@@83| |start#0@@3|) (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.View$V))))) :qid |unknown.0:0| :skolemid |2876| :pattern ( (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V |elements#0@@83| |start#0@@3|)) ))))
(assert (forall ((LinearMutableMapBase._default.View$V@@0 T@U) (|elements#0@@84| T@U) (|start#0@@4| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.View$V@@0) TyType) (= (type |elements#0@@84|) (SeqType BoxType))) (and ($Is |elements#0@@84| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.View$V@@0))) (<= (LitInt 0) |start#0@@4|))) (= (|LinearMutableMapBase.__default.View#requires| LinearMutableMapBase._default.View$V@@0 |elements#0@@84| |start#0@@4|) (< |start#0@@4| (|Seq#Length| |elements#0@@84|)))) :qid |unknown.0:0| :skolemid |2877| :pattern ( (|LinearMutableMapBase.__default.View#requires| LinearMutableMapBase._default.View$V@@0 |elements#0@@84| |start#0@@4|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.View$V@@1 T@U) (|elements#0@@85| T@U) (|start#0@@5| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.View$V@@1) TyType) (= (type |elements#0@@85|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.View#canCall| LinearMutableMapBase._default.View$V@@1 |elements#0@@85| |start#0@@5|) (and (and ($Is |elements#0@@85| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.View$V@@1))) (<= (LitInt 0) |start#0@@5|)) (< |start#0@@5| (|Seq#Length| |elements#0@@85|))))) (= (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V@@1 |elements#0@@85| |start#0@@5|) (|Seq#Append| (|Seq#Drop| |elements#0@@85| |start#0@@5|) (|Seq#Take| |elements#0@@85| |start#0@@5|)))) :qid |unknown.0:0| :skolemid |2878| :pattern ( (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V@@1 |elements#0@@85| |start#0@@5|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.View$V@@2 T@U) (|elements#0@@86| T@U) (|start#0@@6| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.View$V@@2) TyType) (= (type |elements#0@@86|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.View#canCall| LinearMutableMapBase._default.View$V@@2 (Lit |elements#0@@86|) (LitInt |start#0@@6|)) (and (and ($Is |elements#0@@86| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.View$V@@2))) (<= (LitInt 0) |start#0@@6|)) (< |start#0@@6| (|Seq#Length| (Lit |elements#0@@86|)))))) (= (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V@@2 (Lit |elements#0@@86|) (LitInt |start#0@@6|)) (|Seq#Append| (|Seq#Drop| (Lit |elements#0@@86|) (LitInt |start#0@@6|)) (|Seq#Take| (Lit |elements#0@@86|) (LitInt |start#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |2879| :pattern ( (LinearMutableMapBase.__default.View LinearMutableMapBase._default.View$V@@2 (Lit |elements#0@@86|) (LitInt |start#0@@6|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@21| Int) (|slot#0@@59| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@21| |slot#0@@59|) (and (and (<= (LitInt 0) |elementsLength#0@@21|) (and (<= (LitInt 0) |slot#0@@59|) (< |slot#0@@59| 18446744073709551616))) (and (< |elementsLength#0@@21| 18446744073709551616) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@21| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@59|))))) (and (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@21| (|#LinearMutableMapBase.Slot.Slot| (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@59|))) (|LinearMutableMapBase.Slot#Equal| (|#LinearMutableMapBase.Slot.Slot| (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@59|)) (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@21| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@59|)))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@59|)) (< (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@59|) 18446744073709551616)))) :qid |LinearMutableMapBaseidfy.353:32| :skolemid |2880| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@59|)) ))))
(assert (forall ((|elementsLength#0@@22| Int) (|slot#0@@60| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@22|) (and (<= (LitInt 0) |slot#0@@60|) (< |slot#0@@60| 18446744073709551616))) (= (|LinearMutableMapBase.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@60|)  (and (< |elementsLength#0@@22| 18446744073709551616) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@22| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@60|))))) :qid |LinearMutableMapBaseidfy.353:32| :skolemid |2881| :pattern ( (|LinearMutableMapBase.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@60|)) )))
(assert  (=> true (forall ((|elementsLength#0@@23| Int) (|slot#0@@61| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@23| |slot#0@@61|) (and (and (<= (LitInt 0) |elementsLength#0@@23|) (and (<= (LitInt 0) |slot#0@@61|) (< |slot#0@@61| 18446744073709551616))) (and (< |elementsLength#0@@23| 18446744073709551616) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@23| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@61|))))) (and (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| |elementsLength#0@@23| |slot#0@@61|) (= (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@61|) (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@23| |slot#0@@61|)))) :qid |LinearMutableMapBaseidfy.353:32| :skolemid |2882| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@61|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@24| Int) (|slot#0@@62| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessor#canCall| (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@62|)) (and (and (<= (LitInt 0) |elementsLength#0@@24|) (and (<= (LitInt 0) |slot#0@@62|) (< |slot#0@@62| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |elementsLength#0@@24| 18446744073709551616)))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@24|) (Lit (|#LinearMutableMapBase.Slot.Slot| (LitInt |slot#0@@62|)))))))))) (and (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@62|)) (= (LinearMutableMapBase.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@62|)) (LitInt (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@62|)))))) :qid |LinearMutableMapBaseidfy.353:32| :weight 3 :skolemid |2883| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@62|))) ))))
(assert  (=> true (forall ((|elementsLength#0@@25| Int) (|slot#0@@63| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| |elementsLength#0@@25| |slot#0@@63|) (and (and (and (<= (LitInt 0) |elementsLength#0@@25|) (< |elementsLength#0@@25| 18446744073709551616)) (and (<= (LitInt 0) |slot#0@@63|) (< |slot#0@@63| 18446744073709551616))) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@25| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@63|)))) (and (and (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@25| (|#LinearMutableMapBase.Slot.Slot| (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@25| |slot#0@@63|))) (|LinearMutableMapBase.Slot#Equal| (|#LinearMutableMapBase.Slot.Slot| (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@25| |slot#0@@63|)) (LinearMutableMapBase.__default.SlotSuccessor |elementsLength#0@@25| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@63|)))) (and (<= (LitInt 0) (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@25| |slot#0@@63|)) (< (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@25| |slot#0@@63|) 18446744073709551616)))) :qid |LinearMutableMapBaseidfy.363:45| :skolemid |2884| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@25| |slot#0@@63|)) ))))
(assert (forall ((|elementsLength#0@@26| Int) (|slot#0@@64| Int) ) (!  (=> (and (and (<= (LitInt 0) |elementsLength#0@@26|) (< |elementsLength#0@@26| 18446744073709551616)) (and (<= (LitInt 0) |slot#0@@64|) (< |slot#0@@64| 18446744073709551616))) (= (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#requires| |elementsLength#0@@26| |slot#0@@64|) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@26| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@64|)))) :qid |LinearMutableMapBaseidfy.363:45| :skolemid |2885| :pattern ( (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#requires| |elementsLength#0@@26| |slot#0@@64|)) )))
(assert  (=> true (forall ((|elementsLength#0@@27| Int) (|slot#0@@65| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| |elementsLength#0@@27| |slot#0@@65|) (and (and (and (<= (LitInt 0) |elementsLength#0@@27|) (< |elementsLength#0@@27| 18446744073709551616)) (and (<= (LitInt 0) |slot#0@@65|) (< |slot#0@@65| 18446744073709551616))) (LinearMutableMapBase.__default.ValidSlot |elementsLength#0@@27| (|#LinearMutableMapBase.Slot.Slot| |slot#0@@65|)))) (= (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@27| |slot#0@@65|) (ite (= |slot#0@@65| (- |elementsLength#0@@27| 1)) 0 (+ |slot#0@@65| 1)))) :qid |LinearMutableMapBaseidfy.363:45| :skolemid |2886| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 |elementsLength#0@@27| |slot#0@@65|)) ))))
(assert  (=> true (forall ((|elementsLength#0@@28| Int) (|slot#0@@66| Int) ) (!  (=> (or (|LinearMutableMapBase.__default.Uint64SlotSuccessorUint64#canCall| (LitInt |elementsLength#0@@28|) (LitInt |slot#0@@66|)) (and (and (and (<= (LitInt 0) |elementsLength#0@@28|) (< |elementsLength#0@@28| 18446744073709551616)) (and (<= (LitInt 0) |slot#0@@66|) (< |slot#0@@66| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidSlot (LitInt |elementsLength#0@@28|) (Lit (|#LinearMutableMapBase.Slot.Slot| (LitInt |slot#0@@66|))))))))) (= (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 (LitInt |elementsLength#0@@28|) (LitInt |slot#0@@66|)) (ite (= (LitInt |slot#0@@66|) (LitInt (- |elementsLength#0@@28| 1))) 0 (+ |slot#0@@66| 1)))) :qid |LinearMutableMapBaseidfy.363:45| :weight 3 :skolemid |2887| :pattern ( (LinearMutableMapBase.__default.Uint64SlotSuccessorUint64 (LitInt |elementsLength#0@@28|) (LitInt |slot#0@@66|))) ))))
(assert (forall ((LinearMutableMapBase._default.MapFromStorage$V T@U) ($ly@@336 T@U) (|elements#0@@87| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V) TyType) (= (type $ly@@336) LayerTypeType)) (= (type |elements#0@@87|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V ($LS $ly@@336) |elements#0@@87|) (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V $ly@@336 |elements#0@@87|))) :qid |unknown.0:0| :skolemid |2888| :pattern ( (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V ($LS $ly@@336) |elements#0@@87|)) )))
(assert (forall ((LinearMutableMapBase._default.MapFromStorage$V@@0 T@U) ($ly@@337 T@U) (|elements#0@@88| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V@@0) TyType) (= (type $ly@@337) LayerTypeType)) (= (type |elements#0@@88|) (SeqType BoxType))) (= (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@0 $ly@@337 |elements#0@@88|) (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@0 $LZ |elements#0@@88|))) :qid |unknown.0:0| :skolemid |2889| :pattern ( (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@0 (AsFuelBottom $ly@@337) |elements#0@@88|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.MapFromStorage$V@@1 T@U) ($ly@@338 T@U) (|elements#0@@89| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V@@1) TyType) (= (type $ly@@338) LayerTypeType)) (= (type |elements#0@@89|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearMutableMapBase._default.MapFromStorage$V@@1 |elements#0@@89|) ($Is |elements#0@@89| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@1))))) ($Is (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@1 $ly@@338 |elements#0@@89|) (TMap Tclass.NativeTypes.uint64 LinearMutableMapBase._default.MapFromStorage$V@@1))) :qid |unknown.0:0| :skolemid |2890| :pattern ( (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@1 $ly@@338 |elements#0@@89|)) ))))
(assert (forall ((LinearMutableMapBase._default.MapFromStorage$V@@2 T@U) ($ly@@339 T@U) (|elements#0@@90| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V@@2) TyType) (= (type $ly@@339) LayerTypeType)) (= (type |elements#0@@90|) (SeqType BoxType))) ($Is |elements#0@@90| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@2)))) (= (|LinearMutableMapBase.__default.MapFromStorage#requires| LinearMutableMapBase._default.MapFromStorage$V@@2 $ly@@339 |elements#0@@90|) true)) :qid |unknown.0:0| :skolemid |2891| :pattern ( (|LinearMutableMapBase.__default.MapFromStorage#requires| LinearMutableMapBase._default.MapFromStorage$V@@2 $ly@@339 |elements#0@@90|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.MapFromStorage$V@@3 T@U) ($ly@@340 T@U) (|elements#0@@91| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V@@3) TyType) (= (type $ly@@340) LayerTypeType)) (= (type |elements#0@@91|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearMutableMapBase._default.MapFromStorage$V@@3 |elements#0@@91|) ($Is |elements#0@@91| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3))))) (and (=> (not (= (|Seq#Length| |elements#0@@91|) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3) |elements#0@@91|) (and (|Sequences.__default.DropLast#canCall| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3) |elements#0@@91|) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearMutableMapBase._default.MapFromStorage$V@@3 (Sequences.__default.DropLast (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3) |elements#0@@91|))))) (= (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@3 ($LS $ly@@340) |elements#0@@91|) (ite (= (|Seq#Length| |elements#0@@91|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#0@@6| ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3) |elements#0@@91|)))) (let ((|dropLastMap#0| (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@3 $ly@@340 (Sequences.__default.DropLast (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@3) |elements#0@@91|)))) (ite (LinearMutableMapBase.Item.Entry_q |item#0@@6|) (|Map#Build| |dropLastMap#0| ($Box (int_2_U (LinearMutableMapBase.Item.key |item#0@@6|))) (LinearMutableMapBase.Item.value |item#0@@6|)) |dropLastMap#0|))))))) :qid |unknown.0:0| :skolemid |2892| :pattern ( (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@3 ($LS $ly@@340) |elements#0@@91|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.MapFromStorage$V@@4 T@U) ($ly@@341 T@U) (|elements#0@@92| T@U) ) (!  (=> (and (and (and (= (type LinearMutableMapBase._default.MapFromStorage$V@@4) TyType) (= (type $ly@@341) LayerTypeType)) (= (type |elements#0@@92|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearMutableMapBase._default.MapFromStorage$V@@4 (Lit |elements#0@@92|)) ($Is |elements#0@@92| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4))))) (and (=> (not (= (|Seq#Length| (Lit |elements#0@@92|)) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4) (Lit |elements#0@@92|)) (and (|Sequences.__default.DropLast#canCall| (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4) (Lit |elements#0@@92|)) (|LinearMutableMapBase.__default.MapFromStorage#canCall| LinearMutableMapBase._default.MapFromStorage$V@@4 (Lit (Sequences.__default.DropLast (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4) (Lit |elements#0@@92|))))))) (= (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@4 ($LS $ly@@341) (Lit |elements#0@@92|)) (ite (= (|Seq#Length| (Lit |elements#0@@92|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#1@@2| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4) (Lit |elements#0@@92|)))))) (let ((|dropLastMap#1| (Lit (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@4 ($LS $ly@@341) (Lit (Sequences.__default.DropLast (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.MapFromStorage$V@@4) (Lit |elements#0@@92|))))))) (ite (LinearMutableMapBase.Item.Entry_q |item#1@@2|) (|Map#Build| |dropLastMap#1| ($Box (int_2_U (LitInt (LinearMutableMapBase.Item.key |item#1@@2|)))) (Lit (LinearMutableMapBase.Item.value |item#1@@2|))) |dropLastMap#1|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2893| :pattern ( (LinearMutableMapBase.__default.MapFromStorage LinearMutableMapBase._default.MapFromStorage$V@@4 ($LS $ly@@341) (Lit |elements#0@@92|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocate$V T@U) (|elements#0@@93| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocate$V) TyType) (= (type |elements#0@@93|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocate#canCall| LinearMutableMapBase._default.CantEquivocate$V |elements#0@@93|) ($Is |elements#0@@93| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocate$V))))) true) :qid |unknown.0:0| :skolemid |2894| :pattern ( (LinearMutableMapBase.__default.CantEquivocate LinearMutableMapBase._default.CantEquivocate$V |elements#0@@93|)) ))))
(assert (forall ((LinearMutableMapBase._default.CantEquivocate$V@@0 T@U) (|elements#0@@94| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocate$V@@0) TyType) (= (type |elements#0@@94|) (SeqType BoxType))) ($Is |elements#0@@94| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocate$V@@0)))) (= (|LinearMutableMapBase.__default.CantEquivocate#requires| LinearMutableMapBase._default.CantEquivocate$V@@0 |elements#0@@94|) true)) :qid |unknown.0:0| :skolemid |2895| :pattern ( (|LinearMutableMapBase.__default.CantEquivocate#requires| LinearMutableMapBase._default.CantEquivocate$V@@0 |elements#0@@94|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocate$V@@1 T@U) (|elements#0@@95| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocate$V@@1) TyType) (= (type |elements#0@@95|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocate#canCall| LinearMutableMapBase._default.CantEquivocate$V@@1 |elements#0@@95|) ($Is |elements#0@@95| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocate$V@@1))))) (and (forall ((|slot1#0@@9| T@U) (|slot2#0@@9| T@U) ) (!  (=> (and (and (= (type |slot1#0@@9|) DatatypeTypeType) (= (type |slot2#0@@9|) DatatypeTypeType)) (and ($Is |slot1#0@@9| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#0@@9| Tclass.LinearMutableMapBase.Slot))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@95|) |slot1#0@@9|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@9|) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@95|) |slot2#0@@9|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@9|) (and (LinearMutableMapBase.Slot.Slot_q |slot1#0@@9|) (=> (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot1#0@@9|)))) (and (LinearMutableMapBase.Slot.Slot_q |slot2#0@@9|) (=> (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot2#0@@9|)))) (and (and (LinearMutableMapBase.Slot.Slot_q |slot1#0@@9|) (LinearMutableMapBase.Slot.Slot_q |slot2#0@@9|)) (=> (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot1#0@@9|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot2#0@@9|))))) (and (|$IsA#LinearMutableMapBase.Slot| |slot1#0@@9|) (|$IsA#LinearMutableMapBase.Slot| |slot2#0@@9|))))))))))))) :qid |LinearMutableMapBaseidfy.392:12| :skolemid |2897| :pattern ( (LinearMutableMapBase.Slot.slot |slot2#0@@9|) (LinearMutableMapBase.Slot.slot |slot1#0@@9|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot2#0@@9|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@9|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot1#0@@9|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@9|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@9|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@9|)) )) (= (LinearMutableMapBase.__default.CantEquivocate LinearMutableMapBase._default.CantEquivocate$V@@1 |elements#0@@95|) (forall ((|slot1#0@@10| T@U) (|slot2#0@@10| T@U) ) (!  (=> (and (and (= (type |slot1#0@@10|) DatatypeTypeType) (= (type |slot2#0@@10|) DatatypeTypeType)) (and ($Is |slot1#0@@10| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#0@@10| Tclass.LinearMutableMapBase.Slot))) (=> (and (and (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@10|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@10|)) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot1#0@@10|))))) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot2#0@@10|))))) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot1#0@@10|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@95| (LinearMutableMapBase.Slot.slot |slot2#0@@10|)))))) (|LinearMutableMapBase.Slot#Equal| |slot1#0@@10| |slot2#0@@10|))) :qid |LinearMutableMapBaseidfy.392:12| :skolemid |2896| :pattern ( (LinearMutableMapBase.Slot.slot |slot2#0@@10|) (LinearMutableMapBase.Slot.slot |slot1#0@@10|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot2#0@@10|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@10|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot1#0@@10|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@10|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot2#0@@10|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@95|) |slot1#0@@10|)) ))))) :qid |unknown.0:0| :skolemid |2898| :pattern ( (LinearMutableMapBase.__default.CantEquivocate LinearMutableMapBase._default.CantEquivocate$V@@1 |elements#0@@95|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.CantEquivocate$V@@2 T@U) (|elements#0@@96| T@U) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.CantEquivocate$V@@2) TyType) (= (type |elements#0@@96|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.CantEquivocate#canCall| LinearMutableMapBase._default.CantEquivocate$V@@2 (Lit |elements#0@@96|)) ($Is |elements#0@@96| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.CantEquivocate$V@@2))))) (and (forall ((|slot1#1@@1| T@U) (|slot2#1@@1| T@U) ) (!  (=> (and (and (= (type |slot1#1@@1|) DatatypeTypeType) (= (type |slot2#1@@1|) DatatypeTypeType)) (and ($Is |slot1#1@@1| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#1@@1| Tclass.LinearMutableMapBase.Slot))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@96|)) |slot1#1@@1|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@96|)) |slot1#1@@1|) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@96|)) |slot2#1@@1|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@96|)) |slot2#1@@1|) (and (LinearMutableMapBase.Slot.Slot_q |slot1#1@@1|) (=> (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot1#1@@1|)))) (and (LinearMutableMapBase.Slot.Slot_q |slot2#1@@1|) (=> (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot2#1@@1|)))) (and (and (LinearMutableMapBase.Slot.Slot_q |slot1#1@@1|) (LinearMutableMapBase.Slot.Slot_q |slot2#1@@1|)) (=> (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot1#1@@1|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot2#1@@1|))))) (and (|$IsA#LinearMutableMapBase.Slot| |slot1#1@@1|) (|$IsA#LinearMutableMapBase.Slot| |slot2#1@@1|))))))))))))) :qid |LinearMutableMapBaseidfy.392:12| :skolemid |2900| :pattern ( (LinearMutableMapBase.Slot.slot |slot2#1@@1|) (LinearMutableMapBase.Slot.slot |slot1#1@@1|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot2#1@@1|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot1#1@@1|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot1#1@@1|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot2#1@@1|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot2#1@@1|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot1#1@@1|)) )) (= (LinearMutableMapBase.__default.CantEquivocate LinearMutableMapBase._default.CantEquivocate$V@@2 (Lit |elements#0@@96|)) (forall ((|slot1#1@@2| T@U) (|slot2#1@@2| T@U) ) (!  (=> (and (and (= (type |slot1#1@@2|) DatatypeTypeType) (= (type |slot2#1@@2|) DatatypeTypeType)) (and ($Is |slot1#1@@2| Tclass.LinearMutableMapBase.Slot) ($Is |slot2#1@@2| Tclass.LinearMutableMapBase.Slot))) (=> (and (and (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@96|)) |slot1#1@@2|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@96|)) |slot2#1@@2|)) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot1#1@@2|))))) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot2#1@@2|))))) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot1#1@@2|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@96|) (LinearMutableMapBase.Slot.slot |slot2#1@@2|)))))) (|LinearMutableMapBase.Slot#Equal| |slot1#1@@2| |slot2#1@@2|))) :qid |LinearMutableMapBaseidfy.392:12| :skolemid |2899| :pattern ( (LinearMutableMapBase.Slot.slot |slot2#1@@2|) (LinearMutableMapBase.Slot.slot |slot1#1@@2|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot2#1@@2|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot1#1@@2|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot1#1@@2|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot2#1@@2|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot2#1@@2|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@96|) |slot1#1@@2|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2901| :pattern ( (LinearMutableMapBase.__default.CantEquivocate LinearMutableMapBase._default.CantEquivocate$V@@2 (Lit |elements#0@@96|))) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryExistsInElements$V T@U) (|elements#0@@97| T@U) (|i#0@@107| Int) (|key#0@@46| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.EntryExistsInElements$V) TyType) (= (type |elements#0@@97|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.EntryExistsInElements#canCall| LinearMutableMapBase._default.EntryExistsInElements$V |elements#0@@97| |i#0@@107| |key#0@@46|) (and (and (and ($Is |elements#0@@97| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryExistsInElements$V))) (and (<= (LitInt 0) |i#0@@107|) (< |i#0@@107| 18446744073709551616))) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 18446744073709551616))) (and (<= |i#0@@107| (|Seq#Length| |elements#0@@97|)) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntryExistsInElements$V |elements#0@@97|))))) true) :qid |unknown.0:0| :skolemid |2914| :pattern ( (LinearMutableMapBase.__default.EntryExistsInElements LinearMutableMapBase._default.EntryExistsInElements$V |elements#0@@97| |i#0@@107| |key#0@@46|)) ))))
(assert (forall ((LinearMutableMapBase._default.EntryExistsInElements$V@@0 T@U) (|elements#0@@98| T@U) (|i#0@@108| Int) (|key#0@@47| Int) ) (!  (=> (and (= (type LinearMutableMapBase._default.EntryExistsInElements$V@@0) TyType) (= (type |elements#0@@98|) (SeqType BoxType))) (=> (and (and ($Is |elements#0@@98| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryExistsInElements$V@@0))) (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| 18446744073709551616))) (and (<= (LitInt 0) |key#0@@47|) (< |key#0@@47| 18446744073709551616))) (= (|LinearMutableMapBase.__default.EntryExistsInElements#requires| LinearMutableMapBase._default.EntryExistsInElements$V@@0 |elements#0@@98| |i#0@@108| |key#0@@47|)  (and (<= |i#0@@108| (|Seq#Length| |elements#0@@98|)) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntryExistsInElements$V@@0 |elements#0@@98|))))) :qid |unknown.0:0| :skolemid |2915| :pattern ( (|LinearMutableMapBase.__default.EntryExistsInElements#requires| LinearMutableMapBase._default.EntryExistsInElements$V@@0 |elements#0@@98| |i#0@@108| |key#0@@47|)) )))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryExistsInElements$V@@1 T@U) (|elements#0@@99| T@U) (|i#0@@109| Int) (|key#0@@48| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.EntryExistsInElements$V@@1) TyType) (= (type |elements#0@@99|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.EntryExistsInElements#canCall| LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |i#0@@109| |key#0@@48|) (and (and (and ($Is |elements#0@@99| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryExistsInElements$V@@1))) (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| 18446744073709551616))) (and (<= (LitInt 0) |key#0@@48|) (< |key#0@@48| 18446744073709551616))) (and (<= |i#0@@109| (|Seq#Length| |elements#0@@99|)) (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99|))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|slot#0@@67| T@U) ) (!  (=> (and (= (type |slot#0@@67|) DatatypeTypeType) ($Is |slot#0@@67| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.Slot.Slot_q |slot#0@@67|) (=> (< (LinearMutableMapBase.Slot.slot |slot#0@@67|) |i#0@@109|) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@99|) |slot#0@@67|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@99|) |slot#0@@67|) (|LinearMutableMapBase.__default.FilledWithEntryKey#canCall| LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |slot#0@@67| |key#0@@48|)))))) :qid |LinearMutableMapBaseidfy.452:16| :skolemid |2917| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |slot#0@@67| |key#0@@48|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@99|) |slot#0@@67|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot#0@@67|)) ))) (= (LinearMutableMapBase.__default.EntryExistsInElements LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |i#0@@109| |key#0@@48|)  (and true (exists ((|slot#0@@68| T@U) ) (!  (and (= (type |slot#0@@68|) DatatypeTypeType) (and ($Is |slot#0@@68| Tclass.LinearMutableMapBase.Slot) (and (and (< (LinearMutableMapBase.Slot.slot |slot#0@@68|) |i#0@@109|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@99|) |slot#0@@68|)) (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |slot#0@@68| |key#0@@48|)))) :qid |LinearMutableMapBaseidfy.452:16| :skolemid |2916| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |slot#0@@68| |key#0@@48|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@99|) |slot#0@@68|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot#0@@68|)) )))))) :qid |unknown.0:0| :skolemid |2918| :pattern ( (LinearMutableMapBase.__default.EntryExistsInElements LinearMutableMapBase._default.EntryExistsInElements$V@@1 |elements#0@@99| |i#0@@109| |key#0@@48|)) ))))
(assert  (=> true (forall ((LinearMutableMapBase._default.EntryExistsInElements$V@@2 T@U) (|elements#0@@100| T@U) (|i#0@@110| Int) (|key#0@@49| Int) ) (!  (=> (and (and (= (type LinearMutableMapBase._default.EntryExistsInElements$V@@2) TyType) (= (type |elements#0@@100|) (SeqType BoxType))) (or (|LinearMutableMapBase.__default.EntryExistsInElements#canCall| LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|) (LitInt |i#0@@110|) (LitInt |key#0@@49|)) (and (and (and ($Is |elements#0@@100| (TSeq (Tclass.LinearMutableMapBase.Item LinearMutableMapBase._default.EntryExistsInElements$V@@2))) (and (<= (LitInt 0) |i#0@@110|) (< |i#0@@110| 18446744073709551616))) (and (<= (LitInt 0) |key#0@@49|) (< |key#0@@49| 18446744073709551616))) (and (<= (LitInt |i#0@@110|) (|Seq#Length| (Lit |elements#0@@100|))) (U_2_bool (Lit (bool_2_U (LinearMutableMapBase.__default.ValidElements LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|slot#1@@9| T@U) ) (!  (=> (and (= (type |slot#1@@9|) DatatypeTypeType) ($Is |slot#1@@9| Tclass.LinearMutableMapBase.Slot)) (and (LinearMutableMapBase.Slot.Slot_q |slot#1@@9|) (=> (< (LinearMutableMapBase.Slot.slot |slot#1@@9|) |i#0@@110|) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@100|)) |slot#1@@9|) (=> (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@100|)) |slot#1@@9|) (|LinearMutableMapBase.__default.FilledWithEntryKey#canCall| LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|) |slot#1@@9| (LitInt |key#0@@49|))))))) :qid |LinearMutableMapBaseidfy.452:16| :skolemid |2920| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@2 |elements#0@@100| |slot#1@@9| |key#0@@49|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@100|) |slot#1@@9|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot#1@@9|)) ))) (= (LinearMutableMapBase.__default.EntryExistsInElements LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|) (LitInt |i#0@@110|) (LitInt |key#0@@49|))  (and true (exists ((|slot#1@@10| T@U) ) (!  (and (= (type |slot#1@@10|) DatatypeTypeType) (and ($Is |slot#1@@10| Tclass.LinearMutableMapBase.Slot) (and (and (< (LinearMutableMapBase.Slot.slot |slot#1@@10|) |i#0@@110|) (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@100|)) |slot#1@@10|)) (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|) |slot#1@@10| (LitInt |key#0@@49|))))) :qid |LinearMutableMapBaseidfy.452:16| :skolemid |2919| :pattern ( (LinearMutableMapBase.__default.FilledWithEntryKey LinearMutableMapBase._default.EntryExistsInElements$V@@2 |elements#0@@100| |slot#1@@10| |key#0@@49|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| |elements#0@@100|) |slot#1@@10|)) :pattern ( (LinearMutableMapBase.Slot.slot |slot#1@@10|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2921| :pattern ( (LinearMutableMapBase.__default.EntryExistsInElements LinearMutableMapBase._default.EntryExistsInElements$V@@2 (Lit |elements#0@@100|) (LitInt |i#0@@110|) (LitInt |key#0@@49|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@516 T@T) (arg1@@258 T@T) ) (! (= (Ctor (MapType6Type arg0@@516 arg1@@258)) 29) :qid |ctor:MapType6Type| )) (forall ((arg0@@517 T@T) (arg1@@259 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@517 arg1@@259)) arg0@@517) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@517 arg1@@259)) ))) (forall ((arg0@@518 T@T) (arg1@@260 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@518 arg1@@260)) arg1@@260) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@518 arg1@@260)) ))) (forall ((arg0@@519 T@U) (arg1@@261 T@U) (arg2@@154 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@519)))) (= (type (MapType6Select arg0@@519 arg1@@261 arg2@@154)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@519 arg1@@261 arg2@@154)) ))) (forall ((arg0@@520 T@U) (arg1@@262 T@U) (arg2@@155 T@U) (arg3@@93 T@U) ) (! (let ((aVar1@@7 (type arg3@@93))) (let ((aVar0@@4 (type arg1@@262))) (= (type (MapType6Store arg0@@520 arg1@@262 arg2@@155 arg3@@93)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@520 arg1@@262 arg2@@155 arg3@@93)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@67)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@68 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@69 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@70 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@521 T@U) (arg1@@263 T@U) (arg2@@156 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#0| arg0@@521 arg1@@263 arg2@@156 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@521 arg1@@263 arg2@@156 arg3@@94)) ))))
(assert (forall ((|l#0@@21| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@49 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@49) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@49 $f@@5))  (=> (and (not (= $o@@49 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@49) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2922| :pattern ( (MapType6Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@49 $f@@5)) )))
(assert (forall ((arg0@@522 T@U) (arg1@@264 T@U) (arg2@@157 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#1| arg0@@522 arg1@@264 arg2@@157 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@522 arg1@@264 arg2@@157 arg3@@95)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@50 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@50) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@50 $f@@6))  (=> (and (not (= $o@@50 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@50) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2923| :pattern ( (MapType6Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@50 $f@@6)) )))
(assert (forall ((arg0@@523 T@U) (arg1@@265 T@U) (arg2@@158 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#2| arg0@@523 arg1@@265 arg2@@158 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@523 arg1@@265 arg2@@158 arg3@@96)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@51 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@51) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@51 $f@@7))  (=> (and (not (= $o@@51 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@51) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2924| :pattern ( (MapType6Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@51 $f@@7)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@2| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@24|) TyType) (= (type |l#1@@2|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#3| |l#0@@24| |l#1@@2|) |$l#0#heap#0| |$l#0#i#0|) ($Box (LinearContentMutableMap.lItem.toItem |l#0@@24| ($Unbox DatatypeTypeType (|Seq#Index| |l#1@@2| (U_2_int ($Unbox intType |$l#0#i#0|)))))))) :qid |unknown.0:0| :skolemid |2925| :pattern ( (MapType2Select (|lambda#3| |l#0@@24| |l#1@@2|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@3| Int) (|l#2@@2| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@25|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@2|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@25|) (and (<= |l#1@@3| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@2|))))) :qid |DafnyPreludebpl.22:1| :skolemid |2926| :pattern ( (MapType2Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@2|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@26| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#5| |l#0@@26|) |$l#0#o#0|)) |l#0@@26|)) :qid |unknown.0:0| :skolemid |2927| :pattern ( (MapType0Select (|lambda#5| |l#0@@26|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@27| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@27|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#6| |l#0@@27|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@27|)) :qid |LinearContentMutableMapidfy.75:22| :skolemid |2928| :pattern ( (MapType2Select (|lambda#6| |l#0@@27|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@28| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@28|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#7| |l#0@@28|) |$l#0#ly#0|) |l#0@@28|)) :qid |LinearContentMutableMapidfy.75:22| :skolemid |2929| :pattern ( (MapType0Select (|lambda#7| |l#0@@28|) |$l#0#ly#0|)) )))
(assert (forall ((arg0@@524 T@U) (arg1@@266 T@U) (arg2@@159 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#13| arg0@@524 arg1@@266 arg2@@159 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@524 arg1@@266 arg2@@159 arg3@@97)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@4| T@U) (|l#2@@3| T@U) (|l#3@@2| Bool) ($o@@52 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@52) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@29| |l#1@@4| |l#2@@3| |l#3@@2|) $o@@52 $f@@8))  (=> (and (not (= $o@@52 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@52) |l#2@@3|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2930| :pattern ( (MapType6Select (|lambda#13| |l#0@@29| |l#1@@4| |l#2@@3| |l#3@@2|) $o@@52 $f@@8)) )))
(assert (forall ((arg0@@525 T@U) (arg1@@267 T@U) (arg2@@160 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#14| arg0@@525 arg1@@267 arg2@@160 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@525 arg1@@267 arg2@@160 arg3@@98)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@5| T@U) (|l#2@@4| T@U) (|l#3@@3| Bool) ($o@@53 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@53) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@30| |l#1@@5| |l#2@@4| |l#3@@3|) $o@@53 $f@@9))  (=> (and (not (= $o@@53 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@53) |l#2@@4|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2931| :pattern ( (MapType6Select (|lambda#14| |l#0@@30| |l#1@@5| |l#2@@4| |l#3@@3|) $o@@53 $f@@9)) )))
(assert (forall ((arg0@@526 T@U) (arg1@@268 T@U) (arg2@@161 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#25| arg0@@526 arg1@@268 arg2@@161 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@526 arg1@@268 arg2@@161 arg3@@99)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@6| T@U) (|l#2@@5| T@U) (|l#3@@4| Bool) ($o@@54 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@54) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@31| |l#1@@6| |l#2@@5| |l#3@@4|) $o@@54 $f@@10))  (=> (and (not (= $o@@54 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@54) |l#2@@5|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2932| :pattern ( (MapType6Select (|lambda#25| |l#0@@31| |l#1@@6| |l#2@@5| |l#3@@4|) $o@@54 $f@@10)) )))
(assert (forall ((arg0@@527 T@U) (arg1@@269 T@U) (arg2@@162 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#26| arg0@@527 arg1@@269 arg2@@162 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@527 arg1@@269 arg2@@162 arg3@@100)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@7| T@U) (|l#2@@6| T@U) (|l#3@@5| Bool) ($o@@55 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@55) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@32| |l#1@@7| |l#2@@6| |l#3@@5|) $o@@55 $f@@11))  (=> (and (not (= $o@@55 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@55) |l#2@@6|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2933| :pattern ( (MapType6Select (|lambda#26| |l#0@@32| |l#1@@7| |l#2@@6| |l#3@@5|) $o@@55 $f@@11)) )))
(assert (forall ((arg0@@528 T@U) (arg1@@270 T@U) (arg2@@163 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#27| arg0@@528 arg1@@270 arg2@@163 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@528 arg1@@270 arg2@@163 arg3@@101)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@8| T@U) (|l#2@@7| T@U) (|l#3@@6| Bool) ($o@@56 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@56) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@33| |l#1@@8| |l#2@@7| |l#3@@6|) $o@@56 $f@@12))  (=> (and (not (= $o@@56 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@56) |l#2@@7|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2934| :pattern ( (MapType6Select (|lambda#27| |l#0@@33| |l#1@@8| |l#2@@7| |l#3@@6|) $o@@56 $f@@12)) )))
(assert (forall ((arg0@@529 T@U) (arg1@@271 T@U) (arg2@@164 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#28| arg0@@529 arg1@@271 arg2@@164 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@529 arg1@@271 arg2@@164 arg3@@102)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@9| T@U) (|l#2@@8| T@U) (|l#3@@7| Bool) ($o@@57 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@57) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@34| |l#1@@9| |l#2@@8| |l#3@@7|) $o@@57 $f@@13))  (=> (and (not (= $o@@57 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@57) |l#2@@8|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2935| :pattern ( (MapType6Select (|lambda#28| |l#0@@34| |l#1@@9| |l#2@@8| |l#3@@7|) $o@@57 $f@@13)) )))
(assert (forall ((arg0@@530 T@U) (arg1@@272 T@U) (arg2@@165 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#29| arg0@@530 arg1@@272 arg2@@165 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@530 arg1@@272 arg2@@165 arg3@@103)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@10| T@U) (|l#2@@9| T@U) (|l#3@@8| Bool) ($o@@58 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@35| |l#1@@10| |l#2@@9| |l#3@@8|) $o@@58 $f@@14))  (=> (and (not (= $o@@58 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@58) |l#2@@9|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2936| :pattern ( (MapType6Select (|lambda#29| |l#0@@35| |l#1@@10| |l#2@@9| |l#3@@8|) $o@@58 $f@@14)) )))
(assert (forall ((arg0@@531 T@U) (arg1@@273 T@U) (arg2@@166 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#30| arg0@@531 arg1@@273 arg2@@166 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@531 arg1@@273 arg2@@166 arg3@@104)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@11| T@U) (|l#2@@10| T@U) (|l#3@@9| Bool) ($o@@59 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@36| |l#1@@11| |l#2@@10| |l#3@@9|) $o@@59 $f@@15))  (=> (and (not (= $o@@59 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@59) |l#2@@10|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2937| :pattern ( (MapType6Select (|lambda#30| |l#0@@36| |l#1@@11| |l#2@@10| |l#3@@9|) $o@@59 $f@@15)) )))
(assert (forall ((arg0@@532 T@U) (arg1@@274 T@U) (arg2@@167 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#31| arg0@@532 arg1@@274 arg2@@167 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@532 arg1@@274 arg2@@167 arg3@@105)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@12| T@U) (|l#2@@11| T@U) (|l#3@@10| Bool) ($o@@60 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@37| |l#1@@12| |l#2@@11| |l#3@@10|) $o@@60 $f@@16))  (=> (and (not (= $o@@60 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@60) |l#2@@11|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2938| :pattern ( (MapType6Select (|lambda#31| |l#0@@37| |l#1@@12| |l#2@@11| |l#3@@10|) $o@@60 $f@@16)) )))
(assert (forall ((arg0@@533 T@U) (arg1@@275 T@U) (arg2@@168 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#32| arg0@@533 arg1@@275 arg2@@168 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@533 arg1@@275 arg2@@168 arg3@@106)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@13| T@U) (|l#2@@12| T@U) (|l#3@@11| Bool) ($o@@61 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@38| |l#1@@13| |l#2@@12| |l#3@@11|) $o@@61 $f@@17))  (=> (and (not (= $o@@61 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@61) |l#2@@12|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2939| :pattern ( (MapType6Select (|lambda#32| |l#0@@38| |l#1@@13| |l#2@@12| |l#3@@11|) $o@@61 $f@@17)) )))
(assert (forall ((arg0@@534 T@U) (arg1@@276 T@U) (arg2@@169 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#33| arg0@@534 arg1@@276 arg2@@169 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@534 arg1@@276 arg2@@169 arg3@@107)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@14| T@U) (|l#2@@13| T@U) (|l#3@@12| Bool) ($o@@62 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@39| |l#1@@14| |l#2@@13| |l#3@@12|) $o@@62 $f@@18))  (=> (and (not (= $o@@62 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@62) |l#2@@13|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2940| :pattern ( (MapType6Select (|lambda#33| |l#0@@39| |l#1@@14| |l#2@@13| |l#3@@12|) $o@@62 $f@@18)) )))
(assert (forall ((arg0@@535 T@U) (arg1@@277 T@U) (arg2@@170 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#34| arg0@@535 arg1@@277 arg2@@170 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@535 arg1@@277 arg2@@170 arg3@@108)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@15| T@U) (|l#2@@14| T@U) (|l#3@@13| Bool) ($o@@63 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@40| |l#1@@15| |l#2@@14| |l#3@@13|) $o@@63 $f@@19))  (=> (and (not (= $o@@63 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@63) |l#2@@14|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2941| :pattern ( (MapType6Select (|lambda#34| |l#0@@40| |l#1@@15| |l#2@@14| |l#3@@13|) $o@@63 $f@@19)) )))
(assert (forall ((arg0@@536 T@U) (arg1@@278 T@U) (arg2@@171 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#35| arg0@@536 arg1@@278 arg2@@171 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@536 arg1@@278 arg2@@171 arg3@@109)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@16| T@U) (|l#2@@15| T@U) (|l#3@@14| Bool) ($o@@64 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@41| |l#1@@16| |l#2@@15| |l#3@@14|) $o@@64 $f@@20))  (=> (and (not (= $o@@64 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@64) |l#2@@15|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2942| :pattern ( (MapType6Select (|lambda#35| |l#0@@41| |l#1@@16| |l#2@@15| |l#3@@14|) $o@@64 $f@@20)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@17| Int) (|l#2@@16| Int) (|$y#0_0| T@U) ) (!  (=> (and (= (type |l#0@@42|) TyType) (= (type |$y#0_0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#36| |l#0@@42| |l#1@@17| |l#2@@16|) |$y#0_0|))  (and ($IsBox |$y#0_0| |l#0@@42|) (and (<= |l#1@@17| (U_2_int ($Unbox intType |$y#0_0|))) (< (U_2_int ($Unbox intType |$y#0_0|)) |l#2@@16|))))) :qid |DafnyPreludebpl.22:1| :skolemid |2943| :pattern ( (MapType0Select (|lambda#36| |l#0@@42| |l#1@@17| |l#2@@16|) |$y#0_0|)) )))
(assert (forall ((arg0@@537 T@U) (arg1@@279 T@U) (arg2@@172 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#37| arg0@@537 arg1@@279 arg2@@172 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@537 arg1@@279 arg2@@172 arg3@@110)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@18| T@U) (|l#2@@17| T@U) (|l#3@@15| Bool) ($o@@65 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@43| |l#1@@18| |l#2@@17| |l#3@@15|) $o@@65 $f@@21))  (=> (and (not (= $o@@65 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@65) |l#2@@17|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2944| :pattern ( (MapType6Select (|lambda#37| |l#0@@43| |l#1@@18| |l#2@@17| |l#3@@15|) $o@@65 $f@@21)) )))
(assert (forall ((arg0@@538 T@U) (arg1@@280 T@U) (arg2@@173 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#38| arg0@@538 arg1@@280 arg2@@173 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@538 arg1@@280 arg2@@173 arg3@@111)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@19| T@U) (|l#2@@18| T@U) (|l#3@@16| Bool) ($o@@66 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@44| |l#1@@19| |l#2@@18| |l#3@@16|) $o@@66 $f@@22))  (=> (and (not (= $o@@66 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@66) |l#2@@18|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2945| :pattern ( (MapType6Select (|lambda#38| |l#0@@44| |l#1@@19| |l#2@@18| |l#3@@16|) $o@@66 $f@@22)) )))
(assert (forall ((arg0@@539 T@U) (arg1@@281 T@U) (arg2@@174 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#39| arg0@@539 arg1@@281 arg2@@174 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@539 arg1@@281 arg2@@174 arg3@@112)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@20| T@U) (|l#2@@19| T@U) (|l#3@@17| Bool) ($o@@67 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@45| |l#1@@20| |l#2@@19| |l#3@@17|) $o@@67 $f@@23))  (=> (and (not (= $o@@67 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@67) |l#2@@19|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2946| :pattern ( (MapType6Select (|lambda#39| |l#0@@45| |l#1@@20| |l#2@@19| |l#3@@17|) $o@@67 $f@@23)) )))
(assert (forall ((arg0@@540 T@U) (arg1@@282 T@U) (arg2@@175 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#40| arg0@@540 arg1@@282 arg2@@175 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@540 arg1@@282 arg2@@175 arg3@@113)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@21| T@U) (|l#2@@20| T@U) (|l#3@@18| Bool) ($o@@68 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@46| |l#1@@21| |l#2@@20| |l#3@@18|) $o@@68 $f@@24))  (=> (and (not (= $o@@68 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@68) |l#2@@20|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2947| :pattern ( (MapType6Select (|lambda#40| |l#0@@46| |l#1@@21| |l#2@@20| |l#3@@18|) $o@@68 $f@@24)) )))
(assert (forall ((arg0@@541 T@U) (arg1@@283 T@U) (arg2@@176 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#41| arg0@@541 arg1@@283 arg2@@176 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@541 arg1@@283 arg2@@176 arg3@@114)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@22| T@U) (|l#2@@21| T@U) (|l#3@@19| Bool) ($o@@69 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@47| |l#1@@22| |l#2@@21| |l#3@@19|) $o@@69 $f@@25))  (=> (and (not (= $o@@69 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@69) |l#2@@21|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2948| :pattern ( (MapType6Select (|lambda#41| |l#0@@47| |l#1@@22| |l#2@@21| |l#3@@19|) $o@@69 $f@@25)) )))
(assert (forall ((arg0@@542 T@U) (arg1@@284 T@U) (arg2@@177 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#42| arg0@@542 arg1@@284 arg2@@177 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@542 arg1@@284 arg2@@177 arg3@@115)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@23| T@U) (|l#2@@22| T@U) (|l#3@@20| Bool) ($o@@70 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@48| |l#1@@23| |l#2@@22| |l#3@@20|) $o@@70 $f@@26))  (=> (and (not (= $o@@70 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@70) |l#2@@22|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2949| :pattern ( (MapType6Select (|lambda#42| |l#0@@48| |l#1@@23| |l#2@@22| |l#3@@20|) $o@@70 $f@@26)) )))
(assert (forall ((arg0@@543 T@U) (arg1@@285 T@U) (arg2@@178 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#43| arg0@@543 arg1@@285 arg2@@178 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@543 arg1@@285 arg2@@178 arg3@@116)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@24| T@U) (|l#2@@23| T@U) (|l#3@@21| Bool) ($o@@71 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@49| |l#1@@24| |l#2@@23| |l#3@@21|) $o@@71 $f@@27))  (=> (and (not (= $o@@71 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@71) |l#2@@23|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2950| :pattern ( (MapType6Select (|lambda#43| |l#0@@49| |l#1@@24| |l#2@@23| |l#3@@21|) $o@@71 $f@@27)) )))
(assert (forall ((arg0@@544 T@U) (arg1@@286 T@U) (arg2@@179 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#44| arg0@@544 arg1@@286 arg2@@179 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@544 arg1@@286 arg2@@179 arg3@@117)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@25| T@U) (|l#2@@24| T@U) (|l#3@@22| Bool) ($o@@72 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@50| |l#1@@25| |l#2@@24| |l#3@@22|) $o@@72 $f@@28))  (=> (and (not (= $o@@72 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@72) |l#2@@24|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2951| :pattern ( (MapType6Select (|lambda#44| |l#0@@50| |l#1@@25| |l#2@@24| |l#3@@22|) $o@@72 $f@@28)) )))
(assert (forall ((arg0@@545 T@U) (arg1@@287 T@U) (arg2@@180 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#45| arg0@@545 arg1@@287 arg2@@180 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@545 arg1@@287 arg2@@180 arg3@@118)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@26| T@U) (|l#2@@25| T@U) (|l#3@@23| Bool) ($o@@73 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@51| |l#1@@26| |l#2@@25| |l#3@@23|) $o@@73 $f@@29))  (=> (and (not (= $o@@73 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@73) |l#2@@25|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2952| :pattern ( (MapType6Select (|lambda#45| |l#0@@51| |l#1@@26| |l#2@@25| |l#3@@23|) $o@@73 $f@@29)) )))
(assert (forall ((arg0@@546 T@U) (arg1@@288 T@U) (arg2@@181 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#46| arg0@@546 arg1@@288 arg2@@181 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@546 arg1@@288 arg2@@181 arg3@@119)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@27| T@U) (|l#2@@26| T@U) (|l#3@@24| Bool) ($o@@74 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@52| |l#1@@27| |l#2@@26| |l#3@@24|) $o@@74 $f@@30))  (=> (and (not (= $o@@74 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@74) |l#2@@26|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2953| :pattern ( (MapType6Select (|lambda#46| |l#0@@52| |l#1@@27| |l#2@@26| |l#3@@24|) $o@@74 $f@@30)) )))
(assert (forall ((arg0@@547 T@U) (arg1@@289 T@U) (arg2@@182 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#47| arg0@@547 arg1@@289 arg2@@182 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@547 arg1@@289 arg2@@182 arg3@@120)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@28| T@U) (|l#2@@27| T@U) (|l#3@@25| Bool) ($o@@75 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@53| |l#1@@28| |l#2@@27| |l#3@@25|) $o@@75 $f@@31))  (=> (and (not (= $o@@75 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@75) |l#2@@27|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2954| :pattern ( (MapType6Select (|lambda#47| |l#0@@53| |l#1@@28| |l#2@@27| |l#3@@25|) $o@@75 $f@@31)) )))
(assert (forall ((arg0@@548 T@U) (arg1@@290 T@U) (arg2@@183 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#48| arg0@@548 arg1@@290 arg2@@183 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@548 arg1@@290 arg2@@183 arg3@@121)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@29| T@U) (|l#2@@28| T@U) (|l#3@@26| Bool) ($o@@76 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@54| |l#1@@29| |l#2@@28| |l#3@@26|) $o@@76 $f@@32))  (=> (and (not (= $o@@76 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@76) |l#2@@28|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2955| :pattern ( (MapType6Select (|lambda#48| |l#0@@54| |l#1@@29| |l#2@@28| |l#3@@26|) $o@@76 $f@@32)) )))
(assert (forall ((arg0@@549 T@U) (arg1@@291 T@U) (arg2@@184 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#49| arg0@@549 arg1@@291 arg2@@184 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@549 arg1@@291 arg2@@184 arg3@@122)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@30| T@U) (|l#2@@29| T@U) (|l#3@@27| Bool) ($o@@77 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@55| |l#1@@30| |l#2@@29| |l#3@@27|) $o@@77 $f@@33))  (=> (and (not (= $o@@77 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@77) |l#2@@29|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2956| :pattern ( (MapType6Select (|lambda#49| |l#0@@55| |l#1@@30| |l#2@@29| |l#3@@27|) $o@@77 $f@@33)) )))
(assert (forall ((arg0@@550 T@U) (arg1@@292 T@U) (arg2@@185 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#50| arg0@@550 arg1@@292 arg2@@185 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@550 arg1@@292 arg2@@185 arg3@@123)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@31| T@U) (|l#2@@30| T@U) (|l#3@@28| Bool) ($o@@78 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@56| |l#1@@31| |l#2@@30| |l#3@@28|) $o@@78 $f@@34))  (=> (and (not (= $o@@78 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@78) |l#2@@30|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2957| :pattern ( (MapType6Select (|lambda#50| |l#0@@56| |l#1@@31| |l#2@@30| |l#3@@28|) $o@@78 $f@@34)) )))
(assert (forall ((arg0@@551 T@U) (arg1@@293 T@U) (arg2@@186 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#51| arg0@@551 arg1@@293 arg2@@186 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@551 arg1@@293 arg2@@186 arg3@@124)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@32| T@U) (|l#2@@31| T@U) (|l#3@@29| Bool) ($o@@79 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@57| |l#1@@32| |l#2@@31| |l#3@@29|) $o@@79 $f@@35))  (=> (and (not (= $o@@79 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@79) |l#2@@31|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2958| :pattern ( (MapType6Select (|lambda#51| |l#0@@57| |l#1@@32| |l#2@@31| |l#3@@29|) $o@@79 $f@@35)) )))
(assert (forall ((arg0@@552 T@U) (arg1@@294 T@U) (arg2@@187 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#52| arg0@@552 arg1@@294 arg2@@187 arg3@@125)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@552 arg1@@294 arg2@@187 arg3@@125)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@33| T@U) (|l#2@@32| T@U) (|l#3@@30| Bool) ($o@@80 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@58| |l#1@@33| |l#2@@32| |l#3@@30|) $o@@80 $f@@36))  (=> (and (not (= $o@@80 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@80) |l#2@@32|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2959| :pattern ( (MapType6Select (|lambda#52| |l#0@@58| |l#1@@33| |l#2@@32| |l#3@@30|) $o@@80 $f@@36)) )))
(assert (forall ((arg0@@553 T@U) (arg1@@295 T@U) (arg2@@188 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#53| arg0@@553 arg1@@295 arg2@@188 arg3@@126)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@553 arg1@@295 arg2@@188 arg3@@126)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@34| T@U) (|l#2@@33| T@U) (|l#3@@31| Bool) ($o@@81 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@59| |l#1@@34| |l#2@@33| |l#3@@31|) $o@@81 $f@@37))  (=> (and (not (= $o@@81 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@81) |l#2@@33|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2960| :pattern ( (MapType6Select (|lambda#53| |l#0@@59| |l#1@@34| |l#2@@33| |l#3@@31|) $o@@81 $f@@37)) )))
(assert (forall ((arg0@@554 T@U) (arg1@@296 T@U) (arg2@@189 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#54| arg0@@554 arg1@@296 arg2@@189 arg3@@127)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@554 arg1@@296 arg2@@189 arg3@@127)) )))
(assert (forall ((|l#0@@60| T@U) (|l#1@@35| T@U) (|l#2@@34| T@U) (|l#3@@32| Bool) ($o@@82 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@60| |l#1@@35| |l#2@@34| |l#3@@32|) $o@@82 $f@@38))  (=> (and (not (= $o@@82 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@82) |l#2@@34|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2961| :pattern ( (MapType6Select (|lambda#54| |l#0@@60| |l#1@@35| |l#2@@34| |l#3@@32|) $o@@82 $f@@38)) )))
(assert (forall ((arg0@@555 T@U) (arg1@@297 T@U) (arg2@@190 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#55| arg0@@555 arg1@@297 arg2@@190 arg3@@128)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@555 arg1@@297 arg2@@190 arg3@@128)) )))
(assert (forall ((|l#0@@61| T@U) (|l#1@@36| T@U) (|l#2@@35| T@U) (|l#3@@33| Bool) ($o@@83 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@61| |l#1@@36| |l#2@@35| |l#3@@33|) $o@@83 $f@@39))  (=> (and (not (= $o@@83 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@83) |l#2@@35|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2962| :pattern ( (MapType6Select (|lambda#55| |l#0@@61| |l#1@@36| |l#2@@35| |l#3@@33|) $o@@83 $f@@39)) )))
(assert (forall ((arg0@@556 T@U) (arg1@@298 T@U) (arg2@@191 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#56| arg0@@556 arg1@@298 arg2@@191 arg3@@129)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@556 arg1@@298 arg2@@191 arg3@@129)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@37| T@U) (|l#2@@36| T@U) (|l#3@@34| Bool) ($o@@84 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@62| |l#1@@37| |l#2@@36| |l#3@@34|) $o@@84 $f@@40))  (=> (and (not (= $o@@84 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@84) |l#2@@36|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2963| :pattern ( (MapType6Select (|lambda#56| |l#0@@62| |l#1@@37| |l#2@@36| |l#3@@34|) $o@@84 $f@@40)) )))
(assert (forall ((arg0@@557 T@U) (arg1@@299 T@U) (arg2@@192 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#57| arg0@@557 arg1@@299 arg2@@192 arg3@@130)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@557 arg1@@299 arg2@@192 arg3@@130)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@38| T@U) (|l#2@@37| T@U) (|l#3@@35| Bool) ($o@@85 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@63| |l#1@@38| |l#2@@37| |l#3@@35|) $o@@85 $f@@41))  (=> (and (not (= $o@@85 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@85) |l#2@@37|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2964| :pattern ( (MapType6Select (|lambda#57| |l#0@@63| |l#1@@38| |l#2@@37| |l#3@@35|) $o@@85 $f@@41)) )))
(assert (forall ((arg0@@558 T@U) (arg1@@300 T@U) (arg2@@193 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#58| arg0@@558 arg1@@300 arg2@@193 arg3@@131)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@558 arg1@@300 arg2@@193 arg3@@131)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@39| T@U) (|l#2@@38| T@U) (|l#3@@36| Bool) ($o@@86 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@64| |l#1@@39| |l#2@@38| |l#3@@36|) $o@@86 $f@@42))  (=> (and (not (= $o@@86 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@86) |l#2@@38|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2965| :pattern ( (MapType6Select (|lambda#58| |l#0@@64| |l#1@@39| |l#2@@38| |l#3@@36|) $o@@86 $f@@42)) )))
(assert (forall ((arg0@@559 T@U) (arg1@@301 T@U) (arg2@@194 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#59| arg0@@559 arg1@@301 arg2@@194 arg3@@132)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@559 arg1@@301 arg2@@194 arg3@@132)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@40| T@U) (|l#2@@39| T@U) (|l#3@@37| Bool) ($o@@87 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@65| |l#1@@40| |l#2@@39| |l#3@@37|) $o@@87 $f@@43))  (=> (and (not (= $o@@87 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@87) |l#2@@39|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2966| :pattern ( (MapType6Select (|lambda#59| |l#0@@65| |l#1@@40| |l#2@@39| |l#3@@37|) $o@@87 $f@@43)) )))
(assert (forall ((arg0@@560 T@U) (arg1@@302 T@U) (arg2@@195 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#60| arg0@@560 arg1@@302 arg2@@195 arg3@@133)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@560 arg1@@302 arg2@@195 arg3@@133)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@41| T@U) (|l#2@@40| T@U) (|l#3@@38| Bool) ($o@@88 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@66| |l#1@@41| |l#2@@40| |l#3@@38|) $o@@88 $f@@44))  (=> (and (not (= $o@@88 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@88) |l#2@@40|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2967| :pattern ( (MapType6Select (|lambda#60| |l#0@@66| |l#1@@41| |l#2@@40| |l#3@@38|) $o@@88 $f@@44)) )))
(assert (forall ((arg0@@561 T@U) (arg1@@303 T@U) (arg2@@196 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#61| arg0@@561 arg1@@303 arg2@@196 arg3@@134)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@561 arg1@@303 arg2@@196 arg3@@134)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@42| T@U) (|l#2@@41| T@U) (|l#3@@39| Bool) ($o@@89 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@67| |l#1@@42| |l#2@@41| |l#3@@39|) $o@@89 $f@@45))  (=> (and (not (= $o@@89 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@89) |l#2@@41|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2968| :pattern ( (MapType6Select (|lambda#61| |l#0@@67| |l#1@@42| |l#2@@41| |l#3@@39|) $o@@89 $f@@45)) )))
(assert (forall ((arg0@@562 T@U) (arg1@@304 T@U) (arg2@@197 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#62| arg0@@562 arg1@@304 arg2@@197 arg3@@135)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@562 arg1@@304 arg2@@197 arg3@@135)) )))
(assert (forall ((|l#0@@68| T@U) (|l#1@@43| T@U) (|l#2@@42| T@U) (|l#3@@40| Bool) ($o@@90 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@68| |l#1@@43| |l#2@@42| |l#3@@40|) $o@@90 $f@@46))  (=> (and (not (= $o@@90 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@90) |l#2@@42|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2969| :pattern ( (MapType6Select (|lambda#62| |l#0@@68| |l#1@@43| |l#2@@42| |l#3@@40|) $o@@90 $f@@46)) )))
(assert (forall ((arg0@@563 T@U) (arg1@@305 T@U) (arg2@@198 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#63| arg0@@563 arg1@@305 arg2@@198 arg3@@136)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@563 arg1@@305 arg2@@198 arg3@@136)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@44| T@U) (|l#2@@43| T@U) (|l#3@@41| Bool) ($o@@91 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@47) (FieldType alpha@@54))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@69| |l#1@@44| |l#2@@43| |l#3@@41|) $o@@91 $f@@47))  (=> (and (not (= $o@@91 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@91) |l#2@@43|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2970| :pattern ( (MapType6Select (|lambda#63| |l#0@@69| |l#1@@44| |l#2@@43| |l#3@@41|) $o@@91 $f@@47)) )))
(assert (forall ((arg0@@564 T@U) (arg1@@306 T@U) (arg2@@199 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#64| arg0@@564 arg1@@306 arg2@@199 arg3@@137)) (MapType6Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@564 arg1@@306 arg2@@199 arg3@@137)) )))
(assert (forall ((|l#0@@70| T@U) (|l#1@@45| T@U) (|l#2@@44| T@U) (|l#3@@42| Bool) ($o@@92 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@48) (FieldType alpha@@55))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@70| |l#1@@45| |l#2@@44| |l#3@@42|) $o@@92 $f@@48))  (=> (and (not (= $o@@92 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@92) |l#2@@44|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2971| :pattern ( (MapType6Select (|lambda#64| |l#0@@70| |l#1@@45| |l#2@@44| |l#3@@42|) $o@@92 $f@@48)) )))
(assert (forall ((arg0@@565 T@U) (arg1@@307 T@U) (arg2@@200 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#65| arg0@@565 arg1@@307 arg2@@200 arg3@@138)) (MapType6Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@565 arg1@@307 arg2@@200 arg3@@138)) )))
(assert (forall ((|l#0@@71| T@U) (|l#1@@46| T@U) (|l#2@@45| T@U) (|l#3@@43| Bool) ($o@@93 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@49) (FieldType alpha@@56))) (= (U_2_bool (MapType6Select (|lambda#65| |l#0@@71| |l#1@@46| |l#2@@45| |l#3@@43|) $o@@93 $f@@49))  (=> (and (not (= $o@@93 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@93) |l#2@@45|))) |l#3@@43|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2972| :pattern ( (MapType6Select (|lambda#65| |l#0@@71| |l#1@@46| |l#2@@45| |l#3@@43|) $o@@93 $f@@49)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@308 T@U) (arg2@@201 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#66| arg0@@566 arg1@@308 arg2@@201 arg3@@139)) (MapType6Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@566 arg1@@308 arg2@@201 arg3@@139)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@47| T@U) (|l#2@@46| T@U) (|l#3@@44| Bool) ($o@@94 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@50) (FieldType alpha@@57))) (= (U_2_bool (MapType6Select (|lambda#66| |l#0@@72| |l#1@@47| |l#2@@46| |l#3@@44|) $o@@94 $f@@50))  (=> (and (not (= $o@@94 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@94) |l#2@@46|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2973| :pattern ( (MapType6Select (|lambda#66| |l#0@@72| |l#1@@47| |l#2@@46| |l#3@@44|) $o@@94 $f@@50)) )))
(assert (forall ((arg0@@567 T@U) (arg1@@309 T@U) (arg2@@202 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#67| arg0@@567 arg1@@309 arg2@@202 arg3@@140)) (MapType6Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@567 arg1@@309 arg2@@202 arg3@@140)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@48| T@U) (|l#2@@47| T@U) (|l#3@@45| Bool) ($o@@95 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@51) (FieldType alpha@@58))) (= (U_2_bool (MapType6Select (|lambda#67| |l#0@@73| |l#1@@48| |l#2@@47| |l#3@@45|) $o@@95 $f@@51))  (=> (and (not (= $o@@95 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@95) |l#2@@47|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2974| :pattern ( (MapType6Select (|lambda#67| |l#0@@73| |l#1@@48| |l#2@@47| |l#3@@45|) $o@@95 $f@@51)) )))
(assert (forall ((arg0@@568 T@U) (arg1@@310 T@U) (arg2@@203 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#68| arg0@@568 arg1@@310 arg2@@203 arg3@@141)) (MapType6Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@568 arg1@@310 arg2@@203 arg3@@141)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@49| T@U) (|l#2@@48| T@U) (|l#3@@46| Bool) ($o@@96 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@52) (FieldType alpha@@59))) (= (U_2_bool (MapType6Select (|lambda#68| |l#0@@74| |l#1@@49| |l#2@@48| |l#3@@46|) $o@@96 $f@@52))  (=> (and (not (= $o@@96 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@96) |l#2@@48|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2975| :pattern ( (MapType6Select (|lambda#68| |l#0@@74| |l#1@@49| |l#2@@48| |l#3@@46|) $o@@96 $f@@52)) )))
(assert (forall ((arg0@@569 T@U) (arg1@@311 T@U) (arg2@@204 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#69| arg0@@569 arg1@@311 arg2@@204 arg3@@142)) (MapType6Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@569 arg1@@311 arg2@@204 arg3@@142)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@50| T@U) (|l#2@@49| T@U) (|l#3@@47| Bool) ($o@@97 T@U) ($f@@53 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@53) (FieldType alpha@@60))) (= (U_2_bool (MapType6Select (|lambda#69| |l#0@@75| |l#1@@50| |l#2@@49| |l#3@@47|) $o@@97 $f@@53))  (=> (and (not (= $o@@97 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@97) |l#2@@49|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2976| :pattern ( (MapType6Select (|lambda#69| |l#0@@75| |l#1@@50| |l#2@@49| |l#3@@47|) $o@@97 $f@@53)) )))
(assert (forall ((arg0@@570 T@U) (arg1@@312 T@U) (arg2@@205 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#70| arg0@@570 arg1@@312 arg2@@205 arg3@@143)) (MapType6Type refType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@570 arg1@@312 arg2@@205 arg3@@143)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@51| T@U) (|l#2@@50| T@U) (|l#3@@48| Bool) ($o@@98 T@U) ($f@@54 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@54) (FieldType alpha@@61))) (= (U_2_bool (MapType6Select (|lambda#70| |l#0@@76| |l#1@@51| |l#2@@50| |l#3@@48|) $o@@98 $f@@54))  (=> (and (not (= $o@@98 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@98) |l#2@@50|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2977| :pattern ( (MapType6Select (|lambda#70| |l#0@@76| |l#1@@51| |l#2@@50| |l#3@@48|) $o@@98 $f@@54)) )))
(assert (forall ((arg0@@571 T@U) (arg1@@313 T@U) (arg2@@206 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#71| arg0@@571 arg1@@313 arg2@@206 arg3@@144)) (MapType6Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@571 arg1@@313 arg2@@206 arg3@@144)) )))
(assert (forall ((|l#0@@77| T@U) (|l#1@@52| T@U) (|l#2@@51| T@U) (|l#3@@49| Bool) ($o@@99 T@U) ($f@@55 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type |l#0@@77|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@55) (FieldType alpha@@62))) (= (U_2_bool (MapType6Select (|lambda#71| |l#0@@77| |l#1@@52| |l#2@@51| |l#3@@49|) $o@@99 $f@@55))  (=> (and (not (= $o@@99 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@99) |l#2@@51|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2978| :pattern ( (MapType6Select (|lambda#71| |l#0@@77| |l#1@@52| |l#2@@51| |l#3@@49|) $o@@99 $f@@55)) )))
(assert (forall ((arg0@@572 T@U) (arg1@@314 T@U) (arg2@@207 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#72| arg0@@572 arg1@@314 arg2@@207 arg3@@145)) (MapType6Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@572 arg1@@314 arg2@@207 arg3@@145)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@53| T@U) (|l#2@@52| T@U) (|l#3@@50| Bool) ($o@@100 T@U) ($f@@56 T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type |l#0@@78|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@56) (FieldType alpha@@63))) (= (U_2_bool (MapType6Select (|lambda#72| |l#0@@78| |l#1@@53| |l#2@@52| |l#3@@50|) $o@@100 $f@@56))  (=> (and (not (= $o@@100 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@100) |l#2@@52|))) |l#3@@50|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2979| :pattern ( (MapType6Select (|lambda#72| |l#0@@78| |l#1@@53| |l#2@@52| |l#3@@50|) $o@@100 $f@@56)) )))
(assert (forall ((arg0@@573 T@U) (arg1@@315 T@U) (arg2@@208 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#73| arg0@@573 arg1@@315 arg2@@208 arg3@@146)) (MapType6Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@573 arg1@@315 arg2@@208 arg3@@146)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@54| T@U) (|l#2@@53| T@U) (|l#3@@51| Bool) ($o@@101 T@U) ($f@@57 T@U) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type |l#0@@79|) refType) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@57) (FieldType alpha@@64))) (= (U_2_bool (MapType6Select (|lambda#73| |l#0@@79| |l#1@@54| |l#2@@53| |l#3@@51|) $o@@101 $f@@57))  (=> (and (not (= $o@@101 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@101) |l#2@@53|))) |l#3@@51|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2980| :pattern ( (MapType6Select (|lambda#73| |l#0@@79| |l#1@@54| |l#2@@53| |l#3@@51|) $o@@101 $f@@57)) )))
(assert (forall ((arg0@@574 T@U) (arg1@@316 T@U) (arg2@@209 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#74| arg0@@574 arg1@@316 arg2@@209 arg3@@147)) (MapType6Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@574 arg1@@316 arg2@@209 arg3@@147)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@55| T@U) (|l#2@@54| T@U) (|l#3@@52| Bool) ($o@@102 T@U) ($f@@58 T@U) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type |l#0@@80|) refType) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@58) (FieldType alpha@@65))) (= (U_2_bool (MapType6Select (|lambda#74| |l#0@@80| |l#1@@55| |l#2@@54| |l#3@@52|) $o@@102 $f@@58))  (=> (and (not (= $o@@102 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@102) |l#2@@54|))) |l#3@@52|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2981| :pattern ( (MapType6Select (|lambda#74| |l#0@@80| |l#1@@55| |l#2@@54| |l#3@@52|) $o@@102 $f@@58)) )))
(assert (forall ((arg0@@575 T@U) (arg1@@317 T@U) (arg2@@210 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#75| arg0@@575 arg1@@317 arg2@@210 arg3@@148)) (MapType6Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@575 arg1@@317 arg2@@210 arg3@@148)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@56| T@U) (|l#2@@55| T@U) (|l#3@@53| Bool) ($o@@103 T@U) ($f@@59 T@U) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type |l#0@@81|) refType) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@59) (FieldType alpha@@66))) (= (U_2_bool (MapType6Select (|lambda#75| |l#0@@81| |l#1@@56| |l#2@@55| |l#3@@53|) $o@@103 $f@@59))  (=> (and (not (= $o@@103 |l#0@@81|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@103) |l#2@@55|))) |l#3@@53|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2982| :pattern ( (MapType6Select (|lambda#75| |l#0@@81| |l#1@@56| |l#2@@55| |l#3@@53|) $o@@103 $f@@59)) )))
(assert (forall ((arg0@@576 T@U) (arg1@@318 T@U) (arg2@@211 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#76| arg0@@576 arg1@@318 arg2@@211 arg3@@149)) (MapType6Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@576 arg1@@318 arg2@@211 arg3@@149)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@57| T@U) (|l#2@@56| T@U) (|l#3@@54| Bool) ($o@@104 T@U) ($f@@60 T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type |l#0@@82|) refType) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@60) (FieldType alpha@@67))) (= (U_2_bool (MapType6Select (|lambda#76| |l#0@@82| |l#1@@57| |l#2@@56| |l#3@@54|) $o@@104 $f@@60))  (=> (and (not (= $o@@104 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@104) |l#2@@56|))) |l#3@@54|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2983| :pattern ( (MapType6Select (|lambda#76| |l#0@@82| |l#1@@57| |l#2@@56| |l#3@@54|) $o@@104 $f@@60)) )))
(assert (forall ((arg0@@577 T@U) (arg1@@319 T@U) (arg2@@212 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#77| arg0@@577 arg1@@319 arg2@@212 arg3@@150)) (MapType6Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@577 arg1@@319 arg2@@212 arg3@@150)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@58| T@U) (|l#2@@57| T@U) (|l#3@@55| Bool) ($o@@105 T@U) ($f@@61 T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type |l#0@@83|) refType) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@61) (FieldType alpha@@68))) (= (U_2_bool (MapType6Select (|lambda#77| |l#0@@83| |l#1@@58| |l#2@@57| |l#3@@55|) $o@@105 $f@@61))  (=> (and (not (= $o@@105 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@105) |l#2@@57|))) |l#3@@55|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2984| :pattern ( (MapType6Select (|lambda#77| |l#0@@83| |l#1@@58| |l#2@@57| |l#3@@55|) $o@@105 $f@@61)) )))
(assert (forall ((arg0@@578 T@U) (arg1@@320 T@U) (arg2@@213 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#78| arg0@@578 arg1@@320 arg2@@213 arg3@@151)) (MapType6Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@578 arg1@@320 arg2@@213 arg3@@151)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@59| T@U) (|l#2@@58| T@U) (|l#3@@56| Bool) ($o@@106 T@U) ($f@@62 T@U) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type |l#0@@84|) refType) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@62) (FieldType alpha@@69))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@84| |l#1@@59| |l#2@@58| |l#3@@56|) $o@@106 $f@@62))  (=> (and (not (= $o@@106 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@106) |l#2@@58|))) |l#3@@56|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2985| :pattern ( (MapType6Select (|lambda#78| |l#0@@84| |l#1@@59| |l#2@@58| |l#3@@56|) $o@@106 $f@@62)) )))
(assert (forall ((arg0@@579 T@U) (arg1@@321 T@U) (arg2@@214 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#79| arg0@@579 arg1@@321 arg2@@214 arg3@@152)) (MapType6Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@579 arg1@@321 arg2@@214 arg3@@152)) )))
(assert (forall ((|l#0@@85| T@U) (|l#1@@60| T@U) (|l#2@@59| T@U) (|l#3@@57| Bool) ($o@@107 T@U) ($f@@63 T@U) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type |l#0@@85|) refType) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@63) (FieldType alpha@@70))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@85| |l#1@@60| |l#2@@59| |l#3@@57|) $o@@107 $f@@63))  (=> (and (not (= $o@@107 |l#0@@85|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@107) |l#2@@59|))) |l#3@@57|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2986| :pattern ( (MapType6Select (|lambda#79| |l#0@@85| |l#1@@60| |l#2@@59| |l#3@@57|) $o@@107 $f@@63)) )))
(assert (forall ((arg0@@580 T@U) (arg1@@322 T@U) (arg2@@215 Int) ) (! (= (type (|lambda#80| arg0@@580 arg1@@322 arg2@@215)) (MapType0Type BoxType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@580 arg1@@322 arg2@@215)) )))
(assert (forall ((|l#0@@86| T@U) (|l#1@@61| T@U) (|l#2@@60| Int) (|$w#0| T@U) ) (!  (=> (and (and (= (type |l#0@@86|) TyType) (= (type |l#1@@61|) (MapType0Type BoxType boolType))) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#80| |l#0@@86| |l#1@@61| |l#2@@60|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@86|) (and (U_2_bool (MapType0Select |l#1@@61| |$w#0|)) (not (= (U_2_int ($Unbox intType |$w#0|)) |l#2@@60|)))))) :qid |NativeTypessdfy.12:32| :skolemid |2987| :pattern ( (MapType0Select (|lambda#80| |l#0@@86| |l#1@@61| |l#2@@60|) |$w#0|)) )))
(assert (forall ((|l#0@@87| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (= (type |l#0@@87|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#81| |l#0@@87|) |$w#0@@0|) (MapType0Select |l#0@@87| |$w#0@@0|))) :qid |LinearContentMutableMapidfy.713:75| :skolemid |2988| :pattern ( (MapType0Select (|lambda#81| |l#0@@87|) |$w#0@@0|)) )))
(assert (forall ((arg0@@581 T@U) (arg1@@323 T@U) (arg2@@216 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#86| arg0@@581 arg1@@323 arg2@@216 arg3@@153)) (MapType6Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@581 arg1@@323 arg2@@216 arg3@@153)) )))
(assert (forall ((|l#0@@88| T@U) (|l#1@@62| T@U) (|l#2@@61| T@U) (|l#3@@58| Bool) ($o@@108 T@U) ($f@@64 T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type |l#0@@88|) refType) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@64) (FieldType alpha@@71))) (= (U_2_bool (MapType6Select (|lambda#86| |l#0@@88| |l#1@@62| |l#2@@61| |l#3@@58|) $o@@108 $f@@64))  (=> (and (not (= $o@@108 |l#0@@88|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@108) |l#2@@61|))) |l#3@@58|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2989| :pattern ( (MapType6Select (|lambda#86| |l#0@@88| |l#1@@62| |l#2@@61| |l#3@@58|) $o@@108 $f@@64)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@324 T@U) (arg2@@217 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#89| arg0@@582 arg1@@324 arg2@@217 arg3@@154)) (MapType6Type refType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@582 arg1@@324 arg2@@217 arg3@@154)) )))
(assert (forall ((|l#0@@89| T@U) (|l#1@@63| T@U) (|l#2@@62| T@U) (|l#3@@59| Bool) ($o@@109 T@U) ($f@@65 T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type |l#0@@89|) refType) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@65) (FieldType alpha@@72))) (= (U_2_bool (MapType6Select (|lambda#89| |l#0@@89| |l#1@@63| |l#2@@62| |l#3@@59|) $o@@109 $f@@65))  (=> (and (not (= $o@@109 |l#0@@89|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@109) |l#2@@62|))) |l#3@@59|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2990| :pattern ( (MapType6Select (|lambda#89| |l#0@@89| |l#1@@63| |l#2@@62| |l#3@@59|) $o@@109 $f@@65)) )))
(assert (forall ((arg0@@583 T@U) (arg1@@325 T@U) (arg2@@218 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#90| arg0@@583 arg1@@325 arg2@@218 arg3@@155)) (MapType6Type refType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@583 arg1@@325 arg2@@218 arg3@@155)) )))
(assert (forall ((|l#0@@90| T@U) (|l#1@@64| T@U) (|l#2@@63| T@U) (|l#3@@60| Bool) ($o@@110 T@U) ($f@@66 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type |l#0@@90|) refType) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@66) (FieldType alpha@@73))) (= (U_2_bool (MapType6Select (|lambda#90| |l#0@@90| |l#1@@64| |l#2@@63| |l#3@@60|) $o@@110 $f@@66))  (=> (and (not (= $o@@110 |l#0@@90|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@110) |l#2@@63|))) |l#3@@60|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2991| :pattern ( (MapType6Select (|lambda#90| |l#0@@90| |l#1@@64| |l#2@@63| |l#3@@60|) $o@@110 $f@@66)) )))
(assert (forall ((|l#0@@91| T@U) (|l#1@@65| T@U) (|l#2@@64| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@91|) TyType) (= (type |l#1@@65|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#91| |l#0@@91| |l#1@@65| |l#2@@64|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@91|) (> (U_2_int (MapType0Select |l#1@@65| |$y#0|)) |l#2@@64|)))) :qid |unknown.0:0| :skolemid |2992| :pattern ( (MapType0Select (|lambda#91| |l#0@@91| |l#1@@65| |l#2@@64|) |$y#0|)) )))
(assert (forall ((|l#0@@92| T@U) (|l#1@@66| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@92|) TyType) (= (type |l#1@@66|) (MapType0Type BoxType boolType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#93| |l#0@@92| |l#1@@66|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@92|) (U_2_bool (MapType0Select |l#1@@66| |$y#0@@0|))))) :qid |unknown.0:0| :skolemid |2993| :pattern ( (MapType0Select (|lambda#93| |l#0@@92| |l#1@@66|) |$y#0@@0|)) )))
(assert (forall ((|l#0@@93| T@U) (|l#1@@67| T@U) (|l#2@@65| T@U) (|$w#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@93|) TyType) (= (type |l#1@@67|) (MapType0Type BoxType boolType))) (= (type |l#2@@65|) BoxType)) (= (type |$w#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#102| |l#0@@93| |l#1@@67| |l#2@@65|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@93|) (and (U_2_bool (MapType0Select |l#1@@67| |$w#0@@1|)) (not (= |$w#0@@1| |l#2@@65|)))))) :qid |unknown.0:0| :skolemid |2994| :pattern ( (MapType0Select (|lambda#102| |l#0@@93| |l#1@@67| |l#2@@65|) |$w#0@@1|)) )))
(assert (forall ((|l#0@@94| T@U) (|l#1@@68| T@U) (|l#2@@66| T@U) (|$w#0@@2| T@U) ) (!  (=> (and (and (and (= (type |l#0@@94|) TyType) (= (type |l#1@@68|) (MapType0Type BoxType boolType))) (= (type |l#2@@66|) (MapType0Type BoxType boolType))) (= (type |$w#0@@2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#108| |l#0@@94| |l#1@@68| |l#2@@66|) |$w#0@@2|))  (and ($IsBox |$w#0@@2| |l#0@@94|) (and (U_2_bool (MapType0Select |l#1@@68| |$w#0@@2|)) (not (U_2_bool (MapType0Select |l#2@@66| |$w#0@@2|))))))) :qid |unknown.0:0| :skolemid |2995| :pattern ( (MapType0Select (|lambda#108| |l#0@@94| |l#1@@68| |l#2@@66|) |$w#0@@2|)) )))
(assert (forall ((|l#0@@95| T@U) (|l#1@@69| T@U) (|l#2@@67| T@U) (|$w#0@@3| T@U) ) (!  (=> (and (and (and (= (type |l#0@@95|) TyType) (= (type |l#1@@69|) (MapType0Type BoxType boolType))) (= (type |l#2@@67|) (MapType0Type BoxType boolType))) (= (type |$w#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#120| |l#0@@95| |l#1@@69| |l#2@@67|) |$w#0@@3|))  (and ($IsBox |$w#0@@3| |l#0@@95|) (and (U_2_bool (MapType0Select |l#1@@69| |$w#0@@3|)) (U_2_bool (MapType0Select |l#2@@67| |$w#0@@3|)))))) :qid |unknown.0:0| :skolemid |2996| :pattern ( (MapType0Select (|lambda#120| |l#0@@95| |l#1@@69| |l#2@@67|) |$w#0@@3|)) )))
(assert (forall ((|l#0@@96| T@U) (|l#1@@70| T@U) (|l#2@@68| T@U) (|$w#0@@4| T@U) ) (!  (=> (and (and (and (= (type |l#0@@96|) (MapType0Type BoxType boolType)) (= (type |l#1@@70|) (MapType0Type BoxType BoxType))) (= (type |l#2@@68|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@4|) BoxType)) (= (MapType0Select (|lambda#135| |l#0@@96| |l#1@@70| |l#2@@68|) |$w#0@@4|) (ite (U_2_bool (MapType0Select |l#0@@96| |$w#0@@4|)) (MapType0Select |l#1@@70| |$w#0@@4|) (MapType0Select |l#2@@68| |$w#0@@4|)))) :qid |Mapsidfy.115:52| :skolemid |2997| :pattern ( (MapType0Select (|lambda#135| |l#0@@96| |l#1@@70| |l#2@@68|) |$w#0@@4|)) )))
(assert (forall ((|l#0@@97| T@U) (|l#1@@71| T@U) (|l#2@@69| T@U) (|l#3@@61| T@U) (|l#4| T@U) (|$w#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@97|) (MapType0Type BoxType boolType)) (= (type |l#1@@71|) (MapType0Type BoxType BoxType))) (= (type |l#2@@69|) (MapType0Type BoxType boolType))) (= (type |l#3@@61|) (MapType0Type BoxType BoxType))) (= (type |l#4|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@5|) BoxType)) (= (MapType0Select (|lambda#155| |l#0@@97| |l#1@@71| |l#2@@69| |l#3@@61| |l#4|) |$w#0@@5|) (ite (U_2_bool (MapType0Select |l#0@@97| |$w#0@@5|)) (MapType0Select |l#1@@71| |$w#0@@5|) (ite (U_2_bool (MapType0Select |l#2@@69| |$w#0@@5|)) (MapType0Select |l#3@@61| |$w#0@@5|) (MapType0Select |l#4| |$w#0@@5|))))) :qid |Mapsidfy.190:9| :skolemid |2998| :pattern ( (MapType0Select (|lambda#155| |l#0@@97| |l#1@@71| |l#2@@69| |l#3@@61| |l#4|) |$w#0@@5|)) )))
(assert (forall ((|l#0@@98| T@U) (|l#1@@72| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0@@2| T@U) ) (!  (=> (and (and (and (= (type |l#0@@98|) TyType) (= (type |l#1@@72|) (SeqType BoxType))) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@2|) BoxType)) (= (MapType2Select (|lambda#162| |l#0@@98| |l#1@@72|) |$l#0#heap#0@@2| |$l#0#i#0@@2|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@98| (|Seq#Index| |l#1@@72| (U_2_int ($Unbox intType |$l#0#i#0@@2|)))))))) :qid |unknown.0:0| :skolemid |2999| :pattern ( (MapType2Select (|lambda#162| |l#0@@98| |l#1@@72|) |$l#0#heap#0@@2| |$l#0#i#0@@2|)) )))
(assert (forall ((|l#0@@99| T@U) (|l#1@@73| Int) (|l#2@@70| Int) (|l#3@@62| T@U) (|l#4@@0| T@U) (|$y#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@99|) TyType) (= (type |l#3@@62|) (SeqType BoxType))) (= (type |l#4@@0|) (SeqType BoxType))) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#172| |l#0@@99| |l#1@@73| |l#2@@70| |l#3@@62| |l#4@@0|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@99|) (and (and (<= |l#1@@73| (U_2_int ($Unbox intType |$y#0@@1|))) (< (U_2_int ($Unbox intType |$y#0@@1|)) |l#2@@70|)) (or (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@62| (U_2_int ($Unbox intType |$y#0@@1|))))) (LinearMutableMapBase.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@0| (U_2_int ($Unbox intType |$y#0@@1|)))))))))) :qid |DafnyPreludebpl.22:1| :skolemid |3000| :pattern ( (MapType0Select (|lambda#172| |l#0@@99| |l#1@@73| |l#2@@70| |l#3@@62| |l#4@@0|) |$y#0@@1|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun LinearContentMutableMap._default.FixedSizeInsertEntry$V () T@U)
(declare-fun |self#0@4| () T@U)
(declare-fun |explainedKey#0@0| () Int)
(declare-fun |old_self#0| () T@U)
(declare-fun |oldSkips#0@0| () Int)
(declare-fun |##litems#1@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |##elements#1@0| () T@U)
(declare-fun |oldSkips#1@0| () Int)
(declare-fun |##litems#0@0| () T@U)
(declare-fun |##elements#0@0| () T@U)
(declare-fun |entry#0| () T@U)
(declare-fun |##litems#2_0@0| () T@U)
(declare-fun |call7formal@skips#0@0| () Int)
(declare-fun |##elements#2_0@0| () T@U)
(declare-fun |##key#2_0@0| () Int)
(declare-fun |item#0@0| () T@U)
(declare-fun |##litems#3_0_0@0| () T@U)
(declare-fun |call5formal@slotIdx#0@0| () Int)
(declare-fun |##elements#3_0_0@0| () T@U)
(declare-fun |slot#0@0| () T@U)
(declare-fun |##slot2#3_0_0@0| () T@U)
(declare-fun |##s#3_0_0@0| () T@U)
(declare-fun |##elementsLength#3_0_0@0| () Int)
(declare-fun |##slot2#3_0_1@0| () T@U)
(declare-fun |##litems#3@0| () T@U)
(declare-fun |##litems#2@0| () T@U)
(declare-fun |##s#3@0| () T@U)
(declare-fun |##elementsLength#0@0| () Int)
(declare-fun |item#3@0| () T@U)
(declare-fun |##litems#4_0_0@0| () T@U)
(declare-fun |##elements#4_0_0@0| () T@U)
(declare-fun |slot#2@0| () T@U)
(declare-fun |##slot2#4_0_0@0| () T@U)
(declare-fun |##s#4_0_0@0| () T@U)
(declare-fun |##elementsLength#4_0_0@0| () Int)
(declare-fun |##slot2#4_0_1@0| () T@U)
(declare-fun |##s#5@0| () T@U)
(declare-fun |##i#0@0| () Int)
(declare-fun |##litems#4@0| () T@U)
(declare-fun |##s#4@0| () T@U)
(declare-fun |##elementsLength#1@0| () Int)
(declare-fun |replaced#0@3| () T@U)
(declare-fun |$rhs##3@0| () T@U)
(declare-fun |_v0#0@0| () Int)
(declare-fun |value#0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |let#5#0#0| () T@U)
(declare-fun |replaced#0@2| () T@U)
(declare-fun |self#0@2| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |replaced#0@1| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |newtype$check#0_0@0| () Int)
(declare-fun |newtype$check#0_1@0| () Int)
(declare-fun |_inout_tmp_0#0_0@0| () Int)
(declare-fun |dt_update_tmp#3#Z#0_0@0| () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |dt_update#count#0#Z#0_0@0| () Int)
(declare-fun |let#0_1#0#0| () Int)
(declare-fun |self#0@3| () T@U)
(declare-fun |replaced#0@0| () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.lshift () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.rshift () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.bitnot () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.bitxor () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.hash64 () T@U)
(declare-fun StartFuel_LinearMutableMapBase._default.SomeSkipCountExplainsKey () T@U)
(declare-fun StartFuelAssert_LinearMutableMapBase._default.SomeSkipCountExplainsKey () T@U)
(declare-fun StartFuel_LinearContentMutableMap._default.getEmptyWitness () T@U)
(declare-fun StartFuelAssert_LinearContentMutableMap._default.getEmptyWitness () T@U)
(declare-fun $Heap@@49 () T@U)
(declare-fun |slotIdx#0@0| () Int)
(declare-fun |probeStartSlotIdx#0@0| () Int)
(declare-fun |probeSkips#0@0| () Int)
(declare-fun |key##0@0| () Int)
(declare-fun |call5formal@slotIdx#0| () Int)
(declare-fun |call6formal@startSlotIdx#0| () Int)
(declare-fun |call7formal@skips#0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |call6formal@startSlotIdx#0@0| () Int)
(declare-fun |contents#0@0| () T@U)
(declare-fun |dt_update_tmp#0#Z#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |self#0@0| () T@U)
(declare-fun |old_s##0@0| () T@U)
(declare-fun |call5formal@a#0| () T@U)
(declare-fun call0formal@LinearSequence_i._default.lseq_take_inout$A () T@U)
(declare-fun |call6formal@s#0| () T@U)
(declare-fun call0formal@LinearSequence_i._default.lseq_take_inout$A@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |call5formal@a#0@0| () T@U)
(declare-fun |call6formal@s#0@0| () T@U)
(declare-fun |dt_update_tmp#1#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |dt_update#storage#0#Z#0@0| () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |self#0@1| () T@U)
(declare-fun |defass#_inout_tmp_3#0| () Bool)
(declare-fun |_inout_tmp_3#0@0| () T@U)
(declare-fun |old_s1##0@0| () T@U)
(declare-fun |call6formal@s1#0| () T@U)
(declare-fun call0formal@LinearSequence_i._default.lseq_give_inout$A () T@U)
(declare-fun call0formal@LinearSequence_i._default.lseq_give_inout$A@0 () T@U)
(declare-fun |call3formal@a#0@0| () T@U)
(declare-fun |call6formal@s1#0@0| () T@U)
(declare-fun |dt_update_tmp#2#Z#0@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |dt_update#storage#1#Z#0@0| () T@U)
(declare-fun |let#4#0#0| () T@U)
(declare-fun |replaced#0| () T@U)
(declare-fun |defass#self#0| () Bool)
(declare-fun |self#0@@37| () T@U)
(declare-fun |slotIdx#0| () Int)
(declare-fun |probeStartSlotIdx#0| () Int)
(declare-fun |probeSkips#0| () Int)
(declare-fun |$rhs##0| () Int)
(declare-fun |$rhs##1| () Int)
(declare-fun |$rhs##2| () Int)
(declare-fun |contents#0@@27| () T@U)
(declare-fun |_inout_tmp_1#0| () T@U)
(declare-fun |olditem#0| () T@U)
(declare-fun |_inout_tmp_2#0| () T@U)
(declare-fun |$rhs##3| () T@U)
(declare-fun |$rhs##4| () T@U)
(declare-fun |_inout_tmp_3#0| () T@U)
(declare-fun |$rhs##5| () T@U)
(declare-fun |_inout_tmp_0#0_0| () Int)
(declare-fun |oldSkips#0| () Int)
(declare-fun |item#0@@7| () T@U)
(declare-fun |item#3| () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type LinearContentMutableMap._default.FixedSizeInsertEntry$V) TyType) (= (type |self#0@4|) DatatypeTypeType)) (= (type |old_self#0|) DatatypeTypeType)) (= (type |entry#0|) DatatypeTypeType)) (= (type |replaced#0@3|) DatatypeTypeType)) (= (type |slot#2@0|) DatatypeTypeType)) (= (type |item#3@0|) DatatypeTypeType)) (= (type |##litems#4_0_0@0|) BoxType)) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type |##elements#4_0_0@0|) (SeqType BoxType))) (= (type |##slot2#4_0_0@0|) DatatypeTypeType)) (= (type |##s#4_0_0@0|) BoxType)) (= (type |##slot2#4_0_1@0|) DatatypeTypeType)) (= (type |##s#5@0|) BoxType)) (= (type |##litems#4@0|) BoxType)) (= (type |##s#4@0|) BoxType)) (= (type |slot#0@0|) DatatypeTypeType)) (= (type |item#0@0|) DatatypeTypeType)) (= (type |##litems#3_0_0@0|) BoxType)) (= (type |##elements#3_0_0@0|) (SeqType BoxType))) (= (type |##slot2#3_0_0@0|) DatatypeTypeType)) (= (type |##s#3_0_0@0|) BoxType)) (= (type |##slot2#3_0_1@0|) DatatypeTypeType)) (= (type |##litems#3@0|) BoxType)) (= (type |##litems#2@0|) BoxType)) (= (type |##s#3@0|) BoxType)) (= (type |##litems#2_0@0|) BoxType)) (= (type |##elements#2_0@0|) (SeqType BoxType))) (= (type |##litems#1@0|) BoxType)) (= (type |##elements#1@0|) (SeqType BoxType))) (= (type |##litems#0@0|) BoxType)) (= (type |##elements#0@0|) (SeqType BoxType))) (= (type |$rhs##3@0|) DatatypeTypeType)) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |self#0@2|) DatatypeTypeType)) (= (type |dt_update_tmp#3#Z#0_0@0|) DatatypeTypeType)) (= (type |let#0_0#0#0|) DatatypeTypeType)) (= (type |self#0@3|) DatatypeTypeType)) (= (type |replaced#0@0|) DatatypeTypeType)) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |replaced#0@1|) DatatypeTypeType)) (= (type |value#0@0|) BoxType)) (= (type |let#5#0#0|) DatatypeTypeType)) (= (type |replaced#0@2|) DatatypeTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.lshift) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.rshift) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.bitnot) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.bitxor) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.hash64) LayerTypeType)) (= (type StartFuel_LinearMutableMapBase._default.SomeSkipCountExplainsKey) LayerTypeType)) (= (type StartFuelAssert_LinearMutableMapBase._default.SomeSkipCountExplainsKey) LayerTypeType)) (= (type StartFuel_LinearContentMutableMap._default.getEmptyWitness) LayerTypeType)) (= (type StartFuelAssert_LinearContentMutableMap._default.getEmptyWitness) LayerTypeType)) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |contents#0@0|) (MapType BoxType BoxType))) (= (type |dt_update_tmp#0#Z#0@0|) DatatypeTypeType)) (= (type |let#0#0#0|) DatatypeTypeType)) (= (type |self#0@0|) DatatypeTypeType)) (= (type |old_s##0@0|) BoxType)) (= (type |call5formal@a#0|) BoxType)) (= (type call0formal@LinearSequence_i._default.lseq_take_inout$A) TyType)) (= (type |call6formal@s#0|) BoxType)) (= (type call0formal@LinearSequence_i._default.lseq_take_inout$A@0) TyType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |call5formal@a#0@0|) BoxType)) (= (type |call6formal@s#0@0|) BoxType)) (= (type |dt_update_tmp#1#Z#0@0|) DatatypeTypeType)) (= (type |let#1#0#0|) DatatypeTypeType)) (= (type |dt_update#storage#0#Z#0@0|) BoxType)) (= (type |let#2#0#0|) BoxType)) (= (type |self#0@1|) DatatypeTypeType)) (= (type |_inout_tmp_3#0@0|) BoxType)) (= (type |old_s1##0@0|) BoxType)) (= (type |call6formal@s1#0|) BoxType)) (= (type call0formal@LinearSequence_i._default.lseq_give_inout$A) TyType)) (= (type call0formal@LinearSequence_i._default.lseq_give_inout$A@0) TyType)) (= (type |call3formal@a#0@0|) BoxType)) (= (type |call6formal@s1#0@0|) BoxType)) (= (type |dt_update_tmp#2#Z#0@0|) DatatypeTypeType)) (= (type |let#3#0#0|) DatatypeTypeType)) (= (type |dt_update#storage#1#Z#0@0|) BoxType)) (= (type |let#4#0#0|) BoxType)) (= (type |replaced#0|) DatatypeTypeType)) (= (type |self#0@@37|) DatatypeTypeType)) (= (type |contents#0@@27|) (MapType BoxType BoxType))) (= (type |_inout_tmp_1#0|) (MapType BoxType BoxType))) (= (type |olditem#0|) DatatypeTypeType)) (= (type |_inout_tmp_2#0|) BoxType)) (= (type |$rhs##3|) DatatypeTypeType)) (= (type |$rhs##4|) BoxType)) (= (type |_inout_tmp_3#0|) BoxType)) (= (type |$rhs##5|) BoxType)) (= (type |item#0@@7|) DatatypeTypeType)) (= (type |item#3|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$LinearContentMutableMap.__default.FixedSizeInsertEntry)
(assert (not (=> (= (ControlFlow 0 0) 498335) (let ((anon11_correct  (=> (= (ControlFlow 0 96075) (- 0 508583)) (exists ((|skips#0@@8| Int) ) (!  (and (<= (LitInt 0) |skips#0@@8|) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |skips#0@@8| |explainedKey#0@0|)) :qid |LinearContentMutableMapidfy.307:20| :skolemid |1526| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |skips#0@@8| |explainedKey#0@0|)) ))))) (let ((anon10_correct  (and (=> (= (ControlFlow 0 96073) (- 0 507613)) (or (and ($Is (int_2_U (LitInt 0)) Tclass._System.nat) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LitInt 0) |explainedKey#0@0|)) (or (and ($Is (int_2_U (LitInt 0)) Tclass._System.nat) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LitInt 0) |explainedKey#0@0|)) (exists ((|$as#oldSkips0#0| Int) ) (!  (and (<= (LitInt 0) |$as#oldSkips0#0|) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |$as#oldSkips0#0| |explainedKey#0@0|)) :qid |LinearContentMutableMapidfy.312:13| :skolemid |1522| ))))) (=> (or (and ($Is (int_2_U (LitInt 0)) Tclass._System.nat) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LitInt 0) |explainedKey#0@0|)) (or (and ($Is (int_2_U (LitInt 0)) Tclass._System.nat) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LitInt 0) |explainedKey#0@0|)) (exists ((|$as#oldSkips0#0@@0| Int) ) (!  (and (<= (LitInt 0) |$as#oldSkips0#0@@0|) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |$as#oldSkips0#0@@0| |explainedKey#0@0|)) :qid |LinearContentMutableMapidfy.312:13| :skolemid |1522| )))) (=> (and (<= (LitInt 0) |oldSkips#0@0|) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |oldSkips#0@0| |explainedKey#0@0|)) (and (=> (= (ControlFlow 0 96073) (- 0 507725)) true) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##litems#1@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##litems#1@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (and (= |##elements#1@0| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) ($IsAlloc |##elements#1@0| (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and ($IsAlloc (int_2_U |oldSkips#0@0|) Tclass._System.nat $Heap@5) ($IsAlloc (int_2_U |explainedKey#0@0|) Tclass.NativeTypes.uint64 $Heap@5)))) (and (=> (= (ControlFlow 0 96073) (- 0 507794)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (U_2_bool (Lit (bool_2_U true)))))) (and (=> (= (ControlFlow 0 96073) (- 0 507812)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (< 0 (|Seq#Length| |##elements#1@0|))))) (and (=> (= (ControlFlow 0 96073) (- 0 507833)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#1@0|) (< (|Seq#Length| |##elements#1@0|) 18446744073709551616)))) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|)) (and (=> (= (ControlFlow 0 96073) (- 0 507894)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (let ((|foundSlot#0@@1| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0|))) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |foundSlot#0@@1|) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |foundSlot#0@@1|) (< (LinearMutableMapBase.Slot.slot |foundSlot#0@@1|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))))))) (and (=> (= (ControlFlow 0 96073) (- 0 508001)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (=> (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0| |explainedKey#0@0|) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 96073) (- 0 508121)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (=> (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0| |explainedKey#0@0|) (forall ((|offset#0@@1| Int) ) (!  (=> (<= (LitInt 0) |offset#0@@1|) (=> (< |offset#0@@1| |oldSkips#0@0|) (LinearMutableMapBase.__default.FilledWithOtherKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |offset#0@@1|) |explainedKey#0@0|))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |1523| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |offset#0@@1|)) ))))))) (and (=> (= (ControlFlow 0 96073) (- 0 508332)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (let ((|foundSlot#0@@2| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0|))) (=> (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@2| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.FilledWithKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@2| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@2|) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@2|)))))))) (and (=> (= (ControlFlow 0 96073) (- 0 508454)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (let ((|foundSlot#0@@3| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |explainedKey#0@0|) |oldSkips#0@0|))) (=> (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@3| |explainedKey#0@0|) (or (LinearMutableMapBase.__default.FilledWithKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#0@@3| |explainedKey#0@0|) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |foundSlot#0@@3|)))) |explainedKey#0@0|))))))) (=> (and (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |oldSkips#0@0| |explainedKey#0@0|) (= (ControlFlow 0 96073) 96075)) anon11_correct)))))))))))))))))) (let ((anon38_Else_correct  (=> (and (< |oldSkips#1@0| (LitInt 0)) (= (ControlFlow 0 96071) 96073)) anon10_correct))) (let ((anon38_Then_correct  (=> (<= (LitInt 0) |oldSkips#1@0|) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (= |##litems#0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (and ($IsAllocBox |##litems#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))) (and (and (= |##elements#0@0| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) ($IsAlloc |##elements#0@0| (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and ($IsAlloc (int_2_U |oldSkips#1@0|) Tclass._System.nat $Heap@5) ($IsAlloc (int_2_U |explainedKey#0@0|) Tclass.NativeTypes.uint64 $Heap@5)))) (and (=> (= (ControlFlow 0 96069) (- 0 507502)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (U_2_bool (Lit (bool_2_U true)))))) (and (=> (= (ControlFlow 0 96069) (- 0 507520)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (< 0 (|Seq#Length| |##elements#0@0|))))) (and (=> (= (ControlFlow 0 96069) (- 0 507541)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#0@0|) (< (|Seq#Length| |##elements#0@0|) 18446744073709551616)))) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |oldSkips#1@0| |explainedKey#0@0|) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |oldSkips#1@0| |explainedKey#0@0|)) (= (ControlFlow 0 96069) 96073)) anon10_correct))))))))) (let ((anon37_Else_correct  (=> (not (= (LinearContentMutableMap.lItem.key |entry#0|) |explainedKey#0@0|)) (and (=> (= (ControlFlow 0 96067) 96069) anon38_Then_correct) (=> (= (ControlFlow 0 96067) 96071) anon38_Else_correct))))) (let ((anon37_Then_correct  (=> (= (LinearContentMutableMap.lItem.key |entry#0|) |explainedKey#0@0|) (and (=> (= (ControlFlow 0 96060) (- 0 506426)) true) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##litems#2_0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##litems#2_0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 96060) (- 0 506458)) (<= (LitInt 0) |call7formal@skips#0@0|)) (=> (<= (LitInt 0) |call7formal@skips#0@0|) (and (=> (= (ControlFlow 0 96060) (- 0 506465)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (=> (= |##elements#2_0@0| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (=> (and (and ($IsAlloc |##elements#2_0@0| (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) ($IsAlloc (int_2_U |call7formal@skips#0@0|) Tclass._System.nat $Heap@5)) (and (= |##key#2_0@0| (LinearContentMutableMap.lItem.key |entry#0|)) ($IsAlloc (int_2_U |##key#2_0@0|) Tclass.NativeTypes.uint64 $Heap@5))) (and (=> (= (ControlFlow 0 96060) (- 0 506522)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (U_2_bool (Lit (bool_2_U true)))))) (and (=> (= (ControlFlow 0 96060) (- 0 506540)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (< 0 (|Seq#Length| |##elements#2_0@0|))))) (and (=> (= (ControlFlow 0 96060) (- 0 506561)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#2_0@0|) (< (|Seq#Length| |##elements#2_0@0|) 18446744073709551616)))) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|))) (and (=> (= (ControlFlow 0 96060) (- 0 506628)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (let ((|foundSlot#2_0| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0|))) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |foundSlot#2_0|) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |foundSlot#2_0|) (< (LinearMutableMapBase.Slot.slot |foundSlot#2_0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))))))) (and (=> (= (ControlFlow 0 96060) (- 0 506744)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (=> (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (U_2_bool (Lit (bool_2_U true)))))))) (and (=> (= (ControlFlow 0 96060) (- 0 506885)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (=> (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (forall ((|offset#2_0| Int) ) (!  (=> (<= (LitInt 0) |offset#2_0|) (=> (< |offset#2_0| |call7formal@skips#0@0|) (LinearMutableMapBase.__default.FilledWithOtherKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |offset#2_0|) (LinearContentMutableMap.lItem.key |entry#0|)))) :qid |LinearMutableMapBaseidfy.155:16| :skolemid |1519| :pattern ( (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |offset#2_0|)) ))))))) (and (=> (= (ControlFlow 0 96060) (- 0 507126)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (let ((|foundSlot#2_0@@0| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0|))) (=> (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.FilledWithKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@0|) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@0|)))))))) (and (=> (= (ControlFlow 0 96060) (- 0 507263)) (=> (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (let ((|foundSlot#2_0@@1| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearContentMutableMap.lItem.key |entry#0|)) |call7formal@skips#0@0|))) (=> (|LinearMutableMapBase.__default.FilledWithKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@1| (LinearContentMutableMap.lItem.key |entry#0|)) (or (LinearMutableMapBase.__default.FilledWithKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |foundSlot#2_0@@1| (LinearContentMutableMap.lItem.key |entry#0|)) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |foundSlot#2_0@@1|)))) (LinearContentMutableMap.lItem.key |entry#0|)))))))) (=> (and (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |call7formal@skips#0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (= (ControlFlow 0 96060) 96075)) anon11_correct)))))))))))))))))))))) (let ((anon36_Then_correct  (=> (and (<= (LitInt 0) |explainedKey#0@0|) (< |explainedKey#0@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 96058) (- 0 503489)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (=> (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box (int_2_U |explainedKey#0@0|))))) (and (=> (= (ControlFlow 0 96058) (- 0 503506)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (and (=> (= (ControlFlow 0 96058) 96060) anon37_Then_correct) (=> (= (ControlFlow 0 96058) 96067) anon37_Else_correct)))))))))) (let ((anon42_Then_correct  (=> (= (LinearMutableMapBase.Item.key |item#0@0|) (LinearContentMutableMap.lItem.key |entry#0|)) (and (=> (= (ControlFlow 0 96105) (- 0 505555)) true) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##litems#3_0_0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##litems#3_0_0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 96105) (- 0 505587)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (= |##elements#3_0_0@0| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (=> (and (and ($IsAlloc |##elements#3_0_0@0| (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) ($IsAlloc |slot#0@0| Tclass.LinearMutableMapBase.Slot $Heap@5)) (and (= |##slot2#3_0_0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) ($IsAlloc |##slot2#3_0_0@0| Tclass.LinearMutableMapBase.Slot $Heap@5))) (and (=> (= (ControlFlow 0 96105) (- 0 505640)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (U_2_bool (Lit (bool_2_U true)))))) (and (=> (= (ControlFlow 0 96105) (- 0 505658)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (< 0 (|Seq#Length| |##elements#3_0_0@0|))))) (and (=> (= (ControlFlow 0 96105) (- 0 505679)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#3_0_0@0|) (< (|Seq#Length| |##elements#3_0_0@0|) 18446744073709551616)))) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96105) (- 0 505744)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |slot#0@0|) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |slot#0@0|) (< (LinearMutableMapBase.Slot.slot |slot#0@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))))))) (and (=> (= (ControlFlow 0 96105) (- 0 505820)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (< (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))))))) (and (=> (= (ControlFlow 0 96105) (- 0 505902)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|))))) (and (=> (= (ControlFlow 0 96105) (- 0 505962)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)))))) (and (=> (= (ControlFlow 0 96105) (- 0 506026)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#0@0|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))))))))) (=> (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (and (=> (= (ControlFlow 0 96105) (- 0 506115)) true) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##s#3_0_0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##s#3_0_0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 96105) (- 0 506149)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (= |##elementsLength#3_0_0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (=> (and (and ($IsAlloc (int_2_U |##elementsLength#3_0_0@0|) Tclass._System.nat $Heap@5) ($IsAlloc |slot#0@0| Tclass.LinearMutableMapBase.Slot $Heap@5)) (and (= |##slot2#3_0_1@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) ($IsAlloc |##slot2#3_0_1@0| Tclass.LinearMutableMapBase.Slot $Heap@5))) (and (=> (= (ControlFlow 0 96105) (- 0 506200)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| |##elementsLength#3_0_0@0| |slot#0@0|) (or (LinearMutableMapBase.__default.ValidSlot |##elementsLength#3_0_0@0| |slot#0@0|) (< (LinearMutableMapBase.Slot.slot |slot#0@0|) |##elementsLength#3_0_0@0|)))) (and (=> (= (ControlFlow 0 96105) (- 0 506218)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| |##elementsLength#3_0_0@0| |##slot2#3_0_1@0|) (or (LinearMutableMapBase.__default.ValidSlot |##elementsLength#3_0_0@0| |##slot2#3_0_1@0|) (< (LinearMutableMapBase.Slot.slot |##slot2#3_0_1@0|) |##elementsLength#3_0_0@0|)))) (=> (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96105) (- 0 506282)) (=> (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SameSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (|LinearMutableMapBase.Slot#Equal| |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))))) (=> (and (LinearMutableMapBase.__default.SameSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (ControlFlow 0 96105) (- 0 506339))) false)))))))))))))))))))))))))))))))) (let ((anon21_correct  (and (=> (= (ControlFlow 0 96111) (- 0 506350)) true) (and (=> (= (ControlFlow 0 96111) (- 0 506352)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (=> (= (ControlFlow 0 96111) (- 0 506374)) (let ((|item#1@@3| ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#0@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#1@@3|))))) (|#Options.Option.Some| (LinearMutableMapBase.Item.value |item#1@@3|)))))))))) (let ((anon42_Else_correct  (=> (and (not (= (LinearMutableMapBase.Item.key |item#0@0|) (LinearContentMutableMap.lItem.key |entry#0|))) (= (ControlFlow 0 96107) 96111)) anon21_correct))) (let ((anon41_Then_correct  (=> (not (|LinearMutableMapBase.Slot#Equal| |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96103) (- 0 505520)) (or (LinearMutableMapBase.Item.Entry_q |item#0@0|) (LinearMutableMapBase.Item.Tombstone_q |item#0@0|))) (=> (or (LinearMutableMapBase.Item.Entry_q |item#0@0|) (LinearMutableMapBase.Item.Tombstone_q |item#0@0|)) (and (=> (= (ControlFlow 0 96103) (- 0 505528)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (and (=> (= (ControlFlow 0 96103) 96105) anon42_Then_correct) (=> (= (ControlFlow 0 96103) 96107) anon42_Else_correct))))))))) (let ((anon41_Else_correct  (=> (and (|LinearMutableMapBase.Slot#Equal| |slot#0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (ControlFlow 0 96109) 96111)) anon21_correct))) (let ((anon16_correct  (=> (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|)) (=> (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.Slot.Slot_q |slot#0@0|)))) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#0@0|)))))) (and (=> (= (ControlFlow 0 96096) (- 0 505403)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (=> (and (and (= |##litems#3@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) ($IsAllocBox |##litems#3@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.Slot_q |slot#0@0|))) (and (=> (= (ControlFlow 0 96096) (- 0 505436)) (and (<= 0 (LinearMutableMapBase.Slot.slot |slot#0@0|)) (< (LinearMutableMapBase.Slot.slot |slot#0@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))) (=> (and (<= 0 (LinearMutableMapBase.Slot.slot |slot#0@0|)) (< (LinearMutableMapBase.Slot.slot |slot#0@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.Slot.Slot_q |slot#0@0|)) (= |item#0@0| ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#0@0|))))) (and (=> (= (ControlFlow 0 96096) (- 0 505502)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (|$IsA#LinearMutableMapBase.Slot| |slot#0@0|) (and (=> (= (ControlFlow 0 96096) 96103) anon41_Then_correct) (=> (= (ControlFlow 0 96096) 96109) anon41_Else_correct)))))))))))))) (let ((anon40_Else_correct  (=> (and (not (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|)) (= (ControlFlow 0 96090) 96096)) anon16_correct))) (let ((anon40_Then_correct  (=> (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|) (and (=> (= (ControlFlow 0 96088) (- 0 505238)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (=> (and (and (= |##litems#2@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) ($IsAllocBox |##litems#2@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.Slot_q |slot#0@0|))) (and (=> (= (ControlFlow 0 96088) (- 0 505271)) (and (<= 0 (LinearMutableMapBase.Slot.slot |slot#0@0|)) (< (LinearMutableMapBase.Slot.slot |slot#0@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))) (=> (= (ControlFlow 0 96088) 96096) anon16_correct)))))))) (let ((anon39_Then_correct  (=> ($Is |slot#0@0| Tclass.LinearMutableMapBase.Slot) (and (=> (= (ControlFlow 0 96086) (- 0 503618)) true) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##s#3@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##s#3@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (and (= |##elementsLength#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) ($IsAlloc (int_2_U |##elementsLength#0@0|) Tclass._System.nat $Heap@5)) (and ($IsAlloc |slot#0@0| Tclass.LinearMutableMapBase.Slot $Heap@5) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#0@0|)))) (and (=> (= (ControlFlow 0 96086) 96088) anon40_Then_correct) (=> (= (ControlFlow 0 96086) 96090) anon40_Else_correct))))))) (let ((anon46_Then_correct  (=> (= (LinearContentMutableMap.lItem.key |item#3@0|) (LinearContentMutableMap.lItem.key |entry#0|)) (and (=> (= (ControlFlow 0 96141) (- 0 504364)) true) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##litems#4_0_0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##litems#4_0_0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 96141) (- 0 504396)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (= |##elements#4_0_0@0| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (=> (and (and ($IsAlloc |##elements#4_0_0@0| (TSeq (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) ($IsAlloc |slot#2@0| Tclass.LinearMutableMapBase.Slot $Heap@5)) (and (= |##slot2#4_0_0@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) ($IsAlloc |##slot2#4_0_0@0| Tclass.LinearMutableMapBase.Slot $Heap@5))) (and (=> (= (ControlFlow 0 96141) (- 0 504449)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (U_2_bool (Lit (bool_2_U true)))))) (and (=> (= (ControlFlow 0 96141) (- 0 504467)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (< 0 (|Seq#Length| |##elements#4_0_0@0|))))) (and (=> (= (ControlFlow 0 96141) (- 0 504488)) (=> (|LinearMutableMapBase.__default.ValidElements#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (or (LinearMutableMapBase.__default.ValidElements LinearContentMutableMap._default.FixedSizeInsertEntry$V |##elements#4_0_0@0|) (< (|Seq#Length| |##elements#4_0_0@0|) 18446744073709551616)))) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96141) (- 0 504553)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |slot#2@0|) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) |slot#2@0|) (< (LinearMutableMapBase.Slot.slot |slot#2@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))))))) (and (=> (= (ControlFlow 0 96141) (- 0 504629)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (< (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))))))) (and (=> (= (ControlFlow 0 96141) (- 0 504711)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|))))) (and (=> (= (ControlFlow 0 96141) (- 0 504771)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SlotIsEntry LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (LinearMutableMapBase.__default.SlotIsTombstone LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)))))) (and (=> (= (ControlFlow 0 96141) (- 0 504835)) (=> (|LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#2@0|)))) (LinearMutableMapBase.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))))))))) (=> (LinearMutableMapBase.__default.TwoNonEmptyValidSlotsWithSameKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (and (=> (= (ControlFlow 0 96141) (- 0 504924)) true) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##s#4_0_0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##s#4_0_0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 96141) (- 0 504958)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (= |##elementsLength#4_0_0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (=> (and (and ($IsAlloc (int_2_U |##elementsLength#4_0_0@0|) Tclass._System.nat $Heap@5) ($IsAlloc |slot#2@0| Tclass.LinearMutableMapBase.Slot $Heap@5)) (and (= |##slot2#4_0_1@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) ($IsAlloc |##slot2#4_0_1@0| Tclass.LinearMutableMapBase.Slot $Heap@5))) (and (=> (= (ControlFlow 0 96141) (- 0 505009)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| |##elementsLength#4_0_0@0| |slot#2@0|) (or (LinearMutableMapBase.__default.ValidSlot |##elementsLength#4_0_0@0| |slot#2@0|) (< (LinearMutableMapBase.Slot.slot |slot#2@0|) |##elementsLength#4_0_0@0|)))) (and (=> (= (ControlFlow 0 96141) (- 0 505027)) (=> (|LinearMutableMapBase.__default.ValidSlot#canCall| |##elementsLength#4_0_0@0| |##slot2#4_0_1@0|) (or (LinearMutableMapBase.__default.ValidSlot |##elementsLength#4_0_0@0| |##slot2#4_0_1@0|) (< (LinearMutableMapBase.Slot.slot |##slot2#4_0_1@0|) |##elementsLength#4_0_0@0|)))) (=> (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96141) (- 0 505091)) (=> (|LinearMutableMapBase.__default.SameSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (or (LinearMutableMapBase.__default.SameSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (|LinearMutableMapBase.Slot#Equal| |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))))) (=> (and (LinearMutableMapBase.__default.SameSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (ControlFlow 0 96141) (- 0 505148))) false)))))))))))))))))))))))))))))))) (let ((anon31_correct  (and (=> (= (ControlFlow 0 96147) (- 0 505159)) true) (and (=> (= (ControlFlow 0 96147) (- 0 505161)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (=> (= (ControlFlow 0 96147) (- 0 505185)) (let ((|item#4| ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#2@0|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |item#4|))))))))))))) (let ((anon46_Else_correct  (=> (and (not (= (LinearContentMutableMap.lItem.key |item#3@0|) (LinearContentMutableMap.lItem.key |entry#0|))) (= (ControlFlow 0 96143) 96147)) anon31_correct))) (let ((anon45_Then_correct  (=> (not (|LinearMutableMapBase.Slot#Equal| |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (=> (= (ControlFlow 0 96139) (- 0 504329)) (or (LinearContentMutableMap.lItem.Entry_q |item#3@0|) (LinearContentMutableMap.lItem.Tombstone_q |item#3@0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |item#3@0|) (LinearContentMutableMap.lItem.Tombstone_q |item#3@0|)) (and (=> (= (ControlFlow 0 96139) (- 0 504337)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (and (=> (= (ControlFlow 0 96139) 96141) anon46_Then_correct) (=> (= (ControlFlow 0 96139) 96143) anon46_Else_correct))))))))) (let ((anon45_Else_correct  (=> (and (|LinearMutableMapBase.Slot#Equal| |slot#2@0| (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (= (ControlFlow 0 96145) 96147)) anon31_correct))) (let ((anon26_correct  (=> (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|)) (=> (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (LinearMutableMapBase.Slot.Slot_q |slot#2@0|)))) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|) (LinearMutableMapBase.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#2@0|)))))) (and (=> (= (ControlFlow 0 96132) (- 0 504188)) true) (=> (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (LinearMutableMapBase.Slot.Slot_q |slot#2@0|)) (=> (and (and (= |##s#5@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) ($IsAllocBox |##s#5@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and (= |##i#0@0| (LinearMutableMapBase.Slot.slot |slot#2@0|)) ($IsAlloc (int_2_U |##i#0@0|) Tclass._System.nat $Heap@5))) (and (=> (= (ControlFlow 0 96132) (- 0 504229)) (< |##i#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) |##s#5@0|))) (=> (and (< |##i#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) |##s#5@0|)) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|) (LinearMutableMapBase.Slot.slot |slot#2@0|))) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (LinearMutableMapBase.Slot.Slot_q |slot#2@0|)) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|) (LinearMutableMapBase.Slot.slot |slot#2@0|))) (= |item#3@0| ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#2@0|))))) (and (=> (= (ControlFlow 0 96132) (- 0 504311)) (<= (LitInt 0) |call5formal@slotIdx#0@0|)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (=> (|$IsA#LinearMutableMapBase.Slot| |slot#2@0|) (and (=> (= (ControlFlow 0 96132) 96139) anon45_Then_correct) (=> (= (ControlFlow 0 96132) 96145) anon45_Else_correct)))))))))))))) (let ((anon44_Else_correct  (=> (and (not (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|)) (= (ControlFlow 0 96126) 96132)) anon26_correct))) (let ((anon44_Then_correct  (=> (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|) (and (=> (= (ControlFlow 0 96124) (- 0 504023)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (=> (and (and (= |##litems#4@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) ($IsAllocBox |##litems#4@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5)) (and (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.Slot_q |slot#2@0|))) (and (=> (= (ControlFlow 0 96124) (- 0 504056)) (and (<= 0 (LinearMutableMapBase.Slot.slot |slot#2@0|)) (< (LinearMutableMapBase.Slot.slot |slot#2@0|) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))) (=> (= (ControlFlow 0 96124) 96132) anon26_correct)))))))) (let ((anon43_Then_correct  (=> ($Is |slot#2@0| Tclass.LinearMutableMapBase.Slot) (and (=> (= (ControlFlow 0 96122) (- 0 503820)) true) (=> (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@4|) (= |##s#4@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) (and ($IsAllocBox |##s#4@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@5) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (and (= |##elementsLength#1@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))) ($IsAlloc (int_2_U |##elementsLength#1@0|) Tclass._System.nat $Heap@5)) (and ($IsAlloc |slot#2@0| Tclass.LinearMutableMapBase.Slot $Heap@5) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#2@0|)))) (and (=> (= (ControlFlow 0 96122) 96124) anon44_Then_correct) (=> (= (ControlFlow 0 96122) 96126) anon44_Else_correct))))))) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 498231) (- 0 508627)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))) (and (=> (= (ControlFlow 0 498231) (- 0 508656)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) 18446744073709551616)))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 498231) (- 0 508683)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|) 18446744073709551616)))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|) 18446744073709551616))) (and (=> (= (ControlFlow 0 498231) (- 0 508704)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))) (and (=> (= (ControlFlow 0 498231) (- 0 508732)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@4|)))) (and (=> (= (ControlFlow 0 498231) (- 0 508756)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)))) (and (=> (= (ControlFlow 0 498231) (- 0 508779)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)))) (and (=> (= (ControlFlow 0 498231) (- 0 508807)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)))) (and (=> (= (ControlFlow 0 498231) (- 0 508835)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |self#0@4|) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)))) (and (=> (= (ControlFlow 0 498231) (- 0 508863)) (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|) (|Map#Build| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))) ($Box (|#Options.Option.Some| (LinearContentMutableMap.lItem.value |entry#0|)))))) (=> (|Map#Equal| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|) (|Map#Build| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))) ($Box (|#Options.Option.Some| (LinearContentMutableMap.lItem.value |entry#0|))))) (and (=> (= (ControlFlow 0 498231) (- 0 508888)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|)))))) (LinearOption.lOption.lNone_q |replaced#0@3|))) (=> (=> (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|)))))) (LinearOption.lOption.lNone_q |replaced#0@3|)) (and (=> (= (ControlFlow 0 498231) (- 0 508909)) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))))) (|Options.Option#Equal| (LinearOption.lOption.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V |replaced#0@3|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|)))))))) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))))) (|Options.Option#Equal| (LinearOption.lOption.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V |replaced#0@3|) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))))))) (and (=> (= (ControlFlow 0 498231) (- 0 508950)) (=> (LinearOption.lOption.lSome_q |replaced#0@3|) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))))))) (=> (=> (LinearOption.lOption.lSome_q |replaced#0@3|) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|)))))) (=> (= (ControlFlow 0 498231) (- 0 508969)) (= (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))))))))))))))))))))))))))))))) (let ((anon43_Else_correct  (=> (forall ((|slot#3| T@U) ) (!  (=> (= (type |slot#3|) DatatypeTypeType) (=> (and ($Is |slot#3| Tclass.LinearMutableMapBase.Slot) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#3|) (LinearMutableMapBase.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#3|)))))) (and true (let ((|item#5| ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#3|))))) (and true (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box (int_2_U (LinearContentMutableMap.lItem.key |item#5|))))))))))) :qid |LinearContentMutableMapidfy.331:12| :skolemid |1531| :pattern ( (LinearMutableMapBase.Slot.slot |slot#3|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#3|)) )) (and (=> (= (ControlFlow 0 96149) (- 0 504010)) true) (=> (= (ControlFlow 0 96149) 498231) GeneratedUnifiedExit_correct))))) (let ((anon39_Else_correct  (=> (forall ((|slot#1@@11| T@U) ) (!  (=> (= (type |slot#1@@11|) DatatypeTypeType) (=> (and ($Is |slot#1@@11| Tclass.LinearMutableMapBase.Slot) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#1@@11|) (LinearMutableMapBase.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#1@@11|)))))) (and true (let ((|item#2| ($Unbox DatatypeTypeType (|Seq#Index| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) (LinearMutableMapBase.Slot.slot |slot#1@@11|))))) (and true (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box (int_2_U (LinearMutableMapBase.Item.key |item#2|))))) (|#Options.Option.Some| (LinearMutableMapBase.Item.value |item#2|)))))))) :qid |LinearContentMutableMapidfy.317:12| :skolemid |1530| :pattern ( (LinearMutableMapBase.Slot.slot |slot#1@@11|)) :pattern ( (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |slot#1@@11|)) )) (and (=> (= (ControlFlow 0 96113) 96122) anon43_Then_correct) (=> (= (ControlFlow 0 96113) 96149) anon43_Else_correct))))) (let ((anon36_Else_correct  (=> (forall ((|explainedKey#1| T@U) ) (!  (=> (= (type |explainedKey#1|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |explainedKey#1|)) (< (U_2_int |explainedKey#1|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box |explainedKey#1|)))) (exists ((|skips#1@@4| Int) ) (!  (and (<= (LitInt 0) |skips#1@@4|) (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |skips#1@@4| (U_2_int |explainedKey#1|))) :qid |LinearContentMutableMapidfy.307:20| :skolemid |1528| :pattern ( (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@4|)) |skips#1@@4| (U_2_int |explainedKey#1|))) )))) :qid |LinearContentMutableMapidfy.306:12| :skolemid |1529| :pattern ( (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |self#0@4|)) ($Box |explainedKey#1|))) )) (and (=> (= (ControlFlow 0 96077) 96086) anon39_Then_correct) (=> (= (ControlFlow 0 96077) 96113) anon39_Else_correct))))) (let ((anon35_Else_correct  (=> (not (LinearContentMutableMap.lItem.Tombstone_q |$rhs##3@0|)) (=> (and (<= (LitInt 0) |_v0#0@0|) (< |_v0#0@0| 18446744073709551616)) (=> (and (and ($IsBox |value#0@0| LinearContentMutableMap._default.FixedSizeInsertEntry$V) ($IsAllocBox |value#0@0| LinearContentMutableMap._default.FixedSizeInsertEntry$V $Heap@2)) (and (= |let#5#0#0| |$rhs##3@0|) ($Is |let#5#0#0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)))) (and (=> (= (ControlFlow 0 96049) (- 0 503409)) (LinearContentMutableMap.lItem.Entry_q |let#5#0#0|)) (=> (LinearContentMutableMap.lItem.Entry_q |let#5#0#0|) (=> (= (|#LinearContentMutableMap.lItem.Entry| |_v0#0@0| |value#0@0|) |let#5#0#0|) (=> (and (and (= |replaced#0@2| (|#LinearOption.lOption.lSome| |value#0@0|)) (= $Heap@5 $Heap@2)) (and (= |replaced#0@3| |replaced#0@2|) (= |self#0@4| |self#0@2|))) (and (=> (= (ControlFlow 0 96049) 96058) anon36_Then_correct) (=> (= (ControlFlow 0 96049) 96077) anon36_Else_correct))))))))))) (let ((anon35_Then_correct  (=> (LinearContentMutableMap.lItem.Tombstone_q |$rhs##3@0|) (and (=> (= (ControlFlow 0 96047) (- 0 503254)) (forall (($o@@111 T@U) ($f@@67 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (= (type $o@@111) refType) (= (type $f@@67) (FieldType alpha@@74))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@111 $f@@67)))) :qid |LinearContentMutableMapidfy.299:27| :skolemid |1518| :no-pattern (type $o@@111) :no-pattern (type $f@@67) :no-pattern (U_2_int $o@@111) :no-pattern (U_2_bool $o@@111) :no-pattern (U_2_int $f@@67) :no-pattern (U_2_bool $f@@67) ))) (=> (forall (($o@@112 T@U) ($f@@68 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (= (type $o@@112) refType) (= (type $f@@68) (FieldType alpha@@75))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@112 $f@@68)))) :qid |LinearContentMutableMapidfy.299:27| :skolemid |1518| :no-pattern (type $o@@112) :no-pattern (type $f@@68) :no-pattern (U_2_int $o@@112) :no-pattern (U_2_bool $o@@112) :no-pattern (U_2_int $f@@68) :no-pattern (U_2_bool $f@@68) )) (and (=> (= (ControlFlow 0 96047) (- 0 503273)) (not (LinearContentMutableMap.lItem.Entry_q |$rhs##3@0|))) (=> (not (LinearContentMutableMap.lItem.Entry_q |$rhs##3@0|)) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (forall (($o@@113 T@U) ) (!  (=> (= (type $o@@113) refType) (=> (and (not (= $o@@113 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@2 $o@@113) alloc))) (= (MapType0Select $Heap@4 $o@@113) (MapType0Select $Heap@2 $o@@113)))) :qid |LinearContentMutableMapidfy.50:19| :skolemid |1294| :pattern ( (MapType0Select $Heap@4 $o@@113)) )) ($HeapSucc $Heap@2 $Heap@4))) (and (and (= |replaced#0@1| (Lit |#LinearOption.lOption.lNone|)) (= $Heap@5 $Heap@4)) (and (= |replaced#0@3| |replaced#0@1|) (= |self#0@4| |self#0@2|)))) (and (=> (= (ControlFlow 0 96047) 96058) anon36_Then_correct) (=> (= (ControlFlow 0 96047) 96077) anon36_Else_correct)))))))))) (let ((anon34_Else_correct  (=> (not (LinearContentMutableMap.lItem.Empty_q |$rhs##3@0|)) (and (=> (= (ControlFlow 0 96045) 96047) anon35_Then_correct) (=> (= (ControlFlow 0 96045) 96049) anon35_Else_correct))))) (let ((anon34_Then_correct  (=> (LinearContentMutableMap.lItem.Empty_q |$rhs##3@0|) (and (=> (= (ControlFlow 0 96038) (- 0 502939)) (forall (($o@@114 T@U) ($f@@69 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (= (type $o@@114) refType) (= (type $f@@69) (FieldType alpha@@76))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@114 $f@@69)))) :qid |LinearContentMutableMapidfy.295:27| :skolemid |1517| :no-pattern (type $o@@114) :no-pattern (type $f@@69) :no-pattern (U_2_int $o@@114) :no-pattern (U_2_bool $o@@114) :no-pattern (U_2_int $f@@69) :no-pattern (U_2_bool $f@@69) ))) (=> (forall (($o@@115 T@U) ($f@@70 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (= (type $o@@115) refType) (= (type $f@@70) (FieldType alpha@@77))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@115 $f@@70)))) :qid |LinearContentMutableMapidfy.295:27| :skolemid |1517| :no-pattern (type $o@@115) :no-pattern (type $f@@70) :no-pattern (U_2_int $o@@115) :no-pattern (U_2_bool $o@@115) :no-pattern (U_2_int $f@@70) :no-pattern (U_2_bool $f@@70) )) (and (=> (= (ControlFlow 0 96038) (- 0 502958)) (not (LinearContentMutableMap.lItem.Entry_q |$rhs##3@0|))) (=> (not (LinearContentMutableMap.lItem.Entry_q |$rhs##3@0|)) (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (forall (($o@@116 T@U) ) (!  (=> (= (type $o@@116) refType) (=> (and (not (= $o@@116 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@2 $o@@116) alloc))) (= (MapType0Select $Heap@3 $o@@116) (MapType0Select $Heap@2 $o@@116)))) :qid |LinearContentMutableMapidfy.50:19| :skolemid |1294| :pattern ( (MapType0Select $Heap@3 $o@@116)) )) ($HeapSucc $Heap@2 $Heap@3))) (and (=> (= (ControlFlow 0 96038) (- 0 503027)) true) (=> (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@2|) (= |newtype$check#0_0@0| (LitInt 1))) (and (=> (= (ControlFlow 0 96038) (- 0 503041)) (and (<= (LitInt 0) |newtype$check#0_0@0|) (< |newtype$check#0_0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_0@0|) (< |newtype$check#0_0@0| 18446744073709551616)) (=> (= |newtype$check#0_1@0| (+ (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@2|) 1)) (and (=> (= (ControlFlow 0 96038) (- 0 503068)) (and (<= (LitInt 0) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 18446744073709551616)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@2|) (= |_inout_tmp_0#0_0@0| (+ (LinearContentMutableMap.FixedSizeLinearHashMap.count |self#0@2|) 1))) (and ($Is |dt_update_tmp#3#Z#0_0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |dt_update_tmp#3#Z#0_0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@3))) (and (=> (= (ControlFlow 0 96038) (- 0 503122)) true) (=> (= |let#0_0#0#0| |self#0@2|) (=> (and ($Is |let#0_0#0#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) (= |dt_update_tmp#3#Z#0_0@0| |let#0_0#0#0|)) (=> (and (and (and (and (<= (LitInt 0) |dt_update#count#0#Z#0_0@0|) (< |dt_update#count#0#Z#0_0@0| 18446744073709551616)) (= |let#0_1#0#0| |_inout_tmp_0#0_0@0|)) (and ($Is (int_2_U |let#0_1#0#0|) Tclass.NativeTypes.uint64) (= |dt_update#count#0#Z#0_0@0| |let#0_1#0#0|))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#3#Z#0_0@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#3#Z#0_0@0|)) (and (let ((|dt_update_tmp#3#0_0| |self#0@2|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#3#0_0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#3#0_0|))) (= |self#0@3| (let ((|dt_update_tmp#3#0_0@@0| |self#0@2|)) (let ((|dt_update#count#0#0_0| |_inout_tmp_0#0_0@0|)) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |dt_update_tmp#3#0_0@@0|) |dt_update#count#0#0_0| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |dt_update_tmp#3#0_0@@0|))))))) (and (and (= |replaced#0@0| (Lit |#LinearOption.lOption.lNone|)) (= $Heap@5 $Heap@3)) (and (= |replaced#0@3| |replaced#0@0|) (= |self#0@4| |self#0@3|))))) (and (=> (= (ControlFlow 0 96038) 96058) anon36_Then_correct) (=> (= (ControlFlow 0 96038) 96077) anon36_Else_correct)))))))))))))))))))))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.lshift) StartFuel_LinearMutableMapBase._default.lshift))) (and (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.lshift) StartFuelAssert_LinearMutableMapBase._default.lshift) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.rshift) StartFuel_LinearMutableMapBase._default.rshift)) (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.rshift) StartFuelAssert_LinearMutableMapBase._default.rshift) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.bitnot) StartFuel_LinearMutableMapBase._default.bitnot))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.bitnot) StartFuelAssert_LinearMutableMapBase._default.bitnot) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.bitxor) StartFuel_LinearMutableMapBase._default.bitxor)) (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.bitxor) StartFuelAssert_LinearMutableMapBase._default.bitxor) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.hash64) StartFuel_LinearMutableMapBase._default.hash64))) (and (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.hash64) StartFuelAssert_LinearMutableMapBase._default.hash64) (= (AsFuelBottom StartFuel_LinearMutableMapBase._default.SomeSkipCountExplainsKey) StartFuel_LinearMutableMapBase._default.SomeSkipCountExplainsKey)) (and (= (AsFuelBottom StartFuelAssert_LinearMutableMapBase._default.SomeSkipCountExplainsKey) StartFuelAssert_LinearMutableMapBase._default.SomeSkipCountExplainsKey) (= (AsFuelBottom StartFuel_LinearContentMutableMap._default.getEmptyWitness) StartFuel_LinearContentMutableMap._default.getEmptyWitness)))) (and (and (and (= (AsFuelBottom StartFuelAssert_LinearContentMutableMap._default.getEmptyWitness) StartFuelAssert_LinearContentMutableMap._default.getEmptyWitness) (= $_Frame@0 (|lambda#44| null $Heap@@49 alloc false))) (and (<= (LitInt 0) |slotIdx#0@0|) (< |slotIdx#0@0| 18446744073709551616))) (and (and (<= (LitInt 0) |probeStartSlotIdx#0@0|) (< |probeStartSlotIdx#0@0| 18446744073709551616)) (and (<= (LitInt 0) |probeSkips#0@0|) (< |probeSkips#0@0| 18446744073709551616))))))) (and (=> (= (ControlFlow 0 96036) (- 0 500506)) true) (and (=> (= (ControlFlow 0 96036) (- 0 500511)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (=> (= |key##0@0| (LinearContentMutableMap.lItem.key |entry#0|)) (and (=> (= (ControlFlow 0 96036) (- 0 500533)) (forall (($o@@117 T@U) ($f@@71 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (= (type $o@@117) refType) (= (type $f@@71) (FieldType alpha@@78))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@117 $f@@71)))) :qid |LinearContentMutableMapidfy.286:52| :skolemid |1514| :no-pattern (type $o@@117) :no-pattern (type $f@@71) :no-pattern (U_2_int $o@@117) :no-pattern (U_2_bool $o@@117) :no-pattern (U_2_int $f@@71) :no-pattern (U_2_bool $f@@71) ))) (=> (forall (($o@@118 T@U) ($f@@72 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (= (type $o@@118) refType) (= (type $f@@72) (FieldType alpha@@79))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@118 $f@@72)))) :qid |LinearContentMutableMapidfy.286:52| :skolemid |1514| :no-pattern (type $o@@118) :no-pattern (type $f@@72) :no-pattern (U_2_int $o@@118) :no-pattern (U_2_bool $o@@118) :no-pattern (U_2_int $f@@72) :no-pattern (U_2_bool $f@@72) )) (=> (and (<= (LitInt 0) |call5formal@slotIdx#0|) (< |call5formal@slotIdx#0| 18446744073709551616)) (=> (and (and (<= (LitInt 0) |call6formal@startSlotIdx#0|) (< |call6formal@startSlotIdx#0| 18446744073709551616)) (and (<= (LitInt 0) |call7formal@skips#0|) (< |call7formal@skips#0| 18446744073709551616))) (and (=> (= (ControlFlow 0 96036) (- 0 500557)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))) (and (=> (= (ControlFlow 0 96036) (- 0 500583)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) 18446744073709551616)))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 96036) (- 0 500607)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) 18446744073709551616)))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) 18446744073709551616))) (and (=> (= (ControlFlow 0 96036) (- 0 500626)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))) (and (=> (= (ControlFlow 0 96036) (- 0 500651)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 500673)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 500693)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 500717)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 500741)) (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))))) (=> (=> (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (or (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 500765)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))) (=> (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (<= (LitInt 0) |call5formal@slotIdx#0@0|) (< |call5formal@slotIdx#0@0| 18446744073709551616)) (and (<= (LitInt 0) |call6formal@startSlotIdx#0@0|) (< |call6formal@startSlotIdx#0@0| 18446744073709551616))) (=> (and (and (and (and (and (<= (LitInt 0) |call7formal@skips#0@0|) (< |call7formal@skips#0@0| 18446744073709551616)) (=> (<= (LitInt 0) |call5formal@slotIdx#0@0|) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))) (and (<= (LitInt 0) |call5formal@slotIdx#0@0|) (< |call5formal@slotIdx#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (< (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call5formal@slotIdx#0@0|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))))))) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|))) (and (|LinearMutableMapBase.__default.ValidSlot#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|)) (and (LinearMutableMapBase.__default.ValidSlot (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|)) (< (LinearMutableMapBase.Slot.slot (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))))) (and (and (|$IsA#LinearMutableMapBase.Slot| (LinearMutableMapBase.__default.SlotForKey (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |key##0@0|)) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.SlotForKey#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |key##0@0|))) (and (|LinearMutableMapBase.Slot#Equal| (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) (LinearMutableMapBase.__default.SlotForKey (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |key##0@0|)) (<= (LitInt 0) |call7formal@skips#0@0|))))) (=> (and (and (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.KthSlotSuccessor#canCall| (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0|)) (LinearMutableMapBase.Slot.Slot_q (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0|))) (= |call5formal@slotIdx#0@0| (LinearMutableMapBase.Slot.slot (LinearMutableMapBase.__default.KthSlotSuccessor ($LS ($LS $LZ)) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0|)))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|)))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call7formal@skips#0@0| |key##0@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|)))) (and (|LinearMutableMapBase.__default.SlotExplainsKey#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call7formal@skips#0@0| |key##0@0|) (and (LinearMutableMapBase.__default.SlotExplainsKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call7formal@skips#0@0| |key##0@0|) (let ((|foundSlot#0@@4| (LinearMutableMapBase.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) |key##0@0|) |call7formal@skips#0@0|))) (and (and (LinearMutableMapBase.__default.ValidSlot (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) |foundSlot#0@@4|) (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearMutableMapBase.__default.SlotForKey (|Seq#Length| (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) |key##0@0|) |call7formal@skips#0@0| |key##0@0|)) (LinearMutableMapBase.__default.FilledWithKey LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |foundSlot#0@@4| |key##0@0|))))))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearContentMutableMap.__default.toItems#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0| |key##0@0|)) (=> (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0| |key##0@0|) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)) (=> (not (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|)))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)) (=> (LinearContentMutableMap.lItem.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)))))))))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|))))) (and (|LinearMutableMapBase.__default.FilledWithOtherKeys#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0| |key##0@0|) (LinearMutableMapBase.__default.FilledWithOtherKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (|#LinearMutableMapBase.Slot.Slot| |call6formal@startSlotIdx#0@0|) |call7formal@skips#0@0| |key##0@0|))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|))))) (or (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (and (LinearContentMutableMap.lItem.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (= (LinearContentMutableMap.lItem.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) |key##0@0|)))))))) (and (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)) (=> (LinearContentMutableMap.lItem.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (=> (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|)))) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)))))) (and (=> (LinearContentMutableMap.lItem.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|))))) (=> (LinearContentMutableMap.lItem.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (= |key##0@0| (LinearContentMutableMap.lItem.key ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))))))) (and (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|) |call5formal@slotIdx#0@0|)) (=> (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|))) (and (and (=> (LinearContentMutableMap.lItem.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (LinearSequence__i.__default.lseqs (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) |call5formal@slotIdx#0@0|))) (not (U_2_bool (MapType0Select (|Map#Domain| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) ($Box (int_2_U |key##0@0|)))))) (forall (($o@@119 T@U) ) (!  (=> (= (type $o@@119) refType) (=> (and (not (= $o@@119 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@49 $o@@119) alloc))) (= (MapType0Select $Heap@0 $o@@119) (MapType0Select $Heap@@49 $o@@119)))) :qid |LinearContentMutableMapidfy.173:35| :skolemid |1481| :pattern ( (MapType0Select $Heap@0 $o@@119)) ))) (and ($HeapSucc $Heap@@49 $Heap@0) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|)))))) (and (=> (= (ControlFlow 0 96036) (- 0 501865)) (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|))) (=> (or (LinearContentMutableMap.lItem.Entry_q |entry#0|) (LinearContentMutableMap.lItem.Tombstone_q |entry#0|)) (and (=> (= (ControlFlow 0 96036) (- 0 501875)) (LinearContentMutableMap.lItem.Entry_q |entry#0|)) (=> (LinearContentMutableMap.lItem.Entry_q |entry#0|) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |old_self#0|) (= |contents#0@0| (|Map#Build| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|) ($Box (int_2_U (LinearContentMutableMap.lItem.key |entry#0|))) ($Box (|#Options.Option.Some| (LinearContentMutableMap.lItem.value |entry#0|)))))) (and ($Is |dt_update_tmp#0#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |dt_update_tmp#0#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@0))) (and (=> (= (ControlFlow 0 96036) (- 0 501941)) true) (=> (= |let#0#0#0| |old_self#0|) (=> (and ($Is |let#0#0#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) (= |dt_update_tmp#0#Z#0@0| |let#0#0#0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#0#Z#0@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#0#Z#0@0|)) (and (let ((|dt_update_tmp#0#0| |old_self#0|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#0#0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#0#0|))) (= |self#0@0| (let ((|dt_update_tmp#0#0@@0| |old_self#0|)) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |dt_update_tmp#0#0@@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.count |dt_update_tmp#0#0@@0|) |contents#0@0|))))) (and (=> (= (ControlFlow 0 96036) (- 0 502010)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@0|) (=> (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@0|) (= |old_s##0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@0|))) (and (=> (= (ControlFlow 0 96036) (- 0 502030)) (forall (($o@@120 T@U) ($f@@73 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (= (type $o@@120) refType) (= (type $f@@73) (FieldType alpha@@80))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@120 $f@@73)))) :qid |LinearContentMutableMapidfy.291:42| :skolemid |1515| :no-pattern (type $o@@120) :no-pattern (type $f@@73) :no-pattern (U_2_int $o@@120) :no-pattern (U_2_bool $o@@120) :no-pattern (U_2_int $f@@73) :no-pattern (U_2_bool $f@@73) ))) (=> (forall (($o@@121 T@U) ($f@@74 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (= (type $o@@121) refType) (= (type $f@@74) (FieldType alpha@@81))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@121 $f@@74)))) :qid |LinearContentMutableMapidfy.291:42| :skolemid |1515| :no-pattern (type $o@@121) :no-pattern (type $f@@74) :no-pattern (U_2_int $o@@121) :no-pattern (U_2_bool $o@@121) :no-pattern (U_2_int $f@@74) :no-pattern (U_2_bool $f@@74) )) (=> (and ($IsBox |call5formal@a#0| call0formal@LinearSequence_i._default.lseq_take_inout$A) ($IsAllocBox |call5formal@a#0| call0formal@LinearSequence_i._default.lseq_take_inout$A $Heap@@49)) (=> (and (and ($IsBox |call6formal@s#0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_take_inout$A)) ($IsAllocBox |call6formal@s#0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_take_inout$A) $Heap@@49)) (= call0formal@LinearSequence_i._default.lseq_take_inout$A@0 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) (and (=> (= (ControlFlow 0 96036) (- 0 502060)) (< |call5formal@slotIdx#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|))) (=> (< |call5formal@slotIdx#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|)) (and (=> (= (ControlFlow 0 96036) (- 0 502067)) (=> (|LinearSequence__i.__default.operator_kin_qlseq#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0| |call5formal@slotIdx#0@0|) (or (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0|)))))) (=> (=> (|LinearSequence__i.__default.operator_kin_qlseq#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0| |call5formal@slotIdx#0@0|) (or (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0|))) (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0|))))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and ($IsBox |call5formal@a#0@0| call0formal@LinearSequence_i._default.lseq_take_inout$A@0) ($IsAllocBox |call5formal@a#0@0| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 $Heap@1))) (and (and ($IsBox |call6formal@s#0@0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_take_inout$A@0)) ($IsAllocBox |call6formal@s#0@0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_take_inout$A@0) $Heap@1)) (and (|LinearSequence__i.__default.operator_ksubscript_qlseq#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0| |call5formal@slotIdx#0@0|) (= |call5formal@a#0@0| (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0|))))) (=> (and (and (and (and (|LinearExtern.__default.lseq__has#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) (|LinearExtern.__default.lseq__has#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|)) (|Seq#Equal| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) (|Seq#Update| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |call5formal@slotIdx#0@0| ($Box (Lit (bool_2_U false)))))) (and (and (forall ((|j#0@@14| Int) ) (!  (=> (<= (LitInt 0) |j#0@@14|) (and (|LinearSequence__i.__default.operator_kcardinality_qlseq#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) (=> (and (< |j#0@@14| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|)) (not (= |j#0@@14| |call5formal@slotIdx#0@0|))) (and (|LinearSequence__i.__default.lseqs#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) (|LinearSequence__i.__default.lseqs#canCall| call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|))))) :qid |LinearSequenceidfy.190:22| :skolemid |2576| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |j#0@@14|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) |j#0@@14|)) )) (forall ((|j#0@@15| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@15|) (and (< |j#0@@15| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|)) (not (= |j#0@@15| |call5formal@slotIdx#0@0|)))) (= (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) |j#0@@15|) (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |j#0@@15|))) :qid |LinearSequenceidfy.190:22| :skolemid |2577| :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |old_s##0@0|) |j#0@@15|)) :pattern ( (|Seq#Index| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_take_inout$A@0 |call6formal@s#0@0|) |j#0@@15|)) ))) (and (forall (($o@@122 T@U) ) (!  (=> (= (type $o@@122) refType) (=> (and (not (= $o@@122 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@122) alloc))) (= (MapType0Select $Heap@1 $o@@122) (MapType0Select $Heap@0 $o@@122)))) :qid |LinearSequenceidfy.186:10| :skolemid |2578| :pattern ( (MapType0Select $Heap@1 $o@@122)) )) ($HeapSucc $Heap@0 $Heap@1)))) (and (and (and ($Is |$rhs##3@0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |$rhs##3@0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@1)) (= |$rhs##3@0| ($Unbox DatatypeTypeType |call5formal@a#0@0|))) (and ($Is |dt_update_tmp#1#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |dt_update_tmp#1#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@1)))) (and (=> (= (ControlFlow 0 96036) (- 0 502426)) true) (=> (= |let#1#0#0| |self#0@0|) (=> (and (and ($Is |let#1#0#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) (= |dt_update_tmp#1#Z#0@0| |let#1#0#0|)) (and ($IsBox |dt_update#storage#0#Z#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |dt_update#storage#0#Z#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@1))) (=> (and (and (and (= |let#2#0#0| |call6formal@s#0@0|) ($IsBox |let#2#0#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)))) (and (= |dt_update#storage#0#Z#0@0| |let#2#0#0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#1#Z#0@0|))) (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#1#Z#0@0|) (let ((|dt_update_tmp#1#0| |self#0@0|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#1#0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#1#0|)))) (and (= |self#0@1| (let ((|dt_update_tmp#1#0@@0| |self#0@0|)) (let ((|dt_update#storage#0#0| |call6formal@s#0@0|)) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |dt_update#storage#0#0| (LinearContentMutableMap.FixedSizeLinearHashMap.count |dt_update_tmp#1#0@@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |dt_update_tmp#1#0@@0|))))) (=> |defass#_inout_tmp_3#0| (and ($IsBox |_inout_tmp_3#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |_inout_tmp_3#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@1)))))) (and (=> (= (ControlFlow 0 96036) (- 0 502571)) true) (=> (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@1|) (=> (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@1|) (= |old_s1##0@0| (LinearContentMutableMap.FixedSizeLinearHashMap.storage |self#0@1|))) (and (=> (= (ControlFlow 0 96036) (- 0 502596)) (forall (($o@@123 T@U) ($f@@75 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (= (type $o@@123) refType) (= (type $f@@75) (FieldType alpha@@82))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@123 $f@@75)))) :qid |LinearContentMutableMapidfy.292:20| :skolemid |1516| :no-pattern (type $o@@123) :no-pattern (type $f@@75) :no-pattern (U_2_int $o@@123) :no-pattern (U_2_bool $o@@123) :no-pattern (U_2_int $f@@75) :no-pattern (U_2_bool $f@@75) ))) (=> (forall (($o@@124 T@U) ($f@@76 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (= (type $o@@124) refType) (= (type $f@@76) (FieldType alpha@@83))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@124 $f@@76)))) :qid |LinearContentMutableMapidfy.292:20| :skolemid |1516| :no-pattern (type $o@@124) :no-pattern (type $f@@76) :no-pattern (U_2_int $o@@124) :no-pattern (U_2_bool $o@@124) :no-pattern (U_2_int $f@@76) :no-pattern (U_2_bool $f@@76) )) (=> (and (and ($IsBox |call6formal@s1#0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_give_inout$A)) ($IsAllocBox |call6formal@s1#0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_give_inout$A) $Heap@@49)) (and (= call0formal@LinearSequence_i._default.lseq_give_inout$A@0 (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) (= |call3formal@a#0@0| ($Box |entry#0|)))) (and (=> (= (ControlFlow 0 96036) (- 0 502634)) (< |call5formal@slotIdx#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|))) (=> (< |call5formal@slotIdx#0@0| (LinearSequence__i.__default.operator_kcardinality_qlseq call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|)) (and (=> (= (ControlFlow 0 96036) (- 0 502641)) (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|) |call5formal@slotIdx#0@0|))))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|) |call5formal@slotIdx#0@0|)))) (=> (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and ($IsBox |call6formal@s1#0@0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_give_inout$A@0)) ($IsAllocBox |call6formal@s1#0@0| (|#$lseq| call0formal@LinearSequence_i._default.lseq_give_inout$A@0) $Heap@2))) (and (and (|LinearExtern.__default.lseq__has#canCall| call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |call6formal@s1#0@0|) (|LinearExtern.__default.lseq__has#canCall| call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|)) (|Seq#Equal| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |call6formal@s1#0@0|) (|Seq#Update| (LinearExtern.__default.lseq__has call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|) |call5formal@slotIdx#0@0| ($Box (Lit (bool_2_U true))))))) (and (and (and (|LinearSequence__i.__default.lseqs#canCall| call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |call6formal@s1#0@0|) (|LinearSequence__i.__default.lseqs#canCall| call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|)) (|Seq#Equal| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |call6formal@s1#0@0|) (|Seq#Update| (LinearSequence__i.__default.lseqs call0formal@LinearSequence_i._default.lseq_give_inout$A@0 |old_s1##0@0|) |call5formal@slotIdx#0@0| |call3formal@a#0@0|))) (and (and (forall (($o@@125 T@U) ) (!  (=> (= (type $o@@125) refType) (=> (and (not (= $o@@125 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@1 $o@@125) alloc))) (= (MapType0Select $Heap@2 $o@@125) (MapType0Select $Heap@1 $o@@125)))) :qid |LinearSequenceidfy.218:10| :skolemid |2583| :pattern ( (MapType0Select $Heap@2 $o@@125)) )) ($HeapSucc $Heap@1 $Heap@2)) (and ($Is |dt_update_tmp#2#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |dt_update_tmp#2#Z#0@0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@2))))) (and (=> (= (ControlFlow 0 96036) (- 0 502816)) true) (=> (= |let#3#0#0| |self#0@1|) (=> (and (and ($Is |let#3#0#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) (= |dt_update_tmp#2#Z#0@0| |let#3#0#0|)) (and ($IsBox |dt_update#storage#1#Z#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |dt_update#storage#1#Z#0@0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@2))) (and (=> (= (ControlFlow 0 96036) (- 0 502861)) true) (=> (= |let#4#0#0| |call6formal@s1#0@0|) (=> (and ($IsBox |let#4#0#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) (= |dt_update#storage#1#Z#0@0| |let#4#0#0|)) (=> (and (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#2#Z#0@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#2#Z#0@0|)) (and (let ((|dt_update_tmp#2#0| |self#0@1|)) (and (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#2#0|) (LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |dt_update_tmp#2#0|))) (= |self#0@2| (let ((|dt_update_tmp#2#0@@0| |self#0@1|)) (let ((|dt_update#storage#1#0| |call6formal@s1#0@0|)) (|#LinearContentMutableMap.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |dt_update#storage#1#0| (LinearContentMutableMap.FixedSizeLinearHashMap.count |dt_update_tmp#2#0@@0|) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |dt_update_tmp#2#0@@0|))))))) (and (=> (= (ControlFlow 0 96036) 96038) anon34_Then_correct) (=> (= (ControlFlow 0 96036) 96045) anon34_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@49) ($IsHeapAnchor $Heap@@49)) (=> (and (and (and ($Is |old_self#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |old_self#0| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)) (|$IsA#LinearContentMutableMap.FixedSizeLinearHashMap| |old_self#0|)) (and (and ($Is |entry#0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |entry#0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)) (|$IsA#LinearContentMutableMap.lItem| |entry#0|))) (=> (and (and (and (and (and (and ($Is |replaced#0| (Tclass.LinearOption.lOption LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |replaced#0| (Tclass.LinearOption.lOption LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)) (=> |defass#self#0| (and ($Is |self#0@@37| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |self#0@@37| (Tclass.LinearContentMutableMap.FixedSizeLinearHashMap LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)))) (and (<= (LitInt 0) |slotIdx#0|) (< |slotIdx#0| 18446744073709551616))) (and (and (<= (LitInt 0) |probeStartSlotIdx#0|) (< |probeStartSlotIdx#0| 18446744073709551616)) (and (<= (LitInt 0) |probeSkips#0|) (< |probeSkips#0| 18446744073709551616)))) (and (and (and (<= (LitInt 0) |$rhs##0|) (< |$rhs##0| 18446744073709551616)) (and (<= (LitInt 0) |$rhs##1|) (< |$rhs##1| 18446744073709551616))) (and (and (<= (LitInt 0) |$rhs##2|) (< |$rhs##2| 18446744073709551616)) (and ($Is |contents#0@@27| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAlloc |contents#0@@27| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49))))) (and (and (and (and (and ($Is |_inout_tmp_1#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAlloc |_inout_tmp_1#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49)) (and ($Is |olditem#0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |olditem#0| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49))) (and (and ($IsBox |_inout_tmp_2#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |_inout_tmp_2#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49)) (and ($Is |$rhs##3| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |$rhs##3| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)))) (and (and (and ($IsBox |$rhs##4| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |$rhs##4| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49)) (=> |defass#_inout_tmp_3#0| (and ($IsBox |_inout_tmp_3#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |_inout_tmp_3#0| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49)))) (and ($IsBox |$rhs##5| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V))) ($IsAllocBox |$rhs##5| (|#$lseq| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) $Heap@@49)))) (and (and (and (and (<= (LitInt 0) |_inout_tmp_0#0_0|) (< |_inout_tmp_0#0_0| 18446744073709551616)) (<= (LitInt 0) |oldSkips#0|)) (and ($Is |item#0@@7| (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |item#0@@7| (Tclass.LinearMutableMapBase.Item LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49))) (and (and (and ($Is |item#3| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V)) ($IsAlloc |item#3| (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) $Heap@@49)) (and (= 18 $FunctionContextHeight) (LinearContentMutableMap.lItem.Entry_q |entry#0|))) (and (and (|LinearContentMutableMap.__default.FixedSizeInv#canCall| LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (and (LinearContentMutableMap.__default.FixedSizeInv LinearContentMutableMap._default.FixedSizeInsertEntry$V |old_self#0|) (and (and (and (and (and (and (and (and (<= (LitInt 128) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (< (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) 18446744073709551616)) (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)))) (= (|Map#Card| (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|))) (LinearSequence__i.__default.lseq__has__all (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|))) (LinearMutableMapBase.__default.SeqMatchesContentKeys LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))) (LinearMutableMapBase.__default.EntriesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))) (LinearMutableMapBase.__default.TombstonesMatchContentValue LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.__default.toItems LinearContentMutableMap._default.FixedSizeInsertEntry$V (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) (LinearContentMutableMap.FixedSizeLinearHashMap.contents |old_self#0|))))) (and (< (LinearContentMutableMap.FixedSizeLinearHashMap.count |old_self#0|) (- (LinearSequence__i.__default.operator_kcardinality_qlseq (Tclass.LinearContentMutableMap.lItem LinearContentMutableMap._default.FixedSizeInsertEntry$V) (LinearContentMutableMap.FixedSizeLinearHashMap.storage |old_self#0|)) 1)) (= (ControlFlow 0 498335) 96036))))))) anon0_correct))))) PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))) ))
(check-sat)
