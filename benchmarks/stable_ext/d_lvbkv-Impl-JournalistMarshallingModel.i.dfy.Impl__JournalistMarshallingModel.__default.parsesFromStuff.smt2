(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun class.JournalistMarshallingModel.__default () T@U)
(declare-fun Tagclass.JournalistMarshallingModel.__default () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.Journal.JournalEntry () T@U)
(declare-fun Tagclass.JournalRanges.Header () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.GetBeginOp| () T@U)
(declare-fun |##UI.Op.GetEndOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##Journal.JournalEntry.JournalInsert| () T@U)
(declare-fun class.Journal.JournalEntry () T@U)
(declare-fun class.Journal.__default () T@U)
(declare-fun Tagclass.Journal.__default () T@U)
(declare-fun class.NativePackedInts.__default () T@U)
(declare-fun Tagclass.NativePackedInts.__default () T@U)
(declare-fun |##JournalRanges.Header.Header| () T@U)
(declare-fun class.JournalRanges.Header () T@U)
(declare-fun class.JournalRanges.__default () T@U)
(declare-fun Tagclass.JournalRanges.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.CRC32__C.__default () T@U)
(declare-fun Tagclass.CRC32__C.__default () T@U)
(declare-fun |##AsyncDisk.ReqRead.ReqRead| () T@U)
(declare-fun Tagclass.AsyncDisk.ReqRead () T@U)
(declare-fun class.AsyncDisk.ReqRead () T@U)
(declare-fun |##AsyncDisk.ReqWrite.ReqWrite| () T@U)
(declare-fun Tagclass.AsyncDisk.ReqWrite () T@U)
(declare-fun class.AsyncDisk.ReqWrite () T@U)
(declare-fun |##AsyncDisk.RespRead.RespRead| () T@U)
(declare-fun Tagclass.AsyncDisk.RespRead () T@U)
(declare-fun class.AsyncDisk.RespRead () T@U)
(declare-fun |##AsyncDisk.RespWrite.RespWrite| () T@U)
(declare-fun Tagclass.AsyncDisk.RespWrite () T@U)
(declare-fun class.AsyncDisk.RespWrite () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqReadOp| () T@U)
(declare-fun Tagclass.AsyncDisk.DiskOp () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqWriteOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqWrite2Op| () T@U)
(declare-fun |##AsyncDisk.DiskOp.RespReadOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.RespWriteOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.NoDiskOp| () T@U)
(declare-fun class.AsyncDisk.DiskOp () T@U)
(declare-fun |##AsyncDisk.Variables.Variables| () T@U)
(declare-fun Tagclass.AsyncDisk.Variables () T@U)
(declare-fun class.AsyncDisk.Variables () T@U)
(declare-fun |##AsyncDisk.Step.RecvReadStep| () T@U)
(declare-fun Tagclass.AsyncDisk.Step () T@U)
(declare-fun |##AsyncDisk.Step.RecvWriteStep| () T@U)
(declare-fun |##AsyncDisk.Step.RecvWrite2Step| () T@U)
(declare-fun |##AsyncDisk.Step.AckReadStep| () T@U)
(declare-fun |##AsyncDisk.Step.AckWriteStep| () T@U)
(declare-fun |##AsyncDisk.Step.StutterStep| () T@U)
(declare-fun class.AsyncDisk.Step () T@U)
(declare-fun |##AsyncDisk.InternalStep.ProcessReadFailureStep| () T@U)
(declare-fun Tagclass.AsyncDisk.InternalStep () T@U)
(declare-fun |##AsyncDisk.InternalStep.ProcessWriteStep| () T@U)
(declare-fun |##AsyncDisk.InternalStep.HavocConflictingWritesStep| () T@U)
(declare-fun |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep| () T@U)
(declare-fun class.AsyncDisk.InternalStep () T@U)
(declare-fun class.AsyncDisk.__default () T@U)
(declare-fun Tagclass.AsyncDisk.__default () T@U)
(declare-fun class.JournalBytes.__default () T@U)
(declare-fun Tagclass.JournalBytes.__default () T@U)
(declare-fun class.Bounds.__default () T@U)
(declare-fun Tagclass.Bounds.__default () T@U)
(declare-fun |##DiskLayout.Location.Location| () T@U)
(declare-fun Tagclass.DiskLayout.Location () T@U)
(declare-fun class.DiskLayout.Location () T@U)
(declare-fun class.DiskLayout.__default () T@U)
(declare-fun Tagclass.DiskLayout.__default () T@U)
(declare-fun class.PackedIntsLib.__default () T@U)
(declare-fun Tagclass.PackedIntsLib.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func5| () T@U)
(declare-fun |tytagFamily$_#PartialFunc5| () T@U)
(declare-fun |tytagFamily$_#TotalFunc5| () T@U)
(declare-fun |tytagFamily$_#Func6| () T@U)
(declare-fun |tytagFamily$_#PartialFunc6| () T@U)
(declare-fun |tytagFamily$_#TotalFunc6| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$JournalEntry () T@U)
(declare-fun tytagFamily$Header () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun tytagFamily$RangeStart () T@U)
(declare-fun tytagFamily$RangeEnd () T@U)
(declare-fun tytagFamily$SuccResult () T@U)
(declare-fun tytagFamily$SuccResultList () T@U)
(declare-fun tytagFamily$Op () T@U)
(declare-fun tytagFamily$ReqRead () T@U)
(declare-fun tytagFamily$ReqWrite () T@U)
(declare-fun tytagFamily$RespRead () T@U)
(declare-fun tytagFamily$RespWrite () T@U)
(declare-fun tytagFamily$DiskOp () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$InternalStep () T@U)
(declare-fun tytagFamily$Location () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6TypeInv6 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun Tclass.JournalistMarshallingModel.__default () T@U)
(declare-fun JournalistMarshallingModel.__default.cyclicSlice (T@U T@U T@U Int Int) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |JournalistMarshallingModel.__default.cyclicSlice#canCall| (T@U T@U Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.cyclicSlice#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun JournalistMarshallingModel.__default.withoutChecksums (T@U T@U Int) T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun |JournalistMarshallingModel.__default.withoutChecksums#canCall| (T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.withoutChecksums#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun JournalistMarshallingModel.__default.splice (T@U T@U Int T@U) T@U)
(declare-fun |JournalistMarshallingModel.__default.splice#canCall| (T@U Int T@U) Bool)
(declare-fun |JournalistMarshallingModel.__default.splice#requires| (T@U T@U Int T@U) Bool)
(declare-fun JournalistMarshallingModel.__default.writeOnto (T@U T@U Int Int T@U) T@U)
(declare-fun |JournalistMarshallingModel.__default.writeOnto#canCall| (T@U Int Int T@U) Bool)
(declare-fun DiskLayout.__default.NumJournalBlocks () Int)
(declare-fun |JournalistMarshallingModel.__default.writeOnto#requires| (T@U T@U Int Int T@U) Bool)
(declare-fun StartFuel_JournalistMarshallingModel._default.splice () T@U)
(declare-fun JournalistMarshallingModel.__default.splice__get (T@U Int Int T@U) Int)
(declare-fun |JournalistMarshallingModel.__default.splice__get#canCall| (T@U Int Int T@U) Bool)
(declare-fun |JournalistMarshallingModel.__default.splice__get#requires| (T@U Int Int T@U) Bool)
(declare-fun JournalistMarshallingModel.__default.writeIntOnto (T@U T@U Int Int Int) T@U)
(declare-fun |JournalistMarshallingModel.__default.writeIntOnto#canCall| (T@U Int Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.writeIntOnto#requires| (T@U T@U Int Int Int) Bool)
(declare-fun |PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| (Int) Bool)
(declare-fun PackedIntsLib.__default.pack__LittleEndian__Uint32 (T@U Int) T@U)
(declare-fun StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32 () T@U)
(declare-fun StartFuel_JournalistMarshallingModel._default.writeOnto () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun |JournalistMarshallingModel.__default.writeOnto#Handle| (T@U) T@U)
(declare-fun JournalistMarshallingModel.__default.writeOntoAgrees (T@U Int Int T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.writeOntoAgrees#canCall| (T@U Int Int T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.writeOntoAgrees#requires| (T@U Int Int T@U Int) Bool)
(declare-fun StartFuel_JournalistMarshallingModel._default.withoutChecksums () T@U)
(declare-fun |JournalistMarshallingModel.__default.writeIntOnto#Handle| (T@U) T@U)
(declare-fun JournalistMarshallingModel.__default.writeIntOntoAgrees (T@U Int Int Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.writeIntOntoAgrees#canCall| (T@U Int Int Int Int) Bool)
(declare-fun StartFuel_JournalistMarshallingModel._default.writeIntOnto () T@U)
(declare-fun |JournalistMarshallingModel.__default.writeIntOntoAgrees#requires| (T@U Int Int Int Int) Bool)
(declare-fun JournalistMarshallingModel.__default.writeHeader (T@U Int Int) T@U)
(declare-fun |JournalistMarshallingModel.__default.writeHeader#canCall| (T@U Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.writeHeader#requires| (T@U Int Int) Bool)
(declare-fun Tclass.Journal.JournalEntry () T@U)
(declare-fun JournalistMarshallingModel.__default.writeJournalEntries (T@U T@U Int Int T@U Int Int) T@U)
(declare-fun |JournalistMarshallingModel.__default.writeJournalEntries#canCall| (T@U Int Int T@U Int Int) Bool)
(declare-fun JournalRanges.__default.SumJournalEntries (T@U T@U) Int)
(declare-fun StartFuel_JournalistMarshallingModel._default.cyclicSlice () T@U)
(declare-fun |JournalistMarshallingModel.__default.writeJournalEntries#requires| (T@U T@U Int Int T@U Int Int) Bool)
(declare-fun Journal.JournalEntry.JournalInsert_q (T@U) Bool)
(declare-fun Journal.JournalEntry.key (T@U) T@U)
(declare-fun Journal.JournalEntry.value (T@U) T@U)
(declare-fun JournalistMarshallingModel.__default.fillInChecksums (T@U T@U Int Int) T@U)
(declare-fun |JournalistMarshallingModel.__default.fillInChecksums#canCall| (T@U Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.fillInChecksums#requires| (T@U T@U Int Int) Bool)
(declare-fun |CRC32__C.__default.crc32__c__padded#canCall| (T@U) Bool)
(declare-fun CRC32__C.__default.crc32__c__padded (T@U) T@U)
(declare-fun JournalistMarshallingModel.__default.hasHeader (T@U T@U T@U) Bool)
(declare-fun Tclass.JournalRanges.Header () T@U)
(declare-fun |JournalistMarshallingModel.__default.hasHeader#canCall| (T@U T@U) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasHeader#requires| (T@U T@U T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (T@U) Bool)
(declare-fun JournalRanges.Header.Header_q (T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32 (T@U T@U) Int)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun JournalRanges.Header.nentries (T@U) Int)
(declare-fun JournalRanges.Header.nblocks (T@U) Int)
(declare-fun JournalistMarshallingModel.__default.hasEntryAt (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntryAt#canCall| (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntryAt#requires| (T@U T@U Int) Bool)
(declare-fun JournalistMarshallingModel.__default.hasEntry (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntry#canCall| (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntry#requires| (T@U T@U Int) Bool)
(declare-fun |JournalRanges.__default.SumJournalEntries#canCall| (T@U) Bool)
(declare-fun JournalistMarshallingModel.__default.hasEntries (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntries#canCall| (T@U T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasEntries#requires| (T@U T@U Int) Bool)
(declare-fun JournalistMarshallingModel.__default.hasStuff (T@U Int T@U) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasStuff#canCall| (T@U Int T@U) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasStuff#requires| (T@U Int T@U) Bool)
(declare-fun |#JournalRanges.Header.Header| (Int Int) T@U)
(declare-fun StartFuel_JournalistMarshallingModel._default.hasHeader () T@U)
(declare-fun JournalistMarshallingModel.__default.hasChecksumAt (T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasChecksumAt#canCall| (T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasChecksumAt#requires| (T@U Int) Bool)
(declare-fun JournalistMarshallingModel.__default.hasChecksums (T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasChecksums#canCall| (T@U Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.hasChecksums#requires| (T@U Int) Bool)
(declare-fun JournalistMarshallingModel.__default.add__mod (Int Int Int) Int)
(declare-fun |JournalistMarshallingModel.__default.add__mod#canCall| (Int Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.add__mod#requires| (Int Int Int) Bool)
(declare-fun |JournalistMarshallingModel.__default.fillInChecksums#Handle| (T@U) T@U)
(declare-fun JournalistMarshallingModel.__default.marshallJournalEntries (T@U T@U Int Int Int) T@U)
(declare-fun |JournalistMarshallingModel.__default.marshallJournalEntries#canCall| (T@U Int Int Int) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntries (T@U T@U) Int)
(declare-fun StartFuel_JournalRanges._default.WeightJournalEntries () T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun JournalBytes.__default.JournalRangeOfByteSeq (T@U T@U) T@U)
(declare-fun StartFuel_JournalBytes._default.JournalRangeOfByteSeq () T@U)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.parseJournalRange (T@U T@U) T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun |JournalistMarshallingModel.__default.marshallJournalEntries#requires| (T@U T@U Int Int Int) Bool)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuel_JournalistMarshallingModel._default.writeJournalEntries () T@U)
(declare-fun MoreFuel_JournalRanges._default.WeightJournalEntries0 () T@U)
(declare-fun StartFuelAssert_JournalRanges._default.WeightJournalEntries () T@U)
(declare-fun StartFuel_JournalistMarshallingModel._default.fillInChecksums () T@U)
(declare-fun MoreFuel_JournalRanges._default.WeightJournalEntries1 () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#82| (T@U) T@U)
(declare-fun |lambda#78| (T@U T@U) T@U)
(declare-fun |lambda#79| (T@U Int Int) T@U)
(declare-fun |lambda#81| (T@U) T@U)
(declare-fun |lambda#80| (Bool) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#88| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#90| (T@U T@U) T@U)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.GetBeginOp| (T@U Int) T@U)
(declare-fun UI.Op.GetBeginOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetEndOp| (T@U Int) T@U)
(declare-fun UI.Op.GetEndOp_q (T@U) Bool)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#Journal.JournalEntry.JournalInsert| (T@U T@U) T@U)
(declare-fun |$IsA#Journal.JournalEntry| (T@U) Bool)
(declare-fun |Journal.JournalEntry#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Journal.__default () T@U)
(declare-fun Journal.__default.JournalEntriesForUIOp (T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOp#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOp#requires| (T@U) Bool)
(declare-fun Journal.__default.JournalEntriesForUIOps (T@U T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOps#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOps#requires| (T@U T@U) Bool)
(declare-fun Tclass.NativePackedInts.__default () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64 (T@U T@U) Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (T@U Int) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| (T@U T@U Int) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (T@U Int) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| (T@U T@U Int) Bool)
(declare-fun |$IsA#JournalRanges.Header| (T@U) Bool)
(declare-fun |JournalRanges.Header#Equal| (T@U T@U) Bool)
(declare-fun Tclass.JournalRanges.__default () T@U)
(declare-fun JournalRanges.__default.JournalRangeLen (T@U) Int)
(declare-fun |JournalRanges.__default.JournalRangeLen#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeLen#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangePrefix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangePrefix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangePrefix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeSuffix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeConcat (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.JournalRangeConcat#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeConcat#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangeEmpty () T@U)
(declare-fun |JournalRanges.__default.JournalRangeEmpty#requires| () Bool)
(declare-fun JournalRanges.__default.JournalBlocksI (T@U T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalBlocksI#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalBlocksI#requires| (T@U T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalBlocks (T@U) T@U)
(declare-fun |JournalRanges.__default.JournalBlocks#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalBlocks#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalBlockGet (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalBlockGet#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalBlockGet#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.parseHeader (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.parseHeader#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.parseHeader#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.parseEntries (T@U T@U Int Int) T@U)
(declare-fun |JournalRanges.__default.parseEntries#canCall| (T@U Int Int) Bool)
(declare-fun |JournalRanges.__default.parseEntries#requires| (T@U T@U Int Int) Bool)
(declare-fun |KeyType.__default.MaxLen#canCall| () Bool)
(declare-fun JournalRanges.__default.parseJournalRangeOfBytes (T@U Int) T@U)
(declare-fun |JournalRanges.__default.parseJournalRangeOfBytes#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.parseJournalRangeOfBytes#requires| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.parseJournalRange#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.parseJournalRange#requires| (T@U T@U) Bool)
(declare-fun StartFuel_JournalRanges._default.parseHeader () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun JournalRanges.__default.JournalRangeParses (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntryUint64 (T@U) Int)
(declare-fun |JournalRanges.__default.WeightJournalEntryUint64#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntryUint64#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntry (T@U) Int)
(declare-fun |JournalRanges.__default.WeightJournalEntry#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntry#requires| (T@U) Bool)
(declare-fun |JournalRanges.__default.SumJournalEntries#requires| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntries#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntries#requires| (T@U T@U) Bool)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#96| (T@U T@U T@U) T@U)
(declare-fun |lambda#97| (T@U) T@U)
(declare-fun Tclass.CRC32__C.__default () T@U)
(declare-fun |CRC32__C.__default.crc32__c__padded#requires| (T@U) Bool)
(declare-fun |#AsyncDisk.ReqRead.ReqRead| (Int Int) T@U)
(declare-fun AsyncDisk.ReqRead.ReqRead_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.ReqRead () T@U)
(declare-fun AsyncDisk.ReqRead.addr (T@U) Int)
(declare-fun AsyncDisk.ReqRead.len (T@U) Int)
(declare-fun |$IsA#AsyncDisk.ReqRead| (T@U) Bool)
(declare-fun |AsyncDisk.ReqRead#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.ReqWrite.ReqWrite| (Int T@U) T@U)
(declare-fun AsyncDisk.ReqWrite.ReqWrite_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.ReqWrite () T@U)
(declare-fun AsyncDisk.ReqWrite.addr (T@U) Int)
(declare-fun AsyncDisk.ReqWrite.bytes (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.ReqWrite| (T@U) Bool)
(declare-fun |AsyncDisk.ReqWrite#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.RespRead.RespRead| (Int T@U) T@U)
(declare-fun AsyncDisk.RespRead.RespRead_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.RespRead () T@U)
(declare-fun AsyncDisk.RespRead.addr (T@U) Int)
(declare-fun AsyncDisk.RespRead.bytes (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.RespRead| (T@U) Bool)
(declare-fun |AsyncDisk.RespRead#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.RespWrite.RespWrite| (Int Int) T@U)
(declare-fun AsyncDisk.RespWrite.RespWrite_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.RespWrite () T@U)
(declare-fun AsyncDisk.RespWrite.addr (T@U) Int)
(declare-fun AsyncDisk.RespWrite.len (T@U) Int)
(declare-fun |$IsA#AsyncDisk.RespWrite| (T@U) Bool)
(declare-fun |AsyncDisk.RespWrite#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.DiskOp.ReqReadOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqReadOp_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.DiskOp () T@U)
(declare-fun AsyncDisk.DiskOp.id (T@U) Int)
(declare-fun AsyncDisk.DiskOp.reqRead (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.ReqWriteOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqWriteOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.reqWrite (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.ReqWrite2Op| (Int Int T@U T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqWrite2Op_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.id1 (T@U) Int)
(declare-fun AsyncDisk.DiskOp.id2 (T@U) Int)
(declare-fun AsyncDisk.DiskOp.reqWrite1 (T@U) T@U)
(declare-fun AsyncDisk.DiskOp.reqWrite2 (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.RespReadOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.RespReadOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.respRead (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.RespWriteOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.RespWriteOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.respWrite (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.NoDiskOp| () T@U)
(declare-fun AsyncDisk.DiskOp.NoDiskOp_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.DiskOp| (T@U) Bool)
(declare-fun |AsyncDisk.DiskOp#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.Variables.Variables| (T@U T@U T@U T@U T@U) T@U)
(declare-fun AsyncDisk.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.Variables () T@U)
(declare-fun AsyncDisk.Variables.reqReads (T@U) T@U)
(declare-fun AsyncDisk.Variables.reqWrites (T@U) T@U)
(declare-fun AsyncDisk.Variables.respReads (T@U) T@U)
(declare-fun AsyncDisk.Variables.respWrites (T@U) T@U)
(declare-fun AsyncDisk.Variables.contents (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.Variables| (T@U) Bool)
(declare-fun |AsyncDisk.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.Step.RecvReadStep| () T@U)
(declare-fun AsyncDisk.Step.RecvReadStep_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.Step () T@U)
(declare-fun |#AsyncDisk.Step.RecvWriteStep| () T@U)
(declare-fun AsyncDisk.Step.RecvWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.RecvWrite2Step| () T@U)
(declare-fun AsyncDisk.Step.RecvWrite2Step_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.AckReadStep| () T@U)
(declare-fun AsyncDisk.Step.AckReadStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.AckWriteStep| () T@U)
(declare-fun AsyncDisk.Step.AckWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.StutterStep| () T@U)
(declare-fun AsyncDisk.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.Step| (T@U) Bool)
(declare-fun |AsyncDisk.Step#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.InternalStep.ProcessReadFailureStep| (Int T@U) T@U)
(declare-fun AsyncDisk.InternalStep.ProcessReadFailureStep_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.InternalStep () T@U)
(declare-fun AsyncDisk.InternalStep.id (T@U) Int)
(declare-fun AsyncDisk.InternalStep.fakeContents (T@U) T@U)
(declare-fun |#AsyncDisk.InternalStep.ProcessWriteStep| (Int) T@U)
(declare-fun AsyncDisk.InternalStep.ProcessWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.InternalStep.HavocConflictingWritesStep| (Int Int) T@U)
(declare-fun AsyncDisk.InternalStep.HavocConflictingWritesStep_q (T@U) Bool)
(declare-fun AsyncDisk.InternalStep.id_k (T@U) Int)
(declare-fun |#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (Int Int) T@U)
(declare-fun AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.InternalStep| (T@U) Bool)
(declare-fun |AsyncDisk.InternalStep#Equal| (T@U T@U) Bool)
(declare-fun Tclass.AsyncDisk.__default () T@U)
(declare-fun AsyncDisk.__default.Init (T@U) Bool)
(declare-fun |AsyncDisk.__default.Init#canCall| (T@U) Bool)
(declare-fun |AsyncDisk.__default.Init#requires| (T@U) Bool)
(declare-fun AsyncDisk.__default.RecvRead (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvRead#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvRead#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.RecvWrite (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.RecvWrite2 (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite2#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite2#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.AckRead (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckRead#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckRead#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun AsyncDisk.__default.AckWrite (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckWrite#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckWrite#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Stutter (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Stutter#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Stutter#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ChecksumChecksOut (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.ChecksumChecksOut#canCall| (T@U) Bool)
(declare-fun |AsyncDisk.__default.ChecksumChecksOut#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ChecksumsCheckOutForSlice (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| (T@U T@U Int Int) Bool)
(declare-fun StartFuel_AsyncDisk._default.ChecksumChecksOut () T@U)
(declare-fun AsyncDisk.__default.AllChecksumsCheckOut (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AllChecksumsCheckOut#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AllChecksumsCheckOut#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ProcessReadFailure (T@U T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.ProcessReadFailure#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.ProcessReadFailure#requires| (T@U T@U Int T@U) Bool)
(declare-fun AsyncDisk.__default.splice (T@U T@U Int T@U) T@U)
(declare-fun |AsyncDisk.__default.splice#canCall| (T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.splice#requires| (T@U T@U Int T@U) Bool)
(declare-fun AsyncDisk.__default.ProcessWrite (T@U T@U Int) Bool)
(declare-fun |AsyncDisk.__default.ProcessWrite#canCall| (T@U T@U Int) Bool)
(declare-fun |AsyncDisk.__default.ProcessWrite#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_AsyncDisk._default.splice () T@U)
(declare-fun AsyncDisk.__default.overlap (Int Int Int Int) Bool)
(declare-fun |AsyncDisk.__default.overlap#requires| (Int Int Int Int) Bool)
(declare-fun AsyncDisk.__default.HavocConflictingWrites (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWrites#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWrites#requires| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.overlap#canCall| (Int Int Int Int) Bool)
(declare-fun AsyncDisk.__default.HavocConflictingWriteRead (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWriteRead#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWriteRead#requires| (T@U T@U Int Int) Bool)
(declare-fun AsyncDisk.__default.NextInternalStep (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternalStep#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternalStep#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.NextInternal (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternal#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternal#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Crash (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Crash#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Crash#requires| (T@U T@U) Bool)
(declare-fun Tclass.JournalBytes.__default () T@U)
(declare-fun JournalBytes.__default.JournalBlockOfByteSeq (T@U T@U) T@U)
(declare-fun |JournalBytes.__default.JournalBlockOfByteSeq#canCall| (T@U) Bool)
(declare-fun |JournalBytes.__default.JournalBlockOfByteSeq#requires| (T@U T@U) Bool)
(declare-fun |JournalBytes.__default.JournalRangeOfByteSeq#canCall| (T@U) Bool)
(declare-fun |JournalBytes.__default.JournalRangeOfByteSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_JournalBytes._default.JournalBlockOfByteSeq () T@U)
(declare-fun Tclass.Bounds.__default () T@U)
(declare-fun Bounds.__default.NodeBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndexUint64 () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#canCall| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.SuperblockSizeUint64 () Int)
(declare-fun Bounds.__default.DiskNumJournalBlocksUint64 () Int)
(declare-fun Bounds.__default.JournalBlockSizeUint64 () Int)
(declare-fun Bounds.__default.IndirectionTableBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.SuperblockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.LargestBlockSizeOfAnyTypeUint64 () Int)
(declare-fun |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeightUint64 () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxCacheSizeUint64 () Int)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxNumChildrenUint64 () Int)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#requires| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeightUint64 () Int)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#requires| () Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocksUint64 () Int)
(declare-fun |Bounds.__default.NumBlocksUint64#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSizeUint64 () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSize#requires| () Bool)
(declare-fun Bounds.__default.SuperblockSize () Int)
(declare-fun |Bounds.__default.IndirectionTableBlockSize#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableBlockSize () Int)
(declare-fun |Bounds.__default.NodeBlockSize#requires| () Bool)
(declare-fun Bounds.__default.NodeBlockSize () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndex#requires| () Bool)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#canCall| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndex () Int)
(declare-fun |Bounds.__default.MaxNumChildren#requires| () Bool)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxNumChildren () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeight () Int)
(declare-fun |Bounds.__default.MaxCacheSize#requires| () Bool)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxCacheSize () Int)
(declare-fun |Bounds.__default.FlushTriggerWeight#requires| () Bool)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeight () Int)
(declare-fun |Bounds.__default.NumBlocks#requires| () Bool)
(declare-fun |Bounds.__default.NumBlocksUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocks () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSize#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSize () Int)
(declare-fun |Bounds.__default.JournalBlockSize#requires| () Bool)
(declare-fun Bounds.__default.JournalBlockSize () Int)
(declare-fun |Bounds.__default.DiskNumJournalBlocks#requires| () Bool)
(declare-fun Bounds.__default.DiskNumJournalBlocks () Int)
(declare-fun |#DiskLayout.Location.Location| (Int Int) T@U)
(declare-fun DiskLayout.Location.Location_q (T@U) Bool)
(declare-fun Tclass.DiskLayout.Location () T@U)
(declare-fun DiskLayout.Location.addr (T@U) Int)
(declare-fun DiskLayout.Location.len (T@U) Int)
(declare-fun |$IsA#DiskLayout.Location| (T@U) Bool)
(declare-fun |DiskLayout.Location#Equal| (T@U T@U) Bool)
(declare-fun Tclass.DiskLayout.__default () T@U)
(declare-fun |DiskLayout.__default.NumJournalBlocks#requires| () Bool)
(declare-fun DiskLayout.__default.IndirectionTableMaxLength () Int)
(declare-fun |DiskLayout.__default.IndirectionTableMaxLength#requires| () Bool)
(declare-fun DiskLayout.__default.IndirectionTable1Addr () Int)
(declare-fun |DiskLayout.__default.IndirectionTable1Addr#requires| () Bool)
(declare-fun |DiskLayout.__default.NumJournalBlocks#canCall| () Bool)
(declare-fun DiskLayout.__default.IndirectionTable2Addr () Int)
(declare-fun |DiskLayout.__default.IndirectionTable2Addr#requires| () Bool)
(declare-fun |DiskLayout.__default.IndirectionTable1Addr#canCall| () Bool)
(declare-fun |DiskLayout.__default.IndirectionTableMaxLength#canCall| () Bool)
(declare-fun DiskLayout.__default.JournalStartAddr () Int)
(declare-fun |DiskLayout.__default.JournalStartAddr#requires| () Bool)
(declare-fun DiskLayout.__default.JournalEndAddr () Int)
(declare-fun |DiskLayout.__default.JournalEndAddr#requires| () Bool)
(declare-fun |DiskLayout.__default.JournalStartAddr#canCall| () Bool)
(declare-fun DiskLayout.__default.JournalPoint (Int) Int)
(declare-fun |DiskLayout.__default.JournalPoint#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.JournalPoint#requires| (Int) Bool)
(declare-fun DiskLayout.__default.ValidIndirectionTableAddr (Int) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableAddr#requires| (Int) Bool)
(declare-fun |DiskLayout.__default.IndirectionTable2Addr#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidNodeAddr (T@U Int) Bool)
(declare-fun |DiskLayout.__default.ValidNodeAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.ValidNodeAddr#requires| (T@U Int) Bool)
(declare-fun DiskLayout.__default.ValidJournalLocation (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.ValidJournalLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidJournalLocation#requires| (T@U T@U) Bool)
(declare-fun DiskLayout.__default.ValidIndirectionTableLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableLocation#canCall| (T@U) Bool)
(declare-fun StartFuel_DiskLayout._default.ValidJournalLocation () T@U)
(declare-fun |DiskLayout.__default.ValidIndirectionTableLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.ValidNodeLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidNodeLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidNodeLocation#requires| (T@U) Bool)
(declare-fun StartFuel_DiskLayout._default.ValidNodeAddr () T@U)
(declare-fun DiskLayout.__default.Superblock1Location () T@U)
(declare-fun |DiskLayout.__default.Superblock1Location#requires| () Bool)
(declare-fun DiskLayout.__default.Superblock2Location () T@U)
(declare-fun |DiskLayout.__default.Superblock2Location#requires| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblock1Location (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock1Location#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock1Location#requires| (T@U) Bool)
(declare-fun |DiskLayout.__default.Superblock1Location#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblock2Location (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock2Location#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock2Location#requires| (T@U) Bool)
(declare-fun |DiskLayout.__default.Superblock2Location#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblockLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblockLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblockLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.ValidLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.overlap (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.overlap#canCall| (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.overlap#requires| (T@U T@U) Bool)
(declare-fun DiskLayout.__default.JournalRangeLocation (Int Int) T@U)
(declare-fun |DiskLayout.__default.JournalRangeLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalRangeLocation#requires| (Int Int) Bool)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation0 () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.ValidJournalLocation () T@U)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation1 () T@U)
(declare-fun DiskLayout.__default.locContainedInCircularJournalRange (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locContainedInCircularJournalRange#canCall| (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locContainedInCircularJournalRange#requires| (T@U Int Int) Bool)
(declare-fun DiskLayout.__default.locDisjointFromCircularJournalRange (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locDisjointFromCircularJournalRange#requires| (T@U Int Int) Bool)
(declare-fun DiskLayout.__default.JournalPosAdd (Int Int) Int)
(declare-fun |DiskLayout.__default.JournalPosAdd#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.JournalFrontLocation (Int Int) T@U)
(declare-fun |DiskLayout.__default.JournalFrontLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalFrontLocation#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.JournalBackLocation (Int Int) T@U)
(declare-fun |DiskLayout.__default.JournalBackLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalBackLocation#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.LocationSub (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.LocationSub#canCall| (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.LocationSub#requires| (T@U T@U) Bool)
(declare-fun DiskLayout.__default.JournalBlockIdx (T@U T@U) Int)
(declare-fun |DiskLayout.__default.JournalBlockIdx#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.JournalBlockIdx#requires| (T@U T@U) Bool)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation2 () T@U)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation3 () T@U)
(declare-fun DiskLayout.__default.otherIndirectionTableAddr (Int) Int)
(declare-fun |DiskLayout.__default.otherIndirectionTableAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.otherIndirectionTableAddr#requires| (Int) Bool)
(declare-fun Tclass.PackedIntsLib.__default () T@U)
(declare-fun |PackedIntsLib.__default.pack__LittleEndian__Uint32#requires| (T@U Int) Bool)
(declare-fun MapType8Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType8Type (T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type class.JournalistMarshallingModel.__default) ClassNameType)) (= (type Tagclass.JournalistMarshallingModel.__default) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type Tagclass.Journal.JournalEntry) TyTagType)) (= (type Tagclass.JournalRanges.Header) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.GetBeginOp|) DtCtorIdType)) (= (type |##UI.Op.GetEndOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##Journal.JournalEntry.JournalInsert|) DtCtorIdType)) (= (type class.Journal.JournalEntry) ClassNameType)) (= (type class.Journal.__default) ClassNameType)) (= (type Tagclass.Journal.__default) TyTagType)) (= (type class.NativePackedInts.__default) ClassNameType)) (= (type Tagclass.NativePackedInts.__default) TyTagType)) (= (type |##JournalRanges.Header.Header|) DtCtorIdType)) (= (type class.JournalRanges.Header) ClassNameType)) (= (type class.JournalRanges.__default) ClassNameType)) (= (type Tagclass.JournalRanges.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.CRC32__C.__default) ClassNameType)) (= (type Tagclass.CRC32__C.__default) TyTagType)) (= (type |##AsyncDisk.ReqRead.ReqRead|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.ReqRead) TyTagType)) (= (type class.AsyncDisk.ReqRead) ClassNameType)) (= (type |##AsyncDisk.ReqWrite.ReqWrite|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.ReqWrite) TyTagType)) (= (type class.AsyncDisk.ReqWrite) ClassNameType)) (= (type |##AsyncDisk.RespRead.RespRead|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.RespRead) TyTagType)) (= (type class.AsyncDisk.RespRead) ClassNameType)) (= (type |##AsyncDisk.RespWrite.RespWrite|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.RespWrite) TyTagType)) (= (type class.AsyncDisk.RespWrite) ClassNameType)) (= (type |##AsyncDisk.DiskOp.ReqReadOp|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.DiskOp) TyTagType)) (= (type |##AsyncDisk.DiskOp.ReqWriteOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.ReqWrite2Op|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.RespReadOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.RespWriteOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.NoDiskOp|) DtCtorIdType)) (= (type class.AsyncDisk.DiskOp) ClassNameType)) (= (type |##AsyncDisk.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.Variables) TyTagType)) (= (type class.AsyncDisk.Variables) ClassNameType)) (= (type |##AsyncDisk.Step.RecvReadStep|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.Step) TyTagType)) (= (type |##AsyncDisk.Step.RecvWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.RecvWrite2Step|) DtCtorIdType)) (= (type |##AsyncDisk.Step.AckReadStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.AckWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.StutterStep|) DtCtorIdType)) (= (type class.AsyncDisk.Step) ClassNameType)) (= (type |##AsyncDisk.InternalStep.ProcessReadFailureStep|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.InternalStep) TyTagType)) (= (type |##AsyncDisk.InternalStep.ProcessWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.InternalStep.HavocConflictingWritesStep|) DtCtorIdType)) (= (type |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|) DtCtorIdType)) (= (type class.AsyncDisk.InternalStep) ClassNameType)) (= (type class.AsyncDisk.__default) ClassNameType)) (= (type Tagclass.AsyncDisk.__default) TyTagType)) (= (type class.JournalBytes.__default) ClassNameType)) (= (type Tagclass.JournalBytes.__default) TyTagType)) (= (type class.Bounds.__default) ClassNameType)) (= (type Tagclass.Bounds.__default) TyTagType)) (= (type |##DiskLayout.Location.Location|) DtCtorIdType)) (= (type Tagclass.DiskLayout.Location) TyTagType)) (= (type class.DiskLayout.Location) ClassNameType)) (= (type class.DiskLayout.__default) ClassNameType)) (= (type Tagclass.DiskLayout.__default) TyTagType)) (= (type class.PackedIntsLib.__default) ClassNameType)) (= (type Tagclass.PackedIntsLib.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func5|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#Func6|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$JournalEntry) TyTagFamilyType)) (= (type tytagFamily$Header) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$Key) TyTagFamilyType)) (= (type tytagFamily$Value) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$Delta) TyTagFamilyType)) (= (type tytagFamily$Message) TyTagFamilyType)) (= (type tytagFamily$RangeStart) TyTagFamilyType)) (= (type tytagFamily$RangeEnd) TyTagFamilyType)) (= (type tytagFamily$SuccResult) TyTagFamilyType)) (= (type tytagFamily$SuccResultList) TyTagFamilyType)) (= (type tytagFamily$Op) TyTagFamilyType)) (= (type tytagFamily$ReqRead) TyTagFamilyType)) (= (type tytagFamily$ReqWrite) TyTagFamilyType)) (= (type tytagFamily$RespRead) TyTagFamilyType)) (= (type tytagFamily$RespWrite) TyTagFamilyType)) (= (type tytagFamily$DiskOp) TyTagFamilyType)) (= (type tytagFamily$Variables) TyTagFamilyType)) (= (type tytagFamily$Step) TyTagFamilyType)) (= (type tytagFamily$InternalStep) TyTagFamilyType)) (= (type tytagFamily$Location) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL class.JournalistMarshallingModel.__default Tagclass.JournalistMarshallingModel.__default Tagclass.NativeTypes.byte Tagclass.NativeTypes.uint64 Tagclass.NativeTypes.uint32 Tagclass.Journal.JournalEntry Tagclass.JournalRanges.Header Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default Tagclass.KeyType.Key class.KeyType.__default Tagclass.KeyType.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default class.SequencesLite.__default Tagclass.SequencesLite.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Delta Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.GetBeginOp| |##UI.Op.GetEndOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##Journal.JournalEntry.JournalInsert| class.Journal.JournalEntry class.Journal.__default Tagclass.Journal.__default class.NativePackedInts.__default Tagclass.NativePackedInts.__default |##JournalRanges.Header.Header| class.JournalRanges.Header class.JournalRanges.__default Tagclass.JournalRanges.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.CRC32__C.__default Tagclass.CRC32__C.__default |##AsyncDisk.ReqRead.ReqRead| Tagclass.AsyncDisk.ReqRead class.AsyncDisk.ReqRead |##AsyncDisk.ReqWrite.ReqWrite| Tagclass.AsyncDisk.ReqWrite class.AsyncDisk.ReqWrite |##AsyncDisk.RespRead.RespRead| Tagclass.AsyncDisk.RespRead class.AsyncDisk.RespRead |##AsyncDisk.RespWrite.RespWrite| Tagclass.AsyncDisk.RespWrite class.AsyncDisk.RespWrite |##AsyncDisk.DiskOp.ReqReadOp| Tagclass.AsyncDisk.DiskOp |##AsyncDisk.DiskOp.ReqWriteOp| |##AsyncDisk.DiskOp.ReqWrite2Op| |##AsyncDisk.DiskOp.RespReadOp| |##AsyncDisk.DiskOp.RespWriteOp| |##AsyncDisk.DiskOp.NoDiskOp| class.AsyncDisk.DiskOp |##AsyncDisk.Variables.Variables| Tagclass.AsyncDisk.Variables class.AsyncDisk.Variables |##AsyncDisk.Step.RecvReadStep| Tagclass.AsyncDisk.Step |##AsyncDisk.Step.RecvWriteStep| |##AsyncDisk.Step.RecvWrite2Step| |##AsyncDisk.Step.AckReadStep| |##AsyncDisk.Step.AckWriteStep| |##AsyncDisk.Step.StutterStep| class.AsyncDisk.Step |##AsyncDisk.InternalStep.ProcessReadFailureStep| Tagclass.AsyncDisk.InternalStep |##AsyncDisk.InternalStep.ProcessWriteStep| |##AsyncDisk.InternalStep.HavocConflictingWritesStep| |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep| class.AsyncDisk.InternalStep class.AsyncDisk.__default Tagclass.AsyncDisk.__default class.JournalBytes.__default Tagclass.JournalBytes.__default class.Bounds.__default Tagclass.Bounds.__default |##DiskLayout.Location.Location| Tagclass.DiskLayout.Location class.DiskLayout.Location class.DiskLayout.__default Tagclass.DiskLayout.__default class.PackedIntsLib.__default Tagclass.PackedIntsLib.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func5| |tytagFamily$_#PartialFunc5| |tytagFamily$_#TotalFunc5| |tytagFamily$_#Func6| |tytagFamily$_#PartialFunc6| |tytagFamily$_#TotalFunc6| |tytagFamily$_tuple#2| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$byte tytagFamily$uint64 tytagFamily$uint32 tytagFamily$JournalEntry tytagFamily$Header tytagFamily$sbyte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$int64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$Key tytagFamily$Value tytagFamily$Option tytagFamily$Delta tytagFamily$Message tytagFamily$RangeStart tytagFamily$RangeEnd tytagFamily$SuccResult tytagFamily$SuccResultList tytagFamily$Op tytagFamily$ReqRead tytagFamily$ReqWrite tytagFamily$RespRead tytagFamily$RespWrite tytagFamily$DiskOp tytagFamily$Variables tytagFamily$Step tytagFamily$InternalStep tytagFamily$Location) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@167 arg1@@80 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@167 arg1@@80 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |858| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@172 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@172 arg1@@81 arg2@@33 arg3@@13 arg4@@4)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@173 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@173 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) arg0@@173) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@173 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@174 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@174 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@174 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@175 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@175 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@175 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@176 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@176 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@176 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@177 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@177 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@177 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@178 T@U) (arg1@@87 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@178)))) (= (type (MapType4Select arg0@@178 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@178 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@179 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@88))) (= (type (MapType4Store arg0@@179 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@179 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@54)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@180 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@180 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@180 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@181 T@U) (arg1@@90 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@181 arg1@@90 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@181 arg1@@90 arg2@@42)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2))) :qid |unknown.0:0| :skolemid |859| :pattern ( (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@16 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0))) (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) :qid |unknown.0:0| :skolemid |860| :pattern ( (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@17 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@182 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@182 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |861| :pattern ( (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@18 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@17 t3@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |862| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2))) :qid |unknown.0:0| :skolemid |863| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@18 t3@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |864| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3))) :qid |unknown.0:0| :skolemid |865| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@19 t3@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |866| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4))) :qid |unknown.0:0| :skolemid |867| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@20 t3@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |868| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@21 t3@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |870| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@22 t3@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |872| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@23 t3@@8))))) (= (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |874| :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (|Set#Empty| BoxType)))) (= (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9))) :qid |unknown.0:0| :skolemid |875| :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))) ($IsBox (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10) t3@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |876| :pattern ( (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10)) )))) :qid |unknown.0:0| :skolemid |877| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |878| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t3@@11)) ($IsBox bx@@55 u3)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@55 t3@@11)) :pattern ( ($IsBox bx@@55 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |882| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (=> (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (Requires3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |883| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |884| :pattern ( (Apply3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) :pattern ( (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) )))) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) (Requires3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ($IsAllocBox (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12) t3@@13 h@@44))) :qid |unknown.0:0| :skolemid |886| :pattern ( (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ))) :qid |unknown.0:0| :skolemid |887| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44)) )))
(assert (forall ((arg0@@183 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@183 arg1@@92 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@183 arg1@@92 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@184)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@184)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |889| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@185)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@185)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@186)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@186)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@187)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |893| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@3| |#$T0@@46|) ($IsBox |x1#0@@1| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |894| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) ))))) :qid |unknown.0:0| :skolemid |895| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@188 arg1@@93 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@188 arg1@@93 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |897| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@189)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@189)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|)) :qid |unknown.0:0| :skolemid |898| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@190)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@190)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |899| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@191)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@191)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@192)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@4| |#$T0@@54|) ($IsBox |x1#0@@2| |#$T1@@38|)) ($IsBox |x2#0@@0| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0|)) :qid |unknown.0:0| :skolemid |903| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))))) :qid |unknown.0:0| :skolemid |904| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15))) :qid |unknown.0:0| :skolemid |905| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) )))
(assert (forall ((arg0@@193 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@193 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@193 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |906| :pattern ( (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@194)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@194)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@195)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@195)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |908| :pattern ( (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@196)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@196)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |909| :pattern ( (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@197)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@197)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@198)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |912| :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@199 T@T) (arg1@@95 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@199 arg1@@95 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@200 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@200 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@200) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@200 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@201 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@201 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@97) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@201 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@202 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@202 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@202 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@203 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@203 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@203 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@204 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@204 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@204 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@205 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@205 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@205 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@206 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@206)))) (= (type (MapType5Select arg0@@206 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@206 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@207 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@103))) (= (type (MapType5Store arg0@@207 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@207 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@60)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@61 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@208 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@208 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@208 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@209 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@209 arg1@@105 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@209 arg1@@105 arg2@@57)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13 bx3))) :qid |unknown.0:0| :skolemid |913| :pattern ( (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14 bx3@@0))) (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) )))
(assert (forall ((arg0@@210 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@210 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@210 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@59) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59)))) :qid |unknown.0:0| :skolemid |915| :pattern ( (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@59)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |916| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2))) :qid |unknown.0:0| :skolemid |917| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |918| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |920| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4))) :qid |unknown.0:0| :skolemid |921| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |922| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5))) :qid |unknown.0:0| :skolemid |923| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |924| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6))) :qid |unknown.0:0| :skolemid |925| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |926| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |928| :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9))) :qid |unknown.0:0| :skolemid |929| :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))) ($IsBox (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |930| :pattern ( (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |931| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@3)) ($IsBox bx@@60 t0@@88)) :qid |unknown.0:0| :skolemid |932| :pattern ( ($IsBox bx@@60 u0@@3)) :pattern ( ($IsBox bx@@60 t0@@88)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@2)) ($IsBox bx@@61 t1@@64)) :qid |unknown.0:0| :skolemid |933| :pattern ( ($IsBox bx@@61 u1@@2)) :pattern ( ($IsBox bx@@61 t1@@64)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@1)) ($IsBox bx@@62 t2@@41)) :qid |unknown.0:0| :skolemid |934| :pattern ( ($IsBox bx@@62 u2@@1)) :pattern ( ($IsBox bx@@62 t2@@41)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u3@@0)) ($IsBox bx@@63 t3@@26)) :qid |unknown.0:0| :skolemid |935| :pattern ( ($IsBox bx@@63 u3@@0)) :pattern ( ($IsBox bx@@63 t3@@26)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t4@@11)) ($IsBox bx@@64 u4)) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@64 t4@@11)) :pattern ( ($IsBox bx@@64 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |937| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@11 t3@@27) ($IsAllocBox bx3@@11 t3@@27 h@@49))) (Requires4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Apply4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) :pattern ( (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@12 t3@@28 h@@50)) (Requires4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ($IsAllocBox (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12) t4@@13 h@@50))) :qid |unknown.0:0| :skolemid |941| :pattern ( (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50)) )))
(assert (forall ((arg0@@211 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@211 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@211 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |943| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@212 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@212)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@212)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@64|)) :qid |unknown.0:0| :skolemid |944| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@213 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@213)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@213)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@49|)) :qid |unknown.0:0| :skolemid |945| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@214)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@214)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |946| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@215)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@216)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |949| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@5| |#$T0@@70|) ($IsBox |x1#0@@3| |#$T1@@54|)) ($IsBox |x2#0@@1| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |950| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |951| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16))) :qid |unknown.0:0| :skolemid |952| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@217 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@217 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |953| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@218)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |954| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@219)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |955| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@220)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@220)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@221)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@222)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |960| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |961| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17))) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)) )))
(assert (forall ((arg0@@223 T@U) (arg1@@109 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@28 T@U) (arg5@@15 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@223 arg1@@109 arg2@@61 arg3@@39 arg4@@28 arg5@@15)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@223 arg1@@109 arg2@@61 arg3@@39 arg4@@28 arg5@@15)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$T4| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@94|) TyType)) (and (= (Tag (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) Tagclass._System.___hFunc5) (= (TagFamily (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) |tytagFamily$_#Func5|))) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass._System.___hFunc5 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@24| |#$T4| |#$R@@94|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@224)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@224)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$T4@@0| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$R@@95|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |964| :pattern ( (Tclass._System.___hFunc5 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$R@@95|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@225)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@225)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$T4@@1| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$R@@96|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |965| :pattern ( (Tclass._System.___hFunc5 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$R@@96|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@226)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@226)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$T4@@2| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$R@@97|)) |#$T2@@49|)) :qid |unknown.0:0| :skolemid |966| :pattern ( (Tclass._System.___hFunc5 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$R@@97|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@227)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@227)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$T4@@3| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$R@@98|)) |#$T3@@28|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hFunc5 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$R@@98|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@228)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@228)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$T4@@4| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$R@@99|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hFunc5 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$R@@99|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@229)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@229)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$T4@@5| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$R@@100|)) |#$R@@100|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hFunc5 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$R@@100|)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$T4@@6| T@U) (|#$R@@101| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@101|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|)))) :qid |unknown.0:0| :skolemid |970| :pattern ( ($IsBox bx@@67 (Tclass._System.___hFunc5 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$R@@101|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@230 T@T) (arg1@@110 T@T) (arg2@@62 T@T) (arg3@@40 T@T) (arg4@@29 T@T) (arg5@@16 T@T) (arg6@@6 T@T) ) (! (= (Ctor (MapType6Type arg0@@230 arg1@@110 arg2@@62 arg3@@40 arg4@@29 arg5@@16 arg6@@6)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@231 T@T) (arg1@@111 T@T) (arg2@@63 T@T) (arg3@@41 T@T) (arg4@@30 T@T) (arg5@@17 T@T) (arg6@@7 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@231 arg1@@111 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@7)) arg0@@231) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@231 arg1@@111 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@7)) ))) (forall ((arg0@@232 T@T) (arg1@@112 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@31 T@T) (arg5@@18 T@T) (arg6@@8 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@232 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@8)) arg1@@112) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@232 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@8)) ))) (forall ((arg0@@233 T@T) (arg1@@113 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@32 T@T) (arg5@@19 T@T) (arg6@@9 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@233 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@9)) arg2@@65) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@233 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@9)) ))) (forall ((arg0@@234 T@T) (arg1@@114 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@33 T@T) (arg5@@20 T@T) (arg6@@10 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@234 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@10)) arg3@@44) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@234 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@10)) ))) (forall ((arg0@@235 T@T) (arg1@@115 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@34 T@T) (arg5@@21 T@T) (arg6@@11 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@235 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@11)) arg4@@34) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@235 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@11)) ))) (forall ((arg0@@236 T@T) (arg1@@116 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@35 T@T) (arg5@@22 T@T) (arg6@@12 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@236 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@12)) arg5@@22) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@236 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@12)) ))) (forall ((arg0@@237 T@T) (arg1@@117 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@36 T@T) (arg5@@23 T@T) (arg6@@13 T@T) ) (! (= (MapType6TypeInv6 (MapType6Type arg0@@237 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@13)) arg6@@13) :qid |typeInv:MapType6TypeInv6| :pattern ( (MapType6Type arg0@@237 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@13)) ))) (forall ((arg0@@238 T@U) (arg1@@118 T@U) (arg2@@70 T@U) (arg3@@48 T@U) (arg4@@37 T@U) (arg5@@24 T@U) (arg6@@14 T@U) ) (! (let ((aVar6 (MapType6TypeInv6 (type arg0@@238)))) (= (type (MapType6Select arg0@@238 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@14)) aVar6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@238 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@14)) ))) (forall ((arg0@@239 T@U) (arg1@@119 T@U) (arg2@@71 T@U) (arg3@@49 T@U) (arg4@@38 T@U) (arg5@@25 T@U) (arg6@@15 T@U) (arg7@@3 T@U) ) (! (let ((aVar6@@0 (type arg7@@3))) (let ((aVar5@@2 (type arg6@@15))) (let ((aVar4@@3 (type arg5@@25))) (let ((aVar3@@4 (type arg4@@38))) (let ((aVar2@@5 (type arg3@@49))) (let ((aVar1@@6 (type arg2@@71))) (let ((aVar0@@4 (type arg1@@119))) (= (type (MapType6Store arg0@@239 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@15 arg7@@3)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@2 aVar6@@0))))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@239 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@15 arg7@@3)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@6 T@U) (x5 T@U) (val@@28 T@U) ) (! (let ((aVar6@@1 (MapType6TypeInv6 (type m@@67)))) (=> (= (type val@@28) aVar6@@1) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5 val@@28) x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (x5@@0 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@5 T@U) (y5 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 x2@@18 x3@@13 x4@@7 x5@@0 val@@29) y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5) (MapType6Select m@@68 y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (x5@@1 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) (y5@@0 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 x2@@19 x3@@14 x4@@8 x5@@1 val@@30) y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0) (MapType6Select m@@69 y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (x5@@2 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) (y5@@1 T@U) ) (!  (or (= x2@@20 y2@@16) (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 x2@@20 x3@@15 x4@@9 x5@@2 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1) (MapType6Select m@@70 y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@32 T@U) (m@@71 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (x5@@3 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) (y5@@2 T@U) ) (!  (or (= x3@@16 y3@@13) (= (MapType6Select (MapType6Store m@@71 x0@@31 x1@@25 x2@@21 x3@@16 x4@@10 x5@@3 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2) (MapType6Select m@@71 y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@33 T@U) (m@@72 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (x5@@4 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) (y5@@3 T@U) ) (!  (or (= x4@@11 y4@@9) (= (MapType6Select (MapType6Store m@@72 x0@@32 x1@@26 x2@@22 x3@@17 x4@@11 x5@@4 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3) (MapType6Select m@@72 y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@34 T@U) (m@@73 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (x5@@5 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType6Select (MapType6Store m@@73 x0@@33 x1@@27 x2@@23 x3@@18 x4@@12 x5@@5 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4) (MapType6Select m@@73 y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4))) :qid |mapAx1:MapType6Select:5| :weight 0 ))) (forall ((val@@35 T@U) (m@@74 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (x5@@6 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@74 x0@@34 x1@@28 x2@@24 x3@@19 x4@@13 x5@@6 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5) (MapType6Select m@@74 y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@240 T@U) (arg1@@120 T@U) (arg2@@72 T@U) (arg3@@50 T@U) (arg4@@39 T@U) (arg5@@26 T@U) (arg6@@16 T@U) (arg7@@4 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@240 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@240 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1 arg11 arg12)) ))) (forall ((arg0@@241 T@U) (arg1@@121 T@U) (arg2@@73 T@U) ) (! (= (type (Handle5 arg0@@241 arg1@@121 arg2@@73)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@241 arg1@@121 arg2@@73)) ))))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@14 T@U) (t5 T@U) (heap@@26 T@U) (h@@51 T@U) (r@@26 T@U) (rd@@14 T@U) (bx0@@55 T@U) (bx1@@41 T@U) (bx2@@27 T@U) (bx3@@13 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@14) TyType)) (= (type t5) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@51) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@55) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@13) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 t5 heap@@26 (Handle5 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4) (MapType6Select h@@51 heap@@26 bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4))) :qid |unknown.0:0| :skolemid |971| :pattern ( (Apply5 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 t5 heap@@26 (Handle5 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13 bx4)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@15 T@U) (t5@@0 T@U) (heap@@27 T@U) (h@@52 T@U) (r@@27 T@U) (rd@@15 T@U) (bx0@@56 T@U) (bx1@@42 T@U) (bx2@@28 T@U) (bx3@@14 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@15) TyType)) (= (type t5@@0) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@52) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@56) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@14) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType6Select r@@27 heap@@27 bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0))) (Requires5 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 t5@@0 heap@@27 (Handle5 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Requires5 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 t5@@0 heap@@27 (Handle5 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14 bx4@@0)) )))
(assert (forall ((arg0@@242 T@U) (arg1@@122 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@40 T@U) (arg5@@27 T@U) (arg6@@17 T@U) (arg7@@5 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@242 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@27 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@242 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@27 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@16 T@U) (t5@@1 T@U) (heap@@28 T@U) (h@@53 T@U) (r@@28 T@U) (rd@@16 T@U) (bx0@@57 T@U) (bx1@@43 T@U) (bx2@@29 T@U) (bx3@@15 T@U) (bx4@@1 T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@16) TyType)) (= (type t5@@1) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@53) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@57) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@68) BoxType)) (= (U_2_bool (MapType0Select (Reads5 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 t5@@1 heap@@28 (Handle5 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)))) :qid |unknown.0:0| :skolemid |973| :pattern ( (MapType0Select (Reads5 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 t5@@1 heap@@28 (Handle5 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15 bx4@@1) bx@@68)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@17 T@U) (t5@@2 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@58 T@U) (bx1@@44 T@U) (bx2@@30 T@U) (bx3@@16 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@17) TyType)) (= (type t5@@2) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@58) BoxType)) (= (type bx1@@44) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@16) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and (and ($IsBox bx0@@58 t0@@94) ($IsBox bx1@@44 t1@@70)) ($IsBox bx2@@30 t2@@47)) ($IsBox bx3@@16 t3@@32)) ($IsBox bx4@@2 t4@@17)) ($Is f@@65 (Tclass._System.___hFunc5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2)))) (forall ((o@@74 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@30 o@@74) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@74) fld@@29)))) :qid |unknown.0:0| :skolemid |974| :no-pattern (type o@@74) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2) (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads5 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 t5@@2 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16 bx4@@2)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@18 T@U) (t5@@3 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@59 T@U) (bx1@@45 T@U) (bx2@@31 T@U) (bx3@@17 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@18) TyType)) (= (type t5@@3) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@59) BoxType)) (= (type bx1@@45) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and (and ($IsBox bx0@@59 t0@@95) ($IsBox bx1@@45 t1@@71)) ($IsBox bx2@@31 t2@@48)) ($IsBox bx3@@17 t3@@33)) ($IsBox bx4@@3 t4@@18)) ($Is f@@66 (Tclass._System.___hFunc5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3)))) (forall ((o@@75 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@31 o@@75) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@75) fld@@30)))) :qid |unknown.0:0| :skolemid |976| :no-pattern (type o@@75) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h0@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3) (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3))) :qid |unknown.0:0| :skolemid |977| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads5 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 t5@@3 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17 bx4@@3)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@19 T@U) (t5@@4 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@60 T@U) (bx1@@46 T@U) (bx2@@32 T@U) (bx3@@18 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@19) TyType)) (= (type t5@@4) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@60) BoxType)) (= (type bx1@@46) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@18) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and (and ($IsBox bx0@@60 t0@@96) ($IsBox bx1@@46 t1@@72)) ($IsBox bx2@@32 t2@@49)) ($IsBox bx3@@18 t3@@34)) ($IsBox bx4@@4 t4@@19)) ($Is f@@67 (Tclass._System.___hFunc5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4)))) (forall ((o@@76 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@32 o@@76) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@76) fld@@31)))) :qid |unknown.0:0| :skolemid |978| :no-pattern (type o@@76) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (= (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4) (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires5 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 t5@@4 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18 bx4@@4)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@20 T@U) (t5@@5 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@61 T@U) (bx1@@47 T@U) (bx2@@33 T@U) (bx3@@19 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@20) TyType)) (= (type t5@@5) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@61) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@19) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and (and ($IsBox bx0@@61 t0@@97) ($IsBox bx1@@47 t1@@73)) ($IsBox bx2@@33 t2@@50)) ($IsBox bx3@@19 t3@@35)) ($IsBox bx4@@5 t4@@20)) ($Is f@@68 (Tclass._System.___hFunc5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5)))) (forall ((o@@77 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@33 o@@77) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@77) fld@@32)))) :qid |unknown.0:0| :skolemid |980| :no-pattern (type o@@77) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (= (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h0@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5) (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5))) :qid |unknown.0:0| :skolemid |981| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires5 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 t5@@5 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19 bx4@@5)) )))
(assert (forall ((t0@@98 T@U) (t1@@74 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@21 T@U) (t5@@6 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@62 T@U) (bx1@@48 T@U) (bx2@@34 T@U) (bx3@@20 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@98) TyType) (= (type t1@@74) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@21) TyType)) (= (type t5@@6) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@62) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@20) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and (and ($IsBox bx0@@62 t0@@98) ($IsBox bx1@@48 t1@@74)) ($IsBox bx2@@34 t2@@51)) ($IsBox bx3@@20 t3@@36)) ($IsBox bx4@@6 t4@@21)) ($Is f@@69 (Tclass._System.___hFunc5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6)))) (forall ((o@@78 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@34 o@@78) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@78) fld@@33)))) :qid |unknown.0:0| :skolemid |982| :no-pattern (type o@@78) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6) (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6))) :qid |unknown.0:0| :skolemid |983| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply5 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 t5@@6 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20 bx4@@6)) )))
(assert (forall ((t0@@99 T@U) (t1@@75 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@22 T@U) (t5@@7 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@63 T@U) (bx1@@49 T@U) (bx2@@35 T@U) (bx3@@21 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@99) TyType) (= (type t1@@75) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@22) TyType)) (= (type t5@@7) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@63) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and (and ($IsBox bx0@@63 t0@@99) ($IsBox bx1@@49 t1@@75)) ($IsBox bx2@@35 t2@@52)) ($IsBox bx3@@21 t3@@37)) ($IsBox bx4@@7 t4@@22)) ($Is f@@70 (Tclass._System.___hFunc5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7)))) (forall ((o@@79 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@35 o@@79) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@79) fld@@34)))) :qid |unknown.0:0| :skolemid |984| :no-pattern (type o@@79) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h0@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7) (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7))) :qid |unknown.0:0| :skolemid |985| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply5 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 t5@@7 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21 bx4@@7)) )))
(assert (forall ((t0@@100 T@U) (t1@@76 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@23 T@U) (t5@@8 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@64 T@U) (bx1@@50 T@U) (bx2@@36 T@U) (bx3@@22 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@100) TyType) (= (type t1@@76) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@23) TyType)) (= (type t5@@8) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@64) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and (and ($IsBox bx0@@64 t0@@100) ($IsBox bx1@@50 t1@@76)) ($IsBox bx2@@36 t2@@53)) ($IsBox bx3@@22 t3@@38)) ($IsBox bx4@@8 t4@@23)) ($Is f@@71 (Tclass._System.___hFunc5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8))))) (= (|Set#Equal| (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |986| :pattern ( (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8) ($IsGoodHeap heap@@29)) :pattern ( (Reads5 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 t5@@8 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22 bx4@@8)) )))
(assert (forall ((t0@@101 T@U) (t1@@77 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@24 T@U) (t5@@9 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@65 T@U) (bx1@@51 T@U) (bx2@@37 T@U) (bx3@@23 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@101) TyType) (= (type t1@@77) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@24) TyType)) (= (type t5@@9) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@65) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and (and ($IsBox bx0@@65 t0@@101) ($IsBox bx1@@51 t1@@77)) ($IsBox bx2@@37 t2@@54)) ($IsBox bx3@@23 t3@@39)) ($IsBox bx4@@9 t4@@24)) ($Is f@@72 (Tclass._System.___hFunc5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9)))) (|Set#Equal| (Reads5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) (|Set#Empty| BoxType)))) (= (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9))) :qid |unknown.0:0| :skolemid |987| :pattern ( (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9) ($IsGoodHeap heap@@30)) :pattern ( (Requires5 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 t5@@9 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23 bx4@@9)) )))
(assert (forall ((f@@73 T@U) (t0@@102 T@U) (t1@@78 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@25 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@102) TyType)) (= (type t1@@78) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@25) TyType)) (= (type t5@@10) TyType)) (= ($Is f@@73 (Tclass._System.___hFunc5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10)) (forall ((h@@54 T@U) (bx0@@66 T@U) (bx1@@52 T@U) (bx2@@38 T@U) (bx3@@24 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@54) (MapType0Type refType MapType1Type)) (= (type bx0@@66) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@54) (and (and (and (and ($IsBox bx0@@66 t0@@102) ($IsBox bx1@@52 t1@@78)) ($IsBox bx2@@38 t2@@55)) ($IsBox bx3@@24 t3@@40)) ($IsBox bx4@@10 t4@@25))) (Requires5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10))) ($IsBox (Apply5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10) t5@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |988| :pattern ( (Apply5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24 bx4@@10)) )))) :qid |unknown.0:0| :skolemid |989| :pattern ( ($Is f@@73 (Tclass._System.___hFunc5 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 t5@@10))) )))
(assert (forall ((f@@74 T@U) (t0@@103 T@U) (t1@@79 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@26 T@U) (t5@@11 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@103) TyType)) (= (type t1@@79) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@26) TyType)) (= (type t5@@11) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc5 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26 t5@@11)) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u0@@4)) ($IsBox bx@@69 t0@@103)) :qid |unknown.0:0| :skolemid |990| :pattern ( ($IsBox bx@@69 u0@@4)) :pattern ( ($IsBox bx@@69 t0@@103)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u1@@3)) ($IsBox bx@@70 t1@@79)) :qid |unknown.0:0| :skolemid |991| :pattern ( ($IsBox bx@@70 u1@@3)) :pattern ( ($IsBox bx@@70 t1@@79)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u2@@2)) ($IsBox bx@@71 t2@@56)) :qid |unknown.0:0| :skolemid |992| :pattern ( ($IsBox bx@@71 u2@@2)) :pattern ( ($IsBox bx@@71 t2@@56)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u3@@1)) ($IsBox bx@@72 t3@@41)) :qid |unknown.0:0| :skolemid |993| :pattern ( ($IsBox bx@@72 u3@@1)) :pattern ( ($IsBox bx@@72 t3@@41)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u4@@0)) ($IsBox bx@@73 t4@@26)) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsBox bx@@73 u4@@0)) :pattern ( ($IsBox bx@@73 t4@@26)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t5@@11)) ($IsBox bx@@74 u5)) :qid |unknown.0:0| :skolemid |995| :pattern ( ($IsBox bx@@74 t5@@11)) :pattern ( ($IsBox bx@@74 u5)) )))) ($Is f@@74 (Tclass._System.___hFunc5 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($Is f@@74 (Tclass._System.___hFunc5 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26 t5@@11)) ($Is f@@74 (Tclass._System.___hFunc5 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5))) )))
(assert (forall ((f@@75 T@U) (t0@@104 T@U) (t1@@80 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@27 T@U) (t5@@12 T@U) (h@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@104) TyType)) (= (type t1@@80) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@27) TyType)) (= (type t5@@12) TyType)) (= (type h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@55)) (= ($IsAlloc f@@75 (Tclass._System.___hFunc5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12) h@@55) (forall ((bx0@@67 T@U) (bx1@@53 T@U) (bx2@@39 T@U) (bx3@@25 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@67) BoxType) (= (type bx1@@53) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@11) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@67 t0@@104) ($IsAllocBox bx0@@67 t0@@104 h@@55)) (and ($IsBox bx1@@53 t1@@80) ($IsAllocBox bx1@@53 t1@@80 h@@55))) (and ($IsBox bx2@@39 t2@@57) ($IsAllocBox bx2@@39 t2@@57 h@@55))) (and ($IsBox bx3@@25 t3@@42) ($IsAllocBox bx3@@25 t3@@42 h@@55))) (and ($IsBox bx4@@11 t4@@27) ($IsAllocBox bx4@@11 t4@@27 h@@55))) (Requires5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@55 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |997| :pattern ( (MapType0Select (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |998| :pattern ( (Apply5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) :pattern ( (Reads5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25 bx4@@11)) )))) :qid |unknown.0:0| :skolemid |999| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc5 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 t5@@12) h@@55)) )))
(assert (forall ((f@@76 T@U) (t0@@105 T@U) (t1@@81 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@28 T@U) (t5@@13 T@U) (h@@56 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@105) TyType)) (= (type t1@@81) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@28) TyType)) (= (type t5@@13) TyType)) (= (type h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@56) ($IsAlloc f@@76 (Tclass._System.___hFunc5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13) h@@56))) (forall ((bx0@@68 T@U) (bx1@@54 T@U) (bx2@@40 T@U) (bx3@@26 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@68) BoxType) (= (type bx1@@54) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@68 t0@@105 h@@56) ($IsAllocBox bx1@@54 t1@@81 h@@56)) ($IsAllocBox bx2@@40 t2@@58 h@@56)) ($IsAllocBox bx3@@26 t3@@43 h@@56)) ($IsAllocBox bx4@@12 t4@@28 h@@56)) (Requires5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12)) ($IsAllocBox (Apply5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12) t5@@13 h@@56))) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Apply5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26 bx4@@12)) ))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc5 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 t5@@13) h@@56)) )))
(assert (forall ((arg0@@243 T@U) (arg1@@123 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@41 T@U) (arg5@@28 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@243 arg1@@123 arg2@@75 arg3@@52 arg4@@41 arg5@@28)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@243 arg1@@123 arg2@@75 arg3@@52 arg4@@41 arg5@@28)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$T4@@7| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@102|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) Tagclass._System.___hPartialFunc5) (= (TagFamily (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) |tytagFamily$_#PartialFunc5|))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$R@@102|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@244)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@244)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$T4@@8| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$R@@103|)) |#$T0@@90|)) :qid |unknown.0:0| :skolemid |1003| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$R@@103|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@245)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@245)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$T4@@9| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$R@@104|)) |#$T1@@75|)) :qid |unknown.0:0| :skolemid |1004| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$R@@104|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@246)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$T4@@10| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$R@@105|)) |#$T2@@57|)) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$R@@105|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@247)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@247)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$T4@@11| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$R@@106|)) |#$T3@@36|)) :qid |unknown.0:0| :skolemid |1006| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$R@@106|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@248)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@248)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@37| T@U) (|#$T4@@12| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$R@@107|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |1007| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$R@@107|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@249)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@249)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@38| T@U) (|#$T4@@13| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$R@@108|)) |#$R@@108|)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$R@@108|)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@39| T@U) (|#$T4@@14| T@U) (|#$R@@109| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@109|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|)))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc5 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$R@@109|))) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@40| T@U) (|#$T4@@15| T@U) (|#$R@@110| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@110|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) (|x2#0@@3| T@U) (|x3#0@@1| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0@@1|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@7| |#$T0@@97|) ($IsBox |x1#0@@5| |#$T1@@81|)) ($IsBox |x2#0@@3| |#$T2@@62|)) ($IsBox |x3#0@@1| |#$T3@@40|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5| |x2#0@@3| |x3#0@@1| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1010| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0@@1|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) ))))) :qid |unknown.0:0| :skolemid |1011| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc5 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$R@@110|))) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@41| T@U) (|#$T4@@16| T@U) (|#$R@@111| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@111|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc5 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$R@@111|) $h@@18)) )))
(assert (forall ((arg0@@250 T@U) (arg1@@124 T@U) (arg2@@76 T@U) (arg3@@53 T@U) (arg4@@42 T@U) (arg5@@29 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@250 arg1@@124 arg2@@76 arg3@@53 arg4@@42 arg5@@29)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@250 arg1@@124 arg2@@76 arg3@@53 arg4@@42 arg5@@29)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@42| T@U) (|#$T4@@17| T@U) (|#$R@@112| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@112|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) Tagclass._System.___hTotalFunc5) (= (TagFamily (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) |tytagFamily$_#TotalFunc5|))) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$R@@112|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@251)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@251)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@43| T@U) (|#$T4@@18| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@113|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$R@@113|)) |#$T0@@100|)) :qid |unknown.0:0| :skolemid |1014| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$R@@113|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@252)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@44| T@U) (|#$T4@@19| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$R@@114|)) |#$T1@@85|)) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$R@@114|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@253)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$T3@@45| T@U) (|#$T4@@20| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$R@@115|)) |#$T2@@67|)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$R@@115|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@254)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@254)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$T3@@46| T@U) (|#$T4@@21| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$R@@116|)) |#$T3@@46|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$R@@116|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@255)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@255)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$T3@@47| T@U) (|#$T4@@22| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$R@@117|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |1018| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$R@@117|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@256)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@256)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$T3@@48| T@U) (|#$T4@@23| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$R@@118|)) |#$R@@118|)) :qid |unknown.0:0| :skolemid |1019| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$R@@118|)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$T3@@49| T@U) (|#$T4@@24| T@U) (|#$R@@119| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@119|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|)))) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc5 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$R@@119|))) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$T3@@50| T@U) (|#$T4@@25| T@U) (|#$R@@120| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@120|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) (|x2#0@@4| T@U) (|x3#0@@2| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@2|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@8| |#$T0@@107|) ($IsBox |x1#0@@6| |#$T1@@91|)) ($IsBox |x2#0@@4| |#$T2@@72|)) ($IsBox |x3#0@@2| |#$T3@@50|)) ($IsBox |x4#0@@0| |#$T4@@25|))) (Requires5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6| |x2#0@@4| |x3#0@@2| |x4#0@@0|)) :qid |unknown.0:0| :skolemid |1021| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@2|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc5 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$R@@120|))) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$T3@@51| T@U) (|#$T4@@26| T@U) (|#$R@@121| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@121|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc5 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$R@@121|) $h@@19)) )))
(assert (forall ((arg0@@257 T@U) (arg1@@125 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@43 T@U) (arg5@@30 T@U) (arg6@@18 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@257 arg1@@125 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@257 arg1@@125 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@18)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@74| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@122|) TyType)) (and (= (Tag (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) Tagclass._System.___hFunc6) (= (TagFamily (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) |tytagFamily$_#Func6|))) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@122|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@258)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@258)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@75| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@0| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) |#$T0@@110|)) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Tclass._System.___hFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@123|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@259)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@259)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@76| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@1| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@124|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@260)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@77| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@2| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) |#$T2@@77|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@125|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@261)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@261)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@78| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@3| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Tclass._System.___hFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@126|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@262)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@262)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@79| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@4| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@127|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |1029| :pattern ( (Tclass._System.___hFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@127|)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@263)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@263)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@80| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@5| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Tclass._System.___hFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@128|)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@264)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@264)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@81| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@6| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) |#$R@@129|)) :qid |unknown.0:0| :skolemid |1031| :pattern ( (Tclass._System.___hFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@129|)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@82| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@7| T@U) (|#$R@@130| T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@130|) TyType)) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|)))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@130|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@265 T@T) (arg1@@126 T@T) (arg2@@78 T@T) (arg3@@55 T@T) (arg4@@44 T@T) (arg5@@31 T@T) (arg6@@19 T@T) (arg7@@6 T@T) ) (! (= (Ctor (MapType7Type arg0@@265 arg1@@126 arg2@@78 arg3@@55 arg4@@44 arg5@@31 arg6@@19 arg7@@6)) 29) :qid |ctor:MapType7Type| )) (forall ((arg0@@266 T@T) (arg1@@127 T@T) (arg2@@79 T@T) (arg3@@56 T@T) (arg4@@45 T@T) (arg5@@32 T@T) (arg6@@20 T@T) (arg7@@7 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) arg0@@266) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) ))) (forall ((arg0@@267 T@T) (arg1@@128 T@T) (arg2@@80 T@T) (arg3@@57 T@T) (arg4@@46 T@T) (arg5@@33 T@T) (arg6@@21 T@T) (arg7@@8 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@267 arg1@@128 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) arg1@@128) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@267 arg1@@128 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) ))) (forall ((arg0@@268 T@T) (arg1@@129 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@47 T@T) (arg5@@34 T@T) (arg6@@22 T@T) (arg7@@9 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@268 arg1@@129 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) arg2@@81) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@268 arg1@@129 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) ))) (forall ((arg0@@269 T@T) (arg1@@130 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@48 T@T) (arg5@@35 T@T) (arg6@@23 T@T) (arg7@@10 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@269 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) arg3@@59) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@269 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) ))) (forall ((arg0@@270 T@T) (arg1@@131 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@24 T@T) (arg7@@11 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@270 arg1@@131 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) arg4@@49) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@270 arg1@@131 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) ))) (forall ((arg0@@271 T@T) (arg1@@132 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@25 T@T) (arg7@@12 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@271 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) arg5@@37) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@271 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) ))) (forall ((arg0@@272 T@T) (arg1@@133 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@26 T@T) (arg7@@13 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@272 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) arg6@@26) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@272 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) ))) (forall ((arg0@@273 T@T) (arg1@@134 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@27 T@T) (arg7@@14 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@273 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) arg7@@14) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@273 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) ))) (forall ((arg0@@274 T@U) (arg1@@135 T@U) (arg2@@87 T@U) (arg3@@64 T@U) (arg4@@53 T@U) (arg5@@40 T@U) (arg6@@28 T@U) (arg7@@15 T@U) ) (! (let ((aVar7 (MapType7TypeInv7 (type arg0@@274)))) (= (type (MapType7Select arg0@@274 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) aVar7)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@274 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) ))) (forall ((arg0@@275 T@U) (arg1@@136 T@U) (arg2@@88 T@U) (arg3@@65 T@U) (arg4@@54 T@U) (arg5@@41 T@U) (arg6@@29 T@U) (arg7@@16 T@U) (arg8@@5 T@U) ) (! (let ((aVar7@@0 (type arg8@@5))) (let ((aVar6@@2 (type arg7@@16))) (let ((aVar5@@3 (type arg6@@29))) (let ((aVar4@@4 (type arg5@@41))) (let ((aVar3@@5 (type arg4@@54))) (let ((aVar2@@6 (type arg3@@65))) (let ((aVar1@@7 (type arg2@@88))) (let ((aVar0@@5 (type arg1@@136))) (= (type (MapType7Store arg0@@275 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@2 aVar7@@0)))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@275 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) ))) (forall ((m@@75 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6 T@U) (val@@36 T@U) ) (! (let ((aVar7@@1 (MapType7TypeInv7 (type m@@75)))) (=> (= (type val@@36) aVar7@@1) (= (MapType7Select (MapType7Store m@@75 x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6 val@@36) x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6) val@@36))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@37 T@U) (m@@76 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@0 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6 T@U) ) (!  (or (= x0@@36 y0@@28) (= (MapType7Select (MapType7Store m@@76 x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@0 val@@37) y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6) (MapType7Select m@@76 y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@38 T@U) (m@@77 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@1 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@0 T@U) ) (!  (or (= x1@@31 y1@@25) (= (MapType7Select (MapType7Store m@@77 x0@@37 x1@@31 x2@@27 x3@@22 x4@@16 x5@@9 x6@@1 val@@38) y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0) (MapType7Select m@@77 y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@39 T@U) (m@@78 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@2 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@1 T@U) ) (!  (or (= x2@@28 y2@@23) (= (MapType7Select (MapType7Store m@@78 x0@@38 x1@@32 x2@@28 x3@@23 x4@@17 x5@@10 x6@@2 val@@39) y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1) (MapType7Select m@@78 y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@40 T@U) (m@@79 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@3 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@2 T@U) ) (!  (or (= x3@@24 y3@@20) (= (MapType7Select (MapType7Store m@@79 x0@@39 x1@@33 x2@@29 x3@@24 x4@@18 x5@@11 x6@@3 val@@40) y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2) (MapType7Select m@@79 y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@41 T@U) (m@@80 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@4 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@3 T@U) ) (!  (or (= x4@@19 y4@@16) (= (MapType7Select (MapType7Store m@@80 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@4 val@@41) y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3) (MapType7Select m@@80 y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@42 T@U) (m@@81 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@5 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@4 T@U) ) (!  (or (= x5@@13 y5@@11) (= (MapType7Select (MapType7Store m@@81 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@5 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4) (MapType7Select m@@81 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@43 T@U) (m@@82 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@6 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType7Select (MapType7Store m@@82 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@6 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5) (MapType7Select m@@82 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@44 T@U) (m@@83 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@7 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@83 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@7 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6) (MapType7Select m@@83 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@276 T@U) (arg1@@137 T@U) (arg2@@89 T@U) (arg3@@66 T@U) (arg4@@55 T@U) (arg5@@42 T@U) (arg6@@30 T@U) (arg7@@17 T@U) (arg8@@6 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@276 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@276 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) ))) (forall ((arg0@@277 T@U) (arg1@@138 T@U) (arg2@@90 T@U) ) (! (= (type (Handle6 arg0@@277 arg1@@138 arg2@@90)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@277 arg1@@138 arg2@@90)) ))))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6 T@U) (heap@@31 T@U) (h@@57 T@U) (r@@30 T@U) (rd@@17 T@U) (bx0@@69 T@U) (bx1@@55 T@U) (bx2@@41 T@U) (bx3@@27 T@U) (bx4@@13 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@30) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@69) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@13) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5) (MapType7Select h@@57 heap@@31 bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@0 T@U) (heap@@32 T@U) (h@@58 T@U) (r@@31 T@U) (rd@@18 T@U) (bx0@@70 T@U) (bx1@@56 T@U) (bx2@@42 T@U) (bx3@@28 T@U) (bx4@@14 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@0) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@58) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@70) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@14) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType7Select r@@31 heap@@32 bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0))) (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) )))
(assert (forall ((arg0@@278 T@U) (arg1@@139 T@U) (arg2@@91 T@U) (arg3@@67 T@U) (arg4@@56 T@U) (arg5@@43 T@U) (arg6@@31 T@U) (arg7@@18 T@U) (arg8@@7 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@278 arg1@@139 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@278 arg1@@139 arg2@@91 arg3@@67 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@1 T@U) (heap@@33 T@U) (h@@59 T@U) (r@@32 T@U) (rd@@19 T@U) (bx0@@71 T@U) (bx1@@57 T@U) (bx2@@43 T@U) (bx3@@29 T@U) (bx4@@15 T@U) (bx5@@1 T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@1) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@59) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@71) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@78) BoxType)) (= (U_2_bool (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)))) :qid |unknown.0:0| :skolemid |1035| :pattern ( (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@78)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@2 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@72 T@U) (bx1@@58 T@U) (bx2@@44 T@U) (bx3@@30 T@U) (bx4@@16 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@2) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@109) ($IsBox bx1@@58 t1@@85)) ($IsBox bx2@@44 t2@@62)) ($IsBox bx3@@30 t3@@47)) ($IsBox bx4@@16 t4@@32)) ($IsBox bx5@@2 t5@@17)) ($Is f@@77 (Tclass._System.___hFunc6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2)))) (forall ((o@@80 T@U) (fld@@35 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@35) (FieldType a@@118))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@36 o@@80) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@80) fld@@35)))) :qid |unknown.0:0| :skolemid |1036| :no-pattern (type o@@80) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2))) :qid |unknown.0:0| :skolemid |1037| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@3 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@73 T@U) (bx1@@59 T@U) (bx2@@45 T@U) (bx3@@31 T@U) (bx4@@17 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@3) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@110) ($IsBox bx1@@59 t1@@86)) ($IsBox bx2@@45 t2@@63)) ($IsBox bx3@@31 t3@@48)) ($IsBox bx4@@17 t4@@33)) ($IsBox bx5@@3 t5@@18)) ($Is f@@78 (Tclass._System.___hFunc6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3)))) (forall ((o@@81 T@U) (fld@@36 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@36) (FieldType a@@119))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@37 o@@81) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@81) fld@@36)))) :qid |unknown.0:0| :skolemid |1038| :no-pattern (type o@@81) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h0@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3))) :qid |unknown.0:0| :skolemid |1039| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@4 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@74 T@U) (bx1@@60 T@U) (bx2@@46 T@U) (bx3@@32 T@U) (bx4@@18 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@4) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@74) BoxType)) (= (type bx1@@60) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and ($IsBox bx0@@74 t0@@111) ($IsBox bx1@@60 t1@@87)) ($IsBox bx2@@46 t2@@64)) ($IsBox bx3@@32 t3@@49)) ($IsBox bx4@@18 t4@@34)) ($IsBox bx5@@4 t5@@19)) ($Is f@@79 (Tclass._System.___hFunc6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4)))) (forall ((o@@82 T@U) (fld@@37 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@37) (FieldType a@@120))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@38 o@@82) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@82) fld@@37)))) :qid |unknown.0:0| :skolemid |1040| :no-pattern (type o@@82) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (= (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4))) :qid |unknown.0:0| :skolemid |1041| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@5 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@75 T@U) (bx1@@61 T@U) (bx2@@47 T@U) (bx3@@33 T@U) (bx4@@19 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@5) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@75) BoxType)) (= (type bx1@@61) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and ($IsBox bx0@@75 t0@@112) ($IsBox bx1@@61 t1@@88)) ($IsBox bx2@@47 t2@@65)) ($IsBox bx3@@33 t3@@50)) ($IsBox bx4@@19 t4@@35)) ($IsBox bx5@@5 t5@@20)) ($Is f@@80 (Tclass._System.___hFunc6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5)))) (forall ((o@@83 T@U) (fld@@38 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@38) (FieldType a@@121))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@39 o@@83) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@83) fld@@38)))) :qid |unknown.0:0| :skolemid |1042| :no-pattern (type o@@83) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (= (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h0@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5)) )))
(assert (forall ((t0@@113 T@U) (t1@@89 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@6 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@76 T@U) (bx1@@62 T@U) (bx2@@48 T@U) (bx3@@34 T@U) (bx4@@20 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@113) TyType) (= (type t1@@89) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@6) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@76) BoxType)) (= (type bx1@@62) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and ($IsBox bx0@@76 t0@@113) ($IsBox bx1@@62 t1@@89)) ($IsBox bx2@@48 t2@@66)) ($IsBox bx3@@34 t3@@51)) ($IsBox bx4@@20 t4@@36)) ($IsBox bx5@@6 t5@@21)) ($Is f@@81 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6)))) (forall ((o@@84 T@U) (fld@@39 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@39) (FieldType a@@122))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@40 o@@84) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@84) fld@@39)))) :qid |unknown.0:0| :skolemid |1044| :no-pattern (type o@@84) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6))) :qid |unknown.0:0| :skolemid |1045| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6)) )))
(assert (forall ((t0@@114 T@U) (t1@@90 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@7 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@77 T@U) (bx1@@63 T@U) (bx2@@49 T@U) (bx3@@35 T@U) (bx4@@21 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@114) TyType) (= (type t1@@90) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@7) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@77) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and ($IsBox bx0@@77 t0@@114) ($IsBox bx1@@63 t1@@90)) ($IsBox bx2@@49 t2@@67)) ($IsBox bx3@@35 t3@@52)) ($IsBox bx4@@21 t4@@37)) ($IsBox bx5@@7 t5@@22)) ($Is f@@82 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7)))) (forall ((o@@85 T@U) (fld@@40 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@40) (FieldType a@@123))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@41 o@@85) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@85) fld@@40)))) :qid |unknown.0:0| :skolemid |1046| :no-pattern (type o@@85) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h0@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7)) )))
(assert (forall ((t0@@115 T@U) (t1@@91 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@8 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@78 T@U) (bx1@@64 T@U) (bx2@@50 T@U) (bx3@@36 T@U) (bx4@@22 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@115) TyType) (= (type t1@@91) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@8) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@78) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and ($IsBox bx0@@78 t0@@115) ($IsBox bx1@@64 t1@@91)) ($IsBox bx2@@50 t2@@68)) ($IsBox bx3@@36 t3@@53)) ($IsBox bx4@@22 t4@@38)) ($IsBox bx5@@8 t5@@23)) ($Is f@@83 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8))))) (= (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) ($IsGoodHeap heap@@34)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8)) )))
(assert (forall ((t0@@116 T@U) (t1@@92 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@9 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@79 T@U) (bx1@@65 T@U) (bx2@@51 T@U) (bx3@@37 T@U) (bx4@@23 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@116) TyType) (= (type t1@@92) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@9) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@79) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and ($IsBox bx0@@79 t0@@116) ($IsBox bx1@@65 t1@@92)) ($IsBox bx2@@51 t2@@69)) ($IsBox bx3@@37 t3@@54)) ($IsBox bx4@@23 t4@@39)) ($IsBox bx5@@9 t5@@24)) ($Is f@@84 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9)))) (|Set#Equal| (Reads6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (|Set#Empty| BoxType)))) (= (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9))) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) ($IsGoodHeap heap@@35)) :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9)) )))
(assert (forall ((f@@85 T@U) (t0@@117 T@U) (t1@@93 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@117) TyType)) (= (type t1@@93) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@10) TyType)) (= ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10)) (forall ((h@@60 T@U) (bx0@@80 T@U) (bx1@@66 T@U) (bx2@@52 T@U) (bx3@@38 T@U) (bx4@@24 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@60) (MapType0Type refType MapType1Type)) (= (type bx0@@80) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@60) (and (and (and (and (and ($IsBox bx0@@80 t0@@117) ($IsBox bx1@@66 t1@@93)) ($IsBox bx2@@52 t2@@70)) ($IsBox bx3@@38 t3@@55)) ($IsBox bx4@@24 t4@@40)) ($IsBox bx5@@10 t5@@25))) (Requires6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10))) ($IsBox (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10) t6@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |1050| :pattern ( (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10)) )))) :qid |unknown.0:0| :skolemid |1051| :pattern ( ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10))) )))
(assert (forall ((f@@86 T@U) (t0@@118 T@U) (t1@@94 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@11 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@118) TyType)) (= (type t1@@94) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@11) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u0@@5)) ($IsBox bx@@79 t0@@118)) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsBox bx@@79 u0@@5)) :pattern ( ($IsBox bx@@79 t0@@118)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u1@@4)) ($IsBox bx@@80 t1@@94)) :qid |unknown.0:0| :skolemid |1053| :pattern ( ($IsBox bx@@80 u1@@4)) :pattern ( ($IsBox bx@@80 t1@@94)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 u2@@3)) ($IsBox bx@@81 t2@@71)) :qid |unknown.0:0| :skolemid |1054| :pattern ( ($IsBox bx@@81 u2@@3)) :pattern ( ($IsBox bx@@81 t2@@71)) ))) (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 u3@@2)) ($IsBox bx@@82 t3@@56)) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsBox bx@@82 u3@@2)) :pattern ( ($IsBox bx@@82 t3@@56)) ))) (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 u4@@1)) ($IsBox bx@@83 t4@@41)) :qid |unknown.0:0| :skolemid |1056| :pattern ( ($IsBox bx@@83 u4@@1)) :pattern ( ($IsBox bx@@83 t4@@41)) ))) (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 u5@@0)) ($IsBox bx@@84 t5@@26)) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($IsBox bx@@84 u5@@0)) :pattern ( ($IsBox bx@@84 t5@@26)) ))) (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 t6@@11)) ($IsBox bx@@85 u6)) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsBox bx@@85 t6@@11)) :pattern ( ($IsBox bx@@85 u6)) )))) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) )))
(assert (forall ((f@@87 T@U) (t0@@119 T@U) (t1@@95 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@12 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@119) TyType)) (= (type t1@@95) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@12) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@61)) (= ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61) (forall ((bx0@@81 T@U) (bx1@@67 T@U) (bx2@@53 T@U) (bx3@@39 T@U) (bx4@@25 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@81) BoxType) (= (type bx1@@67) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@11) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@81 t0@@119) ($IsAllocBox bx0@@81 t0@@119 h@@61)) (and ($IsBox bx1@@67 t1@@95) ($IsAllocBox bx1@@67 t1@@95 h@@61))) (and ($IsBox bx2@@53 t2@@72) ($IsAllocBox bx2@@53 t2@@72 h@@61))) (and ($IsBox bx3@@39 t3@@57) ($IsAllocBox bx3@@39 t3@@57 h@@61))) (and ($IsBox bx4@@25 t4@@42) ($IsAllocBox bx4@@25 t4@@42 h@@61))) (and ($IsBox bx5@@11 t5@@27) ($IsAllocBox bx5@@11 t5@@27 h@@61))) (Requires6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) (forall ((r@@33 T@U) ) (!  (=> (= (type r@@33) refType) (=> (and (not (= r@@33 null)) (U_2_bool (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33)))) (U_2_bool (MapType1Select (MapType0Select h@@61 r@@33) alloc)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33))) )))) :qid |unknown.0:0| :skolemid |1061| :pattern ( (Apply6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) :pattern ( (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) )))) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61)) )))
(assert (forall ((f@@88 T@U) (t0@@120 T@U) (t1@@96 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@13 T@U) (h@@62 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@120) TyType)) (= (type t1@@96) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@13) TyType)) (= (type h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@62) ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62))) (forall ((bx0@@82 T@U) (bx1@@68 T@U) (bx2@@54 T@U) (bx3@@40 T@U) (bx4@@26 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@82) BoxType) (= (type bx1@@68) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@82 t0@@120 h@@62) ($IsAllocBox bx1@@68 t1@@96 h@@62)) ($IsAllocBox bx2@@54 t2@@73 h@@62)) ($IsAllocBox bx3@@40 t3@@58 h@@62)) ($IsAllocBox bx4@@26 t4@@43 h@@62)) ($IsAllocBox bx5@@12 t5@@28 h@@62)) (Requires6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ($IsAllocBox (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12) t6@@13 h@@62))) :qid |unknown.0:0| :skolemid |1063| :pattern ( (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ))) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@140 T@U) (arg2@@92 T@U) (arg3@@68 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@32 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@279 arg1@@140 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@279 arg1@@140 arg2@@92 arg3@@68 arg4@@57 arg5@@44 arg6@@32)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@83| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@8| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@131|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) Tagclass._System.___hPartialFunc6) (= (TagFamily (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) |tytagFamily$_#PartialFunc6|))) :qid |unknown.0:0| :skolemid |1065| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@131|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@280)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@280)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@84| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@9| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) |#$T0@@119|)) :qid |unknown.0:0| :skolemid |1066| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@132|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@281)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@281)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@85| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@10| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) |#$T1@@104|)) :qid |unknown.0:0| :skolemid |1067| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@133|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@282)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@282)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@86| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@11| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@134|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) |#$T2@@86|)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@134|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@283)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@283)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@87| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@12| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) |#$T3@@65|)) :qid |unknown.0:0| :skolemid |1069| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@135|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@284)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@284)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@88| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@13| T@U) (|#$R@@136| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) |#$T4@@41|)) :qid |unknown.0:0| :skolemid |1070| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@136|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@285)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@285)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@89| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@14| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |1071| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@137|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@286)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@286)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@90| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@15| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) |#$R@@138|)) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@138|)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@91| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@16| T@U) (|#$R@@139| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@139|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|)))) :qid |unknown.0:0| :skolemid |1073| :pattern ( ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@139|))) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@92| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@17| T@U) (|#$R@@140| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@140|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) (|x2#0@@5| T@U) (|x3#0@@3| T@U) (|x4#0@@1| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0@@1|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@9| |#$T0@@127|) ($IsBox |x1#0@@7| |#$T1@@111|)) ($IsBox |x2#0@@5| |#$T2@@92|)) ($IsBox |x3#0@@3| |#$T3@@70|)) ($IsBox |x4#0@@1| |#$T4@@45|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7| |x2#0@@5| |x3#0@@3| |x4#0@@1| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1074| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0@@1|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) ))))) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@140|))) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@93| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@18| T@U) (|#$R@@141| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@141|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20))) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@141|) $h@@20)) )))
(assert (forall ((arg0@@287 T@U) (arg1@@141 T@U) (arg2@@93 T@U) (arg3@@69 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@33 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@287 arg1@@141 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@287 arg1@@141 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@33)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@94| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@19| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@142|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) Tagclass._System.___hTotalFunc6) (= (TagFamily (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) |tytagFamily$_#TotalFunc6|))) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@142|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@288)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@288)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@95| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@20| T@U) (|#$R@@143| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) |#$T0@@130|)) :qid |unknown.0:0| :skolemid |1078| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@143|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@289)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@289)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@96| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@21| T@U) (|#$R@@144| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@144|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) |#$T1@@115|)) :qid |unknown.0:0| :skolemid |1079| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@144|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@290)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@290)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@97| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@22| T@U) (|#$R@@145| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@145|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) |#$T2@@97|)) :qid |unknown.0:0| :skolemid |1080| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@145|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@291)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@291)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@98| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@23| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) |#$T3@@76|)) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@146|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@292)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@292)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@99| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@24| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) |#$T4@@52|)) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@147|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@293)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@293)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@100| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@25| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@148|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@294)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@294)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@101| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@26| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) |#$R@@149|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@149|)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@102| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@27| T@U) (|#$R@@150| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@150|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|)))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@150|))) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@103| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@28| T@U) (|#$R@@151| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@151|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) (|x2#0@@6| T@U) (|x3#0@@4| T@U) (|x4#0@@2| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@2|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@10| |#$T0@@138|) ($IsBox |x1#0@@8| |#$T1@@122|)) ($IsBox |x2#0@@6| |#$T2@@103|)) ($IsBox |x3#0@@4| |#$T3@@81|)) ($IsBox |x4#0@@2| |#$T4@@56|)) ($IsBox |x5#0@@0| |#$T5@@28|))) (Requires6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8| |x2#0@@6| |x3#0@@4| |x4#0@@2| |x5#0@@0|)) :qid |unknown.0:0| :skolemid |1086| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@2|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@151|))) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@104| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@29| T@U) (|#$R@@152| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@152|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@152|) $h@@21)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (DatatypeCtorId arg0@@295)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@295)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1089| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1090| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |1091| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |1092| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1093| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@296)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@296)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@297 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@297)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@297)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@88)) bx@@88) ($Is ($Unbox DatatypeTypeType bx@@88) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsBox bx@@88 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@22)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@22) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@22)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) :qid |unknown.0:0| :skolemid |1099| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@24) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) :qid |unknown.0:0| :skolemid |1101| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) :qid |unknown.0:0| :skolemid |1102| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |1103| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |1105| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |1107| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |1108| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |1109| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@124 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@124 b@@61)  (and (= (_System.Tuple2._0 a@@124) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@124) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |1110| :pattern ( (|_System.Tuple2#Equal| a@@124 b@@61)) )))
(assert (forall ((a@@125 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@125 b@@62) (= a@@125 b@@62))) :qid |unknown.0:0| :skolemid |1111| :pattern ( (|_System.Tuple2#Equal| a@@125 b@@62)) )))
(assert (forall ((arg0@@298 T@U) (arg1@@142 T@U) (arg2@@94 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@298 arg1@@142 arg2@@94)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@298 arg1@@142 arg2@@94)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$R@@153|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |1112| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@140| |#$T1@@124| |#$R@@153|)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@299)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@299)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@141| |#$T1@@125| |#$R@@154|)) |#$T0@@141|)) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@141| |#$T1@@125| |#$R@@154|)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@300)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@300)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@142| |#$T1@@126| |#$R@@155|)) |#$T1@@126|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@142| |#$T1@@126| |#$R@@155|)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@301)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@301)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$R@@156| T@U) ) (!  (=> (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$R@@156|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@143| |#$T1@@127| |#$R@@156|)) |#$R@@156|)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@143| |#$T1@@127| |#$R@@156|)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$R@@157| T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$R@@157|) TyType)) (= (type bx@@89) BoxType)) ($IsBox bx@@89 (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|))) (and (= ($Box ($Unbox HandleTypeType bx@@89)) bx@@89) ($Is ($Unbox HandleTypeType bx@@89) (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsBox bx@@89 (Tclass._System.___hFunc2OSO |#$T0@@144| |#$T1@@128| |#$R@@157|))) )))
(assert (forall ((arg0@@302 T@U) (arg1@@143 T@U) (arg2@@95 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@302 arg1@@143 arg2@@95)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@302 arg1@@143 arg2@@95)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$R@@158|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |1117| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@145| |#$T1@@129| |#$R@@158|)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@303)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@303)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@146| |#$T1@@130| |#$R@@159|)) |#$T0@@146|)) :qid |unknown.0:0| :skolemid |1118| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@146| |#$T1@@130| |#$R@@159|)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@304)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@304)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@147| |#$T1@@131| |#$R@@160|)) |#$T1@@131|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@147| |#$T1@@131| |#$R@@160|)) )))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@305)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@305)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@148| |#$T1@@132| |#$R@@161|)) |#$R@@161|)) :qid |unknown.0:0| :skolemid |1120| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@148| |#$T1@@132| |#$R@@161|)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$R@@162| T@U) (bx@@90 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$R@@162|) TyType)) (= (type bx@@90) BoxType)) ($IsBox bx@@90 (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|))) (and (= ($Box ($Unbox HandleTypeType bx@@90)) bx@@90) ($Is ($Unbox HandleTypeType bx@@90) (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsBox bx@@90 (Tclass._System.___hPartialFunc2OSO |#$T0@@149| |#$T1@@133| |#$R@@162|))) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$R@@163| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$R@@163|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|)) (forall ((|x0#0@@11| T@U) (|x1#0@@9| T@U) ) (!  (=> (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@9|) BoxType)) (and ($IsBox |x0#0@@11| |#$T0@@150|) ($IsBox |x1#0@@9| |#$T1@@134|))) (|Set#Equal| (Reads2 |#$T0@@150| |#$T1@@134| |#$R@@163| $OneHeap |f#0@@27| |x0#0@@11| |x1#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@9|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1123| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc2OSO |#$T0@@150| |#$T1@@134| |#$R@@163|))) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$R@@164| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$R@@164|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25))) :qid |unknown.0:0| :skolemid |1124| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc2OSO |#$T0@@151| |#$T1@@135| |#$R@@164|) $h@@25)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@144 T@U) (arg2@@96 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@306 arg1@@144 arg2@@96)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@306 arg1@@144 arg2@@96)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$R@@165|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@152| |#$T1@@136| |#$R@@165|)) )))
(assert (forall ((arg0@@307 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@307)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@307)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$R@@166| T@U) ) (!  (=> (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$R@@166|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@153| |#$T1@@137| |#$R@@166|)) |#$T0@@153|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@153| |#$T1@@137| |#$R@@166|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@308)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@308)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@154| |#$T1@@138| |#$R@@167|)) |#$T1@@138|)) :qid |unknown.0:0| :skolemid |1127| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@154| |#$T1@@138| |#$R@@167|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@309)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@309)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@155| |#$T1@@139| |#$R@@168|)) |#$R@@168|)) :qid |unknown.0:0| :skolemid |1128| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@155| |#$T1@@139| |#$R@@168|)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$R@@169| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$R@@169|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|)))) :qid |unknown.0:0| :skolemid |1129| :pattern ( ($IsBox bx@@91 (Tclass._System.___hTotalFunc2OSO |#$T0@@156| |#$T1@@140| |#$R@@169|))) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$R@@170| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$R@@170|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|)) (forall ((|x0#0@@12| T@U) (|x1#0@@10| T@U) ) (!  (=> (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@10|) BoxType)) (and ($IsBox |x0#0@@12| |#$T0@@157|) ($IsBox |x1#0@@10| |#$T1@@141|))) (Requires2 |#$T0@@157| |#$T1@@141| |#$R@@170| $OneHeap |f#0@@29| |x0#0@@12| |x1#0@@10|)) :qid |unknown.0:0| :skolemid |1130| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@10|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc2OSO |#$T0@@157| |#$T1@@141| |#$R@@170|))) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$R@@171| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$R@@171|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26))) :qid |unknown.0:0| :skolemid |1132| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc2OSO |#$T0@@158| |#$T1@@142| |#$R@@171|) $h@@26)) )))
(assert (forall ((arg0@@310 T@U) (arg1@@145 T@U) (arg2@@97 T@U) (arg3@@70 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@310 arg1@@145 arg2@@97 arg3@@70)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@310 arg1@@145 arg2@@97 arg3@@70)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@105| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$R@@172|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |1133| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$R@@172|)) )))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@311)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@311)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@106| T@U) (|#$R@@173| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$R@@173|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$R@@173|)) |#$T0@@160|)) :qid |unknown.0:0| :skolemid |1134| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$R@@173|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@312)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@312)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@107| T@U) (|#$R@@174| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$R@@174|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$R@@174|)) |#$T1@@145|)) :qid |unknown.0:0| :skolemid |1135| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$R@@174|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@313)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@313)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@108| T@U) (|#$R@@175| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$R@@175|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$R@@175|)) |#$T2@@108|)) :qid |unknown.0:0| :skolemid |1136| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$R@@175|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@314)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@314)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@109| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$R@@176|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$R@@176|)) |#$R@@176|)) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$R@@176|)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@110| T@U) (|#$R@@177| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$R@@177|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|)))) :qid |unknown.0:0| :skolemid |1138| :pattern ( ($IsBox bx@@92 (Tclass._System.___hFunc3LLOO |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$R@@177|))) )))
(assert (forall ((arg0@@315 T@U) (arg1@@146 T@U) (arg2@@98 T@U) (arg3@@71 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@315 arg1@@146 arg2@@98 arg3@@71)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@315 arg1@@146 arg2@@98 arg3@@71)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@111| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$R@@178|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1139| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$R@@178|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@316)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@316)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@112| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$R@@179|)) |#$T0@@166|)) :qid |unknown.0:0| :skolemid |1140| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$R@@179|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@317)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@317)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@113| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$R@@180|)) |#$T1@@151|)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$R@@180|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@318)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@318)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@114| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$R@@181|)) |#$T2@@114|)) :qid |unknown.0:0| :skolemid |1142| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$R@@181|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@319)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@115| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$R@@182|)) |#$R@@182|)) :qid |unknown.0:0| :skolemid |1143| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$R@@182|)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@116| T@U) (|#$R@@183| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$R@@183|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|))) (and (= ($Box ($Unbox HandleTypeType bx@@93)) bx@@93) ($Is ($Unbox HandleTypeType bx@@93) (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|)))) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($IsBox bx@@93 (Tclass._System.___hPartialFunc3LLOO |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$R@@183|))) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@117| T@U) (|#$R@@184| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$R@@184|) TyType)) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|)) (forall ((|x0#0@@13| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (and (and ($IsBox |x0#0@@13| |#$T0@@171|) ($IsBox |x1#0@@11| |#$T1@@155|)) ($IsBox |x2#0@@7| |#$T2@@117|))) (|Set#Equal| (Reads3 |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184| $OneHeap |f#0@@31| |x0#0@@13| |x1#0@@11| |x2#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1145| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) ))))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLOO |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$R@@184|))) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@118| T@U) (|#$R@@185| T@U) (|f#0@@32| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27))) :qid |unknown.0:0| :skolemid |1147| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLOO |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$R@@185|) $h@@27)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@147 T@U) (arg2@@99 T@U) (arg3@@72 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@320 arg1@@147 arg2@@99 arg3@@72)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@320 arg1@@147 arg2@@99 arg3@@72)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@119| T@U) (|#$R@@186| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$R@@186|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1148| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$R@@186|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@321)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@321)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@120| T@U) (|#$R@@187| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$R@@187|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$R@@187|)) |#$T0@@174|)) :qid |unknown.0:0| :skolemid |1149| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$R@@187|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@322)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@322)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@121| T@U) (|#$R@@188| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$R@@188|)) |#$T1@@159|)) :qid |unknown.0:0| :skolemid |1150| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$R@@188|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@323)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@122| T@U) (|#$R@@189| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$R@@189|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$R@@189|)) |#$T2@@122|)) :qid |unknown.0:0| :skolemid |1151| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$R@@189|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@324)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@324)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@123| T@U) (|#$R@@190| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$R@@190|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$R@@190|)) |#$R@@190|)) :qid |unknown.0:0| :skolemid |1152| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$R@@190|)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@124| T@U) (|#$R@@191| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$R@@191|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|)))) :qid |unknown.0:0| :skolemid |1153| :pattern ( ($IsBox bx@@94 (Tclass._System.___hTotalFunc3LLOO |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$R@@191|))) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@125| T@U) (|#$R@@192| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$R@@192|) TyType)) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|)) (forall ((|x0#0@@14| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (and (and ($IsBox |x0#0@@14| |#$T0@@179|) ($IsBox |x1#0@@12| |#$T1@@163|)) ($IsBox |x2#0@@8| |#$T2@@125|))) (Requires3 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192| $OneHeap |f#0@@33| |x0#0@@14| |x1#0@@12| |x2#0@@8|)) :qid |unknown.0:0| :skolemid |1154| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) ))))) :qid |unknown.0:0| :skolemid |1155| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLOO |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$R@@192|))) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@126| T@U) (|#$R@@193| T@U) (|f#0@@34| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$R@@193|) TyType)) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28))) :qid |unknown.0:0| :skolemid |1156| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLOO |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$R@@193|) $h@@28)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@148 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@325 arg1@@148)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@325 arg1@@148)) )))
(assert (forall ((|#$T0@@181| T@U) (|#$R@@194| T@U) ) (!  (=> (and (= (type |#$T0@@181|) TyType) (= (type |#$R@@194|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |1157| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@181| |#$R@@194|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@326)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@326)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$R@@195| T@U) ) (!  (=> (and (= (type |#$T0@@182|) TyType) (= (type |#$R@@195|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@182| |#$R@@195|)) |#$T0@@182|)) :qid |unknown.0:0| :skolemid |1158| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@182| |#$R@@195|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@327)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@327)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$R@@196| T@U) ) (!  (=> (and (= (type |#$T0@@183|) TyType) (= (type |#$R@@196|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@183| |#$R@@196|)) |#$R@@196|)) :qid |unknown.0:0| :skolemid |1159| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@183| |#$R@@196|)) )))
(assert (forall ((|#$T0@@184| T@U) (|#$R@@197| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@184|) TyType) (= (type |#$R@@197|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|)))) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsBox bx@@95 (Tclass._System.___hFunc1OS |#$T0@@184| |#$R@@197|))) )))
(assert (forall ((arg0@@328 T@U) (arg1@@149 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@328 arg1@@149)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@328 arg1@@149)) )))
(assert (forall ((|#$T0@@185| T@U) (|#$R@@198| T@U) ) (!  (=> (and (= (type |#$T0@@185|) TyType) (= (type |#$R@@198|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |1161| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@185| |#$R@@198|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@329)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@329)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$R@@199| T@U) ) (!  (=> (and (= (type |#$T0@@186|) TyType) (= (type |#$R@@199|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@186| |#$R@@199|)) |#$T0@@186|)) :qid |unknown.0:0| :skolemid |1162| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@186| |#$R@@199|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@330)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@330)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$R@@200| T@U) ) (!  (=> (and (= (type |#$T0@@187|) TyType) (= (type |#$R@@200|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@187| |#$R@@200|)) |#$R@@200|)) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@187| |#$R@@200|)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$R@@201| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@188|) TyType) (= (type |#$R@@201|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|)))) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@96 (Tclass._System.___hPartialFunc1OS |#$T0@@188| |#$R@@201|))) )))
(assert (forall ((|#$T0@@189| T@U) (|#$R@@202| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@189|) TyType) (= (type |#$R@@202|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OS |#$T0@@189| |#$R@@202|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc1OS |#$T0@@189| |#$R@@202|)) (forall ((|x0#0@@15| T@U) ) (!  (=> (and (= (type |x0#0@@15|) BoxType) ($IsBox |x0#0@@15| |#$T0@@189|)) (|Set#Equal| (Reads1 |#$T0@@189| |#$R@@202| $OneHeap |f#0@@35| |x0#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1165| :no-pattern (type |x0#0@@15|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1166| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc1OS |#$T0@@189| |#$R@@202|))) )))
(assert (forall ((|#$T0@@190| T@U) (|#$R@@203| T@U) (|f#0@@36| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@190|) TyType) (= (type |#$R@@203|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OS |#$T0@@190| |#$R@@203|) $h@@29) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc1OS |#$T0@@190| |#$R@@203|) $h@@29))) :qid |unknown.0:0| :skolemid |1167| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc1OS |#$T0@@190| |#$R@@203|) $h@@29)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@150 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@331 arg1@@150)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@331 arg1@@150)) )))
(assert (forall ((|#$T0@@191| T@U) (|#$R@@204| T@U) ) (!  (=> (and (= (type |#$T0@@191|) TyType) (= (type |#$R@@204|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |1168| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@191| |#$R@@204|)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@332)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@332)) )))
(assert (forall ((|#$T0@@192| T@U) (|#$R@@205| T@U) ) (!  (=> (and (= (type |#$T0@@192|) TyType) (= (type |#$R@@205|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@192| |#$R@@205|)) |#$T0@@192|)) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@192| |#$R@@205|)) )))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@333)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@333)) )))
(assert (forall ((|#$T0@@193| T@U) (|#$R@@206| T@U) ) (!  (=> (and (= (type |#$T0@@193|) TyType) (= (type |#$R@@206|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@193| |#$R@@206|)) |#$R@@206|)) :qid |unknown.0:0| :skolemid |1170| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@193| |#$R@@206|)) )))
(assert (forall ((|#$T0@@194| T@U) (|#$R@@207| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@194|) TyType) (= (type |#$R@@207|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|))) (and (= ($Box ($Unbox HandleTypeType bx@@97)) bx@@97) ($Is ($Unbox HandleTypeType bx@@97) (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|)))) :qid |unknown.0:0| :skolemid |1171| :pattern ( ($IsBox bx@@97 (Tclass._System.___hTotalFunc1OS |#$T0@@194| |#$R@@207|))) )))
(assert (forall ((|#$T0@@195| T@U) (|#$R@@208| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (= (type |#$T0@@195|) TyType) (= (type |#$R@@208|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OS |#$T0@@195| |#$R@@208|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc1OS |#$T0@@195| |#$R@@208|)) (forall ((|x0#0@@16| T@U) ) (!  (=> (and (= (type |x0#0@@16|) BoxType) ($IsBox |x0#0@@16| |#$T0@@195|)) (Requires1 |#$T0@@195| |#$R@@208| $OneHeap |f#0@@37| |x0#0@@16|)) :qid |unknown.0:0| :skolemid |1172| :no-pattern (type |x0#0@@16|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1173| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc1OS |#$T0@@195| |#$R@@208|))) )))
(assert (forall ((|#$T0@@196| T@U) (|#$R@@209| T@U) (|f#0@@38| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@196|) TyType) (= (type |#$R@@209|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OS |#$T0@@196| |#$R@@209|) $h@@30) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc1OS |#$T0@@196| |#$R@@209|) $h@@30))) :qid |unknown.0:0| :skolemid |1174| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc1OS |#$T0@@196| |#$R@@209|) $h@@30)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@334)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@334)) )))
(assert (forall ((|#$R@@210| T@U) ) (!  (=> (= (type |#$R@@210|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@210|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@210|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |1175| :pattern ( (Tclass._System.___hFunc0L |#$R@@210|)) )))
(assert (forall ((arg0@@335 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@335)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@335)) )))
(assert (forall ((|#$R@@211| T@U) ) (!  (=> (= (type |#$R@@211|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@211|)) |#$R@@211|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (Tclass._System.___hFunc0L |#$R@@211|)) )))
(assert (forall ((|#$R@@212| T@U) (bx@@98 T@U) ) (!  (=> (and (and (= (type |#$R@@212|) TyType) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.___hFunc0L |#$R@@212|))) (and (= ($Box ($Unbox HandleTypeType bx@@98)) bx@@98) ($Is ($Unbox HandleTypeType bx@@98) (Tclass._System.___hFunc0L |#$R@@212|)))) :qid |unknown.0:0| :skolemid |1177| :pattern ( ($IsBox bx@@98 (Tclass._System.___hFunc0L |#$R@@212|))) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@336)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@336)) )))
(assert (forall ((|#$R@@213| T@U) ) (!  (=> (= (type |#$R@@213|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@213|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@213|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |1178| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@213|)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@337)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@337)) )))
(assert (forall ((|#$R@@214| T@U) ) (!  (=> (= (type |#$R@@214|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@214|)) |#$R@@214|)) :qid |unknown.0:0| :skolemid |1179| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@214|)) )))
(assert (forall ((|#$R@@215| T@U) (bx@@99 T@U) ) (!  (=> (and (and (= (type |#$R@@215|) TyType) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hPartialFunc0L |#$R@@215|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hPartialFunc0L |#$R@@215|)))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($IsBox bx@@99 (Tclass._System.___hPartialFunc0L |#$R@@215|))) )))
(assert (forall ((|#$R@@216| T@U) (|f#0@@39| T@U) ) (!  (=> (and (= (type |#$R@@216|) TyType) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc0L |#$R@@216|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc0L |#$R@@216|)) (|Set#Equal| (Reads0 |#$R@@216| $OneHeap |f#0@@39|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1181| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc0L |#$R@@216|))) )))
(assert (forall ((|#$R@@217| T@U) (|f#0@@40| T@U) ($h@@31 T@U) ) (!  (=> (and (and (= (type |#$R@@217|) TyType) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc0L |#$R@@217|) $h@@31) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc0L |#$R@@217|) $h@@31))) :qid |unknown.0:0| :skolemid |1182| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc0L |#$R@@217|) $h@@31)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@338)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@338)) )))
(assert (forall ((|#$R@@218| T@U) ) (!  (=> (= (type |#$R@@218|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@218|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@218|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |1183| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@218|)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@339)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@339)) )))
(assert (forall ((|#$R@@219| T@U) ) (!  (=> (= (type |#$R@@219|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@219|)) |#$R@@219|)) :qid |unknown.0:0| :skolemid |1184| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@219|)) )))
(assert (forall ((|#$R@@220| T@U) (bx@@100 T@U) ) (!  (=> (and (and (= (type |#$R@@220|) TyType) (= (type bx@@100) BoxType)) ($IsBox bx@@100 (Tclass._System.___hTotalFunc0L |#$R@@220|))) (and (= ($Box ($Unbox HandleTypeType bx@@100)) bx@@100) ($Is ($Unbox HandleTypeType bx@@100) (Tclass._System.___hTotalFunc0L |#$R@@220|)))) :qid |unknown.0:0| :skolemid |1185| :pattern ( ($IsBox bx@@100 (Tclass._System.___hTotalFunc0L |#$R@@220|))) )))
(assert (forall ((|#$R@@221| T@U) (|f#0@@41| T@U) ) (!  (=> (and (= (type |#$R@@221|) TyType) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc0L |#$R@@221|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc0L |#$R@@221|)) (Requires0 |#$R@@221| $OneHeap |f#0@@41|)))) :qid |unknown.0:0| :skolemid |1186| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc0L |#$R@@221|))) )))
(assert (forall ((|#$R@@222| T@U) (|f#0@@42| T@U) ($h@@32 T@U) ) (!  (=> (and (and (= (type |#$R@@222|) TyType) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc0L |#$R@@222|) $h@@32) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc0L |#$R@@222|) $h@@32))) :qid |unknown.0:0| :skolemid |1187| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc0L |#$R@@222|) $h@@32)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@151 T@U) (arg2@@100 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@340 arg1@@151 arg2@@100)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@340 arg1@@151 arg2@@100)) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@165| T@U) (|#$R@@223| T@U) ) (!  (=> (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$R@@223|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |1188| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@197| |#$T1@@165| |#$R@@223|)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@341)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@341)) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@166| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$R@@224|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@198| |#$T1@@166| |#$R@@224|)) |#$T0@@198|)) :qid |unknown.0:0| :skolemid |1189| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@198| |#$T1@@166| |#$R@@224|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@342)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@342)) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@167| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@199| |#$T1@@167| |#$R@@225|)) |#$T1@@167|)) :qid |unknown.0:0| :skolemid |1190| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@199| |#$T1@@167| |#$R@@225|)) )))
(assert (forall ((arg0@@343 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@343)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@343)) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@168| T@U) (|#$R@@226| T@U) ) (!  (=> (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@226|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@200| |#$T1@@168| |#$R@@226|)) |#$R@@226|)) :qid |unknown.0:0| :skolemid |1191| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@200| |#$T1@@168| |#$R@@226|)) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@169| T@U) (|#$R@@227| T@U) (bx@@101 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@227|) TyType)) (= (type bx@@101) BoxType)) ($IsBox bx@@101 (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|))) (and (= ($Box ($Unbox HandleTypeType bx@@101)) bx@@101) ($Is ($Unbox HandleTypeType bx@@101) (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|)))) :qid |unknown.0:0| :skolemid |1192| :pattern ( ($IsBox bx@@101 (Tclass._System.___hFunc2LOO |#$T0@@201| |#$T1@@169| |#$R@@227|))) )))
(assert (forall ((arg0@@344 T@U) (arg1@@152 T@U) (arg2@@101 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@344 arg1@@152 arg2@@101)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@344 arg1@@152 arg2@@101)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@170| T@U) (|#$R@@228| T@U) ) (!  (=> (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@228|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@202| |#$T1@@170| |#$R@@228|)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@345)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@345)) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@171| T@U) (|#$R@@229| T@U) ) (!  (=> (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@229|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@203| |#$T1@@171| |#$R@@229|)) |#$T0@@203|)) :qid |unknown.0:0| :skolemid |1194| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@203| |#$T1@@171| |#$R@@229|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@346)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@346)) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@172| T@U) (|#$R@@230| T@U) ) (!  (=> (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@230|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@204| |#$T1@@172| |#$R@@230|)) |#$T1@@172|)) :qid |unknown.0:0| :skolemid |1195| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@204| |#$T1@@172| |#$R@@230|)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@347)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@347)) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@173| T@U) (|#$R@@231| T@U) ) (!  (=> (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@231|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@205| |#$T1@@173| |#$R@@231|)) |#$R@@231|)) :qid |unknown.0:0| :skolemid |1196| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@205| |#$T1@@173| |#$R@@231|)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@174| T@U) (|#$R@@232| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@232|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|)))) :qid |unknown.0:0| :skolemid |1197| :pattern ( ($IsBox bx@@102 (Tclass._System.___hPartialFunc2LOO |#$T0@@206| |#$T1@@174| |#$R@@232|))) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@175| T@U) (|#$R@@233| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@233|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|)) (forall ((|x0#0@@17| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@17| |#$T0@@207|) ($IsBox |x1#0@@13| |#$T1@@175|))) (|Set#Equal| (Reads2 |#$T0@@207| |#$T1@@175| |#$R@@233| $OneHeap |f#0@@43| |x0#0@@17| |x1#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1198| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@13|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1199| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc2LOO |#$T0@@207| |#$T1@@175| |#$R@@233|))) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@176| T@U) (|#$R@@234| T@U) (|f#0@@44| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@234|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33))) :qid |unknown.0:0| :skolemid |1200| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc2LOO |#$T0@@208| |#$T1@@176| |#$R@@234|) $h@@33)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@153 T@U) (arg2@@102 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@348 arg1@@153 arg2@@102)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@348 arg1@@153 arg2@@102)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@177| T@U) (|#$R@@235| T@U) ) (!  (=> (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@235|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |1201| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@209| |#$T1@@177| |#$R@@235|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@349)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@349)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@178| T@U) (|#$R@@236| T@U) ) (!  (=> (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@236|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@210| |#$T1@@178| |#$R@@236|)) |#$T0@@210|)) :qid |unknown.0:0| :skolemid |1202| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@210| |#$T1@@178| |#$R@@236|)) )))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@350)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@350)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@179| T@U) (|#$R@@237| T@U) ) (!  (=> (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@237|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@211| |#$T1@@179| |#$R@@237|)) |#$T1@@179|)) :qid |unknown.0:0| :skolemid |1203| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@211| |#$T1@@179| |#$R@@237|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@351)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@351)) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@180| T@U) (|#$R@@238| T@U) ) (!  (=> (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@238|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@212| |#$T1@@180| |#$R@@238|)) |#$R@@238|)) :qid |unknown.0:0| :skolemid |1204| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@212| |#$T1@@180| |#$R@@238|)) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@181| T@U) (|#$R@@239| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@239|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|)))) :qid |unknown.0:0| :skolemid |1205| :pattern ( ($IsBox bx@@103 (Tclass._System.___hTotalFunc2LOO |#$T0@@213| |#$T1@@181| |#$R@@239|))) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@182| T@U) (|#$R@@240| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@240|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|)) (forall ((|x0#0@@18| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@18| |#$T0@@214|) ($IsBox |x1#0@@14| |#$T1@@182|))) (Requires2 |#$T0@@214| |#$T1@@182| |#$R@@240| $OneHeap |f#0@@45| |x0#0@@18| |x1#0@@14|)) :qid |unknown.0:0| :skolemid |1206| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@14|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1207| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc2LOO |#$T0@@214| |#$T1@@182| |#$R@@240|))) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@183| T@U) (|#$R@@241| T@U) (|f#0@@46| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@241|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34))) :qid |unknown.0:0| :skolemid |1208| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc2LOO |#$T0@@215| |#$T1@@183| |#$R@@241|) $h@@34)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1209| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1210| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@104)) bx@@104) ($Is ($Unbox DatatypeTypeType bx@@104) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1211| :pattern ( ($IsBox bx@@104 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@35 T@U) ) (!  (=> (and (= (type $h@@35) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@35)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@35)) :qid |DafnyPreludebpl.545:12| :skolemid |1212| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@35)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1213| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1214| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@126 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@126 b@@63) true)) :qid |unknown.0:0| :skolemid |1215| :pattern ( (|_System.Tuple0#Equal| a@@126 b@@63)) )))
(assert (forall ((a@@127 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@127) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@127 b@@64) (= a@@127 b@@64))) :qid |unknown.0:0| :skolemid |1216| :pattern ( (|_System.Tuple0#Equal| a@@127 b@@64)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@154 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@352 arg1@@154)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@352 arg1@@154)) )))
(assert (forall ((|#$T0@@216| T@U) (|#$R@@242| T@U) ) (!  (=> (and (= (type |#$T0@@216|) TyType) (= (type |#$R@@242|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1217| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@216| |#$R@@242|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@353)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@353)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$R@@243| T@U) ) (!  (=> (and (= (type |#$T0@@217|) TyType) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@217| |#$R@@243|)) |#$T0@@217|)) :qid |unknown.0:0| :skolemid |1218| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@217| |#$R@@243|)) )))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@354)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@354)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$R@@244| T@U) ) (!  (=> (and (= (type |#$T0@@218|) TyType) (= (type |#$R@@244|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@218| |#$R@@244|)) |#$R@@244|)) :qid |unknown.0:0| :skolemid |1219| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@218| |#$R@@244|)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$R@@245| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@219|) TyType) (= (type |#$R@@245|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|)))) :qid |unknown.0:0| :skolemid |1220| :pattern ( ($IsBox bx@@105 (Tclass._System.___hFunc1OL |#$T0@@219| |#$R@@245|))) )))
(assert (forall ((arg0@@355 T@U) (arg1@@155 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@355 arg1@@155)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@355 arg1@@155)) )))
(assert (forall ((|#$T0@@220| T@U) (|#$R@@246| T@U) ) (!  (=> (and (= (type |#$T0@@220|) TyType) (= (type |#$R@@246|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@220| |#$R@@246|)) )))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@356)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@356)) )))
(assert (forall ((|#$T0@@221| T@U) (|#$R@@247| T@U) ) (!  (=> (and (= (type |#$T0@@221|) TyType) (= (type |#$R@@247|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@221| |#$R@@247|)) |#$T0@@221|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@221| |#$R@@247|)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@357)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@357)) )))
(assert (forall ((|#$T0@@222| T@U) (|#$R@@248| T@U) ) (!  (=> (and (= (type |#$T0@@222|) TyType) (= (type |#$R@@248|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@222| |#$R@@248|)) |#$R@@248|)) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@222| |#$R@@248|)) )))
(assert (forall ((|#$T0@@223| T@U) (|#$R@@249| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@223|) TyType) (= (type |#$R@@249|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|)))) :qid |unknown.0:0| :skolemid |1224| :pattern ( ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OL |#$T0@@223| |#$R@@249|))) )))
(assert (forall ((|#$T0@@224| T@U) (|#$R@@250| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (= (type |#$T0@@224|) TyType) (= (type |#$R@@250|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OL |#$T0@@224| |#$R@@250|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc1OL |#$T0@@224| |#$R@@250|)) (forall ((|x0#0@@19| T@U) ) (!  (=> (and (= (type |x0#0@@19|) BoxType) ($IsBox |x0#0@@19| |#$T0@@224|)) (|Set#Equal| (Reads1 |#$T0@@224| |#$R@@250| $OneHeap |f#0@@47| |x0#0@@19|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1225| :no-pattern (type |x0#0@@19|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) ))))) :qid |unknown.0:0| :skolemid |1226| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OL |#$T0@@224| |#$R@@250|))) )))
(assert (forall ((|#$T0@@225| T@U) (|#$R@@251| T@U) (|f#0@@48| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@225|) TyType) (= (type |#$R@@251|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OL |#$T0@@225| |#$R@@251|) $h@@36) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc1OL |#$T0@@225| |#$R@@251|) $h@@36))) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OL |#$T0@@225| |#$R@@251|) $h@@36)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@156 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@358 arg1@@156)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@358 arg1@@156)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$R@@252| T@U) ) (!  (=> (and (= (type |#$T0@@226|) TyType) (= (type |#$R@@252|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1228| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@226| |#$R@@252|)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@359)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@359)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$R@@253| T@U) ) (!  (=> (and (= (type |#$T0@@227|) TyType) (= (type |#$R@@253|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@227| |#$R@@253|)) |#$T0@@227|)) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@227| |#$R@@253|)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@360)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@360)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$R@@254| T@U) ) (!  (=> (and (= (type |#$T0@@228|) TyType) (= (type |#$R@@254|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@228| |#$R@@254|)) |#$R@@254|)) :qid |unknown.0:0| :skolemid |1230| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@228| |#$R@@254|)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$R@@255| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@229|) TyType) (= (type |#$R@@255|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|)))) :qid |unknown.0:0| :skolemid |1231| :pattern ( ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OL |#$T0@@229| |#$R@@255|))) )))
(assert (forall ((|#$T0@@230| T@U) (|#$R@@256| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (= (type |#$T0@@230|) TyType) (= (type |#$R@@256|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OL |#$T0@@230| |#$R@@256|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc1OL |#$T0@@230| |#$R@@256|)) (forall ((|x0#0@@20| T@U) ) (!  (=> (and (= (type |x0#0@@20|) BoxType) ($IsBox |x0#0@@20| |#$T0@@230|)) (Requires1 |#$T0@@230| |#$R@@256| $OneHeap |f#0@@49| |x0#0@@20|)) :qid |unknown.0:0| :skolemid |1232| :no-pattern (type |x0#0@@20|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) ))))) :qid |unknown.0:0| :skolemid |1233| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OL |#$T0@@230| |#$R@@256|))) )))
(assert (forall ((|#$T0@@231| T@U) (|#$R@@257| T@U) (|f#0@@50| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$R@@257|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OL |#$T0@@231| |#$R@@257|) $h@@37) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc1OL |#$T0@@231| |#$R@@257|) $h@@37))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OL |#$T0@@231| |#$R@@257|) $h@@37)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@157 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@361 arg1@@157)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@361 arg1@@157)) )))
(assert (forall ((|#$T0@@232| T@U) (|#$R@@258| T@U) ) (!  (=> (and (= (type |#$T0@@232|) TyType) (= (type |#$R@@258|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1235| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@232| |#$R@@258|)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@362)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@362)) )))
(assert (forall ((|#$T0@@233| T@U) (|#$R@@259| T@U) ) (!  (=> (and (= (type |#$T0@@233|) TyType) (= (type |#$R@@259|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@233| |#$R@@259|)) |#$T0@@233|)) :qid |unknown.0:0| :skolemid |1236| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@233| |#$R@@259|)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@363)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@363)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$R@@260| T@U) ) (!  (=> (and (= (type |#$T0@@234|) TyType) (= (type |#$R@@260|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@234| |#$R@@260|)) |#$R@@260|)) :qid |unknown.0:0| :skolemid |1237| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@234| |#$R@@260|)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$R@@261| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@235|) TyType) (= (type |#$R@@261|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|)))) :qid |unknown.0:0| :skolemid |1238| :pattern ( ($IsBox bx@@108 (Tclass._System.___hFunc1LO |#$T0@@235| |#$R@@261|))) )))
(assert (forall ((arg0@@364 T@U) (arg1@@158 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@364 arg1@@158)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@364 arg1@@158)) )))
(assert (forall ((|#$T0@@236| T@U) (|#$R@@262| T@U) ) (!  (=> (and (= (type |#$T0@@236|) TyType) (= (type |#$R@@262|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@236| |#$R@@262|)) )))
(assert (forall ((arg0@@365 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@365)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@365)) )))
(assert (forall ((|#$T0@@237| T@U) (|#$R@@263| T@U) ) (!  (=> (and (= (type |#$T0@@237|) TyType) (= (type |#$R@@263|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@237| |#$R@@263|)) |#$T0@@237|)) :qid |unknown.0:0| :skolemid |1240| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@237| |#$R@@263|)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@366)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@366)) )))
(assert (forall ((|#$T0@@238| T@U) (|#$R@@264| T@U) ) (!  (=> (and (= (type |#$T0@@238|) TyType) (= (type |#$R@@264|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@238| |#$R@@264|)) |#$R@@264|)) :qid |unknown.0:0| :skolemid |1241| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@238| |#$R@@264|)) )))
(assert (forall ((|#$T0@@239| T@U) (|#$R@@265| T@U) (bx@@109 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@239|) TyType) (= (type |#$R@@265|) TyType)) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|))) (and (= ($Box ($Unbox HandleTypeType bx@@109)) bx@@109) ($Is ($Unbox HandleTypeType bx@@109) (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|)))) :qid |unknown.0:0| :skolemid |1242| :pattern ( ($IsBox bx@@109 (Tclass._System.___hPartialFunc1LO |#$T0@@239| |#$R@@265|))) )))
(assert (forall ((|#$T0@@240| T@U) (|#$R@@266| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (= (type |#$T0@@240|) TyType) (= (type |#$R@@266|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc1LO |#$T0@@240| |#$R@@266|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc1LO |#$T0@@240| |#$R@@266|)) (forall ((|x0#0@@21| T@U) ) (!  (=> (and (= (type |x0#0@@21|) BoxType) ($IsBox |x0#0@@21| |#$T0@@240|)) (|Set#Equal| (Reads1 |#$T0@@240| |#$R@@266| $OneHeap |f#0@@51| |x0#0@@21|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1243| :no-pattern (type |x0#0@@21|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) ))))) :qid |unknown.0:0| :skolemid |1244| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc1LO |#$T0@@240| |#$R@@266|))) )))
(assert (forall ((|#$T0@@241| T@U) (|#$R@@267| T@U) (|f#0@@52| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@241|) TyType) (= (type |#$R@@267|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1LO |#$T0@@241| |#$R@@267|) $h@@38) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc1LO |#$T0@@241| |#$R@@267|) $h@@38))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1LO |#$T0@@241| |#$R@@267|) $h@@38)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@159 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@367 arg1@@159)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@367 arg1@@159)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$R@@268| T@U) ) (!  (=> (and (= (type |#$T0@@242|) TyType) (= (type |#$R@@268|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1246| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@242| |#$R@@268|)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@368)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@368)) )))
(assert (forall ((|#$T0@@243| T@U) (|#$R@@269| T@U) ) (!  (=> (and (= (type |#$T0@@243|) TyType) (= (type |#$R@@269|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@243| |#$R@@269|)) |#$T0@@243|)) :qid |unknown.0:0| :skolemid |1247| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@243| |#$R@@269|)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@369)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@369)) )))
(assert (forall ((|#$T0@@244| T@U) (|#$R@@270| T@U) ) (!  (=> (and (= (type |#$T0@@244|) TyType) (= (type |#$R@@270|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@244| |#$R@@270|)) |#$R@@270|)) :qid |unknown.0:0| :skolemid |1248| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@244| |#$R@@270|)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$R@@271| T@U) (bx@@110 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@245|) TyType) (= (type |#$R@@271|) TyType)) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|))) (and (= ($Box ($Unbox HandleTypeType bx@@110)) bx@@110) ($Is ($Unbox HandleTypeType bx@@110) (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|)))) :qid |unknown.0:0| :skolemid |1249| :pattern ( ($IsBox bx@@110 (Tclass._System.___hTotalFunc1LO |#$T0@@245| |#$R@@271|))) )))
(assert (forall ((|#$T0@@246| T@U) (|#$R@@272| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (= (type |#$T0@@246|) TyType) (= (type |#$R@@272|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc1LO |#$T0@@246| |#$R@@272|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc1LO |#$T0@@246| |#$R@@272|)) (forall ((|x0#0@@22| T@U) ) (!  (=> (and (= (type |x0#0@@22|) BoxType) ($IsBox |x0#0@@22| |#$T0@@246|)) (Requires1 |#$T0@@246| |#$R@@272| $OneHeap |f#0@@53| |x0#0@@22|)) :qid |unknown.0:0| :skolemid |1250| :no-pattern (type |x0#0@@22|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) ))))) :qid |unknown.0:0| :skolemid |1251| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc1LO |#$T0@@246| |#$R@@272|))) )))
(assert (forall ((|#$T0@@247| T@U) (|#$R@@273| T@U) (|f#0@@54| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@247|) TyType) (= (type |#$R@@273|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1LO |#$T0@@247| |#$R@@273|) $h@@39) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc1LO |#$T0@@247| |#$R@@273|) $h@@39))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1LO |#$T0@@247| |#$R@@273|) $h@@39)) )))
(assert (forall ((arg0@@370 T@U) (arg1@@160 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@370 arg1@@160)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@370 arg1@@160)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1253| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1254| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2OLL._#Make2| |a#15#0#0| |a#15#1#0|))) :qid |unknown.0:0| :skolemid |1255| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) ))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@11)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@161 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@371 arg1@@161)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@371 arg1@@161)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1257| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@372 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@372)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@372)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1258| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@373)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@373)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1259| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@111 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($IsBox bx@@111 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@40)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@40)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2OLL$T0@@4| $h@@40) ($IsAllocBox |a#17#1#0| |_System._tuple#2OLL$T1@@4| $h@@40)))) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@40)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@374)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@374)) )))
(assert (forall ((d@@12 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@41) (and (_System.Tuple2OLL.___hMake2_q d@@12) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@41)) :qid |unknown.0:0| :skolemid |1263| :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@41)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@41)) :qid |unknown.0:0| :skolemid |1264| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@41)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@375)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@375)) )))
(assert (forall ((d@@13 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@42) (and (_System.Tuple2OLL.___hMake2_q d@@13) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@42)) :qid |unknown.0:0| :skolemid |1265| :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@42)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@42)) :qid |unknown.0:0| :skolemid |1266| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@42)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#18#0#0| |a#18#1#0|)))) :qid |unknown.0:0| :skolemid |1267| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)) :qid |unknown.0:0| :skolemid |1268| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)))) :qid |unknown.0:0| :skolemid |1269| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)) :qid |unknown.0:0| :skolemid |1270| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)))) :qid |unknown.0:0| :skolemid |1271| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@14)) (_System.Tuple2OLL.___hMake2_q d@@14)) :qid |unknown.0:0| :skolemid |1272| :pattern ( (|$IsA#_System.Tuple2OLL| d@@14)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@15)) :qid |unknown.0:0| :skolemid |1273| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@128 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@128 b@@65)  (and (= (_System.Tuple2OLL._0 a@@128) (_System.Tuple2OLL._0 b@@65)) (= (_System.Tuple2OLL._1 a@@128) (_System.Tuple2OLL._1 b@@65))))) :qid |unknown.0:0| :skolemid |1274| :pattern ( (|_System.Tuple2OLL#Equal| a@@128 b@@65)) )))
(assert (forall ((a@@129 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@129) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@129 b@@66) (= a@@129 b@@66))) :qid |unknown.0:0| :skolemid |1275| :pattern ( (|_System.Tuple2OLL#Equal| a@@129 b@@66)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@162 T@U) (arg2@@103 T@U) (arg3@@73 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@376 arg1@@162 arg2@@103 arg3@@73)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@376 arg1@@162 arg2@@103 arg3@@73)) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@184| T@U) (|#$T2@@127| T@U) (|#$R@@274| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$R@@274|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1276| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@248| |#$T1@@184| |#$T2@@127| |#$R@@274|)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@377)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@377)) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@185| T@U) (|#$T2@@128| T@U) (|#$R@@275| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@185|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$R@@275|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@249| |#$T1@@185| |#$T2@@128| |#$R@@275|)) |#$T0@@249|)) :qid |unknown.0:0| :skolemid |1277| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@249| |#$T1@@185| |#$T2@@128| |#$R@@275|)) )))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@378)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@378)) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@186| T@U) (|#$T2@@129| T@U) (|#$R@@276| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@186|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$R@@276|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@250| |#$T1@@186| |#$T2@@129| |#$R@@276|)) |#$T1@@186|)) :qid |unknown.0:0| :skolemid |1278| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@250| |#$T1@@186| |#$T2@@129| |#$R@@276|)) )))
(assert (forall ((arg0@@379 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@379)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@379)) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@187| T@U) (|#$T2@@130| T@U) (|#$R@@277| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@187|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$R@@277|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@251| |#$T1@@187| |#$T2@@130| |#$R@@277|)) |#$T2@@130|)) :qid |unknown.0:0| :skolemid |1279| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@251| |#$T1@@187| |#$T2@@130| |#$R@@277|)) )))
(assert (forall ((arg0@@380 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@380)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@380)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$T1@@188| T@U) (|#$T2@@131| T@U) (|#$R@@278| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@252|) TyType) (= (type |#$T1@@188|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$R@@278|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@252| |#$T1@@188| |#$T2@@131| |#$R@@278|)) |#$R@@278|)) :qid |unknown.0:0| :skolemid |1280| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@252| |#$T1@@188| |#$T2@@131| |#$R@@278|)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$T1@@189| T@U) (|#$T2@@132| T@U) (|#$R@@279| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@253|) TyType) (= (type |#$T1@@189|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$R@@279|) TyType)) (= (type bx@@112) BoxType)) ($IsBox bx@@112 (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|))) (and (= ($Box ($Unbox HandleTypeType bx@@112)) bx@@112) ($Is ($Unbox HandleTypeType bx@@112) (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|)))) :qid |unknown.0:0| :skolemid |1281| :pattern ( ($IsBox bx@@112 (Tclass._System.___hFunc3LLOL |#$T0@@253| |#$T1@@189| |#$T2@@132| |#$R@@279|))) )))
(assert (forall ((arg0@@381 T@U) (arg1@@163 T@U) (arg2@@104 T@U) (arg3@@74 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@381 arg1@@163 arg2@@104 arg3@@74)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@381 arg1@@163 arg2@@104 arg3@@74)) )))
(assert (forall ((|#$T0@@254| T@U) (|#$T1@@190| T@U) (|#$T2@@133| T@U) (|#$R@@280| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@254|) TyType) (= (type |#$T1@@190|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$R@@280|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@254| |#$T1@@190| |#$T2@@133| |#$R@@280|)) )))
(assert (forall ((arg0@@382 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@382)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@382)) )))
(assert (forall ((|#$T0@@255| T@U) (|#$T1@@191| T@U) (|#$T2@@134| T@U) (|#$R@@281| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@255|) TyType) (= (type |#$T1@@191|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$R@@281|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@255| |#$T1@@191| |#$T2@@134| |#$R@@281|)) |#$T0@@255|)) :qid |unknown.0:0| :skolemid |1283| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@255| |#$T1@@191| |#$T2@@134| |#$R@@281|)) )))
(assert (forall ((arg0@@383 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@383)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@383)) )))
(assert (forall ((|#$T0@@256| T@U) (|#$T1@@192| T@U) (|#$T2@@135| T@U) (|#$R@@282| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$T1@@192|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$R@@282|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@256| |#$T1@@192| |#$T2@@135| |#$R@@282|)) |#$T1@@192|)) :qid |unknown.0:0| :skolemid |1284| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@256| |#$T1@@192| |#$T2@@135| |#$R@@282|)) )))
(assert (forall ((arg0@@384 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@384)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@384)) )))
(assert (forall ((|#$T0@@257| T@U) (|#$T1@@193| T@U) (|#$T2@@136| T@U) (|#$R@@283| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@257|) TyType) (= (type |#$T1@@193|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$R@@283|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@257| |#$T1@@193| |#$T2@@136| |#$R@@283|)) |#$T2@@136|)) :qid |unknown.0:0| :skolemid |1285| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@257| |#$T1@@193| |#$T2@@136| |#$R@@283|)) )))
(assert (forall ((arg0@@385 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@385)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@385)) )))
(assert (forall ((|#$T0@@258| T@U) (|#$T1@@194| T@U) (|#$T2@@137| T@U) (|#$R@@284| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@258|) TyType) (= (type |#$T1@@194|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$R@@284|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@258| |#$T1@@194| |#$T2@@137| |#$R@@284|)) |#$R@@284|)) :qid |unknown.0:0| :skolemid |1286| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@258| |#$T1@@194| |#$T2@@137| |#$R@@284|)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$T1@@195| T@U) (|#$T2@@138| T@U) (|#$R@@285| T@U) (bx@@113 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@259|) TyType) (= (type |#$T1@@195|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$R@@285|) TyType)) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|))) (and (= ($Box ($Unbox HandleTypeType bx@@113)) bx@@113) ($Is ($Unbox HandleTypeType bx@@113) (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|)))) :qid |unknown.0:0| :skolemid |1287| :pattern ( ($IsBox bx@@113 (Tclass._System.___hPartialFunc3LLOL |#$T0@@259| |#$T1@@195| |#$T2@@138| |#$R@@285|))) )))
(assert (forall ((|#$T0@@260| T@U) (|#$T1@@196| T@U) (|#$T2@@139| T@U) (|#$R@@286| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@260|) TyType) (= (type |#$T1@@196|) TyType)) (= (type |#$T2@@139|) TyType)) (= (type |#$R@@286|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|)) (forall ((|x0#0@@23| T@U) (|x1#0@@15| T@U) (|x2#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@9|) BoxType)) (and (and ($IsBox |x0#0@@23| |#$T0@@260|) ($IsBox |x1#0@@15| |#$T1@@196|)) ($IsBox |x2#0@@9| |#$T2@@139|))) (|Set#Equal| (Reads3 |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286| $OneHeap |f#0@@55| |x0#0@@23| |x1#0@@15| |x2#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1288| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@9|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1289| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc3LLOL |#$T0@@260| |#$T1@@196| |#$T2@@139| |#$R@@286|))) )))
(assert (forall ((|#$T0@@261| T@U) (|#$T1@@197| T@U) (|#$T2@@140| T@U) (|#$R@@287| T@U) (|f#0@@56| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@261|) TyType) (= (type |#$T1@@197|) TyType)) (= (type |#$T2@@140|) TyType)) (= (type |#$R@@287|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43))) :qid |unknown.0:0| :skolemid |1290| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc3LLOL |#$T0@@261| |#$T1@@197| |#$T2@@140| |#$R@@287|) $h@@43)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@164 T@U) (arg2@@105 T@U) (arg3@@75 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@386 arg1@@164 arg2@@105 arg3@@75)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@386 arg1@@164 arg2@@105 arg3@@75)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$T1@@198| T@U) (|#$T2@@141| T@U) (|#$R@@288| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@262|) TyType) (= (type |#$T1@@198|) TyType)) (= (type |#$T2@@141|) TyType)) (= (type |#$R@@288|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1291| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@262| |#$T1@@198| |#$T2@@141| |#$R@@288|)) )))
(assert (forall ((arg0@@387 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@387)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@387)) )))
(assert (forall ((|#$T0@@263| T@U) (|#$T1@@199| T@U) (|#$T2@@142| T@U) (|#$R@@289| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@263|) TyType) (= (type |#$T1@@199|) TyType)) (= (type |#$T2@@142|) TyType)) (= (type |#$R@@289|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@263| |#$T1@@199| |#$T2@@142| |#$R@@289|)) |#$T0@@263|)) :qid |unknown.0:0| :skolemid |1292| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@263| |#$T1@@199| |#$T2@@142| |#$R@@289|)) )))
(assert (forall ((arg0@@388 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@388)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@388)) )))
(assert (forall ((|#$T0@@264| T@U) (|#$T1@@200| T@U) (|#$T2@@143| T@U) (|#$R@@290| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@264|) TyType) (= (type |#$T1@@200|) TyType)) (= (type |#$T2@@143|) TyType)) (= (type |#$R@@290|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@264| |#$T1@@200| |#$T2@@143| |#$R@@290|)) |#$T1@@200|)) :qid |unknown.0:0| :skolemid |1293| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@264| |#$T1@@200| |#$T2@@143| |#$R@@290|)) )))
(assert (forall ((arg0@@389 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@389)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@389)) )))
(assert (forall ((|#$T0@@265| T@U) (|#$T1@@201| T@U) (|#$T2@@144| T@U) (|#$R@@291| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@265|) TyType) (= (type |#$T1@@201|) TyType)) (= (type |#$T2@@144|) TyType)) (= (type |#$R@@291|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@265| |#$T1@@201| |#$T2@@144| |#$R@@291|)) |#$T2@@144|)) :qid |unknown.0:0| :skolemid |1294| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@265| |#$T1@@201| |#$T2@@144| |#$R@@291|)) )))
(assert (forall ((arg0@@390 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@390)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@390)) )))
(assert (forall ((|#$T0@@266| T@U) (|#$T1@@202| T@U) (|#$T2@@145| T@U) (|#$R@@292| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@266|) TyType) (= (type |#$T1@@202|) TyType)) (= (type |#$T2@@145|) TyType)) (= (type |#$R@@292|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@266| |#$T1@@202| |#$T2@@145| |#$R@@292|)) |#$R@@292|)) :qid |unknown.0:0| :skolemid |1295| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@266| |#$T1@@202| |#$T2@@145| |#$R@@292|)) )))
(assert (forall ((|#$T0@@267| T@U) (|#$T1@@203| T@U) (|#$T2@@146| T@U) (|#$R@@293| T@U) (bx@@114 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@267|) TyType) (= (type |#$T1@@203|) TyType)) (= (type |#$T2@@146|) TyType)) (= (type |#$R@@293|) TyType)) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|))) (and (= ($Box ($Unbox HandleTypeType bx@@114)) bx@@114) ($Is ($Unbox HandleTypeType bx@@114) (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|)))) :qid |unknown.0:0| :skolemid |1296| :pattern ( ($IsBox bx@@114 (Tclass._System.___hTotalFunc3LLOL |#$T0@@267| |#$T1@@203| |#$T2@@146| |#$R@@293|))) )))
(assert (forall ((|#$T0@@268| T@U) (|#$T1@@204| T@U) (|#$T2@@147| T@U) (|#$R@@294| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@268|) TyType) (= (type |#$T1@@204|) TyType)) (= (type |#$T2@@147|) TyType)) (= (type |#$R@@294|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|)) (forall ((|x0#0@@24| T@U) (|x1#0@@16| T@U) (|x2#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@10|) BoxType)) (and (and ($IsBox |x0#0@@24| |#$T0@@268|) ($IsBox |x1#0@@16| |#$T1@@204|)) ($IsBox |x2#0@@10| |#$T2@@147|))) (Requires3 |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294| $OneHeap |f#0@@57| |x0#0@@24| |x1#0@@16| |x2#0@@10|)) :qid |unknown.0:0| :skolemid |1297| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@10|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1298| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc3LLOL |#$T0@@268| |#$T1@@204| |#$T2@@147| |#$R@@294|))) )))
(assert (forall ((|#$T0@@269| T@U) (|#$T1@@205| T@U) (|#$T2@@148| T@U) (|#$R@@295| T@U) (|f#0@@58| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@269|) TyType) (= (type |#$T1@@205|) TyType)) (= (type |#$T2@@148|) TyType)) (= (type |#$R@@295|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44))) :qid |unknown.0:0| :skolemid |1299| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc3LLOL |#$T0@@269| |#$T1@@205| |#$T2@@148| |#$R@@295|) $h@@44)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@165 T@U) (arg2@@106 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@391 arg1@@165 arg2@@106)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@391 arg1@@165 arg2@@106)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$T1@@206| T@U) (|#$R@@296| T@U) ) (!  (=> (and (and (= (type |#$T0@@270|) TyType) (= (type |#$T1@@206|) TyType)) (= (type |#$R@@296|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1300| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@270| |#$T1@@206| |#$R@@296|)) )))
(assert (forall ((arg0@@392 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@392)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@392)) )))
(assert (forall ((|#$T0@@271| T@U) (|#$T1@@207| T@U) (|#$R@@297| T@U) ) (!  (=> (and (and (= (type |#$T0@@271|) TyType) (= (type |#$T1@@207|) TyType)) (= (type |#$R@@297|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@271| |#$T1@@207| |#$R@@297|)) |#$T0@@271|)) :qid |unknown.0:0| :skolemid |1301| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@271| |#$T1@@207| |#$R@@297|)) )))
(assert (forall ((arg0@@393 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@393)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@393)) )))
(assert (forall ((|#$T0@@272| T@U) (|#$T1@@208| T@U) (|#$R@@298| T@U) ) (!  (=> (and (and (= (type |#$T0@@272|) TyType) (= (type |#$T1@@208|) TyType)) (= (type |#$R@@298|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@272| |#$T1@@208| |#$R@@298|)) |#$T1@@208|)) :qid |unknown.0:0| :skolemid |1302| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@272| |#$T1@@208| |#$R@@298|)) )))
(assert (forall ((arg0@@394 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@394)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@394)) )))
(assert (forall ((|#$T0@@273| T@U) (|#$T1@@209| T@U) (|#$R@@299| T@U) ) (!  (=> (and (and (= (type |#$T0@@273|) TyType) (= (type |#$T1@@209|) TyType)) (= (type |#$R@@299|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@273| |#$T1@@209| |#$R@@299|)) |#$R@@299|)) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@273| |#$T1@@209| |#$R@@299|)) )))
(assert (forall ((|#$T0@@274| T@U) (|#$T1@@210| T@U) (|#$R@@300| T@U) (bx@@115 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@274|) TyType) (= (type |#$T1@@210|) TyType)) (= (type |#$R@@300|) TyType)) (= (type bx@@115) BoxType)) ($IsBox bx@@115 (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|))) (and (= ($Box ($Unbox HandleTypeType bx@@115)) bx@@115) ($Is ($Unbox HandleTypeType bx@@115) (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|)))) :qid |unknown.0:0| :skolemid |1304| :pattern ( ($IsBox bx@@115 (Tclass._System.___hFunc2SSO |#$T0@@274| |#$T1@@210| |#$R@@300|))) )))
(assert (forall ((arg0@@395 T@U) (arg1@@166 T@U) (arg2@@107 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@395 arg1@@166 arg2@@107)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@395 arg1@@166 arg2@@107)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$T1@@211| T@U) (|#$R@@301| T@U) ) (!  (=> (and (and (= (type |#$T0@@275|) TyType) (= (type |#$T1@@211|) TyType)) (= (type |#$R@@301|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1305| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@275| |#$T1@@211| |#$R@@301|)) )))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@396)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@396)) )))
(assert (forall ((|#$T0@@276| T@U) (|#$T1@@212| T@U) (|#$R@@302| T@U) ) (!  (=> (and (and (= (type |#$T0@@276|) TyType) (= (type |#$T1@@212|) TyType)) (= (type |#$R@@302|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@276| |#$T1@@212| |#$R@@302|)) |#$T0@@276|)) :qid |unknown.0:0| :skolemid |1306| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@276| |#$T1@@212| |#$R@@302|)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@397)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@397)) )))
(assert (forall ((|#$T0@@277| T@U) (|#$T1@@213| T@U) (|#$R@@303| T@U) ) (!  (=> (and (and (= (type |#$T0@@277|) TyType) (= (type |#$T1@@213|) TyType)) (= (type |#$R@@303|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@277| |#$T1@@213| |#$R@@303|)) |#$T1@@213|)) :qid |unknown.0:0| :skolemid |1307| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@277| |#$T1@@213| |#$R@@303|)) )))
(assert (forall ((arg0@@398 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@398)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@398)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$T1@@214| T@U) (|#$R@@304| T@U) ) (!  (=> (and (and (= (type |#$T0@@278|) TyType) (= (type |#$T1@@214|) TyType)) (= (type |#$R@@304|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@278| |#$T1@@214| |#$R@@304|)) |#$R@@304|)) :qid |unknown.0:0| :skolemid |1308| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@278| |#$T1@@214| |#$R@@304|)) )))
(assert (forall ((|#$T0@@279| T@U) (|#$T1@@215| T@U) (|#$R@@305| T@U) (bx@@116 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@279|) TyType) (= (type |#$T1@@215|) TyType)) (= (type |#$R@@305|) TyType)) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|))) (and (= ($Box ($Unbox HandleTypeType bx@@116)) bx@@116) ($Is ($Unbox HandleTypeType bx@@116) (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|)))) :qid |unknown.0:0| :skolemid |1309| :pattern ( ($IsBox bx@@116 (Tclass._System.___hPartialFunc2SSO |#$T0@@279| |#$T1@@215| |#$R@@305|))) )))
(assert (forall ((|#$T0@@280| T@U) (|#$T1@@216| T@U) (|#$R@@306| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@280|) TyType) (= (type |#$T1@@216|) TyType)) (= (type |#$R@@306|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|)) (forall ((|x0#0@@25| T@U) (|x1#0@@17| T@U) ) (!  (=> (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@17|) BoxType)) (and ($IsBox |x0#0@@25| |#$T0@@280|) ($IsBox |x1#0@@17| |#$T1@@216|))) (|Set#Equal| (Reads2 |#$T0@@280| |#$T1@@216| |#$R@@306| $OneHeap |f#0@@59| |x0#0@@25| |x1#0@@17|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1310| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@17|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) ))))) :qid |unknown.0:0| :skolemid |1311| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc2SSO |#$T0@@280| |#$T1@@216| |#$R@@306|))) )))
(assert (forall ((|#$T0@@281| T@U) (|#$T1@@217| T@U) (|#$R@@307| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@281|) TyType) (= (type |#$T1@@217|) TyType)) (= (type |#$R@@307|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45))) :qid |unknown.0:0| :skolemid |1312| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc2SSO |#$T0@@281| |#$T1@@217| |#$R@@307|) $h@@45)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@167 T@U) (arg2@@108 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@399 arg1@@167 arg2@@108)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@399 arg1@@167 arg2@@108)) )))
(assert (forall ((|#$T0@@282| T@U) (|#$T1@@218| T@U) (|#$R@@308| T@U) ) (!  (=> (and (and (= (type |#$T0@@282|) TyType) (= (type |#$T1@@218|) TyType)) (= (type |#$R@@308|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1313| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@282| |#$T1@@218| |#$R@@308|)) )))
(assert (forall ((arg0@@400 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@400)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@400)) )))
(assert (forall ((|#$T0@@283| T@U) (|#$T1@@219| T@U) (|#$R@@309| T@U) ) (!  (=> (and (and (= (type |#$T0@@283|) TyType) (= (type |#$T1@@219|) TyType)) (= (type |#$R@@309|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@283| |#$T1@@219| |#$R@@309|)) |#$T0@@283|)) :qid |unknown.0:0| :skolemid |1314| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@283| |#$T1@@219| |#$R@@309|)) )))
(assert (forall ((arg0@@401 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@401)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@401)) )))
(assert (forall ((|#$T0@@284| T@U) (|#$T1@@220| T@U) (|#$R@@310| T@U) ) (!  (=> (and (and (= (type |#$T0@@284|) TyType) (= (type |#$T1@@220|) TyType)) (= (type |#$R@@310|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@284| |#$T1@@220| |#$R@@310|)) |#$T1@@220|)) :qid |unknown.0:0| :skolemid |1315| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@284| |#$T1@@220| |#$R@@310|)) )))
(assert (forall ((arg0@@402 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@402)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@402)) )))
(assert (forall ((|#$T0@@285| T@U) (|#$T1@@221| T@U) (|#$R@@311| T@U) ) (!  (=> (and (and (= (type |#$T0@@285|) TyType) (= (type |#$T1@@221|) TyType)) (= (type |#$R@@311|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@285| |#$T1@@221| |#$R@@311|)) |#$R@@311|)) :qid |unknown.0:0| :skolemid |1316| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@285| |#$T1@@221| |#$R@@311|)) )))
(assert (forall ((|#$T0@@286| T@U) (|#$T1@@222| T@U) (|#$R@@312| T@U) (bx@@117 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@286|) TyType) (= (type |#$T1@@222|) TyType)) (= (type |#$R@@312|) TyType)) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|))) (and (= ($Box ($Unbox HandleTypeType bx@@117)) bx@@117) ($Is ($Unbox HandleTypeType bx@@117) (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|)))) :qid |unknown.0:0| :skolemid |1317| :pattern ( ($IsBox bx@@117 (Tclass._System.___hTotalFunc2SSO |#$T0@@286| |#$T1@@222| |#$R@@312|))) )))
(assert (forall ((|#$T0@@287| T@U) (|#$T1@@223| T@U) (|#$R@@313| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@287|) TyType) (= (type |#$T1@@223|) TyType)) (= (type |#$R@@313|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|)) (forall ((|x0#0@@26| T@U) (|x1#0@@18| T@U) ) (!  (=> (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@18|) BoxType)) (and ($IsBox |x0#0@@26| |#$T0@@287|) ($IsBox |x1#0@@18| |#$T1@@223|))) (Requires2 |#$T0@@287| |#$T1@@223| |#$R@@313| $OneHeap |f#0@@61| |x0#0@@26| |x1#0@@18|)) :qid |unknown.0:0| :skolemid |1318| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@18|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) ))))) :qid |unknown.0:0| :skolemid |1319| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc2SSO |#$T0@@287| |#$T1@@223| |#$R@@313|))) )))
(assert (forall ((|#$T0@@288| T@U) (|#$T1@@224| T@U) (|#$R@@314| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@288|) TyType) (= (type |#$T1@@224|) TyType)) (= (type |#$R@@314|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46))) :qid |unknown.0:0| :skolemid |1320| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc2SSO |#$T0@@288| |#$T1@@224| |#$R@@314|) $h@@46)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@168 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@403 arg1@@168)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@403 arg1@@168)) )))
(assert (forall ((|#$T0@@289| T@U) (|#$R@@315| T@U) ) (!  (=> (and (= (type |#$T0@@289|) TyType) (= (type |#$R@@315|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1321| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@289| |#$R@@315|)) )))
(assert (forall ((arg0@@404 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@404)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@404)) )))
(assert (forall ((|#$T0@@290| T@U) (|#$R@@316| T@U) ) (!  (=> (and (= (type |#$T0@@290|) TyType) (= (type |#$R@@316|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@290| |#$R@@316|)) |#$T0@@290|)) :qid |unknown.0:0| :skolemid |1322| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@290| |#$R@@316|)) )))
(assert (forall ((arg0@@405 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@405)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@405)) )))
(assert (forall ((|#$T0@@291| T@U) (|#$R@@317| T@U) ) (!  (=> (and (= (type |#$T0@@291|) TyType) (= (type |#$R@@317|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@291| |#$R@@317|)) |#$R@@317|)) :qid |unknown.0:0| :skolemid |1323| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@291| |#$R@@317|)) )))
(assert (forall ((|#$T0@@292| T@U) (|#$R@@318| T@U) (bx@@118 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@292|) TyType) (= (type |#$R@@318|) TyType)) (= (type bx@@118) BoxType)) ($IsBox bx@@118 (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|))) (and (= ($Box ($Unbox HandleTypeType bx@@118)) bx@@118) ($Is ($Unbox HandleTypeType bx@@118) (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|)))) :qid |unknown.0:0| :skolemid |1324| :pattern ( ($IsBox bx@@118 (Tclass._System.___hFunc1SS |#$T0@@292| |#$R@@318|))) )))
(assert (forall ((arg0@@406 T@U) (arg1@@169 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@406 arg1@@169)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@406 arg1@@169)) )))
(assert (forall ((|#$T0@@293| T@U) (|#$R@@319| T@U) ) (!  (=> (and (= (type |#$T0@@293|) TyType) (= (type |#$R@@319|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1325| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@293| |#$R@@319|)) )))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@407)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@407)) )))
(assert (forall ((|#$T0@@294| T@U) (|#$R@@320| T@U) ) (!  (=> (and (= (type |#$T0@@294|) TyType) (= (type |#$R@@320|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@294| |#$R@@320|)) |#$T0@@294|)) :qid |unknown.0:0| :skolemid |1326| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@294| |#$R@@320|)) )))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@408)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@408)) )))
(assert (forall ((|#$T0@@295| T@U) (|#$R@@321| T@U) ) (!  (=> (and (= (type |#$T0@@295|) TyType) (= (type |#$R@@321|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@295| |#$R@@321|)) |#$R@@321|)) :qid |unknown.0:0| :skolemid |1327| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@295| |#$R@@321|)) )))
(assert (forall ((|#$T0@@296| T@U) (|#$R@@322| T@U) (bx@@119 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@296|) TyType) (= (type |#$R@@322|) TyType)) (= (type bx@@119) BoxType)) ($IsBox bx@@119 (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|))) (and (= ($Box ($Unbox HandleTypeType bx@@119)) bx@@119) ($Is ($Unbox HandleTypeType bx@@119) (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|)))) :qid |unknown.0:0| :skolemid |1328| :pattern ( ($IsBox bx@@119 (Tclass._System.___hPartialFunc1SS |#$T0@@296| |#$R@@322|))) )))
(assert (forall ((|#$T0@@297| T@U) (|#$R@@323| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (= (type |#$T0@@297|) TyType) (= (type |#$R@@323|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@297| |#$R@@323|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc1SS |#$T0@@297| |#$R@@323|)) (forall ((|x0#0@@27| T@U) ) (!  (=> (and (= (type |x0#0@@27|) BoxType) ($IsBox |x0#0@@27| |#$T0@@297|)) (|Set#Equal| (Reads1 |#$T0@@297| |#$R@@323| $OneHeap |f#0@@63| |x0#0@@27|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1329| :no-pattern (type |x0#0@@27|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) ))))) :qid |unknown.0:0| :skolemid |1330| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc1SS |#$T0@@297| |#$R@@323|))) )))
(assert (forall ((|#$T0@@298| T@U) (|#$R@@324| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@298|) TyType) (= (type |#$R@@324|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@298| |#$R@@324|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc1SS |#$T0@@298| |#$R@@324|) $h@@47))) :qid |unknown.0:0| :skolemid |1331| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc1SS |#$T0@@298| |#$R@@324|) $h@@47)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@170 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@409 arg1@@170)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@409 arg1@@170)) )))
(assert (forall ((|#$T0@@299| T@U) (|#$R@@325| T@U) ) (!  (=> (and (= (type |#$T0@@299|) TyType) (= (type |#$R@@325|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1332| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@299| |#$R@@325|)) )))
(assert (forall ((arg0@@410 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@410)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@410)) )))
(assert (forall ((|#$T0@@300| T@U) (|#$R@@326| T@U) ) (!  (=> (and (= (type |#$T0@@300|) TyType) (= (type |#$R@@326|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@300| |#$R@@326|)) |#$T0@@300|)) :qid |unknown.0:0| :skolemid |1333| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@300| |#$R@@326|)) )))
(assert (forall ((arg0@@411 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@411)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@411)) )))
(assert (forall ((|#$T0@@301| T@U) (|#$R@@327| T@U) ) (!  (=> (and (= (type |#$T0@@301|) TyType) (= (type |#$R@@327|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@301| |#$R@@327|)) |#$R@@327|)) :qid |unknown.0:0| :skolemid |1334| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@301| |#$R@@327|)) )))
(assert (forall ((|#$T0@@302| T@U) (|#$R@@328| T@U) (bx@@120 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@302|) TyType) (= (type |#$R@@328|) TyType)) (= (type bx@@120) BoxType)) ($IsBox bx@@120 (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|))) (and (= ($Box ($Unbox HandleTypeType bx@@120)) bx@@120) ($Is ($Unbox HandleTypeType bx@@120) (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|)))) :qid |unknown.0:0| :skolemid |1335| :pattern ( ($IsBox bx@@120 (Tclass._System.___hTotalFunc1SS |#$T0@@302| |#$R@@328|))) )))
(assert (forall ((|#$T0@@303| T@U) (|#$R@@329| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (= (type |#$T0@@303|) TyType) (= (type |#$R@@329|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@303| |#$R@@329|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc1SS |#$T0@@303| |#$R@@329|)) (forall ((|x0#0@@28| T@U) ) (!  (=> (and (= (type |x0#0@@28|) BoxType) ($IsBox |x0#0@@28| |#$T0@@303|)) (Requires1 |#$T0@@303| |#$R@@329| $OneHeap |f#0@@65| |x0#0@@28|)) :qid |unknown.0:0| :skolemid |1336| :no-pattern (type |x0#0@@28|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) ))))) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc1SS |#$T0@@303| |#$R@@329|))) )))
(assert (forall ((|#$T0@@304| T@U) (|#$R@@330| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@304|) TyType) (= (type |#$R@@330|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@304| |#$R@@330|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc1SS |#$T0@@304| |#$R@@330|) $h@@48))) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc1SS |#$T0@@304| |#$R@@330|) $h@@48)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@171 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@412 arg1@@171)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@412 arg1@@171)) )))
(assert (forall ((|#$T0@@305| T@U) (|#$R@@331| T@U) ) (!  (=> (and (= (type |#$T0@@305|) TyType) (= (type |#$R@@331|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1339| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@305| |#$R@@331|)) )))
(assert (forall ((arg0@@413 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@413)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@413)) )))
(assert (forall ((|#$T0@@306| T@U) (|#$R@@332| T@U) ) (!  (=> (and (= (type |#$T0@@306|) TyType) (= (type |#$R@@332|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@306| |#$R@@332|)) |#$T0@@306|)) :qid |unknown.0:0| :skolemid |1340| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@306| |#$R@@332|)) )))
(assert (forall ((arg0@@414 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@414)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@414)) )))
(assert (forall ((|#$T0@@307| T@U) (|#$R@@333| T@U) ) (!  (=> (and (= (type |#$T0@@307|) TyType) (= (type |#$R@@333|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@307| |#$R@@333|)) |#$R@@333|)) :qid |unknown.0:0| :skolemid |1341| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@307| |#$R@@333|)) )))
(assert (forall ((|#$T0@@308| T@U) (|#$R@@334| T@U) (bx@@121 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@308|) TyType) (= (type |#$R@@334|) TyType)) (= (type bx@@121) BoxType)) ($IsBox bx@@121 (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|))) (and (= ($Box ($Unbox HandleTypeType bx@@121)) bx@@121) ($Is ($Unbox HandleTypeType bx@@121) (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|)))) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($IsBox bx@@121 (Tclass._System.___hFunc1LL |#$T0@@308| |#$R@@334|))) )))
(assert (forall ((arg0@@415 T@U) (arg1@@172 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@415 arg1@@172)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@415 arg1@@172)) )))
(assert (forall ((|#$T0@@309| T@U) (|#$R@@335| T@U) ) (!  (=> (and (= (type |#$T0@@309|) TyType) (= (type |#$R@@335|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1343| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@309| |#$R@@335|)) )))
(assert (forall ((arg0@@416 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@416)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@416)) )))
(assert (forall ((|#$T0@@310| T@U) (|#$R@@336| T@U) ) (!  (=> (and (= (type |#$T0@@310|) TyType) (= (type |#$R@@336|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@310| |#$R@@336|)) |#$T0@@310|)) :qid |unknown.0:0| :skolemid |1344| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@310| |#$R@@336|)) )))
(assert (forall ((arg0@@417 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@417)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@417)) )))
(assert (forall ((|#$T0@@311| T@U) (|#$R@@337| T@U) ) (!  (=> (and (= (type |#$T0@@311|) TyType) (= (type |#$R@@337|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@311| |#$R@@337|)) |#$R@@337|)) :qid |unknown.0:0| :skolemid |1345| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@311| |#$R@@337|)) )))
(assert (forall ((|#$T0@@312| T@U) (|#$R@@338| T@U) (bx@@122 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@312|) TyType) (= (type |#$R@@338|) TyType)) (= (type bx@@122) BoxType)) ($IsBox bx@@122 (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|))) (and (= ($Box ($Unbox HandleTypeType bx@@122)) bx@@122) ($Is ($Unbox HandleTypeType bx@@122) (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|)))) :qid |unknown.0:0| :skolemid |1346| :pattern ( ($IsBox bx@@122 (Tclass._System.___hPartialFunc1LL |#$T0@@312| |#$R@@338|))) )))
(assert (forall ((|#$T0@@313| T@U) (|#$R@@339| T@U) (|f#0@@67| T@U) ) (!  (=> (and (and (= (type |#$T0@@313|) TyType) (= (type |#$R@@339|) TyType)) (= (type |f#0@@67|) HandleTypeType)) (= ($Is |f#0@@67| (Tclass._System.___hPartialFunc1LL |#$T0@@313| |#$R@@339|))  (and ($Is |f#0@@67| (Tclass._System.___hFunc1LL |#$T0@@313| |#$R@@339|)) (forall ((|x0#0@@29| T@U) ) (!  (=> (and (= (type |x0#0@@29|) BoxType) ($IsBox |x0#0@@29| |#$T0@@313|)) (|Set#Equal| (Reads1 |#$T0@@313| |#$R@@339| $OneHeap |f#0@@67| |x0#0@@29|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1347| :no-pattern (type |x0#0@@29|) :no-pattern (U_2_int |x0#0@@29|) :no-pattern (U_2_bool |x0#0@@29|) ))))) :qid |unknown.0:0| :skolemid |1348| :pattern ( ($Is |f#0@@67| (Tclass._System.___hPartialFunc1LL |#$T0@@313| |#$R@@339|))) )))
(assert (forall ((|#$T0@@314| T@U) (|#$R@@340| T@U) (|f#0@@68| T@U) ($h@@49 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@314|) TyType) (= (type |#$R@@340|) TyType)) (= (type |f#0@@68|) HandleTypeType)) (= (type $h@@49) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1LL |#$T0@@314| |#$R@@340|) $h@@49) ($IsAlloc |f#0@@68| (Tclass._System.___hFunc1LL |#$T0@@314| |#$R@@340|) $h@@49))) :qid |unknown.0:0| :skolemid |1349| :pattern ( ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1LL |#$T0@@314| |#$R@@340|) $h@@49)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@173 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@418 arg1@@173)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@418 arg1@@173)) )))
(assert (forall ((|#$T0@@315| T@U) (|#$R@@341| T@U) ) (!  (=> (and (= (type |#$T0@@315|) TyType) (= (type |#$R@@341|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@315| |#$R@@341|)) )))
(assert (forall ((arg0@@419 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@419)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@419)) )))
(assert (forall ((|#$T0@@316| T@U) (|#$R@@342| T@U) ) (!  (=> (and (= (type |#$T0@@316|) TyType) (= (type |#$R@@342|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@316| |#$R@@342|)) |#$T0@@316|)) :qid |unknown.0:0| :skolemid |1351| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@316| |#$R@@342|)) )))
(assert (forall ((arg0@@420 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@420)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@420)) )))
(assert (forall ((|#$T0@@317| T@U) (|#$R@@343| T@U) ) (!  (=> (and (= (type |#$T0@@317|) TyType) (= (type |#$R@@343|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@317| |#$R@@343|)) |#$R@@343|)) :qid |unknown.0:0| :skolemid |1352| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@317| |#$R@@343|)) )))
(assert (forall ((|#$T0@@318| T@U) (|#$R@@344| T@U) (bx@@123 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@318|) TyType) (= (type |#$R@@344|) TyType)) (= (type bx@@123) BoxType)) ($IsBox bx@@123 (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|))) (and (= ($Box ($Unbox HandleTypeType bx@@123)) bx@@123) ($Is ($Unbox HandleTypeType bx@@123) (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|)))) :qid |unknown.0:0| :skolemid |1353| :pattern ( ($IsBox bx@@123 (Tclass._System.___hTotalFunc1LL |#$T0@@318| |#$R@@344|))) )))
(assert (forall ((|#$T0@@319| T@U) (|#$R@@345| T@U) (|f#0@@69| T@U) ) (!  (=> (and (and (= (type |#$T0@@319|) TyType) (= (type |#$R@@345|) TyType)) (= (type |f#0@@69|) HandleTypeType)) (= ($Is |f#0@@69| (Tclass._System.___hTotalFunc1LL |#$T0@@319| |#$R@@345|))  (and ($Is |f#0@@69| (Tclass._System.___hPartialFunc1LL |#$T0@@319| |#$R@@345|)) (forall ((|x0#0@@30| T@U) ) (!  (=> (and (= (type |x0#0@@30|) BoxType) ($IsBox |x0#0@@30| |#$T0@@319|)) (Requires1 |#$T0@@319| |#$R@@345| $OneHeap |f#0@@69| |x0#0@@30|)) :qid |unknown.0:0| :skolemid |1354| :no-pattern (type |x0#0@@30|) :no-pattern (U_2_int |x0#0@@30|) :no-pattern (U_2_bool |x0#0@@30|) ))))) :qid |unknown.0:0| :skolemid |1355| :pattern ( ($Is |f#0@@69| (Tclass._System.___hTotalFunc1LL |#$T0@@319| |#$R@@345|))) )))
(assert (forall ((|#$T0@@320| T@U) (|#$R@@346| T@U) (|f#0@@70| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@320|) TyType) (= (type |#$R@@346|) TyType)) (= (type |f#0@@70|) HandleTypeType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1LL |#$T0@@320| |#$R@@346|) $h@@50) ($IsAlloc |f#0@@70| (Tclass._System.___hPartialFunc1LL |#$T0@@320| |#$R@@346|) $h@@50))) :qid |unknown.0:0| :skolemid |1356| :pattern ( ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1LL |#$T0@@320| |#$R@@346|) $h@@50)) )))
(assert (= (type Tclass.JournalistMarshallingModel.__default) TyType))
(assert (= (Tag Tclass.JournalistMarshallingModel.__default) Tagclass.JournalistMarshallingModel.__default))
(assert (= (TagFamily Tclass.JournalistMarshallingModel.__default) tytagFamily$_default))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.JournalistMarshallingModel.__default)) (and (= ($Box ($Unbox refType bx@@124)) bx@@124) ($Is ($Unbox refType bx@@124) Tclass.JournalistMarshallingModel.__default))) :qid |unknown.0:0| :skolemid |1357| :pattern ( ($IsBox bx@@124 Tclass.JournalistMarshallingModel.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.JournalistMarshallingModel.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.JournalistMarshallingModel.__default)))) :qid |unknown.0:0| :skolemid |1358| :pattern ( ($Is $o@@9 Tclass.JournalistMarshallingModel.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@51 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.JournalistMarshallingModel.__default $h@@51)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1359| :pattern ( ($IsAlloc $o@@10 Tclass.JournalistMarshallingModel.__default $h@@51)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@174 T@U) (arg2@@109 T@U) (arg3@@76 Int) (arg4@@59 Int) ) (! (= (type (JournalistMarshallingModel.__default.cyclicSlice arg0@@421 arg1@@174 arg2@@109 arg3@@76 arg4@@59)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.cyclicSlice| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice arg0@@421 arg1@@174 arg2@@109 arg3@@76 arg4@@59)) )))
(assert (forall ((JournalistMarshallingModel._default.cyclicSlice$T T@U) ($ly T@U) (|t#0| T@U) (|start#0| Int) (|l#0| Int) ) (!  (=> (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T) TyType) (= (type $ly) LayerTypeType)) (= (type |t#0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T ($LS $ly) |t#0| |start#0| |l#0|) (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T $ly |t#0| |start#0| |l#0|))) :qid |unknown.0:0| :skolemid |1360| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T ($LS $ly) |t#0| |start#0| |l#0|)) )))
(assert  (and (forall ((arg0@@422 T@U) ) (! (= (type (AsFuelBottom arg0@@422)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@422)) )) (= (type $LZ) LayerTypeType)))
(assert (forall ((JournalistMarshallingModel._default.cyclicSlice$T@@0 T@U) ($ly@@0 T@U) (|t#0@@0| T@U) (|start#0@@0| Int) (|l#0@@0| Int) ) (!  (=> (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |t#0@@0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@0 $ly@@0 |t#0@@0| |start#0@@0| |l#0@@0|) (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@0 $LZ |t#0@@0| |start#0@@0| |l#0@@0|))) :qid |unknown.0:0| :skolemid |1361| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@0 (AsFuelBottom $ly@@0) |t#0@@0| |start#0@@0| |l#0@@0|)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((JournalistMarshallingModel._default.cyclicSlice$T@@1 T@U) ($ly@@1 T@U) (|t#0@@1| T@U) (|start#0@@1| Int) (|l#0@@1| Int) ) (!  (=> (and (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |t#0@@1|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.cyclicSlice#canCall| JournalistMarshallingModel._default.cyclicSlice$T@@1 |t#0@@1| |start#0@@1| |l#0@@1|) (and (not (= 1 $FunctionContextHeight)) (and (and (and ($Is |t#0@@1| (TSeq JournalistMarshallingModel._default.cyclicSlice$T@@1)) (and (<= (LitInt 0) |start#0@@1|) (< |start#0@@1| 18446744073709551616))) (and (<= (LitInt 0) |l#0@@1|) (< |l#0@@1| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@1|) (< |start#0@@1| (|Seq#Length| |t#0@@1|))) (and (<= (LitInt 0) |l#0@@1|) (<= |l#0@@1| (|Seq#Length| |t#0@@1|)))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@1 $ly@@1 |t#0@@1| |start#0@@1| |l#0@@1|)) |l#0@@1|) ($Is (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@1 $ly@@1 |t#0@@1| |start#0@@1| |l#0@@1|) (TSeq JournalistMarshallingModel._default.cyclicSlice$T@@1)))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@1 $ly@@1 |t#0@@1| |start#0@@1| |l#0@@1|)) ))))
(assert (forall ((JournalistMarshallingModel._default.cyclicSlice$T@@2 T@U) ($ly@@2 T@U) (|t#0@@2| T@U) (|start#0@@2| Int) (|l#0@@2| Int) ) (!  (=> (and (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |t#0@@2|) (SeqType BoxType))) (and (and ($Is |t#0@@2| (TSeq JournalistMarshallingModel._default.cyclicSlice$T@@2)) (and (<= (LitInt 0) |start#0@@2|) (< |start#0@@2| 18446744073709551616))) (and (<= (LitInt 0) |l#0@@2|) (< |l#0@@2| 18446744073709551616)))) (= (|JournalistMarshallingModel.__default.cyclicSlice#requires| JournalistMarshallingModel._default.cyclicSlice$T@@2 $ly@@2 |t#0@@2| |start#0@@2| |l#0@@2|)  (and (and (<= (LitInt 0) |start#0@@2|) (< |start#0@@2| (|Seq#Length| |t#0@@2|))) (and (<= (LitInt 0) |l#0@@2|) (<= |l#0@@2| (|Seq#Length| |t#0@@2|)))))) :qid |unknown.0:0| :skolemid |1363| :pattern ( (|JournalistMarshallingModel.__default.cyclicSlice#requires| JournalistMarshallingModel._default.cyclicSlice$T@@2 $ly@@2 |t#0@@2| |start#0@@2| |l#0@@2|)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((JournalistMarshallingModel._default.cyclicSlice$T@@3 T@U) ($ly@@3 T@U) (|t#0@@3| T@U) (|start#0@@3| Int) (|l#0@@3| Int) ) (!  (=> (and (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T@@3) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |t#0@@3|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.cyclicSlice#canCall| JournalistMarshallingModel._default.cyclicSlice$T@@3 |t#0@@3| |start#0@@3| |l#0@@3|) (and (not (= 1 $FunctionContextHeight)) (and (and (and ($Is |t#0@@3| (TSeq JournalistMarshallingModel._default.cyclicSlice$T@@3)) (and (<= (LitInt 0) |start#0@@3|) (< |start#0@@3| 18446744073709551616))) (and (<= (LitInt 0) |l#0@@3|) (< |l#0@@3| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@3|) (< |start#0@@3| (|Seq#Length| |t#0@@3|))) (and (<= (LitInt 0) |l#0@@3|) (<= |l#0@@3| (|Seq#Length| |t#0@@3|)))))))) (= (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@3 ($LS $ly@@3) |t#0@@3| |start#0@@3| |l#0@@3|) (ite (<= (+ |start#0@@3| |l#0@@3|) (|Seq#Length| |t#0@@3|)) (|Seq#Drop| (|Seq#Take| |t#0@@3| (+ |start#0@@3| |l#0@@3|)) |start#0@@3|) (|Seq#Append| (|Seq#Drop| |t#0@@3| |start#0@@3|) (|Seq#Take| |t#0@@3| (- (+ |start#0@@3| |l#0@@3|) (|Seq#Length| |t#0@@3|))))))) :qid |unknown.0:0| :skolemid |1364| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@3 ($LS $ly@@3) |t#0@@3| |start#0@@3| |l#0@@3|)) ))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((JournalistMarshallingModel._default.cyclicSlice$T@@4 T@U) ($ly@@4 T@U) (|t#0@@4| T@U) (|start#0@@4| Int) (|l#0@@4| Int) ) (!  (=> (and (and (and (= (type JournalistMarshallingModel._default.cyclicSlice$T@@4) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |t#0@@4|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.cyclicSlice#canCall| JournalistMarshallingModel._default.cyclicSlice$T@@4 (Lit |t#0@@4|) (LitInt |start#0@@4|) (LitInt |l#0@@4|)) (and (not (= 1 $FunctionContextHeight)) (and (and (and ($Is |t#0@@4| (TSeq JournalistMarshallingModel._default.cyclicSlice$T@@4)) (and (<= (LitInt 0) |start#0@@4|) (< |start#0@@4| 18446744073709551616))) (and (<= (LitInt 0) |l#0@@4|) (< |l#0@@4| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |start#0@@4|)) (< |start#0@@4| (|Seq#Length| (Lit |t#0@@4|)))) (and (<= (LitInt 0) (LitInt |l#0@@4|)) (<= (LitInt |l#0@@4|) (|Seq#Length| (Lit |t#0@@4|))))))))) (= (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@4 ($LS $ly@@4) (Lit |t#0@@4|) (LitInt |start#0@@4|) (LitInt |l#0@@4|)) (ite (<= (LitInt (+ |start#0@@4| |l#0@@4|)) (|Seq#Length| (Lit |t#0@@4|))) (|Seq#Drop| (|Seq#Take| (Lit |t#0@@4|) (LitInt (+ |start#0@@4| |l#0@@4|))) (LitInt |start#0@@4|)) (|Seq#Append| (|Seq#Drop| (Lit |t#0@@4|) (LitInt |start#0@@4|)) (|Seq#Take| (Lit |t#0@@4|) (- (+ |start#0@@4| |l#0@@4|) (|Seq#Length| (Lit |t#0@@4|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1365| :pattern ( (JournalistMarshallingModel.__default.cyclicSlice JournalistMarshallingModel._default.cyclicSlice$T@@4 ($LS $ly@@4) (Lit |t#0@@4|) (LitInt |start#0@@4|) (LitInt |l#0@@4|))) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@175 T@U) (arg2@@110 Int) ) (! (= (type (JournalistMarshallingModel.__default.withoutChecksums arg0@@423 arg1@@175 arg2@@110)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.withoutChecksums| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums arg0@@423 arg1@@175 arg2@@110)) )))
(assert (forall (($ly@@5 T@U) (|buf#0| T@U) (|numBlocks#0| Int) ) (!  (=> (and (= (type $ly@@5) LayerTypeType) (= (type |buf#0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@5) |buf#0| |numBlocks#0|) (JournalistMarshallingModel.__default.withoutChecksums $ly@@5 |buf#0| |numBlocks#0|))) :qid |JournalistMarshallingModelidfy.33:22| :skolemid |1366| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@5) |buf#0| |numBlocks#0|)) )))
(assert (forall (($ly@@6 T@U) (|buf#0@@0| T@U) (|numBlocks#0@@0| Int) ) (!  (=> (and (= (type $ly@@6) LayerTypeType) (= (type |buf#0@@0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.withoutChecksums $ly@@6 |buf#0@@0| |numBlocks#0@@0|) (JournalistMarshallingModel.__default.withoutChecksums $LZ |buf#0@@0| |numBlocks#0@@0|))) :qid |JournalistMarshallingModelidfy.33:22| :skolemid |1367| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums (AsFuelBottom $ly@@6) |buf#0@@0| |numBlocks#0@@0|)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@125)) bx@@125) ($Is ($Unbox intType bx@@125) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1368| :pattern ( ($IsBox bx@@125 Tclass.NativeTypes.byte)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@7 T@U) (|buf#0@@1| T@U) (|numBlocks#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@7) LayerTypeType) (= (type |buf#0@@1|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@1| |numBlocks#0@@1|) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |buf#0@@1| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@1|) (< |numBlocks#0@@1| 18446744073709551616))) (= (|Seq#Length| |buf#0@@1|) (Mul (LitInt 4096) |numBlocks#0@@1|)))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.withoutChecksums $ly@@7 |buf#0@@1| |numBlocks#0@@1|)) (Mul (LitInt 4064) |numBlocks#0@@1|)) ($Is (JournalistMarshallingModel.__default.withoutChecksums $ly@@7 |buf#0@@1| |numBlocks#0@@1|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.33:22| :skolemid |1369| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums $ly@@7 |buf#0@@1| |numBlocks#0@@1|)) ))))
(assert (forall (($ly@@8 T@U) (|buf#0@@2| T@U) (|numBlocks#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@8) LayerTypeType) (= (type |buf#0@@2|) (SeqType BoxType))) (and ($Is |buf#0@@2| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@2|) (< |numBlocks#0@@2| 18446744073709551616)))) (= (|JournalistMarshallingModel.__default.withoutChecksums#requires| $ly@@8 |buf#0@@2| |numBlocks#0@@2|) (= (|Seq#Length| |buf#0@@2|) (Mul (LitInt 4096) |numBlocks#0@@2|)))) :qid |JournalistMarshallingModelidfy.33:22| :skolemid |1370| :pattern ( (|JournalistMarshallingModel.__default.withoutChecksums#requires| $ly@@8 |buf#0@@2| |numBlocks#0@@2|)) )))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@9 T@U) (|buf#0@@3| T@U) (|numBlocks#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@9) LayerTypeType) (= (type |buf#0@@3|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@3| |numBlocks#0@@3|) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |buf#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@3|) (< |numBlocks#0@@3| 18446744073709551616))) (= (|Seq#Length| |buf#0@@3|) (Mul (LitInt 4096) |numBlocks#0@@3|)))))) (and (=> (not (= |numBlocks#0@@3| (LitInt 0))) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (|Seq#Drop| |buf#0@@3| (LitInt 4096)) (- |numBlocks#0@@3| 1))) (= (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@9) |buf#0@@3| |numBlocks#0@@3|) (ite (= |numBlocks#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Drop| (|Seq#Take| |buf#0@@3| (LitInt 4096)) (LitInt 32)) (JournalistMarshallingModel.__default.withoutChecksums $ly@@9 (|Seq#Drop| |buf#0@@3| (LitInt 4096)) (- |numBlocks#0@@3| 1))))))) :qid |JournalistMarshallingModelidfy.33:22| :skolemid |1371| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@9) |buf#0@@3| |numBlocks#0@@3|)) ))))
(assert  (=> (<= 3 $FunctionContextHeight) (forall (($ly@@10 T@U) (|buf#0@@4| T@U) (|numBlocks#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@10) LayerTypeType) (= (type |buf#0@@4|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (Lit |buf#0@@4|) (LitInt |numBlocks#0@@4|)) (and (not (= 3 $FunctionContextHeight)) (and (and ($Is |buf#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@4|) (< |numBlocks#0@@4| 18446744073709551616))) (= (|Seq#Length| (Lit |buf#0@@4|)) (LitInt (Mul (LitInt 4096) (LitInt |numBlocks#0@@4|)))))))) (and (=> (not (= (LitInt |numBlocks#0@@4|) (LitInt 0))) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (Lit (|Seq#Drop| (Lit |buf#0@@4|) (LitInt 4096))) (LitInt (- |numBlocks#0@@4| 1)))) (= (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@10) (Lit |buf#0@@4|) (LitInt |numBlocks#0@@4|)) (ite (= (LitInt |numBlocks#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@4|) (LitInt 4096)) (LitInt 32)) (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@10) (Lit (|Seq#Drop| (Lit |buf#0@@4|) (LitInt 4096))) (LitInt (- |numBlocks#0@@4| 1)))))))) :qid |JournalistMarshallingModelidfy.33:22| :weight 3 :skolemid |1372| :pattern ( (JournalistMarshallingModel.__default.withoutChecksums ($LS $ly@@10) (Lit |buf#0@@4|) (LitInt |numBlocks#0@@4|))) ))))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@126)) bx@@126) ($Is ($Unbox intType bx@@126) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1373| :pattern ( ($IsBox bx@@126 Tclass.NativeTypes.uint64)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@176 T@U) (arg2@@111 Int) (arg3@@77 T@U) ) (! (= (type (JournalistMarshallingModel.__default.splice arg0@@424 arg1@@176 arg2@@111 arg3@@77)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.splice| :pattern ( (JournalistMarshallingModel.__default.splice arg0@@424 arg1@@176 arg2@@111 arg3@@77)) )))
(assert (forall (($ly@@11 T@U) (|bytes#0| T@U) (|start#0@@5| Int) (|ins#0| T@U) ) (!  (=> (and (and (= (type $ly@@11) LayerTypeType) (= (type |bytes#0|) (SeqType BoxType))) (= (type |ins#0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.splice ($LS $ly@@11) |bytes#0| |start#0@@5| |ins#0|) (JournalistMarshallingModel.__default.splice $ly@@11 |bytes#0| |start#0@@5| |ins#0|))) :qid |JournalistMarshallingModelidfy.54:22| :skolemid |1378| :pattern ( (JournalistMarshallingModel.__default.splice ($LS $ly@@11) |bytes#0| |start#0@@5| |ins#0|)) )))
(assert (forall (($ly@@12 T@U) (|bytes#0@@0| T@U) (|start#0@@6| Int) (|ins#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@12) LayerTypeType) (= (type |bytes#0@@0|) (SeqType BoxType))) (= (type |ins#0@@0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.splice $ly@@12 |bytes#0@@0| |start#0@@6| |ins#0@@0|) (JournalistMarshallingModel.__default.splice $LZ |bytes#0@@0| |start#0@@6| |ins#0@@0|))) :qid |JournalistMarshallingModelidfy.54:22| :skolemid |1379| :pattern ( (JournalistMarshallingModel.__default.splice (AsFuelBottom $ly@@12) |bytes#0@@0| |start#0@@6| |ins#0@@0|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@13 T@U) (|bytes#0@@1| T@U) (|start#0@@7| Int) (|ins#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@13) LayerTypeType) (= (type |bytes#0@@1|) (SeqType BoxType))) (= (type |ins#0@@1|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice#canCall| |bytes#0@@1| |start#0@@7| |ins#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |bytes#0@@1| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |start#0@@7|) (< |start#0@@7| 18446744073709551616))) ($Is |ins#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) |start#0@@7|) (<= (+ |start#0@@7| (|Seq#Length| |ins#0@@1|)) (|Seq#Length| |bytes#0@@1|))) (< (|Seq#Length| |bytes#0@@1|) 18446744073709551616)))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.splice $ly@@13 |bytes#0@@1| |start#0@@7| |ins#0@@1|)) (|Seq#Length| |bytes#0@@1|)) ($Is (JournalistMarshallingModel.__default.splice $ly@@13 |bytes#0@@1| |start#0@@7| |ins#0@@1|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.54:22| :skolemid |1380| :pattern ( (JournalistMarshallingModel.__default.splice $ly@@13 |bytes#0@@1| |start#0@@7| |ins#0@@1|)) ))))
(assert (forall (($ly@@14 T@U) (|bytes#0@@2| T@U) (|start#0@@8| Int) (|ins#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@14) LayerTypeType) (= (type |bytes#0@@2|) (SeqType BoxType))) (= (type |ins#0@@2|) (SeqType BoxType))) (and (and ($Is |bytes#0@@2| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |start#0@@8|) (< |start#0@@8| 18446744073709551616))) ($Is |ins#0@@2| (TSeq Tclass.NativeTypes.byte)))) (= (|JournalistMarshallingModel.__default.splice#requires| $ly@@14 |bytes#0@@2| |start#0@@8| |ins#0@@2|)  (and (and (<= (LitInt 0) |start#0@@8|) (<= (+ |start#0@@8| (|Seq#Length| |ins#0@@2|)) (|Seq#Length| |bytes#0@@2|))) (< (|Seq#Length| |bytes#0@@2|) 18446744073709551616)))) :qid |JournalistMarshallingModelidfy.54:22| :skolemid |1381| :pattern ( (|JournalistMarshallingModel.__default.splice#requires| $ly@@14 |bytes#0@@2| |start#0@@8| |ins#0@@2|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@15 T@U) (|bytes#0@@3| T@U) (|start#0@@9| Int) (|ins#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@15) LayerTypeType) (= (type |bytes#0@@3|) (SeqType BoxType))) (= (type |ins#0@@3|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice#canCall| |bytes#0@@3| |start#0@@9| |ins#0@@3|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |bytes#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |start#0@@9|) (< |start#0@@9| 18446744073709551616))) ($Is |ins#0@@3| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) |start#0@@9|) (<= (+ |start#0@@9| (|Seq#Length| |ins#0@@3|)) (|Seq#Length| |bytes#0@@3|))) (< (|Seq#Length| |bytes#0@@3|) 18446744073709551616)))))) (= (JournalistMarshallingModel.__default.splice ($LS $ly@@15) |bytes#0@@3| |start#0@@9| |ins#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |bytes#0@@3| |start#0@@9|) |ins#0@@3|) (|Seq#Drop| |bytes#0@@3| (+ |start#0@@9| (|Seq#Length| |ins#0@@3|)))))) :qid |JournalistMarshallingModelidfy.54:22| :skolemid |1382| :pattern ( (JournalistMarshallingModel.__default.splice ($LS $ly@@15) |bytes#0@@3| |start#0@@9| |ins#0@@3|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall (($ly@@16 T@U) (|bytes#0@@4| T@U) (|start#0@@10| Int) (|ins#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@16) LayerTypeType) (= (type |bytes#0@@4|) (SeqType BoxType))) (= (type |ins#0@@4|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice#canCall| (Lit |bytes#0@@4|) (LitInt |start#0@@10|) (Lit |ins#0@@4|)) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |bytes#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |start#0@@10|) (< |start#0@@10| 18446744073709551616))) ($Is |ins#0@@4| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) (LitInt |start#0@@10|)) (<= (+ |start#0@@10| (|Seq#Length| (Lit |ins#0@@4|))) (|Seq#Length| (Lit |bytes#0@@4|)))) (< (|Seq#Length| (Lit |bytes#0@@4|)) 18446744073709551616)))))) (= (JournalistMarshallingModel.__default.splice ($LS $ly@@16) (Lit |bytes#0@@4|) (LitInt |start#0@@10|) (Lit |ins#0@@4|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |bytes#0@@4|) (LitInt |start#0@@10|)) |ins#0@@4|) (|Seq#Drop| (Lit |bytes#0@@4|) (+ |start#0@@10| (|Seq#Length| (Lit |ins#0@@4|))))))) :qid |JournalistMarshallingModelidfy.54:22| :weight 3 :skolemid |1383| :pattern ( (JournalistMarshallingModel.__default.splice ($LS $ly@@16) (Lit |bytes#0@@4|) (LitInt |start#0@@10|) (Lit |ins#0@@4|))) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@177 T@U) (arg2@@112 Int) (arg3@@78 Int) (arg4@@60 T@U) ) (! (= (type (JournalistMarshallingModel.__default.writeOnto arg0@@425 arg1@@177 arg2@@112 arg3@@78 arg4@@60)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.writeOnto| :pattern ( (JournalistMarshallingModel.__default.writeOnto arg0@@425 arg1@@177 arg2@@112 arg3@@78 arg4@@60)) )))
(assert (forall (($ly@@17 T@U) (|buf#0@@5| T@U) (|numBlocks#0@@5| Int) (|start#0@@11| Int) (|bytes#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@17) LayerTypeType) (= (type |buf#0@@5|) (SeqType BoxType))) (= (type |bytes#0@@5|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@17) |buf#0@@5| |numBlocks#0@@5| |start#0@@11| |bytes#0@@5|) (JournalistMarshallingModel.__default.writeOnto $ly@@17 |buf#0@@5| |numBlocks#0@@5| |start#0@@11| |bytes#0@@5|))) :qid |JournalistMarshallingModelidfy.63:22| :skolemid |1384| :pattern ( (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@17) |buf#0@@5| |numBlocks#0@@5| |start#0@@11| |bytes#0@@5|)) )))
(assert (forall (($ly@@18 T@U) (|buf#0@@6| T@U) (|numBlocks#0@@6| Int) (|start#0@@12| Int) (|bytes#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@18) LayerTypeType) (= (type |buf#0@@6|) (SeqType BoxType))) (= (type |bytes#0@@6|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeOnto $ly@@18 |buf#0@@6| |numBlocks#0@@6| |start#0@@12| |bytes#0@@6|) (JournalistMarshallingModel.__default.writeOnto $LZ |buf#0@@6| |numBlocks#0@@6| |start#0@@12| |bytes#0@@6|))) :qid |JournalistMarshallingModelidfy.63:22| :skolemid |1385| :pattern ( (JournalistMarshallingModel.__default.writeOnto (AsFuelBottom $ly@@18) |buf#0@@6| |numBlocks#0@@6| |start#0@@12| |bytes#0@@6|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@19 T@U) (|buf#0@@7| T@U) (|numBlocks#0@@7| Int) (|start#0@@13| Int) (|bytes#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@19) LayerTypeType) (= (type |buf#0@@7|) (SeqType BoxType))) (= (type |bytes#0@@7|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf#0@@7| |numBlocks#0@@7| |start#0@@13| |bytes#0@@7|) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@7| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@7|) (< |numBlocks#0@@7| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@13|) (< |start#0@@13| 18446744073709551616))) ($Is |bytes#0@@7| (TSeq Tclass.NativeTypes.byte))) (and (and (and (= (|Seq#Length| |buf#0@@7|) (Mul (LitInt 4096) |numBlocks#0@@7|)) (<= |numBlocks#0@@7| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (|Seq#Length| |bytes#0@@7|) (LitInt 4064))) (and (and (<= (LitInt 0) |start#0@@13|) (<= |start#0@@13| (+ |start#0@@13| (|Seq#Length| |bytes#0@@7|)))) (<= (+ |start#0@@13| (|Seq#Length| |bytes#0@@7|)) (Mul (LitInt 4064) |numBlocks#0@@7|)))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.writeOnto $ly@@19 |buf#0@@7| |numBlocks#0@@7| |start#0@@13| |bytes#0@@7|)) (|Seq#Length| |buf#0@@7|)) ($Is (JournalistMarshallingModel.__default.writeOnto $ly@@19 |buf#0@@7| |numBlocks#0@@7| |start#0@@13| |bytes#0@@7|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.63:22| :skolemid |1386| :pattern ( (JournalistMarshallingModel.__default.writeOnto $ly@@19 |buf#0@@7| |numBlocks#0@@7| |start#0@@13| |bytes#0@@7|)) ))))
(assert (forall (($ly@@20 T@U) (|buf#0@@8| T@U) (|numBlocks#0@@8| Int) (|start#0@@14| Int) (|bytes#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@20) LayerTypeType) (= (type |buf#0@@8|) (SeqType BoxType))) (= (type |bytes#0@@8|) (SeqType BoxType))) (=> (and (and (and ($Is |buf#0@@8| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@8|) (< |numBlocks#0@@8| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@14|) (< |start#0@@14| 18446744073709551616))) ($Is |bytes#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|JournalistMarshallingModel.__default.writeOnto#requires| $ly@@20 |buf#0@@8| |numBlocks#0@@8| |start#0@@14| |bytes#0@@8|)  (and (and (and (= (|Seq#Length| |buf#0@@8|) (Mul (LitInt 4096) |numBlocks#0@@8|)) (<= |numBlocks#0@@8| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (|Seq#Length| |bytes#0@@8|) (LitInt 4064))) (and (and (<= (LitInt 0) |start#0@@14|) (<= |start#0@@14| (+ |start#0@@14| (|Seq#Length| |bytes#0@@8|)))) (<= (+ |start#0@@14| (|Seq#Length| |bytes#0@@8|)) (Mul (LitInt 4064) |numBlocks#0@@8|))))))) :qid |JournalistMarshallingModelidfy.63:22| :skolemid |1387| :pattern ( (|JournalistMarshallingModel.__default.writeOnto#requires| $ly@@20 |buf#0@@8| |numBlocks#0@@8| |start#0@@14| |bytes#0@@8|)) )))
(assert (= (type StartFuel_JournalistMarshallingModel._default.splice) LayerTypeType))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@21 T@U) (|buf#0@@9| T@U) (|numBlocks#0@@9| Int) (|start#0@@15| Int) (|bytes#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@21) LayerTypeType) (= (type |buf#0@@9|) (SeqType BoxType))) (= (type |bytes#0@@9|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf#0@@9| |numBlocks#0@@9| |start#0@@15| |bytes#0@@9|) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@9| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@9|) (< |numBlocks#0@@9| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@15|) (< |start#0@@15| 18446744073709551616))) ($Is |bytes#0@@9| (TSeq Tclass.NativeTypes.byte))) (and (and (and (= (|Seq#Length| |buf#0@@9|) (Mul (LitInt 4096) |numBlocks#0@@9|)) (<= |numBlocks#0@@9| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (|Seq#Length| |bytes#0@@9|) (LitInt 4064))) (and (and (<= (LitInt 0) |start#0@@15|) (<= |start#0@@15| (+ |start#0@@15| (|Seq#Length| |bytes#0@@9|)))) (<= (+ |start#0@@15| (|Seq#Length| |bytes#0@@9|)) (Mul (LitInt 4064) |numBlocks#0@@9|)))))))) (and (=> (> (|Seq#Length| |bytes#0@@9|) 0) (let ((|block#0| (Div |start#0@@15| (LitInt 4064)))) (let ((|idx#0| (Mod |start#0@@15| (LitInt 4064)))) (and (=> (<= (+ |idx#0| (|Seq#Length| |bytes#0@@9|)) (LitInt 4064)) (|JournalistMarshallingModel.__default.splice#canCall| |buf#0@@9| (+ (+ (Mul |block#0| (LitInt 4096)) 32) |idx#0|) |bytes#0@@9|)) (=> (< (LitInt 4064) (+ |idx#0| (|Seq#Length| |bytes#0@@9|))) (and (|JournalistMarshallingModel.__default.splice#canCall| |buf#0@@9| (+ (+ (Mul |block#0| (LitInt 4096)) 32) |idx#0|) (|Seq#Take| |bytes#0@@9| (- 4064 |idx#0|))) (let ((|buf1#0| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@9| (+ (+ (Mul |block#0| (LitInt 4096)) 32) |idx#0|) (|Seq#Take| |bytes#0@@9| (- 4064 |idx#0|))))) (|JournalistMarshallingModel.__default.splice#canCall| |buf1#0| (+ (Mul (+ |block#0| 1) (LitInt 4096)) 32) (|Seq#Drop| |bytes#0@@9| (- 4064 |idx#0|)))))))))) (= (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@21) |buf#0@@9| |numBlocks#0@@9| |start#0@@15| |bytes#0@@9|) (ite (> (|Seq#Length| |bytes#0@@9|) 0) (let ((|block#0@@0| (Div |start#0@@15| (LitInt 4064)))) (let ((|idx#0@@0| (Mod |start#0@@15| (LitInt 4064)))) (ite (<= (+ |idx#0@@0| (|Seq#Length| |bytes#0@@9|)) (LitInt 4064)) (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@9| (+ (+ (Mul |block#0@@0| (LitInt 4096)) 32) |idx#0@@0|) |bytes#0@@9|) (let ((|buf1#0@@0| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@9| (+ (+ (Mul |block#0@@0| (LitInt 4096)) 32) |idx#0@@0|) (|Seq#Take| |bytes#0@@9| (- 4064 |idx#0@@0|))))) (let ((|buf2#0| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf1#0@@0| (+ (Mul (+ |block#0@@0| 1) (LitInt 4096)) 32) (|Seq#Drop| |bytes#0@@9| (- 4064 |idx#0@@0|))))) |buf2#0|))))) |buf#0@@9|)))) :qid |JournalistMarshallingModelidfy.63:22| :skolemid |1388| :pattern ( (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@21) |buf#0@@9| |numBlocks#0@@9| |start#0@@15| |bytes#0@@9|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@22 T@U) (|buf#0@@10| T@U) (|numBlocks#0@@10| Int) (|start#0@@16| Int) (|bytes#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@22) LayerTypeType) (= (type |buf#0@@10|) (SeqType BoxType))) (= (type |bytes#0@@10|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOnto#canCall| (Lit |buf#0@@10|) (LitInt |numBlocks#0@@10|) (LitInt |start#0@@16|) (Lit |bytes#0@@10|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@10| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@10|) (< |numBlocks#0@@10| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@16|) (< |start#0@@16| 18446744073709551616))) ($Is |bytes#0@@10| (TSeq Tclass.NativeTypes.byte))) (and (and (and (= (|Seq#Length| (Lit |buf#0@@10|)) (LitInt (Mul (LitInt 4096) (LitInt |numBlocks#0@@10|)))) (<= (LitInt |numBlocks#0@@10|) (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (|Seq#Length| (Lit |bytes#0@@10|)) (LitInt 4064))) (and (and (<= (LitInt 0) (LitInt |start#0@@16|)) (<= (LitInt |start#0@@16|) (+ |start#0@@16| (|Seq#Length| (Lit |bytes#0@@10|))))) (<= (+ |start#0@@16| (|Seq#Length| (Lit |bytes#0@@10|))) (LitInt (Mul (LitInt 4064) (LitInt |numBlocks#0@@10|)))))))))) (and (=> (> (|Seq#Length| (Lit |bytes#0@@10|)) 0) (let ((|block#1| (LitInt (Div |start#0@@16| (LitInt 4064))))) (let ((|idx#1| (LitInt (Mod |start#0@@16| (LitInt 4064))))) (and (=> (<= (+ |idx#1| (|Seq#Length| (Lit |bytes#0@@10|))) (LitInt 4064)) (|JournalistMarshallingModel.__default.splice#canCall| (Lit |buf#0@@10|) (+ (+ (Mul |block#1| (LitInt 4096)) 32) |idx#1|) (Lit |bytes#0@@10|))) (=> (< (LitInt 4064) (+ |idx#1| (|Seq#Length| (Lit |bytes#0@@10|)))) (and (|JournalistMarshallingModel.__default.splice#canCall| (Lit |buf#0@@10|) (+ (+ (Mul |block#1| (LitInt 4096)) 32) |idx#1|) (|Seq#Take| (Lit |bytes#0@@10|) (- 4064 |idx#1|))) (let ((|buf1#1| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice (Lit |buf#0@@10|) (+ (+ (Mul |block#1| (LitInt 4096)) 32) |idx#1|) (|Seq#Take| (Lit |bytes#0@@10|) (- 4064 |idx#1|))))) (|JournalistMarshallingModel.__default.splice#canCall| |buf1#1| (+ (Mul (+ |block#1| 1) (LitInt 4096)) 32) (|Seq#Drop| (Lit |bytes#0@@10|) (- 4064 |idx#1|)))))))))) (= (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@22) (Lit |buf#0@@10|) (LitInt |numBlocks#0@@10|) (LitInt |start#0@@16|) (Lit |bytes#0@@10|)) (ite (> (|Seq#Length| (Lit |bytes#0@@10|)) 0) (let ((|block#1@@0| (LitInt (Div |start#0@@16| (LitInt 4064))))) (let ((|idx#1@@0| (LitInt (Mod |start#0@@16| (LitInt 4064))))) (ite (<= (+ |idx#1@@0| (|Seq#Length| (Lit |bytes#0@@10|))) (LitInt 4064)) (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice (Lit |buf#0@@10|) (LitInt (+ (+ (Mul |block#1@@0| (LitInt 4096)) 32) |idx#1@@0|)) (Lit |bytes#0@@10|)) (let ((|buf1#1@@0| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice (Lit |buf#0@@10|) (LitInt (+ (+ (Mul |block#1@@0| (LitInt 4096)) 32) |idx#1@@0|)) (Lit (|Seq#Take| (Lit |bytes#0@@10|) (LitInt (- 4064 |idx#1@@0|))))))) (let ((|buf2#1| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf1#1@@0| (LitInt (+ (Mul (LitInt (+ |block#1@@0| 1)) (LitInt 4096)) 32)) (Lit (|Seq#Drop| (Lit |bytes#0@@10|) (LitInt (- 4064 |idx#1@@0|))))))) |buf2#1|))))) |buf#0@@10|)))) :qid |JournalistMarshallingModelidfy.63:22| :weight 3 :skolemid |1389| :pattern ( (JournalistMarshallingModel.__default.writeOnto ($LS $ly@@22) (Lit |buf#0@@10|) (LitInt |numBlocks#0@@10|) (LitInt |start#0@@16|) (Lit |bytes#0@@10|))) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|i#0| Int) (|start#0@@17| Int) (|bytes#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@1|) (SeqType BoxType)) (= (type |bytes#0@@11|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice__get#canCall| |a#0@@1| |i#0| |start#0@@17| |bytes#0@@11|) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |a#0@@1| (TSeq Tclass.NativeTypes.byte)) ($Is |bytes#0@@11| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |a#0@@1|))) (and (and (<= (LitInt 0) |start#0@@17|) (<= |start#0@@17| (+ |start#0@@17| (|Seq#Length| |bytes#0@@11|)))) (<= (+ |start#0@@17| (|Seq#Length| |bytes#0@@11|)) (|Seq#Length| |a#0@@1|)))))))) (and (<= (LitInt 0) (JournalistMarshallingModel.__default.splice__get |a#0@@1| |i#0| |start#0@@17| |bytes#0@@11|)) (< (JournalistMarshallingModel.__default.splice__get |a#0@@1| |i#0| |start#0@@17| |bytes#0@@11|) 256))) :qid |JournalistMarshallingModelidfy.88:23| :skolemid |1394| :pattern ( (JournalistMarshallingModel.__default.splice__get |a#0@@1| |i#0| |start#0@@17| |bytes#0@@11|)) ))))
(assert (forall ((|a#0@@2| T@U) (|i#0@@0| Int) (|start#0@@18| Int) (|bytes#0@@12| T@U) ) (!  (=> (and (and (= (type |a#0@@2|) (SeqType BoxType)) (= (type |bytes#0@@12|) (SeqType BoxType))) (and ($Is |a#0@@2| (TSeq Tclass.NativeTypes.byte)) ($Is |bytes#0@@12| (TSeq Tclass.NativeTypes.byte)))) (= (|JournalistMarshallingModel.__default.splice__get#requires| |a#0@@2| |i#0@@0| |start#0@@18| |bytes#0@@12|)  (and (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |a#0@@2|))) (and (and (<= (LitInt 0) |start#0@@18|) (<= |start#0@@18| (+ |start#0@@18| (|Seq#Length| |bytes#0@@12|)))) (<= (+ |start#0@@18| (|Seq#Length| |bytes#0@@12|)) (|Seq#Length| |a#0@@2|)))))) :qid |JournalistMarshallingModelidfy.88:23| :skolemid |1395| :pattern ( (|JournalistMarshallingModel.__default.splice__get#requires| |a#0@@2| |i#0@@0| |start#0@@18| |bytes#0@@12|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|a#0@@3| T@U) (|i#0@@1| Int) (|start#0@@19| Int) (|bytes#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@3|) (SeqType BoxType)) (= (type |bytes#0@@13|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice__get#canCall| |a#0@@3| |i#0@@1| |start#0@@19| |bytes#0@@13|) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |a#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |bytes#0@@13| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| |a#0@@3|))) (and (and (<= (LitInt 0) |start#0@@19|) (<= |start#0@@19| (+ |start#0@@19| (|Seq#Length| |bytes#0@@13|)))) (<= (+ |start#0@@19| (|Seq#Length| |bytes#0@@13|)) (|Seq#Length| |a#0@@3|)))))))) (= (JournalistMarshallingModel.__default.splice__get |a#0@@3| |i#0@@1| |start#0@@19| |bytes#0@@13|) (ite  (and (<= |start#0@@19| |i#0@@1|) (< |i#0@@1| (+ |start#0@@19| (|Seq#Length| |bytes#0@@13|)))) (U_2_int ($Unbox intType (|Seq#Index| |bytes#0@@13| (- |i#0@@1| |start#0@@19|)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@3| |i#0@@1|)))))) :qid |JournalistMarshallingModelidfy.88:23| :skolemid |1396| :pattern ( (JournalistMarshallingModel.__default.splice__get |a#0@@3| |i#0@@1| |start#0@@19| |bytes#0@@13|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|a#0@@4| T@U) (|i#0@@2| Int) (|start#0@@20| Int) (|bytes#0@@14| T@U) ) (!  (=> (and (and (= (type |a#0@@4|) (SeqType BoxType)) (= (type |bytes#0@@14|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.splice__get#canCall| (Lit |a#0@@4|) (LitInt |i#0@@2|) (LitInt |start#0@@20|) (Lit |bytes#0@@14|)) (and (not (= 8 $FunctionContextHeight)) (and (and ($Is |a#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |bytes#0@@14| (TSeq Tclass.NativeTypes.byte))) (and (and (<= (LitInt 0) (LitInt |i#0@@2|)) (< |i#0@@2| (|Seq#Length| (Lit |a#0@@4|)))) (and (and (<= (LitInt 0) (LitInt |start#0@@20|)) (<= (LitInt |start#0@@20|) (+ |start#0@@20| (|Seq#Length| (Lit |bytes#0@@14|))))) (<= (+ |start#0@@20| (|Seq#Length| (Lit |bytes#0@@14|))) (|Seq#Length| (Lit |a#0@@4|))))))))) (= (JournalistMarshallingModel.__default.splice__get (Lit |a#0@@4|) (LitInt |i#0@@2|) (LitInt |start#0@@20|) (Lit |bytes#0@@14|)) (ite  (and (<= (LitInt |start#0@@20|) (LitInt |i#0@@2|)) (< |i#0@@2| (+ |start#0@@20| (|Seq#Length| (Lit |bytes#0@@14|))))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |bytes#0@@14|) (LitInt (- |i#0@@2| |start#0@@20|))))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@4|) (LitInt |i#0@@2|))))))) :qid |JournalistMarshallingModelidfy.88:23| :weight 3 :skolemid |1397| :pattern ( (JournalistMarshallingModel.__default.splice__get (Lit |a#0@@4|) (LitInt |i#0@@2|) (LitInt |start#0@@20|) (Lit |bytes#0@@14|))) ))))
(assert (forall ((arg0@@426 T@U) (arg1@@178 T@U) (arg2@@113 Int) (arg3@@79 Int) (arg4@@61 Int) ) (! (= (type (JournalistMarshallingModel.__default.writeIntOnto arg0@@426 arg1@@178 arg2@@113 arg3@@79 arg4@@61)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.writeIntOnto| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto arg0@@426 arg1@@178 arg2@@113 arg3@@79 arg4@@61)) )))
(assert (forall (($ly@@23 T@U) (|buf#0@@11| T@U) (|numBlocks#0@@11| Int) (|idx#0@@1| Int) (|val#0| Int) ) (!  (=> (and (= (type $ly@@23) LayerTypeType) (= (type |buf#0@@11|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@23) |buf#0@@11| |numBlocks#0@@11| |idx#0@@1| |val#0|) (JournalistMarshallingModel.__default.writeIntOnto $ly@@23 |buf#0@@11| |numBlocks#0@@11| |idx#0@@1| |val#0|))) :qid |JournalistMarshallingModelidfy.196:22| :skolemid |1422| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@23) |buf#0@@11| |numBlocks#0@@11| |idx#0@@1| |val#0|)) )))
(assert (forall (($ly@@24 T@U) (|buf#0@@12| T@U) (|numBlocks#0@@12| Int) (|idx#0@@2| Int) (|val#0@@0| Int) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (= (type |buf#0@@12|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeIntOnto $ly@@24 |buf#0@@12| |numBlocks#0@@12| |idx#0@@2| |val#0@@0|) (JournalistMarshallingModel.__default.writeIntOnto $LZ |buf#0@@12| |numBlocks#0@@12| |idx#0@@2| |val#0@@0|))) :qid |JournalistMarshallingModelidfy.196:22| :skolemid |1423| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto (AsFuelBottom $ly@@24) |buf#0@@12| |numBlocks#0@@12| |idx#0@@2| |val#0@@0|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@25 T@U) (|buf#0@@13| T@U) (|numBlocks#0@@13| Int) (|idx#0@@3| Int) (|val#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |buf#0@@13|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@13| |numBlocks#0@@13| |idx#0@@3| |val#0@@1|) (and (not (= 13 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@13| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@13|) (< |numBlocks#0@@13| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@3|) (< |idx#0@@3| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@1|) (< |val#0@@1| 4294967296))) (and (and (and (= (|Seq#Length| |buf#0@@13|) (Mul (LitInt 4096) |numBlocks#0@@13|)) (<= |numBlocks#0@@13| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (LitInt 0) |idx#0@@3|)) (<= (+ |idx#0@@3| 4) (Mul |numBlocks#0@@13| (LitInt 4064)))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.writeIntOnto $ly@@25 |buf#0@@13| |numBlocks#0@@13| |idx#0@@3| |val#0@@1|)) (|Seq#Length| |buf#0@@13|)) ($Is (JournalistMarshallingModel.__default.writeIntOnto $ly@@25 |buf#0@@13| |numBlocks#0@@13| |idx#0@@3| |val#0@@1|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.196:22| :skolemid |1424| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto $ly@@25 |buf#0@@13| |numBlocks#0@@13| |idx#0@@3| |val#0@@1|)) ))))
(assert (forall (($ly@@26 T@U) (|buf#0@@14| T@U) (|numBlocks#0@@14| Int) (|idx#0@@4| Int) (|val#0@@2| Int) ) (!  (=> (and (= (type $ly@@26) LayerTypeType) (= (type |buf#0@@14|) (SeqType BoxType))) (=> (and (and (and ($Is |buf#0@@14| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@14|) (< |numBlocks#0@@14| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@4|) (< |idx#0@@4| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@2|) (< |val#0@@2| 4294967296))) (= (|JournalistMarshallingModel.__default.writeIntOnto#requires| $ly@@26 |buf#0@@14| |numBlocks#0@@14| |idx#0@@4| |val#0@@2|)  (and (and (and (= (|Seq#Length| |buf#0@@14|) (Mul (LitInt 4096) |numBlocks#0@@14|)) (<= |numBlocks#0@@14| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (LitInt 0) |idx#0@@4|)) (<= (+ |idx#0@@4| 4) (Mul |numBlocks#0@@14| (LitInt 4064))))))) :qid |JournalistMarshallingModelidfy.196:22| :skolemid |1425| :pattern ( (|JournalistMarshallingModel.__default.writeIntOnto#requires| $ly@@26 |buf#0@@14| |numBlocks#0@@14| |idx#0@@4| |val#0@@2|)) )))
(assert  (and (and (forall ((arg0@@427 T@U) (arg1@@179 Int) ) (! (= (type (PackedIntsLib.__default.pack__LittleEndian__Uint32 arg0@@427 arg1@@179)) (SeqType BoxType)) :qid |funType:PackedIntsLib.__default.pack__LittleEndian__Uint32| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 arg0@@427 arg1@@179)) )) (= (type StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32) LayerTypeType)) (= (type StartFuel_JournalistMarshallingModel._default.writeOnto) LayerTypeType)))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@27 T@U) (|buf#0@@15| T@U) (|numBlocks#0@@15| Int) (|idx#0@@5| Int) (|val#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@27) LayerTypeType) (= (type |buf#0@@15|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@15| |numBlocks#0@@15| |idx#0@@5| |val#0@@3|) (and (not (= 13 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@15| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@15|) (< |numBlocks#0@@15| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@5|) (< |idx#0@@5| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@3|) (< |val#0@@3| 4294967296))) (and (and (and (= (|Seq#Length| |buf#0@@15|) (Mul (LitInt 4096) |numBlocks#0@@15|)) (<= |numBlocks#0@@15| (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (LitInt 0) |idx#0@@5|)) (<= (+ |idx#0@@5| 4) (Mul |numBlocks#0@@15| (LitInt 4064)))))))) (and (and (|PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| |val#0@@3|) (let ((|t#0@@5| (PackedIntsLib.__default.pack__LittleEndian__Uint32 StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32 |val#0@@3|))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf#0@@15| |numBlocks#0@@15| |idx#0@@5| |t#0@@5|))) (= (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@27) |buf#0@@15| |numBlocks#0@@15| |idx#0@@5| |val#0@@3|) (let ((|t#0@@6| (PackedIntsLib.__default.pack__LittleEndian__Uint32 StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32 |val#0@@3|))) (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf#0@@15| |numBlocks#0@@15| |idx#0@@5| |t#0@@6|))))) :qid |JournalistMarshallingModelidfy.196:22| :skolemid |1426| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@27) |buf#0@@15| |numBlocks#0@@15| |idx#0@@5| |val#0@@3|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@28 T@U) (|buf#0@@16| T@U) (|numBlocks#0@@16| Int) (|idx#0@@6| Int) (|val#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@28) LayerTypeType) (= (type |buf#0@@16|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOnto#canCall| (Lit |buf#0@@16|) (LitInt |numBlocks#0@@16|) (LitInt |idx#0@@6|) (LitInt |val#0@@4|)) (and (not (= 13 $FunctionContextHeight)) (and (and (and (and ($Is |buf#0@@16| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@16|) (< |numBlocks#0@@16| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@6|) (< |idx#0@@6| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@4|) (< |val#0@@4| 4294967296))) (and (and (and (= (|Seq#Length| (Lit |buf#0@@16|)) (LitInt (Mul (LitInt 4096) (LitInt |numBlocks#0@@16|)))) (<= (LitInt |numBlocks#0@@16|) (LitInt DiskLayout.__default.NumJournalBlocks))) (<= (LitInt 0) (LitInt |idx#0@@6|))) (<= (LitInt (+ |idx#0@@6| 4)) (LitInt (Mul (LitInt |numBlocks#0@@16|) (LitInt 4064))))))))) (and (and (|PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| (LitInt |val#0@@4|)) (let ((|t#1| (PackedIntsLib.__default.pack__LittleEndian__Uint32 StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32 (LitInt |val#0@@4|)))) (|JournalistMarshallingModel.__default.writeOnto#canCall| (Lit |buf#0@@16|) (LitInt |numBlocks#0@@16|) (LitInt |idx#0@@6|) |t#1|))) (= (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@28) (Lit |buf#0@@16|) (LitInt |numBlocks#0@@16|) (LitInt |idx#0@@6|) (LitInt |val#0@@4|)) (let ((|t#1@@0| (PackedIntsLib.__default.pack__LittleEndian__Uint32 StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32 (LitInt |val#0@@4|)))) (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto (Lit |buf#0@@16|) (LitInt |numBlocks#0@@16|) (LitInt |idx#0@@6|) |t#1@@0|))))) :qid |JournalistMarshallingModelidfy.196:22| :weight 3 :skolemid |1427| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto ($LS $ly@@28) (Lit |buf#0@@16|) (LitInt |numBlocks#0@@16|) (LitInt |idx#0@@6|) (LitInt |val#0@@4|))) ))))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1429| :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.uint32)) )))
(assert (forall ((arg0@@428 T@U) ) (! (= (type (|JournalistMarshallingModel.__default.writeOnto#Handle| arg0@@428)) HandleTypeType) :qid |funType:JournalistMarshallingModel.__default.writeOnto#Handle| :pattern ( (|JournalistMarshallingModel.__default.writeOnto#Handle| arg0@@428)) )))
(assert (forall (($ly@@29 T@U) ($heap T@U) (|$fh$0x#0| T@U) (|$fh$0x#1| T@U) (|$fh$0x#2| T@U) (|$fh$0x#3| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@29) LayerTypeType) (= (type $heap) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0|) BoxType)) (= (type |$fh$0x#1|) BoxType)) (= (type |$fh$0x#2|) BoxType)) (= (type |$fh$0x#3|) BoxType)) (= (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@29) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2| |$fh$0x#3|) ($Box (JournalistMarshallingModel.__default.writeOnto $ly@@29 ($Unbox (SeqType BoxType) |$fh$0x#0|) (U_2_int ($Unbox intType |$fh$0x#1|)) (U_2_int ($Unbox intType |$fh$0x#2|)) ($Unbox (SeqType BoxType) |$fh$0x#3|))))) :qid |unknown.0:0| :skolemid |1432| :pattern ( (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@29) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2| |$fh$0x#3|)) )))
(assert (forall (($ly@@30 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) (|$fh$0x#1@@0| T@U) (|$fh$0x#2@@0| T@U) (|$fh$0x#3@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@30) LayerTypeType) (= (type $heap@@0) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@0|) BoxType)) (= (type |$fh$0x#1@@0|) BoxType)) (= (type |$fh$0x#2@@0|) BoxType)) (= (type |$fh$0x#3@@0|) BoxType)) (= (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap@@0 (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@30) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0| |$fh$0x#3@@0|) (|JournalistMarshallingModel.__default.writeOnto#requires| $ly@@30 ($Unbox (SeqType BoxType) |$fh$0x#0@@0|) (U_2_int ($Unbox intType |$fh$0x#1@@0|)) (U_2_int ($Unbox intType |$fh$0x#2@@0|)) ($Unbox (SeqType BoxType) |$fh$0x#3@@0|)))) :qid |unknown.0:0| :skolemid |1433| :pattern ( (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap@@0 (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@30) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0| |$fh$0x#3@@0|)) )))
(assert (forall (($bx T@U) ($ly@@31 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) (|$fh$0x#1@@1| T@U) (|$fh$0x#2@@1| T@U) (|$fh$0x#3@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $bx) BoxType) (= (type $ly@@31) LayerTypeType)) (= (type $heap@@1) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@1|) BoxType)) (= (type |$fh$0x#1@@1|) BoxType)) (= (type |$fh$0x#2@@1|) BoxType)) (= (type |$fh$0x#3@@1|) BoxType)) (= (U_2_bool (MapType0Select (Reads4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap@@1 (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@31) |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1| |$fh$0x#3@@1|) $bx)) false)) :qid |unknown.0:0| :skolemid |1434| :pattern ( (MapType0Select (Reads4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap@@1 (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@31) |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1| |$fh$0x#3@@1|) $bx)) )))
(assert (forall (($ly@@32 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) (|$fh$0x#1@@2| Int) (|$fh$0x#2@@2| Int) (|$fh$0x#3@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type $heap@@2) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@2|) (SeqType BoxType))) (= (type |$fh$0x#3@@2|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeOnto $ly@@32 |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2| |$fh$0x#3@@2|) ($Unbox (SeqType BoxType) (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $heap@@2 (|JournalistMarshallingModel.__default.writeOnto#Handle| $ly@@32) ($Box |$fh$0x#0@@2|) ($Box (int_2_U |$fh$0x#1@@2|)) ($Box (int_2_U |$fh$0x#2@@2|)) ($Box |$fh$0x#3@@2|))))) :qid |unknown.0:0| :skolemid |1435| :pattern ( (JournalistMarshallingModel.__default.writeOnto $ly@@32 |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2| |$fh$0x#3@@2|) ($IsGoodHeap $heap@@2)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($Heap T@U) (|buf#0@@17| T@U) (|numBlocks#0@@17| Int) (|start#0@@21| Int) (|bytes#0@@15| T@U) (|i#0@@3| Int) ) (!  (=> (and (and (and (= (type $Heap) (MapType0Type refType MapType1Type)) (= (type |buf#0@@17|) (SeqType BoxType))) (= (type |bytes#0@@15|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOntoAgrees#canCall| |buf#0@@17| |numBlocks#0@@17| |start#0@@21| |bytes#0@@15| |i#0@@3|) (and (not (= 14 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap) ($Is |buf#0@@17| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@17|) (< |numBlocks#0@@17| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@21|) (< |start#0@@21| 18446744073709551616))) ($Is |bytes#0@@15| (TSeq Tclass.NativeTypes.byte))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $Heap (|JournalistMarshallingModel.__default.writeOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeOnto) ($Box |buf#0@@17|) ($Box (int_2_U |numBlocks#0@@17|)) ($Box (int_2_U |start#0@@21|)) ($Box |bytes#0@@15|)) (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| |start#0@@21|))))))) true) :qid |JournalistMarshallingModelidfy.207:13| :skolemid |1436| :pattern ( (JournalistMarshallingModel.__default.writeOntoAgrees |buf#0@@17| |numBlocks#0@@17| |start#0@@21| |bytes#0@@15| |i#0@@3|) ($IsGoodHeap $Heap)) ))))
(assert (forall (($Heap@@0 T@U) (|buf#0@@18| T@U) (|numBlocks#0@@18| Int) (|start#0@@22| Int) (|bytes#0@@16| T@U) (|i#0@@4| Int) ) (!  (=> (and (and (= (type $Heap@@0) (MapType0Type refType MapType1Type)) (= (type |buf#0@@18|) (SeqType BoxType))) (= (type |bytes#0@@16|) (SeqType BoxType))) (=> (and (and (and (and ($IsGoodHeap $Heap@@0) ($Is |buf#0@@18| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@18|) (< |numBlocks#0@@18| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@22|) (< |start#0@@22| 18446744073709551616))) ($Is |bytes#0@@16| (TSeq Tclass.NativeTypes.byte))) (= (|JournalistMarshallingModel.__default.writeOntoAgrees#requires| |buf#0@@18| |numBlocks#0@@18| |start#0@@22| |bytes#0@@16| |i#0@@4|)  (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $Heap@@0 (|JournalistMarshallingModel.__default.writeOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeOnto) ($Box |buf#0@@18|) ($Box (int_2_U |numBlocks#0@@18|)) ($Box (int_2_U |start#0@@22|)) ($Box |bytes#0@@16|)) (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| |start#0@@22|)))))) :qid |JournalistMarshallingModelidfy.207:13| :skolemid |1437| :pattern ( (|JournalistMarshallingModel.__default.writeOntoAgrees#requires| |buf#0@@18| |numBlocks#0@@18| |start#0@@22| |bytes#0@@16| |i#0@@4|) ($IsGoodHeap $Heap@@0)) )))
(assert (= (type StartFuel_JournalistMarshallingModel._default.withoutChecksums) LayerTypeType))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|buf#0@@19| T@U) (|numBlocks#0@@19| Int) (|start#0@@23| Int) (|bytes#0@@17| T@U) (|i#0@@5| Int) ) (!  (=> (and (and (and (= (type $Heap@@1) (MapType0Type refType MapType1Type)) (= (type |buf#0@@19|) (SeqType BoxType))) (= (type |bytes#0@@17|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOntoAgrees#canCall| |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17| |i#0@@5|) (and (not (= 14 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap@@1) ($Is |buf#0@@19| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@19|) (< |numBlocks#0@@19| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@23|) (< |start#0@@23| 18446744073709551616))) ($Is |bytes#0@@17| (TSeq Tclass.NativeTypes.byte))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $Heap@@1 (|JournalistMarshallingModel.__default.writeOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeOnto) ($Box |buf#0@@19|) ($Box (int_2_U |numBlocks#0@@19|)) ($Box (int_2_U |start#0@@23|)) ($Box |bytes#0@@17|)) (and (<= (LitInt 0) |i#0@@5|) (< |i#0@@5| |start#0@@23|))))))) (and (and (and (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17|) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17|) |numBlocks#0@@19|)) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@19| |numBlocks#0@@19|)) (= (JournalistMarshallingModel.__default.writeOntoAgrees |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17| |i#0@@5|) (= (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17|) |numBlocks#0@@19|) |i#0@@5|))) (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@19| |numBlocks#0@@19|) |i#0@@5|))))))) :qid |JournalistMarshallingModelidfy.207:13| :skolemid |1438| :pattern ( (JournalistMarshallingModel.__default.writeOntoAgrees |buf#0@@19| |numBlocks#0@@19| |start#0@@23| |bytes#0@@17| |i#0@@5|) ($IsGoodHeap $Heap@@1)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($Heap@@2 T@U) (|buf#0@@20| T@U) (|numBlocks#0@@20| Int) (|start#0@@24| Int) (|bytes#0@@18| T@U) (|i#0@@6| Int) ) (!  (=> (and (and (and (= (type $Heap@@2) (MapType0Type refType MapType1Type)) (= (type |buf#0@@20|) (SeqType BoxType))) (= (type |bytes#0@@18|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeOntoAgrees#canCall| (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|) (LitInt |i#0@@6|)) (and (not (= 14 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap@@2) ($Is |buf#0@@20| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@20|) (< |numBlocks#0@@20| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@24|) (< |start#0@@24| 18446744073709551616))) ($Is |bytes#0@@18| (TSeq Tclass.NativeTypes.byte))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) (TSeq Tclass.NativeTypes.byte) $Heap@@2 (|JournalistMarshallingModel.__default.writeOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeOnto) ($Box (Lit |buf#0@@20|)) ($Box (int_2_U (LitInt |numBlocks#0@@20|))) ($Box (int_2_U (LitInt |start#0@@24|))) ($Box (Lit |bytes#0@@18|))) (and (<= (LitInt 0) (LitInt |i#0@@6|)) (< |i#0@@6| |start#0@@24|))))))) (and (and (and (|JournalistMarshallingModel.__default.writeOnto#canCall| (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|)) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|)) (LitInt |numBlocks#0@@20|))) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|))) (= (JournalistMarshallingModel.__default.writeOntoAgrees (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|) (LitInt |i#0@@6|)) (= (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|)) (LitInt |numBlocks#0@@20|)) (LitInt |i#0@@6|)))) (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|)) (LitInt |i#0@@6|)))))))) :qid |JournalistMarshallingModelidfy.207:13| :weight 3 :skolemid |1439| :pattern ( (JournalistMarshallingModel.__default.writeOntoAgrees (Lit |buf#0@@20|) (LitInt |numBlocks#0@@20|) (LitInt |start#0@@24|) (Lit |bytes#0@@18|) (LitInt |i#0@@6|)) ($IsGoodHeap $Heap@@2)) ))))
(assert (forall ((arg0@@429 T@U) ) (! (= (type (|JournalistMarshallingModel.__default.writeIntOnto#Handle| arg0@@429)) HandleTypeType) :qid |funType:JournalistMarshallingModel.__default.writeIntOnto#Handle| :pattern ( (|JournalistMarshallingModel.__default.writeIntOnto#Handle| arg0@@429)) )))
(assert (forall (($ly@@33 T@U) ($heap@@3 T@U) (|$fh$0x#0@@3| T@U) (|$fh$0x#1@@3| T@U) (|$fh$0x#2@@3| T@U) (|$fh$0x#3@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@33) LayerTypeType) (= (type $heap@@3) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@3|) BoxType)) (= (type |$fh$0x#1@@3|) BoxType)) (= (type |$fh$0x#2@@3|) BoxType)) (= (type |$fh$0x#3@@3|) BoxType)) (= (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@3 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@33) |$fh$0x#0@@3| |$fh$0x#1@@3| |$fh$0x#2@@3| |$fh$0x#3@@3|) ($Box (JournalistMarshallingModel.__default.writeIntOnto $ly@@33 ($Unbox (SeqType BoxType) |$fh$0x#0@@3|) (U_2_int ($Unbox intType |$fh$0x#1@@3|)) (U_2_int ($Unbox intType |$fh$0x#2@@3|)) (U_2_int ($Unbox intType |$fh$0x#3@@3|)))))) :qid |unknown.0:0| :skolemid |1459| :pattern ( (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@3 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@33) |$fh$0x#0@@3| |$fh$0x#1@@3| |$fh$0x#2@@3| |$fh$0x#3@@3|)) )))
(assert (forall (($ly@@34 T@U) ($heap@@4 T@U) (|$fh$0x#0@@4| T@U) (|$fh$0x#1@@4| T@U) (|$fh$0x#2@@4| T@U) (|$fh$0x#3@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@34) LayerTypeType) (= (type $heap@@4) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@4|) BoxType)) (= (type |$fh$0x#1@@4|) BoxType)) (= (type |$fh$0x#2@@4|) BoxType)) (= (type |$fh$0x#3@@4|) BoxType)) (= (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@4 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@34) |$fh$0x#0@@4| |$fh$0x#1@@4| |$fh$0x#2@@4| |$fh$0x#3@@4|) (|JournalistMarshallingModel.__default.writeIntOnto#requires| $ly@@34 ($Unbox (SeqType BoxType) |$fh$0x#0@@4|) (U_2_int ($Unbox intType |$fh$0x#1@@4|)) (U_2_int ($Unbox intType |$fh$0x#2@@4|)) (U_2_int ($Unbox intType |$fh$0x#3@@4|))))) :qid |unknown.0:0| :skolemid |1460| :pattern ( (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@4 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@34) |$fh$0x#0@@4| |$fh$0x#1@@4| |$fh$0x#2@@4| |$fh$0x#3@@4|)) )))
(assert (forall (($bx@@0 T@U) ($ly@@35 T@U) ($heap@@5 T@U) (|$fh$0x#0@@5| T@U) (|$fh$0x#1@@5| T@U) (|$fh$0x#2@@5| T@U) (|$fh$0x#3@@5| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $bx@@0) BoxType) (= (type $ly@@35) LayerTypeType)) (= (type $heap@@5) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@5|) BoxType)) (= (type |$fh$0x#1@@5|) BoxType)) (= (type |$fh$0x#2@@5|) BoxType)) (= (type |$fh$0x#3@@5|) BoxType)) (= (U_2_bool (MapType0Select (Reads4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@5 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@35) |$fh$0x#0@@5| |$fh$0x#1@@5| |$fh$0x#2@@5| |$fh$0x#3@@5|) $bx@@0)) false)) :qid |unknown.0:0| :skolemid |1461| :pattern ( (MapType0Select (Reads4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@5 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@35) |$fh$0x#0@@5| |$fh$0x#1@@5| |$fh$0x#2@@5| |$fh$0x#3@@5|) $bx@@0)) )))
(assert (forall (($ly@@36 T@U) ($heap@@6 T@U) (|$fh$0x#0@@6| T@U) (|$fh$0x#1@@6| Int) (|$fh$0x#2@@6| Int) (|$fh$0x#3@@6| Int) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type $heap@@6) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@6|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeIntOnto $ly@@36 |$fh$0x#0@@6| |$fh$0x#1@@6| |$fh$0x#2@@6| |$fh$0x#3@@6|) ($Unbox (SeqType BoxType) (Apply4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $heap@@6 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| $ly@@36) ($Box |$fh$0x#0@@6|) ($Box (int_2_U |$fh$0x#1@@6|)) ($Box (int_2_U |$fh$0x#2@@6|)) ($Box (int_2_U |$fh$0x#3@@6|)))))) :qid |unknown.0:0| :skolemid |1462| :pattern ( (JournalistMarshallingModel.__default.writeIntOnto $ly@@36 |$fh$0x#0@@6| |$fh$0x#1@@6| |$fh$0x#2@@6| |$fh$0x#3@@6|) ($IsGoodHeap $heap@@6)) )))
(assert (= (type StartFuel_JournalistMarshallingModel._default.writeIntOnto) LayerTypeType))
(assert  (=> (<= 18 $FunctionContextHeight) (forall (($Heap@@3 T@U) (|buf#0@@21| T@U) (|numBlocks#0@@21| Int) (|start#0@@25| Int) (|val#0@@5| Int) (|i#0@@7| Int) ) (!  (=> (and (and (= (type $Heap@@3) (MapType0Type refType MapType1Type)) (= (type |buf#0@@21|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOntoAgrees#canCall| |buf#0@@21| |numBlocks#0@@21| |start#0@@25| |val#0@@5| |i#0@@7|) (and (not (= 18 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap@@3) ($Is |buf#0@@21| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@21|) (< |numBlocks#0@@21| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@25|) (< |start#0@@25| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@5|) (< |val#0@@5| 4294967296))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $Heap@@3 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeIntOnto) ($Box |buf#0@@21|) ($Box (int_2_U |numBlocks#0@@21|)) ($Box (int_2_U |start#0@@25|)) ($Box (int_2_U |val#0@@5|))) (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| |start#0@@25|))))))) true) :qid |JournalistMarshallingModelidfy.269:13| :skolemid |1463| :pattern ( (JournalistMarshallingModel.__default.writeIntOntoAgrees |buf#0@@21| |numBlocks#0@@21| |start#0@@25| |val#0@@5| |i#0@@7|) ($IsGoodHeap $Heap@@3)) ))))
(assert (forall (($Heap@@4 T@U) (|buf#0@@22| T@U) (|numBlocks#0@@22| Int) (|start#0@@26| Int) (|val#0@@6| Int) (|i#0@@8| Int) ) (!  (=> (and (= (type $Heap@@4) (MapType0Type refType MapType1Type)) (= (type |buf#0@@22|) (SeqType BoxType))) (=> (and (and (and (and ($IsGoodHeap $Heap@@4) ($Is |buf#0@@22| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@22|) (< |numBlocks#0@@22| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@26|) (< |start#0@@26| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@6|) (< |val#0@@6| 4294967296))) (= (|JournalistMarshallingModel.__default.writeIntOntoAgrees#requires| |buf#0@@22| |numBlocks#0@@22| |start#0@@26| |val#0@@6| |i#0@@8|)  (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $Heap@@4 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeIntOnto) ($Box |buf#0@@22|) ($Box (int_2_U |numBlocks#0@@22|)) ($Box (int_2_U |start#0@@26|)) ($Box (int_2_U |val#0@@6|))) (and (<= (LitInt 0) |i#0@@8|) (< |i#0@@8| |start#0@@26|)))))) :qid |JournalistMarshallingModelidfy.269:13| :skolemid |1464| :pattern ( (|JournalistMarshallingModel.__default.writeIntOntoAgrees#requires| |buf#0@@22| |numBlocks#0@@22| |start#0@@26| |val#0@@6| |i#0@@8|) ($IsGoodHeap $Heap@@4)) )))
(assert  (=> (<= 18 $FunctionContextHeight) (forall (($Heap@@5 T@U) (|buf#0@@23| T@U) (|numBlocks#0@@23| Int) (|start#0@@27| Int) (|val#0@@7| Int) (|i#0@@9| Int) ) (!  (=> (and (and (= (type $Heap@@5) (MapType0Type refType MapType1Type)) (= (type |buf#0@@23|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOntoAgrees#canCall| |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7| |i#0@@9|) (and (not (= 18 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap@@5) ($Is |buf#0@@23| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@23|) (< |numBlocks#0@@23| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@27|) (< |start#0@@27| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@7|) (< |val#0@@7| 4294967296))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $Heap@@5 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeIntOnto) ($Box |buf#0@@23|) ($Box (int_2_U |numBlocks#0@@23|)) ($Box (int_2_U |start#0@@27|)) ($Box (int_2_U |val#0@@7|))) (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| |start#0@@27|))))))) (and (and (and (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7|) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7|) |numBlocks#0@@23|)) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@23| |numBlocks#0@@23|)) (= (JournalistMarshallingModel.__default.writeIntOntoAgrees |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7| |i#0@@9|) (= (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7|) |numBlocks#0@@23|) |i#0@@9|))) (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@23| |numBlocks#0@@23|) |i#0@@9|))))))) :qid |JournalistMarshallingModelidfy.269:13| :skolemid |1465| :pattern ( (JournalistMarshallingModel.__default.writeIntOntoAgrees |buf#0@@23| |numBlocks#0@@23| |start#0@@27| |val#0@@7| |i#0@@9|) ($IsGoodHeap $Heap@@5)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall (($Heap@@6 T@U) (|buf#0@@24| T@U) (|numBlocks#0@@24| Int) (|start#0@@28| Int) (|val#0@@8| Int) (|i#0@@10| Int) ) (!  (=> (and (and (= (type $Heap@@6) (MapType0Type refType MapType1Type)) (= (type |buf#0@@24|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeIntOntoAgrees#canCall| (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|) (LitInt |i#0@@10|)) (and (not (= 18 $FunctionContextHeight)) (and (and (and (and (and ($IsGoodHeap $Heap@@6) ($Is |buf#0@@24| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |numBlocks#0@@24|) (< |numBlocks#0@@24| 18446744073709551616))) (and (<= (LitInt 0) |start#0@@28|) (< |start#0@@28| 18446744073709551616))) (and (<= (LitInt 0) |val#0@@8|) (< |val#0@@8| 4294967296))) (and (Requires4 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint32 (TSeq Tclass.NativeTypes.byte) $Heap@@6 (|JournalistMarshallingModel.__default.writeIntOnto#Handle| StartFuel_JournalistMarshallingModel._default.writeIntOnto) ($Box (Lit |buf#0@@24|)) ($Box (int_2_U (LitInt |numBlocks#0@@24|))) ($Box (int_2_U (LitInt |start#0@@28|))) ($Box (int_2_U (LitInt |val#0@@8|)))) (and (<= (LitInt 0) (LitInt |i#0@@10|)) (< |i#0@@10| |start#0@@28|))))))) (and (and (and (|JournalistMarshallingModel.__default.writeIntOnto#canCall| (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|)) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|)) (LitInt |numBlocks#0@@24|))) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|))) (= (JournalistMarshallingModel.__default.writeIntOntoAgrees (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|) (LitInt |i#0@@10|)) (= (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|)) (LitInt |numBlocks#0@@24|)) (LitInt |i#0@@10|)))) (U_2_int ($Unbox intType (|Seq#Index| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|)) (LitInt |i#0@@10|)))))))) :qid |JournalistMarshallingModelidfy.269:13| :weight 3 :skolemid |1466| :pattern ( (JournalistMarshallingModel.__default.writeIntOntoAgrees (Lit |buf#0@@24|) (LitInt |numBlocks#0@@24|) (LitInt |start#0@@28|) (LitInt |val#0@@8|) (LitInt |i#0@@10|)) ($IsGoodHeap $Heap@@6)) ))))
(assert (forall ((arg0@@430 T@U) (arg1@@180 Int) (arg2@@114 Int) ) (! (= (type (JournalistMarshallingModel.__default.writeHeader arg0@@430 arg1@@180 arg2@@114)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.writeHeader| :pattern ( (JournalistMarshallingModel.__default.writeHeader arg0@@430 arg1@@180 arg2@@114)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|buf#0@@25| T@U) (|numBlocks#0@@25| Int) (|len#0| Int) ) (!  (=> (and (= (type |buf#0@@25|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.writeHeader#canCall| |buf#0@@25| |numBlocks#0@@25| |len#0|) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@25| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@25|) (< |numBlocks#0@@25| 18446744073709551616))) (and (<= (LitInt 0) |len#0|) (< |len#0| 18446744073709551616))) (and (and (= (|Seq#Length| |buf#0@@25|) (Mul (LitInt 4096) |numBlocks#0@@25|)) (and (<= (LitInt 1) |numBlocks#0@@25|) (<= |numBlocks#0@@25| (LitInt DiskLayout.__default.NumJournalBlocks)))) (<= |len#0| (LitInt 4294967295))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.writeHeader |buf#0@@25| |numBlocks#0@@25| |len#0|)) (|Seq#Length| |buf#0@@25|)) ($Is (JournalistMarshallingModel.__default.writeHeader |buf#0@@25| |numBlocks#0@@25| |len#0|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.332:24| :skolemid |1485| :pattern ( (JournalistMarshallingModel.__default.writeHeader |buf#0@@25| |numBlocks#0@@25| |len#0|)) ))))
(assert (forall ((|buf#0@@26| T@U) (|numBlocks#0@@26| Int) (|len#0@@0| Int) ) (!  (=> (= (type |buf#0@@26|) (SeqType BoxType)) (=> (and (and ($Is |buf#0@@26| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@26|) (< |numBlocks#0@@26| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@0|) (< |len#0@@0| 18446744073709551616))) (= (|JournalistMarshallingModel.__default.writeHeader#requires| |buf#0@@26| |numBlocks#0@@26| |len#0@@0|)  (and (and (= (|Seq#Length| |buf#0@@26|) (Mul (LitInt 4096) |numBlocks#0@@26|)) (and (<= (LitInt 1) |numBlocks#0@@26|) (<= |numBlocks#0@@26| (LitInt DiskLayout.__default.NumJournalBlocks)))) (<= |len#0@@0| (LitInt 4294967295)))))) :qid |JournalistMarshallingModelidfy.332:24| :skolemid |1486| :pattern ( (|JournalistMarshallingModel.__default.writeHeader#requires| |buf#0@@26| |numBlocks#0@@26| |len#0@@0|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|buf#0@@27| T@U) (|numBlocks#0@@27| Int) (|len#0@@1| Int) ) (!  (=> (and (= (type |buf#0@@27|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.writeHeader#canCall| |buf#0@@27| |numBlocks#0@@27| |len#0@@1|) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@27| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@27|) (< |numBlocks#0@@27| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@1|) (< |len#0@@1| 18446744073709551616))) (and (and (= (|Seq#Length| |buf#0@@27|) (Mul (LitInt 4096) |numBlocks#0@@27|)) (and (<= (LitInt 1) |numBlocks#0@@27|) (<= |numBlocks#0@@27| (LitInt DiskLayout.__default.NumJournalBlocks)))) (<= |len#0@@1| (LitInt 4294967295))))))) (and (and (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@27| |numBlocks#0@@27| (LitInt 0) |len#0@@1|) (let ((|buf1#0@@1| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@27| |numBlocks#0@@27| (LitInt 0) |len#0@@1|))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf1#0@@1| |numBlocks#0@@27| (LitInt 4) |numBlocks#0@@27|))) (= (JournalistMarshallingModel.__default.writeHeader |buf#0@@27| |numBlocks#0@@27| |len#0@@1|) (let ((|buf1#0@@2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@27| |numBlocks#0@@27| (LitInt 0) |len#0@@1|))) (let ((|buf2#0@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#0@@2| |numBlocks#0@@27| (LitInt 4) |numBlocks#0@@27|))) |buf2#0@@0|))))) :qid |JournalistMarshallingModelidfy.332:24| :skolemid |1487| :pattern ( (JournalistMarshallingModel.__default.writeHeader |buf#0@@27| |numBlocks#0@@27| |len#0@@1|)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|buf#0@@28| T@U) (|numBlocks#0@@28| Int) (|len#0@@2| Int) ) (!  (=> (and (= (type |buf#0@@28|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.writeHeader#canCall| (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt |len#0@@2|)) (and (not (= 23 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@28| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@28|) (< |numBlocks#0@@28| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@2|) (< |len#0@@2| 18446744073709551616))) (and (and (= (|Seq#Length| (Lit |buf#0@@28|)) (LitInt (Mul (LitInt 4096) (LitInt |numBlocks#0@@28|)))) (and (<= (LitInt 1) (LitInt |numBlocks#0@@28|)) (<= (LitInt |numBlocks#0@@28|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt |len#0@@2|) (LitInt 4294967295))))))) (and (and (|JournalistMarshallingModel.__default.writeIntOnto#canCall| (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt 0) (LitInt |len#0@@2|)) (let ((|buf1#1@@1| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt 0) (LitInt |len#0@@2|)))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf1#1@@1| (LitInt |numBlocks#0@@28|) (LitInt 4) (LitInt |numBlocks#0@@28|)))) (= (JournalistMarshallingModel.__default.writeHeader (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt |len#0@@2|)) (let ((|buf1#1@@2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt 0) (LitInt |len#0@@2|)))) (let ((|buf2#1@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#1@@2| (LitInt |numBlocks#0@@28|) (LitInt 4) (LitInt |numBlocks#0@@28|)))) |buf2#1@@0|))))) :qid |JournalistMarshallingModelidfy.332:24| :weight 3 :skolemid |1488| :pattern ( (JournalistMarshallingModel.__default.writeHeader (Lit |buf#0@@28|) (LitInt |numBlocks#0@@28|) (LitInt |len#0@@2|))) ))))
(assert (= (type Tclass.Journal.JournalEntry) TyType))
(assert (= (Tag Tclass.Journal.JournalEntry) Tagclass.Journal.JournalEntry))
(assert (= (TagFamily Tclass.Journal.JournalEntry) tytagFamily$JournalEntry))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.Journal.JournalEntry)) (and (= ($Box ($Unbox DatatypeTypeType bx@@128)) bx@@128) ($Is ($Unbox DatatypeTypeType bx@@128) Tclass.Journal.JournalEntry))) :qid |unknown.0:0| :skolemid |1492| :pattern ( ($IsBox bx@@128 Tclass.Journal.JournalEntry)) )))
(assert (forall ((arg0@@431 T@U) (arg1@@181 T@U) (arg2@@115 Int) (arg3@@80 Int) (arg4@@62 T@U) (arg5@@46 Int) (arg6@@34 Int) ) (! (= (type (JournalistMarshallingModel.__default.writeJournalEntries arg0@@431 arg1@@181 arg2@@115 arg3@@80 arg4@@62 arg5@@46 arg6@@34)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.writeJournalEntries| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries arg0@@431 arg1@@181 arg2@@115 arg3@@80 arg4@@62 arg5@@46 arg6@@34)) )))
(assert (forall (($ly@@37 T@U) (|buf#0@@29| T@U) (|numBlocks#0@@29| Int) (|idx#0@@7| Int) (|entries#0| T@U) (|start#0@@29| Int) (|len#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@37) LayerTypeType) (= (type |buf#0@@29|) (SeqType BoxType))) (= (type |entries#0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@37) |buf#0@@29| |numBlocks#0@@29| |idx#0@@7| |entries#0| |start#0@@29| |len#0@@3|) (JournalistMarshallingModel.__default.writeJournalEntries $ly@@37 |buf#0@@29| |numBlocks#0@@29| |idx#0@@7| |entries#0| |start#0@@29| |len#0@@3|))) :qid |JournalistMarshallingModelidfy.359:22| :skolemid |1495| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@37) |buf#0@@29| |numBlocks#0@@29| |idx#0@@7| |entries#0| |start#0@@29| |len#0@@3|)) )))
(assert (forall (($ly@@38 T@U) (|buf#0@@30| T@U) (|numBlocks#0@@30| Int) (|idx#0@@8| Int) (|entries#0@@0| T@U) (|start#0@@30| Int) (|len#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@38) LayerTypeType) (= (type |buf#0@@30|) (SeqType BoxType))) (= (type |entries#0@@0|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.writeJournalEntries $ly@@38 |buf#0@@30| |numBlocks#0@@30| |idx#0@@8| |entries#0@@0| |start#0@@30| |len#0@@4|) (JournalistMarshallingModel.__default.writeJournalEntries $LZ |buf#0@@30| |numBlocks#0@@30| |idx#0@@8| |entries#0@@0| |start#0@@30| |len#0@@4|))) :qid |JournalistMarshallingModelidfy.359:22| :skolemid |1496| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries (AsFuelBottom $ly@@38) |buf#0@@30| |numBlocks#0@@30| |idx#0@@8| |entries#0@@0| |start#0@@30| |len#0@@4|)) )))
(assert (= (type StartFuel_JournalistMarshallingModel._default.cyclicSlice) LayerTypeType))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@39 T@U) (|buf#0@@31| T@U) (|numBlocks#0@@31| Int) (|idx#0@@9| Int) (|entries#0@@1| T@U) (|start#0@@31| Int) (|len#0@@5| Int) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type |buf#0@@31|) (SeqType BoxType))) (= (type |entries#0@@1|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf#0@@31| |numBlocks#0@@31| |idx#0@@9| |entries#0@@1| |start#0@@31| |len#0@@5|) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and (and ($Is |buf#0@@31| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@31|) (< |numBlocks#0@@31| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@9|) (< |idx#0@@9| 18446744073709551616))) ($Is |entries#0@@1| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |start#0@@31|) (< |start#0@@31| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@5|) (< |len#0@@5| 18446744073709551616))) (and (and (and (and (and (= (|Seq#Length| |buf#0@@31|) (Mul (LitInt 4096) |numBlocks#0@@31|)) (<= |numBlocks#0@@31| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |start#0@@31|) (< |start#0@@31| (|Seq#Length| |entries#0@@1|)))) (and (<= (LitInt 0) |len#0@@5|) (<= |len#0@@5| (|Seq#Length| |entries#0@@1|)))) (< (|Seq#Length| |entries#0@@1|) 1152921504606846975)) (<= (+ |idx#0@@9| (JournalRanges.__default.SumJournalEntries ($LS $LZ) (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@1| |start#0@@31| |len#0@@5|))) (Mul (LitInt 4064) |numBlocks#0@@31|))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.writeJournalEntries $ly@@39 |buf#0@@31| |numBlocks#0@@31| |idx#0@@9| |entries#0@@1| |start#0@@31| |len#0@@5|)) (|Seq#Length| |buf#0@@31|)) ($Is (JournalistMarshallingModel.__default.writeJournalEntries $ly@@39 |buf#0@@31| |numBlocks#0@@31| |idx#0@@9| |entries#0@@1| |start#0@@31| |len#0@@5|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.359:22| :skolemid |1497| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries $ly@@39 |buf#0@@31| |numBlocks#0@@31| |idx#0@@9| |entries#0@@1| |start#0@@31| |len#0@@5|)) ))))
(assert (forall (($ly@@40 T@U) (|buf#0@@32| T@U) (|numBlocks#0@@32| Int) (|idx#0@@10| Int) (|entries#0@@2| T@U) (|start#0@@32| Int) (|len#0@@6| Int) ) (!  (=> (and (and (= (type $ly@@40) LayerTypeType) (= (type |buf#0@@32|) (SeqType BoxType))) (= (type |entries#0@@2|) (SeqType BoxType))) (=> (and (and (and (and (and ($Is |buf#0@@32| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@32|) (< |numBlocks#0@@32| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@10|) (< |idx#0@@10| 18446744073709551616))) ($Is |entries#0@@2| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |start#0@@32|) (< |start#0@@32| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@6|) (< |len#0@@6| 18446744073709551616))) (= (|JournalistMarshallingModel.__default.writeJournalEntries#requires| $ly@@40 |buf#0@@32| |numBlocks#0@@32| |idx#0@@10| |entries#0@@2| |start#0@@32| |len#0@@6|)  (and (and (and (and (and (= (|Seq#Length| |buf#0@@32|) (Mul (LitInt 4096) |numBlocks#0@@32|)) (<= |numBlocks#0@@32| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |start#0@@32|) (< |start#0@@32| (|Seq#Length| |entries#0@@2|)))) (and (<= (LitInt 0) |len#0@@6|) (<= |len#0@@6| (|Seq#Length| |entries#0@@2|)))) (< (|Seq#Length| |entries#0@@2|) 1152921504606846975)) (<= (+ |idx#0@@10| (JournalRanges.__default.SumJournalEntries ($LS $LZ) (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@2| |start#0@@32| |len#0@@6|))) (Mul (LitInt 4064) |numBlocks#0@@32|)))))) :qid |JournalistMarshallingModelidfy.359:22| :skolemid |1498| :pattern ( (|JournalistMarshallingModel.__default.writeJournalEntries#requires| $ly@@40 |buf#0@@32| |numBlocks#0@@32| |idx#0@@10| |entries#0@@2| |start#0@@32| |len#0@@6|)) )))
(assert  (and (forall ((arg0@@432 T@U) ) (! (= (type (Journal.JournalEntry.key arg0@@432)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.key| :pattern ( (Journal.JournalEntry.key arg0@@432)) )) (forall ((arg0@@433 T@U) ) (! (= (type (Journal.JournalEntry.value arg0@@433)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.value| :pattern ( (Journal.JournalEntry.value arg0@@433)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@41 T@U) (|buf#0@@33| T@U) (|numBlocks#0@@33| Int) (|idx#0@@11| Int) (|entries#0@@3| T@U) (|start#0@@33| Int) (|len#0@@7| Int) ) (!  (=> (and (and (and (= (type $ly@@41) LayerTypeType) (= (type |buf#0@@33|) (SeqType BoxType))) (= (type |entries#0@@3|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| |entries#0@@3| |start#0@@33| |len#0@@7|) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and (and ($Is |buf#0@@33| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@33|) (< |numBlocks#0@@33| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@11|) (< |idx#0@@11| 18446744073709551616))) ($Is |entries#0@@3| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |start#0@@33|) (< |start#0@@33| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@7|) (< |len#0@@7| 18446744073709551616))) (and (and (and (and (and (= (|Seq#Length| |buf#0@@33|) (Mul (LitInt 4096) |numBlocks#0@@33|)) (<= |numBlocks#0@@33| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |start#0@@33|) (< |start#0@@33| (|Seq#Length| |entries#0@@3|)))) (and (<= (LitInt 0) |len#0@@7|) (<= |len#0@@7| (|Seq#Length| |entries#0@@3|)))) (< (|Seq#Length| |entries#0@@3|) 1152921504606846975)) (<= (+ |idx#0@@11| (JournalRanges.__default.SumJournalEntries ($LS $LZ) (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@3| |start#0@@33| |len#0@@7|))) (Mul (LitInt 4064) |numBlocks#0@@33|))))))) (and (=> (not (= |len#0@@7| (LitInt 0))) (let ((|start'#0| (ite (= (+ |start#0@@33| 1) (|Seq#Length| |entries#0@@3|)) 0 (+ |start#0@@33| 1)))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (let ((|buf0#0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (let ((|idx1#0| (+ |idx#0@@11| 4))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf0#0| |numBlocks#0@@33| |idx1#0| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))) (let ((|buf1#0@@3| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#0| |numBlocks#0@@33| |idx1#0| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (let ((|idx2#0| (+ |idx1#0| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf1#0@@3| |numBlocks#0@@33| |idx2#0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (let ((|buf2#0@@1| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#0@@3| |numBlocks#0@@33| |idx2#0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (let ((|idx3#0| (+ |idx2#0| 4))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf2#0@@1| |numBlocks#0@@33| |idx3#0| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))) (let ((|buf3#0| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#0@@1| |numBlocks#0@@33| |idx3#0| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))) (let ((|idx4#0| (+ |idx3#0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf3#0| |numBlocks#0@@33| |idx4#0| |entries#0@@3| |start'#0| (- |len#0@@7| 1)))))))))))))))))) (= (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@41) |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| |entries#0@@3| |start#0@@33| |len#0@@7|) (ite (= |len#0@@7| (LitInt 0)) |buf#0@@33| (let ((|start'#0@@0| (ite (= (+ |start#0@@33| 1) (|Seq#Length| |entries#0@@3|)) 0 (+ |start#0@@33| 1)))) (let ((|buf0#0@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (let ((|idx1#0@@0| (+ |idx#0@@11| 4))) (let ((|buf1#0@@4| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#0@@0| |numBlocks#0@@33| |idx1#0@@0| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (let ((|idx2#0@@0| (+ |idx1#0@@0| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (let ((|buf2#0@@2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#0@@4| |numBlocks#0@@33| |idx2#0@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (let ((|idx3#0@@0| (+ |idx2#0@@0| 4))) (let ((|buf3#0@@0| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#0@@2| |numBlocks#0@@33| |idx3#0@@0| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|)))))) (let ((|idx4#0@@0| (+ |idx3#0@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@3| |start#0@@33|))))))) (JournalistMarshallingModel.__default.writeJournalEntries $ly@@41 |buf3#0@@0| |numBlocks#0@@33| |idx4#0@@0| |entries#0@@3| |start'#0@@0| (- |len#0@@7| 1))))))))))))))) :qid |JournalistMarshallingModelidfy.359:22| :skolemid |1499| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@41) |buf#0@@33| |numBlocks#0@@33| |idx#0@@11| |entries#0@@3| |start#0@@33| |len#0@@7|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@42 T@U) (|buf#0@@34| T@U) (|numBlocks#0@@34| Int) (|idx#0@@12| Int) (|entries#0@@4| T@U) (|start#0@@34| Int) (|len#0@@8| Int) ) (!  (=> (and (and (and (= (type $ly@@42) LayerTypeType) (= (type |buf#0@@34|) (SeqType BoxType))) (= (type |entries#0@@4|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| |entries#0@@4| |start#0@@34| (LitInt |len#0@@8|)) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and (and ($Is |buf#0@@34| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@34|) (< |numBlocks#0@@34| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@12|) (< |idx#0@@12| 18446744073709551616))) ($Is |entries#0@@4| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |start#0@@34|) (< |start#0@@34| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@8|) (< |len#0@@8| 18446744073709551616))) (and (and (and (and (and (= (|Seq#Length| |buf#0@@34|) (Mul (LitInt 4096) |numBlocks#0@@34|)) (<= |numBlocks#0@@34| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |start#0@@34|) (< |start#0@@34| (|Seq#Length| |entries#0@@4|)))) (and (<= (LitInt 0) (LitInt |len#0@@8|)) (<= (LitInt |len#0@@8|) (|Seq#Length| |entries#0@@4|)))) (< (|Seq#Length| |entries#0@@4|) 1152921504606846975)) (<= (+ |idx#0@@12| (JournalRanges.__default.SumJournalEntries ($LS $LZ) (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@4| |start#0@@34| (LitInt |len#0@@8|)))) (Mul (LitInt 4064) |numBlocks#0@@34|))))))) (and (=> (not (= (LitInt |len#0@@8|) (LitInt 0))) (let ((|start'#1| (ite (= (+ |start#0@@34| 1) (|Seq#Length| |entries#0@@4|)) 0 (+ |start#0@@34| 1)))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (let ((|buf0#1| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (let ((|idx1#1| (+ |idx#0@@12| 4))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf0#1| |numBlocks#0@@34| |idx1#1| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))) (let ((|buf1#1@@3| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#1| |numBlocks#0@@34| |idx1#1| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (let ((|idx2#1| (+ |idx1#1| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf1#1@@3| |numBlocks#0@@34| |idx2#1| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (let ((|buf2#1@@1| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#1@@3| |numBlocks#0@@34| |idx2#1| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (let ((|idx3#1| (+ |idx2#1| 4))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf2#1@@1| |numBlocks#0@@34| |idx3#1| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))) (let ((|buf3#1| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#1@@1| |numBlocks#0@@34| |idx3#1| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))) (let ((|idx4#1| (+ |idx3#1| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf3#1| |numBlocks#0@@34| |idx4#1| |entries#0@@4| |start'#1| (LitInt (- |len#0@@8| 1))))))))))))))))))) (= (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@42) |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| |entries#0@@4| |start#0@@34| (LitInt |len#0@@8|)) (ite (= (LitInt |len#0@@8|) (LitInt 0)) |buf#0@@34| (let ((|start'#1@@0| (ite (= (+ |start#0@@34| 1) (|Seq#Length| |entries#0@@4|)) 0 (+ |start#0@@34| 1)))) (let ((|buf0#1@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (let ((|idx1#1@@0| (+ |idx#0@@12| 4))) (let ((|buf1#1@@4| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#1@@0| |numBlocks#0@@34| |idx1#1@@0| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (let ((|idx2#1@@0| (+ |idx1#1@@0| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (let ((|buf2#1@@2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#1@@4| |numBlocks#0@@34| |idx2#1@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (let ((|idx3#1@@0| (+ |idx2#1@@0| 4))) (let ((|buf3#1@@0| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#1@@2| |numBlocks#0@@34| |idx3#1@@0| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|)))))) (let ((|idx4#1@@0| (+ |idx3#1@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@4| |start#0@@34|))))))) (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@42) |buf3#1@@0| |numBlocks#0@@34| |idx4#1@@0| |entries#0@@4| |start'#1@@0| (LitInt (- |len#0@@8| 1)))))))))))))))) :qid |JournalistMarshallingModelidfy.359:22| :weight 3 :skolemid |1500| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@42) |buf#0@@34| |numBlocks#0@@34| |idx#0@@12| |entries#0@@4| |start#0@@34| (LitInt |len#0@@8|))) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@43 T@U) (|buf#0@@35| T@U) (|numBlocks#0@@35| Int) (|idx#0@@13| Int) (|entries#0@@5| T@U) (|start#0@@35| Int) (|len#0@@9| Int) ) (!  (=> (and (and (and (= (type $ly@@43) LayerTypeType) (= (type |buf#0@@35|) (SeqType BoxType))) (= (type |entries#0@@5|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (Lit |entries#0@@5|) (LitInt |start#0@@35|) (LitInt |len#0@@9|)) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and (and ($Is |buf#0@@35| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@35|) (< |numBlocks#0@@35| 18446744073709551616))) (and (<= (LitInt 0) |idx#0@@13|) (< |idx#0@@13| 18446744073709551616))) ($Is |entries#0@@5| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |start#0@@35|) (< |start#0@@35| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@9|) (< |len#0@@9| 18446744073709551616))) (and (and (and (and (and (= (|Seq#Length| (Lit |buf#0@@35|)) (LitInt (Mul (LitInt 4096) (LitInt |numBlocks#0@@35|)))) (<= (LitInt |numBlocks#0@@35|) (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (LitInt |start#0@@35|)) (< |start#0@@35| (|Seq#Length| (Lit |entries#0@@5|))))) (and (<= (LitInt 0) (LitInt |len#0@@9|)) (<= (LitInt |len#0@@9|) (|Seq#Length| (Lit |entries#0@@5|))))) (< (|Seq#Length| (Lit |entries#0@@5|)) 1152921504606846975)) (<= (+ |idx#0@@13| (JournalRanges.__default.SumJournalEntries ($LS $LZ) (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice (Lit |entries#0@@5|) (LitInt |start#0@@35|) (LitInt |len#0@@9|)))) (LitInt (Mul (LitInt 4064) (LitInt |numBlocks#0@@35|))))))))) (and (=> (not (= (LitInt |len#0@@9|) (LitInt 0))) (let ((|start'#2| (ite (= (LitInt (+ |start#0@@35| 1)) (|Seq#Length| (Lit |entries#0@@5|))) 0 (+ |start#0@@35| 1)))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (let ((|buf0#2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (let ((|idx1#2| (LitInt (+ |idx#0@@13| 4)))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf0#2| (LitInt |numBlocks#0@@35|) |idx1#2| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))) (let ((|buf1#2| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#2| (LitInt |numBlocks#0@@35|) |idx1#2| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (let ((|idx2#2| (+ |idx1#2| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (|JournalistMarshallingModel.__default.writeIntOnto#canCall| |buf1#2| (LitInt |numBlocks#0@@35|) |idx2#2| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (let ((|buf2#2| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#2| (LitInt |numBlocks#0@@35|) |idx2#2| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (let ((|idx3#2| (+ |idx2#2| 4))) (and (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (|JournalistMarshallingModel.__default.writeOnto#canCall| |buf2#2| (LitInt |numBlocks#0@@35|) |idx3#2| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))) (let ((|buf3#2| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#2| (LitInt |numBlocks#0@@35|) |idx3#2| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (and (Journal.JournalEntry.JournalInsert_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))) (let ((|idx4#2| (+ |idx3#2| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf3#2| (LitInt |numBlocks#0@@35|) |idx4#2| (Lit |entries#0@@5|) |start'#2| (LitInt (- |len#0@@9| 1))))))))))))))))))) (= (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@43) (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (Lit |entries#0@@5|) (LitInt |start#0@@35|) (LitInt |len#0@@9|)) (ite (= (LitInt |len#0@@9|) (LitInt 0)) |buf#0@@35| (let ((|start'#2@@0| (ite (= (LitInt (+ |start#0@@35| 1)) (|Seq#Length| (Lit |entries#0@@5|))) 0 (+ |start#0@@35| 1)))) (let ((|buf0#2@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (let ((|idx1#2@@0| (LitInt (+ |idx#0@@13| 4)))) (let ((|buf1#2@@0| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf0#2@@0| (LitInt |numBlocks#0@@35|) |idx1#2@@0| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (let ((|idx2#2@@0| (+ |idx1#2@@0| (|Seq#Length| (Journal.JournalEntry.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (let ((|buf2#2@@0| (JournalistMarshallingModel.__default.writeIntOnto StartFuel_JournalistMarshallingModel._default.writeIntOnto |buf1#2@@0| (LitInt |numBlocks#0@@35|) |idx2#2@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (let ((|idx3#2@@0| (+ |idx2#2@@0| 4))) (let ((|buf3#2@@0| (JournalistMarshallingModel.__default.writeOnto StartFuel_JournalistMarshallingModel._default.writeOnto |buf2#2@@0| (LitInt |numBlocks#0@@35|) |idx3#2@@0| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|))))))) (let ((|idx4#2@@0| (+ |idx3#2@@0| (|Seq#Length| (Journal.JournalEntry.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@5|) (LitInt |start#0@@35|)))))))) (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@43) |buf3#2@@0| (LitInt |numBlocks#0@@35|) |idx4#2@@0| (Lit |entries#0@@5|) |start'#2@@0| (LitInt (- |len#0@@9| 1)))))))))))))))) :qid |JournalistMarshallingModelidfy.359:22| :weight 3 :skolemid |1501| :pattern ( (JournalistMarshallingModel.__default.writeJournalEntries ($LS $ly@@43) (Lit |buf#0@@35|) (LitInt |numBlocks#0@@35|) (LitInt |idx#0@@13|) (Lit |entries#0@@5|) (LitInt |start#0@@35|) (LitInt |len#0@@9|))) ))))
(assert (forall ((arg0@@434 T@U) (arg1@@182 T@U) (arg2@@116 Int) (arg3@@81 Int) ) (! (= (type (JournalistMarshallingModel.__default.fillInChecksums arg0@@434 arg1@@182 arg2@@116 arg3@@81)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.fillInChecksums| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums arg0@@434 arg1@@182 arg2@@116 arg3@@81)) )))
(assert (forall (($ly@@44 T@U) (|buf#0@@36| T@U) (|numBlocks#0@@36| Int) (|i#0@@11| Int) ) (!  (=> (and (= (type $ly@@44) LayerTypeType) (= (type |buf#0@@36|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@44) |buf#0@@36| |numBlocks#0@@36| |i#0@@11|) (JournalistMarshallingModel.__default.fillInChecksums $ly@@44 |buf#0@@36| |numBlocks#0@@36| |i#0@@11|))) :qid |JournalistMarshallingModelidfy.388:22| :skolemid |1510| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@44) |buf#0@@36| |numBlocks#0@@36| |i#0@@11|)) )))
(assert (forall (($ly@@45 T@U) (|buf#0@@37| T@U) (|numBlocks#0@@37| Int) (|i#0@@12| Int) ) (!  (=> (and (= (type $ly@@45) LayerTypeType) (= (type |buf#0@@37|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.fillInChecksums $ly@@45 |buf#0@@37| |numBlocks#0@@37| |i#0@@12|) (JournalistMarshallingModel.__default.fillInChecksums $LZ |buf#0@@37| |numBlocks#0@@37| |i#0@@12|))) :qid |JournalistMarshallingModelidfy.388:22| :skolemid |1511| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums (AsFuelBottom $ly@@45) |buf#0@@37| |numBlocks#0@@37| |i#0@@12|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@46 T@U) (|buf#0@@38| T@U) (|numBlocks#0@@38| Int) (|i#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@46) LayerTypeType) (= (type |buf#0@@38|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf#0@@38| |numBlocks#0@@38| |i#0@@13|) (and (not (= 28 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@38| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@38|) (< |numBlocks#0@@38| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| 18446744073709551616))) (and (and (= (|Seq#Length| |buf#0@@38|) (Mul |numBlocks#0@@38| (LitInt 4096))) (<= |numBlocks#0@@38| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |i#0@@13|) (<= |i#0@@13| |numBlocks#0@@38|))))))) (and (= (|Seq#Length| (JournalistMarshallingModel.__default.fillInChecksums $ly@@46 |buf#0@@38| |numBlocks#0@@38| |i#0@@13|)) (|Seq#Length| |buf#0@@38|)) ($Is (JournalistMarshallingModel.__default.fillInChecksums $ly@@46 |buf#0@@38| |numBlocks#0@@38| |i#0@@13|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.388:22| :skolemid |1512| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums $ly@@46 |buf#0@@38| |numBlocks#0@@38| |i#0@@13|)) ))))
(assert (forall (($ly@@47 T@U) (|buf#0@@39| T@U) (|numBlocks#0@@39| Int) (|i#0@@14| Int) ) (!  (=> (and (= (type $ly@@47) LayerTypeType) (= (type |buf#0@@39|) (SeqType BoxType))) (=> (and (and ($Is |buf#0@@39| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@39|) (< |numBlocks#0@@39| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@14|) (< |i#0@@14| 18446744073709551616))) (= (|JournalistMarshallingModel.__default.fillInChecksums#requires| $ly@@47 |buf#0@@39| |numBlocks#0@@39| |i#0@@14|)  (and (and (= (|Seq#Length| |buf#0@@39|) (Mul |numBlocks#0@@39| (LitInt 4096))) (<= |numBlocks#0@@39| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |i#0@@14|) (<= |i#0@@14| |numBlocks#0@@39|)))))) :qid |JournalistMarshallingModelidfy.388:22| :skolemid |1513| :pattern ( (|JournalistMarshallingModel.__default.fillInChecksums#requires| $ly@@47 |buf#0@@39| |numBlocks#0@@39| |i#0@@14|)) )))
(assert (forall ((arg0@@435 T@U) ) (! (= (type (CRC32__C.__default.crc32__c__padded arg0@@435)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.crc32__c__padded| :pattern ( (CRC32__C.__default.crc32__c__padded arg0@@435)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@48 T@U) (|buf#0@@40| T@U) (|numBlocks#0@@40| Int) (|i#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@48) LayerTypeType) (= (type |buf#0@@40|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf#0@@40| |numBlocks#0@@40| |i#0@@15|) (and (not (= 28 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@40| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@40|) (< |numBlocks#0@@40| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@15|) (< |i#0@@15| 18446744073709551616))) (and (and (= (|Seq#Length| |buf#0@@40|) (Mul |numBlocks#0@@40| (LitInt 4096))) (<= |numBlocks#0@@40| (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) |i#0@@15|) (<= |i#0@@15| |numBlocks#0@@40|))))))) (and (=> (not (= |i#0@@15| |numBlocks#0@@40|)) (and (and (|CRC32__C.__default.crc32__c__padded#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@40| (+ (Mul (LitInt 4096) |i#0@@15|) 4096)) (+ (Mul (LitInt 4096) |i#0@@15|) 32))) (|JournalistMarshallingModel.__default.splice#canCall| |buf#0@@40| (Mul (LitInt 4096) |i#0@@15|) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@40| (+ (Mul (LitInt 4096) |i#0@@15|) 4096)) (+ (Mul (LitInt 4096) |i#0@@15|) 32))))) (let ((|buf1#0@@5| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@40| (Mul (LitInt 4096) |i#0@@15|) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@40| (+ (Mul (LitInt 4096) |i#0@@15|) 4096)) (+ (Mul (LitInt 4096) |i#0@@15|) 32)))))) (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf1#0@@5| |numBlocks#0@@40| (+ |i#0@@15| 1))))) (= (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@48) |buf#0@@40| |numBlocks#0@@40| |i#0@@15|) (ite (= |i#0@@15| |numBlocks#0@@40|) |buf#0@@40| (let ((|buf1#0@@6| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@40| (Mul (LitInt 4096) |i#0@@15|) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@40| (+ (Mul (LitInt 4096) |i#0@@15|) 4096)) (+ (Mul (LitInt 4096) |i#0@@15|) 32)))))) (JournalistMarshallingModel.__default.fillInChecksums $ly@@48 |buf1#0@@6| |numBlocks#0@@40| (+ |i#0@@15| 1))))))) :qid |JournalistMarshallingModelidfy.388:22| :skolemid |1514| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@48) |buf#0@@40| |numBlocks#0@@40| |i#0@@15|)) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@49 T@U) (|buf#0@@41| T@U) (|numBlocks#0@@41| Int) (|i#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@49) LayerTypeType) (= (type |buf#0@@41|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf#0@@41| (LitInt |numBlocks#0@@41|) (LitInt |i#0@@16|)) (and (not (= 28 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@41| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@41|) (< |numBlocks#0@@41| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@16|) (< |i#0@@16| 18446744073709551616))) (and (and (= (|Seq#Length| |buf#0@@41|) (LitInt (Mul (LitInt |numBlocks#0@@41|) (LitInt 4096)))) (<= (LitInt |numBlocks#0@@41|) (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (LitInt |i#0@@16|)) (<= (LitInt |i#0@@16|) (LitInt |numBlocks#0@@41|)))))))) (and (=> (not (= (LitInt |i#0@@16|) (LitInt |numBlocks#0@@41|))) (and (and (|CRC32__C.__default.crc32__c__padded#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@41| (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 32)))) (|JournalistMarshallingModel.__default.splice#canCall| |buf#0@@41| (LitInt (Mul (LitInt 4096) (LitInt |i#0@@16|))) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@41| (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 32)))))) (let ((|buf1#1@@5| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@41| (LitInt (Mul (LitInt 4096) (LitInt |i#0@@16|))) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@41| (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 32))))))) (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf1#1@@5| (LitInt |numBlocks#0@@41|) (LitInt (+ |i#0@@16| 1)))))) (= (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@49) |buf#0@@41| (LitInt |numBlocks#0@@41|) (LitInt |i#0@@16|)) (ite (= (LitInt |i#0@@16|) (LitInt |numBlocks#0@@41|)) |buf#0@@41| (let ((|buf1#1@@6| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice |buf#0@@41| (LitInt (Mul (LitInt 4096) (LitInt |i#0@@16|))) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@41| (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@16|)) 32))))))) (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@49) |buf1#1@@6| (LitInt |numBlocks#0@@41|) (LitInt (+ |i#0@@16| 1)))))))) :qid |JournalistMarshallingModelidfy.388:22| :weight 3 :skolemid |1515| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@49) |buf#0@@41| (LitInt |numBlocks#0@@41|) (LitInt |i#0@@16|))) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@50 T@U) (|buf#0@@42| T@U) (|numBlocks#0@@42| Int) (|i#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@50) LayerTypeType) (= (type |buf#0@@42|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.fillInChecksums#canCall| (Lit |buf#0@@42|) (LitInt |numBlocks#0@@42|) (LitInt |i#0@@17|)) (and (not (= 28 $FunctionContextHeight)) (and (and (and ($Is |buf#0@@42| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |numBlocks#0@@42|) (< |numBlocks#0@@42| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@17|) (< |i#0@@17| 18446744073709551616))) (and (and (= (|Seq#Length| (Lit |buf#0@@42|)) (LitInt (Mul (LitInt |numBlocks#0@@42|) (LitInt 4096)))) (<= (LitInt |numBlocks#0@@42|) (LitInt DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (LitInt |i#0@@17|)) (<= (LitInt |i#0@@17|) (LitInt |numBlocks#0@@42|)))))))) (and (=> (not (= (LitInt |i#0@@17|) (LitInt |numBlocks#0@@42|))) (and (and (|CRC32__C.__default.crc32__c__padded#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@42|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 32))))) (|JournalistMarshallingModel.__default.splice#canCall| (Lit |buf#0@@42|) (LitInt (Mul (LitInt 4096) (LitInt |i#0@@17|))) (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@42|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 32))))))) (let ((|buf1#2@@1| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice (Lit |buf#0@@42|) (LitInt (Mul (LitInt 4096) (LitInt |i#0@@17|))) (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@42|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 32)))))))) (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf1#2@@1| (LitInt |numBlocks#0@@42|) (LitInt (+ |i#0@@17| 1)))))) (= (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@50) (Lit |buf#0@@42|) (LitInt |numBlocks#0@@42|) (LitInt |i#0@@17|)) (ite (= (LitInt |i#0@@17|) (LitInt |numBlocks#0@@42|)) |buf#0@@42| (let ((|buf1#2@@2| (JournalistMarshallingModel.__default.splice StartFuel_JournalistMarshallingModel._default.splice (Lit |buf#0@@42|) (LitInt (Mul (LitInt 4096) (LitInt |i#0@@17|))) (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@42|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@17|)) 32)))))))) (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@50) |buf1#2@@2| (LitInt |numBlocks#0@@42|) (LitInt (+ |i#0@@17| 1)))))))) :qid |JournalistMarshallingModelidfy.388:22| :weight 3 :skolemid |1516| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums ($LS $ly@@50) (Lit |buf#0@@42|) (LitInt |numBlocks#0@@42|) (LitInt |i#0@@17|))) ))))
(assert (forall (($ly@@51 T@U) (|buf#0@@43| T@U) (|header#0| T@U) ) (!  (=> (and (and (= (type $ly@@51) LayerTypeType) (= (type |buf#0@@43|) (SeqType BoxType))) (= (type |header#0|) DatatypeTypeType)) (= (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@51) |buf#0@@43| |header#0|) (JournalistMarshallingModel.__default.hasHeader $ly@@51 |buf#0@@43| |header#0|))) :qid |JournalistMarshallingModelidfy.403:23| :skolemid |1521| :pattern ( (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@51) |buf#0@@43| |header#0|)) )))
(assert (forall (($ly@@52 T@U) (|buf#0@@44| T@U) (|header#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@52) LayerTypeType) (= (type |buf#0@@44|) (SeqType BoxType))) (= (type |header#0@@0|) DatatypeTypeType)) (= (JournalistMarshallingModel.__default.hasHeader $ly@@52 |buf#0@@44| |header#0@@0|) (JournalistMarshallingModel.__default.hasHeader $LZ |buf#0@@44| |header#0@@0|))) :qid |JournalistMarshallingModelidfy.403:23| :skolemid |1522| :pattern ( (JournalistMarshallingModel.__default.hasHeader (AsFuelBottom $ly@@52) |buf#0@@44| |header#0@@0|)) )))
(assert (= (type Tclass.JournalRanges.Header) TyType))
(assert (= (Tag Tclass.JournalRanges.Header) Tagclass.JournalRanges.Header))
(assert (= (TagFamily Tclass.JournalRanges.Header) tytagFamily$Header))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.JournalRanges.Header)) (and (= ($Box ($Unbox DatatypeTypeType bx@@129)) bx@@129) ($Is ($Unbox DatatypeTypeType bx@@129) Tclass.JournalRanges.Header))) :qid |unknown.0:0| :skolemid |1523| :pattern ( ($IsBox bx@@129 Tclass.JournalRanges.Header)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@53 T@U) (|buf#0@@45| T@U) (|header#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@53) LayerTypeType) (= (type |buf#0@@45|) (SeqType BoxType))) (= (type |header#0@@1|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasHeader#canCall| |buf#0@@45| |header#0@@1|) (and (not (= 30 $FunctionContextHeight)) (and ($Is |buf#0@@45| (TSeq Tclass.NativeTypes.byte)) ($Is |header#0@@1| Tclass.JournalRanges.Header))))) true) :qid |JournalistMarshallingModelidfy.403:23| :skolemid |1524| :pattern ( (JournalistMarshallingModel.__default.hasHeader $ly@@53 |buf#0@@45| |header#0@@1|)) ))))
(assert (forall (($ly@@54 T@U) (|buf#0@@46| T@U) (|header#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@54) LayerTypeType) (= (type |buf#0@@46|) (SeqType BoxType))) (= (type |header#0@@2|) DatatypeTypeType)) (and ($Is |buf#0@@46| (TSeq Tclass.NativeTypes.byte)) ($Is |header#0@@2| Tclass.JournalRanges.Header))) (= (|JournalistMarshallingModel.__default.hasHeader#requires| $ly@@54 |buf#0@@46| |header#0@@2|) true)) :qid |JournalistMarshallingModelidfy.403:23| :skolemid |1525| :pattern ( (|JournalistMarshallingModel.__default.hasHeader#requires| $ly@@54 |buf#0@@46| |header#0@@2|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@55 T@U) (|buf#0@@47| T@U) (|header#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@55) LayerTypeType) (= (type |buf#0@@47|) (SeqType BoxType))) (= (type |header#0@@3|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasHeader#canCall| |buf#0@@47| |header#0@@3|) (and (not (= 30 $FunctionContextHeight)) (and ($Is |buf#0@@47| (TSeq Tclass.NativeTypes.byte)) ($Is |header#0@@3| Tclass.JournalRanges.Header))))) (and (=> (>= (|Seq#Length| |buf#0@@47|) (LitInt 8)) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@47| (LitInt 4)) (LitInt 0))) (JournalRanges.Header.Header_q |header#0@@3|)) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@47| (LitInt 4)) (LitInt 0))) (JournalRanges.Header.nentries |header#0@@3|)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@47| (LitInt 8)) (LitInt 4))) (JournalRanges.Header.Header_q |header#0@@3|))))) (= (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@55) |buf#0@@47| |header#0@@3|)  (and (and (>= (|Seq#Length| |buf#0@@47|) (LitInt 8)) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@47| (LitInt 4)) (LitInt 0))) (JournalRanges.Header.nentries |header#0@@3|))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@47| (LitInt 8)) (LitInt 4))) (JournalRanges.Header.nblocks |header#0@@3|)))))) :qid |JournalistMarshallingModelidfy.403:23| :skolemid |1526| :pattern ( (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@55) |buf#0@@47| |header#0@@3|)) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall (($ly@@56 T@U) (|buf#0@@48| T@U) (|header#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@56) LayerTypeType) (= (type |buf#0@@48|) (SeqType BoxType))) (= (type |header#0@@4|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasHeader#canCall| (Lit |buf#0@@48|) (Lit |header#0@@4|)) (and (not (= 30 $FunctionContextHeight)) (and ($Is |buf#0@@48| (TSeq Tclass.NativeTypes.byte)) ($Is |header#0@@4| Tclass.JournalRanges.Header))))) (and (=> (>= (|Seq#Length| (Lit |buf#0@@48|)) (LitInt 8)) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@48|) (LitInt 4)) (LitInt 0)))) (JournalRanges.Header.Header_q (Lit |header#0@@4|))) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@48|) (LitInt 4)) (LitInt 0)))) (LitInt (JournalRanges.Header.nentries (Lit |header#0@@4|)))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@48|) (LitInt 8)) (LitInt 4)))) (JournalRanges.Header.Header_q (Lit |header#0@@4|)))))) (= (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@56) (Lit |buf#0@@48|) (Lit |header#0@@4|))  (and (and (>= (|Seq#Length| (Lit |buf#0@@48|)) (LitInt 8)) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@48|) (LitInt 4)) (LitInt 0)))) (LitInt (JournalRanges.Header.nentries (Lit |header#0@@4|))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@48|) (LitInt 8)) (LitInt 4)))) (LitInt (JournalRanges.Header.nblocks (Lit |header#0@@4|)))))))) :qid |JournalistMarshallingModelidfy.403:23| :weight 3 :skolemid |1527| :pattern ( (JournalistMarshallingModel.__default.hasHeader ($LS $ly@@56) (Lit |buf#0@@48|) (Lit |header#0@@4|))) ))))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((|buf#0@@49| T@U) (|entry#0| T@U) (|start#0@@36| Int) ) (!  (=> (and (and (= (type |buf#0@@49|) (SeqType BoxType)) (= (type |entry#0|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasEntryAt#canCall| |buf#0@@49| |entry#0| |start#0@@36|) (and (not (= 31 $FunctionContextHeight)) (and ($Is |buf#0@@49| (TSeq Tclass.NativeTypes.byte)) ($Is |entry#0| Tclass.Journal.JournalEntry))))) true) :qid |JournalistMarshallingModelidfy.410:24| :skolemid |1530| :pattern ( (JournalistMarshallingModel.__default.hasEntryAt |buf#0@@49| |entry#0| |start#0@@36|)) ))))
(assert (forall ((|buf#0@@50| T@U) (|entry#0@@0| T@U) (|start#0@@37| Int) ) (!  (=> (and (and (= (type |buf#0@@50|) (SeqType BoxType)) (= (type |entry#0@@0|) DatatypeTypeType)) (and ($Is |buf#0@@50| (TSeq Tclass.NativeTypes.byte)) ($Is |entry#0@@0| Tclass.Journal.JournalEntry))) (= (|JournalistMarshallingModel.__default.hasEntryAt#requires| |buf#0@@50| |entry#0@@0| |start#0@@37|) true)) :qid |JournalistMarshallingModelidfy.410:24| :skolemid |1531| :pattern ( (|JournalistMarshallingModel.__default.hasEntryAt#requires| |buf#0@@50| |entry#0@@0| |start#0@@37|)) )))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((|buf#0@@51| T@U) (|entry#0@@1| T@U) (|start#0@@38| Int) ) (!  (=> (and (and (= (type |buf#0@@51|) (SeqType BoxType)) (= (type |entry#0@@1|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasEntryAt#canCall| |buf#0@@51| |entry#0@@1| |start#0@@38|) (and (not (= 31 $FunctionContextHeight)) (and ($Is |buf#0@@51| (TSeq Tclass.NativeTypes.byte)) ($Is |entry#0@@1| Tclass.Journal.JournalEntry))))) (and (let ((|idx0#0| |start#0@@38|)) (let ((|idx1#0@@1| (+ |idx0#0| 4))) (and (Journal.JournalEntry.JournalInsert_q |entry#0@@1|) (let ((|idx2#0@@1| (+ |idx1#0@@1| (|Seq#Length| (Journal.JournalEntry.key |entry#0@@1|))))) (let ((|idx3#0@@1| (+ |idx2#0@@1| 4))) (and (Journal.JournalEntry.JournalInsert_q |entry#0@@1|) (let ((|idx4#0@@1| (+ |idx3#0@@1| (|Seq#Length| (Journal.JournalEntry.value |entry#0@@1|))))) (=> (<= (LitInt 0) |idx0#0|) (=> (<= |idx4#0@@1| (|Seq#Length| |buf#0@@51|)) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx1#0@@1|) |idx0#0|)) (Journal.JournalEntry.JournalInsert_q |entry#0@@1|)) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx1#0@@1|) |idx0#0|)) (|Seq#Length| (Journal.JournalEntry.key |entry#0@@1|))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx3#0@@1|) |idx2#0@@1|)) (Journal.JournalEntry.JournalInsert_q |entry#0@@1|)) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx3#0@@1|) |idx2#0@@1|)) (|Seq#Length| (Journal.JournalEntry.value |entry#0@@1|))) (and (Journal.JournalEntry.JournalInsert_q |entry#0@@1|) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx2#0@@1|) |idx1#0@@1|) (Journal.JournalEntry.key |entry#0@@1|)) (Journal.JournalEntry.JournalInsert_q |entry#0@@1|)))))))))))))))) (= (JournalistMarshallingModel.__default.hasEntryAt |buf#0@@51| |entry#0@@1| |start#0@@38|) (let ((|idx0#0@@0| |start#0@@38|)) (let ((|idx1#0@@2| (+ |idx0#0@@0| 4))) (let ((|idx2#0@@2| (+ |idx1#0@@2| (|Seq#Length| (Journal.JournalEntry.key |entry#0@@1|))))) (let ((|idx3#0@@2| (+ |idx2#0@@2| 4))) (let ((|idx4#0@@2| (+ |idx3#0@@2| (|Seq#Length| (Journal.JournalEntry.value |entry#0@@1|))))) (and (and (and (and (and (<= (LitInt 0) |idx0#0@@0|) (<= |idx4#0@@2| (|Seq#Length| |buf#0@@51|))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx1#0@@2|) |idx0#0@@0|)) (|Seq#Length| (Journal.JournalEntry.key |entry#0@@1|)))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx3#0@@2|) |idx2#0@@2|)) (|Seq#Length| (Journal.JournalEntry.value |entry#0@@1|)))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx2#0@@2|) |idx1#0@@2|) (Journal.JournalEntry.key |entry#0@@1|))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |buf#0@@51| |idx4#0@@2|) |idx3#0@@2|) (Journal.JournalEntry.value |entry#0@@1|))))))))))) :qid |JournalistMarshallingModelidfy.410:24| :skolemid |1532| :pattern ( (JournalistMarshallingModel.__default.hasEntryAt |buf#0@@51| |entry#0@@1| |start#0@@38|)) ))))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((|buf#0@@52| T@U) (|entry#0@@2| T@U) (|start#0@@39| Int) ) (!  (=> (and (and (= (type |buf#0@@52|) (SeqType BoxType)) (= (type |entry#0@@2|) DatatypeTypeType)) (or (|JournalistMarshallingModel.__default.hasEntryAt#canCall| (Lit |buf#0@@52|) (Lit |entry#0@@2|) (LitInt |start#0@@39|)) (and (not (= 31 $FunctionContextHeight)) (and ($Is |buf#0@@52| (TSeq Tclass.NativeTypes.byte)) ($Is |entry#0@@2| Tclass.Journal.JournalEntry))))) (and (let ((|idx0#1| (LitInt |start#0@@39|))) (let ((|idx1#1@@1| (+ |idx0#1| 4))) (and (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|)) (let ((|idx2#1@@1| (+ |idx1#1@@1| (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |entry#0@@2|))))))) (let ((|idx3#1@@1| (+ |idx2#1@@1| 4))) (and (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|)) (let ((|idx4#1@@1| (+ |idx3#1@@1| (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |entry#0@@2|))))))) (=> (<= (LitInt 0) |idx0#1|) (=> (<= |idx4#1@@1| (|Seq#Length| (Lit |buf#0@@52|))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx1#1@@1|) |idx0#1|)) (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|))) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx1#1@@1|) |idx0#1|)) (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |entry#0@@2|))))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx3#1@@1|) |idx2#1@@1|)) (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|))) (=> (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx3#1@@1|) |idx2#1@@1|)) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |entry#0@@2|))))) (and (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|)) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx2#1@@1|) |idx1#1@@1|) (Journal.JournalEntry.key (Lit |entry#0@@2|))) (Journal.JournalEntry.JournalInsert_q (Lit |entry#0@@2|))))))))))))))))) (= (JournalistMarshallingModel.__default.hasEntryAt (Lit |buf#0@@52|) (Lit |entry#0@@2|) (LitInt |start#0@@39|)) (let ((|idx0#1@@0| (LitInt |start#0@@39|))) (let ((|idx1#1@@2| (LitInt (+ |idx0#1@@0| 4)))) (let ((|idx2#1@@2| (+ |idx1#1@@2| (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |entry#0@@2|))))))) (let ((|idx3#1@@2| (+ |idx2#1@@2| 4))) (let ((|idx4#1@@2| (+ |idx3#1@@2| (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |entry#0@@2|))))))) (and (and (and (and (and (<= (LitInt 0) |idx0#1@@0|) (<= |idx4#1@@2| (|Seq#Length| (Lit |buf#0@@52|)))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx1#1@@2|) |idx0#1@@0|))) (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |entry#0@@2|)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx3#1@@2|) |idx2#1@@2|)) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |entry#0@@2|)))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx2#1@@2|) |idx1#1@@2|) (Journal.JournalEntry.key (Lit |entry#0@@2|)))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@52|) |idx4#1@@2|) |idx3#1@@2|) (Journal.JournalEntry.value (Lit |entry#0@@2|)))))))))))) :qid |JournalistMarshallingModelidfy.410:24| :weight 3 :skolemid |1533| :pattern ( (JournalistMarshallingModel.__default.hasEntryAt (Lit |buf#0@@52|) (Lit |entry#0@@2|) (LitInt |start#0@@39|))) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|buf#0@@53| T@U) (|entries#0@@6| T@U) (|i#0@@18| Int) ) (!  (=> (and (and (= (type |buf#0@@53|) (SeqType BoxType)) (= (type |entries#0@@6|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntry#canCall| |buf#0@@53| |entries#0@@6| |i#0@@18|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |buf#0@@53| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@6| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |i#0@@18|) (< |i#0@@18| (|Seq#Length| |entries#0@@6|))))))) true) :qid |JournalistMarshallingModelidfy.425:22| :skolemid |1536| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@53| |entries#0@@6| |i#0@@18|)) ))))
(assert (forall ((|buf#0@@54| T@U) (|entries#0@@7| T@U) (|i#0@@19| Int) ) (!  (=> (and (and (= (type |buf#0@@54|) (SeqType BoxType)) (= (type |entries#0@@7|) (SeqType BoxType))) (and ($Is |buf#0@@54| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@7| (TSeq Tclass.Journal.JournalEntry)))) (= (|JournalistMarshallingModel.__default.hasEntry#requires| |buf#0@@54| |entries#0@@7| |i#0@@19|)  (and (<= (LitInt 0) |i#0@@19|) (< |i#0@@19| (|Seq#Length| |entries#0@@7|))))) :qid |JournalistMarshallingModelidfy.425:22| :skolemid |1537| :pattern ( (|JournalistMarshallingModel.__default.hasEntry#requires| |buf#0@@54| |entries#0@@7| |i#0@@19|)) )))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|buf#0@@55| T@U) (|entries#0@@8| T@U) (|i#0@@20| Int) ) (!  (=> (and (and (= (type |buf#0@@55|) (SeqType BoxType)) (= (type |entries#0@@8|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntry#canCall| |buf#0@@55| |entries#0@@8| |i#0@@20|) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |buf#0@@55| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@8| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |i#0@@20|) (< |i#0@@20| (|Seq#Length| |entries#0@@8|))))))) (and (and (|JournalRanges.__default.SumJournalEntries#canCall| (|Seq#Take| |entries#0@@8| |i#0@@20|)) (|JournalistMarshallingModel.__default.hasEntryAt#canCall| |buf#0@@55| ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@8| |i#0@@20|)) (+ 8 (JournalRanges.__default.SumJournalEntries ($LS $LZ) (|Seq#Take| |entries#0@@8| |i#0@@20|))))) (= (JournalistMarshallingModel.__default.hasEntry |buf#0@@55| |entries#0@@8| |i#0@@20|) (JournalistMarshallingModel.__default.hasEntryAt |buf#0@@55| ($Unbox DatatypeTypeType (|Seq#Index| |entries#0@@8| |i#0@@20|)) (+ 8 (JournalRanges.__default.SumJournalEntries ($LS $LZ) (|Seq#Take| |entries#0@@8| |i#0@@20|))))))) :qid |JournalistMarshallingModelidfy.425:22| :skolemid |1538| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@55| |entries#0@@8| |i#0@@20|)) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((|buf#0@@56| T@U) (|entries#0@@9| T@U) (|i#0@@21| Int) ) (!  (=> (and (and (= (type |buf#0@@56|) (SeqType BoxType)) (= (type |entries#0@@9|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntry#canCall| (Lit |buf#0@@56|) (Lit |entries#0@@9|) (LitInt |i#0@@21|)) (and (not (= 32 $FunctionContextHeight)) (and (and ($Is |buf#0@@56| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@9| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) (LitInt |i#0@@21|)) (< |i#0@@21| (|Seq#Length| (Lit |entries#0@@9|)))))))) (and (and (|JournalRanges.__default.SumJournalEntries#canCall| (Lit (|Seq#Take| (Lit |entries#0@@9|) (LitInt |i#0@@21|)))) (|JournalistMarshallingModel.__default.hasEntryAt#canCall| (Lit |buf#0@@56|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@9|) (LitInt |i#0@@21|))) (LitInt (+ 8 (JournalRanges.__default.SumJournalEntries ($LS $LZ) (Lit (|Seq#Take| (Lit |entries#0@@9|) (LitInt |i#0@@21|)))))))) (= (JournalistMarshallingModel.__default.hasEntry (Lit |buf#0@@56|) (Lit |entries#0@@9|) (LitInt |i#0@@21|)) (JournalistMarshallingModel.__default.hasEntryAt (Lit |buf#0@@56|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |entries#0@@9|) (LitInt |i#0@@21|))) (LitInt (+ 8 (JournalRanges.__default.SumJournalEntries ($LS $LZ) (Lit (|Seq#Take| (Lit |entries#0@@9|) (LitInt |i#0@@21|)))))))))) :qid |JournalistMarshallingModelidfy.425:22| :weight 3 :skolemid |1539| :pattern ( (JournalistMarshallingModel.__default.hasEntry (Lit |buf#0@@56|) (Lit |entries#0@@9|) (LitInt |i#0@@21|))) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|buf#0@@57| T@U) (|entries#0@@10| T@U) (|j#0| Int) ) (!  (=> (and (and (= (type |buf#0@@57|) (SeqType BoxType)) (= (type |entries#0@@10|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntries#canCall| |buf#0@@57| |entries#0@@10| |j#0|) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |buf#0@@57| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@10| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |j#0|) (<= |j#0| (|Seq#Length| |entries#0@@10|))))))) true) :qid |JournalistMarshallingModelidfy.431:24| :skolemid |1542| :pattern ( (JournalistMarshallingModel.__default.hasEntries |buf#0@@57| |entries#0@@10| |j#0|)) ))))
(assert (forall ((|buf#0@@58| T@U) (|entries#0@@11| T@U) (|j#0@@0| Int) ) (!  (=> (and (and (= (type |buf#0@@58|) (SeqType BoxType)) (= (type |entries#0@@11|) (SeqType BoxType))) (and ($Is |buf#0@@58| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@11| (TSeq Tclass.Journal.JournalEntry)))) (= (|JournalistMarshallingModel.__default.hasEntries#requires| |buf#0@@58| |entries#0@@11| |j#0@@0|)  (and (<= (LitInt 0) |j#0@@0|) (<= |j#0@@0| (|Seq#Length| |entries#0@@11|))))) :qid |JournalistMarshallingModelidfy.431:24| :skolemid |1543| :pattern ( (|JournalistMarshallingModel.__default.hasEntries#requires| |buf#0@@58| |entries#0@@11| |j#0@@0|)) )))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|buf#0@@59| T@U) (|entries#0@@12| T@U) (|j#0@@1| Int) ) (!  (=> (and (and (= (type |buf#0@@59|) (SeqType BoxType)) (= (type |entries#0@@12|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntries#canCall| |buf#0@@59| |entries#0@@12| |j#0@@1|) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |buf#0@@59| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@12| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) |j#0@@1|) (<= |j#0@@1| (|Seq#Length| |entries#0@@12|))))))) (and (forall ((|i#0@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@22|) (< |i#0@@22| |j#0@@1|)) (|JournalistMarshallingModel.__default.hasEntry#canCall| |buf#0@@59| |entries#0@@12| |i#0@@22|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1545| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@59| |entries#0@@12| |i#0@@22|)) )) (= (JournalistMarshallingModel.__default.hasEntries |buf#0@@59| |entries#0@@12| |j#0@@1|) (forall ((|i#0@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| |j#0@@1|)) (JournalistMarshallingModel.__default.hasEntry |buf#0@@59| |entries#0@@12| |i#0@@23|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1544| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@59| |entries#0@@12| |i#0@@23|)) ))))) :qid |JournalistMarshallingModelidfy.431:24| :skolemid |1546| :pattern ( (JournalistMarshallingModel.__default.hasEntries |buf#0@@59| |entries#0@@12| |j#0@@1|)) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|buf#0@@60| T@U) (|entries#0@@13| T@U) (|j#0@@2| Int) ) (!  (=> (and (and (= (type |buf#0@@60|) (SeqType BoxType)) (= (type |entries#0@@13|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasEntries#canCall| (Lit |buf#0@@60|) (Lit |entries#0@@13|) (LitInt |j#0@@2|)) (and (not (= 33 $FunctionContextHeight)) (and (and ($Is |buf#0@@60| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@13| (TSeq Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) (LitInt |j#0@@2|)) (<= (LitInt |j#0@@2|) (|Seq#Length| (Lit |entries#0@@13|)))))))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| |j#0@@2|)) (|JournalistMarshallingModel.__default.hasEntry#canCall| (Lit |buf#0@@60|) (Lit |entries#0@@13|) |i#1|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1548| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@60| |entries#0@@13| |i#1|)) )) (= (JournalistMarshallingModel.__default.hasEntries (Lit |buf#0@@60|) (Lit |entries#0@@13|) (LitInt |j#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |j#0@@2|)) (JournalistMarshallingModel.__default.hasEntry (Lit |buf#0@@60|) (Lit |entries#0@@13|) |i#1@@0|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1547| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf#0@@60| |entries#0@@13| |i#1@@0|)) ))))) :qid |JournalistMarshallingModelidfy.431:24| :weight 3 :skolemid |1549| :pattern ( (JournalistMarshallingModel.__default.hasEntries (Lit |buf#0@@60|) (Lit |entries#0@@13|) (LitInt |j#0@@2|))) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((|buf#0@@61| T@U) (|numBlocks#0@@43| Int) (|entries#0@@14| T@U) ) (!  (=> (and (and (= (type |buf#0@@61|) (SeqType BoxType)) (= (type |entries#0@@14|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasStuff#canCall| |buf#0@@61| |numBlocks#0@@43| |entries#0@@14|) (and (not (= 34 $FunctionContextHeight)) (and ($Is |buf#0@@61| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@14| (TSeq Tclass.Journal.JournalEntry)))))) true) :qid |JournalistMarshallingModelidfy.437:22| :skolemid |1553| :pattern ( (JournalistMarshallingModel.__default.hasStuff |buf#0@@61| |numBlocks#0@@43| |entries#0@@14|)) ))))
(assert (forall ((|buf#0@@62| T@U) (|numBlocks#0@@44| Int) (|entries#0@@15| T@U) ) (!  (=> (and (and (= (type |buf#0@@62|) (SeqType BoxType)) (= (type |entries#0@@15|) (SeqType BoxType))) (and ($Is |buf#0@@62| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@15| (TSeq Tclass.Journal.JournalEntry)))) (= (|JournalistMarshallingModel.__default.hasStuff#requires| |buf#0@@62| |numBlocks#0@@44| |entries#0@@15|) true)) :qid |JournalistMarshallingModelidfy.437:22| :skolemid |1554| :pattern ( (|JournalistMarshallingModel.__default.hasStuff#requires| |buf#0@@62| |numBlocks#0@@44| |entries#0@@15|)) )))
(assert  (and (forall ((arg0@@436 Int) (arg1@@183 Int) ) (! (= (type (|#JournalRanges.Header.Header| arg0@@436 arg1@@183)) DatatypeTypeType) :qid |funType:#JournalRanges.Header.Header| :pattern ( (|#JournalRanges.Header.Header| arg0@@436 arg1@@183)) )) (= (type StartFuel_JournalistMarshallingModel._default.hasHeader) LayerTypeType)))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((|buf#0@@63| T@U) (|numBlocks#0@@45| Int) (|entries#0@@16| T@U) ) (!  (=> (and (and (= (type |buf#0@@63|) (SeqType BoxType)) (= (type |entries#0@@16|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasStuff#canCall| |buf#0@@63| |numBlocks#0@@45| |entries#0@@16|) (and (not (= 34 $FunctionContextHeight)) (and ($Is |buf#0@@63| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@16| (TSeq Tclass.Journal.JournalEntry)))))) (and (and (|JournalistMarshallingModel.__default.hasEntries#canCall| |buf#0@@63| |entries#0@@16| (|Seq#Length| |entries#0@@16|)) (=> (JournalistMarshallingModel.__default.hasEntries |buf#0@@63| |entries#0@@16| (|Seq#Length| |entries#0@@16|)) (|JournalistMarshallingModel.__default.hasHeader#canCall| |buf#0@@63| (|#JournalRanges.Header.Header| (|Seq#Length| |entries#0@@16|) |numBlocks#0@@45|)))) (= (JournalistMarshallingModel.__default.hasStuff |buf#0@@63| |numBlocks#0@@45| |entries#0@@16|)  (and (JournalistMarshallingModel.__default.hasEntries |buf#0@@63| |entries#0@@16| (|Seq#Length| |entries#0@@16|)) (JournalistMarshallingModel.__default.hasHeader StartFuel_JournalistMarshallingModel._default.hasHeader |buf#0@@63| (|#JournalRanges.Header.Header| (|Seq#Length| |entries#0@@16|) |numBlocks#0@@45|)))))) :qid |JournalistMarshallingModelidfy.437:22| :skolemid |1555| :pattern ( (JournalistMarshallingModel.__default.hasStuff |buf#0@@63| |numBlocks#0@@45| |entries#0@@16|)) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((|buf#0@@64| T@U) (|numBlocks#0@@46| Int) (|entries#0@@17| T@U) ) (!  (=> (and (and (= (type |buf#0@@64|) (SeqType BoxType)) (= (type |entries#0@@17|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.hasStuff#canCall| (Lit |buf#0@@64|) (LitInt |numBlocks#0@@46|) (Lit |entries#0@@17|)) (and (not (= 34 $FunctionContextHeight)) (and ($Is |buf#0@@64| (TSeq Tclass.NativeTypes.byte)) ($Is |entries#0@@17| (TSeq Tclass.Journal.JournalEntry)))))) (and (and (|JournalistMarshallingModel.__default.hasEntries#canCall| (Lit |buf#0@@64|) (Lit |entries#0@@17|) (|Seq#Length| (Lit |entries#0@@17|))) (=> (JournalistMarshallingModel.__default.hasEntries (Lit |buf#0@@64|) (Lit |entries#0@@17|) (|Seq#Length| (Lit |entries#0@@17|))) (|JournalistMarshallingModel.__default.hasHeader#canCall| (Lit |buf#0@@64|) (|#JournalRanges.Header.Header| (|Seq#Length| (Lit |entries#0@@17|)) (LitInt |numBlocks#0@@46|))))) (= (JournalistMarshallingModel.__default.hasStuff (Lit |buf#0@@64|) (LitInt |numBlocks#0@@46|) (Lit |entries#0@@17|))  (and (JournalistMarshallingModel.__default.hasEntries (Lit |buf#0@@64|) (Lit |entries#0@@17|) (|Seq#Length| (Lit |entries#0@@17|))) (JournalistMarshallingModel.__default.hasHeader StartFuel_JournalistMarshallingModel._default.hasHeader (Lit |buf#0@@64|) (|#JournalRanges.Header.Header| (|Seq#Length| (Lit |entries#0@@17|)) (LitInt |numBlocks#0@@46|))))))) :qid |JournalistMarshallingModelidfy.437:22| :weight 3 :skolemid |1556| :pattern ( (JournalistMarshallingModel.__default.hasStuff (Lit |buf#0@@64|) (LitInt |numBlocks#0@@46|) (Lit |entries#0@@17|))) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((|buf#0@@65| T@U) (|i#0@@24| Int) ) (!  (=> (and (= (type |buf#0@@65|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksumAt#canCall| |buf#0@@65| |i#0@@24|) (and (not (= 35 $FunctionContextHeight)) (and ($Is |buf#0@@65| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |i#0@@24|) (>= (|Seq#Length| |buf#0@@65|) (Mul (LitInt 4096) (+ |i#0@@24| 1)))))))) true) :qid |JournalistMarshallingModelidfy.444:27| :skolemid |1559| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@65| |i#0@@24|)) ))))
(assert (forall ((|buf#0@@66| T@U) (|i#0@@25| Int) ) (!  (=> (and (= (type |buf#0@@66|) (SeqType BoxType)) ($Is |buf#0@@66| (TSeq Tclass.NativeTypes.byte))) (= (|JournalistMarshallingModel.__default.hasChecksumAt#requires| |buf#0@@66| |i#0@@25|)  (and (<= (LitInt 0) |i#0@@25|) (>= (|Seq#Length| |buf#0@@66|) (Mul (LitInt 4096) (+ |i#0@@25| 1)))))) :qid |JournalistMarshallingModelidfy.444:27| :skolemid |1560| :pattern ( (|JournalistMarshallingModel.__default.hasChecksumAt#requires| |buf#0@@66| |i#0@@25|)) )))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((|buf#0@@67| T@U) (|i#0@@26| Int) ) (!  (=> (and (= (type |buf#0@@67|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksumAt#canCall| |buf#0@@67| |i#0@@26|) (and (not (= 35 $FunctionContextHeight)) (and ($Is |buf#0@@67| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |i#0@@26|) (>= (|Seq#Length| |buf#0@@67|) (Mul (LitInt 4096) (+ |i#0@@26| 1)))))))) (and (|CRC32__C.__default.crc32__c__padded#canCall| (|Seq#Drop| (|Seq#Take| |buf#0@@67| (+ (Mul (LitInt 4096) |i#0@@26|) 4096)) (+ (Mul (LitInt 4096) |i#0@@26|) 32))) (= (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@67| |i#0@@26|) (|Seq#Equal| (CRC32__C.__default.crc32__c__padded (|Seq#Drop| (|Seq#Take| |buf#0@@67| (+ (Mul (LitInt 4096) |i#0@@26|) 4096)) (+ (Mul (LitInt 4096) |i#0@@26|) 32))) (|Seq#Drop| (|Seq#Take| |buf#0@@67| (+ (Mul (LitInt 4096) |i#0@@26|) 32)) (Mul (LitInt 4096) |i#0@@26|)))))) :qid |JournalistMarshallingModelidfy.444:27| :skolemid |1561| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@67| |i#0@@26|)) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((|buf#0@@68| T@U) (|i#0@@27| Int) ) (!  (=> (and (= (type |buf#0@@68|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksumAt#canCall| (Lit |buf#0@@68|) (LitInt |i#0@@27|)) (and (not (= 35 $FunctionContextHeight)) (and ($Is |buf#0@@68| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) (LitInt |i#0@@27|)) (>= (|Seq#Length| (Lit |buf#0@@68|)) (LitInt (Mul (LitInt 4096) (LitInt (+ |i#0@@27| 1)))))))))) (and (|CRC32__C.__default.crc32__c__padded#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@68|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@27|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@27|)) 32))))) (= (JournalistMarshallingModel.__default.hasChecksumAt (Lit |buf#0@@68|) (LitInt |i#0@@27|)) (|Seq#Equal| (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@68|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@27|)) 4096))) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@27|)) 32))))) (|Seq#Drop| (|Seq#Take| (Lit |buf#0@@68|) (LitInt (+ (Mul (LitInt 4096) (LitInt |i#0@@27|)) 32))) (LitInt (Mul (LitInt 4096) (LitInt |i#0@@27|)))))))) :qid |JournalistMarshallingModelidfy.444:27| :weight 3 :skolemid |1562| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt (Lit |buf#0@@68|) (LitInt |i#0@@27|))) ))))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|buf#0@@69| T@U) (|numBlocks#0@@47| Int) ) (!  (=> (and (= (type |buf#0@@69|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksums#canCall| |buf#0@@69| |numBlocks#0@@47|) (and (not (= 36 $FunctionContextHeight)) (and ($Is |buf#0@@69| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |buf#0@@69|) (Mul |numBlocks#0@@47| (LitInt 4096))))))) true) :qid |JournalistMarshallingModelidfy.451:26| :skolemid |1564| :pattern ( (JournalistMarshallingModel.__default.hasChecksums |buf#0@@69| |numBlocks#0@@47|)) ))))
(assert (forall ((|buf#0@@70| T@U) (|numBlocks#0@@48| Int) ) (!  (=> (and (= (type |buf#0@@70|) (SeqType BoxType)) ($Is |buf#0@@70| (TSeq Tclass.NativeTypes.byte))) (= (|JournalistMarshallingModel.__default.hasChecksums#requires| |buf#0@@70| |numBlocks#0@@48|) (= (|Seq#Length| |buf#0@@70|) (Mul |numBlocks#0@@48| (LitInt 4096))))) :qid |JournalistMarshallingModelidfy.451:26| :skolemid |1565| :pattern ( (|JournalistMarshallingModel.__default.hasChecksums#requires| |buf#0@@70| |numBlocks#0@@48|)) )))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|buf#0@@71| T@U) (|numBlocks#0@@49| Int) ) (!  (=> (and (= (type |buf#0@@71|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksums#canCall| |buf#0@@71| |numBlocks#0@@49|) (and (not (= 36 $FunctionContextHeight)) (and ($Is |buf#0@@71| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |buf#0@@71|) (Mul |numBlocks#0@@49| (LitInt 4096))))))) (and (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| |numBlocks#0@@49|)) (|JournalistMarshallingModel.__default.hasChecksumAt#canCall| |buf#0@@71| |i#0@@28|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1567| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@71| |i#0@@28|)) )) (= (JournalistMarshallingModel.__default.hasChecksums |buf#0@@71| |numBlocks#0@@49|) (forall ((|i#0@@29| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| |numBlocks#0@@49|)) (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@71| |i#0@@29|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1566| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@71| |i#0@@29|)) ))))) :qid |JournalistMarshallingModelidfy.451:26| :skolemid |1568| :pattern ( (JournalistMarshallingModel.__default.hasChecksums |buf#0@@71| |numBlocks#0@@49|)) ))))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|buf#0@@72| T@U) (|numBlocks#0@@50| Int) ) (!  (=> (and (= (type |buf#0@@72|) (SeqType BoxType)) (or (|JournalistMarshallingModel.__default.hasChecksums#canCall| (Lit |buf#0@@72|) (LitInt |numBlocks#0@@50|)) (and (not (= 36 $FunctionContextHeight)) (and ($Is |buf#0@@72| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |buf#0@@72|)) (LitInt (Mul (LitInt |numBlocks#0@@50|) (LitInt 4096)))))))) (and (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| |numBlocks#0@@50|)) (|JournalistMarshallingModel.__default.hasChecksumAt#canCall| (Lit |buf#0@@72|) |i#1@@1|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1570| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@72| |i#1@@1|)) )) (= (JournalistMarshallingModel.__default.hasChecksums (Lit |buf#0@@72|) (LitInt |numBlocks#0@@50|)) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| |numBlocks#0@@50|)) (JournalistMarshallingModel.__default.hasChecksumAt (Lit |buf#0@@72|) |i#1@@2|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1569| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@72| |i#1@@2|)) ))))) :qid |JournalistMarshallingModelidfy.451:26| :weight 3 :skolemid |1571| :pattern ( (JournalistMarshallingModel.__default.hasChecksums (Lit |buf#0@@72|) (LitInt |numBlocks#0@@50|))) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|a#0@@5| Int) (|b#0@@1| Int) (|c#0@@3| Int) ) (!  (=> (or (|JournalistMarshallingModel.__default.add__mod#canCall| |a#0@@5| |b#0@@1| |c#0@@3|) (not (= 39 $FunctionContextHeight))) true) :qid |JournalistMarshallingModelidfy.457:20| :skolemid |1575| :pattern ( (JournalistMarshallingModel.__default.add__mod |a#0@@5| |b#0@@1| |c#0@@3|)) ))))
(assert (forall ((|a#0@@6| Int) (|b#0@@2| Int) (|c#0@@4| Int) ) (! (= (|JournalistMarshallingModel.__default.add__mod#requires| |a#0@@6| |b#0@@2| |c#0@@4|) true) :qid |JournalistMarshallingModelidfy.457:20| :skolemid |1576| :pattern ( (|JournalistMarshallingModel.__default.add__mod#requires| |a#0@@6| |b#0@@2| |c#0@@4|)) )))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|a#0@@7| Int) (|b#0@@3| Int) (|c#0@@5| Int) ) (!  (=> (or (|JournalistMarshallingModel.__default.add__mod#canCall| |a#0@@7| |b#0@@3| |c#0@@5|) (not (= 39 $FunctionContextHeight))) (= (JournalistMarshallingModel.__default.add__mod |a#0@@7| |b#0@@3| |c#0@@5|) (ite (>= (+ |a#0@@7| |b#0@@3|) |c#0@@5|) (- (+ |a#0@@7| |b#0@@3|) |c#0@@5|) (+ |a#0@@7| |b#0@@3|)))) :qid |JournalistMarshallingModelidfy.457:20| :skolemid |1577| :pattern ( (JournalistMarshallingModel.__default.add__mod |a#0@@7| |b#0@@3| |c#0@@5|)) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|a#0@@8| Int) (|b#0@@4| Int) (|c#0@@6| Int) ) (!  (=> (or (|JournalistMarshallingModel.__default.add__mod#canCall| (LitInt |a#0@@8|) (LitInt |b#0@@4|) (LitInt |c#0@@6|)) (not (= 39 $FunctionContextHeight))) (= (JournalistMarshallingModel.__default.add__mod (LitInt |a#0@@8|) (LitInt |b#0@@4|) (LitInt |c#0@@6|)) (ite (>= (LitInt (+ |a#0@@8| |b#0@@4|)) (LitInt |c#0@@6|)) (- (+ |a#0@@8| |b#0@@4|) |c#0@@6|) (+ |a#0@@8| |b#0@@4|)))) :qid |JournalistMarshallingModelidfy.457:20| :weight 3 :skolemid |1578| :pattern ( (JournalistMarshallingModel.__default.add__mod (LitInt |a#0@@8|) (LitInt |b#0@@4|) (LitInt |c#0@@6|))) ))))
(assert (forall ((arg0@@437 T@U) ) (! (= (type (|JournalistMarshallingModel.__default.fillInChecksums#Handle| arg0@@437)) HandleTypeType) :qid |funType:JournalistMarshallingModel.__default.fillInChecksums#Handle| :pattern ( (|JournalistMarshallingModel.__default.fillInChecksums#Handle| arg0@@437)) )))
(assert (forall (($ly@@57 T@U) ($heap@@7 T@U) (|$fh$0x#0@@7| T@U) (|$fh$0x#1@@7| T@U) (|$fh$0x#2@@7| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@57) LayerTypeType) (= (type $heap@@7) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@7|) BoxType)) (= (type |$fh$0x#1@@7|) BoxType)) (= (type |$fh$0x#2@@7|) BoxType)) (= (Apply3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@7 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@57) |$fh$0x#0@@7| |$fh$0x#1@@7| |$fh$0x#2@@7|) ($Box (JournalistMarshallingModel.__default.fillInChecksums $ly@@57 ($Unbox (SeqType BoxType) |$fh$0x#0@@7|) (U_2_int ($Unbox intType |$fh$0x#1@@7|)) (U_2_int ($Unbox intType |$fh$0x#2@@7|)))))) :qid |unknown.0:0| :skolemid |1633| :pattern ( (Apply3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@7 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@57) |$fh$0x#0@@7| |$fh$0x#1@@7| |$fh$0x#2@@7|)) )))
(assert (forall (($ly@@58 T@U) ($heap@@8 T@U) (|$fh$0x#0@@8| T@U) (|$fh$0x#1@@8| T@U) (|$fh$0x#2@@8| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@58) LayerTypeType) (= (type $heap@@8) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@8|) BoxType)) (= (type |$fh$0x#1@@8|) BoxType)) (= (type |$fh$0x#2@@8|) BoxType)) (= (Requires3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@8 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@58) |$fh$0x#0@@8| |$fh$0x#1@@8| |$fh$0x#2@@8|) (|JournalistMarshallingModel.__default.fillInChecksums#requires| $ly@@58 ($Unbox (SeqType BoxType) |$fh$0x#0@@8|) (U_2_int ($Unbox intType |$fh$0x#1@@8|)) (U_2_int ($Unbox intType |$fh$0x#2@@8|))))) :qid |unknown.0:0| :skolemid |1634| :pattern ( (Requires3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@8 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@58) |$fh$0x#0@@8| |$fh$0x#1@@8| |$fh$0x#2@@8|)) )))
(assert (forall (($bx@@1 T@U) ($ly@@59 T@U) ($heap@@9 T@U) (|$fh$0x#0@@9| T@U) (|$fh$0x#1@@9| T@U) (|$fh$0x#2@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type $bx@@1) BoxType) (= (type $ly@@59) LayerTypeType)) (= (type $heap@@9) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@9|) BoxType)) (= (type |$fh$0x#1@@9|) BoxType)) (= (type |$fh$0x#2@@9|) BoxType)) (= (U_2_bool (MapType0Select (Reads3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@9 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@59) |$fh$0x#0@@9| |$fh$0x#1@@9| |$fh$0x#2@@9|) $bx@@1)) false)) :qid |unknown.0:0| :skolemid |1635| :pattern ( (MapType0Select (Reads3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@9 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@59) |$fh$0x#0@@9| |$fh$0x#1@@9| |$fh$0x#2@@9|) $bx@@1)) )))
(assert (forall (($ly@@60 T@U) ($heap@@10 T@U) (|$fh$0x#0@@10| T@U) (|$fh$0x#1@@10| Int) (|$fh$0x#2@@10| Int) ) (!  (=> (and (and (= (type $ly@@60) LayerTypeType) (= (type $heap@@10) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@10|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.fillInChecksums $ly@@60 |$fh$0x#0@@10| |$fh$0x#1@@10| |$fh$0x#2@@10|) ($Unbox (SeqType BoxType) (Apply3 (TSeq Tclass.NativeTypes.byte) Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64 (TSeq Tclass.NativeTypes.byte) $heap@@10 (|JournalistMarshallingModel.__default.fillInChecksums#Handle| $ly@@60) ($Box |$fh$0x#0@@10|) ($Box (int_2_U |$fh$0x#1@@10|)) ($Box (int_2_U |$fh$0x#2@@10|)))))) :qid |unknown.0:0| :skolemid |1636| :pattern ( (JournalistMarshallingModel.__default.fillInChecksums $ly@@60 |$fh$0x#0@@10| |$fh$0x#1@@10| |$fh$0x#2@@10|) ($IsGoodHeap $heap@@10)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@184 T@U) (arg2@@117 Int) (arg3@@82 Int) (arg4@@63 Int) ) (! (= (type (JournalistMarshallingModel.__default.marshallJournalEntries arg0@@438 arg1@@184 arg2@@117 arg3@@82 arg4@@63)) (SeqType BoxType)) :qid |funType:JournalistMarshallingModel.__default.marshallJournalEntries| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries arg0@@438 arg1@@184 arg2@@117 arg3@@82 arg4@@63)) )))
(assert (forall (($ly@@61 T@U) (|entries#0@@18| T@U) (|start#0@@40| Int) (|len#0@@10| Int) (|numBlocks#0@@51| Int) ) (!  (=> (and (= (type $ly@@61) LayerTypeType) (= (type |entries#0@@18|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@61) |entries#0@@18| |start#0@@40| |len#0@@10| |numBlocks#0@@51|) (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@61 |entries#0@@18| |start#0@@40| |len#0@@10| |numBlocks#0@@51|))) :qid |JournalistMarshallingModelidfy.911:22| :skolemid |1724| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@61) |entries#0@@18| |start#0@@40| |len#0@@10| |numBlocks#0@@51|)) )))
(assert (forall (($ly@@62 T@U) (|entries#0@@19| T@U) (|start#0@@41| Int) (|len#0@@11| Int) (|numBlocks#0@@52| Int) ) (!  (=> (and (= (type $ly@@62) LayerTypeType) (= (type |entries#0@@19|) (SeqType BoxType))) (= (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@62 |entries#0@@19| |start#0@@41| |len#0@@11| |numBlocks#0@@52|) (JournalistMarshallingModel.__default.marshallJournalEntries $LZ |entries#0@@19| |start#0@@41| |len#0@@11| |numBlocks#0@@52|))) :qid |JournalistMarshallingModelidfy.911:22| :skolemid |1725| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries (AsFuelBottom $ly@@62) |entries#0@@19| |start#0@@41| |len#0@@11| |numBlocks#0@@52|)) )))
(assert  (and (and (and (and (and (= (type StartFuel_JournalRanges._default.WeightJournalEntries) LayerTypeType) (forall ((arg0@@439 T@U) (arg1@@185 T@U) ) (! (= (type (JournalBytes.__default.JournalRangeOfByteSeq arg0@@439 arg1@@185)) DatatypeTypeType) :qid |funType:JournalBytes.__default.JournalRangeOfByteSeq| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq arg0@@439 arg1@@185)) ))) (= (type StartFuel_JournalBytes._default.JournalRangeOfByteSeq) LayerTypeType)) (forall ((arg0@@440 T@U) (arg1@@186 T@U) ) (! (= (type (JournalRanges.__default.parseJournalRange arg0@@440 arg1@@186)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseJournalRange| :pattern ( (JournalRanges.__default.parseJournalRange arg0@@440 arg1@@186)) ))) (forall ((arg0@@441 T@U) ) (! (= (type (Options.Option.value arg0@@441)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@441)) ))) (forall ((arg0@@442 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@442)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@442)) ))))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@63 T@U) (|entries#0@@20| T@U) (|start#0@@42| Int) (|len#0@@12| Int) (|numBlocks#0@@53| Int) ) (!  (=> (and (and (= (type $ly@@63) LayerTypeType) (= (type |entries#0@@20|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.marshallJournalEntries#canCall| |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|) (and (not (= 52 $FunctionContextHeight)) (and (and (and (and ($Is |entries#0@@20| (TSeq Tclass.Journal.JournalEntry)) (and (<= (LitInt 0) |start#0@@42|) (< |start#0@@42| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@12|) (< |len#0@@12| 18446744073709551616))) (and (<= (LitInt 0) |numBlocks#0@@53|) (< |numBlocks#0@@53| 18446744073709551616))) (and (and (and (and (and (<= (LitInt 0) |start#0@@42|) (< |start#0@@42| (|Seq#Length| |entries#0@@20|))) (and (<= (LitInt 0) |len#0@@12|) (<= |len#0@@12| (|Seq#Length| |entries#0@@20|)))) (<= (|Seq#Length| |entries#0@@20|) (LitInt 4294967295))) (<= (JournalRanges.__default.WeightJournalEntries StartFuel_JournalRanges._default.WeightJournalEntries (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@20| |start#0@@42| |len#0@@12|)) (Mul (LitInt 4064) |numBlocks#0@@53|))) (and (<= (LitInt 1) |numBlocks#0@@53|) (<= |numBlocks#0@@53| (LitInt DiskLayout.__default.NumJournalBlocks)))))))) (and (and (and (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@63 |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|))) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@63 |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|))))) (|#Options.Option.Some| ($Box (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@20| |start#0@@42| |len#0@@12|))))) (= (|Seq#Length| (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@63 |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|)) (Mul |numBlocks#0@@53| (LitInt 4096)))) ($Is (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@63 |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|) (TSeq Tclass.NativeTypes.byte)))) :qid |JournalistMarshallingModelidfy.911:22| :skolemid |1726| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries $ly@@63 |entries#0@@20| |start#0@@42| |len#0@@12| |numBlocks#0@@53|)) ))))
(assert (forall (($ly@@64 T@U) (|entries#0@@21| T@U) (|start#0@@43| Int) (|len#0@@13| Int) (|numBlocks#0@@54| Int) ) (!  (=> (and (= (type $ly@@64) LayerTypeType) (= (type |entries#0@@21|) (SeqType BoxType))) (=> (and (and (and ($Is |entries#0@@21| (TSeq Tclass.Journal.JournalEntry)) (and (<= (LitInt 0) |start#0@@43|) (< |start#0@@43| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@13|) (< |len#0@@13| 18446744073709551616))) (and (<= (LitInt 0) |numBlocks#0@@54|) (< |numBlocks#0@@54| 18446744073709551616))) (= (|JournalistMarshallingModel.__default.marshallJournalEntries#requires| $ly@@64 |entries#0@@21| |start#0@@43| |len#0@@13| |numBlocks#0@@54|)  (and (and (and (and (and (<= (LitInt 0) |start#0@@43|) (< |start#0@@43| (|Seq#Length| |entries#0@@21|))) (and (<= (LitInt 0) |len#0@@13|) (<= |len#0@@13| (|Seq#Length| |entries#0@@21|)))) (<= (|Seq#Length| |entries#0@@21|) (LitInt 4294967295))) (<= (JournalRanges.__default.WeightJournalEntries StartFuel_JournalRanges._default.WeightJournalEntries (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@21| |start#0@@43| |len#0@@13|)) (Mul (LitInt 4064) |numBlocks#0@@54|))) (and (<= (LitInt 1) |numBlocks#0@@54|) (<= |numBlocks#0@@54| (LitInt DiskLayout.__default.NumJournalBlocks))))))) :qid |JournalistMarshallingModelidfy.911:22| :skolemid |1727| :pattern ( (|JournalistMarshallingModel.__default.marshallJournalEntries#requires| $ly@@64 |entries#0@@21| |start#0@@43| |len#0@@13| |numBlocks#0@@54|)) )))
(assert  (and (and (and (and (and (forall ((arg0@@443 T@U) (arg1@@187 T@U) (arg2@@118 Int) (arg3@@83 T@U) ) (! (= (type (Sequences.__default.fill arg0@@443 arg1@@187 arg2@@118 arg3@@83)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@443 arg1@@187 arg2@@118 arg3@@83)) )) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_JournalistMarshallingModel._default.writeJournalEntries) LayerTypeType)) (= (type MoreFuel_JournalRanges._default.WeightJournalEntries0) LayerTypeType)) (= (type StartFuelAssert_JournalRanges._default.WeightJournalEntries) LayerTypeType)) (= (type StartFuel_JournalistMarshallingModel._default.fillInChecksums) LayerTypeType)))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@65 T@U) (|entries#0@@22| T@U) (|start#0@@44| Int) (|len#0@@14| Int) (|numBlocks#0@@55| Int) ) (!  (=> (and (and (= (type $ly@@65) LayerTypeType) (= (type |entries#0@@22|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.marshallJournalEntries#canCall| |entries#0@@22| |start#0@@44| |len#0@@14| |numBlocks#0@@55|) (and (not (= 52 $FunctionContextHeight)) (and (and (and (and ($Is |entries#0@@22| (TSeq Tclass.Journal.JournalEntry)) (and (<= (LitInt 0) |start#0@@44|) (< |start#0@@44| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@14|) (< |len#0@@14| 18446744073709551616))) (and (<= (LitInt 0) |numBlocks#0@@55|) (< |numBlocks#0@@55| 18446744073709551616))) (and (and (and (and (and (<= (LitInt 0) |start#0@@44|) (< |start#0@@44| (|Seq#Length| |entries#0@@22|))) (and (<= (LitInt 0) |len#0@@14|) (<= |len#0@@14| (|Seq#Length| |entries#0@@22|)))) (<= (|Seq#Length| |entries#0@@22|) (LitInt 4294967295))) (<= (JournalRanges.__default.WeightJournalEntries StartFuel_JournalRanges._default.WeightJournalEntries (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice |entries#0@@22| |start#0@@44| |len#0@@14|)) (Mul (LitInt 4064) |numBlocks#0@@55|))) (and (<= (LitInt 1) |numBlocks#0@@55|) (<= |numBlocks#0@@55| (LitInt DiskLayout.__default.NumJournalBlocks)))))))) (and (and (|Sequences.__default.fill#canCall| Tclass.NativeTypes.byte (Mul |numBlocks#0@@55| (LitInt 4096)) ($Box (int_2_U (LitInt 0)))) (let ((|buf#0@@73| (Sequences.__default.fill Tclass.NativeTypes.byte StartFuel_Sequences._default.fill (Mul |numBlocks#0@@55| (LitInt 4096)) ($Box (int_2_U (LitInt 0)))))) (and (|JournalistMarshallingModel.__default.writeHeader#canCall| |buf#0@@73| |numBlocks#0@@55| |len#0@@14|) (let ((|buf1#0@@7| (JournalistMarshallingModel.__default.writeHeader |buf#0@@73| |numBlocks#0@@55| |len#0@@14|))) (and (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf1#0@@7| |numBlocks#0@@55| (LitInt 8) |entries#0@@22| |start#0@@44| |len#0@@14|) (let ((|buf2#0@@3| (JournalistMarshallingModel.__default.writeJournalEntries StartFuel_JournalistMarshallingModel._default.writeJournalEntries |buf1#0@@7| |numBlocks#0@@55| (LitInt 8) |entries#0@@22| |start#0@@44| |len#0@@14|))) (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf2#0@@3| |numBlocks#0@@55| (LitInt 0)))))))) (and (and (and (= StartFuel_JournalRanges._default.WeightJournalEntries ($LS MoreFuel_JournalRanges._default.WeightJournalEntries0)) (= StartFuelAssert_JournalRanges._default.WeightJournalEntries ($LS ($LS MoreFuel_JournalRanges._default.WeightJournalEntries0)))) (= (AsFuelBottom MoreFuel_JournalRanges._default.WeightJournalEntries0) MoreFuel_JournalRanges._default.WeightJournalEntries0)) (= (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@65) |entries#0@@22| |start#0@@44| |len#0@@14| |numBlocks#0@@55|) (let ((|buf#0@@74| (Sequences.__default.fill Tclass.NativeTypes.byte StartFuel_Sequences._default.fill (Mul |numBlocks#0@@55| (LitInt 4096)) ($Box (int_2_U (LitInt 0)))))) (let ((|buf1#0@@8| (JournalistMarshallingModel.__default.writeHeader |buf#0@@74| |numBlocks#0@@55| |len#0@@14|))) (let ((|buf2#0@@4| (JournalistMarshallingModel.__default.writeJournalEntries StartFuel_JournalistMarshallingModel._default.writeJournalEntries |buf1#0@@8| |numBlocks#0@@55| (LitInt 8) |entries#0@@22| |start#0@@44| |len#0@@14|))) (let ((|buf3#0@@1| (JournalistMarshallingModel.__default.fillInChecksums StartFuel_JournalistMarshallingModel._default.fillInChecksums |buf2#0@@4| |numBlocks#0@@55| (LitInt 0)))) |buf3#0@@1|)))))))) :qid |JournalistMarshallingModelidfy.911:22| :skolemid |1728| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@65) |entries#0@@22| |start#0@@44| |len#0@@14| |numBlocks#0@@55|)) ))))
(assert (= (type MoreFuel_JournalRanges._default.WeightJournalEntries1) LayerTypeType))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@66 T@U) (|entries#0@@23| T@U) (|start#0@@45| Int) (|len#0@@15| Int) (|numBlocks#0@@56| Int) ) (!  (=> (and (and (= (type $ly@@66) LayerTypeType) (= (type |entries#0@@23|) (SeqType BoxType))) (or (|JournalistMarshallingModel.__default.marshallJournalEntries#canCall| (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|) (LitInt |numBlocks#0@@56|)) (and (not (= 52 $FunctionContextHeight)) (and (and (and (and ($Is |entries#0@@23| (TSeq Tclass.Journal.JournalEntry)) (and (<= (LitInt 0) |start#0@@45|) (< |start#0@@45| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@15|) (< |len#0@@15| 18446744073709551616))) (and (<= (LitInt 0) |numBlocks#0@@56|) (< |numBlocks#0@@56| 18446744073709551616))) (and (and (and (and (and (<= (LitInt 0) (LitInt |start#0@@45|)) (< |start#0@@45| (|Seq#Length| (Lit |entries#0@@23|)))) (and (<= (LitInt 0) (LitInt |len#0@@15|)) (<= (LitInt |len#0@@15|) (|Seq#Length| (Lit |entries#0@@23|))))) (<= (|Seq#Length| (Lit |entries#0@@23|)) (LitInt 4294967295))) (<= (JournalRanges.__default.WeightJournalEntries StartFuel_JournalRanges._default.WeightJournalEntries (JournalistMarshallingModel.__default.cyclicSlice Tclass.Journal.JournalEntry StartFuel_JournalistMarshallingModel._default.cyclicSlice (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|))) (LitInt (Mul (LitInt 4064) (LitInt |numBlocks#0@@56|))))) (and (<= (LitInt 1) (LitInt |numBlocks#0@@56|)) (<= (LitInt |numBlocks#0@@56|) (LitInt DiskLayout.__default.NumJournalBlocks)))))))) (and (and (|Sequences.__default.fill#canCall| Tclass.NativeTypes.byte (LitInt (Mul (LitInt |numBlocks#0@@56|) (LitInt 4096))) ($Box (int_2_U (LitInt 0)))) (let ((|buf#1| (Sequences.__default.fill Tclass.NativeTypes.byte StartFuel_Sequences._default.fill (LitInt (Mul (LitInt |numBlocks#0@@56|) (LitInt 4096))) ($Box (int_2_U (LitInt 0)))))) (and (|JournalistMarshallingModel.__default.writeHeader#canCall| |buf#1| (LitInt |numBlocks#0@@56|) (LitInt |len#0@@15|)) (let ((|buf1#1@@7| (JournalistMarshallingModel.__default.writeHeader |buf#1| (LitInt |numBlocks#0@@56|) (LitInt |len#0@@15|)))) (and (|JournalistMarshallingModel.__default.writeJournalEntries#canCall| |buf1#1@@7| (LitInt |numBlocks#0@@56|) (LitInt 8) (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|)) (let ((|buf2#1@@3| (JournalistMarshallingModel.__default.writeJournalEntries StartFuel_JournalistMarshallingModel._default.writeJournalEntries |buf1#1@@7| (LitInt |numBlocks#0@@56|) (LitInt 8) (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|)))) (|JournalistMarshallingModel.__default.fillInChecksums#canCall| |buf2#1@@3| (LitInt |numBlocks#0@@56|) (LitInt 0)))))))) (and (and (and (= StartFuel_JournalRanges._default.WeightJournalEntries ($LS MoreFuel_JournalRanges._default.WeightJournalEntries1)) (= StartFuelAssert_JournalRanges._default.WeightJournalEntries ($LS ($LS MoreFuel_JournalRanges._default.WeightJournalEntries1)))) (= (AsFuelBottom MoreFuel_JournalRanges._default.WeightJournalEntries1) MoreFuel_JournalRanges._default.WeightJournalEntries1)) (= (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@66) (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|) (LitInt |numBlocks#0@@56|)) (let ((|buf#1@@0| (Sequences.__default.fill Tclass.NativeTypes.byte StartFuel_Sequences._default.fill (LitInt (Mul (LitInt |numBlocks#0@@56|) (LitInt 4096))) ($Box (int_2_U (LitInt 0)))))) (let ((|buf1#1@@8| (JournalistMarshallingModel.__default.writeHeader |buf#1@@0| (LitInt |numBlocks#0@@56|) (LitInt |len#0@@15|)))) (let ((|buf2#1@@4| (JournalistMarshallingModel.__default.writeJournalEntries StartFuel_JournalistMarshallingModel._default.writeJournalEntries |buf1#1@@8| (LitInt |numBlocks#0@@56|) (LitInt 8) (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|)))) (let ((|buf3#1@@1| (JournalistMarshallingModel.__default.fillInChecksums StartFuel_JournalistMarshallingModel._default.fillInChecksums |buf2#1@@4| (LitInt |numBlocks#0@@56|) (LitInt 0)))) |buf3#1@@1|)))))))) :qid |JournalistMarshallingModelidfy.911:22| :weight 3 :skolemid |1729| :pattern ( (JournalistMarshallingModel.__default.marshallJournalEntries ($LS $ly@@66) (Lit |entries#0@@23|) (LitInt |start#0@@45|) (LitInt |len#0@@15|) (LitInt |numBlocks#0@@56|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@130)) bx@@130) ($Is ($Unbox intType bx@@130) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1737| :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@30| T@U) ) (!  (=> (= (type |i#0@@30|) intType) (= ($Is |i#0@@30| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@30|)) (< (U_2_int |i#0@@30|) 128)))) :qid |unknown.0:0| :skolemid |1738| :pattern ( ($Is |i#0@@30| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@31| T@U) ($h@@52 T@U) ) (!  (=> (and (= (type |i#0@@31|) intType) (= (type $h@@52) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@31| Tclass.NativeTypes.sbyte $h@@52)) :qid |unknown.0:0| :skolemid |1739| :pattern ( ($IsAlloc |i#0@@31| Tclass.NativeTypes.sbyte $h@@52)) )))
(assert (forall ((|i#0@@32| T@U) ) (!  (=> (= (type |i#0@@32|) intType) (= ($Is |i#0@@32| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@32|)) (< (U_2_int |i#0@@32|) 256)))) :qid |unknown.0:0| :skolemid |1740| :pattern ( ($Is |i#0@@32| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@33| T@U) ($h@@53 T@U) ) (!  (=> (and (= (type |i#0@@33|) intType) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@33| Tclass.NativeTypes.byte $h@@53)) :qid |unknown.0:0| :skolemid |1741| :pattern ( ($IsAlloc |i#0@@33| Tclass.NativeTypes.byte $h@@53)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@131)) bx@@131) ($Is ($Unbox intType bx@@131) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1742| :pattern ( ($IsBox bx@@131 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@34| T@U) ) (!  (=> (= (type |i#0@@34|) intType) (= ($Is |i#0@@34| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@34|)) (< (U_2_int |i#0@@34|) 32768)))) :qid |unknown.0:0| :skolemid |1743| :pattern ( ($Is |i#0@@34| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@35| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@35|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@35| Tclass.NativeTypes.int16 $h@@54)) :qid |unknown.0:0| :skolemid |1744| :pattern ( ($IsAlloc |i#0@@35| Tclass.NativeTypes.int16 $h@@54)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@132)) bx@@132) ($Is ($Unbox intType bx@@132) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1745| :pattern ( ($IsBox bx@@132 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@36| T@U) ) (!  (=> (= (type |i#0@@36|) intType) (= ($Is |i#0@@36| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@36|)) (< (U_2_int |i#0@@36|) 65536)))) :qid |unknown.0:0| :skolemid |1746| :pattern ( ($Is |i#0@@36| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@37| T@U) ($h@@55 T@U) ) (!  (=> (and (= (type |i#0@@37|) intType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@37| Tclass.NativeTypes.uint16 $h@@55)) :qid |unknown.0:0| :skolemid |1747| :pattern ( ($IsAlloc |i#0@@37| Tclass.NativeTypes.uint16 $h@@55)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@133)) bx@@133) ($Is ($Unbox intType bx@@133) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1748| :pattern ( ($IsBox bx@@133 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@38| T@U) ) (!  (=> (= (type |i#0@@38|) intType) (= ($Is |i#0@@38| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@38|)) (< (U_2_int |i#0@@38|) 2147483648)))) :qid |unknown.0:0| :skolemid |1749| :pattern ( ($Is |i#0@@38| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@39| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@39|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@39| Tclass.NativeTypes.int32 $h@@56)) :qid |unknown.0:0| :skolemid |1750| :pattern ( ($IsAlloc |i#0@@39| Tclass.NativeTypes.int32 $h@@56)) )))
(assert (forall ((|i#0@@40| T@U) ) (!  (=> (= (type |i#0@@40|) intType) (= ($Is |i#0@@40| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@40|)) (< (U_2_int |i#0@@40|) 4294967296)))) :qid |unknown.0:0| :skolemid |1751| :pattern ( ($Is |i#0@@40| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@41| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@41|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@41| Tclass.NativeTypes.uint32 $h@@57)) :qid |unknown.0:0| :skolemid |1752| :pattern ( ($IsAlloc |i#0@@41| Tclass.NativeTypes.uint32 $h@@57)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@134)) bx@@134) ($Is ($Unbox intType bx@@134) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1753| :pattern ( ($IsBox bx@@134 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@42| T@U) ) (!  (=> (= (type |i#0@@42|) intType) (= ($Is |i#0@@42| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@42|)) (< (U_2_int |i#0@@42|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1754| :pattern ( ($Is |i#0@@42| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@43| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@43|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@43| Tclass.NativeTypes.int64 $h@@58)) :qid |unknown.0:0| :skolemid |1755| :pattern ( ($IsAlloc |i#0@@43| Tclass.NativeTypes.int64 $h@@58)) )))
(assert (forall ((|i#0@@44| T@U) ) (!  (=> (= (type |i#0@@44|) intType) (= ($Is |i#0@@44| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@44|)) (< (U_2_int |i#0@@44|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1756| :pattern ( ($Is |i#0@@44| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@45| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@45|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@45| Tclass.NativeTypes.uint64 $h@@59)) :qid |unknown.0:0| :skolemid |1757| :pattern ( ($IsAlloc |i#0@@45| Tclass.NativeTypes.uint64 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@135)) bx@@135) ($Is ($Unbox intType bx@@135) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1758| :pattern ( ($IsBox bx@@135 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@46| T@U) ) (!  (=> (= (type |i#0@@46|) intType) (= ($Is |i#0@@46| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@46|)) (< (U_2_int |i#0@@46|) 128)))) :qid |unknown.0:0| :skolemid |1759| :pattern ( ($Is |i#0@@46| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@47| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@47|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@47| Tclass.NativeTypes.nat8 $h@@60)) :qid |unknown.0:0| :skolemid |1760| :pattern ( ($IsAlloc |i#0@@47| Tclass.NativeTypes.nat8 $h@@60)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@136)) bx@@136) ($Is ($Unbox intType bx@@136) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1761| :pattern ( ($IsBox bx@@136 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@48| T@U) ) (!  (=> (= (type |i#0@@48|) intType) (= ($Is |i#0@@48| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@48|)) (< (U_2_int |i#0@@48|) 32768)))) :qid |unknown.0:0| :skolemid |1762| :pattern ( ($Is |i#0@@48| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@49| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@49|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@49| Tclass.NativeTypes.nat16 $h@@61)) :qid |unknown.0:0| :skolemid |1763| :pattern ( ($IsAlloc |i#0@@49| Tclass.NativeTypes.nat16 $h@@61)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@137)) bx@@137) ($Is ($Unbox intType bx@@137) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1764| :pattern ( ($IsBox bx@@137 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@50| T@U) ) (!  (=> (= (type |i#0@@50|) intType) (= ($Is |i#0@@50| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@50|)) (< (U_2_int |i#0@@50|) 2147483648)))) :qid |unknown.0:0| :skolemid |1765| :pattern ( ($Is |i#0@@50| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@51| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@51|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@51| Tclass.NativeTypes.nat32 $h@@62)) :qid |unknown.0:0| :skolemid |1766| :pattern ( ($IsAlloc |i#0@@51| Tclass.NativeTypes.nat32 $h@@62)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@138)) bx@@138) ($Is ($Unbox intType bx@@138) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1767| :pattern ( ($IsBox bx@@138 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@52| T@U) ) (!  (=> (= (type |i#0@@52|) intType) (= ($Is |i#0@@52| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@52|)) (< (U_2_int |i#0@@52|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1768| :pattern ( ($Is |i#0@@52| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@53| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@53|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@53| Tclass.NativeTypes.nat64 $h@@63)) :qid |unknown.0:0| :skolemid |1769| :pattern ( ($IsAlloc |i#0@@53| Tclass.NativeTypes.nat64 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@139)) bx@@139) ($Is ($Unbox intType bx@@139) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1770| :pattern ( ($IsBox bx@@139 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@54| T@U) ) (!  (=> (= (type |i#0@@54|) intType) (= ($Is |i#0@@54| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@54|)) (< (U_2_int |i#0@@54|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1771| :pattern ( ($Is |i#0@@54| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@55| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@55|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@55| Tclass.NativeTypes.uint128 $h@@64)) :qid |unknown.0:0| :skolemid |1772| :pattern ( ($IsAlloc |i#0@@55| Tclass.NativeTypes.uint128 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@140)) bx@@140) ($Is ($Unbox refType bx@@140) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1773| :pattern ( ($IsBox bx@@140 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1774| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@65 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@65)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@65 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1775| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@65)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (= (TagFamily Tclass.KeyType.Key) tytagFamily$Key))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@141)) bx@@141) ($Is ($Unbox (SeqType BoxType) bx@@141) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1776| :pattern ( ($IsBox bx@@141 Tclass.KeyType.Key)) )))
(assert (forall ((|s#0| T@U) ) (!  (=> (= (type |s#0|) (SeqType BoxType)) (= ($Is |s#0| Tclass.KeyType.Key)  (and ($Is |s#0| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1777| :pattern ( ($Is |s#0| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@0| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |s#0@@0|) (SeqType BoxType)) (= (type $h@@66) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@0| Tclass.KeyType.Key $h@@66) ($IsAlloc |s#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@66))) :qid |unknown.0:0| :skolemid |1778| :pattern ( ($IsAlloc |s#0@@0| Tclass.KeyType.Key $h@@66)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (= (TagFamily Tclass.KeyType.__default) tytagFamily$_default))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@142)) bx@@142) ($Is ($Unbox refType bx@@142) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1779| :pattern ( ($IsBox bx@@142 Tclass.KeyType.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.KeyType.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1780| :pattern ( ($Is $o@@13 Tclass.KeyType.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@67 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@67) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@67)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@67 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1781| :pattern ( ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@67)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert (= |KeyType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (= (TagFamily Tclass.ValueType.Value) tytagFamily$Value))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@143)) bx@@143) ($Is ($Unbox (SeqType BoxType) bx@@143) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1782| :pattern ( ($IsBox bx@@143 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@1| T@U) ) (!  (=> (= (type |s#0@@1|) (SeqType BoxType)) (= ($Is |s#0@@1| Tclass.ValueType.Value)  (and ($Is |s#0@@1| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@1|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1783| :pattern ( ($Is |s#0@@1| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@2| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |s#0@@2|) (SeqType BoxType)) (= (type $h@@68) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@2| Tclass.ValueType.Value $h@@68) ($IsAlloc |s#0@@2| (TSeq Tclass.NativeTypes.byte) $h@@68))) :qid |unknown.0:0| :skolemid |1784| :pattern ( ($IsAlloc |s#0@@2| Tclass.ValueType.Value $h@@68)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (= (TagFamily Tclass.ValueType.__default) tytagFamily$_default))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (= ($Is $o@@15 Tclass.ValueType.__default)  (or (= $o@@15 null) (= (dtype $o@@15) Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1785| :pattern ( ($Is $o@@15 Tclass.ValueType.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@16 Tclass.ValueType.__default $h@@69)  (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@16) alloc))))) :qid |unknown.0:0| :skolemid |1786| :pattern ( ($IsAlloc $o@@16 Tclass.ValueType.__default $h@@69)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert (= |ValueType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypesdfy.20:15| :skolemid |1787| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (= (|ValueType.__default.Len#requires| |v#0@@0|) true)) :qid |KeyTypesdfy.20:15| :skolemid |1788| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypesdfy.20:15| :skolemid |1789| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypesdfy.20:15| :weight 3 :skolemid |1790| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@3| T@U) ) (!  (=> (and (= (type |s#0@@3|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@3|) ($Is |s#0@@3| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypesdfy.22:36| :skolemid |1791| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@3|)) ))))
(assert (forall ((|s#0@@4| T@U) ) (!  (=> (and (= (type |s#0@@4|) (SeqType BoxType)) ($Is |s#0@@4| (TSeq Tclass.NativeTypes.byte))) (= (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@4|) true)) :qid |KeyTypesdfy.22:36| :skolemid |1792| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@5| T@U) ) (!  (=> (and (= (type |s#0@@5|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@5|) ($Is |s#0@@5| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring |s#0@@5|) (<= (|Seq#Length| |s#0@@5|) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :skolemid |1793| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@6| T@U) ) (!  (=> (and (= (type |s#0@@6|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@6|)) ($Is |s#0@@6| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring (Lit |s#0@@6|)) (<= (|Seq#Length| (Lit |s#0@@6|)) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :weight 3 :skolemid |1794| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@6|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypesdfy.27:37| :skolemid |1795| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true)) :qid |KeyTypesdfy.27:37| :skolemid |1796| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@56| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@56|)))) :qid |KeyTypesdfy.29:12| :skolemid |1798| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@56|))) )) (= (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@57| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@57|)))) :qid |KeyTypesdfy.29:12| :skolemid |1797| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@57|))) ))))) :qid |KeyTypesdfy.27:37| :skolemid |1799| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@3|)))) :qid |KeyTypesdfy.29:12| :skolemid |1801| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@3|))) )) (= (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@4|)))) :qid |KeyTypesdfy.29:12| :skolemid |1800| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@4|))) ))))) :qid |KeyTypesdfy.27:37| :weight 3 :skolemid |1802| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@144)) bx@@144) ($Is ($Unbox refType bx@@144) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |1803| :pattern ( ($IsBox bx@@144 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.LinearMaybe.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |1804| :pattern ( ($Is $o@@17 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@70 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@70)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |1805| :pattern ( ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@70)) )))
(assert (forall ((arg0@@444 T@U) ) (! (= (type (|#$maybe| arg0@@444)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@444)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0|) ($IsBox |m#0| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |1806| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@0|) BoxType)) ($IsBox |m#0@@0| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|) true)) :qid |unknown.0:0| :skolemid |1807| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@188 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@445 arg1@@188)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@445 arg1@@188)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@1|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@1|) ($IsBox |m#0@@1| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |1808| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@2|) BoxType)) ($IsBox |m#0@@2| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|) true)) :qid |unknown.0:0| :skolemid |1809| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@189 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@446 arg1@@189)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@446 arg1@@189)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@3| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@3|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@3|) (and ($IsBox |m#0@@3| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@3|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@3|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |1810| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@4| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@4|) BoxType)) ($IsBox |m#0@@4| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@4|))) :qid |unknown.0:0| :skolemid |1811| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@190 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@447 arg1@@190)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@447 arg1@@190)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@5|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@5|) (and ($IsBox |m#0@@5| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@5|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@5|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@6|) BoxType)) ($IsBox |m#0@@6| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@6|))) :qid |unknown.0:0| :skolemid |1813| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|)) )))
(assert (forall ((arg0@@448 T@U) (arg1@@191 T@U) (arg2@@119 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@448 arg1@@191 arg2@@119)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@448 arg1@@191 arg2@@119)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly@@67 T@U) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |a#0@@9|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@67) |a#0@@9|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly@@67 |a#0@@9|))) :qid |unknown.0:0| :skolemid |1814| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@67) |a#0@@9|)) )))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@68 T@U) (|a#0@@10| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |a#0@@10|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@68 |a#0@@10|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@10|))) :qid |unknown.0:0| :skolemid |1815| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@68) |a#0@@10|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@69 T@U) (|a#0@@11| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |a#0@@11|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@11|) ($IsBox |a#0@@11| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 |a#0@@11|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 |a#0@@11|)) |a#0@@11|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@11| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 |a#0@@11|) |x#0@@1|))) :qid |LinearMaybesdfy.25:20| :skolemid |1816| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 |a#0@@11|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |1817| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@69 |a#0@@11|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@70 T@U) (|a#0@@12| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |a#0@@12|) BoxType)) ($IsBox |a#0@@12| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@70 |a#0@@12|) true)) :qid |unknown.0:0| :skolemid |1818| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@70 |a#0@@12|)) )))
(assert (forall ((arg0@@449 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@449)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@449)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |1819| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1820| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@192 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@450 arg1@@192)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@450 arg1@@192)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@7| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@7|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@7|) (and ($IsBox |m#0@@7| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@7|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1821| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@8| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@8|) BoxType)) ($IsBox |m#0@@8| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@8|)))) :qid |unknown.0:0| :skolemid |1822| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@193 Bool) (arg2@@120 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@451 arg1@@193 arg2@@120)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@451 arg1@@193 arg2@@120)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@13| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@13|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@13|) ($IsBox |a#0@@13| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@13|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@13|)) |a#0@@13|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@13|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |1823| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@13|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@14| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@14|) BoxType)) ($IsBox |a#0@@14| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@14|) true)) :qid |unknown.0:0| :skolemid |1824| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@14|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@145)) bx@@145) ($Is ($Unbox refType bx@@145) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |1825| :pattern ( ($IsBox bx@@145 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.LinearExtern.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |1826| :pattern ( ($Is $o@@19 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@71 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@71)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |1827| :pattern ( ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@71)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@194 T@U) (arg2@@121 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@452 arg1@@194 arg2@@121)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@452 arg1@@194 arg2@@121)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@7| T@U) (|i#0@@58| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@58|) (and (and ($Is |s#0@@7| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| 18446744073709551616))) (< |i#0@@58| (|Seq#Length| |s#0@@7|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@58|) (|Seq#Index| |s#0@@7| |i#0@@58|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@58|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |1828| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@58|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@8| T@U) (|i#0@@59| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) (and ($Is |s#0@@8| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@8| |i#0@@59|) (< |i#0@@59| (|Seq#Length| |s#0@@8|)))) :qid |unknown.0:0| :skolemid |1829| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@8| |i#0@@59|)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@195 T@U) (arg2@@122 Int) (arg3@@84 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@453 arg1@@195 arg2@@122 arg3@@84)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@453 arg1@@195 arg2@@122 arg3@@84)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@60| Int) (|a#0@@15| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@60| |a#0@@15|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| 18446744073709551616))) ($IsBox |a#0@@15| LinearSequence_s._default.seq_set$A)) (< |i#0@@60| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@60| |a#0@@15|) (|Seq#Update| |s1#0| |i#0@@60| |a#0@@15|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@60| |a#0@@15|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |1830| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@60| |a#0@@15|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@61| Int) (|a#0@@16| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| 18446744073709551616))) ($IsBox |a#0@@16| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@61| |a#0@@16|) (< |i#0@@61| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |1831| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@61| |a#0@@16|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@9|) (and ($Is |s#0@@9| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@9|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|) (|Seq#Length| |s#0@@9|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1832| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@10|) (SeqType BoxType))) ($Is |s#0@@10| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@10|) (<= (|Seq#Length| |s#0@@10|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1833| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@10|)) )))
(assert (forall ((arg0@@454 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@454)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@454)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |1834| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1835| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@196 Int) (arg2@@123 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@455 arg1@@196 arg2@@123)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@455 arg1@@196 arg2@@123)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0| Int) (|a#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@17|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|) (and (and (<= (LitInt 0) |length#0|) (< |length#0| 18446744073709551616)) ($IsBox |a#0@@17| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|)) |length#0|) (forall ((|i#0@@62| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|) |i#0@@62|) |a#0@@17|))) :qid |LinearSequencesdfy.32:20| :skolemid |1836| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|) |i#0@@62|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |1837| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@17|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@0| Int) (|a#0@@18| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@18|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@0|) (< |length#0@@0| 18446744073709551616)) ($IsBox |a#0@@18| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@18|) true))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@18|)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@197 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@456 arg1@@197)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@456 arg1@@197)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@11|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@11|) ($Is |s#0@@11| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@11|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1839| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@11|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@12|) (SeqType BoxType))) ($Is |s#0@@12| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@12|) true)) :qid |unknown.0:0| :skolemid |1840| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@12|)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@198 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@457 arg1@@198)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@457 arg1@@198)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |1841| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |1842| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert  (and (forall ((arg0@@458 T@U) (arg1@@199 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@458 arg1@@199)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@458 arg1@@199)) )) (forall ((arg0@@459 T@U) ) (! (= (type (|#$lseq| arg0@@459)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@459)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0@@5| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0@@5|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0@@5|) ($IsBox |l#0@@5| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0@@5|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |1843| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0@@5|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@6| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@6|) BoxType)) ($IsBox |l#0@@6| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@6|) true)) :qid |unknown.0:0| :skolemid |1844| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@6|)) )))
(assert (forall ((arg0@@460 T@U) (arg1@@200 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@460 arg1@@200)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@460 arg1@@200)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@7| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@7|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@7|) ($IsBox |l#0@@7| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@7|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@7|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@7|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |1845| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@7|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@7 T@U) (|l#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |l#0@@8|) BoxType)) (and ($IsGoodHeap $Heap@@7) ($IsBox |l#0@@8| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@8|) true)) :qid |unknown.0:0| :skolemid |1846| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@8|) ($IsGoodHeap $Heap@@7)) )))
(assert  (and (and (and (and (forall ((arg0@@461 T@U) ) (! (= (type (|lambda#82| arg0@@461)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@461)) )) (forall ((arg0@@462 T@U) (arg1@@201 T@U) ) (! (= (type (|lambda#78| arg0@@462 arg1@@201)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@462 arg1@@201)) ))) (forall ((arg0@@463 T@U) (arg1@@202 Int) (arg2@@124 Int) ) (! (= (type (|lambda#79| arg0@@463 arg1@@202 arg2@@124)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@463 arg1@@202 arg2@@124)) ))) (forall ((arg0@@464 T@U) ) (! (= (type (|lambda#81| arg0@@464)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@464)) ))) (forall ((arg0@@465 Bool) ) (! (= (type (|lambda#80| arg0@@465)) (MapType0Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@465)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@8 T@U) (|l#0@@9| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |l#0@@9|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) (and ($IsGoodHeap $Heap@@8) ($IsBox |l#0@@9| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|)) (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) |$l#1#i#0|))))) :qid |unknown.0:0| :skolemid |1847| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) (|Seq#Create| TBool $Heap@@8 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|)) (Lit (AtLayer (|lambda#82| (Handle1 (|lambda#78| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|)) (|lambda#79| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|))) (|lambda#81| (SetRef_to_SetBox (|lambda#80| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |1848| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@9|) ($IsGoodHeap $Heap@@8)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@9 T@U) (|l#0@@10| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |l#0@@10|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) (and ($IsGoodHeap $Heap@@9) ($IsBox |l#0@@10| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|))) (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) |$l#3#i#0|))))) :qid |unknown.0:0| :skolemid |1849| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) (|Seq#Create| TBool $Heap@@9 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|))) (Lit (AtLayer (|lambda#82| (Handle1 (|lambda#78| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|))) (|lambda#79| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)))) (|lambda#81| (SetRef_to_SetBox (|lambda#80| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |1850| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@10|)) ($IsGoodHeap $Heap@@9)) ))))
(assert (forall ((arg0@@466 T@U) (arg1@@203 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@466 arg1@@203)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@466 arg1@@203)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@13|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|) ($Is |s#0@@13| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|)) |s#0@@13|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |1851| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@14|) (SeqType BoxType))) ($Is |s#0@@14| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@14|) true)) :qid |unknown.0:0| :skolemid |1852| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@14|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@15|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) (and ($IsBox |s#0@@15| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@16|) BoxType)) ($IsBox |s#0@@16| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1854| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@204 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@467 arg1@@204)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@467 arg1@@204)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@1| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (and (<= (LitInt 0) |length#0@@1|) (< |length#0@@1| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|))) |length#0@@1|) (forall ((|i#0@@63| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| |length#0@@1|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@63|)))) :qid |LinearSequencesdfy.90:22| :skolemid |1855| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@63|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |1856| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@2| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@2|) (< |length#0@@2| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|) true))) :qid |unknown.0:0| :skolemid |1857| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|)) )))
(assert (forall ((arg0@@468 T@U) (arg1@@205 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@468 arg1@@205)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@468 arg1@@205)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@17|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) (and ($IsBox |s#0@@17| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@64| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) |i#0@@64|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1858| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) |i#0@@64|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1859| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@18|) BoxType)) ($IsBox |s#0@@18| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) |i#1@@5|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1860| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) |i#1@@5|)) )))) :qid |unknown.0:0| :skolemid |1861| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|)) )))
(assert (forall ((arg0@@469 T@U) (arg1@@206 T@U) (arg2@@125 Int) (arg3@@85 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@469 arg1@@206 arg2@@125 arg3@@85)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@469 arg1@@206 arg2@@125 arg3@@85)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@65| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@65| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@65| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@65| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@65|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@65| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@65| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@65| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |1862| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@65| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@66| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@66| |a1#0@@0|) (< |i#0@@66| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |1863| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@66| |a1#0@@0|)) )))
(assert (forall ((arg0@@470 T@U) (arg1@@207 T@U) (arg2@@126 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@470 arg1@@207 arg2@@126)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@470 arg1@@207 arg2@@126)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@19| T@U) (|i#0@@67| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@19|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@67|) (and (and ($IsBox |s#0@@19| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| 18446744073709551616))) (< |i#0@@67| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@67|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19|) |i#0@@67|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@67|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |1864| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@67|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@20| T@U) (|i#0@@68| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@20|) BoxType)) (and ($IsBox |s#0@@20| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20| |i#0@@68|) (< |i#0@@68| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20|))))) :qid |unknown.0:0| :skolemid |1865| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20| |i#0@@68|)) )))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@146)) bx@@146) ($Is ($Unbox refType bx@@146) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |1866| :pattern ( ($IsBox bx@@146 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.SequencesLite.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |1867| :pattern ( ($Is $o@@21 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@72 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.SequencesLite.__default $h@@72)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |1868| :pattern ( ($IsAlloc $o@@22 Tclass.SequencesLite.__default $h@@72)) )))
(assert (forall ((arg0@@471 T@U) (arg1@@208 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@471 arg1@@208)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@471 arg1@@208)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |1869| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |1870| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1871| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1872| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@472 T@U) (arg1@@209 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@472 arg1@@209)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@472 arg1@@209)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1873| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |1874| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1876| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (Options.Option.None_q d@@16) (= (DatatypeCtorId d@@16) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |1877| :pattern ( (Options.Option.None_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (Options.Option.None_q d@@17)) (= d@@17 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1878| :pattern ( (Options.Option.None_q d@@17)) )))
(assert (forall ((arg0@@473 T@U) ) (! (= (type (Tclass.Options.Option arg0@@473)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@473)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@474 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@474)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@474)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1880| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@147 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@147) BoxType)) ($IsBox bx@@147 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@147)) bx@@147) ($Is ($Unbox DatatypeTypeType bx@@147) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1881| :pattern ( ($IsBox bx@@147 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1882| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@73 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@73) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@73)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@73)) :qid |unknown.0:0| :skolemid |1883| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@73)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |1884| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (= (Options.Option.Some_q d@@18) (= (DatatypeCtorId d@@18) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |1885| :pattern ( (Options.Option.Some_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (Options.Option.Some_q d@@19)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@19 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsdfy.5:36| :skolemid |1886| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (Options.Option.Some_q d@@19)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |1888| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@74 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@74)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@74) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@74))) :qid |unknown.0:0| :skolemid |1889| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@74)) )))
(assert (forall ((d@@20 T@U) (Options.Option$V@@6 T@U) ($h@@75 T@U) ) (!  (=> (and (and (and (= (type d@@20) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@75) (and (Options.Option.Some_q d@@20) ($IsAlloc d@@20 (Tclass.Options.Option Options.Option$V@@6) $h@@75)))) ($IsAllocBox (Options.Option.value d@@20) Options.Option$V@@6 $h@@75)) :qid |unknown.0:0| :skolemid |1890| :pattern ( ($IsAllocBox (Options.Option.value d@@20) Options.Option$V@@6 $h@@75)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |1891| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsdfy.5:36| :skolemid |1892| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |1893| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (|$IsA#Options.Option| d@@21)) (or (Options.Option.None_q d@@21) (Options.Option.Some_q d@@21))) :qid |unknown.0:0| :skolemid |1894| :pattern ( (|$IsA#Options.Option| d@@21)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@22 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@22) DatatypeTypeType)) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@22) (Options.Option.Some_q d@@22))) :qid |unknown.0:0| :skolemid |1895| :pattern ( (Options.Option.Some_q d@@22) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@22) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@130 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.None_q a@@130) (Options.Option.None_q b@@67))) (= (|Options.Option#Equal| a@@130 b@@67) true)) :qid |unknown.0:0| :skolemid |1896| :pattern ( (|Options.Option#Equal| a@@130 b@@67) (Options.Option.None_q a@@130)) :pattern ( (|Options.Option#Equal| a@@130 b@@67) (Options.Option.None_q b@@67)) )))
(assert (forall ((a@@131 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (Options.Option.Some_q a@@131) (Options.Option.Some_q b@@68))) (= (|Options.Option#Equal| a@@131 b@@68) (= (Options.Option.value a@@131) (Options.Option.value b@@68)))) :qid |unknown.0:0| :skolemid |1897| :pattern ( (|Options.Option#Equal| a@@131 b@@68) (Options.Option.Some_q a@@131)) :pattern ( (|Options.Option#Equal| a@@131 b@@68) (Options.Option.Some_q b@@68)) )))
(assert (forall ((a@@132 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@132) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (= (|Options.Option#Equal| a@@132 b@@69) (= a@@132 b@@69))) :qid |unknown.0:0| :skolemid |1898| :pattern ( (|Options.Option#Equal| a@@132 b@@69)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@148)) bx@@148) ($Is ($Unbox refType bx@@148) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1899| :pattern ( ($IsBox bx@@148 Tclass.Options.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (= ($Is $o@@23 Tclass.Options.__default)  (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1900| :pattern ( ($Is $o@@23 Tclass.Options.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@76 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@76) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@24 Tclass.Options.__default $h@@76)  (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@24) alloc))))) :qid |unknown.0:0| :skolemid |1901| :pattern ( ($IsAlloc $o@@24 Tclass.Options.__default $h@@76)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@210 T@U) (arg2@@127 T@U) (arg3@@86 T@U) (arg4@@64 T@U) ) (! (= (type (Options.__default.MapOption arg0@@475 arg1@@210 arg2@@127 arg3@@86 arg4@@64)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@475 arg1@@210 arg2@@127 arg3@@86 arg4@@64)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@71|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@71| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@25 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@25) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@25 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@71| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@25))))) (= (MapType1Select (MapType0Select $h0 $o@@25) $f) (MapType1Select (MapType0Select $h1 $o@@25) $f)))) :qid |unknown.0:0| :skolemid |1902| :no-pattern (type $o@@25) :no-pattern (type $f) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@71|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|))) :qid |unknown.0:0| :skolemid |1903| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@71|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@10 T@U) (|opt#0@@0| T@U) (|f#0@@72| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@72|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@72| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |f#0@@72| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |f#0@@72| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1904| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@10 |opt#0@@0| |f#0@@72|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@11 T@U) (|opt#0@@1| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@73|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@11) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@73| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@11 |opt#0@@1| |f#0@@73|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@11 |f#0@@73| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |1905| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@11 |opt#0@@1| |f#0@@73|) ($IsGoodHeap $Heap@@11)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@12 T@U) (|opt#0@@2| T@U) (|f#0@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@74|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@12 |opt#0@@2| |f#0@@74|) (and (and (and ($IsGoodHeap $Heap@@12) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@74| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@12 |f#0@@74| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@12 |opt#0@@2| |f#0@@74|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0@@3| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@12 |f#0@@74| |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |1906| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@12 |opt#0@@2| |f#0@@74|) ($IsGoodHeap $Heap@@12)) ))))
(assert (forall ((arg0@@476 T@U) (arg1@@211 T@U) (arg2@@128 T@U) (arg3@@87 T@U) (arg4@@65 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@476 arg1@@211 arg2@@128 arg3@@87 arg4@@65)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@476 arg1@@211 arg2@@128 arg3@@87 arg4@@65)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@75| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@26 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@26) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@26 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@75| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@26))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@26) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@26) $f@@0)))) :qid |unknown.0:0| :skolemid |1907| :no-pattern (type $o@@26) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@26) :no-pattern (U_2_bool $o@@26) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@75|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|))) :qid |unknown.0:0| :skolemid |1908| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@75|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@13 T@U) (|opt#0@@4| T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@13 |opt#0@@4| |f#0@@76|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@76| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@13 |f#0@@76| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@13 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@13 |opt#0@@4| |f#0@@76|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@13 |f#0@@76| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@13 |opt#0@@4| |f#0@@76|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@13 |f#0@@76| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@13 |opt#0@@4| |f#0@@76|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1909| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@13 |opt#0@@4| |f#0@@76|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@14 T@U) (|opt#0@@5| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@14) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@77| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@14 |opt#0@@5| |f#0@@77|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@14 |f#0@@77| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |1910| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@14 |opt#0@@5| |f#0@@77|) ($IsGoodHeap $Heap@@14)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@15 T@U) (|opt#0@@6| T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@15 |opt#0@@6| |f#0@@78|) (and (and (and ($IsGoodHeap $Heap@@15) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@78| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@15 |f#0@@78| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@15 |opt#0@@6| |f#0@@78|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@4| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@15 |f#0@@78| |v#0@@4|)))))) :qid |unknown.0:0| :skolemid |1911| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@15 |opt#0@@6| |f#0@@78|) ($IsGoodHeap $Heap@@15)) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@149)) bx@@149) ($Is ($Unbox refType bx@@149) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |1912| :pattern ( ($IsBox bx@@149 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (= ($Is $o@@27 Tclass.Mathematics.__default)  (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |1913| :pattern ( ($Is $o@@27 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@28 Tclass.Mathematics.__default $h@@77)  (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@28) alloc))))) :qid |unknown.0:0| :skolemid |1914| :pattern ( ($IsAlloc $o@@28 Tclass.Mathematics.__default $h@@77)) )))
(assert  (=> true (forall ((|a#0@@19| Int) (|b#0@@5| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |1915| :pattern ( (Mathematics.__default.min |a#0@@19| |b#0@@5|)) ))))
(assert (forall ((|a#0@@20| Int) (|b#0@@6| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@20| |b#0@@6|) true) :qid |mathematicsidfy.6:15| :skolemid |1916| :pattern ( (|Mathematics.__default.min#requires| |a#0@@20| |b#0@@6|)) )))
(assert  (=> true (forall ((|a#0@@21| Int) (|b#0@@7| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@21| |b#0@@7|) (ite (< |a#0@@21| |b#0@@7|) |a#0@@21| |b#0@@7|))) :qid |mathematicsidfy.6:15| :skolemid |1917| :pattern ( (Mathematics.__default.min |a#0@@21| |b#0@@7|)) ))))
(assert  (=> true (forall ((|a#0@@22| Int) (|b#0@@8| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@22|) (LitInt |b#0@@8|)) (ite (< |a#0@@22| |b#0@@8|) |a#0@@22| |b#0@@8|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |1918| :pattern ( (Mathematics.__default.min (LitInt |a#0@@22|) (LitInt |b#0@@8|))) ))))
(assert  (=> true (forall ((|a#0@@23| Int) (|b#0@@9| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |1919| :pattern ( (Mathematics.__default.max |a#0@@23| |b#0@@9|)) ))))
(assert (forall ((|a#0@@24| Int) (|b#0@@10| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@24| |b#0@@10|) true) :qid |mathematicsidfy.14:15| :skolemid |1920| :pattern ( (|Mathematics.__default.max#requires| |a#0@@24| |b#0@@10|)) )))
(assert  (=> true (forall ((|a#0@@25| Int) (|b#0@@11| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@25| |b#0@@11|) (ite (< |a#0@@25| |b#0@@11|) |b#0@@11| |a#0@@25|))) :qid |mathematicsidfy.14:15| :skolemid |1921| :pattern ( (Mathematics.__default.max |a#0@@25| |b#0@@11|)) ))))
(assert  (=> true (forall ((|a#0@@26| Int) (|b#0@@12| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@26|) (LitInt |b#0@@12|)) (ite (< |a#0@@26| |b#0@@12|) |b#0@@12| |a#0@@26|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |1922| :pattern ( (Mathematics.__default.max (LitInt |a#0@@26|) (LitInt |b#0@@12|))) ))))
(assert (forall ((arg0@@477 T@U) (arg1@@212 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@477 arg1@@212)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@477 arg1@@212)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |1923| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |1924| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@213 T@U) (arg2@@129 Int) ) (! (= (type (|lambda#88| arg0@@478 arg1@@213 arg2@@129)) (MapType0Type BoxType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@478 arg1@@213 arg2@@129)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#88| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |1925| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#88| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1926| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@479 T@U) (arg1@@214 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@479 arg1@@214)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@479 arg1@@214)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |1927| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |1928| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@215 T@U) ) (! (= (type (|lambda#90| arg0@@480 arg1@@215)) (MapType0Type BoxType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@480 arg1@@215)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#90| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |1929| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#90| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |1930| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@150 T@U) ) (!  (=> (and (= (type bx@@150) BoxType) ($IsBox bx@@150 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@150)) bx@@150) ($Is ($Unbox refType bx@@150) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1931| :pattern ( ($IsBox bx@@150 Tclass.Sequences.__default)) )))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (= ($Is $o@@29 Tclass.Sequences.__default)  (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1932| :pattern ( ($Is $o@@29 Tclass.Sequences.__default)) )))
(assert (forall (($o@@30 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@30 Tclass.Sequences.__default $h@@78)  (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@30) alloc))))) :qid |unknown.0:0| :skolemid |1933| :pattern ( ($IsAlloc $o@@30 Tclass.Sequences.__default $h@@78)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@216 T@U) ) (! (= (type (Sequences.__default.Last arg0@@481 arg1@@216)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@481 arg1@@216)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1934| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |1935| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |1936| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1937| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@482 T@U) (arg1@@217 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@482 arg1@@217)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@482 arg1@@217)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |1938| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |1939| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |1940| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |1941| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((arg0@@483 T@U) (arg1@@218 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@483 arg1@@218)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@483 arg1@@218)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1942| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |1943| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |1944| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1945| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@484 T@U) (arg1@@219 T@U) ) (! (= (type (Sequences.__default.Set arg0@@484 arg1@@219)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@484 arg1@@219)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1946| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |1947| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#88| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |1948| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#88| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1949| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@485 T@U) (arg1@@220 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@485 arg1@@220)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@485 arg1@@220)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1950| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |1951| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#88| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |1952| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#88| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1953| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@71 T@U) (|a#0@@27| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |a#0@@27|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@71) |a#0@@27|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@71 |a#0@@27|))) :qid |unknown.0:0| :skolemid |1954| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@71) |a#0@@27|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@72 T@U) (|a#0@@28| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |a#0@@28|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@72 |a#0@@28|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@28|))) :qid |unknown.0:0| :skolemid |1955| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@72) |a#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@73 T@U) (|a#0@@29| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |a#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@29|) ($Is |a#0@@29| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |1956| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@73 |a#0@@29|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@74 T@U) (|a#0@@30| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |a#0@@30|) (SeqType BoxType))) ($Is |a#0@@30| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@74 |a#0@@30|) true)) :qid |unknown.0:0| :skolemid |1957| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@74 |a#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@75 T@U) (|a#0@@31| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |a#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@31|) ($Is |a#0@@31| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@75) |a#0@@31|) (forall ((|i#0@@69| Int) (|j#0@@3| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| |a#0@@31|))) (and (<= (LitInt 0) |j#0@@3|) (< |j#0@@3| (|Seq#Length| |a#0@@31|)))) (not (= |i#0@@69| |j#0@@3|))) (not (= (|Seq#Index| |a#0@@31| |i#0@@69|) (|Seq#Index| |a#0@@31| |j#0@@3|))))) :qid |Sequencesidfy.66:13| :skolemid |1958| :pattern ( (|Seq#Index| |a#0@@31| |j#0@@3|) (|Seq#Index| |a#0@@31| |i#0@@69|)) )))) :qid |unknown.0:0| :skolemid |1959| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@75) |a#0@@31|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@76 T@U) (|a#0@@32| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |a#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@32|)) ($Is |a#0@@32| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@76) (Lit |a#0@@32|)) (forall ((|i#1@@6| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| (Lit |a#0@@32|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@32|))))) (not (= |i#1@@6| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@32|) |i#1@@6|) (|Seq#Index| (Lit |a#0@@32|) |j#1|))))) :qid |Sequencesidfy.66:13| :skolemid |1960| :pattern ( (|Seq#Index| |a#0@@32| |j#1|) (|Seq#Index| |a#0@@32| |i#1@@6|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |1961| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@76) (Lit |a#0@@32|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@21| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@21| |e#0|) (and (and ($Is |s#0@@21| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@21| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|) (|Seq#Length| |s#0@@21|))) (= (|Seq#Index| |s#0@@21| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1962| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@16 T@U) (|s#0@@22| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@16) ($Is |s#0@@22| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@22| |e#0@@0|) (|Seq#Contains| |s#0@@22| |e#0@@0|))) :qid |unknown.0:0| :skolemid |1963| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@22| |e#0@@0|) ($IsGoodHeap $Heap@@16)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |1964| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@17 T@U) (|s#0@@23| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@17) ($Is |s#0@@23| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@23| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (let ((|i#0@@70| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|))) |i#0@@70|)))) :qid |unknown.0:0| :skolemid |1965| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) ($IsGoodHeap $Heap@@17)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@18 T@U) (|s#0@@24| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |s#0@@24| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@24| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (let ((|i#1@@7| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|))) |i#1@@7|)))) :qid |unknown.0:0| :weight 3 :skolemid |1966| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) ($IsGoodHeap $Heap@@18)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@19 T@U) (|s#0@@25| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |s#0@@25| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@25| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |1967| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@19)) ))))
(assert (forall ((arg0@@486 T@U) (arg1@@221 Int) ) (! (= (type (Sequences.__default.Range arg0@@486 arg1@@221)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@486 arg1@@221)) )))
(assert (forall (($ly@@77 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@77) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@77) |n#0|) (Sequences.__default.Range $ly@@77 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |1968| :pattern ( (Sequences.__default.Range ($LS $ly@@77) |n#0|)) )))
(assert (forall (($ly@@78 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@78) LayerTypeType) (= (Sequences.__default.Range $ly@@78 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |1969| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@78) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@79 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@79) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@79 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@71| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@79 |n#0@@1|) |i#0@@71|))) |i#0@@71|)) :qid |Sequencesidfy.124:20| :skolemid |1970| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@79 |n#0@@1|) |i#0@@71|))) ))) ($Is (Sequences.__default.Range $ly@@79 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |1971| :pattern ( (Sequences.__default.Range $ly@@79 |n#0@@1|)) ))))
(assert (forall (($ly@@80 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@80) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@80 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |1972| :pattern ( (|Sequences.__default.Range#requires| $ly@@80 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@81 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@81) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@81) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@81 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |1973| :pattern ( (Sequences.__default.Range ($LS $ly@@81) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@82 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@82) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@82) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@82) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |1974| :pattern ( (Sequences.__default.Range ($LS $ly@@82) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@487 T@U) (arg1@@222 T@U) (arg2@@130 T@U) (arg3@@88 T@U) (arg4@@66 T@U) (arg5@@47 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@487 arg1@@222 arg2@@130 arg3@@88 arg4@@66 arg5@@47)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@487 arg1@@222 arg2@@130 arg3@@88 arg4@@66 arg5@@47)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@83 T@U) ($Heap@@20 T@U) (|f#0@@79| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@83) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@79|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@83) $Heap@@20 |f#0@@79| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@83 $Heap@@20 |f#0@@79| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@83) $Heap@@20 |f#0@@79| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@84 T@U) ($Heap@@21 T@U) (|f#0@@80| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@84) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@80|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@84 $Heap@@21 |f#0@@80| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@21 |f#0@@80| |run#0@@28|))) :qid |unknown.0:0| :skolemid |1976| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@84) $Heap@@21 |f#0@@80| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@85 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@81| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@85) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@81|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| |run#0@@29|) (and ($Is |f#0@@81| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@31 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@31) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@31 null)) (exists ((|i#0@@72| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@72|)) ($Box |o#0|))))) (= ($Box $o@@31) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |1977| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@81| (|Seq#Index| |run#0@@29| |i#0@@72|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@31) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@31) $f@@1)))) :qid |unknown.0:0| :skolemid |1978| :no-pattern (type $o@@31) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@31) :no-pattern (U_2_bool $o@@31) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@85 $h0@@1 |f#0@@81| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@85 $h1@@1 |f#0@@81| |run#0@@29|))) :qid |unknown.0:0| :skolemid |1979| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@85 $h1@@1 |f#0@@81| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@86 T@U) ($Heap@@22 T@U) (|f#0@@82| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@86) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@82|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@22 |f#0@@82| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@82| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@22 |f#0@@82| (|Seq#Index| |run#0@@30| |i#1@@8|)))) :qid |Sequencesidfy.130:21| :skolemid |1980| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@8|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@86 $Heap@@22 |f#0@@82| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@86 $Heap@@22 |f#0@@82| |run#0@@30|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@22 |f#0@@82| (|Seq#Index| |run#0@@30| |i#2@@0|))))) :qid |Sequencesidfy.132:20| :skolemid |1981| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@86 $Heap@@22 |f#0@@82| |run#0@@30|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@86 $Heap@@22 |f#0@@82| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1982| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@86 $Heap@@22 |f#0@@82| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@87 T@U) ($Heap@@23 T@U) (|f#0@@83| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@87) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@83|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@83| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@87 $Heap@@23 |f#0@@83| |run#0@@31|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@23 |f#0@@83| (|Seq#Index| |run#0@@31| |i#3|)))) :qid |Sequencesidfy.130:21| :skolemid |1983| :pattern ( (|Seq#Index| |run#0@@31| |i#3|)) )))) :qid |unknown.0:0| :skolemid |1984| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@87 $Heap@@23 |f#0@@83| |run#0@@31|) ($IsGoodHeap $Heap@@23)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@88 T@U) ($Heap@@24 T@U) (|f#0@@84| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@88) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@84|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@24 |f#0@@84| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@84| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@24 |f#0@@84| (|Seq#Index| |run#0@@32| |i#3@@0|)))) :qid |Sequencesidfy.130:21| :skolemid |1983| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@0|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@24 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@88) $Heap@@24 |f#0@@84| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@24 |f#0@@84| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@88 $Heap@@24 |f#0@@84| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1985| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@88) $Heap@@24 |f#0@@84| |run#0@@32|) ($IsGoodHeap $Heap@@24)) ))))
(assert (forall ((arg0@@488 T@U) (arg1@@223 T@U) (arg2@@131 T@U) (arg3@@89 T@U) (arg4@@67 T@U) (arg5@@48 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@488 arg1@@223 arg2@@131 arg3@@89 arg4@@67 arg5@@48)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@488 arg1@@223 arg2@@131 arg3@@89 arg4@@67 arg5@@48)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@89 T@U) ($Heap@@25 T@U) (|f#0@@85| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@89) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@85|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@89) $Heap@@25 |f#0@@85| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@89 $Heap@@25 |f#0@@85| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1986| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@89) $Heap@@25 |f#0@@85| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@90 T@U) ($Heap@@26 T@U) (|f#0@@86| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@90) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@86|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@90 $Heap@@26 |f#0@@86| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@26 |f#0@@86| |run#0@@34|))) :qid |unknown.0:0| :skolemid |1987| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@90) $Heap@@26 |f#0@@86| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@91 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@87| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@91) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| |run#0@@35|) (and ($Is |f#0@@87| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@32 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@32) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@32 null)) (exists ((|i#0@@73| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@73|)) ($Box |o#0@@0|))))) (= ($Box $o@@32) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |1988| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@87| (|Seq#Index| |run#0@@35| |i#0@@73|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@32) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@32) $f@@2)))) :qid |unknown.0:0| :skolemid |1989| :no-pattern (type $o@@32) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@32) :no-pattern (U_2_bool $o@@32) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@91 $h0@@2 |f#0@@87| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@91 $h1@@2 |f#0@@87| |run#0@@35|))) :qid |unknown.0:0| :skolemid |1990| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@91 $h1@@2 |f#0@@87| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@92 T@U) ($Heap@@27 T@U) (|f#0@@88| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@92) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@27 |f#0@@88| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@88| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@27 |f#0@@88| (|Seq#Index| |run#0@@36| |i#1@@9|)))) :qid |Sequencesidfy.141:21| :skolemid |1991| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@9|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@92 $Heap@@27 |f#0@@88| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@92 $Heap@@27 |f#0@@88| |run#0@@36|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@27 |f#0@@88| (|Seq#Index| |run#0@@36| |i#2@@1|))))) :qid |Sequencesidfy.143:20| :skolemid |1992| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@92 $Heap@@27 |f#0@@88| |run#0@@36|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@92 $Heap@@27 |f#0@@88| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1993| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@92 $Heap@@27 |f#0@@88| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@93 T@U) ($Heap@@28 T@U) (|f#0@@89| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@93) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@89| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@93 $Heap@@28 |f#0@@89| |run#0@@37|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@28 |f#0@@89| (|Seq#Index| |run#0@@37| |i#3@@1|)))) :qid |Sequencesidfy.141:21| :skolemid |1994| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@1|)) )))) :qid |unknown.0:0| :skolemid |1995| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@93 $Heap@@28 |f#0@@89| |run#0@@37|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@94 T@U) ($Heap@@29 T@U) (|f#0@@90| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@94) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@29 |f#0@@90| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@90| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@29 |f#0@@90| (|Seq#Index| |run#0@@38| |i#3@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |1994| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@2|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@29 |f#0@@90| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@94) $Heap@@29 |f#0@@90| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@29 |f#0@@90| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |1996| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@94) $Heap@@29 |f#0@@90| |run#0@@38|) ($IsGoodHeap $Heap@@29)) ))))
(assert (forall ((arg0@@489 T@U) (arg1@@224 T@U) (arg2@@132 T@U) (arg3@@90 T@U) (arg4@@68 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@489 arg1@@224 arg2@@132 arg3@@90 arg4@@68)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@489 arg1@@224 arg2@@132 arg3@@90 arg4@@68)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@95 T@U) ($Heap@@30 T@U) (|f#0@@91| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@95) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@95) $Heap@@30 |f#0@@91| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@95 $Heap@@30 |f#0@@91| |run#0@@39|))) :qid |unknown.0:0| :skolemid |1997| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@95) $Heap@@30 |f#0@@91| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@96 T@U) ($Heap@@31 T@U) (|f#0@@92| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@96) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@96 $Heap@@31 |f#0@@92| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@31 |f#0@@92| |run#0@@40|))) :qid |unknown.0:0| :skolemid |1998| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@96) $Heap@@31 |f#0@@92| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@97 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@93| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@97) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@93| |run#0@@41|) (and ($Is |f#0@@93| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@33 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@33) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@33 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@93| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@33) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |1999| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@33) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@33) $f@@3)))) :qid |unknown.0:0| :skolemid |2000| :no-pattern (type $o@@33) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@33) :no-pattern (U_2_bool $o@@33) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@97 $h0@@3 |f#0@@93| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@97 $h1@@3 |f#0@@93| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2001| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@97 $h1@@3 |f#0@@93| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@98 T@U) ($Heap@@32 T@U) (|f#0@@94| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@98) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@32 |f#0@@94| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@94| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@74| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@32 |f#0@@94| (|Seq#Index| |run#0@@42| |i#0@@74|)))) :qid |Sequencesidfy.150:21| :skolemid |2002| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@74|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@10| Int) ) (!  (=> (<= (LitInt 0) |i#1@@10|) (=> (and (< |i#1@@10| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@32 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|) |i#1@@10|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@32 |f#0@@94| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|) |i#1@@10|)))))) :qid |Sequencesidfy.152:20| :skolemid |2003| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|) |i#1@@10|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2004| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@98 $Heap@@32 |f#0@@94| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@99 T@U) ($Heap@@33 T@U) (|f#0@@95| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@99) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@95| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@99 $Heap@@33 |f#0@@95| |run#0@@43|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@33 |f#0@@95| (|Seq#Index| |run#0@@43| |i#2@@2|)))) :qid |Sequencesidfy.150:21| :skolemid |2005| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@2|)) )))) :qid |unknown.0:0| :skolemid |2006| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@99 $Heap@@33 |f#0@@95| |run#0@@43|) ($IsGoodHeap $Heap@@33)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@100 T@U) ($Heap@@34 T@U) (|f#0@@96| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@100) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@34 |f#0@@96| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@96| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@34 |f#0@@96| (|Seq#Index| |run#0@@44| |i#2@@3|)))) :qid |Sequencesidfy.150:21| :skolemid |2005| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@34 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@100) $Heap@@34 |f#0@@96| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@34 |f#0@@96| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@100 $Heap@@34 |f#0@@96| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2007| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@100) $Heap@@34 |f#0@@96| |run#0@@44|) ($IsGoodHeap $Heap@@34)) ))))
(assert (forall ((arg0@@490 T@U) (arg1@@225 T@U) (arg2@@133 T@U) (arg3@@91 T@U) (arg4@@69 T@U) (arg5@@49 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@490 arg1@@225 arg2@@133 arg3@@91 arg4@@69 arg5@@49)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@490 arg1@@225 arg2@@133 arg3@@91 arg4@@69 arg5@@49)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@101 T@U) (|f#0@@97| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@101) LayerTypeType)) (= (type |f#0@@97|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@101) |f#0@@97| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@101 |f#0@@97| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |2008| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@101) |f#0@@97| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@102 T@U) (|f#0@@98| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@102) LayerTypeType)) (= (type |f#0@@98|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@102 |f#0@@98| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@98| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |2009| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@102) |f#0@@98| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@103 T@U) (|f#0@@99| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@103) LayerTypeType)) (= (type |f#0@@99|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@99| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@99| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@103 |f#0@@99| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2010| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@103 |f#0@@99| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@104 T@U) ($Heap@@35 T@U) (|f#0@@100| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@104) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@100|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@100| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@104 |f#0@@100| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |2011| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@104 |f#0@@100| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@105 T@U) ($Heap@@36 T@U) (|f#0@@101| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@105) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@101|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@101| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@36 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@105) |f#0@@101| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@105 |f#0@@101| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@36 |f#0@@101| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2012| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@105) |f#0@@101| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@106 T@U) ($Heap@@37 T@U) (|f#0@@102| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@106) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@102|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@102| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@37 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@106) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@106) |f#0@@102| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@37 |f#0@@102| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2013| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@106) |f#0@@102| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@107 T@U) ($Heap@@38 T@U) (|f#0@@103| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@107) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@103|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@103| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@38 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@107) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@107) (Lit |f#0@@103|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@38 (Lit |f#0@@103|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2014| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@107) (Lit |f#0@@103|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@38)) ))))
(assert (forall ((arg0@@491 T@U) (arg1@@226 T@U) (arg2@@134 T@U) (arg3@@92 T@U) (arg4@@70 T@U) (arg5@@50 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@491 arg1@@226 arg2@@134 arg3@@92 arg4@@70 arg5@@50)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@491 arg1@@226 arg2@@134 arg3@@92 arg4@@70 arg5@@50)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@108 T@U) (|f#0@@104| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@108) LayerTypeType)) (= (type |f#0@@104|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@108) |f#0@@104| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@108 |f#0@@104| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |2015| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@108) |f#0@@104| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@109 T@U) (|f#0@@105| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@109) LayerTypeType)) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@109 |f#0@@105| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@105| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |2016| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@109) |f#0@@105| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@110 T@U) (|f#0@@106| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@110) LayerTypeType)) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@106| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@106| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@110 |f#0@@106| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2017| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@110 |f#0@@106| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@111 T@U) ($Heap@@39 T@U) (|f#0@@107| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@111) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@39) ($Is |f#0@@107| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@111 |f#0@@107| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |2018| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@111 |f#0@@107| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@39)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@112 T@U) ($Heap@@40 T@U) (|f#0@@108| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@112) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@40) ($Is |f#0@@108| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@112) |f#0@@108| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@40 |f#0@@108| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@112 |f#0@@108| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2019| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@112) |f#0@@108| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@40)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@113 T@U) ($Heap@@41 T@U) (|f#0@@109| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@113) LayerTypeType)) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@41) ($Is |f#0@@109| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@113) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@41 |f#0@@109| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@113) |f#0@@109| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2020| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@113) |f#0@@109| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@41)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@114 T@U) ($Heap@@42 T@U) (|f#0@@110| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@114) LayerTypeType)) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@42) ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@114) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@42 (Lit |f#0@@110|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@114) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2021| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@114) (Lit |f#0@@110|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@42)) ))))
(assert (forall ((arg0@@492 T@U) (arg1@@227 T@U) (arg2@@135 T@U) (arg3@@93 T@U) (arg4@@71 T@U) (arg5@@51 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@492 arg1@@227 arg2@@135 arg3@@93 arg4@@71 arg5@@51)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@492 arg1@@227 arg2@@135 arg3@@93 arg4@@71 arg5@@51)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@115 T@U) (|f#0@@111| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@115) LayerTypeType)) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@115) |f#0@@111| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@115 |f#0@@111| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |2022| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@115) |f#0@@111| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@116 T@U) (|f#0@@112| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@116) LayerTypeType)) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@116 |f#0@@112| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@112| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |2023| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@116) |f#0@@112| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@117 T@U) (|f#0@@113| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@117) LayerTypeType)) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@113| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@113| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@117 |f#0@@113| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2024| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@117 |f#0@@113| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@118 T@U) ($Heap@@43 T@U) (|f#0@@114| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@118) LayerTypeType)) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@43) ($Is |f#0@@114| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@118 |f#0@@114| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |2025| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@118 |f#0@@114| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@43)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@119 T@U) ($Heap@@44 T@U) (|f#0@@115| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@119) LayerTypeType)) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@44) ($Is |f#0@@115| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@119) |f#0@@115| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@44 |f#0@@115| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@119 |f#0@@115| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |2026| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@119) |f#0@@115| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@44)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@120 T@U) ($Heap@@45 T@U) (|f#0@@116| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@120) LayerTypeType)) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@45) ($Is |f#0@@116| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@120) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@45 |f#0@@116| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@120) |f#0@@116| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2027| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@120) |f#0@@116| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@45)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@121 T@U) ($Heap@@46 T@U) (|f#0@@117| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@121) LayerTypeType)) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@46) ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@121) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@46 (Lit |f#0@@117|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@121) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2028| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@121) (Lit |f#0@@117|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@46)) ))))
(assert (forall ((arg0@@493 T@U) (arg1@@228 T@U) (arg2@@136 T@U) (arg3@@94 Int) ) (! (= (type (Sequences.__default.remove arg0@@493 arg1@@228 arg2@@136 arg3@@94)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@493 arg1@@228 arg2@@136 arg3@@94)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@122 T@U) (|s#0@@26| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@122) |s#0@@26| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@122 |s#0@@26| |pos#0|))) :qid |unknown.0:0| :skolemid |2029| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@122) |s#0@@26| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@123 T@U) (|s#0@@27| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@123 |s#0@@27| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@27| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2030| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@123) |s#0@@27| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@124 T@U) (|s#0@@28| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@28| |pos#0@@1|) (and ($Is |s#0@@28| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@28|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|)) (- (|Seq#Length| |s#0@@28|) 1)) (forall ((|i#0@@75| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|) |i#0@@75|) (|Seq#Index| |s#0@@28| |i#0@@75|))) :qid |Sequencesidfy.180:18| :skolemid |2031| :pattern ( (|Seq#Index| |s#0@@28| |i#0@@75|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|) |i#0@@75|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@11|) (< |i#1@@11| (- (|Seq#Length| |s#0@@28|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|) |i#1@@11|) (|Seq#Index| |s#0@@28| (+ |i#1@@11| 1)))) :qid |Sequencesidfy.181:18| :skolemid |2032| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|) |i#1@@11|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2033| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@124 |s#0@@28| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@125 T@U) (|s#0@@29| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) ($Is |s#0@@29| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@125 |s#0@@29| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@29|))))) :qid |unknown.0:0| :skolemid |2034| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@125 |s#0@@29| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@126 T@U) (|s#0@@30| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@30| |pos#0@@3|) (and ($Is |s#0@@30| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@30|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@126) |s#0@@30| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@30| |pos#0@@3|) (|Seq#Drop| |s#0@@30| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2035| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@126) |s#0@@30| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@127 T@U) (|s#0@@31| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@31| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@31|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@127) (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@31|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2036| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@127) (Lit |s#0@@31|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@494 T@U) (arg1@@229 T@U) (arg2@@137 T@U) (arg3@@95 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@494 arg1@@229 arg2@@137 arg3@@95)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@494 arg1@@229 arg2@@137 arg3@@95)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@128 T@U) (|s#0@@32| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@128) |s#0@@32| |v#0@@5|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@128 |s#0@@32| |v#0@@5|))) :qid |unknown.0:0| :skolemid |2037| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@128) |s#0@@32| |v#0@@5|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@129 T@U) (|s#0@@33| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@129 |s#0@@33| |v#0@@6|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@33| |v#0@@6|))) :qid |unknown.0:0| :skolemid |2038| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@129) |s#0@@33| |v#0@@6|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@130 T@U) (|s#0@@34| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@34| |v#0@@7|) (and ($Is |s#0@@34| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@7| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@34|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@130 |s#0@@34| |v#0@@7|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@130 |s#0@@34| |v#0@@7|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@34|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@7|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@130 |s#0@@34| |v#0@@7|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@130 |s#0@@34| |v#0@@7|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@131 T@U) ($Heap@@47 T@U) (|s#0@@35| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@131) LayerTypeType)) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |v#0@@8|) BoxType)) (and (and ($IsGoodHeap $Heap@@47) ($Is |s#0@@35| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@8| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@131 |s#0@@35| |v#0@@8|) true)) :qid |unknown.0:0| :skolemid |2040| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@131 |s#0@@35| |v#0@@8|) ($IsGoodHeap $Heap@@47)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52))) :qid |Sequencesidfy.191:5| :skolemid |2041| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@132 T@U) ($Heap@@48 T@U) (|s#0@@36| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@132) LayerTypeType)) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |v#0@@9|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|) (and (and ($IsGoodHeap $Heap@@48) ($Is |s#0@@36| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@9| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@36| |v#0@@9|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@132) |s#0@@36| |v#0@@9|) (ite  (not (|Seq#Contains| |s#0@@36| |v#0@@9|)) |s#0@@36| (let ((|i#0@@76| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|))) (|Seq#Append| (|Seq#Take| |s#0@@36| |i#0@@76|) (|Seq#Drop| |s#0@@36| (+ |i#0@@76| 1))))))))) :qid |unknown.0:0| :skolemid |2042| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@132) |s#0@@36| |v#0@@9|) ($IsGoodHeap $Heap@@48)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@133 T@U) ($Heap@@49 T@U) (|s#0@@37| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@133) LayerTypeType)) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|) (and (and ($IsGoodHeap $Heap@@49) ($Is |s#0@@37| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@10| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@37| |v#0@@10|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@133) (Lit |s#0@@37|) |v#0@@10|) (ite  (not (|Seq#Contains| |s#0@@37| |v#0@@10|)) |s#0@@37| (let ((|i#1@@12| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) |i#1@@12|) (|Seq#Drop| (Lit |s#0@@37|) (+ |i#1@@12| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2043| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@133) (Lit |s#0@@37|) |v#0@@10|) ($IsGoodHeap $Heap@@49)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@134 T@U) ($Heap@@50 T@U) (|s#0@@38| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@134) LayerTypeType)) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |v#0@@11|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|)) (and (and ($IsGoodHeap $Heap@@50) ($Is |s#0@@38| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@11| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@38| |v#0@@11|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@134) (Lit |s#0@@38|) (Lit |v#0@@11|)) (ite  (not (|Seq#Contains| |s#0@@38| |v#0@@11|)) |s#0@@38| (let ((|i#2@@4| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@38|) |i#2@@4|) (|Seq#Drop| (Lit |s#0@@38|) (+ |i#2@@4| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2044| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@134) (Lit |s#0@@38|) (Lit |v#0@@11|)) ($IsGoodHeap $Heap@@50)) ))))
(assert (forall ((arg0@@495 T@U) (arg1@@230 T@U) (arg2@@138 T@U) (arg3@@96 T@U) (arg4@@72 Int) ) (! (= (type (Sequences.__default.insert arg0@@495 arg1@@230 arg2@@138 arg3@@96 arg4@@72)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@495 arg1@@230 arg2@@138 arg3@@96 arg4@@72)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@135 T@U) (|s#0@@39| T@U) (|a#0@@33| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@135) |s#0@@39| |a#0@@33| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@135 |s#0@@39| |a#0@@33| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2045| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@135) |s#0@@39| |a#0@@33| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@136 T@U) (|s#0@@40| T@U) (|a#0@@34| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@136 |s#0@@40| |a#0@@34| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@40| |a#0@@34| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2046| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@136) |s#0@@40| |a#0@@34| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@137 T@U) (|s#0@@41| T@U) (|a#0@@35| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@41| |a#0@@35| |pos#0@@7|) (and (and ($Is |s#0@@41| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@35| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@41|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@41|) 1)) (forall ((|i#0@@77| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|) |i#0@@77|) (|Seq#Index| |s#0@@41| |i#0@@77|)))) :qid |Sequencesidfy.198:18| :skolemid |2047| :pattern ( (|Seq#Index| |s#0@@41| |i#0@@77|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|) |i#0@@77|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@13|) (< |i#1@@13| (|Seq#Length| |s#0@@41|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|) (+ |i#1@@13| 1)) (|Seq#Index| |s#0@@41| |i#1@@13|)))) :qid |Sequencesidfy.199:18| :skolemid |2048| :pattern ( (|Seq#Index| |s#0@@41| |i#1@@13|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|) |pos#0@@7|) |a#0@@35|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2049| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@137 |s#0@@41| |a#0@@35| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@138 T@U) (|s#0@@42| T@U) (|a#0@@36| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (and ($Is |s#0@@42| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@36| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@138 |s#0@@42| |a#0@@36| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@42|))))) :qid |unknown.0:0| :skolemid |2050| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@138 |s#0@@42| |a#0@@36| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@139 T@U) (|s#0@@43| T@U) (|a#0@@37| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@43| |a#0@@37| |pos#0@@9|) (and (and ($Is |s#0@@43| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@37| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@43|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@139) |s#0@@43| |a#0@@37| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@43| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|)) (|Seq#Drop| |s#0@@43| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2051| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@139) |s#0@@43| |a#0@@37| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@140 T@U) (|s#0@@44| T@U) (|a#0@@38| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@44|) |a#0@@38| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@44| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@38| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@44|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@140) (Lit |s#0@@44|) |a#0@@38| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@44|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@38|)) (|Seq#Drop| (Lit |s#0@@44|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2052| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@140) (Lit |s#0@@44|) |a#0@@38| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@141 T@U) (|s#0@@45| T@U) (|a#0@@39| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@45|) (Lit |a#0@@39|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@45| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@39| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@45|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@141) (Lit |s#0@@45|) (Lit |a#0@@39|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@45|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@39|))) (|Seq#Drop| (Lit |s#0@@45|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2053| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@141) (Lit |s#0@@45|) (Lit |a#0@@39|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@496 T@U) (arg1@@231 T@U) (arg2@@139 T@U) (arg3@@97 T@U) (arg4@@73 T@U) (arg5@@52 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@496 arg1@@231 arg2@@139 arg3@@97 arg4@@73 arg5@@52)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@496 arg1@@231 arg2@@139 arg3@@97 arg4@@73 arg5@@52)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@142 T@U) (|s#0@@46| T@U) (|a#0@@40| T@U) (|b#0@@13| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (type |b#0@@13|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@142) |s#0@@46| |a#0@@40| |b#0@@13| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@142 |s#0@@46| |a#0@@40| |b#0@@13| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2054| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@142) |s#0@@46| |a#0@@40| |b#0@@13| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@143 T@U) (|s#0@@47| T@U) (|a#0@@41| T@U) (|b#0@@14| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (= (type |b#0@@14|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@143 |s#0@@47| |a#0@@41| |b#0@@14| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@47| |a#0@@41| |b#0@@14| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2055| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@143) |s#0@@47| |a#0@@41| |b#0@@14| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@144 T@U) (|s#0@@48| T@U) (|a#0@@42| T@U) (|b#0@@15| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (= (type |b#0@@15|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) (and (and (and ($Is |s#0@@48| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@42| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@48|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@48|) 1)) (forall ((|i#0@@78| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) |i#0@@78|) (|Seq#Index| |s#0@@48| |i#0@@78|)))) :qid |Sequencesidfy.223:18| :skolemid |2056| :pattern ( (|Seq#Index| |s#0@@48| |i#0@@78|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) |i#0@@78|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@14|) (< |i#1@@14| (|Seq#Length| |s#0@@48|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) (+ |i#1@@14| 1)) (|Seq#Index| |s#0@@48| |i#1@@14|)))) :qid |Sequencesidfy.224:18| :skolemid |2057| :pattern ( (|Seq#Index| |s#0@@48| |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) |pos#0@@14|) |a#0@@42|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@15|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@144 |s#0@@48| |a#0@@42| |b#0@@15| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@145 T@U) (|s#0@@49| T@U) (|a#0@@43| T@U) (|b#0@@16| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |s#0@@49|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (= (type |b#0@@16|) BoxType)) (and (and ($Is |s#0@@49| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@43| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@16| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@145 |s#0@@49| |a#0@@43| |b#0@@16| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@49|))))) :qid |unknown.0:0| :skolemid |2059| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@145 |s#0@@49| |a#0@@43| |b#0@@16| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@146 T@U) (|s#0@@50| T@U) (|a#0@@44| T@U) (|b#0@@17| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |s#0@@50|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (= (type |b#0@@17|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@50| |a#0@@44| |b#0@@17| |pos#0@@16|) (and (and (and ($Is |s#0@@50| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@44| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@17| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@50|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@146) |s#0@@50| |a#0@@44| |b#0@@17| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@50| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@44|) |b#0@@17|)) (|Seq#Drop| |s#0@@50| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2060| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@146) |s#0@@50| |a#0@@44| |b#0@@17| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@147 T@U) (|s#0@@51| T@U) (|a#0@@45| T@U) (|b#0@@18| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |s#0@@51|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (= (type |b#0@@18|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@51|) |a#0@@45| |b#0@@18| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@51| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@45| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@18| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@51|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@147) (Lit |s#0@@51|) |a#0@@45| |b#0@@18| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@51|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@45|) |b#0@@18|)) (|Seq#Drop| (Lit |s#0@@51|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2061| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@147) (Lit |s#0@@51|) |a#0@@45| |b#0@@18| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@148 T@U) (|s#0@@52| T@U) (|a#0@@46| T@U) (|b#0@@19| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |s#0@@52|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (= (type |b#0@@19|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@52|) (Lit |a#0@@46|) (Lit |b#0@@19|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@52| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@46| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@19| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@52|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@148) (Lit |s#0@@52|) (Lit |a#0@@46|) (Lit |b#0@@19|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@52|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@46|)) (Lit |b#0@@19|))) (|Seq#Drop| (Lit |s#0@@52|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2062| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@148) (Lit |s#0@@52|) (Lit |a#0@@46|) (Lit |b#0@@19|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@497 T@U) (arg1@@232 T@U) (arg2@@140 T@U) (arg3@@98 T@U) (arg4@@74 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@497 arg1@@232 arg2@@140 arg3@@98 arg4@@74)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@497 arg1@@232 arg2@@140 arg3@@98 arg4@@74)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@149 T@U) (|s#0@@53| T@U) (|a#0@@47| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |s#0@@53|) (SeqType BoxType))) (= (type |a#0@@47|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@149) |s#0@@53| |a#0@@47| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@149 |s#0@@53| |a#0@@47| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2063| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@149) |s#0@@53| |a#0@@47| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@150 T@U) (|s#0@@54| T@U) (|a#0@@48| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |s#0@@54|) (SeqType BoxType))) (= (type |a#0@@48|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@150 |s#0@@54| |a#0@@48| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@54| |a#0@@48| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2064| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@150) |s#0@@54| |a#0@@48| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@151 T@U) (|s#0@@55| T@U) (|a#0@@49| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |a#0@@49|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@55| |a#0@@49| |pos#0@@21|) (and (and ($Is |s#0@@55| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@49| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@55|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|)) (- (|Seq#Length| |s#0@@55|) 1)) (forall ((|i#0@@79| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) |i#0@@79|) (|Seq#Index| |s#0@@55| |i#0@@79|)))) :qid |Sequencesidfy.242:18| :skolemid |2065| :pattern ( (|Seq#Index| |s#0@@55| |i#0@@79|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) |i#0@@79|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@15|) (< |i#1@@15| (- (|Seq#Length| |s#0@@55|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) |i#1@@15|) (|Seq#Index| |s#0@@55| (+ |i#1@@15| 1))))) :qid |Sequencesidfy.243:18| :skolemid |2066| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) |i#1@@15|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) |pos#0@@21|) |a#0@@49|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2067| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@151 |s#0@@55| |a#0@@49| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@152 T@U) (|s#0@@56| T@U) (|a#0@@50| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |a#0@@50|) BoxType)) (and ($Is |s#0@@56| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@50| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@152 |s#0@@56| |a#0@@50| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@56|) 1))))) :qid |unknown.0:0| :skolemid |2068| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@152 |s#0@@56| |a#0@@50| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@153 T@U) (|s#0@@57| T@U) (|a#0@@51| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |a#0@@51|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@57| |a#0@@51| |pos#0@@23|) (and (and ($Is |s#0@@57| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@51| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@57|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@153) |s#0@@57| |a#0@@51| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@57| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@51|)) (|Seq#Drop| |s#0@@57| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2069| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@153) |s#0@@57| |a#0@@51| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@154 T@U) (|s#0@@58| T@U) (|a#0@@52| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |a#0@@52|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@58|) |a#0@@52| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@58| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@52| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@58|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@154) (Lit |s#0@@58|) |a#0@@52| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@58|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@52|)) (|Seq#Drop| (Lit |s#0@@58|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2070| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@154) (Lit |s#0@@58|) |a#0@@52| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@155 T@U) (|s#0@@59| T@U) (|a#0@@53| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |a#0@@53|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@59|) (Lit |a#0@@53|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@59| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@53| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@59|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@155) (Lit |s#0@@59|) (Lit |a#0@@53|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@59|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@53|))) (|Seq#Drop| (Lit |s#0@@59|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2071| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@155) (Lit |s#0@@59|) (Lit |a#0@@53|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@498 T@U) (arg1@@233 T@U) (arg2@@141 T@U) (arg3@@99 T@U) ) (! (= (type (Sequences.__default.concat arg0@@498 arg1@@233 arg2@@141 arg3@@99)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@498 arg1@@233 arg2@@141 arg3@@99)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@156 T@U) (|a#0@@54| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@156) |a#0@@54| |b#0@@20|) (Sequences.__default.concat Sequences._default.concat$A $ly@@156 |a#0@@54| |b#0@@20|))) :qid |unknown.0:0| :skolemid |2072| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@156) |a#0@@54| |b#0@@20|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@157 T@U) (|a#0@@55| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@157 |a#0@@55| |b#0@@21|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@55| |b#0@@21|))) :qid |unknown.0:0| :skolemid |2073| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@157) |a#0@@55| |b#0@@21|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@158 T@U) (|a#0@@56| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@56| |b#0@@22|) (and ($Is |a#0@@56| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@22| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|)) (+ (|Seq#Length| |a#0@@56|) (|Seq#Length| |b#0@@22|))) (forall ((|i#0@@80| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| (|Seq#Length| |a#0@@56|))) (= (|Seq#Index| |a#0@@56| |i#0@@80|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|) |i#0@@80|)))) :qid |Sequencesidfy.251:18| :skolemid |2074| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|) |i#0@@80|)) :pattern ( (|Seq#Index| |a#0@@56| |i#0@@80|)) ))) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| |b#0@@22|))) (= (|Seq#Index| |b#0@@22| |i#1@@16|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|) (+ (|Seq#Length| |a#0@@56|) |i#1@@16|))))) :qid |Sequencesidfy.252:18| :skolemid |2075| :pattern ( (|Seq#Index| |b#0@@22| |i#1@@16|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2076| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@158 |a#0@@56| |b#0@@22|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@159 T@U) (|a#0@@57| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (and ($Is |a#0@@57| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@23| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@159 |a#0@@57| |b#0@@23|) true)) :qid |unknown.0:0| :skolemid |2077| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@159 |a#0@@57| |b#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@160 T@U) (|a#0@@58| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@58| |b#0@@24|) (and ($Is |a#0@@58| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@24| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@160) |a#0@@58| |b#0@@24|) (|Seq#Append| |a#0@@58| |b#0@@24|))) :qid |unknown.0:0| :skolemid |2078| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@160) |a#0@@58| |b#0@@24|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@161 T@U) (|a#0@@59| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@59|) (Lit |b#0@@25|)) (and ($Is |a#0@@59| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@25| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@161) (Lit |a#0@@59|) (Lit |b#0@@25|)) (|Seq#Append| |a#0@@59| |b#0@@25|))) :qid |unknown.0:0| :weight 3 :skolemid |2079| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@161) (Lit |a#0@@59|) (Lit |b#0@@25|))) ))))
(assert (forall ((arg0@@499 T@U) (arg1@@234 T@U) (arg2@@142 T@U) (arg3@@100 T@U) (arg4@@75 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@499 arg1@@234 arg2@@142 arg3@@100 arg4@@75)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@499 arg1@@234 arg2@@142 arg3@@100 arg4@@75)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@162 T@U) (|a#0@@60| T@U) (|b#0@@26| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@162) |a#0@@60| |b#0@@26| |c#0@@7|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@162 |a#0@@60| |b#0@@26| |c#0@@7|))) :qid |unknown.0:0| :skolemid |2080| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@162) |a#0@@60| |b#0@@26| |c#0@@7|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@163 T@U) (|a#0@@61| T@U) (|b#0@@27| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@163 |a#0@@61| |b#0@@27| |c#0@@8|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@61| |b#0@@27| |c#0@@8|))) :qid |unknown.0:0| :skolemid |2081| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@163) |a#0@@61| |b#0@@27| |c#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@164 T@U) (|a#0@@62| T@U) (|b#0@@28| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@62| |b#0@@28| |c#0@@9|) (and (and ($Is |a#0@@62| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@1)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|)) (+ (+ (|Seq#Length| |a#0@@62|) (|Seq#Length| |c#0@@9|)) 1)) (forall ((|i#0@@81| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (|Seq#Length| |a#0@@62|))) (= (|Seq#Index| |a#0@@62| |i#0@@81|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|) |i#0@@81|)))) :qid |Sequencesidfy.259:18| :skolemid |2082| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|) |i#0@@81|)) :pattern ( (|Seq#Index| |a#0@@62| |i#0@@81|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|) (|Seq#Length| |a#0@@62|)) |b#0@@28|)) (forall ((|i#1@@17| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |c#0@@9|))) (= (|Seq#Index| |c#0@@9| |i#1@@17|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|) (+ (+ (|Seq#Length| |a#0@@62|) 1) |i#1@@17|))))) :qid |Sequencesidfy.261:18| :skolemid |2083| :pattern ( (|Seq#Index| |c#0@@9| |i#1@@17|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2084| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@164 |a#0@@62| |b#0@@28| |c#0@@9|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@165 T@U) (|a#0@@63| T@U) (|b#0@@29| T@U) (|c#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@29|) BoxType)) (= (type |c#0@@10|) (SeqType BoxType))) (and (and ($Is |a#0@@63| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@29| Sequences._default.concat3$A@@2)) ($Is |c#0@@10| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@165 |a#0@@63| |b#0@@29| |c#0@@10|) true)) :qid |unknown.0:0| :skolemid |2085| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@165 |a#0@@63| |b#0@@29| |c#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@166 T@U) (|a#0@@64| T@U) (|b#0@@30| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@64| |b#0@@30| |c#0@@11|) (and (and ($Is |a#0@@64| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@30| Sequences._default.concat3$A@@3)) ($Is |c#0@@11| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@166) |a#0@@64| |b#0@@30| |c#0@@11|) (|Seq#Append| (|Seq#Append| |a#0@@64| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@30|)) |c#0@@11|))) :qid |unknown.0:0| :skolemid |2086| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@166) |a#0@@64| |b#0@@30| |c#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@167 T@U) (|a#0@@65| T@U) (|b#0@@31| T@U) (|c#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@65|) |b#0@@31| (Lit |c#0@@12|)) (and (and ($Is |a#0@@65| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@31| Sequences._default.concat3$A@@4)) ($Is |c#0@@12| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@167) (Lit |a#0@@65|) |b#0@@31| (Lit |c#0@@12|)) (|Seq#Append| (|Seq#Append| |a#0@@65| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@31|)) |c#0@@12|))) :qid |unknown.0:0| :weight 3 :skolemid |2087| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@167) (Lit |a#0@@65|) |b#0@@31| (Lit |c#0@@12|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@168 T@U) (|a#0@@66| T@U) (|b#0@@32| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@32|) BoxType)) (= (type |c#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@66|) (Lit |b#0@@32|) (Lit |c#0@@13|)) (and (and ($Is |a#0@@66| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@32| Sequences._default.concat3$A@@5)) ($Is |c#0@@13| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@168) (Lit |a#0@@66|) (Lit |b#0@@32|) (Lit |c#0@@13|)) (|Seq#Append| (|Seq#Append| |a#0@@66| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@32|))) |c#0@@13|))) :qid |unknown.0:0| :weight 3 :skolemid |2088| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@168) (Lit |a#0@@66|) (Lit |b#0@@32|) (Lit |c#0@@13|))) ))))
(assert (forall ((arg0@@500 T@U) (arg1@@235 T@U) (arg2@@143 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@500 arg1@@235 arg2@@143)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@500 arg1@@235 arg2@@143)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@169 T@U) (|a#0@@67| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@169) |a#0@@67|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@169 |a#0@@67|))) :qid |unknown.0:0| :skolemid |2089| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@169) |a#0@@67|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@170 T@U) (|a#0@@68| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@170 |a#0@@68|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@68|))) :qid |unknown.0:0| :skolemid |2090| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@170) |a#0@@68|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@171 T@U) (|a#0@@69| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@69|) ($Is |a#0@@69| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@171 |a#0@@69|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2091| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@171 |a#0@@69|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@172 T@U) (|a#0@@70| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) ($Is |a#0@@70| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@172 |a#0@@70|) true)) :qid |unknown.0:0| :skolemid |2092| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@172 |a#0@@70|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@173 T@U) (|a#0@@71| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@71|) ($Is |a#0@@71| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@71|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@71|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@71|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@71|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@173) |a#0@@71|) (ite (= (|Seq#Length| |a#0@@71|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@173 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@71|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@71|))))))) :qid |unknown.0:0| :skolemid |2093| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@173) |a#0@@71|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@174 T@U) (|a#0@@72| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@72|)) ($Is |a#0@@72| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@72|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@72|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@72|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@174) (Lit |a#0@@72|)) (ite (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@174) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@72|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@72|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2094| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@174) (Lit |a#0@@72|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@175 T@U) (|a#0@@73| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@175) |a#0@@73| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@175 |a#0@@73| |b#0@@33|))) :qid |unknown.0:0| :skolemid |2095| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@175) |a#0@@73| |b#0@@33|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@176 T@U) (|a#0@@74| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@176 |a#0@@74| |b#0@@34|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@74| |b#0@@34|))) :qid |unknown.0:0| :skolemid |2096| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@176) |a#0@@74| |b#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@177 T@U) (|a#0@@75| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@75| |b#0@@35|) (and ($Is |a#0@@75| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@177 |a#0@@75| |b#0@@35|)) (<= (|Seq#Length| |a#0@@75|) (|Seq#Length| |b#0@@35|))) :qid |unknown.0:0| :skolemid |2097| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@177 |a#0@@75| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@178 T@U) (|a#0@@76| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@76| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@178 |a#0@@76| |b#0@@36|) true)) :qid |unknown.0:0| :skolemid |2098| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@178 |a#0@@76| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@179 T@U) (|a#0@@77| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@77| |b#0@@37|) (and ($Is |a#0@@77| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@179) |a#0@@77| |b#0@@37|)  (and (<= (|Seq#Length| |a#0@@77|) (|Seq#Length| |b#0@@37|)) (|Seq#Equal| |a#0@@77| (|Seq#Take| |b#0@@37| (|Seq#Length| |a#0@@77|)))))) :qid |unknown.0:0| :skolemid |2099| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@179) |a#0@@77| |b#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@180 T@U) (|a#0@@78| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@78|) (Lit |b#0@@38|)) (and ($Is |a#0@@78| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@180) (Lit |a#0@@78|) (Lit |b#0@@38|))  (and (<= (|Seq#Length| (Lit |a#0@@78|)) (|Seq#Length| (Lit |b#0@@38|))) (|Seq#Equal| |a#0@@78| (|Seq#Take| (Lit |b#0@@38|) (|Seq#Length| (Lit |a#0@@78|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2100| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@180) (Lit |a#0@@78|) (Lit |b#0@@38|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@181 T@U) (|a#0@@79| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@181) |a#0@@79| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@181 |a#0@@79| |b#0@@39|))) :qid |unknown.0:0| :skolemid |2101| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@181) |a#0@@79| |b#0@@39|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@182 T@U) (|a#0@@80| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@182 |a#0@@80| |b#0@@40|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@80| |b#0@@40|))) :qid |unknown.0:0| :skolemid |2102| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@182) |a#0@@80| |b#0@@40|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@183 T@U) (|a#0@@81| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@81| |b#0@@41|) (and ($Is |a#0@@81| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@41| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2103| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@183 |a#0@@81| |b#0@@41|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@184 T@U) (|a#0@@82| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (and ($Is |a#0@@82| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@42| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@184 |a#0@@82| |b#0@@42|) true)) :qid |unknown.0:0| :skolemid |2104| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@184 |a#0@@82| |b#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@185 T@U) (|a#0@@83| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@83| |b#0@@43|) (and ($Is |a#0@@83| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@43| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@185) |a#0@@83| |b#0@@43|)  (and (<= (|Seq#Length| |a#0@@83|) (|Seq#Length| |b#0@@43|)) (|Seq#Equal| |a#0@@83| (|Seq#Drop| |b#0@@43| (- (|Seq#Length| |b#0@@43|) (|Seq#Length| |a#0@@83|))))))) :qid |unknown.0:0| :skolemid |2105| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@185) |a#0@@83| |b#0@@43|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@186 T@U) (|a#0@@84| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@84|) (Lit |b#0@@44|)) (and ($Is |a#0@@84| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@44| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@186) (Lit |a#0@@84|) (Lit |b#0@@44|))  (and (<= (|Seq#Length| (Lit |a#0@@84|)) (|Seq#Length| (Lit |b#0@@44|))) (|Seq#Equal| |a#0@@84| (|Seq#Drop| (Lit |b#0@@44|) (- (|Seq#Length| (Lit |b#0@@44|)) (|Seq#Length| (Lit |a#0@@84|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2106| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@186) (Lit |a#0@@84|) (Lit |b#0@@44|))) ))))
(assert (forall ((arg0@@501 T@U) (arg1@@236 T@U) (arg2@@144 T@U) (arg3@@101 T@U) (arg4@@76 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@501 arg1@@236 arg2@@144 arg3@@101 arg4@@76)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@501 arg1@@236 arg2@@144 arg3@@101 arg4@@76)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@187 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@82| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@187) |run#0@@66| |needle#0| |i#0@@82|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@187 |run#0@@66| |needle#0| |i#0@@82|))) :qid |unknown.0:0| :skolemid |2107| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@187) |run#0@@66| |needle#0| |i#0@@82|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@188 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@83| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@188 |run#0@@67| |needle#0@@0| |i#0@@83|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@83|))) :qid |unknown.0:0| :skolemid |2108| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@188) |run#0@@67| |needle#0@@0| |i#0@@83|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@189 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@84| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@84|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@84|) (<= |i#0@@84| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|)) (forall ((|j#0@@4| Int) ) (!  (=> (and (<= |i#0@@84| |j#0@@4|) (< |j#0@@4| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@4|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |2109| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@4|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2110| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@189 |run#0@@68| |needle#0@@1| |i#0@@84|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@190 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@85| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@190 |run#0@@69| |needle#0@@2| |i#0@@85|)  (and (<= (LitInt 0) |i#0@@85|) (<= |i#0@@85| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |2111| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@190 |run#0@@69| |needle#0@@2| |i#0@@85|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@191 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@86| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@86|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@86|) (<= |i#0@@86| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@86| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@86|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@86| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@191) |run#0@@70| |needle#0@@3| |i#0@@86|) (ite (= |i#0@@86| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@86|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@86|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@191 |run#0@@70| |needle#0@@3| (+ |i#0@@86| 1))))))) :qid |unknown.0:0| :skolemid |2112| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@191) |run#0@@70| |needle#0@@3| |i#0@@86|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@192 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@87| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@87|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@87|)) (<= (LitInt |i#0@@87|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@87|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@87|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@87| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@192) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@87|)) (ite (= (LitInt |i#0@@87|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@87|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@87|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@192) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@87| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2113| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@192) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@87|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@193 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@88| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@88|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@88|)) (<= (LitInt |i#0@@88|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@88|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@88|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@88| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@193) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@88|)) (ite (= (LitInt |i#0@@88|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@88|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@88|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@193) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@88| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2114| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@193) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@88|))) ))))
(assert (forall ((arg0@@502 T@U) (arg1@@237 T@U) (arg2@@145 T@U) (arg3@@102 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@502 arg1@@237 arg2@@145 arg3@@102)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@502 arg1@@237 arg2@@145 arg3@@102)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@194 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@194) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@194 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2115| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@194) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@195 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@195 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2116| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@195) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@196 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@89| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@89|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |2117| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@89|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2118| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@196 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@197 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@197 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |2119| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@197 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@198 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@198) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2120| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@198) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@199 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@199) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2121| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@199) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@200 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@200) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2122| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@200) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@503 T@U) (arg1@@238 T@U) (arg2@@146 Int) (arg3@@103 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@503 arg1@@238 arg2@@146 arg3@@103)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@503 arg1@@238 arg2@@146 arg3@@103)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@201 T@U) (|length#0@@3| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@201) |length#0@@3| |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@201 |length#0@@3| |v#0@@12|))) :qid |unknown.0:0| :skolemid |2123| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@201) |length#0@@3| |v#0@@12|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@202 T@U) (|length#0@@4| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@202 |length#0@@4| |v#0@@13|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@4| |v#0@@13|))) :qid |unknown.0:0| :skolemid |2124| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@202) |length#0@@4| |v#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@203 T@U) (|length#0@@5| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@5| |v#0@@14|) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|)) |length#0@@5|) (forall ((|i#0@@90| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|) |i#0@@90|) |v#0@@14|)) :qid |Sequencesidfy.358:18| :skolemid |2125| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|) |i#0@@90|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2126| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@203 |length#0@@5| |v#0@@14|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@204 T@U) (|length#0@@6| Int) (|v#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |v#0@@15|) BoxType)) (and (<= (LitInt 0) |length#0@@6|) ($IsBox |v#0@@15| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@204 |length#0@@6| |v#0@@15|) true)) :qid |unknown.0:0| :skolemid |2127| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@204 |length#0@@6| |v#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@205 T@U) (|length#0@@7| Int) (|v#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |v#0@@16|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@7| |v#0@@16|) (and (<= (LitInt 0) |length#0@@7|) ($IsBox |v#0@@16| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@7| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@7| 1) |v#0@@16|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@205) |length#0@@7| |v#0@@16|) (ite (= |length#0@@7| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@16|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@205 (- |length#0@@7| 1) |v#0@@16|)))))) :qid |unknown.0:0| :skolemid |2128| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@205) |length#0@@7| |v#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@206 T@U) (|length#0@@8| Int) (|v#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |v#0@@17|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@8|) |v#0@@17|) (and (<= (LitInt 0) |length#0@@8|) ($IsBox |v#0@@17| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@8|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@8| 1)) |v#0@@17|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@206) (LitInt |length#0@@8|) |v#0@@17|) (ite (= (LitInt |length#0@@8|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@17|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@206) (LitInt (- |length#0@@8| 1)) |v#0@@17|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2129| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@206) (LitInt |length#0@@8|) |v#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@207 T@U) (|length#0@@9| Int) (|v#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |v#0@@18|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@9|) (Lit |v#0@@18|)) (and (<= (LitInt 0) |length#0@@9|) ($IsBox |v#0@@18| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@9|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@9| 1)) (Lit |v#0@@18|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@207) (LitInt |length#0@@9|) (Lit |v#0@@18|)) (ite (= (LitInt |length#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@18|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@207) (LitInt (- |length#0@@9| 1)) (Lit |v#0@@18|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2130| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@207) (LitInt |length#0@@9|) (Lit |v#0@@18|))) ))))
(assert (forall ((arg0@@504 T@U) (arg1@@239 T@U) (arg2@@147 T@U) (arg3@@104 Int) (arg4@@77 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@504 arg1@@239 arg2@@147 arg3@@104 arg4@@77)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@504 arg1@@239 arg2@@147 arg3@@104 arg4@@77)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@208 T@U) (|s#0@@60| T@U) (|i#0@@91| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@208) |s#0@@60| |i#0@@91| |t#0@@7|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@208 |s#0@@60| |i#0@@91| |t#0@@7|))) :qid |unknown.0:0| :skolemid |2131| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@208) |s#0@@60| |i#0@@91| |t#0@@7|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@209 T@U) (|s#0@@61| T@U) (|i#0@@92| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |t#0@@8|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@209 |s#0@@61| |i#0@@92| |t#0@@8|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@61| |i#0@@92| |t#0@@8|))) :qid |unknown.0:0| :skolemid |2132| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@209) |s#0@@61| |i#0@@92| |t#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@210 T@U) (|s#0@@62| T@U) (|i#0@@93| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |t#0@@9|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@62| |i#0@@93| |t#0@@9|) (and (and (and ($Is |s#0@@62| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| 18446744073709551616))) ($IsBox |t#0@@9| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@93| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (|Seq#Length| |s#0@@62|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@210 |s#0@@62| |i#0@@93| |t#0@@9|) (|Seq#Update| |s#0@@62| |i#0@@93| |t#0@@9|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@210 |s#0@@62| |i#0@@93| |t#0@@9|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2133| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@210 |s#0@@62| |i#0@@93| |t#0@@9|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@211 T@U) (|s#0@@63| T@U) (|i#0@@94| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |t#0@@10|) BoxType)) (and (and ($Is |s#0@@63| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| 18446744073709551616))) ($IsBox |t#0@@10| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@211 |s#0@@63| |i#0@@94| |t#0@@10|)  (and (< (+ |i#0@@94| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (|Seq#Length| |s#0@@63|)))))) :qid |unknown.0:0| :skolemid |2134| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@211 |s#0@@63| |i#0@@94| |t#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@212 T@U) (|s#0@@64| T@U) (|i#0@@95| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@64| |i#0@@95| |t#0@@11|) (and (and (and ($Is |s#0@@64| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| 18446744073709551616))) ($IsBox |t#0@@11| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@95| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| (|Seq#Length| |s#0@@64|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@212) |s#0@@64| |i#0@@95| |t#0@@11|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@64| |i#0@@95|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)) (|Seq#Drop| |s#0@@64| (+ |i#0@@95| 1))))) :qid |unknown.0:0| :skolemid |2135| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@212) |s#0@@64| |i#0@@95| |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@213 T@U) (|s#0@@65| T@U) (|i#0@@96| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@65|) (LitInt |i#0@@96|) |t#0@@12|) (and (and (and ($Is |s#0@@65| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@96|) (< |i#0@@96| 18446744073709551616))) ($IsBox |t#0@@12| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@96| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@96|)) (< |i#0@@96| (|Seq#Length| (Lit |s#0@@65|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@213) (Lit |s#0@@65|) (LitInt |i#0@@96|) |t#0@@12|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@65|) (LitInt |i#0@@96|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@12|)) (|Seq#Drop| (Lit |s#0@@65|) (LitInt (+ |i#0@@96| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2136| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@213) (Lit |s#0@@65|) (LitInt |i#0@@96|) |t#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@214 T@U) (|s#0@@66| T@U) (|i#0@@97| Int) (|t#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |t#0@@13|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@66|) (LitInt |i#0@@97|) (Lit |t#0@@13|)) (and (and (and ($Is |s#0@@66| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| 18446744073709551616))) ($IsBox |t#0@@13| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@97| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@97|)) (< |i#0@@97| (|Seq#Length| (Lit |s#0@@66|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@214) (Lit |s#0@@66|) (LitInt |i#0@@97|) (Lit |t#0@@13|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@66|) (LitInt |i#0@@97|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@13|))) (|Seq#Drop| (Lit |s#0@@66|) (LitInt (+ |i#0@@97| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2137| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@214) (Lit |s#0@@66|) (LitInt |i#0@@97|) (Lit |t#0@@13|))) ))))
(assert (forall ((arg0@@505 T@U) (arg1@@240 T@U) (arg2@@148 T@U) (arg3@@105 T@U) (arg4@@78 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@505 arg1@@240 arg2@@148 arg3@@105 arg4@@78)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@505 arg1@@240 arg2@@148 arg3@@105 arg4@@78)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@215 T@U) (|a#0@@85| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |a#0@@85|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@215) |a#0@@85| |b#0@@45|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@215 |a#0@@85| |b#0@@45|))) :qid |unknown.0:0| :skolemid |2138| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@215) |a#0@@85| |b#0@@45|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@216 T@U) (|a#0@@86| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |a#0@@86|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@216 |a#0@@86| |b#0@@46|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@86| |b#0@@46|))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@216) |a#0@@86| |b#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@217 T@U) (|a#0@@87| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |a#0@@87|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@87| |b#0@@47|) (and (and ($Is |a#0@@87| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@47| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@87|) (|Seq#Length| |b#0@@47|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|)) (|Seq#Length| |a#0@@87|)) (forall ((|i#0@@98| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|) |i#0@@98|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@87| |i#0@@98|) (|Seq#Index| |b#0@@47| |i#0@@98|))))) :qid |Sequencesidfy.379:20| :skolemid |2140| :pattern ( (|Seq#Index| |b#0@@47| |i#0@@98|)) :pattern ( (|Seq#Index| |a#0@@87| |i#0@@98|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|) |i#0@@98|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2141| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@217 |a#0@@87| |b#0@@47|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@218 T@U) (|a#0@@88| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |a#0@@88|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (and ($Is |a#0@@88| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@48| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@218 |a#0@@88| |b#0@@48|) (= (|Seq#Length| |a#0@@88|) (|Seq#Length| |b#0@@48|)))) :qid |unknown.0:0| :skolemid |2142| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@218 |a#0@@88| |b#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@219 T@U) (|a#0@@89| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |a#0@@89|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@89| |b#0@@49|) (and (and ($Is |a#0@@89| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@49| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@89|) (|Seq#Length| |b#0@@49|))))) (and (=> (not (= (|Seq#Length| |a#0@@89|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@89|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@49|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@89|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@49|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@89|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@49|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@219) |a#0@@89| |b#0@@49|) (ite (= (|Seq#Length| |a#0@@89|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@219 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@89|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@49|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@89|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@49|))))))))) :qid |unknown.0:0| :skolemid |2143| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@219) |a#0@@89| |b#0@@49|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@220 T@U) (|a#0@@90| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |a#0@@90|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@90|) (Lit |b#0@@50|)) (and (and ($Is |a#0@@90| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@50| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@90|)) (|Seq#Length| (Lit |b#0@@50|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@90|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@90|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@50|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@90|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@50|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@90|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@50|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@220) (Lit |a#0@@90|) (Lit |b#0@@50|)) (ite (= (|Seq#Length| (Lit |a#0@@90|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@220) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@90|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@50|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@90|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@50|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2144| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@220) (Lit |a#0@@90|) (Lit |b#0@@50|))) ))))
(assert (forall ((arg0@@506 T@U) (arg1@@241 T@U) (arg2@@149 T@U) (arg3@@106 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@506 arg1@@241 arg2@@149 arg3@@106)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@506 arg1@@241 arg2@@149 arg3@@106)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@221 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@221) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@221 |z#0|))) :qid |unknown.0:0| :skolemid |2145| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@221) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@222 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@222 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2146| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@222) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@223 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@99| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@99|) (< |i#0@@99| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|))) |i#0@@99|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|))) |i#0@@99|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@99|))))) :qid |Sequencesidfy.387:20| :skolemid |2147| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@99|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|))) |i#0@@99|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|))) |i#0@@99|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2148| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@223 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@224 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@224 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |2149| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@224 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@225 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@225) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@51| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@225 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@91| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@225 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@91| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@51| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2150| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@225) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@226 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@226) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@226) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@226) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2151| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@226) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@507 T@U) (arg1@@242 T@U) (arg2@@150 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@507 arg1@@242 arg2@@150)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@507 arg1@@242 arg2@@150)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@227 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@227) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@227 |seqs#0|))) :qid |unknown.0:0| :skolemid |2152| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@227) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@228 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@228) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@228 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2153| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@228) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@229 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@229) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@100| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@100|) (< |i#0@@100| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|) |i#0@@100|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@100|)))))) :qid |Sequencesidfy.409:20| :skolemid |2154| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@100|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|) |i#0@@100|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2155| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@229 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@230 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@230) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@230 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |2156| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@230 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@231 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@231) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@231) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@231 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2157| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@231) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@232 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@232) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@232) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@232) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2158| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@232) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@233 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@233) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@233) |shape#0|) (Sequences.__default.FlattenLength $ly@@233 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |2159| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@233) |shape#0|)) )))
(assert (forall (($ly@@234 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@234) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@234 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |2160| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@234) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@235 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@235) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@235 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@235 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |2161| :pattern ( (Sequences.__default.FlattenLength $ly@@235 |shape#0@@1|)) ))))
(assert (forall (($ly@@236 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@236) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@236 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |2162| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@236 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@237 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@237) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@237) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@237 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |2163| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@237) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@238 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@238) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@238) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@238) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |2164| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@238) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@508 T@U) (arg1@@243 T@U) (arg2@@151 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@508 arg1@@243 arg2@@151)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@508 arg1@@243 arg2@@151)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@239 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@239) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@239) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@239 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2165| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@239) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@240 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@240) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@240 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2166| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@240) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@241 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@241) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@241 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@241 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@241 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2167| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@241 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@242 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@242) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@242 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |2168| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@242 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@243 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@243) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@243) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@243 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2169| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@243) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@244 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@244) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@244) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@244) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2170| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@244) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@101| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@101| |j#0@@5|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@101|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@101| (|Seq#Length| |shape#0@@5|)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@101|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@101| |j#0@@5|))) :qid |Sequencesidfy.489:25| :skolemid |2171| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@101| |j#0@@5|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@102| Int) (|j#0@@6| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@102|)) (<= (LitInt 0) |j#0@@6|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@102| |j#0@@6|)  (and (< |i#0@@102| (|Seq#Length| |shape#0@@6|)) (< |j#0@@6| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@102|)))))))) :qid |Sequencesidfy.489:25| :skolemid |2172| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@102| |j#0@@6|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@103| Int) (|j#0@@7| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@103| |j#0@@7|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@103|)) (<= (LitInt 0) |j#0@@7|)) (and (< |i#0@@103| (|Seq#Length| |shape#0@@7|)) (< |j#0@@7| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@103|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@103|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@103| |j#0@@7|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@103|)) |j#0@@7|)))) :qid |Sequencesidfy.489:25| :skolemid |2173| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@103| |j#0@@7|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@104| Int) (|j#0@@8| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@104|) (LitInt |j#0@@8|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@104|)) (<= (LitInt 0) |j#0@@8|)) (and (< |i#0@@104| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@8| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@104|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@104|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@104|) (LitInt |j#0@@8|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@104|)))) |j#0@@8|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |2174| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@104|) (LitInt |j#0@@8|))) ))))
(assert (forall ((arg0@@509 T@U) (arg1@@244 T@U) (arg2@@152 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@509 arg1@@244 arg2@@152)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@509 arg1@@244 arg2@@152)) )))
(assert (forall (($ly@@245 T@U) (|shape#0@@9| T@U) (|i#0@@105| Int) ) (!  (=> (and (= (type $ly@@245) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@245) |shape#0@@9| |i#0@@105|) (Sequences.__default.UnflattenIndex $ly@@245 |shape#0@@9| |i#0@@105|))) :qid |Sequencesidfy.496:12| :skolemid |2175| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@245) |shape#0@@9| |i#0@@105|)) )))
(assert (forall (($ly@@246 T@U) (|shape#0@@10| T@U) (|i#0@@106| Int) ) (!  (=> (and (= (type $ly@@246) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@246 |shape#0@@10| |i#0@@106|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@106|))) :qid |Sequencesidfy.496:12| :skolemid |2176| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@246) |shape#0@@10| |i#0@@106|)) )))
(assert  (=> true (forall (($ly@@247 T@U) (|shape#0@@11| T@U) (|i#0@@107| Int) ) (!  (=> (and (and (= (type $ly@@247) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@107|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@107|)) (< |i#0@@107| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@247 |shape#0@@11| |i#0@@107|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |2177| :pattern ( (Sequences.__default.UnflattenIndex $ly@@247 |shape#0@@11| |i#0@@107|)) ))))
(assert (forall (($ly@@248 T@U) (|shape#0@@12| T@U) (|i#0@@108| Int) ) (!  (=> (and (and (= (type $ly@@248) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@108|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@248 |shape#0@@12| |i#0@@108|) (< |i#0@@108| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |2178| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@248 |shape#0@@12| |i#0@@108|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@249 T@U) (|shape#0@@13| T@U) (|i#0@@109| Int) ) (!  (=> (and (and (= (type $ly@@249) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@109|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@109|)) (< |i#0@@109| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@109| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@109|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@109|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@249) |shape#0@@13| |i#0@@109|) (ite (< |i#0@@109| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@249 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@109|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@109| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |2179| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@249) |shape#0@@13| |i#0@@109|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@250 T@U) (|shape#0@@14| T@U) (|i#0@@110| Int) ) (!  (=> (and (and (= (type $ly@@250) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@110|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@110|)) (< |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@110|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@110|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@250) (Lit |shape#0@@14|) (LitInt |i#0@@110|)) (ite (< |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@250) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@110|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |2180| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@250) (Lit |shape#0@@14|) (LitInt |i#0@@110|))) ))))
(assert (forall (($ly@@251 T@U) (|s#0@@67| T@U) ) (!  (=> (and (= (type $ly@@251) LayerTypeType) (= (type |s#0@@67|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@251) |s#0@@67|) (Sequences.__default.seqMax $ly@@251 |s#0@@67|))) :qid |Sequencesidfy.606:22| :skolemid |2181| :pattern ( (Sequences.__default.seqMax ($LS $ly@@251) |s#0@@67|)) )))
(assert (forall (($ly@@252 T@U) (|s#0@@68| T@U) ) (!  (=> (and (= (type $ly@@252) LayerTypeType) (= (type |s#0@@68|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@252 |s#0@@68|) (Sequences.__default.seqMax $LZ |s#0@@68|))) :qid |Sequencesidfy.606:22| :skolemid |2182| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@252) |s#0@@68|)) )))
(assert  (=> true (forall (($ly@@253 T@U) (|s#0@@69| T@U) ) (!  (=> (and (and (= (type $ly@@253) LayerTypeType) (= (type |s#0@@69|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@69|) (and ($Is |s#0@@69| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@69|))))) (and (forall ((|k#0| T@U) ) (!  (=> (and (and (= (type |k#0|) intType) true) (|Seq#Contains| |s#0@@69| ($Box |k#0|))) (>= (Sequences.__default.seqMax $ly@@253 |s#0@@69|) (U_2_int |k#0|))) :qid |Sequencesidfy.608:20| :skolemid |2183| :pattern ( (|Seq#Contains| |s#0@@69| ($Box |k#0|))) )) (|Seq#Contains| |s#0@@69| ($Box (int_2_U (Sequences.__default.seqMax $ly@@253 |s#0@@69|)))))) :qid |Sequencesidfy.606:22| :skolemid |2184| :pattern ( (Sequences.__default.seqMax $ly@@253 |s#0@@69|)) ))))
(assert (forall (($ly@@254 T@U) (|s#0@@70| T@U) ) (!  (=> (and (and (= (type $ly@@254) LayerTypeType) (= (type |s#0@@70|) (SeqType BoxType))) ($Is |s#0@@70| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@254 |s#0@@70|) (< 0 (|Seq#Length| |s#0@@70|)))) :qid |Sequencesidfy.606:22| :skolemid |2185| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@254 |s#0@@70|)) )))
(assert  (=> true (forall (($ly@@255 T@U) (|s#0@@71| T@U) ) (!  (=> (and (and (= (type $ly@@255) LayerTypeType) (= (type |s#0@@71|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@71|) (and ($Is |s#0@@71| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@71|))))) (and (=> (not (= (|Seq#Length| |s#0@@71|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@71|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@71|))) (|Sequences.__default.Last#canCall| TInt |s#0@@71|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@255 (Sequences.__default.DropLast TInt |s#0@@71|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@71|)))))) (= (Sequences.__default.seqMax ($LS $ly@@255) |s#0@@71|) (ite (= (|Seq#Length| |s#0@@71|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@255 (Sequences.__default.DropLast TInt |s#0@@71|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@71|)))))))) :qid |Sequencesidfy.606:22| :skolemid |2186| :pattern ( (Sequences.__default.seqMax ($LS $ly@@255) |s#0@@71|)) ))))
(assert  (=> true (forall (($ly@@256 T@U) (|s#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@256) LayerTypeType) (= (type |s#0@@72|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@72|)) (and ($Is |s#0@@72| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@72|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@72|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@72|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@72|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@256) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@72|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@256) (Lit |s#0@@72|)) (ite (= (|Seq#Length| (Lit |s#0@@72|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@72|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@256) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@72|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |2187| :pattern ( (Sequences.__default.seqMax ($LS $ly@@256) (Lit |s#0@@72|))) ))))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@257 T@U) (|n#0@@5| Int) (|t#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@257) LayerTypeType)) (= (type |t#0@@14|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@257) |n#0@@5| |t#0@@14|) (Sequences.__default.fill Sequences._default.fill$T $ly@@257 |n#0@@5| |t#0@@14|))) :qid |unknown.0:0| :skolemid |2188| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@257) |n#0@@5| |t#0@@14|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@258 T@U) (|n#0@@6| Int) (|t#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@258) LayerTypeType)) (= (type |t#0@@15|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@258 |n#0@@6| |t#0@@15|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@15|))) :qid |unknown.0:0| :skolemid |2189| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@258) |n#0@@6| |t#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@259 T@U) (|n#0@@7| Int) (|t#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@259) LayerTypeType)) (= (type |t#0@@16|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@16|) (and ($IsBox |t#0@@16| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@259 |n#0@@7| |t#0@@16|)) |n#0@@7|) (forall ((|i#0@@111| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@111|) (< |i#0@@111| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@259 |n#0@@7| |t#0@@16|) |i#0@@111|) |t#0@@16|)) :qid |Sequencesidfy.695:18| :skolemid |2190| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@259 |n#0@@7| |t#0@@16|) |i#0@@111|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@259 |n#0@@7| |t#0@@16|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |2191| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@259 |n#0@@7| |t#0@@16|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@260 T@U) (|n#0@@8| Int) (|t#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |t#0@@17|) BoxType)) ($IsBox |t#0@@17| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@260 |n#0@@8| |t#0@@17|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |2192| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@260 |n#0@@8| |t#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@261 T@U) (|n#0@@9| Int) (|t#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |t#0@@18|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@18|) (and ($IsBox |t#0@@18| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@18|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@261) |n#0@@9| |t#0@@18|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@261 (- |n#0@@9| 1) |t#0@@18|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@18|)))))) :qid |unknown.0:0| :skolemid |2193| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@261) |n#0@@9| |t#0@@18|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@262 T@U) (|n#0@@10| Int) (|t#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |t#0@@19|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@19|) (and ($IsBox |t#0@@19| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@19|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@262) (LitInt |n#0@@10|) |t#0@@19|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@262) (LitInt (- |n#0@@10| 1)) |t#0@@19|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@19|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2194| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@262) (LitInt |n#0@@10|) |t#0@@19|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@263 T@U) (|n#0@@11| Int) (|t#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |t#0@@20|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@20|)) (and ($IsBox |t#0@@20| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@20|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@263) (LitInt |n#0@@11|) (Lit |t#0@@20|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@263) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@20|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@20|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2195| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@263) (LitInt |n#0@@11|) (Lit |t#0@@20|))) ))))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (= (TagFamily Tclass.ValueMessage.__default) tytagFamily$_default))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (= ($Is $o@@34 Tclass.ValueMessage.__default)  (or (= $o@@34 null) (= (dtype $o@@34) Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |2196| :pattern ( ($Is $o@@34 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@79)  (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@35) alloc))))) :qid |unknown.0:0| :skolemid |2197| :pattern ( ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@79)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (TagFamily Tclass.ValueMessage.Delta) tytagFamily$Delta))
(assert (= (type ValueMessage.__default.NopDelta) BoxType))
(assert  (=> true (=> true ($IsBox ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert (= |ValueMessage.__default.NopDelta#requires| true))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueMessage.__default.DefaultValue#requires| true))
(assert (forall ((arg0@@510 T@U) (arg1@@245 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@510 arg1@@245)) BoxType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@510 arg1@@245)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) BoxType) (= (type |olddelta#0|) BoxType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($IsBox |newdelta#0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (= |newdelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (= |olddelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($IsBox (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.29:33| :skolemid |2198| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) BoxType) (= (type |olddelta#0@@0|) BoxType)) (and ($IsBox |newdelta#0@@0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0@@0| Tclass.ValueMessage.Delta))) (= (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true)) :qid |MessageidfyValueMessage.29:33| :skolemid |2199| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert (forall ((arg0@@511 T@U) (arg1@@246 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@511 arg1@@246)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@511 arg1@@246)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) BoxType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($IsBox |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (= |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.33:30| :skolemid |2200| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) BoxType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($IsBox |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (= (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true)) :qid |MessageidfyValueMessage.33:30| :skolemid |2201| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (= (TagFamily Tclass.ValueMessage.Message) tytagFamily$Message))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@151)) bx@@151) ($Is ($Unbox DatatypeTypeType bx@@151) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |2202| :pattern ( ($IsBox bx@@151 Tclass.ValueMessage.Message)) )))
(assert (forall ((arg0@@512 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@512)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@512)) )))
(assert  (=> true (forall ((|s#0@@73| T@U) ) (!  (=> (and (= (type |s#0@@73|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@73|) (and ($Is |s#0@@73| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@73|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@73|) Tclass.ValueMessage.Message)) :qid |Messageidfy.105:41| :skolemid |2203| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@73|)) ))))
(assert (forall ((|s#0@@74| T@U) ) (!  (=> (and (= (type |s#0@@74|) (SeqType BoxType)) ($Is |s#0@@74| (TSeq Tclass.NativeTypes.byte))) (= (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@74|) (< (|Seq#Length| |s#0@@74|) 4294967296))) :qid |Messageidfy.105:41| :skolemid |2204| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@74|)) )))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messageidfy.118:30| :skolemid |2205| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true)) :qid |Messageidfy.118:30| :skolemid |2206| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messageidfy.123:33| :skolemid |2207| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true)) :qid |Messageidfy.123:33| :skolemid |2208| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert (forall ((arg0@@513 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@513)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@513)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@1|) (and ($Is |msg#0@@1| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@1|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@1|) (TSeq Tclass.NativeTypes.byte))) :qid |Messageidfy.128:41| :skolemid |2209| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@1|)) ))))
(assert (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) ($Is |msg#0@@2| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|) (ValueMessage.Message.Define_q |msg#0@@2|))) :qid |Messageidfy.128:41| :skolemid |2210| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)) )))
(assert (forall ((arg0@@514 T@U) (arg1@@247 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@514 arg1@@247)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@514 arg1@@247)) )))
(assert (forall (($ly@@264 T@U) (|msgs#0@@1| T@U) ) (!  (=> (and (= (type $ly@@264) LayerTypeType) (= (type |msgs#0@@1|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@264) |msgs#0@@1|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@264 |msgs#0@@1|))) :qid |Messageidfy.134:12| :skolemid |2211| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@264) |msgs#0@@1|)) )))
(assert (forall (($ly@@265 T@U) (|msgs#0@@2| T@U) ) (!  (=> (and (= (type $ly@@265) LayerTypeType) (= (type |msgs#0@@2|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@265 |msgs#0@@2|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@2|))) :qid |Messageidfy.134:12| :skolemid |2212| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@265) |msgs#0@@2|)) )))
(assert  (=> true (forall (($ly@@266 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@266) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@3|) (and ($Is |msgs#0@@3| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@3|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|)) (|Seq#Length| |msgs#0@@3|)) (forall ((|i#0@@112| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@112|) (< |i#0@@112| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|) |i#0@@112|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@112|))))) :qid |Messageidfy.137:20| :skolemid |2213| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@112|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|) |i#0@@112|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messageidfy.134:12| :skolemid |2214| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@266 |msgs#0@@3|)) ))))
(assert (forall (($ly@@267 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@267) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) ($Is |msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@267 |msgs#0@@4|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|))) :qid |Messageidfy.134:12| :skolemid |2215| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@267 |msgs#0@@4|)) )))
(assert (forall ((arg0@@515 T@U) (arg1@@248 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@515 arg1@@248)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@515 arg1@@248)) )))
(assert (forall (($ly@@268 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@268) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@268) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@268 |strings#0|))) :qid |Messageidfy.145:12| :skolemid |2216| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@268) |strings#0|)) )))
(assert (forall (($ly@@269 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@269) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@269 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messageidfy.145:12| :skolemid |2217| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@269) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@270 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@270) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@113| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@113|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |2218| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@113|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@270 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@18| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@18|) (< |i#1@@18| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@270 |strings#0@@1|) |i#1@@18|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@18|))))) :qid |Messageidfy.148:20| :skolemid |2219| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@18|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@270 |strings#0@@1|) |i#1@@18|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@270 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messageidfy.145:12| :skolemid |2220| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@270 |strings#0@@1|)) ))))
(assert (forall (($ly@@271 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@271) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@271 |strings#0@@2|) (forall ((|i#2@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |2221| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) )))) :qid |Messageidfy.145:12| :skolemid |2222| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@271 |strings#0@@2|)) )))
(assert (forall ((arg0@@516 T@U) (arg1@@249 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@516 arg1@@249)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@516 arg1@@249)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |MessageidfyValueMessage.36:25| :skolemid |2227| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true)) :qid |MessageidfyValueMessage.36:25| :skolemid |2228| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@517 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@517)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@517)) )) (forall ((arg0@@518 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@518)) BoxType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@518)) ))) (forall ((arg0@@519 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@519)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@519)) ))) (forall ((arg0@@520 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@520)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@520)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#1| |value#1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#1| |olddelta#1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#0| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#0|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#0@@1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|)))) (let ((|olddelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|))))))))) :qid |MessageidfyValueMessage.36:25| :skolemid |2229| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#3| |value#3|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#3| |olddelta#3|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#2|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#2| |value#2|)))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#2| |olddelta#2|))))))))) :qid |MessageidfyValueMessage.36:25| :weight 3 :skolemid |2230| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) |##ValueMessage.Message.Define|)) :qid |MessageidfyValueMessage.26:14| :skolemid |2231| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (= (ValueMessage.Message.Define_q d@@23) (= (DatatypeCtorId d@@23) |##ValueMessage.Message.Define|))) :qid |unknown.0:0| :skolemid |2232| :pattern ( (ValueMessage.Message.Define_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (ValueMessage.Message.Define_q d@@24)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@24 (|#ValueMessage.Message.Define| |a#1#0#0@@0|))) :qid |MessageidfyValueMessage.26:14| :skolemid |2233| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2234| :pattern ( (ValueMessage.Message.Define_q d@@24)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (= ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@0| Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.26:14| :skolemid |2235| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@80) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@80)) (= ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@80) ($IsAlloc |a#3#0#0@@0| Tclass.ValueType.Value $h@@80))) :qid |MessageidfyValueMessage.26:14| :skolemid |2236| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@80)) )))
(assert (forall ((d@@25 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@25) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (ValueMessage.Message.Define_q d@@25) ($IsAlloc d@@25 Tclass.ValueMessage.Message $h@@81)))) ($IsAlloc (ValueMessage.Message.value d@@25) Tclass.ValueType.Value $h@@81)) :qid |unknown.0:0| :skolemid |2237| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@25) Tclass.ValueType.Value $h@@81)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@0|)))) :qid |MessageidfyValueMessage.26:14| :skolemid |2238| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |MessageidfyValueMessage.26:14| :skolemid |2239| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) BoxType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) |##ValueMessage.Message.Update|)) :qid |MessageidfyValueMessage.27:14| :skolemid |2240| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (= (type d@@26) DatatypeTypeType) (= (ValueMessage.Message.Update_q d@@26) (= (DatatypeCtorId d@@26) |##ValueMessage.Message.Update|))) :qid |unknown.0:0| :skolemid |2241| :pattern ( (ValueMessage.Message.Update_q d@@26)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (ValueMessage.Message.Update_q d@@27)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) BoxType) (= d@@27 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |MessageidfyValueMessage.27:14| :skolemid |2242| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2243| :pattern ( (ValueMessage.Message.Update_q d@@27)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) BoxType) (= ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.27:14| :skolemid |2244| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) BoxType) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (= ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@82) ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@82))) :qid |MessageidfyValueMessage.27:14| :skolemid |2245| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@82)) )))
(assert (forall ((d@@28 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@28) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (ValueMessage.Message.Update_q d@@28) ($IsAlloc d@@28 Tclass.ValueMessage.Message $h@@83)))) ($IsAllocBox (ValueMessage.Message.delta d@@28) Tclass.ValueMessage.Delta $h@@83)) :qid |unknown.0:0| :skolemid |2246| :pattern ( ($IsAllocBox (ValueMessage.Message.delta d@@28) Tclass.ValueMessage.Delta $h@@83)) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@0|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |2247| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|))) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) |a#11#0#0@@0|)) :qid |MessageidfyValueMessage.27:14| :skolemid |2248| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@29)) (or (ValueMessage.Message.Define_q d@@29) (ValueMessage.Message.Update_q d@@29))) :qid |unknown.0:0| :skolemid |2249| :pattern ( (|$IsA#ValueMessage.Message| d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) ($Is d@@30 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@30) (ValueMessage.Message.Update_q d@@30))) :qid |unknown.0:0| :skolemid |2250| :pattern ( (ValueMessage.Message.Update_q d@@30) ($Is d@@30 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@30) ($Is d@@30 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@133 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@133) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@133) (ValueMessage.Message.Define_q b@@70))) (= (|ValueMessage.Message#Equal| a@@133 b@@70) (|Seq#Equal| (ValueMessage.Message.value a@@133) (ValueMessage.Message.value b@@70)))) :qid |unknown.0:0| :skolemid |2251| :pattern ( (|ValueMessage.Message#Equal| a@@133 b@@70) (ValueMessage.Message.Define_q a@@133)) :pattern ( (|ValueMessage.Message#Equal| a@@133 b@@70) (ValueMessage.Message.Define_q b@@70)) )))
(assert (forall ((a@@134 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@134) (ValueMessage.Message.Update_q b@@71))) (= (|ValueMessage.Message#Equal| a@@134 b@@71) (= (ValueMessage.Message.delta a@@134) (ValueMessage.Message.delta b@@71)))) :qid |unknown.0:0| :skolemid |2252| :pattern ( (|ValueMessage.Message#Equal| a@@134 b@@71) (ValueMessage.Message.Update_q a@@134)) :pattern ( (|ValueMessage.Message#Equal| a@@134 b@@71) (ValueMessage.Message.Update_q b@@71)) )))
(assert (forall ((a@@135 T@U) (b@@72 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (= (|ValueMessage.Message#Equal| a@@135 b@@72) (= a@@135 b@@72))) :qid |unknown.0:0| :skolemid |2253| :pattern ( (|ValueMessage.Message#Equal| a@@135 b@@72)) )))
(assert (forall ((arg0@@521 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@521)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@521)) )))
(assert (forall ((|a#12#0#0| T@U) ) (!  (=> (= (type |a#12#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#12#0#0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.20:36| :skolemid |2254| :pattern ( (|#UI.RangeStart.SInclusive| |a#12#0#0|)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (= (type d@@31) DatatypeTypeType) (= (UI.RangeStart.SInclusive_q d@@31) (= (DatatypeCtorId d@@31) |##UI.RangeStart.SInclusive|))) :qid |unknown.0:0| :skolemid |2255| :pattern ( (UI.RangeStart.SInclusive_q d@@31)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@32)) (exists ((|a#13#0#0| T@U) ) (!  (and (= (type |a#13#0#0|) (SeqType BoxType)) (= d@@32 (|#UI.RangeStart.SInclusive| |a#13#0#0|))) :qid |UIsdfy.20:36| :skolemid |2256| :no-pattern (type |a#13#0#0|) :no-pattern (U_2_int |a#13#0#0|) :no-pattern (U_2_bool |a#13#0#0|) ))) :qid |unknown.0:0| :skolemid |2257| :pattern ( (UI.RangeStart.SInclusive_q d@@32)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (= (TagFamily Tclass.UI.RangeStart) tytagFamily$RangeStart))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@152)) bx@@152) ($Is ($Unbox DatatypeTypeType bx@@152) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |2258| :pattern ( ($IsBox bx@@152 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#14#0#0@@0| T@U) ) (!  (=> (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#14#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:36| :skolemid |2259| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#15#0#0@@0| T@U) ($h@@84 T@U) ) (!  (=> (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type $h@@84) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@84)) (= ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@84) ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@84))) :qid |UIsdfy.20:36| :skolemid |2260| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@84)) )))
(assert (forall ((arg0@@522 T@U) ) (! (= (type (UI.RangeStart.key arg0@@522)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@522)) )))
(assert (forall ((d@@33 T@U) ($h@@85 T@U) ) (!  (=> (and (and (= (type d@@33) DatatypeTypeType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@85) (and (UI.RangeStart.SInclusive_q d@@33) ($IsAlloc d@@33 Tclass.UI.RangeStart $h@@85)))) ($IsAlloc (UI.RangeStart.key d@@33) Tclass.KeyType.Key $h@@85)) :qid |unknown.0:0| :skolemid |2261| :pattern ( ($IsAlloc (UI.RangeStart.key d@@33) Tclass.KeyType.Key $h@@85)) )))
(assert (forall ((|a#16#0#0@@0| T@U) ) (!  (=> (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#16#0#0@@0|)))) :qid |UIsdfy.20:36| :skolemid |2262| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|))) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) |a#17#0#0@@0|)) :qid |UIsdfy.20:36| :skolemid |2263| :pattern ( (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((arg0@@523 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@523)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@523)) )))
(assert (forall ((|a#18#0#0@@0| T@U) ) (!  (=> (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.20:59| :skolemid |2264| :pattern ( (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (= (type d@@34) DatatypeTypeType) (= (UI.RangeStart.SExclusive_q d@@34) (= (DatatypeCtorId d@@34) |##UI.RangeStart.SExclusive|))) :qid |unknown.0:0| :skolemid |2265| :pattern ( (UI.RangeStart.SExclusive_q d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@35)) (exists ((|a#19#0#0@@0| T@U) ) (!  (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= d@@35 (|#UI.RangeStart.SExclusive| |a#19#0#0@@0|))) :qid |UIsdfy.20:59| :skolemid |2266| :no-pattern (type |a#19#0#0@@0|) :no-pattern (U_2_int |a#19#0#0@@0|) :no-pattern (U_2_bool |a#19#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2267| :pattern ( (UI.RangeStart.SExclusive_q d@@35)) )))
(assert (forall ((|a#20#0#0@@0| T@U) ) (!  (=> (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#20#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:59| :skolemid |2268| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ($h@@86 T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type $h@@86) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@86)) (= ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart $h@@86) ($IsAlloc |a#21#0#0@@0| Tclass.KeyType.Key $h@@86))) :qid |UIsdfy.20:59| :skolemid |2269| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart $h@@86)) )))
(assert (forall ((d@@36 T@U) ($h@@87 T@U) ) (!  (=> (and (and (= (type d@@36) DatatypeTypeType) (= (type $h@@87) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@87) (and (UI.RangeStart.SExclusive_q d@@36) ($IsAlloc d@@36 Tclass.UI.RangeStart $h@@87)))) ($IsAlloc (UI.RangeStart.key d@@36) Tclass.KeyType.Key $h@@87)) :qid |unknown.0:0| :skolemid |2270| :pattern ( ($IsAlloc (UI.RangeStart.key d@@36) Tclass.KeyType.Key $h@@87)) )))
(assert (forall ((|a#22#0#0@@0| T@U) ) (!  (=> (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0@@0|)) (Lit (|#UI.RangeStart.SExclusive| |a#22#0#0@@0|)))) :qid |UIsdfy.20:59| :skolemid |2271| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0@@0|))) )))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#23#0#0|)) |a#23#0#0|)) :qid |UIsdfy.20:59| :skolemid |2272| :pattern ( (|#UI.RangeStart.SExclusive| |a#23#0#0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (= (UI.RangeStart.NegativeInf_q d@@37) (= (DatatypeCtorId d@@37) |##UI.RangeStart.NegativeInf|))) :qid |unknown.0:0| :skolemid |2273| :pattern ( (UI.RangeStart.NegativeInf_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@38)) (= d@@38 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |2274| :pattern ( (UI.RangeStart.NegativeInf_q d@@38)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@88 T@U) ) (!  (=> (and (= (type $h@@88) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@88)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@88)) :qid |DafnyPreludebpl.545:12| :skolemid |2275| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@88)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@39)) (or (or (UI.RangeStart.SInclusive_q d@@39) (UI.RangeStart.SExclusive_q d@@39)) (UI.RangeStart.NegativeInf_q d@@39))) :qid |unknown.0:0| :skolemid |2276| :pattern ( (|$IsA#UI.RangeStart| d@@39)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) ($Is d@@40 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@40) (UI.RangeStart.SExclusive_q d@@40)) (UI.RangeStart.NegativeInf_q d@@40))) :qid |unknown.0:0| :skolemid |2277| :pattern ( (UI.RangeStart.NegativeInf_q d@@40) ($Is d@@40 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@40) ($Is d@@40 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@40) ($Is d@@40 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@136 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@136) (UI.RangeStart.SInclusive_q b@@73))) (= (|UI.RangeStart#Equal| a@@136 b@@73) (|Seq#Equal| (UI.RangeStart.key a@@136) (UI.RangeStart.key b@@73)))) :qid |unknown.0:0| :skolemid |2278| :pattern ( (|UI.RangeStart#Equal| a@@136 b@@73) (UI.RangeStart.SInclusive_q a@@136)) :pattern ( (|UI.RangeStart#Equal| a@@136 b@@73) (UI.RangeStart.SInclusive_q b@@73)) )))
(assert (forall ((a@@137 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@137) (UI.RangeStart.SExclusive_q b@@74))) (= (|UI.RangeStart#Equal| a@@137 b@@74) (|Seq#Equal| (UI.RangeStart.key a@@137) (UI.RangeStart.key b@@74)))) :qid |unknown.0:0| :skolemid |2279| :pattern ( (|UI.RangeStart#Equal| a@@137 b@@74) (UI.RangeStart.SExclusive_q a@@137)) :pattern ( (|UI.RangeStart#Equal| a@@137 b@@74) (UI.RangeStart.SExclusive_q b@@74)) )))
(assert (forall ((a@@138 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@138) (UI.RangeStart.NegativeInf_q b@@75))) (= (|UI.RangeStart#Equal| a@@138 b@@75) true)) :qid |unknown.0:0| :skolemid |2280| :pattern ( (|UI.RangeStart#Equal| a@@138 b@@75) (UI.RangeStart.NegativeInf_q a@@138)) :pattern ( (|UI.RangeStart#Equal| a@@138 b@@75) (UI.RangeStart.NegativeInf_q b@@75)) )))
(assert (forall ((a@@139 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@139) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (= (|UI.RangeStart#Equal| a@@139 b@@76) (= a@@139 b@@76))) :qid |unknown.0:0| :skolemid |2281| :pattern ( (|UI.RangeStart#Equal| a@@139 b@@76)) )))
(assert (forall ((arg0@@524 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@524)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@524)) )))
(assert (forall ((|a#29#0#0| T@U) ) (!  (=> (= (type |a#29#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.21:34| :skolemid |2282| :pattern ( (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (= (UI.RangeEnd.EInclusive_q d@@41) (= (DatatypeCtorId d@@41) |##UI.RangeEnd.EInclusive|))) :qid |unknown.0:0| :skolemid |2283| :pattern ( (UI.RangeEnd.EInclusive_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@42)) (exists ((|a#30#0#0| T@U) ) (!  (and (= (type |a#30#0#0|) (SeqType BoxType)) (= d@@42 (|#UI.RangeEnd.EInclusive| |a#30#0#0|))) :qid |UIsdfy.21:34| :skolemid |2284| :no-pattern (type |a#30#0#0|) :no-pattern (U_2_int |a#30#0#0|) :no-pattern (U_2_bool |a#30#0#0|) ))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (UI.RangeEnd.EInclusive_q d@@42)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (= (TagFamily Tclass.UI.RangeEnd) tytagFamily$RangeEnd))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@153)) bx@@153) ($Is ($Unbox DatatypeTypeType bx@@153) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |2286| :pattern ( ($IsBox bx@@153 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#31#0#0| T@U) ) (!  (=> (= (type |a#31#0#0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd) ($Is |a#31#0#0| Tclass.KeyType.Key))) :qid |UIsdfy.21:34| :skolemid |2287| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#32#0#0| T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type $h@@89) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@89)) (= ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@89) ($IsAlloc |a#32#0#0| Tclass.KeyType.Key $h@@89))) :qid |UIsdfy.21:34| :skolemid |2288| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@89)) )))
(assert (forall ((arg0@@525 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@525)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@525)) )))
(assert (forall ((d@@43 T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@90) (and (UI.RangeEnd.EInclusive_q d@@43) ($IsAlloc d@@43 Tclass.UI.RangeEnd $h@@90)))) ($IsAlloc (UI.RangeEnd.key d@@43) Tclass.KeyType.Key $h@@90)) :qid |unknown.0:0| :skolemid |2289| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@43) Tclass.KeyType.Key $h@@90)) )))
(assert (forall ((|a#33#0#0| T@U) ) (!  (=> (= (type |a#33#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#33#0#0|)))) :qid |UIsdfy.21:34| :skolemid |2290| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|))) )))
(assert (forall ((|a#34#0#0| T@U) ) (!  (=> (= (type |a#34#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) |a#34#0#0|)) :qid |UIsdfy.21:34| :skolemid |2291| :pattern ( (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) )))
(assert (forall ((arg0@@526 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@526)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@526)) )))
(assert (forall ((|a#35#0#0| T@U) ) (!  (=> (= (type |a#35#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.21:57| :skolemid |2292| :pattern ( (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (= (UI.RangeEnd.EExclusive_q d@@44) (= (DatatypeCtorId d@@44) |##UI.RangeEnd.EExclusive|))) :qid |unknown.0:0| :skolemid |2293| :pattern ( (UI.RangeEnd.EExclusive_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@45)) (exists ((|a#36#0#0| T@U) ) (!  (and (= (type |a#36#0#0|) (SeqType BoxType)) (= d@@45 (|#UI.RangeEnd.EExclusive| |a#36#0#0|))) :qid |UIsdfy.21:57| :skolemid |2294| :no-pattern (type |a#36#0#0|) :no-pattern (U_2_int |a#36#0#0|) :no-pattern (U_2_bool |a#36#0#0|) ))) :qid |unknown.0:0| :skolemid |2295| :pattern ( (UI.RangeEnd.EExclusive_q d@@45)) )))
(assert (forall ((|a#37#0#0| T@U) ) (!  (=> (= (type |a#37#0#0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd) ($Is |a#37#0#0| Tclass.KeyType.Key))) :qid |UIsdfy.21:57| :skolemid |2296| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#38#0#0| T@U) ($h@@91 T@U) ) (!  (=> (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type $h@@91) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@91)) (= ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@91) ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@91))) :qid |UIsdfy.21:57| :skolemid |2297| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@91)) )))
(assert (forall ((d@@46 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@46) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (UI.RangeEnd.EExclusive_q d@@46) ($IsAlloc d@@46 Tclass.UI.RangeEnd $h@@92)))) ($IsAlloc (UI.RangeEnd.key d@@46) Tclass.KeyType.Key $h@@92)) :qid |unknown.0:0| :skolemid |2298| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@46) Tclass.KeyType.Key $h@@92)) )))
(assert (forall ((|a#39#0#0| T@U) ) (!  (=> (= (type |a#39#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#39#0#0|)))) :qid |UIsdfy.21:57| :skolemid |2299| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|))) )))
(assert (forall ((|a#40#0#0| T@U) ) (!  (=> (= (type |a#40#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) |a#40#0#0|)) :qid |UIsdfy.21:57| :skolemid |2300| :pattern ( (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@47 T@U) ) (!  (=> (= (type d@@47) DatatypeTypeType) (= (UI.RangeEnd.PositiveInf_q d@@47) (= (DatatypeCtorId d@@47) |##UI.RangeEnd.PositiveInf|))) :qid |unknown.0:0| :skolemid |2301| :pattern ( (UI.RangeEnd.PositiveInf_q d@@47)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@48)) (= d@@48 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |2302| :pattern ( (UI.RangeEnd.PositiveInf_q d@@48)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@93 T@U) ) (!  (=> (and (= (type $h@@93) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@93)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@93)) :qid |DafnyPreludebpl.545:12| :skolemid |2303| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@93)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@49)) (or (or (UI.RangeEnd.EInclusive_q d@@49) (UI.RangeEnd.EExclusive_q d@@49)) (UI.RangeEnd.PositiveInf_q d@@49))) :qid |unknown.0:0| :skolemid |2304| :pattern ( (|$IsA#UI.RangeEnd| d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) ($Is d@@50 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@50) (UI.RangeEnd.EExclusive_q d@@50)) (UI.RangeEnd.PositiveInf_q d@@50))) :qid |unknown.0:0| :skolemid |2305| :pattern ( (UI.RangeEnd.PositiveInf_q d@@50) ($Is d@@50 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@50) ($Is d@@50 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@50) ($Is d@@50 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@140 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@140) (UI.RangeEnd.EInclusive_q b@@77))) (= (|UI.RangeEnd#Equal| a@@140 b@@77) (|Seq#Equal| (UI.RangeEnd.key a@@140) (UI.RangeEnd.key b@@77)))) :qid |unknown.0:0| :skolemid |2306| :pattern ( (|UI.RangeEnd#Equal| a@@140 b@@77) (UI.RangeEnd.EInclusive_q a@@140)) :pattern ( (|UI.RangeEnd#Equal| a@@140 b@@77) (UI.RangeEnd.EInclusive_q b@@77)) )))
(assert (forall ((a@@141 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@141) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@141) (UI.RangeEnd.EExclusive_q b@@78))) (= (|UI.RangeEnd#Equal| a@@141 b@@78) (|Seq#Equal| (UI.RangeEnd.key a@@141) (UI.RangeEnd.key b@@78)))) :qid |unknown.0:0| :skolemid |2307| :pattern ( (|UI.RangeEnd#Equal| a@@141 b@@78) (UI.RangeEnd.EExclusive_q a@@141)) :pattern ( (|UI.RangeEnd#Equal| a@@141 b@@78) (UI.RangeEnd.EExclusive_q b@@78)) )))
(assert (forall ((a@@142 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@142) (UI.RangeEnd.PositiveInf_q b@@79))) (= (|UI.RangeEnd#Equal| a@@142 b@@79) true)) :qid |unknown.0:0| :skolemid |2308| :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@79) (UI.RangeEnd.PositiveInf_q a@@142)) :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@79) (UI.RangeEnd.PositiveInf_q b@@79)) )))
(assert (forall ((a@@143 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@143) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (= (|UI.RangeEnd#Equal| a@@143 b@@80) (= a@@143 b@@80))) :qid |unknown.0:0| :skolemid |2309| :pattern ( (|UI.RangeEnd#Equal| a@@143 b@@80)) )))
(assert (forall ((arg0@@527 T@U) (arg1@@250 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@527 arg1@@250)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@527 arg1@@250)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.23:36| :skolemid |2310| :pattern ( (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (= (type d@@51) DatatypeTypeType) (= (UI.SuccResult.SuccResult_q d@@51) (= (DatatypeCtorId d@@51) |##UI.SuccResult.SuccResult|))) :qid |unknown.0:0| :skolemid |2311| :pattern ( (UI.SuccResult.SuccResult_q d@@51)) )))
(assert (forall ((d@@52 T@U) ) (!  (=> (and (= (type d@@52) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@52)) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (!  (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) (SeqType BoxType))) (= d@@52 (|#UI.SuccResult.SuccResult| |a#47#0#0| |a#47#1#0|))) :qid |UIsdfy.23:36| :skolemid |2312| :no-pattern (type |a#47#0#0|) :no-pattern (type |a#47#1#0|) :no-pattern (U_2_int |a#47#0#0|) :no-pattern (U_2_bool |a#47#0#0|) :no-pattern (U_2_int |a#47#1#0|) :no-pattern (U_2_bool |a#47#1#0|) ))) :qid |unknown.0:0| :skolemid |2313| :pattern ( (UI.SuccResult.SuccResult_q d@@52)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (= (TagFamily Tclass.UI.SuccResult) tytagFamily$SuccResult))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@154)) bx@@154) ($Is ($Unbox DatatypeTypeType bx@@154) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |2314| :pattern ( ($IsBox bx@@154 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) (SeqType BoxType))) (= ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)  (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.23:36| :skolemid |2315| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ($h@@94 T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) (SeqType BoxType))) (= (type $h@@94) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@94)) (= ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@94)  (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@94) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@94)))) :qid |UIsdfy.23:36| :skolemid |2316| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@94)) )))
(assert (forall ((arg0@@528 T@U) ) (! (= (type (UI.SuccResult.key arg0@@528)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@528)) )))
(assert (forall ((d@@53 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@53) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (UI.SuccResult.SuccResult_q d@@53) ($IsAlloc d@@53 Tclass.UI.SuccResult $h@@95)))) ($IsAlloc (UI.SuccResult.key d@@53) Tclass.KeyType.Key $h@@95)) :qid |unknown.0:0| :skolemid |2317| :pattern ( ($IsAlloc (UI.SuccResult.key d@@53) Tclass.KeyType.Key $h@@95)) )))
(assert (forall ((arg0@@529 T@U) ) (! (= (type (UI.SuccResult.value arg0@@529)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@529)) )))
(assert (forall ((d@@54 T@U) ($h@@96 T@U) ) (!  (=> (and (and (= (type d@@54) DatatypeTypeType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@96) (and (UI.SuccResult.SuccResult_q d@@54) ($IsAlloc d@@54 Tclass.UI.SuccResult $h@@96)))) ($IsAlloc (UI.SuccResult.value d@@54) Tclass.ValueType.Value $h@@96)) :qid |unknown.0:0| :skolemid |2318| :pattern ( ($IsAlloc (UI.SuccResult.value d@@54) Tclass.ValueType.Value $h@@96)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.23:36| :skolemid |2319| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|))) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) (SeqType BoxType)) (= (type |a#51#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) |a#51#0#0|)) :qid |UIsdfy.23:36| :skolemid |2320| :pattern ( (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) (SeqType BoxType)) (= (type |a#52#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) |a#52#1#0|)) :qid |UIsdfy.23:36| :skolemid |2321| :pattern ( (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@55)) (UI.SuccResult.SuccResult_q d@@55)) :qid |unknown.0:0| :skolemid |2322| :pattern ( (|$IsA#UI.SuccResult| d@@55)) )))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) ($Is d@@56 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@56)) :qid |unknown.0:0| :skolemid |2323| :pattern ( (UI.SuccResult.SuccResult_q d@@56) ($Is d@@56 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@144 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) true) (= (|UI.SuccResult#Equal| a@@144 b@@81)  (and (|Seq#Equal| (UI.SuccResult.key a@@144) (UI.SuccResult.key b@@81)) (|Seq#Equal| (UI.SuccResult.value a@@144) (UI.SuccResult.value b@@81))))) :qid |unknown.0:0| :skolemid |2324| :pattern ( (|UI.SuccResult#Equal| a@@144 b@@81)) )))
(assert (forall ((a@@145 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@145) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (= (|UI.SuccResult#Equal| a@@145 b@@82) (= a@@145 b@@82))) :qid |unknown.0:0| :skolemid |2325| :pattern ( (|UI.SuccResult#Equal| a@@145 b@@82)) )))
(assert (forall ((arg0@@530 T@U) (arg1@@251 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@530 arg1@@251)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@530 arg1@@251)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) (SeqType BoxType)) (= (type |a#53#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.24:44| :skolemid |2326| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (= (UI.SuccResultList.SuccResultList_q d@@57) (= (DatatypeCtorId d@@57) |##UI.SuccResultList.SuccResultList|))) :qid |unknown.0:0| :skolemid |2327| :pattern ( (UI.SuccResultList.SuccResultList_q d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@58)) (exists ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (!  (and (and (= (type |a#54#0#0|) (SeqType BoxType)) (= (type |a#54#1#0|) DatatypeTypeType)) (= d@@58 (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|))) :qid |UIsdfy.24:44| :skolemid |2328| :no-pattern (type |a#54#0#0|) :no-pattern (type |a#54#1#0|) :no-pattern (U_2_int |a#54#0#0|) :no-pattern (U_2_bool |a#54#0#0|) :no-pattern (U_2_int |a#54#1#0|) :no-pattern (U_2_bool |a#54#1#0|) ))) :qid |unknown.0:0| :skolemid |2329| :pattern ( (UI.SuccResultList.SuccResultList_q d@@58)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (= (TagFamily Tclass.UI.SuccResultList) tytagFamily$SuccResultList))
(assert (forall ((bx@@155 T@U) ) (!  (=> (and (= (type bx@@155) BoxType) ($IsBox bx@@155 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@155)) bx@@155) ($Is ($Unbox DatatypeTypeType bx@@155) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |2330| :pattern ( ($IsBox bx@@155 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0|) (SeqType BoxType)) (= (type |a#55#1#0|) DatatypeTypeType)) (= ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)  (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.24:44| :skolemid |2331| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ($h@@97 T@U) ) (!  (=> (and (and (and (= (type |a#56#0#0|) (SeqType BoxType)) (= (type |a#56#1#0|) DatatypeTypeType)) (= (type $h@@97) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@97)) (= ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@97)  (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@97) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@97)))) :qid |UIsdfy.24:44| :skolemid |2332| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@97)) )))
(assert (forall ((arg0@@531 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@531)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@531)) )))
(assert (forall ((d@@59 T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type d@@59) DatatypeTypeType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (UI.SuccResultList.SuccResultList_q d@@59) ($IsAlloc d@@59 Tclass.UI.SuccResultList $h@@98)))) ($IsAlloc (UI.SuccResultList.results d@@59) (TSeq Tclass.UI.SuccResult) $h@@98)) :qid |unknown.0:0| :skolemid |2333| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@59) (TSeq Tclass.UI.SuccResult) $h@@98)) )))
(assert (forall ((arg0@@532 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@532)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@532)) )))
(assert (forall ((d@@60 T@U) ($h@@99 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@99) (and (UI.SuccResultList.SuccResultList_q d@@60) ($IsAlloc d@@60 Tclass.UI.SuccResultList $h@@99)))) ($IsAlloc (UI.SuccResultList.end d@@60) Tclass.UI.RangeEnd $h@@99)) :qid |unknown.0:0| :skolemid |2334| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@60) Tclass.UI.RangeEnd $h@@99)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type |a#57#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2335| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|))) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) (SeqType BoxType)) (= (type |a#58#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) |a#58#0#0|)) :qid |UIsdfy.24:44| :skolemid |2336| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (i@@25 Int) ) (!  (=> (and (and (= (type |a#59#0#0|) (SeqType BoxType)) (= (type |a#59#1#0|) DatatypeTypeType)) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#59#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#59#0#0| i@@25))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2337| :pattern ( (|Seq#Index| |a#59#0#0| i@@25) (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) (SeqType BoxType)) (= (type |a#60#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#60#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2338| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) (SeqType BoxType)) (= (type |a#61#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) |a#61#1#0|)) :qid |UIsdfy.24:44| :skolemid |2339| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) (SeqType BoxType)) (= (type |a#62#1#0|) DatatypeTypeType)) (< (DtRank |a#62#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2340| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@61)) (UI.SuccResultList.SuccResultList_q d@@61)) :qid |unknown.0:0| :skolemid |2341| :pattern ( (|$IsA#UI.SuccResultList| d@@61)) )))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) ($Is d@@62 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@62)) :qid |unknown.0:0| :skolemid |2342| :pattern ( (UI.SuccResultList.SuccResultList_q d@@62) ($Is d@@62 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@146 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (= (|UI.SuccResultList#Equal| a@@146 b@@83)  (and (|Seq#Equal| (UI.SuccResultList.results a@@146) (UI.SuccResultList.results b@@83)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@146) (UI.SuccResultList.end b@@83))))) :qid |unknown.0:0| :skolemid |2343| :pattern ( (|UI.SuccResultList#Equal| a@@146 b@@83)) )))
(assert (forall ((a@@147 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@147) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (= (|UI.SuccResultList#Equal| a@@147 b@@84) (= a@@147 b@@84))) :qid |unknown.0:0| :skolemid |2344| :pattern ( (|UI.SuccResultList#Equal| a@@147 b@@84)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@63 T@U) ) (!  (=> (= (type d@@63) DatatypeTypeType) (= (UI.Op.NoOp_q d@@63) (= (DatatypeCtorId d@@63) |##UI.Op.NoOp|))) :qid |unknown.0:0| :skolemid |2345| :pattern ( (UI.Op.NoOp_q d@@63)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (UI.Op.NoOp_q d@@64)) (= d@@64 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |2346| :pattern ( (UI.Op.NoOp_q d@@64)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (= (TagFamily Tclass.UI.Op) tytagFamily$Op))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@156)) bx@@156) ($Is ($Unbox DatatypeTypeType bx@@156) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |2347| :pattern ( ($IsBox bx@@156 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@100 T@U) ) (!  (=> (and (= (type $h@@100) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@100)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@100)) :qid |DafnyPreludebpl.545:12| :skolemid |2348| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@100)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@65 T@U) ) (!  (=> (= (type d@@65) DatatypeTypeType) (= (UI.Op.SyncOp_q d@@65) (= (DatatypeCtorId d@@65) |##UI.Op.SyncOp|))) :qid |unknown.0:0| :skolemid |2349| :pattern ( (UI.Op.SyncOp_q d@@65)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (UI.Op.SyncOp_q d@@66)) (= d@@66 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |2350| :pattern ( (UI.Op.SyncOp_q d@@66)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@101 T@U) ) (!  (=> (and (= (type $h@@101) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@101)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@101)) :qid |DafnyPreludebpl.545:12| :skolemid |2351| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@101)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@67 T@U) ) (!  (=> (= (type d@@67) DatatypeTypeType) (= (UI.Op.CrashOp_q d@@67) (= (DatatypeCtorId d@@67) |##UI.Op.CrashOp|))) :qid |unknown.0:0| :skolemid |2352| :pattern ( (UI.Op.CrashOp_q d@@67)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) (UI.Op.CrashOp_q d@@68)) (= d@@68 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |2353| :pattern ( (UI.Op.CrashOp_q d@@68)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@102 T@U) ) (!  (=> (and (= (type $h@@102) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@102)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@102)) :qid |DafnyPreludebpl.545:12| :skolemid |2354| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@102)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@533 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@533)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@533)) )))
(assert (forall ((|a#78#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#78#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.30:24| :skolemid |2355| :pattern ( (|#UI.Op.PushSyncOp| |a#78#0#0|)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (= (type d@@69) DatatypeTypeType) (= (UI.Op.PushSyncOp_q d@@69) (= (DatatypeCtorId d@@69) |##UI.Op.PushSyncOp|))) :qid |unknown.0:0| :skolemid |2356| :pattern ( (UI.Op.PushSyncOp_q d@@69)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (and (= (type d@@70) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@70)) (exists ((|a#79#0#0| Int) ) (! (= d@@70 (|#UI.Op.PushSyncOp| |a#79#0#0|)) :qid |UIsdfy.30:24| :skolemid |2357| ))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (UI.Op.PushSyncOp_q d@@70)) )))
(assert (forall ((|a#80#0#0| Int) ) (! (= ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#80#0#0|) TInt)) :qid |UIsdfy.30:24| :skolemid |2359| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| Int) ($h@@103 T@U) ) (!  (=> (and (= (type $h@@103) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@103)) (= ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@103) ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@103))) :qid |UIsdfy.30:24| :skolemid |2360| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@103)) )))
(assert (forall ((d@@71 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@71) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (UI.Op.PushSyncOp_q d@@71) ($IsAlloc d@@71 Tclass.UI.Op $h@@104)))) ($IsAlloc (int_2_U (UI.Op.id d@@71)) TInt $h@@104)) :qid |unknown.0:0| :skolemid |2361| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@71)) TInt $h@@104)) )))
(assert (forall ((|a#82#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#82#0#0|))) :qid |UIsdfy.30:24| :skolemid |2362| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|))) )))
(assert (forall ((|a#83#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#83#0#0|)) |a#83#0#0|) :qid |UIsdfy.30:24| :skolemid |2363| :pattern ( (|#UI.Op.PushSyncOp| |a#83#0#0|)) )))
(assert (forall ((arg0@@534 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@534)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@534)) )))
(assert (forall ((|a#84#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#84#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.31:23| :skolemid |2364| :pattern ( (|#UI.Op.PopSyncOp| |a#84#0#0|)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (= (type d@@72) DatatypeTypeType) (= (UI.Op.PopSyncOp_q d@@72) (= (DatatypeCtorId d@@72) |##UI.Op.PopSyncOp|))) :qid |unknown.0:0| :skolemid |2365| :pattern ( (UI.Op.PopSyncOp_q d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@73)) (exists ((|a#85#0#0| Int) ) (! (= d@@73 (|#UI.Op.PopSyncOp| |a#85#0#0|)) :qid |UIsdfy.31:23| :skolemid |2366| ))) :qid |unknown.0:0| :skolemid |2367| :pattern ( (UI.Op.PopSyncOp_q d@@73)) )))
(assert (forall ((|a#86#0#0| Int) ) (! (= ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#86#0#0|) TInt)) :qid |UIsdfy.31:23| :skolemid |2368| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#87#0#0| Int) ($h@@105 T@U) ) (!  (=> (and (= (type $h@@105) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@105)) (= ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@105) ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@105))) :qid |UIsdfy.31:23| :skolemid |2369| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@105)) )))
(assert (forall ((d@@74 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@74) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (UI.Op.PopSyncOp_q d@@74) ($IsAlloc d@@74 Tclass.UI.Op $h@@106)))) ($IsAlloc (int_2_U (UI.Op.id d@@74)) TInt $h@@106)) :qid |unknown.0:0| :skolemid |2370| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@74)) TInt $h@@106)) )))
(assert (forall ((|a#88#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#88#0#0|))) :qid |UIsdfy.31:23| :skolemid |2371| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|))) )))
(assert (forall ((|a#89#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#89#0#0|)) |a#89#0#0|) :qid |UIsdfy.31:23| :skolemid |2372| :pattern ( (|#UI.Op.PopSyncOp| |a#89#0#0|)) )))
(assert (forall ((arg0@@535 T@U) (arg1@@252 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@535 arg1@@252)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@535 arg1@@252)) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.33:13| :skolemid |2373| :pattern ( (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (= (type d@@75) DatatypeTypeType) (= (UI.Op.GetOp_q d@@75) (= (DatatypeCtorId d@@75) |##UI.Op.GetOp|))) :qid |unknown.0:0| :skolemid |2374| :pattern ( (UI.Op.GetOp_q d@@75)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (and (= (type d@@76) DatatypeTypeType) (UI.Op.GetOp_q d@@76)) (exists ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (and (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= d@@76 (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|))) :qid |UIsdfy.33:13| :skolemid |2375| :no-pattern (type |a#91#0#0|) :no-pattern (type |a#91#1#0|) :no-pattern (U_2_int |a#91#0#0|) :no-pattern (U_2_bool |a#91#0#0|) :no-pattern (U_2_int |a#91#1#0|) :no-pattern (U_2_bool |a#91#1#0|) ))) :qid |unknown.0:0| :skolemid |2376| :pattern ( (UI.Op.GetOp_q d@@76)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| T@U) ) (!  (=> (and (= (type |a#92#0#0|) (SeqType BoxType)) (= (type |a#92#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)  (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.33:13| :skolemid |2377| :pattern ( ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#93#0#0| T@U) (|a#93#1#0| T@U) ($h@@107 T@U) ) (!  (=> (and (and (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type $h@@107) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@107)) (= ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@107)  (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@107) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@107)))) :qid |UIsdfy.33:13| :skolemid |2378| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@107)) )))
(assert (forall ((arg0@@536 T@U) ) (! (= (type (UI.Op.key arg0@@536)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@536)) )))
(assert (forall ((d@@77 T@U) ($h@@108 T@U) ) (!  (=> (and (and (= (type d@@77) DatatypeTypeType) (= (type $h@@108) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@108) (and (UI.Op.GetOp_q d@@77) ($IsAlloc d@@77 Tclass.UI.Op $h@@108)))) ($IsAlloc (UI.Op.key d@@77) Tclass.KeyType.Key $h@@108)) :qid |unknown.0:0| :skolemid |2379| :pattern ( ($IsAlloc (UI.Op.key d@@77) Tclass.KeyType.Key $h@@108)) )))
(assert (forall ((arg0@@537 T@U) ) (! (= (type (UI.Op.value arg0@@537)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@537)) )))
(assert (forall ((d@@78 T@U) ($h@@109 T@U) ) (!  (=> (and (and (= (type d@@78) DatatypeTypeType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@109) (and (UI.Op.GetOp_q d@@78) ($IsAlloc d@@78 Tclass.UI.Op $h@@109)))) ($IsAlloc (UI.Op.value d@@78) Tclass.ValueType.Value $h@@109)) :qid |unknown.0:0| :skolemid |2380| :pattern ( ($IsAlloc (UI.Op.value d@@78) Tclass.ValueType.Value $h@@109)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) ) (!  (=> (and (= (type |a#94#0#0|) (SeqType BoxType)) (= (type |a#94#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|)) (Lit (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|)))) :qid |UIsdfy.33:13| :skolemid |2381| :pattern ( (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|))) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) ) (!  (=> (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type |a#95#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) |a#95#0#0|)) :qid |UIsdfy.33:13| :skolemid |2382| :pattern ( (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) ) (!  (=> (and (= (type |a#96#0#0|) (SeqType BoxType)) (= (type |a#96#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) |a#96#1#0|)) :qid |UIsdfy.33:13| :skolemid |2383| :pattern ( (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) )))
(assert (forall ((arg0@@538 T@U) (arg1@@253 Int) ) (! (= (type (|#UI.Op.GetBeginOp| arg0@@538 arg1@@253)) DatatypeTypeType) :qid |funType:#UI.Op.GetBeginOp| :pattern ( (|#UI.Op.GetBeginOp| arg0@@538 arg1@@253)) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| Int) ) (!  (=> (= (type |a#97#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetBeginOp| |a#97#0#0| |a#97#1#0|)) |##UI.Op.GetBeginOp|)) :qid |UIsdfy.35:18| :skolemid |2384| :pattern ( (|#UI.Op.GetBeginOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (= (type d@@79) DatatypeTypeType) (= (UI.Op.GetBeginOp_q d@@79) (= (DatatypeCtorId d@@79) |##UI.Op.GetBeginOp|))) :qid |unknown.0:0| :skolemid |2385| :pattern ( (UI.Op.GetBeginOp_q d@@79)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (and (= (type d@@80) DatatypeTypeType) (UI.Op.GetBeginOp_q d@@80)) (exists ((|a#98#0#0| T@U) (|a#98#1#0| Int) ) (!  (and (= (type |a#98#0#0|) (SeqType BoxType)) (= d@@80 (|#UI.Op.GetBeginOp| |a#98#0#0| |a#98#1#0|))) :qid |UIsdfy.35:18| :skolemid |2386| :no-pattern (type |a#98#0#0|) :no-pattern (U_2_int |a#98#0#0|) :no-pattern (U_2_bool |a#98#0#0|) ))) :qid |unknown.0:0| :skolemid |2387| :pattern ( (UI.Op.GetBeginOp_q d@@80)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| Int) ) (!  (=> (= (type |a#99#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetBeginOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)  (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is (int_2_U |a#99#1#0|) TInt)))) :qid |UIsdfy.35:18| :skolemid |2388| :pattern ( ($Is (|#UI.Op.GetBeginOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| Int) ($h@@110 T@U) ) (!  (=> (and (and (= (type |a#100#0#0|) (SeqType BoxType)) (= (type $h@@110) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@110)) (= ($IsAlloc (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@110)  (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@110) ($IsAlloc (int_2_U |a#100#1#0|) TInt $h@@110)))) :qid |UIsdfy.35:18| :skolemid |2389| :pattern ( ($IsAlloc (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@110)) )))
(assert (forall ((d@@81 T@U) ($h@@111 T@U) ) (!  (=> (and (and (= (type d@@81) DatatypeTypeType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@111) (and (UI.Op.GetBeginOp_q d@@81) ($IsAlloc d@@81 Tclass.UI.Op $h@@111)))) ($IsAlloc (UI.Op.key d@@81) Tclass.KeyType.Key $h@@111)) :qid |unknown.0:0| :skolemid |2390| :pattern ( ($IsAlloc (UI.Op.key d@@81) Tclass.KeyType.Key $h@@111)) )))
(assert (forall ((d@@82 T@U) ($h@@112 T@U) ) (!  (=> (and (and (= (type d@@82) DatatypeTypeType) (= (type $h@@112) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@112) (and (UI.Op.GetBeginOp_q d@@82) ($IsAlloc d@@82 Tclass.UI.Op $h@@112)))) ($IsAlloc (int_2_U (UI.Op.id d@@82)) TInt $h@@112)) :qid |unknown.0:0| :skolemid |2391| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@82)) TInt $h@@112)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| Int) ) (!  (=> (= (type |a#101#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetBeginOp| (Lit |a#101#0#0|) (LitInt |a#101#1#0|)) (Lit (|#UI.Op.GetBeginOp| |a#101#0#0| |a#101#1#0|)))) :qid |UIsdfy.35:18| :skolemid |2392| :pattern ( (|#UI.Op.GetBeginOp| (Lit |a#101#0#0|) (LitInt |a#101#1#0|))) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| Int) ) (!  (=> (= (type |a#102#0#0|) (SeqType BoxType)) (= (UI.Op.key (|#UI.Op.GetBeginOp| |a#102#0#0| |a#102#1#0|)) |a#102#0#0|)) :qid |UIsdfy.35:18| :skolemid |2393| :pattern ( (|#UI.Op.GetBeginOp| |a#102#0#0| |a#102#1#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| Int) ) (!  (=> (= (type |a#103#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) |a#103#1#0|)) :qid |UIsdfy.35:18| :skolemid |2394| :pattern ( (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) )))
(assert (forall ((arg0@@539 T@U) (arg1@@254 Int) ) (! (= (type (|#UI.Op.GetEndOp| arg0@@539 arg1@@254)) DatatypeTypeType) :qid |funType:#UI.Op.GetEndOp| :pattern ( (|#UI.Op.GetEndOp| arg0@@539 arg1@@254)) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| Int) ) (!  (=> (= (type |a#104#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetEndOp| |a#104#0#0| |a#104#1#0|)) |##UI.Op.GetEndOp|)) :qid |UIsdfy.36:16| :skolemid |2395| :pattern ( (|#UI.Op.GetEndOp| |a#104#0#0| |a#104#1#0|)) )))
(assert (forall ((d@@83 T@U) ) (!  (=> (= (type d@@83) DatatypeTypeType) (= (UI.Op.GetEndOp_q d@@83) (= (DatatypeCtorId d@@83) |##UI.Op.GetEndOp|))) :qid |unknown.0:0| :skolemid |2396| :pattern ( (UI.Op.GetEndOp_q d@@83)) )))
(assert (forall ((d@@84 T@U) ) (!  (=> (and (= (type d@@84) DatatypeTypeType) (UI.Op.GetEndOp_q d@@84)) (exists ((|a#105#0#0| T@U) (|a#105#1#0| Int) ) (!  (and (= (type |a#105#0#0|) (SeqType BoxType)) (= d@@84 (|#UI.Op.GetEndOp| |a#105#0#0| |a#105#1#0|))) :qid |UIsdfy.36:16| :skolemid |2397| :no-pattern (type |a#105#0#0|) :no-pattern (U_2_int |a#105#0#0|) :no-pattern (U_2_bool |a#105#0#0|) ))) :qid |unknown.0:0| :skolemid |2398| :pattern ( (UI.Op.GetEndOp_q d@@84)) )))
(assert (forall ((|a#106#0#0| T@U) (|a#106#1#0| Int) ) (!  (=> (= (type |a#106#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetEndOp| |a#106#0#0| |a#106#1#0|) Tclass.UI.Op)  (and ($Is |a#106#0#0| Tclass.ValueType.Value) ($Is (int_2_U |a#106#1#0|) TInt)))) :qid |UIsdfy.36:16| :skolemid |2399| :pattern ( ($Is (|#UI.Op.GetEndOp| |a#106#0#0| |a#106#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#107#0#0| T@U) (|a#107#1#0| Int) ($h@@113 T@U) ) (!  (=> (and (and (= (type |a#107#0#0|) (SeqType BoxType)) (= (type $h@@113) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@113)) (= ($IsAlloc (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op $h@@113)  (and ($IsAlloc |a#107#0#0| Tclass.ValueType.Value $h@@113) ($IsAlloc (int_2_U |a#107#1#0|) TInt $h@@113)))) :qid |UIsdfy.36:16| :skolemid |2400| :pattern ( ($IsAlloc (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op $h@@113)) )))
(assert (forall ((d@@85 T@U) ($h@@114 T@U) ) (!  (=> (and (and (= (type d@@85) DatatypeTypeType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@114) (and (UI.Op.GetEndOp_q d@@85) ($IsAlloc d@@85 Tclass.UI.Op $h@@114)))) ($IsAlloc (UI.Op.value d@@85) Tclass.ValueType.Value $h@@114)) :qid |unknown.0:0| :skolemid |2401| :pattern ( ($IsAlloc (UI.Op.value d@@85) Tclass.ValueType.Value $h@@114)) )))
(assert (forall ((d@@86 T@U) ($h@@115 T@U) ) (!  (=> (and (and (= (type d@@86) DatatypeTypeType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@115) (and (UI.Op.GetEndOp_q d@@86) ($IsAlloc d@@86 Tclass.UI.Op $h@@115)))) ($IsAlloc (int_2_U (UI.Op.id d@@86)) TInt $h@@115)) :qid |unknown.0:0| :skolemid |2402| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@86)) TInt $h@@115)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| Int) ) (!  (=> (= (type |a#108#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetEndOp| (Lit |a#108#0#0|) (LitInt |a#108#1#0|)) (Lit (|#UI.Op.GetEndOp| |a#108#0#0| |a#108#1#0|)))) :qid |UIsdfy.36:16| :skolemid |2403| :pattern ( (|#UI.Op.GetEndOp| (Lit |a#108#0#0|) (LitInt |a#108#1#0|))) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| Int) ) (!  (=> (= (type |a#109#0#0|) (SeqType BoxType)) (= (UI.Op.value (|#UI.Op.GetEndOp| |a#109#0#0| |a#109#1#0|)) |a#109#0#0|)) :qid |UIsdfy.36:16| :skolemid |2404| :pattern ( (|#UI.Op.GetEndOp| |a#109#0#0| |a#109#1#0|)) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| Int) ) (!  (=> (= (type |a#110#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) |a#110#1#0|)) :qid |UIsdfy.36:16| :skolemid |2405| :pattern ( (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) )))
(assert (forall ((arg0@@540 T@U) (arg1@@255 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@540 arg1@@255)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@540 arg1@@255)) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| T@U) ) (!  (=> (and (= (type |a#111#0#0|) (SeqType BoxType)) (= (type |a#111#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#111#0#0| |a#111#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.39:13| :skolemid |2406| :pattern ( (|#UI.Op.PutOp| |a#111#0#0| |a#111#1#0|)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (= (type d@@87) DatatypeTypeType) (= (UI.Op.PutOp_q d@@87) (= (DatatypeCtorId d@@87) |##UI.Op.PutOp|))) :qid |unknown.0:0| :skolemid |2407| :pattern ( (UI.Op.PutOp_q d@@87)) )))
(assert (forall ((d@@88 T@U) ) (!  (=> (and (= (type d@@88) DatatypeTypeType) (UI.Op.PutOp_q d@@88)) (exists ((|a#112#0#0| T@U) (|a#112#1#0| T@U) ) (!  (and (and (= (type |a#112#0#0|) (SeqType BoxType)) (= (type |a#112#1#0|) (SeqType BoxType))) (= d@@88 (|#UI.Op.PutOp| |a#112#0#0| |a#112#1#0|))) :qid |UIsdfy.39:13| :skolemid |2408| :no-pattern (type |a#112#0#0|) :no-pattern (type |a#112#1#0|) :no-pattern (U_2_int |a#112#0#0|) :no-pattern (U_2_bool |a#112#0#0|) :no-pattern (U_2_int |a#112#1#0|) :no-pattern (U_2_bool |a#112#1#0|) ))) :qid |unknown.0:0| :skolemid |2409| :pattern ( (UI.Op.PutOp_q d@@88)) )))
(assert (forall ((|a#113#0#0| T@U) (|a#113#1#0| T@U) ) (!  (=> (and (= (type |a#113#0#0|) (SeqType BoxType)) (= (type |a#113#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.PutOp| |a#113#0#0| |a#113#1#0|) Tclass.UI.Op)  (and ($Is |a#113#0#0| Tclass.KeyType.Key) ($Is |a#113#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.39:13| :skolemid |2410| :pattern ( ($Is (|#UI.Op.PutOp| |a#113#0#0| |a#113#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) ($h@@116 T@U) ) (!  (=> (and (and (and (= (type |a#114#0#0|) (SeqType BoxType)) (= (type |a#114#1#0|) (SeqType BoxType))) (= (type $h@@116) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@116)) (= ($IsAlloc (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op $h@@116)  (and ($IsAlloc |a#114#0#0| Tclass.KeyType.Key $h@@116) ($IsAlloc |a#114#1#0| Tclass.ValueType.Value $h@@116)))) :qid |UIsdfy.39:13| :skolemid |2411| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op $h@@116)) )))
(assert (forall ((d@@89 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@89) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (UI.Op.PutOp_q d@@89) ($IsAlloc d@@89 Tclass.UI.Op $h@@117)))) ($IsAlloc (UI.Op.key d@@89) Tclass.KeyType.Key $h@@117)) :qid |unknown.0:0| :skolemid |2412| :pattern ( ($IsAlloc (UI.Op.key d@@89) Tclass.KeyType.Key $h@@117)) )))
(assert (forall ((d@@90 T@U) ($h@@118 T@U) ) (!  (=> (and (and (= (type d@@90) DatatypeTypeType) (= (type $h@@118) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@118) (and (UI.Op.PutOp_q d@@90) ($IsAlloc d@@90 Tclass.UI.Op $h@@118)))) ($IsAlloc (UI.Op.value d@@90) Tclass.ValueType.Value $h@@118)) :qid |unknown.0:0| :skolemid |2413| :pattern ( ($IsAlloc (UI.Op.value d@@90) Tclass.ValueType.Value $h@@118)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) ) (!  (=> (and (= (type |a#115#0#0|) (SeqType BoxType)) (= (type |a#115#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#115#0#0|) (Lit |a#115#1#0|)) (Lit (|#UI.Op.PutOp| |a#115#0#0| |a#115#1#0|)))) :qid |UIsdfy.39:13| :skolemid |2414| :pattern ( (|#UI.Op.PutOp| (Lit |a#115#0#0|) (Lit |a#115#1#0|))) )))
(assert (forall ((|a#116#0#0| T@U) (|a#116#1#0| T@U) ) (!  (=> (and (= (type |a#116#0#0|) (SeqType BoxType)) (= (type |a#116#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#116#0#0| |a#116#1#0|)) |a#116#0#0|)) :qid |UIsdfy.39:13| :skolemid |2415| :pattern ( (|#UI.Op.PutOp| |a#116#0#0| |a#116#1#0|)) )))
(assert (forall ((|a#117#0#0| T@U) (|a#117#1#0| T@U) ) (!  (=> (and (= (type |a#117#0#0|) (SeqType BoxType)) (= (type |a#117#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) |a#117#1#0|)) :qid |UIsdfy.39:13| :skolemid |2416| :pattern ( (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) )))
(assert (forall ((arg0@@541 T@U) (arg1@@256 T@U) (arg2@@153 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@541 arg1@@256 arg2@@153)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@541 arg1@@256 arg2@@153)) )))
(assert (forall ((|a#118#0#0| T@U) (|a#118#1#0| T@U) (|a#118#2#0| T@U) ) (!  (=> (and (and (= (type |a#118#0#0|) DatatypeTypeType) (= (type |a#118#1#0|) (SeqType BoxType))) (= (type |a#118#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#118#0#0| |a#118#1#0| |a#118#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.41:14| :skolemid |2417| :pattern ( (|#UI.Op.SuccOp| |a#118#0#0| |a#118#1#0| |a#118#2#0|)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (= (type d@@91) DatatypeTypeType) (= (UI.Op.SuccOp_q d@@91) (= (DatatypeCtorId d@@91) |##UI.Op.SuccOp|))) :qid |unknown.0:0| :skolemid |2418| :pattern ( (UI.Op.SuccOp_q d@@91)) )))
(assert (forall ((d@@92 T@U) ) (!  (=> (and (= (type d@@92) DatatypeTypeType) (UI.Op.SuccOp_q d@@92)) (exists ((|a#119#0#0| T@U) (|a#119#1#0| T@U) (|a#119#2#0| T@U) ) (!  (and (and (and (= (type |a#119#0#0|) DatatypeTypeType) (= (type |a#119#1#0|) (SeqType BoxType))) (= (type |a#119#2#0|) DatatypeTypeType)) (= d@@92 (|#UI.Op.SuccOp| |a#119#0#0| |a#119#1#0| |a#119#2#0|))) :qid |UIsdfy.41:14| :skolemid |2419| :no-pattern (type |a#119#0#0|) :no-pattern (type |a#119#1#0|) :no-pattern (type |a#119#2#0|) :no-pattern (U_2_int |a#119#0#0|) :no-pattern (U_2_bool |a#119#0#0|) :no-pattern (U_2_int |a#119#1#0|) :no-pattern (U_2_bool |a#119#1#0|) :no-pattern (U_2_int |a#119#2#0|) :no-pattern (U_2_bool |a#119#2#0|) ))) :qid |unknown.0:0| :skolemid |2420| :pattern ( (UI.Op.SuccOp_q d@@92)) )))
(assert (forall ((|a#120#0#0| T@U) (|a#120#1#0| T@U) (|a#120#2#0| T@U) ) (!  (=> (and (and (= (type |a#120#0#0|) DatatypeTypeType) (= (type |a#120#1#0|) (SeqType BoxType))) (= (type |a#120#2#0|) DatatypeTypeType)) (= ($Is (|#UI.Op.SuccOp| |a#120#0#0| |a#120#1#0| |a#120#2#0|) Tclass.UI.Op)  (and (and ($Is |a#120#0#0| Tclass.UI.RangeStart) ($Is |a#120#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#120#2#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.41:14| :skolemid |2421| :pattern ( ($Is (|#UI.Op.SuccOp| |a#120#0#0| |a#120#1#0| |a#120#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#121#0#0| T@U) (|a#121#1#0| T@U) (|a#121#2#0| T@U) ($h@@119 T@U) ) (!  (=> (and (and (and (and (= (type |a#121#0#0|) DatatypeTypeType) (= (type |a#121#1#0|) (SeqType BoxType))) (= (type |a#121#2#0|) DatatypeTypeType)) (= (type $h@@119) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@119)) (= ($IsAlloc (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op $h@@119)  (and (and ($IsAlloc |a#121#0#0| Tclass.UI.RangeStart $h@@119) ($IsAlloc |a#121#1#0| (TSeq Tclass.UI.SuccResult) $h@@119)) ($IsAlloc |a#121#2#0| Tclass.UI.RangeEnd $h@@119)))) :qid |UIsdfy.41:14| :skolemid |2422| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op $h@@119)) )))
(assert (forall ((arg0@@542 T@U) ) (! (= (type (UI.Op.start arg0@@542)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@542)) )))
(assert (forall ((d@@93 T@U) ($h@@120 T@U) ) (!  (=> (and (and (= (type d@@93) DatatypeTypeType) (= (type $h@@120) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@120) (and (UI.Op.SuccOp_q d@@93) ($IsAlloc d@@93 Tclass.UI.Op $h@@120)))) ($IsAlloc (UI.Op.start d@@93) Tclass.UI.RangeStart $h@@120)) :qid |unknown.0:0| :skolemid |2423| :pattern ( ($IsAlloc (UI.Op.start d@@93) Tclass.UI.RangeStart $h@@120)) )))
(assert (forall ((arg0@@543 T@U) ) (! (= (type (UI.Op.results arg0@@543)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@543)) )))
(assert (forall ((d@@94 T@U) ($h@@121 T@U) ) (!  (=> (and (and (= (type d@@94) DatatypeTypeType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@121) (and (UI.Op.SuccOp_q d@@94) ($IsAlloc d@@94 Tclass.UI.Op $h@@121)))) ($IsAlloc (UI.Op.results d@@94) (TSeq Tclass.UI.SuccResult) $h@@121)) :qid |unknown.0:0| :skolemid |2424| :pattern ( ($IsAlloc (UI.Op.results d@@94) (TSeq Tclass.UI.SuccResult) $h@@121)) )))
(assert (forall ((arg0@@544 T@U) ) (! (= (type (UI.Op.end arg0@@544)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@544)) )))
(assert (forall ((d@@95 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@95) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (UI.Op.SuccOp_q d@@95) ($IsAlloc d@@95 Tclass.UI.Op $h@@122)))) ($IsAlloc (UI.Op.end d@@95) Tclass.UI.RangeEnd $h@@122)) :qid |unknown.0:0| :skolemid |2425| :pattern ( ($IsAlloc (UI.Op.end d@@95) Tclass.UI.RangeEnd $h@@122)) )))
(assert (forall ((|a#122#0#0| T@U) (|a#122#1#0| T@U) (|a#122#2#0| T@U) ) (!  (=> (and (and (= (type |a#122#0#0|) DatatypeTypeType) (= (type |a#122#1#0|) (SeqType BoxType))) (= (type |a#122#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#122#0#0|) (Lit |a#122#1#0|) (Lit |a#122#2#0|)) (Lit (|#UI.Op.SuccOp| |a#122#0#0| |a#122#1#0| |a#122#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2426| :pattern ( (|#UI.Op.SuccOp| (Lit |a#122#0#0|) (Lit |a#122#1#0|) (Lit |a#122#2#0|))) )))
(assert (forall ((|a#123#0#0| T@U) (|a#123#1#0| T@U) (|a#123#2#0| T@U) ) (!  (=> (and (and (= (type |a#123#0#0|) DatatypeTypeType) (= (type |a#123#1#0|) (SeqType BoxType))) (= (type |a#123#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#123#0#0| |a#123#1#0| |a#123#2#0|)) |a#123#0#0|)) :qid |UIsdfy.41:14| :skolemid |2427| :pattern ( (|#UI.Op.SuccOp| |a#123#0#0| |a#123#1#0| |a#123#2#0|)) )))
(assert (forall ((|a#124#0#0| T@U) (|a#124#1#0| T@U) (|a#124#2#0| T@U) ) (!  (=> (and (and (= (type |a#124#0#0|) DatatypeTypeType) (= (type |a#124#1#0|) (SeqType BoxType))) (= (type |a#124#2#0|) DatatypeTypeType)) (< (DtRank |a#124#0#0|) (DtRank (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2428| :pattern ( (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)) )))
(assert (forall ((|a#125#0#0| T@U) (|a#125#1#0| T@U) (|a#125#2#0| T@U) ) (!  (=> (and (and (= (type |a#125#0#0|) DatatypeTypeType) (= (type |a#125#1#0|) (SeqType BoxType))) (= (type |a#125#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)) |a#125#1#0|)) :qid |UIsdfy.41:14| :skolemid |2429| :pattern ( (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)) )))
(assert (forall ((|a#126#0#0| T@U) (|a#126#1#0| T@U) (|a#126#2#0| T@U) (i@@26 Int) ) (!  (=> (and (and (and (= (type |a#126#0#0|) DatatypeTypeType) (= (type |a#126#1#0|) (SeqType BoxType))) (= (type |a#126#2#0|) DatatypeTypeType)) (and (<= 0 i@@26) (< i@@26 (|Seq#Length| |a#126#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#126#1#0| i@@26))) (DtRank (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2430| :pattern ( (|Seq#Index| |a#126#1#0| i@@26) (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)) )))
(assert (forall ((|a#127#0#0| T@U) (|a#127#1#0| T@U) (|a#127#2#0| T@U) ) (!  (=> (and (and (= (type |a#127#0#0|) DatatypeTypeType) (= (type |a#127#1#0|) (SeqType BoxType))) (= (type |a#127#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#127#1#0|) (DtRank (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2431| :pattern ( (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)) )))
(assert (forall ((|a#128#0#0| T@U) (|a#128#1#0| T@U) (|a#128#2#0| T@U) ) (!  (=> (and (and (= (type |a#128#0#0|) DatatypeTypeType) (= (type |a#128#1#0|) (SeqType BoxType))) (= (type |a#128#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)) |a#128#2#0|)) :qid |UIsdfy.41:14| :skolemid |2432| :pattern ( (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)) )))
(assert (forall ((|a#129#0#0| T@U) (|a#129#1#0| T@U) (|a#129#2#0| T@U) ) (!  (=> (and (and (= (type |a#129#0#0|) DatatypeTypeType) (= (type |a#129#1#0|) (SeqType BoxType))) (= (type |a#129#2#0|) DatatypeTypeType)) (< (DtRank |a#129#2#0|) (DtRank (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2433| :pattern ( (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (and (= (type d@@96) DatatypeTypeType) (|$IsA#UI.Op| d@@96)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@96) (UI.Op.SyncOp_q d@@96)) (UI.Op.CrashOp_q d@@96)) (UI.Op.PushSyncOp_q d@@96)) (UI.Op.PopSyncOp_q d@@96)) (UI.Op.GetOp_q d@@96)) (UI.Op.GetBeginOp_q d@@96)) (UI.Op.GetEndOp_q d@@96)) (UI.Op.PutOp_q d@@96)) (UI.Op.SuccOp_q d@@96))) :qid |unknown.0:0| :skolemid |2434| :pattern ( (|$IsA#UI.Op| d@@96)) )))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) ($Is d@@97 Tclass.UI.Op)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@97) (UI.Op.SyncOp_q d@@97)) (UI.Op.CrashOp_q d@@97)) (UI.Op.PushSyncOp_q d@@97)) (UI.Op.PopSyncOp_q d@@97)) (UI.Op.GetOp_q d@@97)) (UI.Op.GetBeginOp_q d@@97)) (UI.Op.GetEndOp_q d@@97)) (UI.Op.PutOp_q d@@97)) (UI.Op.SuccOp_q d@@97))) :qid |unknown.0:0| :skolemid |2435| :pattern ( (UI.Op.SuccOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.GetEndOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.GetBeginOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@97) ($Is d@@97 Tclass.UI.Op)) )))
(assert (forall ((a@@148 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@148) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@148) (UI.Op.NoOp_q b@@85))) (= (|UI.Op#Equal| a@@148 b@@85) true)) :qid |unknown.0:0| :skolemid |2436| :pattern ( (|UI.Op#Equal| a@@148 b@@85) (UI.Op.NoOp_q a@@148)) :pattern ( (|UI.Op#Equal| a@@148 b@@85) (UI.Op.NoOp_q b@@85)) )))
(assert (forall ((a@@149 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@149) (UI.Op.SyncOp_q b@@86))) (= (|UI.Op#Equal| a@@149 b@@86) true)) :qid |unknown.0:0| :skolemid |2437| :pattern ( (|UI.Op#Equal| a@@149 b@@86) (UI.Op.SyncOp_q a@@149)) :pattern ( (|UI.Op#Equal| a@@149 b@@86) (UI.Op.SyncOp_q b@@86)) )))
(assert (forall ((a@@150 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@150) (UI.Op.CrashOp_q b@@87))) (= (|UI.Op#Equal| a@@150 b@@87) true)) :qid |unknown.0:0| :skolemid |2438| :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.CrashOp_q a@@150)) :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.CrashOp_q b@@87)) )))
(assert (forall ((a@@151 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@151) (UI.Op.PushSyncOp_q b@@88))) (= (|UI.Op#Equal| a@@151 b@@88) (= (UI.Op.id a@@151) (UI.Op.id b@@88)))) :qid |unknown.0:0| :skolemid |2439| :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.PushSyncOp_q a@@151)) :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.PushSyncOp_q b@@88)) )))
(assert (forall ((a@@152 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@152) (UI.Op.PopSyncOp_q b@@89))) (= (|UI.Op#Equal| a@@152 b@@89) (= (UI.Op.id a@@152) (UI.Op.id b@@89)))) :qid |unknown.0:0| :skolemid |2440| :pattern ( (|UI.Op#Equal| a@@152 b@@89) (UI.Op.PopSyncOp_q a@@152)) :pattern ( (|UI.Op#Equal| a@@152 b@@89) (UI.Op.PopSyncOp_q b@@89)) )))
(assert (forall ((a@@153 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@153) (UI.Op.GetOp_q b@@90))) (= (|UI.Op#Equal| a@@153 b@@90)  (and (|Seq#Equal| (UI.Op.key a@@153) (UI.Op.key b@@90)) (|Seq#Equal| (UI.Op.value a@@153) (UI.Op.value b@@90))))) :qid |unknown.0:0| :skolemid |2441| :pattern ( (|UI.Op#Equal| a@@153 b@@90) (UI.Op.GetOp_q a@@153)) :pattern ( (|UI.Op#Equal| a@@153 b@@90) (UI.Op.GetOp_q b@@90)) )))
(assert (forall ((a@@154 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (UI.Op.GetBeginOp_q a@@154) (UI.Op.GetBeginOp_q b@@91))) (= (|UI.Op#Equal| a@@154 b@@91)  (and (|Seq#Equal| (UI.Op.key a@@154) (UI.Op.key b@@91)) (= (UI.Op.id a@@154) (UI.Op.id b@@91))))) :qid |unknown.0:0| :skolemid |2442| :pattern ( (|UI.Op#Equal| a@@154 b@@91) (UI.Op.GetBeginOp_q a@@154)) :pattern ( (|UI.Op#Equal| a@@154 b@@91) (UI.Op.GetBeginOp_q b@@91)) )))
(assert (forall ((a@@155 T@U) (b@@92 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (UI.Op.GetEndOp_q a@@155) (UI.Op.GetEndOp_q b@@92))) (= (|UI.Op#Equal| a@@155 b@@92)  (and (|Seq#Equal| (UI.Op.value a@@155) (UI.Op.value b@@92)) (= (UI.Op.id a@@155) (UI.Op.id b@@92))))) :qid |unknown.0:0| :skolemid |2443| :pattern ( (|UI.Op#Equal| a@@155 b@@92) (UI.Op.GetEndOp_q a@@155)) :pattern ( (|UI.Op#Equal| a@@155 b@@92) (UI.Op.GetEndOp_q b@@92)) )))
(assert (forall ((a@@156 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@156) (UI.Op.PutOp_q b@@93))) (= (|UI.Op#Equal| a@@156 b@@93)  (and (|Seq#Equal| (UI.Op.key a@@156) (UI.Op.key b@@93)) (|Seq#Equal| (UI.Op.value a@@156) (UI.Op.value b@@93))))) :qid |unknown.0:0| :skolemid |2444| :pattern ( (|UI.Op#Equal| a@@156 b@@93) (UI.Op.PutOp_q a@@156)) :pattern ( (|UI.Op#Equal| a@@156 b@@93) (UI.Op.PutOp_q b@@93)) )))
(assert (forall ((a@@157 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@157) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@157) (UI.Op.SuccOp_q b@@94))) (= (|UI.Op#Equal| a@@157 b@@94)  (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@157) (UI.Op.start b@@94)) (|Seq#Equal| (UI.Op.results a@@157) (UI.Op.results b@@94))) (|UI.RangeEnd#Equal| (UI.Op.end a@@157) (UI.Op.end b@@94))))) :qid |unknown.0:0| :skolemid |2445| :pattern ( (|UI.Op#Equal| a@@157 b@@94) (UI.Op.SuccOp_q a@@157)) :pattern ( (|UI.Op#Equal| a@@157 b@@94) (UI.Op.SuccOp_q b@@94)) )))
(assert (forall ((a@@158 T@U) (b@@95 T@U) ) (!  (=> (and (= (type a@@158) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (= (|UI.Op#Equal| a@@158 b@@95) (= a@@158 b@@95))) :qid |unknown.0:0| :skolemid |2446| :pattern ( (|UI.Op#Equal| a@@158 b@@95)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (= (TagFamily Tclass.UI.__default) tytagFamily$_default))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@157)) bx@@157) ($Is ($Unbox refType bx@@157) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |2447| :pattern ( ($IsBox bx@@157 Tclass.UI.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (= ($Is $o@@36 Tclass.UI.__default)  (or (= $o@@36 null) (= (dtype $o@@36) Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |2448| :pattern ( ($Is $o@@36 Tclass.UI.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@123 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@123) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@37 Tclass.UI.__default $h@@123)  (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@37) alloc))))) :qid |unknown.0:0| :skolemid |2449| :pattern ( ($IsAlloc $o@@37 Tclass.UI.__default $h@@123)) )))
(assert (forall ((arg0@@545 T@U) (arg1@@257 T@U) ) (! (= (type (|#Journal.JournalEntry.JournalInsert| arg0@@545 arg1@@257)) DatatypeTypeType) :qid |funType:#Journal.JournalEntry.JournalInsert| :pattern ( (|#Journal.JournalEntry.JournalInsert| arg0@@545 arg1@@257)) )))
(assert (forall ((|a#130#0#0| T@U) (|a#130#1#0| T@U) ) (!  (=> (and (= (type |a#130#0#0|) (SeqType BoxType)) (= (type |a#130#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Journal.JournalEntry.JournalInsert| |a#130#0#0| |a#130#1#0|)) |##Journal.JournalEntry.JournalInsert|)) :qid |Journalidfy.15:41| :skolemid |2450| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#130#0#0| |a#130#1#0|)) )))
(assert (forall ((d@@98 T@U) ) (!  (=> (= (type d@@98) DatatypeTypeType) (= (Journal.JournalEntry.JournalInsert_q d@@98) (= (DatatypeCtorId d@@98) |##Journal.JournalEntry.JournalInsert|))) :qid |unknown.0:0| :skolemid |2451| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@98)) )))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) (Journal.JournalEntry.JournalInsert_q d@@99)) (exists ((|a#131#0#0| T@U) (|a#131#1#0| T@U) ) (!  (and (and (= (type |a#131#0#0|) (SeqType BoxType)) (= (type |a#131#1#0|) (SeqType BoxType))) (= d@@99 (|#Journal.JournalEntry.JournalInsert| |a#131#0#0| |a#131#1#0|))) :qid |Journalidfy.15:41| :skolemid |2452| :no-pattern (type |a#131#0#0|) :no-pattern (type |a#131#1#0|) :no-pattern (U_2_int |a#131#0#0|) :no-pattern (U_2_bool |a#131#0#0|) :no-pattern (U_2_int |a#131#1#0|) :no-pattern (U_2_bool |a#131#1#0|) ))) :qid |unknown.0:0| :skolemid |2453| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@99)) )))
(assert (forall ((|a#132#0#0| T@U) (|a#132#1#0| T@U) ) (!  (=> (and (= (type |a#132#0#0|) (SeqType BoxType)) (= (type |a#132#1#0|) (SeqType BoxType))) (= ($Is (|#Journal.JournalEntry.JournalInsert| |a#132#0#0| |a#132#1#0|) Tclass.Journal.JournalEntry)  (and ($Is |a#132#0#0| Tclass.KeyType.Key) ($Is |a#132#1#0| Tclass.ValueType.Value)))) :qid |Journalidfy.15:41| :skolemid |2454| :pattern ( ($Is (|#Journal.JournalEntry.JournalInsert| |a#132#0#0| |a#132#1#0|) Tclass.Journal.JournalEntry)) )))
(assert (forall ((|a#133#0#0| T@U) (|a#133#1#0| T@U) ($h@@124 T@U) ) (!  (=> (and (and (and (= (type |a#133#0#0|) (SeqType BoxType)) (= (type |a#133#1#0|) (SeqType BoxType))) (= (type $h@@124) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@124)) (= ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#133#0#0| |a#133#1#0|) Tclass.Journal.JournalEntry $h@@124)  (and ($IsAlloc |a#133#0#0| Tclass.KeyType.Key $h@@124) ($IsAlloc |a#133#1#0| Tclass.ValueType.Value $h@@124)))) :qid |Journalidfy.15:41| :skolemid |2455| :pattern ( ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#133#0#0| |a#133#1#0|) Tclass.Journal.JournalEntry $h@@124)) )))
(assert (forall ((d@@100 T@U) ($h@@125 T@U) ) (!  (=> (and (and (= (type d@@100) DatatypeTypeType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@125) (and (Journal.JournalEntry.JournalInsert_q d@@100) ($IsAlloc d@@100 Tclass.Journal.JournalEntry $h@@125)))) ($IsAlloc (Journal.JournalEntry.key d@@100) Tclass.KeyType.Key $h@@125)) :qid |unknown.0:0| :skolemid |2456| :pattern ( ($IsAlloc (Journal.JournalEntry.key d@@100) Tclass.KeyType.Key $h@@125)) )))
(assert (forall ((d@@101 T@U) ($h@@126 T@U) ) (!  (=> (and (and (= (type d@@101) DatatypeTypeType) (= (type $h@@126) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@126) (and (Journal.JournalEntry.JournalInsert_q d@@101) ($IsAlloc d@@101 Tclass.Journal.JournalEntry $h@@126)))) ($IsAlloc (Journal.JournalEntry.value d@@101) Tclass.ValueType.Value $h@@126)) :qid |unknown.0:0| :skolemid |2457| :pattern ( ($IsAlloc (Journal.JournalEntry.value d@@101) Tclass.ValueType.Value $h@@126)) )))
(assert (forall ((|a#134#0#0| T@U) (|a#134#1#0| T@U) ) (!  (=> (and (= (type |a#134#0#0|) (SeqType BoxType)) (= (type |a#134#1#0|) (SeqType BoxType))) (= (|#Journal.JournalEntry.JournalInsert| (Lit |a#134#0#0|) (Lit |a#134#1#0|)) (Lit (|#Journal.JournalEntry.JournalInsert| |a#134#0#0| |a#134#1#0|)))) :qid |Journalidfy.15:41| :skolemid |2458| :pattern ( (|#Journal.JournalEntry.JournalInsert| (Lit |a#134#0#0|) (Lit |a#134#1#0|))) )))
(assert (forall ((|a#135#0#0| T@U) (|a#135#1#0| T@U) ) (!  (=> (and (= (type |a#135#0#0|) (SeqType BoxType)) (= (type |a#135#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.key (|#Journal.JournalEntry.JournalInsert| |a#135#0#0| |a#135#1#0|)) |a#135#0#0|)) :qid |Journalidfy.15:41| :skolemid |2459| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#135#0#0| |a#135#1#0|)) )))
(assert (forall ((|a#136#0#0| T@U) (|a#136#1#0| T@U) ) (!  (=> (and (= (type |a#136#0#0|) (SeqType BoxType)) (= (type |a#136#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.value (|#Journal.JournalEntry.JournalInsert| |a#136#0#0| |a#136#1#0|)) |a#136#1#0|)) :qid |Journalidfy.15:41| :skolemid |2460| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#136#0#0| |a#136#1#0|)) )))
(assert (forall ((d@@102 T@U) ) (!  (=> (and (= (type d@@102) DatatypeTypeType) (|$IsA#Journal.JournalEntry| d@@102)) (Journal.JournalEntry.JournalInsert_q d@@102)) :qid |unknown.0:0| :skolemid |2461| :pattern ( (|$IsA#Journal.JournalEntry| d@@102)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) ($Is d@@103 Tclass.Journal.JournalEntry)) (Journal.JournalEntry.JournalInsert_q d@@103)) :qid |unknown.0:0| :skolemid |2462| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@103) ($Is d@@103 Tclass.Journal.JournalEntry)) )))
(assert (forall ((a@@159 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) true) (= (|Journal.JournalEntry#Equal| a@@159 b@@96)  (and (|Seq#Equal| (Journal.JournalEntry.key a@@159) (Journal.JournalEntry.key b@@96)) (|Seq#Equal| (Journal.JournalEntry.value a@@159) (Journal.JournalEntry.value b@@96))))) :qid |unknown.0:0| :skolemid |2463| :pattern ( (|Journal.JournalEntry#Equal| a@@159 b@@96)) )))
(assert (forall ((a@@160 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@160) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (= (|Journal.JournalEntry#Equal| a@@160 b@@97) (= a@@160 b@@97))) :qid |unknown.0:0| :skolemid |2464| :pattern ( (|Journal.JournalEntry#Equal| a@@160 b@@97)) )))
(assert (= (type Tclass.Journal.__default) TyType))
(assert (= (Tag Tclass.Journal.__default) Tagclass.Journal.__default))
(assert (= (TagFamily Tclass.Journal.__default) tytagFamily$_default))
(assert (forall ((bx@@158 T@U) ) (!  (=> (and (= (type bx@@158) BoxType) ($IsBox bx@@158 Tclass.Journal.__default)) (and (= ($Box ($Unbox refType bx@@158)) bx@@158) ($Is ($Unbox refType bx@@158) Tclass.Journal.__default))) :qid |unknown.0:0| :skolemid |2465| :pattern ( ($IsBox bx@@158 Tclass.Journal.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (= ($Is $o@@38 Tclass.Journal.__default)  (or (= $o@@38 null) (= (dtype $o@@38) Tclass.Journal.__default)))) :qid |unknown.0:0| :skolemid |2466| :pattern ( ($Is $o@@38 Tclass.Journal.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@127 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@127) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@39 Tclass.Journal.__default $h@@127)  (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@127 $o@@39) alloc))))) :qid |unknown.0:0| :skolemid |2467| :pattern ( ($IsAlloc $o@@39 Tclass.Journal.__default $h@@127)) )))
(assert (forall ((arg0@@546 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOp arg0@@546)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOp| :pattern ( (Journal.__default.JournalEntriesForUIOp arg0@@546)) )))
(assert  (=> true (forall ((|uiop#0| T@U) ) (!  (=> (and (= (type |uiop#0|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0|) ($Is |uiop#0| Tclass.UI.Op))) ($Is (Journal.__default.JournalEntriesForUIOp |uiop#0|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journalidfy.17:34| :skolemid |2468| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0|)) ))))
(assert (forall ((|uiop#0@@0| T@U) ) (!  (=> (and (= (type |uiop#0@@0|) DatatypeTypeType) ($Is |uiop#0@@0| Tclass.UI.Op)) (= (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|) true)) :qid |Journalidfy.17:34| :skolemid |2469| :pattern ( (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|)) )))
(assert  (=> true (forall ((|uiop#0@@1| T@U) ) (!  (=> (and (= (type |uiop#0@@1|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@1|) ($Is |uiop#0@@1| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|) (ite (UI.Op.PutOp_q |uiop#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#Journal.JournalEntry.JournalInsert| (UI.Op.key |uiop#0@@1|) (UI.Op.value |uiop#0@@1|)))) (|Seq#Empty| BoxType)))) :qid |Journalidfy.17:34| :skolemid |2470| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|)) ))))
(assert  (=> true (forall ((|uiop#0@@2| T@U) ) (!  (=> (and (= (type |uiop#0@@2|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |uiop#0@@2|)) ($Is |uiop#0@@2| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|)) (ite (UI.Op.PutOp_q (Lit |uiop#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Journal.JournalEntry.JournalInsert| (Lit (UI.Op.key (Lit |uiop#0@@2|))) (Lit (UI.Op.value (Lit |uiop#0@@2|))))))) (|Seq#Empty| BoxType)))) :qid |Journalidfy.17:34| :weight 3 :skolemid |2471| :pattern ( (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|))) ))))
(assert (forall ((arg0@@547 T@U) (arg1@@258 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOps arg0@@547 arg1@@258)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOps| :pattern ( (Journal.__default.JournalEntriesForUIOps arg0@@547 arg1@@258)) )))
(assert (forall (($ly@@272 T@U) (|uiops#0| T@U) ) (!  (=> (and (= (type $ly@@272) LayerTypeType) (= (type |uiops#0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@272) |uiops#0|) (Journal.__default.JournalEntriesForUIOps $ly@@272 |uiops#0|))) :qid |Journalidfy.25:12| :skolemid |2472| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@272) |uiops#0|)) )))
(assert (forall (($ly@@273 T@U) (|uiops#0@@0| T@U) ) (!  (=> (and (= (type $ly@@273) LayerTypeType) (= (type |uiops#0@@0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps $ly@@273 |uiops#0@@0|) (Journal.__default.JournalEntriesForUIOps $LZ |uiops#0@@0|))) :qid |Journalidfy.25:12| :skolemid |2473| :pattern ( (Journal.__default.JournalEntriesForUIOps (AsFuelBottom $ly@@273) |uiops#0@@0|)) )))
(assert  (=> true (forall (($ly@@274 T@U) (|uiops#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@274) LayerTypeType) (= (type |uiops#0@@1|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@1|) ($Is |uiops#0@@1| (TSeq Tclass.UI.Op)))) ($Is (Journal.__default.JournalEntriesForUIOps $ly@@274 |uiops#0@@1|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journalidfy.25:12| :skolemid |2474| :pattern ( (Journal.__default.JournalEntriesForUIOps $ly@@274 |uiops#0@@1|)) ))))
(assert (forall (($ly@@275 T@U) (|uiops#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@275) LayerTypeType) (= (type |uiops#0@@2|) (SeqType BoxType))) ($Is |uiops#0@@2| (TSeq Tclass.UI.Op))) (= (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@275 |uiops#0@@2|) true)) :qid |Journalidfy.25:12| :skolemid |2475| :pattern ( (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@275 |uiops#0@@2|)) )))
(assert  (=> true (forall (($ly@@276 T@U) (|uiops#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@276) LayerTypeType) (= (type |uiops#0@@3|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@3|) ($Is |uiops#0@@3| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOps#canCall| (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOp#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@276) |uiops#0@@3|) (ite (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps $ly@@276 (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|)) (Journal.__default.JournalEntriesForUIOp ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))))) :qid |Journalidfy.25:12| :skolemid |2476| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@276) |uiops#0@@3|)) ))))
(assert  (=> true (forall (($ly@@277 T@U) (|uiops#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@277) LayerTypeType) (= (type |uiops#0@@4|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit |uiops#0@@4|)) ($Is |uiops#0@@4| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|))))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@277) (Lit |uiops#0@@4|)) (ite (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps ($LS $ly@@277) (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|)))) (Journal.__default.JournalEntriesForUIOp (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))))) :qid |Journalidfy.25:12| :weight 3 :skolemid |2477| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@277) (Lit |uiops#0@@4|))) ))))
(assert (= (type Tclass.NativePackedInts.__default) TyType))
(assert (= (Tag Tclass.NativePackedInts.__default) Tagclass.NativePackedInts.__default))
(assert (= (TagFamily Tclass.NativePackedInts.__default) tytagFamily$_default))
(assert (forall ((bx@@159 T@U) ) (!  (=> (and (= (type bx@@159) BoxType) ($IsBox bx@@159 Tclass.NativePackedInts.__default)) (and (= ($Box ($Unbox refType bx@@159)) bx@@159) ($Is ($Unbox refType bx@@159) Tclass.NativePackedInts.__default))) :qid |unknown.0:0| :skolemid |2478| :pattern ( ($IsBox bx@@159 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (= ($Is $o@@40 Tclass.NativePackedInts.__default)  (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativePackedInts.__default)))) :qid |unknown.0:0| :skolemid |2479| :pattern ( ($Is $o@@40 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@128 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@128) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@41 Tclass.NativePackedInts.__default $h@@128)  (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@128 $o@@41) alloc))))) :qid |unknown.0:0| :skolemid |2480| :pattern ( ($IsAlloc $o@@41 Tclass.NativePackedInts.__default $h@@128)) )))
(assert (forall (($ly@@278 T@U) (|s#0@@75| T@U) ) (!  (=> (and (= (type $ly@@278) LayerTypeType) (= (type |s#0@@75|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@278) |s#0@@75|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@278 |s#0@@75|))) :qid |PackedIntssdfy.11:22| :skolemid |2481| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@278) |s#0@@75|)) )))
(assert (forall (($ly@@279 T@U) (|s#0@@76| T@U) ) (!  (=> (and (= (type $ly@@279) LayerTypeType) (= (type |s#0@@76|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@279 |s#0@@76|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $LZ |s#0@@76|))) :qid |PackedIntssdfy.11:22| :skolemid |2482| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 (AsFuelBottom $ly@@279) |s#0@@76|)) )))
(assert  (=> true (forall (($ly@@280 T@U) (|s#0@@77| T@U) ) (!  (=> (and (and (= (type $ly@@280) LayerTypeType) (= (type |s#0@@77|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@77|) (and ($Is |s#0@@77| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@77|) (LitInt 4))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@280 |s#0@@77|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@280 |s#0@@77|) 4294967296))) :qid |PackedIntssdfy.11:22| :skolemid |2483| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@280 |s#0@@77|)) ))))
(assert (forall (($ly@@281 T@U) (|s#0@@78| T@U) ) (!  (=> (and (and (= (type $ly@@281) LayerTypeType) (= (type |s#0@@78|) (SeqType BoxType))) ($Is |s#0@@78| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@281 |s#0@@78|) (= (|Seq#Length| |s#0@@78|) (LitInt 4)))) :qid |PackedIntssdfy.11:22| :skolemid |2484| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@281 |s#0@@78|)) )))
(assert  (=> true (forall (($ly@@282 T@U) (|s#0@@79| T@U) ) (!  (=> (and (and (= (type $ly@@282) LayerTypeType) (= (type |s#0@@79|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@79|) (and ($Is |s#0@@79| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@79|) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@282) |s#0@@79|) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :skolemid |2485| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@282) |s#0@@79|)) ))))
(assert  (=> true (forall (($ly@@283 T@U) (|s#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@283) LayerTypeType) (= (type |s#0@@80|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit |s#0@@80|)) (and ($Is |s#0@@80| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@80|)) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@283) (Lit |s#0@@80|)) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :weight 3 :skolemid |2486| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@283) (Lit |s#0@@80|))) ))))
(assert (forall (($ly@@284 T@U) (|s#0@@81| T@U) ) (!  (=> (and (= (type $ly@@284) LayerTypeType) (= (type |s#0@@81|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@284) |s#0@@81|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@284 |s#0@@81|))) :qid |PackedIntssdfy.20:22| :skolemid |2487| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@284) |s#0@@81|)) )))
(assert (forall (($ly@@285 T@U) (|s#0@@82| T@U) ) (!  (=> (and (= (type $ly@@285) LayerTypeType) (= (type |s#0@@82|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@285 |s#0@@82|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $LZ |s#0@@82|))) :qid |PackedIntssdfy.20:22| :skolemid |2488| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 (AsFuelBottom $ly@@285) |s#0@@82|)) )))
(assert  (=> true (forall (($ly@@286 T@U) (|s#0@@83| T@U) ) (!  (=> (and (and (= (type $ly@@286) LayerTypeType) (= (type |s#0@@83|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@83|) (and ($Is |s#0@@83| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@83|) (LitInt 8))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@286 |s#0@@83|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@286 |s#0@@83|) 18446744073709551616))) :qid |PackedIntssdfy.20:22| :skolemid |2489| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@286 |s#0@@83|)) ))))
(assert (forall (($ly@@287 T@U) (|s#0@@84| T@U) ) (!  (=> (and (and (= (type $ly@@287) LayerTypeType) (= (type |s#0@@84|) (SeqType BoxType))) ($Is |s#0@@84| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@287 |s#0@@84|) (= (|Seq#Length| |s#0@@84|) (LitInt 8)))) :qid |PackedIntssdfy.20:22| :skolemid |2490| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@287 |s#0@@84|)) )))
(assert  (=> true (forall (($ly@@288 T@U) (|s#0@@85| T@U) ) (!  (=> (and (and (= (type $ly@@288) LayerTypeType) (= (type |s#0@@85|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@85|) (and ($Is |s#0@@85| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@85|) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@288) |s#0@@85|) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :skolemid |2491| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@288) |s#0@@85|)) ))))
(assert  (=> true (forall (($ly@@289 T@U) (|s#0@@86| T@U) ) (!  (=> (and (and (= (type $ly@@289) LayerTypeType) (= (type |s#0@@86|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit |s#0@@86|)) (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@86|)) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@289) (Lit |s#0@@86|)) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :weight 3 :skolemid |2492| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@289) (Lit |s#0@@86|))) ))))
(assert (forall ((arg0@@548 T@U) (arg1@@259 T@U) (arg2@@154 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@548 arg1@@259 arg2@@154)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@548 arg1@@259 arg2@@154)) )))
(assert (forall (($ly@@290 T@U) (|packed#0| T@U) (|len#0@@16| Int) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) (= (type |packed#0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@290) |packed#0| |len#0@@16|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@290 |packed#0| |len#0@@16|))) :qid |PackedIntssdfy.33:22| :skolemid |2493| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@290) |packed#0| |len#0@@16|)) )))
(assert (forall (($ly@@291 T@U) (|packed#0@@0| T@U) (|len#0@@17| Int) ) (!  (=> (and (= (type $ly@@291) LayerTypeType) (= (type |packed#0@@0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@291 |packed#0@@0| |len#0@@17|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $LZ |packed#0@@0| |len#0@@17|))) :qid |PackedIntssdfy.33:22| :skolemid |2494| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (AsFuelBottom $ly@@291) |packed#0@@0| |len#0@@17|)) )))
(assert  (=> true (forall (($ly@@292 T@U) (|packed#0@@1| T@U) (|len#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@292) LayerTypeType) (= (type |packed#0@@1|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@1| |len#0@@18|) (and ($Is |packed#0@@1| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@1|) (Mul |len#0@@18| (LitInt 4)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@292 |packed#0@@1| |len#0@@18|)) |len#0@@18|) (forall ((|i#0@@114| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| |len#0@@18|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@292 |packed#0@@1| |len#0@@18|) |i#0@@114|))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@1| (+ (Mul (LitInt 4) |i#0@@114|) 4)) (Mul (LitInt 4) |i#0@@114|))))) :qid |PackedIntssdfy.38:18| :skolemid |2495| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@292 |packed#0@@1| |len#0@@18|) |i#0@@114|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@292 |packed#0@@1| |len#0@@18|) (TSeq Tclass.NativeTypes.uint32)))) :qid |PackedIntssdfy.33:22| :skolemid |2496| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@292 |packed#0@@1| |len#0@@18|)) ))))
(assert (forall (($ly@@293 T@U) (|packed#0@@2| T@U) (|len#0@@19| Int) ) (!  (=> (and (and (= (type $ly@@293) LayerTypeType) (= (type |packed#0@@2|) (SeqType BoxType))) ($Is |packed#0@@2| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@293 |packed#0@@2| |len#0@@19|) (= (|Seq#Length| |packed#0@@2|) (Mul |len#0@@19| (LitInt 4))))) :qid |PackedIntssdfy.33:22| :skolemid |2497| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@293 |packed#0@@2| |len#0@@19|)) )))
(assert  (=> true (forall (($ly@@294 T@U) (|packed#0@@3| T@U) (|len#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@294) LayerTypeType) (= (type |packed#0@@3|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@3| |len#0@@20|) (and ($Is |packed#0@@3| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@3|) (Mul |len#0@@20| (LitInt 4)))))) (and (=> (not (= |len#0@@20| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@20| 1))) (- |len#0@@20| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@20|)) (Mul (LitInt 4) (- |len#0@@20| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@294) |packed#0@@3| |len#0@@20|) (ite (= |len#0@@20| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@294 (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@20| 1))) (- |len#0@@20| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@20|)) (Mul (LitInt 4) (- |len#0@@20| 1)))))))))))) :qid |PackedIntssdfy.33:22| :skolemid |2498| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@294) |packed#0@@3| |len#0@@20|)) ))))
(assert  (=> true (forall (($ly@@295 T@U) (|packed#0@@4| T@U) (|len#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@295) LayerTypeType) (= (type |packed#0@@4|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit |packed#0@@4|) (LitInt |len#0@@21|)) (and ($Is |packed#0@@4| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@4|)) (LitInt (Mul (LitInt |len#0@@21|) (LitInt 4))))))) (and (=> (not (= (LitInt |len#0@@21|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@21| 1)))))) (LitInt (- |len#0@@21| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@21|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@21| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@295) (Lit |packed#0@@4|) (LitInt |len#0@@21|)) (ite (= (LitInt |len#0@@21|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@295) (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@21| 1)))))) (LitInt (- |len#0@@21| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@21|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@21| 1))))))))))))))) :qid |PackedIntssdfy.33:22| :weight 3 :skolemid |2499| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@295) (Lit |packed#0@@4|) (LitInt |len#0@@21|))) ))))
(assert (forall ((arg0@@549 T@U) (arg1@@260 T@U) (arg2@@155 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@549 arg1@@260 arg2@@155)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@549 arg1@@260 arg2@@155)) )))
(assert (forall (($ly@@296 T@U) (|packed#0@@5| T@U) (|len#0@@22| Int) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) (= (type |packed#0@@5|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@296) |packed#0@@5| |len#0@@22|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@296 |packed#0@@5| |len#0@@22|))) :qid |PackedIntssdfy.50:22| :skolemid |2500| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@296) |packed#0@@5| |len#0@@22|)) )))
(assert (forall (($ly@@297 T@U) (|packed#0@@6| T@U) (|len#0@@23| Int) ) (!  (=> (and (= (type $ly@@297) LayerTypeType) (= (type |packed#0@@6|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@297 |packed#0@@6| |len#0@@23|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $LZ |packed#0@@6| |len#0@@23|))) :qid |PackedIntssdfy.50:22| :skolemid |2501| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (AsFuelBottom $ly@@297) |packed#0@@6| |len#0@@23|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType))
(assert  (=> true (forall (($ly@@298 T@U) (|packed#0@@7| T@U) (|len#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@298) LayerTypeType) (= (type |packed#0@@7|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@7| |len#0@@24|) (and ($Is |packed#0@@7| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@7|) (Mul |len#0@@24| (LitInt 8)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@298 |packed#0@@7| |len#0@@24|)) |len#0@@24|) (forall ((|i#0@@115| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@115|) (< |i#0@@115| |len#0@@24|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@298 |packed#0@@7| |len#0@@24|) |i#0@@115|))) (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@7| (+ (Mul (LitInt 8) |i#0@@115|) 8)) (Mul (LitInt 8) |i#0@@115|))))) :qid |PackedIntssdfy.55:18| :skolemid |2502| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@298 |packed#0@@7| |len#0@@24|) |i#0@@115|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@298 |packed#0@@7| |len#0@@24|) (TSeq Tclass.NativeTypes.uint64)))) :qid |PackedIntssdfy.50:22| :skolemid |2503| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@298 |packed#0@@7| |len#0@@24|)) ))))
(assert (forall (($ly@@299 T@U) (|packed#0@@8| T@U) (|len#0@@25| Int) ) (!  (=> (and (and (= (type $ly@@299) LayerTypeType) (= (type |packed#0@@8|) (SeqType BoxType))) ($Is |packed#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@299 |packed#0@@8| |len#0@@25|) (= (|Seq#Length| |packed#0@@8|) (Mul |len#0@@25| (LitInt 8))))) :qid |PackedIntssdfy.50:22| :skolemid |2504| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@299 |packed#0@@8| |len#0@@25|)) )))
(assert  (=> true (forall (($ly@@300 T@U) (|packed#0@@9| T@U) (|len#0@@26| Int) ) (!  (=> (and (and (= (type $ly@@300) LayerTypeType) (= (type |packed#0@@9|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@9| |len#0@@26|) (and ($Is |packed#0@@9| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@9|) (Mul |len#0@@26| (LitInt 8)))))) (and (=> (not (= |len#0@@26| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@26| 1))) (- |len#0@@26| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@26|)) (Mul (LitInt 8) (- |len#0@@26| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@300) |packed#0@@9| |len#0@@26|) (ite (= |len#0@@26| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@300 (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@26| 1))) (- |len#0@@26| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@26|)) (Mul (LitInt 8) (- |len#0@@26| 1)))))))))))) :qid |PackedIntssdfy.50:22| :skolemid |2505| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@300) |packed#0@@9| |len#0@@26|)) ))))
(assert  (=> true (forall (($ly@@301 T@U) (|packed#0@@10| T@U) (|len#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@301) LayerTypeType) (= (type |packed#0@@10|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit |packed#0@@10|) (LitInt |len#0@@27|)) (and ($Is |packed#0@@10| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@10|)) (LitInt (Mul (LitInt |len#0@@27|) (LitInt 8))))))) (and (=> (not (= (LitInt |len#0@@27|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@27| 1)))))) (LitInt (- |len#0@@27| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@27|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@27| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@301) (Lit |packed#0@@10|) (LitInt |len#0@@27|)) (ite (= (LitInt |len#0@@27|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@301) (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@27| 1)))))) (LitInt (- |len#0@@27| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@27|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@27| 1))))))))))))))) :qid |PackedIntssdfy.50:22| :weight 3 :skolemid |2506| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@301) (Lit |packed#0@@10|) (LitInt |len#0@@27|))) ))))
(assert (forall ((|a#0#0#0@@1| Int) (|a#0#1#0@@0| Int) ) (! (= (DatatypeCtorId (|#JournalRanges.Header.Header| |a#0#0#0@@1| |a#0#1#0@@0|)) |##JournalRanges.Header.Header|) :qid |JournalRangeidfy.86:34| :skolemid |2507| :pattern ( (|#JournalRanges.Header.Header| |a#0#0#0@@1| |a#0#1#0@@0|)) )))
(assert (forall ((d@@104 T@U) ) (!  (=> (= (type d@@104) DatatypeTypeType) (= (JournalRanges.Header.Header_q d@@104) (= (DatatypeCtorId d@@104) |##JournalRanges.Header.Header|))) :qid |unknown.0:0| :skolemid |2508| :pattern ( (JournalRanges.Header.Header_q d@@104)) )))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (JournalRanges.Header.Header_q d@@105)) (exists ((|a#1#0#0@@1| Int) (|a#1#1#0@@0| Int) ) (! (= d@@105 (|#JournalRanges.Header.Header| |a#1#0#0@@1| |a#1#1#0@@0|)) :qid |JournalRangeidfy.86:34| :skolemid |2509| ))) :qid |unknown.0:0| :skolemid |2510| :pattern ( (JournalRanges.Header.Header_q d@@105)) )))
(assert (forall ((|a#2#0#0@@1| Int) (|a#2#1#0@@0| Int) ) (! (= ($Is (|#JournalRanges.Header.Header| |a#2#0#0@@1| |a#2#1#0@@0|) Tclass.JournalRanges.Header)  (and ($Is (int_2_U |a#2#0#0@@1|) TInt) ($Is (int_2_U |a#2#1#0@@0|) TInt))) :qid |JournalRangeidfy.86:34| :skolemid |2511| :pattern ( ($Is (|#JournalRanges.Header.Header| |a#2#0#0@@1| |a#2#1#0@@0|) Tclass.JournalRanges.Header)) )))
(assert (forall ((|a#3#0#0@@1| Int) (|a#3#1#0@@0| Int) ($h@@129 T@U) ) (!  (=> (and (= (type $h@@129) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@129)) (= ($IsAlloc (|#JournalRanges.Header.Header| |a#3#0#0@@1| |a#3#1#0@@0|) Tclass.JournalRanges.Header $h@@129)  (and ($IsAlloc (int_2_U |a#3#0#0@@1|) TInt $h@@129) ($IsAlloc (int_2_U |a#3#1#0@@0|) TInt $h@@129)))) :qid |JournalRangeidfy.86:34| :skolemid |2512| :pattern ( ($IsAlloc (|#JournalRanges.Header.Header| |a#3#0#0@@1| |a#3#1#0@@0|) Tclass.JournalRanges.Header $h@@129)) )))
(assert (forall ((d@@106 T@U) ($h@@130 T@U) ) (!  (=> (and (and (= (type d@@106) DatatypeTypeType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@130) (and (JournalRanges.Header.Header_q d@@106) ($IsAlloc d@@106 Tclass.JournalRanges.Header $h@@130)))) ($IsAlloc (int_2_U (JournalRanges.Header.nentries d@@106)) TInt $h@@130)) :qid |unknown.0:0| :skolemid |2513| :pattern ( ($IsAlloc (int_2_U (JournalRanges.Header.nentries d@@106)) TInt $h@@130)) )))
(assert (forall ((d@@107 T@U) ($h@@131 T@U) ) (!  (=> (and (and (= (type d@@107) DatatypeTypeType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@131) (and (JournalRanges.Header.Header_q d@@107) ($IsAlloc d@@107 Tclass.JournalRanges.Header $h@@131)))) ($IsAlloc (int_2_U (JournalRanges.Header.nblocks d@@107)) TInt $h@@131)) :qid |unknown.0:0| :skolemid |2514| :pattern ( ($IsAlloc (int_2_U (JournalRanges.Header.nblocks d@@107)) TInt $h@@131)) )))
(assert (forall ((|a#4#0#0@@1| Int) (|a#4#1#0@@0| Int) ) (! (= (|#JournalRanges.Header.Header| (LitInt |a#4#0#0@@1|) (LitInt |a#4#1#0@@0|)) (Lit (|#JournalRanges.Header.Header| |a#4#0#0@@1| |a#4#1#0@@0|))) :qid |JournalRangeidfy.86:34| :skolemid |2515| :pattern ( (|#JournalRanges.Header.Header| (LitInt |a#4#0#0@@1|) (LitInt |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@2| Int) (|a#5#1#0@@0| Int) ) (! (= (JournalRanges.Header.nentries (|#JournalRanges.Header.Header| |a#5#0#0@@2| |a#5#1#0@@0|)) |a#5#0#0@@2|) :qid |JournalRangeidfy.86:34| :skolemid |2516| :pattern ( (|#JournalRanges.Header.Header| |a#5#0#0@@2| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@2| Int) (|a#6#1#0@@0| Int) ) (! (= (JournalRanges.Header.nblocks (|#JournalRanges.Header.Header| |a#6#0#0@@2| |a#6#1#0@@0|)) |a#6#1#0@@0|) :qid |JournalRangeidfy.86:34| :skolemid |2517| :pattern ( (|#JournalRanges.Header.Header| |a#6#0#0@@2| |a#6#1#0@@0|)) )))
(assert (forall ((d@@108 T@U) ) (!  (=> (and (= (type d@@108) DatatypeTypeType) (|$IsA#JournalRanges.Header| d@@108)) (JournalRanges.Header.Header_q d@@108)) :qid |unknown.0:0| :skolemid |2518| :pattern ( (|$IsA#JournalRanges.Header| d@@108)) )))
(assert (forall ((d@@109 T@U) ) (!  (=> (and (= (type d@@109) DatatypeTypeType) ($Is d@@109 Tclass.JournalRanges.Header)) (JournalRanges.Header.Header_q d@@109)) :qid |unknown.0:0| :skolemid |2519| :pattern ( (JournalRanges.Header.Header_q d@@109) ($Is d@@109 Tclass.JournalRanges.Header)) )))
(assert (forall ((a@@161 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) true) (= (|JournalRanges.Header#Equal| a@@161 b@@98)  (and (= (JournalRanges.Header.nentries a@@161) (JournalRanges.Header.nentries b@@98)) (= (JournalRanges.Header.nblocks a@@161) (JournalRanges.Header.nblocks b@@98))))) :qid |unknown.0:0| :skolemid |2520| :pattern ( (|JournalRanges.Header#Equal| a@@161 b@@98)) )))
(assert (forall ((a@@162 T@U) (b@@99 T@U) ) (!  (=> (and (= (type a@@162) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (= (|JournalRanges.Header#Equal| a@@162 b@@99) (= a@@162 b@@99))) :qid |unknown.0:0| :skolemid |2521| :pattern ( (|JournalRanges.Header#Equal| a@@162 b@@99)) )))
(assert (= (type Tclass.JournalRanges.__default) TyType))
(assert (= (Tag Tclass.JournalRanges.__default) Tagclass.JournalRanges.__default))
(assert (= (TagFamily Tclass.JournalRanges.__default) tytagFamily$_default))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (= ($Is $o@@42 Tclass.JournalRanges.__default)  (or (= $o@@42 null) (= (dtype $o@@42) Tclass.JournalRanges.__default)))) :qid |unknown.0:0| :skolemid |2522| :pattern ( ($Is $o@@42 Tclass.JournalRanges.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@132 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@132) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@43 Tclass.JournalRanges.__default $h@@132)  (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@132 $o@@43) alloc))))) :qid |unknown.0:0| :skolemid |2523| :pattern ( ($IsAlloc $o@@43 Tclass.JournalRanges.__default $h@@132)) )))
(assert  (=> true (forall ((|jr#0| T@U) ) (!  (=> (and (= (type |jr#0|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0|) ($Is |jr#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) (>= (JournalRanges.__default.JournalRangeLen |jr#0|) (LitInt 0))) :qid |JournalRangeidfy.31:28| :skolemid |2524| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0|)) ))))
(assert (forall ((|jr#0@@0| T@U) ) (!  (=> (and (= (type |jr#0@@0|) (SeqType BoxType)) ($Is |jr#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|) true)) :qid |JournalRangeidfy.31:28| :skolemid |2525| :pattern ( (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@1| T@U) ) (!  (=> (and (= (type |jr#0@@1|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0@@1|) ($Is |jr#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (JournalRanges.__default.JournalRangeLen |jr#0@@1|) (|Seq#Length| |jr#0@@1|))) :qid |JournalRangeidfy.31:28| :skolemid |2526| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@2| T@U) ) (!  (=> (and (= (type |jr#0@@2|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| (Lit |jr#0@@2|)) ($Is |jr#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|)) (|Seq#Length| (Lit |jr#0@@2|)))) :qid |JournalRangeidfy.31:28| :weight 3 :skolemid |2527| :pattern ( (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|))) ))))
(assert (forall ((arg0@@550 T@U) (arg1@@261 Int) ) (! (= (type (JournalRanges.__default.JournalRangePrefix arg0@@550 arg1@@261)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangePrefix| :pattern ( (JournalRanges.__default.JournalRangePrefix arg0@@550 arg1@@261)) )))
(assert  (=> true (forall ((|jr#0@@3| T@U) (|i#0@@116| Int) ) (!  (=> (and (= (type |jr#0@@3|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| |jr#0@@3| |i#0@@116|) (and ($Is |jr#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@116|) (<= |i#0@@116| (JournalRanges.__default.JournalRangeLen |jr#0@@3|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@116|)) |i#0@@116|) ($Is (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@116|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |JournalRangeidfy.37:31| :skolemid |2528| :pattern ( (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@116|)) ))))
(assert (forall ((|jr#0@@4| T@U) (|i#0@@117| Int) ) (!  (=> (and (= (type |jr#0@@4|) (SeqType BoxType)) ($Is |jr#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@117|)  (and (<= (LitInt 0) |i#0@@117|) (<= |i#0@@117| (JournalRanges.__default.JournalRangeLen |jr#0@@4|))))) :qid |JournalRangeidfy.37:31| :skolemid |2529| :pattern ( (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@117|)) )))
(assert  (=> true (forall ((|jr#0@@5| T@U) (|i#0@@118| Int) ) (!  (=> (and (= (type |jr#0@@5|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| |jr#0@@5| |i#0@@118|) (and ($Is |jr#0@@5| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@118|) (<= |i#0@@118| (JournalRanges.__default.JournalRangeLen |jr#0@@5|)))))) (= (JournalRanges.__default.JournalRangePrefix |jr#0@@5| |i#0@@118|) (|Seq#Take| |jr#0@@5| |i#0@@118|))) :qid |JournalRangeidfy.37:31| :skolemid |2530| :pattern ( (JournalRanges.__default.JournalRangePrefix |jr#0@@5| |i#0@@118|)) ))))
(assert  (=> true (forall ((|jr#0@@6| T@U) (|i#0@@119| Int) ) (!  (=> (and (= (type |jr#0@@6|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| (Lit |jr#0@@6|) (LitInt |i#0@@119|)) (and ($Is |jr#0@@6| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@119|)) (<= (LitInt |i#0@@119|) (LitInt (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@6|)))))))) (= (JournalRanges.__default.JournalRangePrefix (Lit |jr#0@@6|) (LitInt |i#0@@119|)) (Lit (|Seq#Take| (Lit |jr#0@@6|) (LitInt |i#0@@119|))))) :qid |JournalRangeidfy.37:31| :weight 3 :skolemid |2531| :pattern ( (JournalRanges.__default.JournalRangePrefix (Lit |jr#0@@6|) (LitInt |i#0@@119|))) ))))
(assert (forall ((arg0@@551 T@U) (arg1@@262 Int) ) (! (= (type (JournalRanges.__default.JournalRangeSuffix arg0@@551 arg1@@262)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeSuffix| :pattern ( (JournalRanges.__default.JournalRangeSuffix arg0@@551 arg1@@262)) )))
(assert  (=> true (forall ((|jr#0@@7| T@U) (|i#0@@120| Int) ) (!  (=> (and (= (type |jr#0@@7|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| |jr#0@@7| |i#0@@120|) (and ($Is |jr#0@@7| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@120|) (<= |i#0@@120| (JournalRanges.__default.JournalRangeLen |jr#0@@7|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@120|)) (- (JournalRanges.__default.JournalRangeLen |jr#0@@7|) |i#0@@120|)) ($Is (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@120|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |JournalRangeidfy.44:31| :skolemid |2532| :pattern ( (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@120|)) ))))
(assert (forall ((|jr#0@@8| T@U) (|i#0@@121| Int) ) (!  (=> (and (= (type |jr#0@@8|) (SeqType BoxType)) ($Is |jr#0@@8| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@8| |i#0@@121|)  (and (<= (LitInt 0) |i#0@@121|) (<= |i#0@@121| (JournalRanges.__default.JournalRangeLen |jr#0@@8|))))) :qid |JournalRangeidfy.44:31| :skolemid |2533| :pattern ( (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@8| |i#0@@121|)) )))
(assert  (=> true (forall ((|jr#0@@9| T@U) (|i#0@@122| Int) ) (!  (=> (and (= (type |jr#0@@9|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| |jr#0@@9| |i#0@@122|) (and ($Is |jr#0@@9| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@122|) (<= |i#0@@122| (JournalRanges.__default.JournalRangeLen |jr#0@@9|)))))) (= (JournalRanges.__default.JournalRangeSuffix |jr#0@@9| |i#0@@122|) (|Seq#Drop| |jr#0@@9| |i#0@@122|))) :qid |JournalRangeidfy.44:31| :skolemid |2534| :pattern ( (JournalRanges.__default.JournalRangeSuffix |jr#0@@9| |i#0@@122|)) ))))
(assert  (=> true (forall ((|jr#0@@10| T@U) (|i#0@@123| Int) ) (!  (=> (and (= (type |jr#0@@10|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| (Lit |jr#0@@10|) (LitInt |i#0@@123|)) (and ($Is |jr#0@@10| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@123|)) (<= (LitInt |i#0@@123|) (LitInt (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@10|)))))))) (= (JournalRanges.__default.JournalRangeSuffix (Lit |jr#0@@10|) (LitInt |i#0@@123|)) (Lit (|Seq#Drop| (Lit |jr#0@@10|) (LitInt |i#0@@123|))))) :qid |JournalRangeidfy.44:31| :weight 3 :skolemid |2535| :pattern ( (JournalRanges.__default.JournalRangeSuffix (Lit |jr#0@@10|) (LitInt |i#0@@123|))) ))))
(assert (forall ((arg0@@552 T@U) (arg1@@263 T@U) ) (! (= (type (JournalRanges.__default.JournalRangeConcat arg0@@552 arg1@@263)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeConcat| :pattern ( (JournalRanges.__default.JournalRangeConcat arg0@@552 arg1@@263)) )))
(assert  (=> true (forall ((|jr1#0| T@U) (|jr2#0| T@U) ) (!  (=> (and (and (= (type |jr1#0|) (SeqType BoxType)) (= (type |jr2#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0| |jr2#0|) (and ($Is |jr1#0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0| (TSeq (TSeq Tclass.NativeTypes.byte)))))) ($Is (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|) (TSeq (TSeq Tclass.NativeTypes.byte)))) :qid |JournalRangeidfy.52:31| :skolemid |2536| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|)) ))))
(assert (forall ((|jr1#0@@0| T@U) (|jr2#0@@0| T@U) ) (!  (=> (and (and (= (type |jr1#0@@0|) (SeqType BoxType)) (= (type |jr2#0@@0|) (SeqType BoxType))) (and ($Is |jr1#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|) true)) :qid |JournalRangeidfy.52:31| :skolemid |2537| :pattern ( (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|)) )))
(assert  (=> true (forall ((|jr1#0@@1| T@U) (|jr2#0@@1| T@U) ) (!  (=> (and (and (= (type |jr1#0@@1|) (SeqType BoxType)) (= (type |jr2#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0@@1| |jr2#0@@1|) (and ($Is |jr1#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|) (|Seq#Append| |jr1#0@@1| |jr2#0@@1|))) :qid |JournalRangeidfy.52:31| :skolemid |2538| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|)) ))))
(assert  (=> true (forall ((|jr1#0@@2| T@U) (|jr2#0@@2| T@U) ) (!  (=> (and (and (= (type |jr1#0@@2|) (SeqType BoxType)) (= (type |jr2#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (and ($Is |jr1#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (|Seq#Append| |jr1#0@@2| |jr2#0@@2|))) :qid |JournalRangeidfy.52:31| :weight 3 :skolemid |2539| :pattern ( (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|))) ))))
(assert (= (type JournalRanges.__default.JournalRangeEmpty) (SeqType BoxType)))
(assert  (=> true (=> true ($Is JournalRanges.__default.JournalRangeEmpty (TSeq (TSeq Tclass.NativeTypes.byte))))))
(assert (= |JournalRanges.__default.JournalRangeEmpty#requires| true))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert (forall ((arg0@@553 T@U) (arg1@@264 T@U) (arg2@@156 Int) ) (! (= (type (JournalRanges.__default.JournalBlocksI arg0@@553 arg1@@264 arg2@@156)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlocksI| :pattern ( (JournalRanges.__default.JournalBlocksI arg0@@553 arg1@@264 arg2@@156)) )))
(assert (forall (($ly@@302 T@U) (|jr#0@@11| T@U) (|i#0@@124| Int) ) (!  (=> (and (= (type $ly@@302) LayerTypeType) (= (type |jr#0@@11|) (SeqType BoxType))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@302) |jr#0@@11| |i#0@@124|) (JournalRanges.__default.JournalBlocksI $ly@@302 |jr#0@@11| |i#0@@124|))) :qid |JournalRangeidfy.62:12| :skolemid |2540| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@302) |jr#0@@11| |i#0@@124|)) )))
(assert (forall (($ly@@303 T@U) (|jr#0@@12| T@U) (|i#0@@125| Int) ) (!  (=> (and (= (type $ly@@303) LayerTypeType) (= (type |jr#0@@12|) (SeqType BoxType))) (= (JournalRanges.__default.JournalBlocksI $ly@@303 |jr#0@@12| |i#0@@125|) (JournalRanges.__default.JournalBlocksI $LZ |jr#0@@12| |i#0@@125|))) :qid |JournalRangeidfy.62:12| :skolemid |2541| :pattern ( (JournalRanges.__default.JournalBlocksI (AsFuelBottom $ly@@303) |jr#0@@12| |i#0@@125|)) )))
(assert  (=> true (forall (($ly@@304 T@U) (|jr#0@@13| T@U) (|i#0@@126| Int) ) (!  (=> (and (and (= (type $ly@@304) LayerTypeType) (= (type |jr#0@@13|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@13| |i#0@@126|) (and ($Is |jr#0@@13| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@126|) (<= |i#0@@126| (|Seq#Length| |jr#0@@13|)))))) (and (and (= (|Seq#Length| (JournalRanges.__default.JournalBlocksI $ly@@304 |jr#0@@13| |i#0@@126|)) |i#0@@126|) (forall ((|j#0@@9| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@9|) (< |j#0@@9| |i#0@@126|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocksI $ly@@304 |jr#0@@13| |i#0@@126|) |j#0@@9|)) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@@13| |j#0@@9|)))) :qid |JournalRangeidfy.66:18| :skolemid |2542| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@13| |j#0@@9|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocksI $ly@@304 |jr#0@@13| |i#0@@126|) |j#0@@9|))) ))) ($Is (JournalRanges.__default.JournalBlocksI $ly@@304 |jr#0@@13| |i#0@@126|) (TSeq (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalRangeidfy.62:12| :skolemid |2543| :pattern ( (JournalRanges.__default.JournalBlocksI $ly@@304 |jr#0@@13| |i#0@@126|)) ))))
(assert (forall (($ly@@305 T@U) (|jr#0@@14| T@U) (|i#0@@127| Int) ) (!  (=> (and (and (= (type $ly@@305) LayerTypeType) (= (type |jr#0@@14|) (SeqType BoxType))) ($Is |jr#0@@14| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlocksI#requires| $ly@@305 |jr#0@@14| |i#0@@127|)  (and (<= (LitInt 0) |i#0@@127|) (<= |i#0@@127| (|Seq#Length| |jr#0@@14|))))) :qid |JournalRangeidfy.62:12| :skolemid |2544| :pattern ( (|JournalRanges.__default.JournalBlocksI#requires| $ly@@305 |jr#0@@14| |i#0@@127|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|jr#0@@15| T@U) (|i#0@@128| Int) ) (!  (=> (and (and (= (type $ly@@306) LayerTypeType) (= (type |jr#0@@15|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@15| |i#0@@128|) (and ($Is |jr#0@@15| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@128|) (<= |i#0@@128| (|Seq#Length| |jr#0@@15|)))))) (and (=> (not (= |i#0@@128| (LitInt 0))) (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@15| (- |i#0@@128| 1))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@306) |jr#0@@15| |i#0@@128|) (ite (= |i#0@@128| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalRanges.__default.JournalBlocksI $ly@@306 |jr#0@@15| (- |i#0@@128| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@@15| (- |i#0@@128| 1)))))))))) :qid |JournalRangeidfy.62:12| :skolemid |2545| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@306) |jr#0@@15| |i#0@@128|)) ))))
(assert  (=> true (forall (($ly@@307 T@U) (|jr#0@@16| T@U) (|i#0@@129| Int) ) (!  (=> (and (and (= (type $ly@@307) LayerTypeType) (= (type |jr#0@@16|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@16|) (LitInt |i#0@@129|)) (and ($Is |jr#0@@16| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@129|)) (<= (LitInt |i#0@@129|) (|Seq#Length| (Lit |jr#0@@16|))))))) (and (=> (not (= (LitInt |i#0@@129|) (LitInt 0))) (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@16|) (LitInt (- |i#0@@129| 1)))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@307) (Lit |jr#0@@16|) (LitInt |i#0@@129|)) (ite (= (LitInt |i#0@@129|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalRanges.__default.JournalBlocksI ($LS $ly@@307) (Lit |jr#0@@16|) (LitInt (- |i#0@@129| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |jr#0@@16|) (LitInt (- |i#0@@129| 1))))))))))) :qid |JournalRangeidfy.62:12| :weight 3 :skolemid |2546| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@307) (Lit |jr#0@@16|) (LitInt |i#0@@129|))) ))))
(assert (forall ((arg0@@554 T@U) ) (! (= (type (JournalRanges.__default.JournalBlocks arg0@@554)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlocks| :pattern ( (JournalRanges.__default.JournalBlocks arg0@@554)) )))
(assert  (=> true (forall ((|jr#0@@17| T@U) ) (!  (=> (and (= (type |jr#0@@17|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@17|) ($Is |jr#0@@17| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (= (|Seq#Length| (JournalRanges.__default.JournalBlocks |jr#0@@17|)) (JournalRanges.__default.JournalRangeLen |jr#0@@17|)) ($Is (JournalRanges.__default.JournalBlocks |jr#0@@17|) (TSeq (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalRangeidfy.72:26| :skolemid |2547| :pattern ( (JournalRanges.__default.JournalBlocks |jr#0@@17|)) ))))
(assert (forall ((|jr#0@@18| T@U) ) (!  (=> (and (= (type |jr#0@@18|) (SeqType BoxType)) ($Is |jr#0@@18| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@18|) true)) :qid |JournalRangeidfy.72:26| :skolemid |2548| :pattern ( (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@18|)) )))
(assert  (=> true (forall ((|jr#0@@19| T@U) ) (!  (=> (and (= (type |jr#0@@19|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@19|) ($Is |jr#0@@19| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@19| (|Seq#Length| |jr#0@@19|)) (= (JournalRanges.__default.JournalBlocks |jr#0@@19|) (JournalRanges.__default.JournalBlocksI ($LS $LZ) |jr#0@@19| (|Seq#Length| |jr#0@@19|))))) :qid |JournalRangeidfy.72:26| :skolemid |2549| :pattern ( (JournalRanges.__default.JournalBlocks |jr#0@@19|)) ))))
(assert  (=> true (forall ((|jr#0@@20| T@U) ) (!  (=> (and (= (type |jr#0@@20|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| (Lit |jr#0@@20|)) ($Is |jr#0@@20| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@20|) (|Seq#Length| (Lit |jr#0@@20|))) (= (JournalRanges.__default.JournalBlocks (Lit |jr#0@@20|)) (JournalRanges.__default.JournalBlocksI ($LS $LZ) (Lit |jr#0@@20|) (|Seq#Length| (Lit |jr#0@@20|)))))) :qid |JournalRangeidfy.72:26| :weight 3 :skolemid |2550| :pattern ( (JournalRanges.__default.JournalBlocks (Lit |jr#0@@20|))) ))))
(assert (forall ((arg0@@555 T@U) (arg1@@265 Int) ) (! (= (type (JournalRanges.__default.JournalBlockGet arg0@@555 arg1@@265)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlockGet| :pattern ( (JournalRanges.__default.JournalBlockGet arg0@@555 arg1@@265)) )))
(assert  (=> true (forall ((|jr#0@@21| T@U) (|i#0@@130| Int) ) (!  (=> (and (= (type |jr#0@@21|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@21| |i#0@@130|) (and ($Is |jr#0@@21| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@130|) (< |i#0@@130| (JournalRanges.__default.JournalRangeLen |jr#0@@21|)))))) ($Is (JournalRanges.__default.JournalBlockGet |jr#0@@21| |i#0@@130|) (TSeq (TSeq Tclass.NativeTypes.byte)))) :qid |JournalRangeidfy.78:28| :skolemid |2551| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@21| |i#0@@130|)) ))))
(assert (forall ((|jr#0@@22| T@U) (|i#0@@131| Int) ) (!  (=> (and (= (type |jr#0@@22|) (SeqType BoxType)) ($Is |jr#0@@22| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@22| |i#0@@131|)  (and (<= (LitInt 0) |i#0@@131|) (< |i#0@@131| (JournalRanges.__default.JournalRangeLen |jr#0@@22|))))) :qid |JournalRangeidfy.78:28| :skolemid |2552| :pattern ( (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@22| |i#0@@131|)) )))
(assert  (=> true (forall ((|jr#0@@23| T@U) (|i#0@@132| Int) ) (!  (=> (and (= (type |jr#0@@23|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@23| |i#0@@132|) (and ($Is |jr#0@@23| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@132|) (< |i#0@@132| (JournalRanges.__default.JournalRangeLen |jr#0@@23|)))))) (and (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@23|) (= (JournalRanges.__default.JournalBlockGet |jr#0@@23| |i#0@@132|) ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocks |jr#0@@23|) |i#0@@132|))))) :qid |JournalRangeidfy.78:28| :skolemid |2553| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@23| |i#0@@132|)) ))))
(assert  (=> true (forall ((|jr#0@@24| T@U) (|i#0@@133| Int) ) (!  (=> (and (= (type |jr#0@@24|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| (Lit |jr#0@@24|) (LitInt |i#0@@133|)) (and ($Is |jr#0@@24| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@133|)) (< |i#0@@133| (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@24|))))))) (and (|JournalRanges.__default.JournalBlocks#canCall| (Lit |jr#0@@24|)) (= (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@24|) (LitInt |i#0@@133|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (JournalRanges.__default.JournalBlocks (Lit |jr#0@@24|))) (LitInt |i#0@@133|)))))) :qid |JournalRangeidfy.78:28| :weight 3 :skolemid |2554| :pattern ( (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@24|) (LitInt |i#0@@133|))) ))))
(assert (forall ((arg0@@556 T@U) (arg1@@266 T@U) ) (! (= (type (JournalRanges.__default.parseHeader arg0@@556 arg1@@266)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseHeader| :pattern ( (JournalRanges.__default.parseHeader arg0@@556 arg1@@266)) )))
(assert (forall (($ly@@308 T@U) (|s#0@@87| T@U) ) (!  (=> (and (= (type $ly@@308) LayerTypeType) (= (type |s#0@@87|) (SeqType BoxType))) (= (JournalRanges.__default.parseHeader ($LS $ly@@308) |s#0@@87|) (JournalRanges.__default.parseHeader $ly@@308 |s#0@@87|))) :qid |JournalRangeidfy.88:22| :skolemid |2555| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@308) |s#0@@87|)) )))
(assert (forall (($ly@@309 T@U) (|s#0@@88| T@U) ) (!  (=> (and (= (type $ly@@309) LayerTypeType) (= (type |s#0@@88|) (SeqType BoxType))) (= (JournalRanges.__default.parseHeader $ly@@309 |s#0@@88|) (JournalRanges.__default.parseHeader $LZ |s#0@@88|))) :qid |JournalRangeidfy.88:22| :skolemid |2556| :pattern ( (JournalRanges.__default.parseHeader (AsFuelBottom $ly@@309) |s#0@@88|)) )))
(assert  (=> true (forall (($ly@@310 T@U) (|s#0@@89| T@U) ) (!  (=> (and (and (= (type $ly@@310) LayerTypeType) (= (type |s#0@@89|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| |s#0@@89|) (and ($Is |s#0@@89| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| |s#0@@89|) (LitInt 8))))) ($Is (JournalRanges.__default.parseHeader $ly@@310 |s#0@@89|) Tclass.JournalRanges.Header)) :qid |JournalRangeidfy.88:22| :skolemid |2557| :pattern ( (JournalRanges.__default.parseHeader $ly@@310 |s#0@@89|)) ))))
(assert (forall (($ly@@311 T@U) (|s#0@@90| T@U) ) (!  (=> (and (and (= (type $ly@@311) LayerTypeType) (= (type |s#0@@90|) (SeqType BoxType))) ($Is |s#0@@90| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseHeader#requires| $ly@@311 |s#0@@90|) (>= (|Seq#Length| |s#0@@90|) (LitInt 8)))) :qid |JournalRangeidfy.88:22| :skolemid |2558| :pattern ( (|JournalRanges.__default.parseHeader#requires| $ly@@311 |s#0@@90|)) )))
(assert  (=> true (forall (($ly@@312 T@U) (|s#0@@91| T@U) ) (!  (=> (and (and (= (type $ly@@312) LayerTypeType) (= (type |s#0@@91|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| |s#0@@91|) (and ($Is |s#0@@91| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| |s#0@@91|) (LitInt 8))))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 4)) (LitInt 0))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 8)) (LitInt 4)))) (= (JournalRanges.__default.parseHeader ($LS $ly@@312) |s#0@@91|) (|#JournalRanges.Header.Header| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 4)) (LitInt 0))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 8)) (LitInt 4))))))) :qid |JournalRangeidfy.88:22| :skolemid |2559| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@312) |s#0@@91|)) ))))
(assert  (=> true (forall (($ly@@313 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type $ly@@313) LayerTypeType) (= (type |s#0@@92|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| (Lit |s#0@@92|)) (and ($Is |s#0@@92| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| (Lit |s#0@@92|)) (LitInt 8))))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 4)) (LitInt 0)))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 8)) (LitInt 4))))) (= (JournalRanges.__default.parseHeader ($LS $ly@@313) (Lit |s#0@@92|)) (|#JournalRanges.Header.Header| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 4)) (LitInt 0)))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 8)) (LitInt 4)))))))) :qid |JournalRangeidfy.88:22| :weight 3 :skolemid |2560| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@313) (Lit |s#0@@92|))) ))))
(assert (forall ((arg0@@557 T@U) (arg1@@267 T@U) (arg2@@157 Int) (arg3@@107 Int) ) (! (= (type (JournalRanges.__default.parseEntries arg0@@557 arg1@@267 arg2@@157 arg3@@107)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseEntries| :pattern ( (JournalRanges.__default.parseEntries arg0@@557 arg1@@267 arg2@@157 arg3@@107)) )))
(assert (forall (($ly@@314 T@U) (|s#0@@93| T@U) (|len#0@@28| Int) (|idx#0@@14| Int) ) (!  (=> (and (= (type $ly@@314) LayerTypeType) (= (type |s#0@@93|) (SeqType BoxType))) (= (JournalRanges.__default.parseEntries ($LS $ly@@314) |s#0@@93| |len#0@@28| |idx#0@@14|) (JournalRanges.__default.parseEntries $ly@@314 |s#0@@93| |len#0@@28| |idx#0@@14|))) :qid |JournalRangeidfy.97:12| :skolemid |2561| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@314) |s#0@@93| |len#0@@28| |idx#0@@14|)) )))
(assert (forall (($ly@@315 T@U) (|s#0@@94| T@U) (|len#0@@29| Int) (|idx#0@@15| Int) ) (!  (=> (and (= (type $ly@@315) LayerTypeType) (= (type |s#0@@94|) (SeqType BoxType))) (= (JournalRanges.__default.parseEntries $ly@@315 |s#0@@94| |len#0@@29| |idx#0@@15|) (JournalRanges.__default.parseEntries $LZ |s#0@@94| |len#0@@29| |idx#0@@15|))) :qid |JournalRangeidfy.97:12| :skolemid |2562| :pattern ( (JournalRanges.__default.parseEntries (AsFuelBottom $ly@@315) |s#0@@94| |len#0@@29| |idx#0@@15|)) )))
(assert  (=> true (forall (($ly@@316 T@U) (|s#0@@95| T@U) (|len#0@@30| Int) (|idx#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@316) LayerTypeType) (= (type |s#0@@95|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@95| |len#0@@30| |idx#0@@16|) (and ($Is |s#0@@95| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@16|) (<= |idx#0@@16| (|Seq#Length| |s#0@@95|))) (<= (LitInt 0) |len#0@@30|))))) ($Is (JournalRanges.__default.parseEntries $ly@@316 |s#0@@95| |len#0@@30| |idx#0@@16|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.97:12| :skolemid |2563| :pattern ( (JournalRanges.__default.parseEntries $ly@@316 |s#0@@95| |len#0@@30| |idx#0@@16|)) ))))
(assert (forall (($ly@@317 T@U) (|s#0@@96| T@U) (|len#0@@31| Int) (|idx#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@317) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) ($Is |s#0@@96| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseEntries#requires| $ly@@317 |s#0@@96| |len#0@@31| |idx#0@@17|)  (and (and (<= (LitInt 0) |idx#0@@17|) (<= |idx#0@@17| (|Seq#Length| |s#0@@96|))) (<= (LitInt 0) |len#0@@31|)))) :qid |JournalRangeidfy.97:12| :skolemid |2564| :pattern ( (|JournalRanges.__default.parseEntries#requires| $ly@@317 |s#0@@96| |len#0@@31| |idx#0@@17|)) )))
(assert  (=> true (forall (($ly@@318 T@U) (|s#0@@97| T@U) (|len#0@@32| Int) (|idx#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@318) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@97| |len#0@@32| |idx#0@@18|) (and ($Is |s#0@@97| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@18|) (<= |idx#0@@18| (|Seq#Length| |s#0@@97|))) (<= (LitInt 0) |len#0@@32|))))) (and (=> (not (= |len#0@@32| (LitInt 0))) (=> (<= (+ |idx#0@@18| 4) (|Seq#Length| |s#0@@97|)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@18| 4)) |idx#0@@18|)) (let ((|keyLen#0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@18| 4)) |idx#0@@18|)))) (and (=> (<= (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4) (|Seq#Length| |s#0@@97|)) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4) (|Seq#Length| |s#0@@97|)) (<= |keyLen#0| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4)) (+ (+ |idx#0@@18| 4) |keyLen#0|))) (let ((|valueLen#0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4)) (+ (+ |idx#0@@18| 4) |keyLen#0|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4) |valueLen#0|) (|Seq#Length| |s#0@@97|)) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4) |valueLen#0|) (|Seq#Length| |s#0@@97|)) (<= |valueLen#0| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@97| (- |len#0@@32| 1) (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0|) 4) |valueLen#0|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@318) |s#0@@97| |len#0@@32| |idx#0@@18|) (ite (= |len#0@@32| (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (+ |idx#0@@18| 4) (|Seq#Length| |s#0@@97|)) (let ((|keyLen#0@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@18| 4)) |idx#0@@18|)))) (ite  (and (<= (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4) (|Seq#Length| |s#0@@97|)) (<= |keyLen#0@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#0| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ |idx#0@@18| 4) |keyLen#0@@0|)) (+ |idx#0@@18| 4)))) (let ((|valueLen#0@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4)) (+ (+ |idx#0@@18| 4) |keyLen#0@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|) (|Seq#Length| |s#0@@97|)) (<= |valueLen#0@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#0@@2| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|)) (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4)))) (let ((|je#0| (|#Journal.JournalEntry.JournalInsert| |key#0| |value#0@@2|))) (let ((|rest#0| (JournalRanges.__default.parseEntries $ly@@318 |s#0@@97| (- |len#0@@32| 1) (+ (+ (+ (+ |idx#0@@18| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|)))) (ite (Options.Option.Some_q |rest#0|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#0|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#0|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :skolemid |2565| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@318) |s#0@@97| |len#0@@32| |idx#0@@18|)) ))))
(assert  (=> true (forall (($ly@@319 T@U) (|s#0@@98| T@U) (|len#0@@33| Int) (|idx#0@@19| Int) ) (!  (=> (and (and (= (type $ly@@319) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@98| (LitInt |len#0@@33|) |idx#0@@19|) (and ($Is |s#0@@98| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@19|) (<= |idx#0@@19| (|Seq#Length| |s#0@@98|))) (<= (LitInt 0) (LitInt |len#0@@33|)))))) (and (=> (not (= (LitInt |len#0@@33|) (LitInt 0))) (=> (<= (+ |idx#0@@19| 4) (|Seq#Length| |s#0@@98|)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@19| 4)) |idx#0@@19|)) (let ((|keyLen#1| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@19| 4)) |idx#0@@19|)))) (and (=> (<= (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4) (|Seq#Length| |s#0@@98|)) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4) (|Seq#Length| |s#0@@98|)) (<= |keyLen#1| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4)) (+ (+ |idx#0@@19| 4) |keyLen#1|))) (let ((|valueLen#1| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4)) (+ (+ |idx#0@@19| 4) |keyLen#1|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4) |valueLen#1|) (|Seq#Length| |s#0@@98|)) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4) |valueLen#1|) (|Seq#Length| |s#0@@98|)) (<= |valueLen#1| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@98| (LitInt (- |len#0@@33| 1)) (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1|) 4) |valueLen#1|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@319) |s#0@@98| (LitInt |len#0@@33|) |idx#0@@19|) (ite (= (LitInt |len#0@@33|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (+ |idx#0@@19| 4) (|Seq#Length| |s#0@@98|)) (let ((|keyLen#1@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@19| 4)) |idx#0@@19|)))) (ite  (and (<= (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4) (|Seq#Length| |s#0@@98|)) (<= |keyLen#1@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#1| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ |idx#0@@19| 4) |keyLen#1@@0|)) (+ |idx#0@@19| 4)))) (let ((|valueLen#1@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4)) (+ (+ |idx#0@@19| 4) |keyLen#1@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|) (|Seq#Length| |s#0@@98|)) (<= |valueLen#1@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#1@@0| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|)) (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4)))) (let ((|je#1| (|#Journal.JournalEntry.JournalInsert| |key#1| |value#1@@0|))) (let ((|rest#1| (JournalRanges.__default.parseEntries ($LS $ly@@319) |s#0@@98| (LitInt (- |len#0@@33| 1)) (+ (+ (+ (+ |idx#0@@19| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|)))) (ite (Options.Option.Some_q |rest#1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#1|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#1|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :weight 3 :skolemid |2566| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@319) |s#0@@98| (LitInt |len#0@@33|) |idx#0@@19|)) ))))
(assert  (=> true (forall (($ly@@320 T@U) (|s#0@@99| T@U) (|len#0@@34| Int) (|idx#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@320) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@99|) (LitInt |len#0@@34|) (LitInt |idx#0@@20|)) (and ($Is |s#0@@99| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) (LitInt |idx#0@@20|)) (<= (LitInt |idx#0@@20|) (|Seq#Length| (Lit |s#0@@99|)))) (<= (LitInt 0) (LitInt |len#0@@34|)))))) (and (=> (not (= (LitInt |len#0@@34|) (LitInt 0))) (=> (<= (LitInt (+ |idx#0@@20| 4)) (|Seq#Length| (Lit |s#0@@99|))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@20| 4))) (LitInt |idx#0@@20|)))) (let ((|keyLen#2| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@20| 4))) (LitInt |idx#0@@20|)))))) (and (=> (<= (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4) (|Seq#Length| (Lit |s#0@@99|))) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4) (|Seq#Length| (Lit |s#0@@99|))) (<= |keyLen#2| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4)) (+ (+ |idx#0@@20| 4) |keyLen#2|))) (let ((|valueLen#2| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4)) (+ (+ |idx#0@@20| 4) |keyLen#2|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4) |valueLen#2|) (|Seq#Length| (Lit |s#0@@99|))) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4) |valueLen#2|) (|Seq#Length| (Lit |s#0@@99|))) (<= |valueLen#2| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@99|) (LitInt (- |len#0@@34| 1)) (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2|) 4) |valueLen#2|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@320) (Lit |s#0@@99|) (LitInt |len#0@@34|) (LitInt |idx#0@@20|)) (ite (= (LitInt |len#0@@34|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (LitInt (+ |idx#0@@20| 4)) (|Seq#Length| (Lit |s#0@@99|))) (let ((|keyLen#2@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@20| 4))) (LitInt |idx#0@@20|)))))) (ite  (and (<= (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4) (|Seq#Length| (Lit |s#0@@99|))) (<= |keyLen#2@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#2| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ |idx#0@@20| 4) |keyLen#2@@0|)) (LitInt (+ |idx#0@@20| 4))))) (let ((|valueLen#2@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4)) (+ (+ |idx#0@@20| 4) |keyLen#2@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|) (|Seq#Length| (Lit |s#0@@99|))) (<= |valueLen#2@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#2@@0| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|)) (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4)))) (let ((|je#2| (|#Journal.JournalEntry.JournalInsert| |key#2| |value#2@@0|))) (let ((|rest#2| (JournalRanges.__default.parseEntries ($LS $ly@@320) (Lit |s#0@@99|) (LitInt (- |len#0@@34| 1)) (+ (+ (+ (+ |idx#0@@20| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|)))) (ite (Options.Option.Some_q |rest#2|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#2|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#2|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :weight 3 :skolemid |2567| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@320) (Lit |s#0@@99|) (LitInt |len#0@@34|) (LitInt |idx#0@@20|))) ))))
(assert (forall ((arg0@@558 T@U) (arg1@@268 Int) ) (! (= (type (JournalRanges.__default.parseJournalRangeOfBytes arg0@@558 arg1@@268)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseJournalRangeOfBytes| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes arg0@@558 arg1@@268)) )))
(assert  (=> true (forall ((|s#0@@100| T@U) (|len#0@@35| Int) ) (!  (=> (and (= (type |s#0@@100|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| |s#0@@100| |len#0@@35|) (and ($Is |s#0@@100| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| |s#0@@100|) (LitInt 8)) (<= (LitInt 0) |len#0@@35|))))) ($Is (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@100| |len#0@@35|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.133:37| :skolemid |2568| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@100| |len#0@@35|)) ))))
(assert (forall ((|s#0@@101| T@U) (|len#0@@36| Int) ) (!  (=> (and (= (type |s#0@@101|) (SeqType BoxType)) ($Is |s#0@@101| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseJournalRangeOfBytes#requires| |s#0@@101| |len#0@@36|)  (and (>= (|Seq#Length| |s#0@@101|) (LitInt 8)) (<= (LitInt 0) |len#0@@36|)))) :qid |JournalRangeidfy.133:37| :skolemid |2569| :pattern ( (|JournalRanges.__default.parseJournalRangeOfBytes#requires| |s#0@@101| |len#0@@36|)) )))
(assert  (=> true (forall ((|s#0@@102| T@U) (|len#0@@37| Int) ) (!  (=> (and (= (type |s#0@@102|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| |s#0@@102| |len#0@@37|) (and ($Is |s#0@@102| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| |s#0@@102|) (LitInt 8)) (<= (LitInt 0) |len#0@@37|))))) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@102| |len#0@@37| (LitInt 8)) (= (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@102| |len#0@@37|) (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@102| |len#0@@37| (LitInt 8))))) :qid |JournalRangeidfy.133:37| :skolemid |2570| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@102| |len#0@@37|)) ))))
(assert  (=> true (forall ((|s#0@@103| T@U) (|len#0@@38| Int) ) (!  (=> (and (= (type |s#0@@103|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Lit |s#0@@103|) (LitInt |len#0@@38|)) (and ($Is |s#0@@103| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| (Lit |s#0@@103|)) (LitInt 8)) (<= (LitInt 0) (LitInt |len#0@@38|)))))) (and (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@103|) (LitInt |len#0@@38|) (LitInt 8)) (= (JournalRanges.__default.parseJournalRangeOfBytes (Lit |s#0@@103|) (LitInt |len#0@@38|)) (Lit (JournalRanges.__default.parseEntries ($LS $LZ) (Lit |s#0@@103|) (LitInt |len#0@@38|) (LitInt 8)))))) :qid |JournalRangeidfy.133:37| :weight 3 :skolemid |2571| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes (Lit |s#0@@103|) (LitInt |len#0@@38|))) ))))
(assert (forall (($ly@@321 T@U) (|jr#0@@25| T@U) ) (!  (=> (and (= (type $ly@@321) LayerTypeType) (= (type |jr#0@@25|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@321) |jr#0@@25|) (JournalRanges.__default.parseJournalRange $ly@@321 |jr#0@@25|))) :qid |JournalRangeidfy.141:12| :skolemid |2572| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@321) |jr#0@@25|)) )))
(assert (forall (($ly@@322 T@U) (|jr#0@@26| T@U) ) (!  (=> (and (= (type $ly@@322) LayerTypeType) (= (type |jr#0@@26|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange $ly@@322 |jr#0@@26|) (JournalRanges.__default.parseJournalRange $LZ |jr#0@@26|))) :qid |JournalRangeidfy.141:12| :skolemid |2573| :pattern ( (JournalRanges.__default.parseJournalRange (AsFuelBottom $ly@@322) |jr#0@@26|)) )))
(assert  (=> true (forall (($ly@@323 T@U) (|jr#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@323) LayerTypeType) (= (type |jr#0@@27|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@27|) ($Is |jr#0@@27| (TSeq (TSeq Tclass.NativeTypes.byte))))) ($Is (JournalRanges.__default.parseJournalRange $ly@@323 |jr#0@@27|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.141:12| :skolemid |2574| :pattern ( (JournalRanges.__default.parseJournalRange $ly@@323 |jr#0@@27|)) ))))
(assert (forall (($ly@@324 T@U) (|jr#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@324) LayerTypeType) (= (type |jr#0@@28|) (SeqType BoxType))) ($Is |jr#0@@28| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.parseJournalRange#requires| $ly@@324 |jr#0@@28|) true)) :qid |JournalRangeidfy.141:12| :skolemid |2575| :pattern ( (|JournalRanges.__default.parseJournalRange#requires| $ly@@324 |jr#0@@28|)) )))
(assert  (and (= (type StartFuel_JournalRanges._default.parseHeader) LayerTypeType) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)))
(assert  (=> true (forall (($ly@@325 T@U) (|jr#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@325) LayerTypeType) (= (type |jr#0@@29|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@29|) ($Is |jr#0@@29| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |jr#0@@29|) (LitInt 0))) (=> (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (LitInt 8)) (and (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (let ((|header#0@@5| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))))) (and (and (JournalRanges.Header.Header_q |header#0@@5|) (=> (<= (LitInt 0) (JournalRanges.Header.nentries |header#0@@5|)) (and (JournalRanges.Header.Header_q |header#0@@5|) (=> (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0@@5|)) (JournalRanges.Header.Header_q |header#0@@5|))))) (=> (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#0@@5|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0@@5|)) (<= (JournalRanges.Header.nblocks |header#0@@5|) (|Seq#Length| |jr#0@@29|)))) (and (and (and (and (JournalRanges.Header.Header_q |header#0@@5|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@5|)))) (JournalRanges.Header.Header_q |header#0@@5|)) (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@5|))) (JournalRanges.Header.nentries |header#0@@5|))) (let ((|p1#0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@5|))) (JournalRanges.Header.nentries |header#0@@5|)))) (=> (Options.Option.Some_q |p1#0|) (and (JournalRanges.Header.Header_q |header#0@@5|) (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@5|))))))))))))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@325) |jr#0@@29|) (ite (= (|Seq#Length| |jr#0@@29|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (LitInt 8)) (let ((|header#0@@6| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))))) (ite  (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#0@@6|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0@@6|)) (<= (JournalRanges.Header.nblocks |header#0@@6|) (|Seq#Length| |jr#0@@29|)))) (let ((|p1#0@@0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@6|))) (JournalRanges.Header.nentries |header#0@@6|)))) (ite (Options.Option.Some_q |p1#0@@0|) (let ((|p2#0| (JournalRanges.__default.parseJournalRange $ly@@325 (|Seq#Drop| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@6|))))) (ite (Options.Option.Some_q |p2#0|) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value |p1#0@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |p2#0|))))) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.141:12| :skolemid |2576| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@325) |jr#0@@29|)) ))))
(assert  (=> true (forall (($ly@@326 T@U) (|jr#0@@30| T@U) ) (!  (=> (and (and (= (type $ly@@326) LayerTypeType) (= (type |jr#0@@30|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| (Lit |jr#0@@30|)) ($Is |jr#0@@30| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |jr#0@@30|)) (LitInt 0))) (=> (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (LitInt 8)) (and (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (let ((|header#1| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))))) (and (and (JournalRanges.Header.Header_q |header#1|) (=> (<= (LitInt 0) (JournalRanges.Header.nentries |header#1|)) (and (JournalRanges.Header.Header_q |header#1|) (=> (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1|)) (JournalRanges.Header.Header_q |header#1|))))) (=> (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#1|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1|)) (<= (JournalRanges.Header.nblocks |header#1|) (|Seq#Length| (Lit |jr#0@@30|))))) (and (and (and (and (JournalRanges.Header.Header_q |header#1|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|)))) (JournalRanges.Header.Header_q |header#1|)) (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))) (JournalRanges.Header.nentries |header#1|))) (let ((|p1#1| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))) (JournalRanges.Header.nentries |header#1|)))) (=> (Options.Option.Some_q |p1#1|) (and (JournalRanges.Header.Header_q |header#1|) (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))))))))))))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@326) (Lit |jr#0@@30|)) (ite (= (|Seq#Length| (Lit |jr#0@@30|)) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (LitInt 8)) (let ((|header#1@@0| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))))) (ite  (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#1@@0|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1@@0|)) (<= (JournalRanges.Header.nblocks |header#1@@0|) (|Seq#Length| (Lit |jr#0@@30|))))) (let ((|p1#1@@0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1@@0|))) (JournalRanges.Header.nentries |header#1@@0|)))) (ite (Options.Option.Some_q |p1#1@@0|) (let ((|p2#1| (JournalRanges.__default.parseJournalRange ($LS $ly@@326) (|Seq#Drop| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1@@0|))))) (ite (Options.Option.Some_q |p2#1|) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value |p1#1@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |p2#1|))))) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.141:12| :weight 3 :skolemid |2577| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@326) (Lit |jr#0@@30|))) ))))
(assert  (=> true (forall ((|jr#0@@31| T@U) (|jes#0| T@U) ) (!  (=> (and (and (= (type |jr#0@@31|) (SeqType BoxType)) (= (type |jes#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@31| |jes#0|) (and ($Is |jr#0@@31| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0| (TSeq Tclass.Journal.JournalEntry))))) true) :qid |JournalRangeidfy.172:32| :skolemid |2578| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@31| |jes#0|)) ))))
(assert (forall ((|jr#0@@32| T@U) (|jes#0@@0| T@U) ) (!  (=> (and (and (= (type |jr#0@@32|) (SeqType BoxType)) (= (type |jes#0@@0|) (SeqType BoxType))) (and ($Is |jr#0@@32| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@0| (TSeq Tclass.Journal.JournalEntry)))) (= (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@32| |jes#0@@0|) true)) :qid |JournalRangeidfy.172:32| :skolemid |2579| :pattern ( (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@32| |jes#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@33| T@U) (|jes#0@@1| T@U) ) (!  (=> (and (and (= (type |jr#0@@33|) (SeqType BoxType)) (= (type |jes#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@33| |jes#0@@1|) (and ($Is |jr#0@@33| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@1| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@33|)) (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@33|)) (= (JournalRanges.__default.JournalRangeParses |jr#0@@33| |jes#0@@1|) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@33|) (|#Options.Option.Some| ($Box |jes#0@@1|)))))) :qid |JournalRangeidfy.172:32| :skolemid |2580| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@33| |jes#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@34| T@U) (|jes#0@@2| T@U) ) (!  (=> (and (and (= (type |jr#0@@34|) (SeqType BoxType)) (= (type |jes#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| (Lit |jr#0@@34|) (Lit |jes#0@@2|)) (and ($Is |jr#0@@34| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@2| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (Lit (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@34|)))) (|JournalRanges.__default.parseJournalRange#canCall| (Lit |jr#0@@34|))) (= (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@34|) (Lit |jes#0@@2|)) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@34|)) (|#Options.Option.Some| ($Box (Lit |jes#0@@2|))))))) :qid |JournalRangeidfy.172:32| :weight 3 :skolemid |2581| :pattern ( (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@34|) (Lit |jes#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@104| T@U) ) (!  (=> (and (= (type |s#0@@104|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| |s#0@@104|) ($Is |s#0@@104| Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|)) (< (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|) 18446744073709551616))) :qid |JournalRangeidfy.279:44| :skolemid |2582| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|)) ))))
(assert (forall ((|s#0@@105| T@U) ) (!  (=> (and (= (type |s#0@@105|) DatatypeTypeType) ($Is |s#0@@105| Tclass.Journal.JournalEntry)) (= (|JournalRanges.__default.WeightJournalEntryUint64#requires| |s#0@@105|) true)) :qid |JournalRangeidfy.279:44| :skolemid |2583| :pattern ( (|JournalRanges.__default.WeightJournalEntryUint64#requires| |s#0@@105|)) )))
(assert  (=> true (forall ((|s#0@@106| T@U) ) (!  (=> (and (= (type |s#0@@106|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| |s#0@@106|) ($Is |s#0@@106| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q |s#0@@106|) (Journal.JournalEntry.JournalInsert_q |s#0@@106|)) (= (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@106|) (+ (+ 8 (|Seq#Length| (Journal.JournalEntry.key |s#0@@106|))) (|Seq#Length| (Journal.JournalEntry.value |s#0@@106|)))))) :qid |JournalRangeidfy.279:44| :skolemid |2584| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@106|)) ))))
(assert  (=> true (forall ((|s#0@@107| T@U) ) (!  (=> (and (= (type |s#0@@107|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| (Lit |s#0@@107|)) ($Is |s#0@@107| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@107|)) (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@107|))) (= (JournalRanges.__default.WeightJournalEntryUint64 (Lit |s#0@@107|)) (+ (+ 8 (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |s#0@@107|))))) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |s#0@@107|)))))))) :qid |JournalRangeidfy.279:44| :weight 3 :skolemid |2585| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 (Lit |s#0@@107|))) ))))
(assert  (=> true (forall ((|s#0@@108| T@U) ) (!  (=> (and (= (type |s#0@@108|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| |s#0@@108|) ($Is |s#0@@108| Tclass.Journal.JournalEntry))) true) :qid |JournalRangeidfy.284:31| :skolemid |2586| :pattern ( (JournalRanges.__default.WeightJournalEntry |s#0@@108|)) ))))
(assert (forall ((|s#0@@109| T@U) ) (!  (=> (and (= (type |s#0@@109|) DatatypeTypeType) ($Is |s#0@@109| Tclass.Journal.JournalEntry)) (= (|JournalRanges.__default.WeightJournalEntry#requires| |s#0@@109|) true)) :qid |JournalRangeidfy.284:31| :skolemid |2587| :pattern ( (|JournalRanges.__default.WeightJournalEntry#requires| |s#0@@109|)) )))
(assert  (=> true (forall ((|s#0@@110| T@U) ) (!  (=> (and (= (type |s#0@@110|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| |s#0@@110|) ($Is |s#0@@110| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q |s#0@@110|) (Journal.JournalEntry.JournalInsert_q |s#0@@110|)) (= (JournalRanges.__default.WeightJournalEntry |s#0@@110|) (+ (+ 8 (|Seq#Length| (Journal.JournalEntry.key |s#0@@110|))) (|Seq#Length| (Journal.JournalEntry.value |s#0@@110|)))))) :qid |JournalRangeidfy.284:31| :skolemid |2588| :pattern ( (JournalRanges.__default.WeightJournalEntry |s#0@@110|)) ))))
(assert  (=> true (forall ((|s#0@@111| T@U) ) (!  (=> (and (= (type |s#0@@111|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| (Lit |s#0@@111|)) ($Is |s#0@@111| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@111|)) (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@111|))) (= (JournalRanges.__default.WeightJournalEntry (Lit |s#0@@111|)) (+ (+ 8 (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |s#0@@111|))))) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |s#0@@111|)))))))) :qid |JournalRangeidfy.284:31| :weight 3 :skolemid |2589| :pattern ( (JournalRanges.__default.WeightJournalEntry (Lit |s#0@@111|))) ))))
(assert (forall (($ly@@327 T@U) (|s#0@@112| T@U) ) (!  (=> (and (= (type $ly@@327) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@327) |s#0@@112|) (JournalRanges.__default.SumJournalEntries $ly@@327 |s#0@@112|))) :qid |JournalRangeidfy.289:12| :skolemid |2590| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@327) |s#0@@112|)) )))
(assert (forall (($ly@@328 T@U) (|s#0@@113| T@U) ) (!  (=> (and (= (type $ly@@328) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (= (JournalRanges.__default.SumJournalEntries $ly@@328 |s#0@@113|) (JournalRanges.__default.SumJournalEntries $LZ |s#0@@113|))) :qid |JournalRangeidfy.289:12| :skolemid |2591| :pattern ( (JournalRanges.__default.SumJournalEntries (AsFuelBottom $ly@@328) |s#0@@113|)) )))
(assert  (=> true (forall (($ly@@329 T@U) (|s#0@@114| T@U) ) (!  (=> (and (and (= (type $ly@@329) LayerTypeType) (= (type |s#0@@114|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@114|) ($Is |s#0@@114| (TSeq Tclass.Journal.JournalEntry)))) (>= (JournalRanges.__default.SumJournalEntries $ly@@329 |s#0@@114|) (LitInt 0))) :qid |JournalRangeidfy.289:12| :skolemid |2592| :pattern ( (JournalRanges.__default.SumJournalEntries $ly@@329 |s#0@@114|)) ))))
(assert (forall (($ly@@330 T@U) (|s#0@@115| T@U) ) (!  (=> (and (and (= (type $ly@@330) LayerTypeType) (= (type |s#0@@115|) (SeqType BoxType))) ($Is |s#0@@115| (TSeq Tclass.Journal.JournalEntry))) (= (|JournalRanges.__default.SumJournalEntries#requires| $ly@@330 |s#0@@115|) true)) :qid |JournalRangeidfy.289:12| :skolemid |2593| :pattern ( (|JournalRanges.__default.SumJournalEntries#requires| $ly@@330 |s#0@@115|)) )))
(assert  (=> true (forall (($ly@@331 T@U) (|s#0@@116| T@U) ) (!  (=> (and (and (= (type $ly@@331) LayerTypeType) (= (type |s#0@@116|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@116|) ($Is |s#0@@116| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| |s#0@@116|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Journal.JournalEntry |s#0@@116|) (|JournalRanges.__default.SumJournalEntries#canCall| (Sequences.__default.DropLast Tclass.Journal.JournalEntry |s#0@@116|))) (and (|Sequences.__default.Last#canCall| Tclass.Journal.JournalEntry |s#0@@116|) (|JournalRanges.__default.WeightJournalEntry#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry |s#0@@116|)))))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@331) |s#0@@116|) (ite (= (|Seq#Length| |s#0@@116|) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries $ly@@331 (Sequences.__default.DropLast Tclass.Journal.JournalEntry |s#0@@116|)) (JournalRanges.__default.WeightJournalEntry ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry |s#0@@116|)))))))) :qid |JournalRangeidfy.289:12| :skolemid |2594| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@331) |s#0@@116|)) ))))
(assert  (=> true (forall (($ly@@332 T@U) (|s#0@@117| T@U) ) (!  (=> (and (and (= (type $ly@@332) LayerTypeType) (= (type |s#0@@117|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| (Lit |s#0@@117|)) ($Is |s#0@@117| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@117|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Journal.JournalEntry (Lit |s#0@@117|)) (|JournalRanges.__default.SumJournalEntries#canCall| (Lit (Sequences.__default.DropLast Tclass.Journal.JournalEntry (Lit |s#0@@117|))))) (and (|Sequences.__default.Last#canCall| Tclass.Journal.JournalEntry (Lit |s#0@@117|)) (|JournalRanges.__default.WeightJournalEntry#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry (Lit |s#0@@117|)))))))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@332) (Lit |s#0@@117|)) (ite (= (|Seq#Length| (Lit |s#0@@117|)) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $ly@@332) (Lit (Sequences.__default.DropLast Tclass.Journal.JournalEntry (Lit |s#0@@117|)))) (JournalRanges.__default.WeightJournalEntry (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry (Lit |s#0@@117|)))))))))) :qid |JournalRangeidfy.289:12| :weight 3 :skolemid |2595| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@332) (Lit |s#0@@117|))) ))))
(assert (forall (($ly@@333 T@U) (|s#0@@118| T@U) ) (!  (=> (and (= (type $ly@@333) LayerTypeType) (= (type |s#0@@118|) (SeqType BoxType))) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@333) |s#0@@118|) (JournalRanges.__default.WeightJournalEntries $ly@@333 |s#0@@118|))) :qid |JournalRangeidfy.298:22| :skolemid |2596| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@333) |s#0@@118|)) )))
(assert (forall (($ly@@334 T@U) (|s#0@@119| T@U) ) (!  (=> (and (= (type $ly@@334) LayerTypeType) (= (type |s#0@@119|) (SeqType BoxType))) (= (JournalRanges.__default.WeightJournalEntries $ly@@334 |s#0@@119|) (JournalRanges.__default.WeightJournalEntries $LZ |s#0@@119|))) :qid |JournalRangeidfy.298:22| :skolemid |2597| :pattern ( (JournalRanges.__default.WeightJournalEntries (AsFuelBottom $ly@@334) |s#0@@119|)) )))
(assert  (=> true (forall (($ly@@335 T@U) (|s#0@@120| T@U) ) (!  (=> (and (and (= (type $ly@@335) LayerTypeType) (= (type |s#0@@120|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| |s#0@@120|) ($Is |s#0@@120| (TSeq Tclass.Journal.JournalEntry)))) (>= (JournalRanges.__default.WeightJournalEntries $ly@@335 |s#0@@120|) (LitInt 0))) :qid |JournalRangeidfy.298:22| :skolemid |2598| :pattern ( (JournalRanges.__default.WeightJournalEntries $ly@@335 |s#0@@120|)) ))))
(assert (forall (($ly@@336 T@U) (|s#0@@121| T@U) ) (!  (=> (and (and (= (type $ly@@336) LayerTypeType) (= (type |s#0@@121|) (SeqType BoxType))) ($Is |s#0@@121| (TSeq Tclass.Journal.JournalEntry))) (= (|JournalRanges.__default.WeightJournalEntries#requires| $ly@@336 |s#0@@121|) true)) :qid |JournalRangeidfy.298:22| :skolemid |2599| :pattern ( (|JournalRanges.__default.WeightJournalEntries#requires| $ly@@336 |s#0@@121|)) )))
(assert  (=> true (forall (($ly@@337 T@U) (|s#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |s#0@@122|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| |s#0@@122|) ($Is |s#0@@122| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| |s#0@@122|) (LitInt 0))) (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@122|)) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@337) |s#0@@122|) (ite (= (|Seq#Length| |s#0@@122|) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $LZ) |s#0@@122|) 8))))) :qid |JournalRangeidfy.298:22| :skolemid |2600| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@337) |s#0@@122|)) ))))
(assert  (=> true (forall (($ly@@338 T@U) (|s#0@@123| T@U) ) (!  (=> (and (and (= (type $ly@@338) LayerTypeType) (= (type |s#0@@123|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| (Lit |s#0@@123|)) ($Is |s#0@@123| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@123|)) (LitInt 0))) (|JournalRanges.__default.SumJournalEntries#canCall| (Lit |s#0@@123|))) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@338) (Lit |s#0@@123|)) (ite (= (|Seq#Length| (Lit |s#0@@123|)) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $LZ) (Lit |s#0@@123|)) 8))))) :qid |JournalRangeidfy.298:22| :weight 3 :skolemid |2601| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@338) (Lit |s#0@@123|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@160)) bx@@160) ($Is ($Unbox refType bx@@160) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |2602| :pattern ( ($IsBox bx@@160 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (= ($Is $o@@44 Tclass.MapRemove_s.__default)  (or (= $o@@44 null) (= (dtype $o@@44) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |2603| :pattern ( ($Is $o@@44 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@133 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@133) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@45 Tclass.MapRemove_s.__default $h@@133)  (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@133 $o@@45) alloc))))) :qid |unknown.0:0| :skolemid |2604| :pattern ( ($IsAlloc $o@@45 Tclass.MapRemove_s.__default $h@@133)) )))
(assert (forall ((arg0@@559 T@U) (arg1@@269 T@U) (arg2@@158 T@U) (arg3@@108 T@U) (arg4@@79 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@559 arg1@@269 arg2@@158 arg3@@108 arg4@@79)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@559 arg1@@269 arg2@@158 arg3@@108 arg4@@79)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@339 T@U) (|m#0@@9| T@U) (|k#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@339) LayerTypeType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@339) |m#0@@9| |k#0@@0|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@339 |m#0@@9| |k#0@@0|))) :qid |unknown.0:0| :skolemid |2605| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@339) |m#0@@9| |k#0@@0|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@340 T@U) (|m#0@@10| T@U) (|k#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@340) LayerTypeType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@340 |m#0@@10| |k#0@@1|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@10| |k#0@@1|))) :qid |unknown.0:0| :skolemid |2606| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@340) |m#0@@10| |k#0@@1|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@341 T@U) (|m#0@@11| T@U) (|k#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@341) LayerTypeType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@11| |k#0@@2|) (and ($Is |m#0@@11| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@2| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |j#0@@10|)) (not (= |j#0@@10| |k#0@@2|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#0@@10|))) :qid |MapRemovesdfy.15:20| :skolemid |2607| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@11|) |j#0@@10|)) )) (forall ((|j#1@@0| T@U) ) (!  (=> (and (= (type |j#1@@0|) BoxType) ($IsBox |j#1@@0| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#1@@0|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |j#1@@0|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#1@@0|)) (not (= |j#1@@0| |k#0@@2|))))) :qid |MapRemovesdfy.16:20| :skolemid |2608| :pattern ( (MapType0Select (|Map#Domain| |m#0@@11|) |j#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#1@@0|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#2|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@11|) |j#2|))) :qid |MapRemovesdfy.17:20| :skolemid |2609| :pattern ( (MapType0Select (|Map#Elements| |m#0@@11|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|))) (|Set#Card| (|Map#Domain| |m#0@@11|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@2|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) (- (|Map#Card| |m#0@@11|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@2|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) (|Map#Card| |m#0@@11|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2610| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@341 |m#0@@11| |k#0@@2|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@342 T@U) (|m#0@@12| T@U) (|k#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@342) LayerTypeType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (and ($Is |m#0@@12| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@3| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@342 |m#0@@12| |k#0@@3|) true)) :qid |unknown.0:0| :skolemid |2611| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@342 |m#0@@12| |k#0@@3|)) )))
(assert  (and (forall ((arg0@@560 T@U) (arg1@@270 T@U) (arg2@@159 T@U) ) (! (= (type (|lambda#96| arg0@@560 arg1@@270 arg2@@159)) (MapType0Type BoxType boolType)) :qid |funType:lambda#96| :pattern ( (|lambda#96| arg0@@560 arg1@@270 arg2@@159)) )) (forall ((arg0@@561 T@U) ) (! (= (type (|lambda#97| arg0@@561)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#97| :pattern ( (|lambda#97| arg0@@561)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@343 T@U) (|m#0@@13| T@U) (|k#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@343) LayerTypeType)) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@13| |k#0@@4|) (and ($Is |m#0@@13| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@4| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@343) |m#0@@13| |k#0@@4|) (let ((|m'#0| (|Map#Glue| (|lambda#96| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@13|) |k#0@@4|) (|lambda#97| (|Map#Elements| |m#0@@13|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |2612| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@343) |m#0@@13| |k#0@@4|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@344 T@U) (|m#0@@14| T@U) (|k#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@344) LayerTypeType)) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@14|) |k#0@@5|) (and ($Is |m#0@@14| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@5| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@344) (Lit |m#0@@14|) |k#0@@5|) (let ((|m'#1| (|Map#Glue| (|lambda#96| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@14|) |k#0@@5|) (|lambda#97| (|Map#Elements| (Lit |m#0@@14|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2613| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@344) (Lit |m#0@@14|) |k#0@@5|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@345 T@U) (|m#0@@15| T@U) (|k#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@345) LayerTypeType)) (= (type |m#0@@15|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@15|) (Lit |k#0@@6|)) (and ($Is |m#0@@15| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@6| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@345) (Lit |m#0@@15|) (Lit |k#0@@6|)) (let ((|m'#2| (|Map#Glue| (|lambda#96| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@15|) |k#0@@6|) (|lambda#97| (|Map#Elements| (Lit |m#0@@15|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2614| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@345) (Lit |m#0@@15|) (Lit |k#0@@6|))) ))))
(assert (= (type Tclass.CRC32__C.__default) TyType))
(assert (= (Tag Tclass.CRC32__C.__default) Tagclass.CRC32__C.__default))
(assert (= (TagFamily Tclass.CRC32__C.__default) tytagFamily$_default))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (= ($Is $o@@46 Tclass.CRC32__C.__default)  (or (= $o@@46 null) (= (dtype $o@@46) Tclass.CRC32__C.__default)))) :qid |unknown.0:0| :skolemid |2615| :pattern ( ($Is $o@@46 Tclass.CRC32__C.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@134 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@134) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@47 Tclass.CRC32__C.__default $h@@134)  (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@134 $o@@47) alloc))))) :qid |unknown.0:0| :skolemid |2616| :pattern ( ($IsAlloc $o@@47 Tclass.CRC32__C.__default $h@@134)) )))
(assert  (=> true (forall ((|s#0@@124| T@U) ) (!  (=> (and (= (type |s#0@@124|) (SeqType BoxType)) (or (|CRC32__C.__default.crc32__c__padded#canCall| |s#0@@124|) ($Is |s#0@@124| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.crc32__c__padded |s#0@@124|)) (LitInt 32)) ($Is (CRC32__C.__default.crc32__c__padded |s#0@@124|) (TSeq Tclass.NativeTypes.byte)))) :qid |CRC32Csdfy.62:27| :skolemid |2617| :pattern ( (CRC32__C.__default.crc32__c__padded |s#0@@124|)) ))))
(assert (forall ((|s#0@@125| T@U) ) (!  (=> (and (= (type |s#0@@125|) (SeqType BoxType)) ($Is |s#0@@125| (TSeq Tclass.NativeTypes.byte))) (= (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@125|) true)) :qid |CRC32Csdfy.62:27| :skolemid |2618| :pattern ( (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@125|)) )))
(assert (forall ((arg0@@562 Int) (arg1@@271 Int) ) (! (= (type (|#AsyncDisk.ReqRead.ReqRead| arg0@@562 arg1@@271)) DatatypeTypeType) :qid |funType:#AsyncDisk.ReqRead.ReqRead| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| arg0@@562 arg1@@271)) )))
(assert (forall ((|a#0#0#0@@2| Int) (|a#0#1#0@@1| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.ReqRead.ReqRead| |a#0#0#0@@2| |a#0#1#0@@1|)) |##AsyncDisk.ReqRead.ReqRead|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2619| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#0#0#0@@2| |a#0#1#0@@1|)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (= (type d@@110) DatatypeTypeType) (= (AsyncDisk.ReqRead.ReqRead_q d@@110) (= (DatatypeCtorId d@@110) |##AsyncDisk.ReqRead.ReqRead|))) :qid |unknown.0:0| :skolemid |2620| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@110)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (AsyncDisk.ReqRead.ReqRead_q d@@111)) (exists ((|a#1#0#0@@2| Int) (|a#1#1#0@@1| Int) ) (! (= d@@111 (|#AsyncDisk.ReqRead.ReqRead| |a#1#0#0@@2| |a#1#1#0@@1|)) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2621| ))) :qid |unknown.0:0| :skolemid |2622| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@111)) )))
(assert (= (type Tclass.AsyncDisk.ReqRead) TyType))
(assert (= (Tag Tclass.AsyncDisk.ReqRead) Tagclass.AsyncDisk.ReqRead))
(assert (= (TagFamily Tclass.AsyncDisk.ReqRead) tytagFamily$ReqRead))
(assert (forall ((bx@@161 T@U) ) (!  (=> (and (= (type bx@@161) BoxType) ($IsBox bx@@161 Tclass.AsyncDisk.ReqRead)) (and (= ($Box ($Unbox DatatypeTypeType bx@@161)) bx@@161) ($Is ($Unbox DatatypeTypeType bx@@161) Tclass.AsyncDisk.ReqRead))) :qid |unknown.0:0| :skolemid |2623| :pattern ( ($IsBox bx@@161 Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((|a#2#0#0@@2| Int) (|a#2#1#0@@1| Int) ) (! (= ($Is (|#AsyncDisk.ReqRead.ReqRead| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.AsyncDisk.ReqRead)  (and ($Is (int_2_U |a#2#0#0@@2|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#2#1#0@@1|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2624| :pattern ( ($Is (|#AsyncDisk.ReqRead.ReqRead| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((|a#3#0#0@@2| Int) (|a#3#1#0@@1| Int) ($h@@135 T@U) ) (!  (=> (and (= (type $h@@135) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@135)) (= ($IsAlloc (|#AsyncDisk.ReqRead.ReqRead| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.AsyncDisk.ReqRead $h@@135)  (and ($IsAlloc (int_2_U |a#3#0#0@@2|) Tclass.NativeTypes.uint64 $h@@135) ($IsAlloc (int_2_U |a#3#1#0@@1|) Tclass.NativeTypes.uint64 $h@@135)))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2625| :pattern ( ($IsAlloc (|#AsyncDisk.ReqRead.ReqRead| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.AsyncDisk.ReqRead $h@@135)) )))
(assert (forall ((d@@112 T@U) ($h@@136 T@U) ) (!  (=> (and (and (= (type d@@112) DatatypeTypeType) (= (type $h@@136) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@136) (and (AsyncDisk.ReqRead.ReqRead_q d@@112) ($IsAlloc d@@112 Tclass.AsyncDisk.ReqRead $h@@136)))) ($IsAlloc (int_2_U (AsyncDisk.ReqRead.addr d@@112)) Tclass.NativeTypes.uint64 $h@@136)) :qid |unknown.0:0| :skolemid |2626| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqRead.addr d@@112)) Tclass.NativeTypes.uint64 $h@@136)) )))
(assert (forall ((d@@113 T@U) ($h@@137 T@U) ) (!  (=> (and (and (= (type d@@113) DatatypeTypeType) (= (type $h@@137) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@137) (and (AsyncDisk.ReqRead.ReqRead_q d@@113) ($IsAlloc d@@113 Tclass.AsyncDisk.ReqRead $h@@137)))) ($IsAlloc (int_2_U (AsyncDisk.ReqRead.len d@@113)) Tclass.NativeTypes.uint64 $h@@137)) :qid |unknown.0:0| :skolemid |2627| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqRead.len d@@113)) Tclass.NativeTypes.uint64 $h@@137)) )))
(assert (forall ((|a#4#0#0@@2| Int) (|a#4#1#0@@1| Int) ) (! (= (|#AsyncDisk.ReqRead.ReqRead| (LitInt |a#4#0#0@@2|) (LitInt |a#4#1#0@@1|)) (Lit (|#AsyncDisk.ReqRead.ReqRead| |a#4#0#0@@2| |a#4#1#0@@1|))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2628| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| (LitInt |a#4#0#0@@2|) (LitInt |a#4#1#0@@1|))) )))
(assert (forall ((|a#5#0#0@@3| Int) (|a#5#1#0@@1| Int) ) (! (= (AsyncDisk.ReqRead.addr (|#AsyncDisk.ReqRead.ReqRead| |a#5#0#0@@3| |a#5#1#0@@1|)) |a#5#0#0@@3|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2629| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#5#0#0@@3| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@3| Int) (|a#6#1#0@@1| Int) ) (! (= (AsyncDisk.ReqRead.len (|#AsyncDisk.ReqRead.ReqRead| |a#6#0#0@@3| |a#6#1#0@@1|)) |a#6#1#0@@1|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2630| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#6#0#0@@3| |a#6#1#0@@1|)) )))
(assert (forall ((d@@114 T@U) ) (!  (=> (and (= (type d@@114) DatatypeTypeType) (|$IsA#AsyncDisk.ReqRead| d@@114)) (AsyncDisk.ReqRead.ReqRead_q d@@114)) :qid |unknown.0:0| :skolemid |2631| :pattern ( (|$IsA#AsyncDisk.ReqRead| d@@114)) )))
(assert (forall ((d@@115 T@U) ) (!  (=> (and (= (type d@@115) DatatypeTypeType) ($Is d@@115 Tclass.AsyncDisk.ReqRead)) (AsyncDisk.ReqRead.ReqRead_q d@@115)) :qid |unknown.0:0| :skolemid |2632| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@115) ($Is d@@115 Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((a@@163 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) true) (= (|AsyncDisk.ReqRead#Equal| a@@163 b@@100)  (and (= (AsyncDisk.ReqRead.addr a@@163) (AsyncDisk.ReqRead.addr b@@100)) (= (AsyncDisk.ReqRead.len a@@163) (AsyncDisk.ReqRead.len b@@100))))) :qid |unknown.0:0| :skolemid |2633| :pattern ( (|AsyncDisk.ReqRead#Equal| a@@163 b@@100)) )))
(assert (forall ((a@@164 T@U) (b@@101 T@U) ) (!  (=> (and (= (type a@@164) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (= (|AsyncDisk.ReqRead#Equal| a@@164 b@@101) (= a@@164 b@@101))) :qid |unknown.0:0| :skolemid |2634| :pattern ( (|AsyncDisk.ReqRead#Equal| a@@164 b@@101)) )))
(assert (forall ((arg0@@563 Int) (arg1@@272 T@U) ) (! (= (type (|#AsyncDisk.ReqWrite.ReqWrite| arg0@@563 arg1@@272)) DatatypeTypeType) :qid |funType:#AsyncDisk.ReqWrite.ReqWrite| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| arg0@@563 arg1@@272)) )))
(assert (forall ((|a#7#0#0@@2| Int) (|a#7#1#0@@0| T@U) ) (!  (=> (= (type |a#7#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.ReqWrite.ReqWrite| |a#7#0#0@@2| |a#7#1#0@@0|)) |##AsyncDisk.ReqWrite.ReqWrite|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2635| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#7#0#0@@2| |a#7#1#0@@0|)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (= (type d@@116) DatatypeTypeType) (= (AsyncDisk.ReqWrite.ReqWrite_q d@@116) (= (DatatypeCtorId d@@116) |##AsyncDisk.ReqWrite.ReqWrite|))) :qid |unknown.0:0| :skolemid |2636| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@116)) )))
(assert (forall ((d@@117 T@U) ) (!  (=> (and (= (type d@@117) DatatypeTypeType) (AsyncDisk.ReqWrite.ReqWrite_q d@@117)) (exists ((|a#8#0#0@@2| Int) (|a#8#1#0@@0| T@U) ) (!  (and (= (type |a#8#1#0@@0|) (SeqType BoxType)) (= d@@117 (|#AsyncDisk.ReqWrite.ReqWrite| |a#8#0#0@@2| |a#8#1#0@@0|))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2637| :no-pattern (type |a#8#1#0@@0|) :no-pattern (U_2_int |a#8#1#0@@0|) :no-pattern (U_2_bool |a#8#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2638| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@117)) )))
(assert (= (type Tclass.AsyncDisk.ReqWrite) TyType))
(assert (= (Tag Tclass.AsyncDisk.ReqWrite) Tagclass.AsyncDisk.ReqWrite))
(assert (= (TagFamily Tclass.AsyncDisk.ReqWrite) tytagFamily$ReqWrite))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.AsyncDisk.ReqWrite)) (and (= ($Box ($Unbox DatatypeTypeType bx@@162)) bx@@162) ($Is ($Unbox DatatypeTypeType bx@@162) Tclass.AsyncDisk.ReqWrite))) :qid |unknown.0:0| :skolemid |2639| :pattern ( ($IsBox bx@@162 Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((|a#9#0#0@@1| Int) (|a#9#1#0| T@U) ) (!  (=> (= (type |a#9#1#0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.ReqWrite.ReqWrite| |a#9#0#0@@1| |a#9#1#0|) Tclass.AsyncDisk.ReqWrite)  (and ($Is (int_2_U |a#9#0#0@@1|) Tclass.NativeTypes.uint64) ($Is |a#9#1#0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2640| :pattern ( ($Is (|#AsyncDisk.ReqWrite.ReqWrite| |a#9#0#0@@1| |a#9#1#0|) Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((|a#10#0#0@@1| Int) (|a#10#1#0| T@U) ($h@@138 T@U) ) (!  (=> (and (and (= (type |a#10#1#0|) (SeqType BoxType)) (= (type $h@@138) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@138)) (= ($IsAlloc (|#AsyncDisk.ReqWrite.ReqWrite| |a#10#0#0@@1| |a#10#1#0|) Tclass.AsyncDisk.ReqWrite $h@@138)  (and ($IsAlloc (int_2_U |a#10#0#0@@1|) Tclass.NativeTypes.uint64 $h@@138) ($IsAlloc |a#10#1#0| (TSeq Tclass.NativeTypes.byte) $h@@138)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2641| :pattern ( ($IsAlloc (|#AsyncDisk.ReqWrite.ReqWrite| |a#10#0#0@@1| |a#10#1#0|) Tclass.AsyncDisk.ReqWrite $h@@138)) )))
(assert (forall ((d@@118 T@U) ($h@@139 T@U) ) (!  (=> (and (and (= (type d@@118) DatatypeTypeType) (= (type $h@@139) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@139) (and (AsyncDisk.ReqWrite.ReqWrite_q d@@118) ($IsAlloc d@@118 Tclass.AsyncDisk.ReqWrite $h@@139)))) ($IsAlloc (int_2_U (AsyncDisk.ReqWrite.addr d@@118)) Tclass.NativeTypes.uint64 $h@@139)) :qid |unknown.0:0| :skolemid |2642| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqWrite.addr d@@118)) Tclass.NativeTypes.uint64 $h@@139)) )))
(assert (forall ((arg0@@564 T@U) ) (! (= (type (AsyncDisk.ReqWrite.bytes arg0@@564)) (SeqType BoxType)) :qid |funType:AsyncDisk.ReqWrite.bytes| :pattern ( (AsyncDisk.ReqWrite.bytes arg0@@564)) )))
(assert (forall ((d@@119 T@U) ($h@@140 T@U) ) (!  (=> (and (and (= (type d@@119) DatatypeTypeType) (= (type $h@@140) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@140) (and (AsyncDisk.ReqWrite.ReqWrite_q d@@119) ($IsAlloc d@@119 Tclass.AsyncDisk.ReqWrite $h@@140)))) ($IsAlloc (AsyncDisk.ReqWrite.bytes d@@119) (TSeq Tclass.NativeTypes.byte) $h@@140)) :qid |unknown.0:0| :skolemid |2643| :pattern ( ($IsAlloc (AsyncDisk.ReqWrite.bytes d@@119) (TSeq Tclass.NativeTypes.byte) $h@@140)) )))
(assert (forall ((|a#11#0#0@@1| Int) (|a#11#1#0| T@U) ) (!  (=> (= (type |a#11#1#0|) (SeqType BoxType)) (= (|#AsyncDisk.ReqWrite.ReqWrite| (LitInt |a#11#0#0@@1|) (Lit |a#11#1#0|)) (Lit (|#AsyncDisk.ReqWrite.ReqWrite| |a#11#0#0@@1| |a#11#1#0|)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2644| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| (LitInt |a#11#0#0@@1|) (Lit |a#11#1#0|))) )))
(assert (forall ((|a#12#0#0@@0| Int) (|a#12#1#0| T@U) ) (!  (=> (= (type |a#12#1#0|) (SeqType BoxType)) (= (AsyncDisk.ReqWrite.addr (|#AsyncDisk.ReqWrite.ReqWrite| |a#12#0#0@@0| |a#12#1#0|)) |a#12#0#0@@0|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2645| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#12#0#0@@0| |a#12#1#0|)) )))
(assert (forall ((|a#13#0#0@@0| Int) (|a#13#1#0| T@U) ) (!  (=> (= (type |a#13#1#0|) (SeqType BoxType)) (= (AsyncDisk.ReqWrite.bytes (|#AsyncDisk.ReqWrite.ReqWrite| |a#13#0#0@@0| |a#13#1#0|)) |a#13#1#0|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2646| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#13#0#0@@0| |a#13#1#0|)) )))
(assert (forall ((|a#14#0#0@@1| Int) (|a#14#1#0@@0| T@U) (i@@27 Int) ) (!  (=> (= (type |a#14#1#0@@0|) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| |a#14#1#0@@0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#14#1#0@@0| i@@27))) (DtRank (|#AsyncDisk.ReqWrite.ReqWrite| |a#14#0#0@@1| |a#14#1#0@@0|))))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2647| :pattern ( (|Seq#Index| |a#14#1#0@@0| i@@27) (|#AsyncDisk.ReqWrite.ReqWrite| |a#14#0#0@@1| |a#14#1#0@@0|)) )))
(assert (forall ((|a#15#0#0@@1| Int) (|a#15#1#0@@0| T@U) ) (!  (=> (= (type |a#15#1#0@@0|) (SeqType BoxType)) (< (|Seq#Rank| |a#15#1#0@@0|) (DtRank (|#AsyncDisk.ReqWrite.ReqWrite| |a#15#0#0@@1| |a#15#1#0@@0|)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2648| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#15#0#0@@1| |a#15#1#0@@0|)) )))
(assert (forall ((d@@120 T@U) ) (!  (=> (and (= (type d@@120) DatatypeTypeType) (|$IsA#AsyncDisk.ReqWrite| d@@120)) (AsyncDisk.ReqWrite.ReqWrite_q d@@120)) :qid |unknown.0:0| :skolemid |2649| :pattern ( (|$IsA#AsyncDisk.ReqWrite| d@@120)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) ($Is d@@121 Tclass.AsyncDisk.ReqWrite)) (AsyncDisk.ReqWrite.ReqWrite_q d@@121)) :qid |unknown.0:0| :skolemid |2650| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@121) ($Is d@@121 Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((a@@165 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) true) (= (|AsyncDisk.ReqWrite#Equal| a@@165 b@@102)  (and (= (AsyncDisk.ReqWrite.addr a@@165) (AsyncDisk.ReqWrite.addr b@@102)) (|Seq#Equal| (AsyncDisk.ReqWrite.bytes a@@165) (AsyncDisk.ReqWrite.bytes b@@102))))) :qid |unknown.0:0| :skolemid |2651| :pattern ( (|AsyncDisk.ReqWrite#Equal| a@@165 b@@102)) )))
(assert (forall ((a@@166 T@U) (b@@103 T@U) ) (!  (=> (and (= (type a@@166) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (= (|AsyncDisk.ReqWrite#Equal| a@@166 b@@103) (= a@@166 b@@103))) :qid |unknown.0:0| :skolemid |2652| :pattern ( (|AsyncDisk.ReqWrite#Equal| a@@166 b@@103)) )))
(assert (forall ((arg0@@565 Int) (arg1@@273 T@U) ) (! (= (type (|#AsyncDisk.RespRead.RespRead| arg0@@565 arg1@@273)) DatatypeTypeType) :qid |funType:#AsyncDisk.RespRead.RespRead| :pattern ( (|#AsyncDisk.RespRead.RespRead| arg0@@565 arg1@@273)) )))
(assert (forall ((|a#16#0#0@@1| Int) (|a#16#1#0@@0| T@U) ) (!  (=> (= (type |a#16#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.RespRead.RespRead| |a#16#0#0@@1| |a#16#1#0@@0|)) |##AsyncDisk.RespRead.RespRead|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2653| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#16#0#0@@1| |a#16#1#0@@0|)) )))
(assert (forall ((d@@122 T@U) ) (!  (=> (= (type d@@122) DatatypeTypeType) (= (AsyncDisk.RespRead.RespRead_q d@@122) (= (DatatypeCtorId d@@122) |##AsyncDisk.RespRead.RespRead|))) :qid |unknown.0:0| :skolemid |2654| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@122)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (and (= (type d@@123) DatatypeTypeType) (AsyncDisk.RespRead.RespRead_q d@@123)) (exists ((|a#17#0#0@@1| Int) (|a#17#1#0@@0| T@U) ) (!  (and (= (type |a#17#1#0@@0|) (SeqType BoxType)) (= d@@123 (|#AsyncDisk.RespRead.RespRead| |a#17#0#0@@1| |a#17#1#0@@0|))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2655| :no-pattern (type |a#17#1#0@@0|) :no-pattern (U_2_int |a#17#1#0@@0|) :no-pattern (U_2_bool |a#17#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2656| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@123)) )))
(assert (= (type Tclass.AsyncDisk.RespRead) TyType))
(assert (= (Tag Tclass.AsyncDisk.RespRead) Tagclass.AsyncDisk.RespRead))
(assert (= (TagFamily Tclass.AsyncDisk.RespRead) tytagFamily$RespRead))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.AsyncDisk.RespRead)) (and (= ($Box ($Unbox DatatypeTypeType bx@@163)) bx@@163) ($Is ($Unbox DatatypeTypeType bx@@163) Tclass.AsyncDisk.RespRead))) :qid |unknown.0:0| :skolemid |2657| :pattern ( ($IsBox bx@@163 Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((|a#18#0#0@@1| Int) (|a#18#1#0@@0| T@U) ) (!  (=> (= (type |a#18#1#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.RespRead.RespRead| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.AsyncDisk.RespRead)  (and ($Is (int_2_U |a#18#0#0@@1|) Tclass.NativeTypes.uint64) ($Is |a#18#1#0@@0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2658| :pattern ( ($Is (|#AsyncDisk.RespRead.RespRead| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((|a#19#0#0@@1| Int) (|a#19#1#0@@0| T@U) ($h@@141 T@U) ) (!  (=> (and (and (= (type |a#19#1#0@@0|) (SeqType BoxType)) (= (type $h@@141) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@141)) (= ($IsAlloc (|#AsyncDisk.RespRead.RespRead| |a#19#0#0@@1| |a#19#1#0@@0|) Tclass.AsyncDisk.RespRead $h@@141)  (and ($IsAlloc (int_2_U |a#19#0#0@@1|) Tclass.NativeTypes.uint64 $h@@141) ($IsAlloc |a#19#1#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@141)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2659| :pattern ( ($IsAlloc (|#AsyncDisk.RespRead.RespRead| |a#19#0#0@@1| |a#19#1#0@@0|) Tclass.AsyncDisk.RespRead $h@@141)) )))
(assert (forall ((d@@124 T@U) ($h@@142 T@U) ) (!  (=> (and (and (= (type d@@124) DatatypeTypeType) (= (type $h@@142) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@142) (and (AsyncDisk.RespRead.RespRead_q d@@124) ($IsAlloc d@@124 Tclass.AsyncDisk.RespRead $h@@142)))) ($IsAlloc (int_2_U (AsyncDisk.RespRead.addr d@@124)) Tclass.NativeTypes.uint64 $h@@142)) :qid |unknown.0:0| :skolemid |2660| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespRead.addr d@@124)) Tclass.NativeTypes.uint64 $h@@142)) )))
(assert (forall ((arg0@@566 T@U) ) (! (= (type (AsyncDisk.RespRead.bytes arg0@@566)) (SeqType BoxType)) :qid |funType:AsyncDisk.RespRead.bytes| :pattern ( (AsyncDisk.RespRead.bytes arg0@@566)) )))
(assert (forall ((d@@125 T@U) ($h@@143 T@U) ) (!  (=> (and (and (= (type d@@125) DatatypeTypeType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@143) (and (AsyncDisk.RespRead.RespRead_q d@@125) ($IsAlloc d@@125 Tclass.AsyncDisk.RespRead $h@@143)))) ($IsAlloc (AsyncDisk.RespRead.bytes d@@125) (TSeq Tclass.NativeTypes.byte) $h@@143)) :qid |unknown.0:0| :skolemid |2661| :pattern ( ($IsAlloc (AsyncDisk.RespRead.bytes d@@125) (TSeq Tclass.NativeTypes.byte) $h@@143)) )))
(assert (forall ((|a#20#0#0@@1| Int) (|a#20#1#0@@0| T@U) ) (!  (=> (= (type |a#20#1#0@@0|) (SeqType BoxType)) (= (|#AsyncDisk.RespRead.RespRead| (LitInt |a#20#0#0@@1|) (Lit |a#20#1#0@@0|)) (Lit (|#AsyncDisk.RespRead.RespRead| |a#20#0#0@@1| |a#20#1#0@@0|)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2662| :pattern ( (|#AsyncDisk.RespRead.RespRead| (LitInt |a#20#0#0@@1|) (Lit |a#20#1#0@@0|))) )))
(assert (forall ((|a#21#0#0@@1| Int) (|a#21#1#0@@0| T@U) ) (!  (=> (= (type |a#21#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.RespRead.addr (|#AsyncDisk.RespRead.RespRead| |a#21#0#0@@1| |a#21#1#0@@0|)) |a#21#0#0@@1|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2663| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#21#0#0@@1| |a#21#1#0@@0|)) )))
(assert (forall ((|a#22#0#0@@1| Int) (|a#22#1#0@@0| T@U) ) (!  (=> (= (type |a#22#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.RespRead.bytes (|#AsyncDisk.RespRead.RespRead| |a#22#0#0@@1| |a#22#1#0@@0|)) |a#22#1#0@@0|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2664| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#22#0#0@@1| |a#22#1#0@@0|)) )))
(assert (forall ((|a#23#0#0@@0| Int) (|a#23#1#0| T@U) (i@@28 Int) ) (!  (=> (= (type |a#23#1#0|) (SeqType BoxType)) (=> (and (<= 0 i@@28) (< i@@28 (|Seq#Length| |a#23#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#1#0| i@@28))) (DtRank (|#AsyncDisk.RespRead.RespRead| |a#23#0#0@@0| |a#23#1#0|))))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2665| :pattern ( (|Seq#Index| |a#23#1#0| i@@28) (|#AsyncDisk.RespRead.RespRead| |a#23#0#0@@0| |a#23#1#0|)) )))
(assert (forall ((|a#24#0#0| Int) (|a#24#1#0| T@U) ) (!  (=> (= (type |a#24#1#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#24#1#0|) (DtRank (|#AsyncDisk.RespRead.RespRead| |a#24#0#0| |a#24#1#0|)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2666| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#24#0#0| |a#24#1#0|)) )))
(assert (forall ((d@@126 T@U) ) (!  (=> (and (= (type d@@126) DatatypeTypeType) (|$IsA#AsyncDisk.RespRead| d@@126)) (AsyncDisk.RespRead.RespRead_q d@@126)) :qid |unknown.0:0| :skolemid |2667| :pattern ( (|$IsA#AsyncDisk.RespRead| d@@126)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (and (= (type d@@127) DatatypeTypeType) ($Is d@@127 Tclass.AsyncDisk.RespRead)) (AsyncDisk.RespRead.RespRead_q d@@127)) :qid |unknown.0:0| :skolemid |2668| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@127) ($Is d@@127 Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((a@@167 T@U) (b@@104 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) true) (= (|AsyncDisk.RespRead#Equal| a@@167 b@@104)  (and (= (AsyncDisk.RespRead.addr a@@167) (AsyncDisk.RespRead.addr b@@104)) (|Seq#Equal| (AsyncDisk.RespRead.bytes a@@167) (AsyncDisk.RespRead.bytes b@@104))))) :qid |unknown.0:0| :skolemid |2669| :pattern ( (|AsyncDisk.RespRead#Equal| a@@167 b@@104)) )))
(assert (forall ((a@@168 T@U) (b@@105 T@U) ) (!  (=> (and (= (type a@@168) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (= (|AsyncDisk.RespRead#Equal| a@@168 b@@105) (= a@@168 b@@105))) :qid |unknown.0:0| :skolemid |2670| :pattern ( (|AsyncDisk.RespRead#Equal| a@@168 b@@105)) )))
(assert (forall ((arg0@@567 Int) (arg1@@274 Int) ) (! (= (type (|#AsyncDisk.RespWrite.RespWrite| arg0@@567 arg1@@274)) DatatypeTypeType) :qid |funType:#AsyncDisk.RespWrite.RespWrite| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| arg0@@567 arg1@@274)) )))
(assert (forall ((|a#25#0#0| Int) (|a#25#1#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.RespWrite.RespWrite| |a#25#0#0| |a#25#1#0|)) |##AsyncDisk.RespWrite.RespWrite|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2671| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#25#0#0| |a#25#1#0|)) )))
(assert (forall ((d@@128 T@U) ) (!  (=> (= (type d@@128) DatatypeTypeType) (= (AsyncDisk.RespWrite.RespWrite_q d@@128) (= (DatatypeCtorId d@@128) |##AsyncDisk.RespWrite.RespWrite|))) :qid |unknown.0:0| :skolemid |2672| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@128)) )))
(assert (forall ((d@@129 T@U) ) (!  (=> (and (= (type d@@129) DatatypeTypeType) (AsyncDisk.RespWrite.RespWrite_q d@@129)) (exists ((|a#26#0#0| Int) (|a#26#1#0| Int) ) (! (= d@@129 (|#AsyncDisk.RespWrite.RespWrite| |a#26#0#0| |a#26#1#0|)) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2673| ))) :qid |unknown.0:0| :skolemid |2674| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@129)) )))
(assert (= (type Tclass.AsyncDisk.RespWrite) TyType))
(assert (= (Tag Tclass.AsyncDisk.RespWrite) Tagclass.AsyncDisk.RespWrite))
(assert (= (TagFamily Tclass.AsyncDisk.RespWrite) tytagFamily$RespWrite))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.AsyncDisk.RespWrite)) (and (= ($Box ($Unbox DatatypeTypeType bx@@164)) bx@@164) ($Is ($Unbox DatatypeTypeType bx@@164) Tclass.AsyncDisk.RespWrite))) :qid |unknown.0:0| :skolemid |2675| :pattern ( ($IsBox bx@@164 Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((|a#27#0#0| Int) (|a#27#1#0| Int) ) (! (= ($Is (|#AsyncDisk.RespWrite.RespWrite| |a#27#0#0| |a#27#1#0|) Tclass.AsyncDisk.RespWrite)  (and ($Is (int_2_U |a#27#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#27#1#0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2676| :pattern ( ($Is (|#AsyncDisk.RespWrite.RespWrite| |a#27#0#0| |a#27#1#0|) Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((|a#28#0#0| Int) (|a#28#1#0| Int) ($h@@144 T@U) ) (!  (=> (and (= (type $h@@144) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@144)) (= ($IsAlloc (|#AsyncDisk.RespWrite.RespWrite| |a#28#0#0| |a#28#1#0|) Tclass.AsyncDisk.RespWrite $h@@144)  (and ($IsAlloc (int_2_U |a#28#0#0|) Tclass.NativeTypes.uint64 $h@@144) ($IsAlloc (int_2_U |a#28#1#0|) Tclass.NativeTypes.uint64 $h@@144)))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2677| :pattern ( ($IsAlloc (|#AsyncDisk.RespWrite.RespWrite| |a#28#0#0| |a#28#1#0|) Tclass.AsyncDisk.RespWrite $h@@144)) )))
(assert (forall ((d@@130 T@U) ($h@@145 T@U) ) (!  (=> (and (and (= (type d@@130) DatatypeTypeType) (= (type $h@@145) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@145) (and (AsyncDisk.RespWrite.RespWrite_q d@@130) ($IsAlloc d@@130 Tclass.AsyncDisk.RespWrite $h@@145)))) ($IsAlloc (int_2_U (AsyncDisk.RespWrite.addr d@@130)) Tclass.NativeTypes.uint64 $h@@145)) :qid |unknown.0:0| :skolemid |2678| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespWrite.addr d@@130)) Tclass.NativeTypes.uint64 $h@@145)) )))
(assert (forall ((d@@131 T@U) ($h@@146 T@U) ) (!  (=> (and (and (= (type d@@131) DatatypeTypeType) (= (type $h@@146) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@146) (and (AsyncDisk.RespWrite.RespWrite_q d@@131) ($IsAlloc d@@131 Tclass.AsyncDisk.RespWrite $h@@146)))) ($IsAlloc (int_2_U (AsyncDisk.RespWrite.len d@@131)) Tclass.NativeTypes.uint64 $h@@146)) :qid |unknown.0:0| :skolemid |2679| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespWrite.len d@@131)) Tclass.NativeTypes.uint64 $h@@146)) )))
(assert (forall ((|a#29#0#0@@0| Int) (|a#29#1#0| Int) ) (! (= (|#AsyncDisk.RespWrite.RespWrite| (LitInt |a#29#0#0@@0|) (LitInt |a#29#1#0|)) (Lit (|#AsyncDisk.RespWrite.RespWrite| |a#29#0#0@@0| |a#29#1#0|))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2680| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| (LitInt |a#29#0#0@@0|) (LitInt |a#29#1#0|))) )))
(assert (forall ((|a#30#0#0@@0| Int) (|a#30#1#0| Int) ) (! (= (AsyncDisk.RespWrite.addr (|#AsyncDisk.RespWrite.RespWrite| |a#30#0#0@@0| |a#30#1#0|)) |a#30#0#0@@0|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2681| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#30#0#0@@0| |a#30#1#0|)) )))
(assert (forall ((|a#31#0#0@@0| Int) (|a#31#1#0| Int) ) (! (= (AsyncDisk.RespWrite.len (|#AsyncDisk.RespWrite.RespWrite| |a#31#0#0@@0| |a#31#1#0|)) |a#31#1#0|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2682| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#31#0#0@@0| |a#31#1#0|)) )))
(assert (forall ((d@@132 T@U) ) (!  (=> (and (= (type d@@132) DatatypeTypeType) (|$IsA#AsyncDisk.RespWrite| d@@132)) (AsyncDisk.RespWrite.RespWrite_q d@@132)) :qid |unknown.0:0| :skolemid |2683| :pattern ( (|$IsA#AsyncDisk.RespWrite| d@@132)) )))
(assert (forall ((d@@133 T@U) ) (!  (=> (and (= (type d@@133) DatatypeTypeType) ($Is d@@133 Tclass.AsyncDisk.RespWrite)) (AsyncDisk.RespWrite.RespWrite_q d@@133)) :qid |unknown.0:0| :skolemid |2684| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@133) ($Is d@@133 Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((a@@169 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) true) (= (|AsyncDisk.RespWrite#Equal| a@@169 b@@106)  (and (= (AsyncDisk.RespWrite.addr a@@169) (AsyncDisk.RespWrite.addr b@@106)) (= (AsyncDisk.RespWrite.len a@@169) (AsyncDisk.RespWrite.len b@@106))))) :qid |unknown.0:0| :skolemid |2685| :pattern ( (|AsyncDisk.RespWrite#Equal| a@@169 b@@106)) )))
(assert (forall ((a@@170 T@U) (b@@107 T@U) ) (!  (=> (and (= (type a@@170) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (= (|AsyncDisk.RespWrite#Equal| a@@170 b@@107) (= a@@170 b@@107))) :qid |unknown.0:0| :skolemid |2686| :pattern ( (|AsyncDisk.RespWrite#Equal| a@@170 b@@107)) )))
(assert (forall ((arg0@@568 Int) (arg1@@275 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqReadOp| arg0@@568 arg1@@275)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqReadOp| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| arg0@@568 arg1@@275)) )))
(assert (forall ((|a#32#0#0@@0| Int) (|a#32#1#0| T@U) ) (!  (=> (= (type |a#32#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqReadOp| |a#32#0#0@@0| |a#32#1#0|)) |##AsyncDisk.DiskOp.ReqReadOp|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2687| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#32#0#0@@0| |a#32#1#0|)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (= (type d@@134) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqReadOp_q d@@134) (= (DatatypeCtorId d@@134) |##AsyncDisk.DiskOp.ReqReadOp|))) :qid |unknown.0:0| :skolemid |2688| :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@134)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (and (= (type d@@135) DatatypeTypeType) (AsyncDisk.DiskOp.ReqReadOp_q d@@135)) (exists ((|a#33#0#0@@0| Int) (|a#33#1#0| T@U) ) (!  (and (= (type |a#33#1#0|) DatatypeTypeType) (= d@@135 (|#AsyncDisk.DiskOp.ReqReadOp| |a#33#0#0@@0| |a#33#1#0|))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2689| :no-pattern (type |a#33#1#0|) :no-pattern (U_2_int |a#33#1#0|) :no-pattern (U_2_bool |a#33#1#0|) ))) :qid |unknown.0:0| :skolemid |2690| :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@135)) )))
(assert (= (type Tclass.AsyncDisk.DiskOp) TyType))
(assert (= (Tag Tclass.AsyncDisk.DiskOp) Tagclass.AsyncDisk.DiskOp))
(assert (= (TagFamily Tclass.AsyncDisk.DiskOp) tytagFamily$DiskOp))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.AsyncDisk.DiskOp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@165)) bx@@165) ($Is ($Unbox DatatypeTypeType bx@@165) Tclass.AsyncDisk.DiskOp))) :qid |unknown.0:0| :skolemid |2691| :pattern ( ($IsBox bx@@165 Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#34#0#0@@0| Int) (|a#34#1#0| T@U) ) (!  (=> (= (type |a#34#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.ReqReadOp| |a#34#0#0@@0| |a#34#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#34#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#34#1#0| Tclass.AsyncDisk.ReqRead)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2692| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqReadOp| |a#34#0#0@@0| |a#34#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#35#0#0@@0| Int) (|a#35#1#0| T@U) ($h@@147 T@U) ) (!  (=> (and (and (= (type |a#35#1#0|) DatatypeTypeType) (= (type $h@@147) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@147)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqReadOp| |a#35#0#0@@0| |a#35#1#0|) Tclass.AsyncDisk.DiskOp $h@@147)  (and ($IsAlloc (int_2_U |a#35#0#0@@0|) Tclass.NativeTypes.uint64 $h@@147) ($IsAlloc |a#35#1#0| Tclass.AsyncDisk.ReqRead $h@@147)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2693| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqReadOp| |a#35#0#0@@0| |a#35#1#0|) Tclass.AsyncDisk.DiskOp $h@@147)) )))
(assert (forall ((d@@136 T@U) ($h@@148 T@U) ) (!  (=> (and (and (= (type d@@136) DatatypeTypeType) (= (type $h@@148) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@148) (and (AsyncDisk.DiskOp.ReqReadOp_q d@@136) ($IsAlloc d@@136 Tclass.AsyncDisk.DiskOp $h@@148)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@136)) Tclass.NativeTypes.uint64 $h@@148)) :qid |unknown.0:0| :skolemid |2694| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@136)) Tclass.NativeTypes.uint64 $h@@148)) )))
(assert (forall ((arg0@@569 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqRead arg0@@569)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqRead| :pattern ( (AsyncDisk.DiskOp.reqRead arg0@@569)) )))
(assert (forall ((d@@137 T@U) ($h@@149 T@U) ) (!  (=> (and (and (= (type d@@137) DatatypeTypeType) (= (type $h@@149) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@149) (and (AsyncDisk.DiskOp.ReqReadOp_q d@@137) ($IsAlloc d@@137 Tclass.AsyncDisk.DiskOp $h@@149)))) ($IsAlloc (AsyncDisk.DiskOp.reqRead d@@137) Tclass.AsyncDisk.ReqRead $h@@149)) :qid |unknown.0:0| :skolemid |2695| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqRead d@@137) Tclass.AsyncDisk.ReqRead $h@@149)) )))
(assert (forall ((|a#36#0#0@@0| Int) (|a#36#1#0| T@U) ) (!  (=> (= (type |a#36#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.ReqReadOp| (LitInt |a#36#0#0@@0|) (Lit |a#36#1#0|)) (Lit (|#AsyncDisk.DiskOp.ReqReadOp| |a#36#0#0@@0| |a#36#1#0|)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2696| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| (LitInt |a#36#0#0@@0|) (Lit |a#36#1#0|))) )))
(assert (forall ((|a#37#0#0@@0| Int) (|a#37#1#0| T@U) ) (!  (=> (= (type |a#37#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.ReqReadOp| |a#37#0#0@@0| |a#37#1#0|)) |a#37#0#0@@0|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2697| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#37#0#0@@0| |a#37#1#0|)) )))
(assert (forall ((|a#38#0#0@@0| Int) (|a#38#1#0| T@U) ) (!  (=> (= (type |a#38#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.reqRead (|#AsyncDisk.DiskOp.ReqReadOp| |a#38#0#0@@0| |a#38#1#0|)) |a#38#1#0|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2698| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#38#0#0@@0| |a#38#1#0|)) )))
(assert (forall ((|a#39#0#0@@0| Int) (|a#39#1#0| T@U) ) (!  (=> (= (type |a#39#1#0|) DatatypeTypeType) (< (DtRank |a#39#1#0|) (DtRank (|#AsyncDisk.DiskOp.ReqReadOp| |a#39#0#0@@0| |a#39#1#0|)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2699| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#39#0#0@@0| |a#39#1#0|)) )))
(assert (forall ((arg0@@570 Int) (arg1@@276 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqWriteOp| arg0@@570 arg1@@276)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqWriteOp| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| arg0@@570 arg1@@276)) )))
(assert (forall ((|a#40#0#0@@0| Int) (|a#40#1#0| T@U) ) (!  (=> (= (type |a#40#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqWriteOp| |a#40#0#0@@0| |a#40#1#0|)) |##AsyncDisk.DiskOp.ReqWriteOp|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2700| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#40#0#0@@0| |a#40#1#0|)) )))
(assert (forall ((d@@138 T@U) ) (!  (=> (= (type d@@138) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqWriteOp_q d@@138) (= (DatatypeCtorId d@@138) |##AsyncDisk.DiskOp.ReqWriteOp|))) :qid |unknown.0:0| :skolemid |2701| :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@138)) )))
(assert (forall ((d@@139 T@U) ) (!  (=> (and (= (type d@@139) DatatypeTypeType) (AsyncDisk.DiskOp.ReqWriteOp_q d@@139)) (exists ((|a#41#0#0| Int) (|a#41#1#0| T@U) ) (!  (and (= (type |a#41#1#0|) DatatypeTypeType) (= d@@139 (|#AsyncDisk.DiskOp.ReqWriteOp| |a#41#0#0| |a#41#1#0|))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2702| :no-pattern (type |a#41#1#0|) :no-pattern (U_2_int |a#41#1#0|) :no-pattern (U_2_bool |a#41#1#0|) ))) :qid |unknown.0:0| :skolemid |2703| :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@139)) )))
(assert (forall ((|a#42#0#0| Int) (|a#42#1#0| T@U) ) (!  (=> (= (type |a#42#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.ReqWriteOp| |a#42#0#0| |a#42#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#42#0#0|) Tclass.NativeTypes.uint64) ($Is |a#42#1#0| Tclass.AsyncDisk.ReqWrite)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2704| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqWriteOp| |a#42#0#0| |a#42#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#43#0#0| Int) (|a#43#1#0| T@U) ($h@@150 T@U) ) (!  (=> (and (and (= (type |a#43#1#0|) DatatypeTypeType) (= (type $h@@150) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@150)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqWriteOp| |a#43#0#0| |a#43#1#0|) Tclass.AsyncDisk.DiskOp $h@@150)  (and ($IsAlloc (int_2_U |a#43#0#0|) Tclass.NativeTypes.uint64 $h@@150) ($IsAlloc |a#43#1#0| Tclass.AsyncDisk.ReqWrite $h@@150)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2705| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqWriteOp| |a#43#0#0| |a#43#1#0|) Tclass.AsyncDisk.DiskOp $h@@150)) )))
(assert (forall ((d@@140 T@U) ($h@@151 T@U) ) (!  (=> (and (and (= (type d@@140) DatatypeTypeType) (= (type $h@@151) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@151) (and (AsyncDisk.DiskOp.ReqWriteOp_q d@@140) ($IsAlloc d@@140 Tclass.AsyncDisk.DiskOp $h@@151)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@140)) Tclass.NativeTypes.uint64 $h@@151)) :qid |unknown.0:0| :skolemid |2706| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@140)) Tclass.NativeTypes.uint64 $h@@151)) )))
(assert (forall ((arg0@@571 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite arg0@@571)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite| :pattern ( (AsyncDisk.DiskOp.reqWrite arg0@@571)) )))
(assert (forall ((d@@141 T@U) ($h@@152 T@U) ) (!  (=> (and (and (= (type d@@141) DatatypeTypeType) (= (type $h@@152) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@152) (and (AsyncDisk.DiskOp.ReqWriteOp_q d@@141) ($IsAlloc d@@141 Tclass.AsyncDisk.DiskOp $h@@152)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite d@@141) Tclass.AsyncDisk.ReqWrite $h@@152)) :qid |unknown.0:0| :skolemid |2707| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite d@@141) Tclass.AsyncDisk.ReqWrite $h@@152)) )))
(assert (forall ((|a#44#0#0| Int) (|a#44#1#0| T@U) ) (!  (=> (= (type |a#44#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.ReqWriteOp| (LitInt |a#44#0#0|) (Lit |a#44#1#0|)) (Lit (|#AsyncDisk.DiskOp.ReqWriteOp| |a#44#0#0| |a#44#1#0|)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2708| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| (LitInt |a#44#0#0|) (Lit |a#44#1#0|))) )))
(assert (forall ((|a#45#0#0| Int) (|a#45#1#0| T@U) ) (!  (=> (= (type |a#45#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.ReqWriteOp| |a#45#0#0| |a#45#1#0|)) |a#45#0#0|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2709| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#45#0#0| |a#45#1#0|)) )))
(assert (forall ((|a#46#0#0@@0| Int) (|a#46#1#0@@0| T@U) ) (!  (=> (= (type |a#46#1#0@@0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.reqWrite (|#AsyncDisk.DiskOp.ReqWriteOp| |a#46#0#0@@0| |a#46#1#0@@0|)) |a#46#1#0@@0|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2710| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#46#0#0@@0| |a#46#1#0@@0|)) )))
(assert (forall ((|a#47#0#0@@0| Int) (|a#47#1#0@@0| T@U) ) (!  (=> (= (type |a#47#1#0@@0|) DatatypeTypeType) (< (DtRank |a#47#1#0@@0|) (DtRank (|#AsyncDisk.DiskOp.ReqWriteOp| |a#47#0#0@@0| |a#47#1#0@@0|)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2711| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#47#0#0@@0| |a#47#1#0@@0|)) )))
(assert (forall ((arg0@@572 Int) (arg1@@277 Int) (arg2@@160 T@U) (arg3@@109 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqWrite2Op| arg0@@572 arg1@@277 arg2@@160 arg3@@109)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqWrite2Op| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| arg0@@572 arg1@@277 arg2@@160 arg3@@109)) )))
(assert (forall ((|a#48#0#0@@0| Int) (|a#48#1#0@@0| Int) (|a#48#2#0| T@U) (|a#48#3#0| T@U) ) (!  (=> (and (= (type |a#48#2#0|) DatatypeTypeType) (= (type |a#48#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0|)) |##AsyncDisk.DiskOp.ReqWrite2Op|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2712| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0|)) )))
(assert (forall ((d@@142 T@U) ) (!  (=> (= (type d@@142) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqWrite2Op_q d@@142) (= (DatatypeCtorId d@@142) |##AsyncDisk.DiskOp.ReqWrite2Op|))) :qid |unknown.0:0| :skolemid |2713| :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@142)) )))
(assert (forall ((d@@143 T@U) ) (!  (=> (and (= (type d@@143) DatatypeTypeType) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@143)) (exists ((|a#49#0#0@@0| Int) (|a#49#1#0@@0| Int) (|a#49#2#0| T@U) (|a#49#3#0| T@U) ) (!  (and (and (= (type |a#49#2#0|) DatatypeTypeType) (= (type |a#49#3#0|) DatatypeTypeType)) (= d@@143 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0|))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2714| :no-pattern (type |a#49#2#0|) :no-pattern (type |a#49#3#0|) :no-pattern (U_2_int |a#49#2#0|) :no-pattern (U_2_bool |a#49#2#0|) :no-pattern (U_2_int |a#49#3#0|) :no-pattern (U_2_bool |a#49#3#0|) ))) :qid |unknown.0:0| :skolemid |2715| :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@143)) )))
(assert (forall ((|a#50#0#0@@0| Int) (|a#50#1#0@@0| Int) (|a#50#2#0| T@U) (|a#50#3#0| T@U) ) (!  (=> (and (= (type |a#50#2#0|) DatatypeTypeType) (= (type |a#50#3#0|) DatatypeTypeType)) (= ($Is (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0|) Tclass.AsyncDisk.DiskOp)  (and (and (and ($Is (int_2_U |a#50#0#0@@0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#50#1#0@@0|) Tclass.NativeTypes.uint64)) ($Is |a#50#2#0| Tclass.AsyncDisk.ReqWrite)) ($Is |a#50#3#0| Tclass.AsyncDisk.ReqWrite)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2716| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#51#0#0@@0| Int) (|a#51#1#0@@0| Int) (|a#51#2#0| T@U) (|a#51#3#0| T@U) ($h@@153 T@U) ) (!  (=> (and (and (and (= (type |a#51#2#0|) DatatypeTypeType) (= (type |a#51#3#0|) DatatypeTypeType)) (= (type $h@@153) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@153)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#51#0#0@@0| |a#51#1#0@@0| |a#51#2#0| |a#51#3#0|) Tclass.AsyncDisk.DiskOp $h@@153)  (and (and (and ($IsAlloc (int_2_U |a#51#0#0@@0|) Tclass.NativeTypes.uint64 $h@@153) ($IsAlloc (int_2_U |a#51#1#0@@0|) Tclass.NativeTypes.uint64 $h@@153)) ($IsAlloc |a#51#2#0| Tclass.AsyncDisk.ReqWrite $h@@153)) ($IsAlloc |a#51#3#0| Tclass.AsyncDisk.ReqWrite $h@@153)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2717| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#51#0#0@@0| |a#51#1#0@@0| |a#51#2#0| |a#51#3#0|) Tclass.AsyncDisk.DiskOp $h@@153)) )))
(assert (forall ((d@@144 T@U) ($h@@154 T@U) ) (!  (=> (and (and (= (type d@@144) DatatypeTypeType) (= (type $h@@154) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@154) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@144) ($IsAlloc d@@144 Tclass.AsyncDisk.DiskOp $h@@154)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id1 d@@144)) Tclass.NativeTypes.uint64 $h@@154)) :qid |unknown.0:0| :skolemid |2718| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id1 d@@144)) Tclass.NativeTypes.uint64 $h@@154)) )))
(assert (forall ((d@@145 T@U) ($h@@155 T@U) ) (!  (=> (and (and (= (type d@@145) DatatypeTypeType) (= (type $h@@155) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@155) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@145) ($IsAlloc d@@145 Tclass.AsyncDisk.DiskOp $h@@155)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id2 d@@145)) Tclass.NativeTypes.uint64 $h@@155)) :qid |unknown.0:0| :skolemid |2719| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id2 d@@145)) Tclass.NativeTypes.uint64 $h@@155)) )))
(assert (forall ((arg0@@573 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite1 arg0@@573)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite1| :pattern ( (AsyncDisk.DiskOp.reqWrite1 arg0@@573)) )))
(assert (forall ((d@@146 T@U) ($h@@156 T@U) ) (!  (=> (and (and (= (type d@@146) DatatypeTypeType) (= (type $h@@156) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@156) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@146) ($IsAlloc d@@146 Tclass.AsyncDisk.DiskOp $h@@156)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite1 d@@146) Tclass.AsyncDisk.ReqWrite $h@@156)) :qid |unknown.0:0| :skolemid |2720| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite1 d@@146) Tclass.AsyncDisk.ReqWrite $h@@156)) )))
(assert (forall ((arg0@@574 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite2 arg0@@574)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite2| :pattern ( (AsyncDisk.DiskOp.reqWrite2 arg0@@574)) )))
(assert (forall ((d@@147 T@U) ($h@@157 T@U) ) (!  (=> (and (and (= (type d@@147) DatatypeTypeType) (= (type $h@@157) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@157) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@147) ($IsAlloc d@@147 Tclass.AsyncDisk.DiskOp $h@@157)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite2 d@@147) Tclass.AsyncDisk.ReqWrite $h@@157)) :qid |unknown.0:0| :skolemid |2721| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite2 d@@147) Tclass.AsyncDisk.ReqWrite $h@@157)) )))
(assert (forall ((|a#52#0#0@@0| Int) (|a#52#1#0@@0| Int) (|a#52#2#0| T@U) (|a#52#3#0| T@U) ) (!  (=> (and (= (type |a#52#2#0|) DatatypeTypeType) (= (type |a#52#3#0|) DatatypeTypeType)) (= (|#AsyncDisk.DiskOp.ReqWrite2Op| (LitInt |a#52#0#0@@0|) (LitInt |a#52#1#0@@0|) (Lit |a#52#2#0|) (Lit |a#52#3#0|)) (Lit (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#52#0#0@@0| |a#52#1#0@@0| |a#52#2#0| |a#52#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2722| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| (LitInt |a#52#0#0@@0|) (LitInt |a#52#1#0@@0|) (Lit |a#52#2#0|) (Lit |a#52#3#0|))) )))
(assert (forall ((|a#53#0#0@@0| Int) (|a#53#1#0@@0| Int) (|a#53#2#0| T@U) (|a#53#3#0| T@U) ) (!  (=> (and (= (type |a#53#2#0|) DatatypeTypeType) (= (type |a#53#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.id1 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#53#0#0@@0| |a#53#1#0@@0| |a#53#2#0| |a#53#3#0|)) |a#53#0#0@@0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2723| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#53#0#0@@0| |a#53#1#0@@0| |a#53#2#0| |a#53#3#0|)) )))
(assert (forall ((|a#54#0#0@@0| Int) (|a#54#1#0@@0| Int) (|a#54#2#0| T@U) (|a#54#3#0| T@U) ) (!  (=> (and (= (type |a#54#2#0|) DatatypeTypeType) (= (type |a#54#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.id2 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#54#0#0@@0| |a#54#1#0@@0| |a#54#2#0| |a#54#3#0|)) |a#54#1#0@@0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2724| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#54#0#0@@0| |a#54#1#0@@0| |a#54#2#0| |a#54#3#0|)) )))
(assert (forall ((|a#55#0#0@@0| Int) (|a#55#1#0@@0| Int) (|a#55#2#0| T@U) (|a#55#3#0| T@U) ) (!  (=> (and (= (type |a#55#2#0|) DatatypeTypeType) (= (type |a#55#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.reqWrite1 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#55#0#0@@0| |a#55#1#0@@0| |a#55#2#0| |a#55#3#0|)) |a#55#2#0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2725| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#55#0#0@@0| |a#55#1#0@@0| |a#55#2#0| |a#55#3#0|)) )))
(assert (forall ((|a#56#0#0@@0| Int) (|a#56#1#0@@0| Int) (|a#56#2#0| T@U) (|a#56#3#0| T@U) ) (!  (=> (and (= (type |a#56#2#0|) DatatypeTypeType) (= (type |a#56#3#0|) DatatypeTypeType)) (< (DtRank |a#56#2#0|) (DtRank (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#56#0#0@@0| |a#56#1#0@@0| |a#56#2#0| |a#56#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2726| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#56#0#0@@0| |a#56#1#0@@0| |a#56#2#0| |a#56#3#0|)) )))
(assert (forall ((|a#57#0#0@@0| Int) (|a#57#1#0@@0| Int) (|a#57#2#0| T@U) (|a#57#3#0| T@U) ) (!  (=> (and (= (type |a#57#2#0|) DatatypeTypeType) (= (type |a#57#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.reqWrite2 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#57#0#0@@0| |a#57#1#0@@0| |a#57#2#0| |a#57#3#0|)) |a#57#3#0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2727| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#57#0#0@@0| |a#57#1#0@@0| |a#57#2#0| |a#57#3#0|)) )))
(assert (forall ((|a#58#0#0@@0| Int) (|a#58#1#0@@0| Int) (|a#58#2#0| T@U) (|a#58#3#0| T@U) ) (!  (=> (and (= (type |a#58#2#0|) DatatypeTypeType) (= (type |a#58#3#0|) DatatypeTypeType)) (< (DtRank |a#58#3#0|) (DtRank (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#58#0#0@@0| |a#58#1#0@@0| |a#58#2#0| |a#58#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2728| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#58#0#0@@0| |a#58#1#0@@0| |a#58#2#0| |a#58#3#0|)) )))
(assert (forall ((arg0@@575 Int) (arg1@@278 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.RespReadOp| arg0@@575 arg1@@278)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.RespReadOp| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| arg0@@575 arg1@@278)) )))
(assert (forall ((|a#59#0#0@@0| Int) (|a#59#1#0@@0| T@U) ) (!  (=> (= (type |a#59#1#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.RespReadOp| |a#59#0#0@@0| |a#59#1#0@@0|)) |##AsyncDisk.DiskOp.RespReadOp|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2729| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#59#0#0@@0| |a#59#1#0@@0|)) )))
(assert (forall ((d@@148 T@U) ) (!  (=> (= (type d@@148) DatatypeTypeType) (= (AsyncDisk.DiskOp.RespReadOp_q d@@148) (= (DatatypeCtorId d@@148) |##AsyncDisk.DiskOp.RespReadOp|))) :qid |unknown.0:0| :skolemid |2730| :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@148)) )))
(assert (forall ((d@@149 T@U) ) (!  (=> (and (= (type d@@149) DatatypeTypeType) (AsyncDisk.DiskOp.RespReadOp_q d@@149)) (exists ((|a#60#0#0@@0| Int) (|a#60#1#0@@0| T@U) ) (!  (and (= (type |a#60#1#0@@0|) DatatypeTypeType) (= d@@149 (|#AsyncDisk.DiskOp.RespReadOp| |a#60#0#0@@0| |a#60#1#0@@0|))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2731| :no-pattern (type |a#60#1#0@@0|) :no-pattern (U_2_int |a#60#1#0@@0|) :no-pattern (U_2_bool |a#60#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2732| :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@149)) )))
(assert (forall ((|a#61#0#0@@0| Int) (|a#61#1#0@@0| T@U) ) (!  (=> (= (type |a#61#1#0@@0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.RespReadOp| |a#61#0#0@@0| |a#61#1#0@@0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#61#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#61#1#0@@0| Tclass.AsyncDisk.RespRead)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2733| :pattern ( ($Is (|#AsyncDisk.DiskOp.RespReadOp| |a#61#0#0@@0| |a#61#1#0@@0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#62#0#0@@0| Int) (|a#62#1#0@@0| T@U) ($h@@158 T@U) ) (!  (=> (and (and (= (type |a#62#1#0@@0|) DatatypeTypeType) (= (type $h@@158) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@158)) (= ($IsAlloc (|#AsyncDisk.DiskOp.RespReadOp| |a#62#0#0@@0| |a#62#1#0@@0|) Tclass.AsyncDisk.DiskOp $h@@158)  (and ($IsAlloc (int_2_U |a#62#0#0@@0|) Tclass.NativeTypes.uint64 $h@@158) ($IsAlloc |a#62#1#0@@0| Tclass.AsyncDisk.RespRead $h@@158)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2734| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.RespReadOp| |a#62#0#0@@0| |a#62#1#0@@0|) Tclass.AsyncDisk.DiskOp $h@@158)) )))
(assert (forall ((d@@150 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@150) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (AsyncDisk.DiskOp.RespReadOp_q d@@150) ($IsAlloc d@@150 Tclass.AsyncDisk.DiskOp $h@@159)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@150)) Tclass.NativeTypes.uint64 $h@@159)) :qid |unknown.0:0| :skolemid |2735| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@150)) Tclass.NativeTypes.uint64 $h@@159)) )))
(assert (forall ((arg0@@576 T@U) ) (! (= (type (AsyncDisk.DiskOp.respRead arg0@@576)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.respRead| :pattern ( (AsyncDisk.DiskOp.respRead arg0@@576)) )))
(assert (forall ((d@@151 T@U) ($h@@160 T@U) ) (!  (=> (and (and (= (type d@@151) DatatypeTypeType) (= (type $h@@160) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@160) (and (AsyncDisk.DiskOp.RespReadOp_q d@@151) ($IsAlloc d@@151 Tclass.AsyncDisk.DiskOp $h@@160)))) ($IsAlloc (AsyncDisk.DiskOp.respRead d@@151) Tclass.AsyncDisk.RespRead $h@@160)) :qid |unknown.0:0| :skolemid |2736| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.respRead d@@151) Tclass.AsyncDisk.RespRead $h@@160)) )))
(assert (forall ((|a#63#0#0| Int) (|a#63#1#0| T@U) ) (!  (=> (= (type |a#63#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.RespReadOp| (LitInt |a#63#0#0|) (Lit |a#63#1#0|)) (Lit (|#AsyncDisk.DiskOp.RespReadOp| |a#63#0#0| |a#63#1#0|)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2737| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| (LitInt |a#63#0#0|) (Lit |a#63#1#0|))) )))
(assert (forall ((|a#64#0#0| Int) (|a#64#1#0| T@U) ) (!  (=> (= (type |a#64#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.RespReadOp| |a#64#0#0| |a#64#1#0|)) |a#64#0#0|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2738| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#64#0#0| |a#64#1#0|)) )))
(assert (forall ((|a#65#0#0| Int) (|a#65#1#0| T@U) ) (!  (=> (= (type |a#65#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.respRead (|#AsyncDisk.DiskOp.RespReadOp| |a#65#0#0| |a#65#1#0|)) |a#65#1#0|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2739| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#65#0#0| |a#65#1#0|)) )))
(assert (forall ((|a#66#0#0| Int) (|a#66#1#0| T@U) ) (!  (=> (= (type |a#66#1#0|) DatatypeTypeType) (< (DtRank |a#66#1#0|) (DtRank (|#AsyncDisk.DiskOp.RespReadOp| |a#66#0#0| |a#66#1#0|)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2740| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#66#0#0| |a#66#1#0|)) )))
(assert (forall ((arg0@@577 Int) (arg1@@279 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.RespWriteOp| arg0@@577 arg1@@279)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.RespWriteOp| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| arg0@@577 arg1@@279)) )))
(assert (forall ((|a#67#0#0| Int) (|a#67#1#0| T@U) ) (!  (=> (= (type |a#67#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.RespWriteOp| |a#67#0#0| |a#67#1#0|)) |##AsyncDisk.DiskOp.RespWriteOp|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2741| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#67#0#0| |a#67#1#0|)) )))
(assert (forall ((d@@152 T@U) ) (!  (=> (= (type d@@152) DatatypeTypeType) (= (AsyncDisk.DiskOp.RespWriteOp_q d@@152) (= (DatatypeCtorId d@@152) |##AsyncDisk.DiskOp.RespWriteOp|))) :qid |unknown.0:0| :skolemid |2742| :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@152)) )))
(assert (forall ((d@@153 T@U) ) (!  (=> (and (= (type d@@153) DatatypeTypeType) (AsyncDisk.DiskOp.RespWriteOp_q d@@153)) (exists ((|a#68#0#0| Int) (|a#68#1#0| T@U) ) (!  (and (= (type |a#68#1#0|) DatatypeTypeType) (= d@@153 (|#AsyncDisk.DiskOp.RespWriteOp| |a#68#0#0| |a#68#1#0|))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2743| :no-pattern (type |a#68#1#0|) :no-pattern (U_2_int |a#68#1#0|) :no-pattern (U_2_bool |a#68#1#0|) ))) :qid |unknown.0:0| :skolemid |2744| :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@153)) )))
(assert (forall ((|a#69#0#0| Int) (|a#69#1#0| T@U) ) (!  (=> (= (type |a#69#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.RespWriteOp| |a#69#0#0| |a#69#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#69#0#0|) Tclass.NativeTypes.uint64) ($Is |a#69#1#0| Tclass.AsyncDisk.RespWrite)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2745| :pattern ( ($Is (|#AsyncDisk.DiskOp.RespWriteOp| |a#69#0#0| |a#69#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#70#0#0| Int) (|a#70#1#0| T@U) ($h@@161 T@U) ) (!  (=> (and (and (= (type |a#70#1#0|) DatatypeTypeType) (= (type $h@@161) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@161)) (= ($IsAlloc (|#AsyncDisk.DiskOp.RespWriteOp| |a#70#0#0| |a#70#1#0|) Tclass.AsyncDisk.DiskOp $h@@161)  (and ($IsAlloc (int_2_U |a#70#0#0|) Tclass.NativeTypes.uint64 $h@@161) ($IsAlloc |a#70#1#0| Tclass.AsyncDisk.RespWrite $h@@161)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2746| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.RespWriteOp| |a#70#0#0| |a#70#1#0|) Tclass.AsyncDisk.DiskOp $h@@161)) )))
(assert (forall ((d@@154 T@U) ($h@@162 T@U) ) (!  (=> (and (and (= (type d@@154) DatatypeTypeType) (= (type $h@@162) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@162) (and (AsyncDisk.DiskOp.RespWriteOp_q d@@154) ($IsAlloc d@@154 Tclass.AsyncDisk.DiskOp $h@@162)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@154)) Tclass.NativeTypes.uint64 $h@@162)) :qid |unknown.0:0| :skolemid |2747| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@154)) Tclass.NativeTypes.uint64 $h@@162)) )))
(assert (forall ((arg0@@578 T@U) ) (! (= (type (AsyncDisk.DiskOp.respWrite arg0@@578)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.respWrite| :pattern ( (AsyncDisk.DiskOp.respWrite arg0@@578)) )))
(assert (forall ((d@@155 T@U) ($h@@163 T@U) ) (!  (=> (and (and (= (type d@@155) DatatypeTypeType) (= (type $h@@163) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@163) (and (AsyncDisk.DiskOp.RespWriteOp_q d@@155) ($IsAlloc d@@155 Tclass.AsyncDisk.DiskOp $h@@163)))) ($IsAlloc (AsyncDisk.DiskOp.respWrite d@@155) Tclass.AsyncDisk.RespWrite $h@@163)) :qid |unknown.0:0| :skolemid |2748| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.respWrite d@@155) Tclass.AsyncDisk.RespWrite $h@@163)) )))
(assert (forall ((|a#71#0#0| Int) (|a#71#1#0| T@U) ) (!  (=> (= (type |a#71#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.RespWriteOp| (LitInt |a#71#0#0|) (Lit |a#71#1#0|)) (Lit (|#AsyncDisk.DiskOp.RespWriteOp| |a#71#0#0| |a#71#1#0|)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2749| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| (LitInt |a#71#0#0|) (Lit |a#71#1#0|))) )))
(assert (forall ((|a#72#0#0| Int) (|a#72#1#0| T@U) ) (!  (=> (= (type |a#72#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.RespWriteOp| |a#72#0#0| |a#72#1#0|)) |a#72#0#0|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2750| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#72#0#0| |a#72#1#0|)) )))
(assert (forall ((|a#73#0#0| Int) (|a#73#1#0| T@U) ) (!  (=> (= (type |a#73#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.respWrite (|#AsyncDisk.DiskOp.RespWriteOp| |a#73#0#0| |a#73#1#0|)) |a#73#1#0|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2751| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#73#0#0| |a#73#1#0|)) )))
(assert (forall ((|a#74#0#0| Int) (|a#74#1#0| T@U) ) (!  (=> (= (type |a#74#1#0|) DatatypeTypeType) (< (DtRank |a#74#1#0|) (DtRank (|#AsyncDisk.DiskOp.RespWriteOp| |a#74#0#0| |a#74#1#0|)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2752| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#74#0#0| |a#74#1#0|)) )))
(assert (= (type |#AsyncDisk.DiskOp.NoDiskOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.DiskOp.NoDiskOp|) |##AsyncDisk.DiskOp.NoDiskOp|))
(assert (forall ((d@@156 T@U) ) (!  (=> (= (type d@@156) DatatypeTypeType) (= (AsyncDisk.DiskOp.NoDiskOp_q d@@156) (= (DatatypeCtorId d@@156) |##AsyncDisk.DiskOp.NoDiskOp|))) :qid |unknown.0:0| :skolemid |2753| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@156)) )))
(assert (forall ((d@@157 T@U) ) (!  (=> (and (= (type d@@157) DatatypeTypeType) (AsyncDisk.DiskOp.NoDiskOp_q d@@157)) (= d@@157 |#AsyncDisk.DiskOp.NoDiskOp|)) :qid |unknown.0:0| :skolemid |2754| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@157)) )))
(assert ($Is |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp))
(assert (forall (($h@@164 T@U) ) (!  (=> (and (= (type $h@@164) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@164)) ($IsAlloc |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp $h@@164)) :qid |DafnyPreludebpl.545:12| :skolemid |2755| :pattern ( ($IsAlloc |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp $h@@164)) )))
(assert (= |#AsyncDisk.DiskOp.NoDiskOp| (Lit |#AsyncDisk.DiskOp.NoDiskOp|)))
(assert (forall ((d@@158 T@U) ) (!  (=> (and (= (type d@@158) DatatypeTypeType) (|$IsA#AsyncDisk.DiskOp| d@@158)) (or (or (or (or (or (AsyncDisk.DiskOp.ReqReadOp_q d@@158) (AsyncDisk.DiskOp.ReqWriteOp_q d@@158)) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@158)) (AsyncDisk.DiskOp.RespReadOp_q d@@158)) (AsyncDisk.DiskOp.RespWriteOp_q d@@158)) (AsyncDisk.DiskOp.NoDiskOp_q d@@158))) :qid |unknown.0:0| :skolemid |2756| :pattern ( (|$IsA#AsyncDisk.DiskOp| d@@158)) )))
(assert (forall ((d@@159 T@U) ) (!  (=> (and (= (type d@@159) DatatypeTypeType) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) (or (or (or (or (or (AsyncDisk.DiskOp.ReqReadOp_q d@@159) (AsyncDisk.DiskOp.ReqWriteOp_q d@@159)) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@159)) (AsyncDisk.DiskOp.RespReadOp_q d@@159)) (AsyncDisk.DiskOp.RespWriteOp_q d@@159)) (AsyncDisk.DiskOp.NoDiskOp_q d@@159))) :qid |unknown.0:0| :skolemid |2757| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@159) ($Is d@@159 Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((a@@171 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@171) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqReadOp_q a@@171) (AsyncDisk.DiskOp.ReqReadOp_q b@@108))) (= (|AsyncDisk.DiskOp#Equal| a@@171 b@@108)  (and (= (AsyncDisk.DiskOp.id a@@171) (AsyncDisk.DiskOp.id b@@108)) (|AsyncDisk.ReqRead#Equal| (AsyncDisk.DiskOp.reqRead a@@171) (AsyncDisk.DiskOp.reqRead b@@108))))) :qid |unknown.0:0| :skolemid |2758| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@171 b@@108) (AsyncDisk.DiskOp.ReqReadOp_q a@@171)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@171 b@@108) (AsyncDisk.DiskOp.ReqReadOp_q b@@108)) )))
(assert (forall ((a@@172 T@U) (b@@109 T@U) ) (!  (=> (and (and (= (type a@@172) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqWriteOp_q a@@172) (AsyncDisk.DiskOp.ReqWriteOp_q b@@109))) (= (|AsyncDisk.DiskOp#Equal| a@@172 b@@109)  (and (= (AsyncDisk.DiskOp.id a@@172) (AsyncDisk.DiskOp.id b@@109)) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite a@@172) (AsyncDisk.DiskOp.reqWrite b@@109))))) :qid |unknown.0:0| :skolemid |2759| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@172 b@@109) (AsyncDisk.DiskOp.ReqWriteOp_q a@@172)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@172 b@@109) (AsyncDisk.DiskOp.ReqWriteOp_q b@@109)) )))
(assert (forall ((a@@173 T@U) (b@@110 T@U) ) (!  (=> (and (and (= (type a@@173) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqWrite2Op_q a@@173) (AsyncDisk.DiskOp.ReqWrite2Op_q b@@110))) (= (|AsyncDisk.DiskOp#Equal| a@@173 b@@110)  (and (and (and (= (AsyncDisk.DiskOp.id1 a@@173) (AsyncDisk.DiskOp.id1 b@@110)) (= (AsyncDisk.DiskOp.id2 a@@173) (AsyncDisk.DiskOp.id2 b@@110))) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite1 a@@173) (AsyncDisk.DiskOp.reqWrite1 b@@110))) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite2 a@@173) (AsyncDisk.DiskOp.reqWrite2 b@@110))))) :qid |unknown.0:0| :skolemid |2760| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@173 b@@110) (AsyncDisk.DiskOp.ReqWrite2Op_q a@@173)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@173 b@@110) (AsyncDisk.DiskOp.ReqWrite2Op_q b@@110)) )))
(assert (forall ((a@@174 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (AsyncDisk.DiskOp.RespReadOp_q a@@174) (AsyncDisk.DiskOp.RespReadOp_q b@@111))) (= (|AsyncDisk.DiskOp#Equal| a@@174 b@@111)  (and (= (AsyncDisk.DiskOp.id a@@174) (AsyncDisk.DiskOp.id b@@111)) (|AsyncDisk.RespRead#Equal| (AsyncDisk.DiskOp.respRead a@@174) (AsyncDisk.DiskOp.respRead b@@111))))) :qid |unknown.0:0| :skolemid |2761| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@174 b@@111) (AsyncDisk.DiskOp.RespReadOp_q a@@174)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@174 b@@111) (AsyncDisk.DiskOp.RespReadOp_q b@@111)) )))
(assert (forall ((a@@175 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (AsyncDisk.DiskOp.RespWriteOp_q a@@175) (AsyncDisk.DiskOp.RespWriteOp_q b@@112))) (= (|AsyncDisk.DiskOp#Equal| a@@175 b@@112)  (and (= (AsyncDisk.DiskOp.id a@@175) (AsyncDisk.DiskOp.id b@@112)) (|AsyncDisk.RespWrite#Equal| (AsyncDisk.DiskOp.respWrite a@@175) (AsyncDisk.DiskOp.respWrite b@@112))))) :qid |unknown.0:0| :skolemid |2762| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@175 b@@112) (AsyncDisk.DiskOp.RespWriteOp_q a@@175)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@175 b@@112) (AsyncDisk.DiskOp.RespWriteOp_q b@@112)) )))
(assert (forall ((a@@176 T@U) (b@@113 T@U) ) (!  (=> (and (and (= (type a@@176) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (and (AsyncDisk.DiskOp.NoDiskOp_q a@@176) (AsyncDisk.DiskOp.NoDiskOp_q b@@113))) (= (|AsyncDisk.DiskOp#Equal| a@@176 b@@113) true)) :qid |unknown.0:0| :skolemid |2763| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@176 b@@113) (AsyncDisk.DiskOp.NoDiskOp_q a@@176)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@176 b@@113) (AsyncDisk.DiskOp.NoDiskOp_q b@@113)) )))
(assert (forall ((a@@177 T@U) (b@@114 T@U) ) (!  (=> (and (= (type a@@177) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) (= (|AsyncDisk.DiskOp#Equal| a@@177 b@@114) (= a@@177 b@@114))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@177 b@@114)) )))
(assert (forall ((arg0@@579 T@U) (arg1@@280 T@U) (arg2@@161 T@U) (arg3@@110 T@U) (arg4@@80 T@U) ) (! (= (type (|#AsyncDisk.Variables.Variables| arg0@@579 arg1@@280 arg2@@161 arg3@@110 arg4@@80)) DatatypeTypeType) :qid |funType:#AsyncDisk.Variables.Variables| :pattern ( (|#AsyncDisk.Variables.Variables| arg0@@579 arg1@@280 arg2@@161 arg3@@110 arg4@@80)) )))
(assert (forall ((|a#80#0#0@@0| T@U) (|a#80#1#0| T@U) (|a#80#2#0| T@U) (|a#80#3#0| T@U) (|a#80#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#80#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#80#1#0|) (MapType BoxType BoxType))) (= (type |a#80#2#0|) (MapType BoxType BoxType))) (= (type |a#80#3#0|) (MapType BoxType BoxType))) (= (type |a#80#4#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#AsyncDisk.Variables.Variables| |a#80#0#0@@0| |a#80#1#0| |a#80#2#0| |a#80#3#0| |a#80#4#0|)) |##AsyncDisk.Variables.Variables|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2765| :pattern ( (|#AsyncDisk.Variables.Variables| |a#80#0#0@@0| |a#80#1#0| |a#80#2#0| |a#80#3#0| |a#80#4#0|)) )))
(assert (forall ((d@@160 T@U) ) (!  (=> (= (type d@@160) DatatypeTypeType) (= (AsyncDisk.Variables.Variables_q d@@160) (= (DatatypeCtorId d@@160) |##AsyncDisk.Variables.Variables|))) :qid |unknown.0:0| :skolemid |2766| :pattern ( (AsyncDisk.Variables.Variables_q d@@160)) )))
(assert (forall ((d@@161 T@U) ) (!  (=> (and (= (type d@@161) DatatypeTypeType) (AsyncDisk.Variables.Variables_q d@@161)) (exists ((|a#81#0#0@@0| T@U) (|a#81#1#0| T@U) (|a#81#2#0| T@U) (|a#81#3#0| T@U) (|a#81#4#0| T@U) ) (!  (and (and (and (and (and (= (type |a#81#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#81#1#0|) (MapType BoxType BoxType))) (= (type |a#81#2#0|) (MapType BoxType BoxType))) (= (type |a#81#3#0|) (MapType BoxType BoxType))) (= (type |a#81#4#0|) (SeqType BoxType))) (= d@@161 (|#AsyncDisk.Variables.Variables| |a#81#0#0@@0| |a#81#1#0| |a#81#2#0| |a#81#3#0| |a#81#4#0|))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2767| :no-pattern (type |a#81#0#0@@0|) :no-pattern (type |a#81#1#0|) :no-pattern (type |a#81#2#0|) :no-pattern (type |a#81#3#0|) :no-pattern (type |a#81#4#0|) :no-pattern (U_2_int |a#81#0#0@@0|) :no-pattern (U_2_bool |a#81#0#0@@0|) :no-pattern (U_2_int |a#81#1#0|) :no-pattern (U_2_bool |a#81#1#0|) :no-pattern (U_2_int |a#81#2#0|) :no-pattern (U_2_bool |a#81#2#0|) :no-pattern (U_2_int |a#81#3#0|) :no-pattern (U_2_bool |a#81#3#0|) :no-pattern (U_2_int |a#81#4#0|) :no-pattern (U_2_bool |a#81#4#0|) ))) :qid |unknown.0:0| :skolemid |2768| :pattern ( (AsyncDisk.Variables.Variables_q d@@161)) )))
(assert (= (type Tclass.AsyncDisk.Variables) TyType))
(assert (= (Tag Tclass.AsyncDisk.Variables) Tagclass.AsyncDisk.Variables))
(assert (= (TagFamily Tclass.AsyncDisk.Variables) tytagFamily$Variables))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.AsyncDisk.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@166)) bx@@166) ($Is ($Unbox DatatypeTypeType bx@@166) Tclass.AsyncDisk.Variables))) :qid |unknown.0:0| :skolemid |2769| :pattern ( ($IsBox bx@@166 Tclass.AsyncDisk.Variables)) )))
(assert (forall ((|a#82#0#0@@0| T@U) (|a#82#1#0| T@U) (|a#82#2#0| T@U) (|a#82#3#0| T@U) (|a#82#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#82#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#82#1#0|) (MapType BoxType BoxType))) (= (type |a#82#2#0|) (MapType BoxType BoxType))) (= (type |a#82#3#0|) (MapType BoxType BoxType))) (= (type |a#82#4#0|) (SeqType BoxType))) (= ($Is (|#AsyncDisk.Variables.Variables| |a#82#0#0@@0| |a#82#1#0| |a#82#2#0| |a#82#3#0| |a#82#4#0|) Tclass.AsyncDisk.Variables)  (and (and (and (and ($Is |a#82#0#0@@0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead)) ($Is |a#82#1#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite))) ($Is |a#82#2#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead))) ($Is |a#82#3#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite))) ($Is |a#82#4#0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2770| :pattern ( ($Is (|#AsyncDisk.Variables.Variables| |a#82#0#0@@0| |a#82#1#0| |a#82#2#0| |a#82#3#0| |a#82#4#0|) Tclass.AsyncDisk.Variables)) )))
(assert (forall ((|a#83#0#0@@0| T@U) (|a#83#1#0| T@U) (|a#83#2#0| T@U) (|a#83#3#0| T@U) (|a#83#4#0| T@U) ($h@@165 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#83#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#83#1#0|) (MapType BoxType BoxType))) (= (type |a#83#2#0|) (MapType BoxType BoxType))) (= (type |a#83#3#0|) (MapType BoxType BoxType))) (= (type |a#83#4#0|) (SeqType BoxType))) (= (type $h@@165) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@165)) (= ($IsAlloc (|#AsyncDisk.Variables.Variables| |a#83#0#0@@0| |a#83#1#0| |a#83#2#0| |a#83#3#0| |a#83#4#0|) Tclass.AsyncDisk.Variables $h@@165)  (and (and (and (and ($IsAlloc |a#83#0#0@@0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@165) ($IsAlloc |a#83#1#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@165)) ($IsAlloc |a#83#2#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@165)) ($IsAlloc |a#83#3#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@165)) ($IsAlloc |a#83#4#0| (TSeq Tclass.NativeTypes.byte) $h@@165)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2771| :pattern ( ($IsAlloc (|#AsyncDisk.Variables.Variables| |a#83#0#0@@0| |a#83#1#0| |a#83#2#0| |a#83#3#0| |a#83#4#0|) Tclass.AsyncDisk.Variables $h@@165)) )))
(assert (forall ((arg0@@580 T@U) ) (! (= (type (AsyncDisk.Variables.reqReads arg0@@580)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.reqReads| :pattern ( (AsyncDisk.Variables.reqReads arg0@@580)) )))
(assert (forall ((d@@162 T@U) ($h@@166 T@U) ) (!  (=> (and (and (= (type d@@162) DatatypeTypeType) (= (type $h@@166) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@166) (and (AsyncDisk.Variables.Variables_q d@@162) ($IsAlloc d@@162 Tclass.AsyncDisk.Variables $h@@166)))) ($IsAlloc (AsyncDisk.Variables.reqReads d@@162) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@166)) :qid |unknown.0:0| :skolemid |2772| :pattern ( ($IsAlloc (AsyncDisk.Variables.reqReads d@@162) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@166)) )))
(assert (forall ((arg0@@581 T@U) ) (! (= (type (AsyncDisk.Variables.reqWrites arg0@@581)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.reqWrites| :pattern ( (AsyncDisk.Variables.reqWrites arg0@@581)) )))
(assert (forall ((d@@163 T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type d@@163) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@167) (and (AsyncDisk.Variables.Variables_q d@@163) ($IsAlloc d@@163 Tclass.AsyncDisk.Variables $h@@167)))) ($IsAlloc (AsyncDisk.Variables.reqWrites d@@163) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@167)) :qid |unknown.0:0| :skolemid |2773| :pattern ( ($IsAlloc (AsyncDisk.Variables.reqWrites d@@163) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@167)) )))
(assert (forall ((arg0@@582 T@U) ) (! (= (type (AsyncDisk.Variables.respReads arg0@@582)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.respReads| :pattern ( (AsyncDisk.Variables.respReads arg0@@582)) )))
(assert (forall ((d@@164 T@U) ($h@@168 T@U) ) (!  (=> (and (and (= (type d@@164) DatatypeTypeType) (= (type $h@@168) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@168) (and (AsyncDisk.Variables.Variables_q d@@164) ($IsAlloc d@@164 Tclass.AsyncDisk.Variables $h@@168)))) ($IsAlloc (AsyncDisk.Variables.respReads d@@164) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@168)) :qid |unknown.0:0| :skolemid |2774| :pattern ( ($IsAlloc (AsyncDisk.Variables.respReads d@@164) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@168)) )))
(assert (forall ((arg0@@583 T@U) ) (! (= (type (AsyncDisk.Variables.respWrites arg0@@583)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.respWrites| :pattern ( (AsyncDisk.Variables.respWrites arg0@@583)) )))
(assert (forall ((d@@165 T@U) ($h@@169 T@U) ) (!  (=> (and (and (= (type d@@165) DatatypeTypeType) (= (type $h@@169) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@169) (and (AsyncDisk.Variables.Variables_q d@@165) ($IsAlloc d@@165 Tclass.AsyncDisk.Variables $h@@169)))) ($IsAlloc (AsyncDisk.Variables.respWrites d@@165) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@169)) :qid |unknown.0:0| :skolemid |2775| :pattern ( ($IsAlloc (AsyncDisk.Variables.respWrites d@@165) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@169)) )))
(assert (forall ((arg0@@584 T@U) ) (! (= (type (AsyncDisk.Variables.contents arg0@@584)) (SeqType BoxType)) :qid |funType:AsyncDisk.Variables.contents| :pattern ( (AsyncDisk.Variables.contents arg0@@584)) )))
(assert (forall ((d@@166 T@U) ($h@@170 T@U) ) (!  (=> (and (and (= (type d@@166) DatatypeTypeType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@170) (and (AsyncDisk.Variables.Variables_q d@@166) ($IsAlloc d@@166 Tclass.AsyncDisk.Variables $h@@170)))) ($IsAlloc (AsyncDisk.Variables.contents d@@166) (TSeq Tclass.NativeTypes.byte) $h@@170)) :qid |unknown.0:0| :skolemid |2776| :pattern ( ($IsAlloc (AsyncDisk.Variables.contents d@@166) (TSeq Tclass.NativeTypes.byte) $h@@170)) )))
(assert (forall ((|a#84#0#0@@0| T@U) (|a#84#1#0| T@U) (|a#84#2#0| T@U) (|a#84#3#0| T@U) (|a#84#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#84#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#84#1#0|) (MapType BoxType BoxType))) (= (type |a#84#2#0|) (MapType BoxType BoxType))) (= (type |a#84#3#0|) (MapType BoxType BoxType))) (= (type |a#84#4#0|) (SeqType BoxType))) (= (|#AsyncDisk.Variables.Variables| (Lit |a#84#0#0@@0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|) (Lit |a#84#3#0|) (Lit |a#84#4#0|)) (Lit (|#AsyncDisk.Variables.Variables| |a#84#0#0@@0| |a#84#1#0| |a#84#2#0| |a#84#3#0| |a#84#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2777| :pattern ( (|#AsyncDisk.Variables.Variables| (Lit |a#84#0#0@@0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|) (Lit |a#84#3#0|) (Lit |a#84#4#0|))) )))
(assert (forall ((|a#85#0#0@@0| T@U) (|a#85#1#0| T@U) (|a#85#2#0| T@U) (|a#85#3#0| T@U) (|a#85#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#85#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#85#1#0|) (MapType BoxType BoxType))) (= (type |a#85#2#0|) (MapType BoxType BoxType))) (= (type |a#85#3#0|) (MapType BoxType BoxType))) (= (type |a#85#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.reqReads (|#AsyncDisk.Variables.Variables| |a#85#0#0@@0| |a#85#1#0| |a#85#2#0| |a#85#3#0| |a#85#4#0|)) |a#85#0#0@@0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2778| :pattern ( (|#AsyncDisk.Variables.Variables| |a#85#0#0@@0| |a#85#1#0| |a#85#2#0| |a#85#3#0| |a#85#4#0|)) )))
(assert (forall ((|a#86#0#0@@0| T@U) (|a#86#1#0| T@U) (|a#86#2#0| T@U) (|a#86#3#0| T@U) (|a#86#4#0| T@U) (d@@167 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#86#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#86#1#0|) (MapType BoxType BoxType))) (= (type |a#86#2#0|) (MapType BoxType BoxType))) (= (type |a#86#3#0|) (MapType BoxType BoxType))) (= (type |a#86#4#0|) (SeqType BoxType))) (= (type d@@167) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#86#0#0@@0|) ($Box d@@167)))) (< (DtRank d@@167) (DtRank (|#AsyncDisk.Variables.Variables| |a#86#0#0@@0| |a#86#1#0| |a#86#2#0| |a#86#3#0| |a#86#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2779| :pattern ( (MapType0Select (|Map#Domain| |a#86#0#0@@0|) ($Box d@@167)) (|#AsyncDisk.Variables.Variables| |a#86#0#0@@0| |a#86#1#0| |a#86#2#0| |a#86#3#0| |a#86#4#0|)) )))
(assert (forall ((|a#87#0#0@@0| T@U) (|a#87#1#0| T@U) (|a#87#2#0| T@U) (|a#87#3#0| T@U) (|a#87#4#0| T@U) (bx@@167 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#87#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#87#1#0|) (MapType BoxType BoxType))) (= (type |a#87#2#0|) (MapType BoxType BoxType))) (= (type |a#87#3#0|) (MapType BoxType BoxType))) (= (type |a#87#4#0|) (SeqType BoxType))) (= (type bx@@167) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#87#0#0@@0|) bx@@167))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#87#0#0@@0|) bx@@167))) (DtRank (|#AsyncDisk.Variables.Variables| |a#87#0#0@@0| |a#87#1#0| |a#87#2#0| |a#87#3#0| |a#87#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2780| :pattern ( (MapType0Select (|Map#Domain| |a#87#0#0@@0|) bx@@167) (|#AsyncDisk.Variables.Variables| |a#87#0#0@@0| |a#87#1#0| |a#87#2#0| |a#87#3#0| |a#87#4#0|)) )))
(assert (forall ((|a#88#0#0@@0| T@U) (|a#88#1#0| T@U) (|a#88#2#0| T@U) (|a#88#3#0| T@U) (|a#88#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#88#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#88#1#0|) (MapType BoxType BoxType))) (= (type |a#88#2#0|) (MapType BoxType BoxType))) (= (type |a#88#3#0|) (MapType BoxType BoxType))) (= (type |a#88#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.reqWrites (|#AsyncDisk.Variables.Variables| |a#88#0#0@@0| |a#88#1#0| |a#88#2#0| |a#88#3#0| |a#88#4#0|)) |a#88#1#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2781| :pattern ( (|#AsyncDisk.Variables.Variables| |a#88#0#0@@0| |a#88#1#0| |a#88#2#0| |a#88#3#0| |a#88#4#0|)) )))
(assert (forall ((|a#89#0#0@@0| T@U) (|a#89#1#0| T@U) (|a#89#2#0| T@U) (|a#89#3#0| T@U) (|a#89#4#0| T@U) (d@@168 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#89#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#89#1#0|) (MapType BoxType BoxType))) (= (type |a#89#2#0|) (MapType BoxType BoxType))) (= (type |a#89#3#0|) (MapType BoxType BoxType))) (= (type |a#89#4#0|) (SeqType BoxType))) (= (type d@@168) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#89#1#0|) ($Box d@@168)))) (< (DtRank d@@168) (DtRank (|#AsyncDisk.Variables.Variables| |a#89#0#0@@0| |a#89#1#0| |a#89#2#0| |a#89#3#0| |a#89#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2782| :pattern ( (MapType0Select (|Map#Domain| |a#89#1#0|) ($Box d@@168)) (|#AsyncDisk.Variables.Variables| |a#89#0#0@@0| |a#89#1#0| |a#89#2#0| |a#89#3#0| |a#89#4#0|)) )))
(assert (forall ((|a#90#0#0@@0| T@U) (|a#90#1#0@@0| T@U) (|a#90#2#0| T@U) (|a#90#3#0| T@U) (|a#90#4#0| T@U) (bx@@168 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#90#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#90#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#90#2#0|) (MapType BoxType BoxType))) (= (type |a#90#3#0|) (MapType BoxType BoxType))) (= (type |a#90#4#0|) (SeqType BoxType))) (= (type bx@@168) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#90#1#0@@0|) bx@@168))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#90#1#0@@0|) bx@@168))) (DtRank (|#AsyncDisk.Variables.Variables| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0| |a#90#3#0| |a#90#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2783| :pattern ( (MapType0Select (|Map#Domain| |a#90#1#0@@0|) bx@@168) (|#AsyncDisk.Variables.Variables| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0| |a#90#3#0| |a#90#4#0|)) )))
(assert (forall ((|a#91#0#0@@0| T@U) (|a#91#1#0@@0| T@U) (|a#91#2#0| T@U) (|a#91#3#0| T@U) (|a#91#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#91#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#91#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#91#2#0|) (MapType BoxType BoxType))) (= (type |a#91#3#0|) (MapType BoxType BoxType))) (= (type |a#91#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.respReads (|#AsyncDisk.Variables.Variables| |a#91#0#0@@0| |a#91#1#0@@0| |a#91#2#0| |a#91#3#0| |a#91#4#0|)) |a#91#2#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2784| :pattern ( (|#AsyncDisk.Variables.Variables| |a#91#0#0@@0| |a#91#1#0@@0| |a#91#2#0| |a#91#3#0| |a#91#4#0|)) )))
(assert (forall ((|a#92#0#0@@0| T@U) (|a#92#1#0@@0| T@U) (|a#92#2#0| T@U) (|a#92#3#0| T@U) (|a#92#4#0| T@U) (d@@169 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#92#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#92#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#92#2#0|) (MapType BoxType BoxType))) (= (type |a#92#3#0|) (MapType BoxType BoxType))) (= (type |a#92#4#0|) (SeqType BoxType))) (= (type d@@169) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#92#2#0|) ($Box d@@169)))) (< (DtRank d@@169) (DtRank (|#AsyncDisk.Variables.Variables| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0| |a#92#3#0| |a#92#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2785| :pattern ( (MapType0Select (|Map#Domain| |a#92#2#0|) ($Box d@@169)) (|#AsyncDisk.Variables.Variables| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0| |a#92#3#0| |a#92#4#0|)) )))
(assert (forall ((|a#93#0#0@@0| T@U) (|a#93#1#0@@0| T@U) (|a#93#2#0| T@U) (|a#93#3#0| T@U) (|a#93#4#0| T@U) (bx@@169 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#93#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#93#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#93#2#0|) (MapType BoxType BoxType))) (= (type |a#93#3#0|) (MapType BoxType BoxType))) (= (type |a#93#4#0|) (SeqType BoxType))) (= (type bx@@169) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#93#2#0|) bx@@169))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#93#2#0|) bx@@169))) (DtRank (|#AsyncDisk.Variables.Variables| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0| |a#93#3#0| |a#93#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2786| :pattern ( (MapType0Select (|Map#Domain| |a#93#2#0|) bx@@169) (|#AsyncDisk.Variables.Variables| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0| |a#93#3#0| |a#93#4#0|)) )))
(assert (forall ((|a#94#0#0@@0| T@U) (|a#94#1#0@@0| T@U) (|a#94#2#0| T@U) (|a#94#3#0| T@U) (|a#94#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#94#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#94#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#94#2#0|) (MapType BoxType BoxType))) (= (type |a#94#3#0|) (MapType BoxType BoxType))) (= (type |a#94#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.respWrites (|#AsyncDisk.Variables.Variables| |a#94#0#0@@0| |a#94#1#0@@0| |a#94#2#0| |a#94#3#0| |a#94#4#0|)) |a#94#3#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2787| :pattern ( (|#AsyncDisk.Variables.Variables| |a#94#0#0@@0| |a#94#1#0@@0| |a#94#2#0| |a#94#3#0| |a#94#4#0|)) )))
(assert (forall ((|a#95#0#0@@0| T@U) (|a#95#1#0@@0| T@U) (|a#95#2#0| T@U) (|a#95#3#0| T@U) (|a#95#4#0| T@U) (d@@170 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#95#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#95#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#95#2#0|) (MapType BoxType BoxType))) (= (type |a#95#3#0|) (MapType BoxType BoxType))) (= (type |a#95#4#0|) (SeqType BoxType))) (= (type d@@170) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#95#3#0|) ($Box d@@170)))) (< (DtRank d@@170) (DtRank (|#AsyncDisk.Variables.Variables| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0| |a#95#3#0| |a#95#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2788| :pattern ( (MapType0Select (|Map#Domain| |a#95#3#0|) ($Box d@@170)) (|#AsyncDisk.Variables.Variables| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0| |a#95#3#0| |a#95#4#0|)) )))
(assert (forall ((|a#96#0#0@@0| T@U) (|a#96#1#0@@0| T@U) (|a#96#2#0| T@U) (|a#96#3#0| T@U) (|a#96#4#0| T@U) (bx@@170 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#96#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#96#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#96#2#0|) (MapType BoxType BoxType))) (= (type |a#96#3#0|) (MapType BoxType BoxType))) (= (type |a#96#4#0|) (SeqType BoxType))) (= (type bx@@170) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#96#3#0|) bx@@170))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#96#3#0|) bx@@170))) (DtRank (|#AsyncDisk.Variables.Variables| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0| |a#96#3#0| |a#96#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2789| :pattern ( (MapType0Select (|Map#Domain| |a#96#3#0|) bx@@170) (|#AsyncDisk.Variables.Variables| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0| |a#96#3#0| |a#96#4#0|)) )))
(assert (forall ((|a#97#0#0@@0| T@U) (|a#97#1#0@@0| T@U) (|a#97#2#0| T@U) (|a#97#3#0| T@U) (|a#97#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#97#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#97#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#97#2#0|) (MapType BoxType BoxType))) (= (type |a#97#3#0|) (MapType BoxType BoxType))) (= (type |a#97#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.contents (|#AsyncDisk.Variables.Variables| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0| |a#97#3#0| |a#97#4#0|)) |a#97#4#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2790| :pattern ( (|#AsyncDisk.Variables.Variables| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0| |a#97#3#0| |a#97#4#0|)) )))
(assert (forall ((|a#98#0#0@@0| T@U) (|a#98#1#0@@0| T@U) (|a#98#2#0| T@U) (|a#98#3#0| T@U) (|a#98#4#0| T@U) (i@@29 Int) ) (!  (=> (and (and (and (and (and (= (type |a#98#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#98#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#98#2#0|) (MapType BoxType BoxType))) (= (type |a#98#3#0|) (MapType BoxType BoxType))) (= (type |a#98#4#0|) (SeqType BoxType))) (and (<= 0 i@@29) (< i@@29 (|Seq#Length| |a#98#4#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#98#4#0| i@@29))) (DtRank (|#AsyncDisk.Variables.Variables| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0| |a#98#3#0| |a#98#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2791| :pattern ( (|Seq#Index| |a#98#4#0| i@@29) (|#AsyncDisk.Variables.Variables| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0| |a#98#3#0| |a#98#4#0|)) )))
(assert (forall ((|a#99#0#0@@0| T@U) (|a#99#1#0@@0| T@U) (|a#99#2#0| T@U) (|a#99#3#0| T@U) (|a#99#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#99#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#99#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#99#2#0|) (MapType BoxType BoxType))) (= (type |a#99#3#0|) (MapType BoxType BoxType))) (= (type |a#99#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#99#4#0|) (DtRank (|#AsyncDisk.Variables.Variables| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0| |a#99#3#0| |a#99#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2792| :pattern ( (|#AsyncDisk.Variables.Variables| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0| |a#99#3#0| |a#99#4#0|)) )))
(assert (forall ((d@@171 T@U) ) (!  (=> (and (= (type d@@171) DatatypeTypeType) (|$IsA#AsyncDisk.Variables| d@@171)) (AsyncDisk.Variables.Variables_q d@@171)) :qid |unknown.0:0| :skolemid |2793| :pattern ( (|$IsA#AsyncDisk.Variables| d@@171)) )))
(assert (forall ((d@@172 T@U) ) (!  (=> (and (= (type d@@172) DatatypeTypeType) ($Is d@@172 Tclass.AsyncDisk.Variables)) (AsyncDisk.Variables.Variables_q d@@172)) :qid |unknown.0:0| :skolemid |2794| :pattern ( (AsyncDisk.Variables.Variables_q d@@172) ($Is d@@172 Tclass.AsyncDisk.Variables)) )))
(assert (forall ((a@@178 T@U) (b@@115 T@U) ) (!  (=> (and (and (= (type a@@178) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) true) (= (|AsyncDisk.Variables#Equal| a@@178 b@@115)  (and (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads a@@178) (AsyncDisk.Variables.reqReads b@@115)) (|Map#Equal| (AsyncDisk.Variables.reqWrites a@@178) (AsyncDisk.Variables.reqWrites b@@115))) (|Map#Equal| (AsyncDisk.Variables.respReads a@@178) (AsyncDisk.Variables.respReads b@@115))) (|Map#Equal| (AsyncDisk.Variables.respWrites a@@178) (AsyncDisk.Variables.respWrites b@@115))) (|Seq#Equal| (AsyncDisk.Variables.contents a@@178) (AsyncDisk.Variables.contents b@@115))))) :qid |unknown.0:0| :skolemid |2795| :pattern ( (|AsyncDisk.Variables#Equal| a@@178 b@@115)) )))
(assert (forall ((a@@179 T@U) (b@@116 T@U) ) (!  (=> (and (= (type a@@179) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (= (|AsyncDisk.Variables#Equal| a@@179 b@@116) (= a@@179 b@@116))) :qid |unknown.0:0| :skolemid |2796| :pattern ( (|AsyncDisk.Variables#Equal| a@@179 b@@116)) )))
(assert (= (type |#AsyncDisk.Step.RecvReadStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvReadStep|) |##AsyncDisk.Step.RecvReadStep|))
(assert (forall ((d@@173 T@U) ) (!  (=> (= (type d@@173) DatatypeTypeType) (= (AsyncDisk.Step.RecvReadStep_q d@@173) (= (DatatypeCtorId d@@173) |##AsyncDisk.Step.RecvReadStep|))) :qid |unknown.0:0| :skolemid |2797| :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@173)) )))
(assert (forall ((d@@174 T@U) ) (!  (=> (and (= (type d@@174) DatatypeTypeType) (AsyncDisk.Step.RecvReadStep_q d@@174)) (= d@@174 |#AsyncDisk.Step.RecvReadStep|)) :qid |unknown.0:0| :skolemid |2798| :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@174)) )))
(assert (= (type Tclass.AsyncDisk.Step) TyType))
(assert (= (Tag Tclass.AsyncDisk.Step) Tagclass.AsyncDisk.Step))
(assert (= (TagFamily Tclass.AsyncDisk.Step) tytagFamily$Step))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.AsyncDisk.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@171)) bx@@171) ($Is ($Unbox DatatypeTypeType bx@@171) Tclass.AsyncDisk.Step))) :qid |unknown.0:0| :skolemid |2799| :pattern ( ($IsBox bx@@171 Tclass.AsyncDisk.Step)) )))
(assert ($Is |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@171 T@U) ) (!  (=> (and (= (type $h@@171) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@171)) ($IsAlloc |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step $h@@171)) :qid |DafnyPreludebpl.545:12| :skolemid |2800| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step $h@@171)) )))
(assert (= |#AsyncDisk.Step.RecvReadStep| (Lit |#AsyncDisk.Step.RecvReadStep|)))
(assert (= (type |#AsyncDisk.Step.RecvWriteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvWriteStep|) |##AsyncDisk.Step.RecvWriteStep|))
(assert (forall ((d@@175 T@U) ) (!  (=> (= (type d@@175) DatatypeTypeType) (= (AsyncDisk.Step.RecvWriteStep_q d@@175) (= (DatatypeCtorId d@@175) |##AsyncDisk.Step.RecvWriteStep|))) :qid |unknown.0:0| :skolemid |2801| :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@175)) )))
(assert (forall ((d@@176 T@U) ) (!  (=> (and (= (type d@@176) DatatypeTypeType) (AsyncDisk.Step.RecvWriteStep_q d@@176)) (= d@@176 |#AsyncDisk.Step.RecvWriteStep|)) :qid |unknown.0:0| :skolemid |2802| :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@176)) )))
(assert ($Is |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@172 T@U) ) (!  (=> (and (= (type $h@@172) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@172)) ($IsAlloc |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step $h@@172)) :qid |DafnyPreludebpl.545:12| :skolemid |2803| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step $h@@172)) )))
(assert (= |#AsyncDisk.Step.RecvWriteStep| (Lit |#AsyncDisk.Step.RecvWriteStep|)))
(assert (= (type |#AsyncDisk.Step.RecvWrite2Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvWrite2Step|) |##AsyncDisk.Step.RecvWrite2Step|))
(assert (forall ((d@@177 T@U) ) (!  (=> (= (type d@@177) DatatypeTypeType) (= (AsyncDisk.Step.RecvWrite2Step_q d@@177) (= (DatatypeCtorId d@@177) |##AsyncDisk.Step.RecvWrite2Step|))) :qid |unknown.0:0| :skolemid |2804| :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@177)) )))
(assert (forall ((d@@178 T@U) ) (!  (=> (and (= (type d@@178) DatatypeTypeType) (AsyncDisk.Step.RecvWrite2Step_q d@@178)) (= d@@178 |#AsyncDisk.Step.RecvWrite2Step|)) :qid |unknown.0:0| :skolemid |2805| :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@178)) )))
(assert ($Is |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step))
(assert (forall (($h@@173 T@U) ) (!  (=> (and (= (type $h@@173) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@173)) ($IsAlloc |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step $h@@173)) :qid |DafnyPreludebpl.545:12| :skolemid |2806| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step $h@@173)) )))
(assert (= |#AsyncDisk.Step.RecvWrite2Step| (Lit |#AsyncDisk.Step.RecvWrite2Step|)))
(assert (= (type |#AsyncDisk.Step.AckReadStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.AckReadStep|) |##AsyncDisk.Step.AckReadStep|))
(assert (forall ((d@@179 T@U) ) (!  (=> (= (type d@@179) DatatypeTypeType) (= (AsyncDisk.Step.AckReadStep_q d@@179) (= (DatatypeCtorId d@@179) |##AsyncDisk.Step.AckReadStep|))) :qid |unknown.0:0| :skolemid |2807| :pattern ( (AsyncDisk.Step.AckReadStep_q d@@179)) )))
(assert (forall ((d@@180 T@U) ) (!  (=> (and (= (type d@@180) DatatypeTypeType) (AsyncDisk.Step.AckReadStep_q d@@180)) (= d@@180 |#AsyncDisk.Step.AckReadStep|)) :qid |unknown.0:0| :skolemid |2808| :pattern ( (AsyncDisk.Step.AckReadStep_q d@@180)) )))
(assert ($Is |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@174 T@U) ) (!  (=> (and (= (type $h@@174) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@174)) ($IsAlloc |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step $h@@174)) :qid |DafnyPreludebpl.545:12| :skolemid |2809| :pattern ( ($IsAlloc |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step $h@@174)) )))
(assert (= |#AsyncDisk.Step.AckReadStep| (Lit |#AsyncDisk.Step.AckReadStep|)))
(assert (= (type |#AsyncDisk.Step.AckWriteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.AckWriteStep|) |##AsyncDisk.Step.AckWriteStep|))
(assert (forall ((d@@181 T@U) ) (!  (=> (= (type d@@181) DatatypeTypeType) (= (AsyncDisk.Step.AckWriteStep_q d@@181) (= (DatatypeCtorId d@@181) |##AsyncDisk.Step.AckWriteStep|))) :qid |unknown.0:0| :skolemid |2810| :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@181)) )))
(assert (forall ((d@@182 T@U) ) (!  (=> (and (= (type d@@182) DatatypeTypeType) (AsyncDisk.Step.AckWriteStep_q d@@182)) (= d@@182 |#AsyncDisk.Step.AckWriteStep|)) :qid |unknown.0:0| :skolemid |2811| :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@182)) )))
(assert ($Is |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@175 T@U) ) (!  (=> (and (= (type $h@@175) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@175)) ($IsAlloc |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step $h@@175)) :qid |DafnyPreludebpl.545:12| :skolemid |2812| :pattern ( ($IsAlloc |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step $h@@175)) )))
(assert (= |#AsyncDisk.Step.AckWriteStep| (Lit |#AsyncDisk.Step.AckWriteStep|)))
(assert (= (type |#AsyncDisk.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.StutterStep|) |##AsyncDisk.Step.StutterStep|))
(assert (forall ((d@@183 T@U) ) (!  (=> (= (type d@@183) DatatypeTypeType) (= (AsyncDisk.Step.StutterStep_q d@@183) (= (DatatypeCtorId d@@183) |##AsyncDisk.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |2813| :pattern ( (AsyncDisk.Step.StutterStep_q d@@183)) )))
(assert (forall ((d@@184 T@U) ) (!  (=> (and (= (type d@@184) DatatypeTypeType) (AsyncDisk.Step.StutterStep_q d@@184)) (= d@@184 |#AsyncDisk.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |2814| :pattern ( (AsyncDisk.Step.StutterStep_q d@@184)) )))
(assert ($Is |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@176 T@U) ) (!  (=> (and (= (type $h@@176) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@176)) ($IsAlloc |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step $h@@176)) :qid |DafnyPreludebpl.545:12| :skolemid |2815| :pattern ( ($IsAlloc |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step $h@@176)) )))
(assert (= |#AsyncDisk.Step.StutterStep| (Lit |#AsyncDisk.Step.StutterStep|)))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) (|$IsA#AsyncDisk.Step| d@@185)) (or (or (or (or (or (AsyncDisk.Step.RecvReadStep_q d@@185) (AsyncDisk.Step.RecvWriteStep_q d@@185)) (AsyncDisk.Step.RecvWrite2Step_q d@@185)) (AsyncDisk.Step.AckReadStep_q d@@185)) (AsyncDisk.Step.AckWriteStep_q d@@185)) (AsyncDisk.Step.StutterStep_q d@@185))) :qid |unknown.0:0| :skolemid |2816| :pattern ( (|$IsA#AsyncDisk.Step| d@@185)) )))
(assert (forall ((d@@186 T@U) ) (!  (=> (and (= (type d@@186) DatatypeTypeType) ($Is d@@186 Tclass.AsyncDisk.Step)) (or (or (or (or (or (AsyncDisk.Step.RecvReadStep_q d@@186) (AsyncDisk.Step.RecvWriteStep_q d@@186)) (AsyncDisk.Step.RecvWrite2Step_q d@@186)) (AsyncDisk.Step.AckReadStep_q d@@186)) (AsyncDisk.Step.AckWriteStep_q d@@186)) (AsyncDisk.Step.StutterStep_q d@@186))) :qid |unknown.0:0| :skolemid |2817| :pattern ( (AsyncDisk.Step.StutterStep_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.AckReadStep_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@186) ($Is d@@186 Tclass.AsyncDisk.Step)) )))
(assert (forall ((a@@180 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) (and (AsyncDisk.Step.RecvReadStep_q a@@180) (AsyncDisk.Step.RecvReadStep_q b@@117))) (= (|AsyncDisk.Step#Equal| a@@180 b@@117) true)) :qid |unknown.0:0| :skolemid |2818| :pattern ( (|AsyncDisk.Step#Equal| a@@180 b@@117) (AsyncDisk.Step.RecvReadStep_q a@@180)) :pattern ( (|AsyncDisk.Step#Equal| a@@180 b@@117) (AsyncDisk.Step.RecvReadStep_q b@@117)) )))
(assert (forall ((a@@181 T@U) (b@@118 T@U) ) (!  (=> (and (and (= (type a@@181) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (and (AsyncDisk.Step.RecvWriteStep_q a@@181) (AsyncDisk.Step.RecvWriteStep_q b@@118))) (= (|AsyncDisk.Step#Equal| a@@181 b@@118) true)) :qid |unknown.0:0| :skolemid |2819| :pattern ( (|AsyncDisk.Step#Equal| a@@181 b@@118) (AsyncDisk.Step.RecvWriteStep_q a@@181)) :pattern ( (|AsyncDisk.Step#Equal| a@@181 b@@118) (AsyncDisk.Step.RecvWriteStep_q b@@118)) )))
(assert (forall ((a@@182 T@U) (b@@119 T@U) ) (!  (=> (and (and (= (type a@@182) DatatypeTypeType) (= (type b@@119) DatatypeTypeType)) (and (AsyncDisk.Step.RecvWrite2Step_q a@@182) (AsyncDisk.Step.RecvWrite2Step_q b@@119))) (= (|AsyncDisk.Step#Equal| a@@182 b@@119) true)) :qid |unknown.0:0| :skolemid |2820| :pattern ( (|AsyncDisk.Step#Equal| a@@182 b@@119) (AsyncDisk.Step.RecvWrite2Step_q a@@182)) :pattern ( (|AsyncDisk.Step#Equal| a@@182 b@@119) (AsyncDisk.Step.RecvWrite2Step_q b@@119)) )))
(assert (forall ((a@@183 T@U) (b@@120 T@U) ) (!  (=> (and (and (= (type a@@183) DatatypeTypeType) (= (type b@@120) DatatypeTypeType)) (and (AsyncDisk.Step.AckReadStep_q a@@183) (AsyncDisk.Step.AckReadStep_q b@@120))) (= (|AsyncDisk.Step#Equal| a@@183 b@@120) true)) :qid |unknown.0:0| :skolemid |2821| :pattern ( (|AsyncDisk.Step#Equal| a@@183 b@@120) (AsyncDisk.Step.AckReadStep_q a@@183)) :pattern ( (|AsyncDisk.Step#Equal| a@@183 b@@120) (AsyncDisk.Step.AckReadStep_q b@@120)) )))
(assert (forall ((a@@184 T@U) (b@@121 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@121) DatatypeTypeType)) (and (AsyncDisk.Step.AckWriteStep_q a@@184) (AsyncDisk.Step.AckWriteStep_q b@@121))) (= (|AsyncDisk.Step#Equal| a@@184 b@@121) true)) :qid |unknown.0:0| :skolemid |2822| :pattern ( (|AsyncDisk.Step#Equal| a@@184 b@@121) (AsyncDisk.Step.AckWriteStep_q a@@184)) :pattern ( (|AsyncDisk.Step#Equal| a@@184 b@@121) (AsyncDisk.Step.AckWriteStep_q b@@121)) )))
(assert (forall ((a@@185 T@U) (b@@122 T@U) ) (!  (=> (and (and (= (type a@@185) DatatypeTypeType) (= (type b@@122) DatatypeTypeType)) (and (AsyncDisk.Step.StutterStep_q a@@185) (AsyncDisk.Step.StutterStep_q b@@122))) (= (|AsyncDisk.Step#Equal| a@@185 b@@122) true)) :qid |unknown.0:0| :skolemid |2823| :pattern ( (|AsyncDisk.Step#Equal| a@@185 b@@122) (AsyncDisk.Step.StutterStep_q a@@185)) :pattern ( (|AsyncDisk.Step#Equal| a@@185 b@@122) (AsyncDisk.Step.StutterStep_q b@@122)) )))
(assert (forall ((a@@186 T@U) (b@@123 T@U) ) (!  (=> (and (= (type a@@186) DatatypeTypeType) (= (type b@@123) DatatypeTypeType)) (= (|AsyncDisk.Step#Equal| a@@186 b@@123) (= a@@186 b@@123))) :qid |unknown.0:0| :skolemid |2824| :pattern ( (|AsyncDisk.Step#Equal| a@@186 b@@123)) )))
(assert (forall ((arg0@@585 Int) (arg1@@281 T@U) ) (! (= (type (|#AsyncDisk.InternalStep.ProcessReadFailureStep| arg0@@585 arg1@@281)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.ProcessReadFailureStep| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| arg0@@585 arg1@@281)) )))
(assert (forall ((|a#130#0#0@@0| Int) (|a#130#1#0@@0| T@U) ) (!  (=> (= (type |a#130#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#130#0#0@@0| |a#130#1#0@@0|)) |##AsyncDisk.InternalStep.ProcessReadFailureStep|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2825| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#130#0#0@@0| |a#130#1#0@@0|)) )))
(assert (forall ((d@@187 T@U) ) (!  (=> (= (type d@@187) DatatypeTypeType) (= (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@187) (= (DatatypeCtorId d@@187) |##AsyncDisk.InternalStep.ProcessReadFailureStep|))) :qid |unknown.0:0| :skolemid |2826| :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@187)) )))
(assert (forall ((d@@188 T@U) ) (!  (=> (and (= (type d@@188) DatatypeTypeType) (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@188)) (exists ((|a#131#0#0@@0| Int) (|a#131#1#0@@0| T@U) ) (!  (and (= (type |a#131#1#0@@0|) (SeqType BoxType)) (= d@@188 (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#131#0#0@@0| |a#131#1#0@@0|))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2827| :no-pattern (type |a#131#1#0@@0|) :no-pattern (U_2_int |a#131#1#0@@0|) :no-pattern (U_2_bool |a#131#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2828| :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@188)) )))
(assert (= (type Tclass.AsyncDisk.InternalStep) TyType))
(assert (= (Tag Tclass.AsyncDisk.InternalStep) Tagclass.AsyncDisk.InternalStep))
(assert (= (TagFamily Tclass.AsyncDisk.InternalStep) tytagFamily$InternalStep))
(assert (forall ((bx@@172 T@U) ) (!  (=> (and (= (type bx@@172) BoxType) ($IsBox bx@@172 Tclass.AsyncDisk.InternalStep)) (and (= ($Box ($Unbox DatatypeTypeType bx@@172)) bx@@172) ($Is ($Unbox DatatypeTypeType bx@@172) Tclass.AsyncDisk.InternalStep))) :qid |unknown.0:0| :skolemid |2829| :pattern ( ($IsBox bx@@172 Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#132#0#0@@0| Int) (|a#132#1#0@@0| T@U) ) (!  (=> (= (type |a#132#1#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#132#0#0@@0| |a#132#1#0@@0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#132#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#132#1#0@@0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2830| :pattern ( ($Is (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#132#0#0@@0| |a#132#1#0@@0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#133#0#0@@0| Int) (|a#133#1#0@@0| T@U) ($h@@177 T@U) ) (!  (=> (and (and (= (type |a#133#1#0@@0|) (SeqType BoxType)) (= (type $h@@177) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@177)) (= ($IsAlloc (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#133#0#0@@0| |a#133#1#0@@0|) Tclass.AsyncDisk.InternalStep $h@@177)  (and ($IsAlloc (int_2_U |a#133#0#0@@0|) Tclass.NativeTypes.uint64 $h@@177) ($IsAlloc |a#133#1#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@177)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2831| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#133#0#0@@0| |a#133#1#0@@0|) Tclass.AsyncDisk.InternalStep $h@@177)) )))
(assert (forall ((d@@189 T@U) ($h@@178 T@U) ) (!  (=> (and (and (= (type d@@189) DatatypeTypeType) (= (type $h@@178) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@178) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@189) ($IsAlloc d@@189 Tclass.AsyncDisk.InternalStep $h@@178)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@189)) Tclass.NativeTypes.uint64 $h@@178)) :qid |unknown.0:0| :skolemid |2832| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@189)) Tclass.NativeTypes.uint64 $h@@178)) )))
(assert (forall ((arg0@@586 T@U) ) (! (= (type (AsyncDisk.InternalStep.fakeContents arg0@@586)) (SeqType BoxType)) :qid |funType:AsyncDisk.InternalStep.fakeContents| :pattern ( (AsyncDisk.InternalStep.fakeContents arg0@@586)) )))
(assert (forall ((d@@190 T@U) ($h@@179 T@U) ) (!  (=> (and (and (= (type d@@190) DatatypeTypeType) (= (type $h@@179) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@179) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@190) ($IsAlloc d@@190 Tclass.AsyncDisk.InternalStep $h@@179)))) ($IsAlloc (AsyncDisk.InternalStep.fakeContents d@@190) (TSeq Tclass.NativeTypes.byte) $h@@179)) :qid |unknown.0:0| :skolemid |2833| :pattern ( ($IsAlloc (AsyncDisk.InternalStep.fakeContents d@@190) (TSeq Tclass.NativeTypes.byte) $h@@179)) )))
(assert (forall ((|a#134#0#0@@0| Int) (|a#134#1#0@@0| T@U) ) (!  (=> (= (type |a#134#1#0@@0|) (SeqType BoxType)) (= (|#AsyncDisk.InternalStep.ProcessReadFailureStep| (LitInt |a#134#0#0@@0|) (Lit |a#134#1#0@@0|)) (Lit (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#134#0#0@@0| |a#134#1#0@@0|)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2834| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| (LitInt |a#134#0#0@@0|) (Lit |a#134#1#0@@0|))) )))
(assert (forall ((|a#135#0#0@@0| Int) (|a#135#1#0@@0| T@U) ) (!  (=> (= (type |a#135#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#135#0#0@@0| |a#135#1#0@@0|)) |a#135#0#0@@0|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2835| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#135#0#0@@0| |a#135#1#0@@0|)) )))
(assert (forall ((|a#136#0#0@@0| Int) (|a#136#1#0@@0| T@U) ) (!  (=> (= (type |a#136#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.InternalStep.fakeContents (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#136#0#0@@0| |a#136#1#0@@0|)) |a#136#1#0@@0|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2836| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#136#0#0@@0| |a#136#1#0@@0|)) )))
(assert (forall ((|a#137#0#0| Int) (|a#137#1#0| T@U) (i@@30 Int) ) (!  (=> (= (type |a#137#1#0|) (SeqType BoxType)) (=> (and (<= 0 i@@30) (< i@@30 (|Seq#Length| |a#137#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#137#1#0| i@@30))) (DtRank (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#137#0#0| |a#137#1#0|))))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2837| :pattern ( (|Seq#Index| |a#137#1#0| i@@30) (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#137#0#0| |a#137#1#0|)) )))
(assert (forall ((|a#138#0#0| Int) (|a#138#1#0| T@U) ) (!  (=> (= (type |a#138#1#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#138#1#0|) (DtRank (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#138#0#0| |a#138#1#0|)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2838| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#138#0#0| |a#138#1#0|)) )))
(assert (forall ((arg0@@587 Int) ) (! (= (type (|#AsyncDisk.InternalStep.ProcessWriteStep| arg0@@587)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.ProcessWriteStep| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| arg0@@587)) )))
(assert (forall ((|a#139#0#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#139#0#0|)) |##AsyncDisk.InternalStep.ProcessWriteStep|) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2839| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#139#0#0|)) )))
(assert (forall ((d@@191 T@U) ) (!  (=> (= (type d@@191) DatatypeTypeType) (= (AsyncDisk.InternalStep.ProcessWriteStep_q d@@191) (= (DatatypeCtorId d@@191) |##AsyncDisk.InternalStep.ProcessWriteStep|))) :qid |unknown.0:0| :skolemid |2840| :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@191)) )))
(assert (forall ((d@@192 T@U) ) (!  (=> (and (= (type d@@192) DatatypeTypeType) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@192)) (exists ((|a#140#0#0| Int) ) (! (= d@@192 (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#140#0#0|)) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2841| ))) :qid |unknown.0:0| :skolemid |2842| :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@192)) )))
(assert (forall ((|a#141#0#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#141#0#0|) Tclass.AsyncDisk.InternalStep) ($Is (int_2_U |a#141#0#0|) Tclass.NativeTypes.uint64)) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2843| :pattern ( ($Is (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#141#0#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#142#0#0| Int) ($h@@180 T@U) ) (!  (=> (and (= (type $h@@180) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@180)) (= ($IsAlloc (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#142#0#0|) Tclass.AsyncDisk.InternalStep $h@@180) ($IsAlloc (int_2_U |a#142#0#0|) Tclass.NativeTypes.uint64 $h@@180))) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2844| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#142#0#0|) Tclass.AsyncDisk.InternalStep $h@@180)) )))
(assert (forall ((d@@193 T@U) ($h@@181 T@U) ) (!  (=> (and (and (= (type d@@193) DatatypeTypeType) (= (type $h@@181) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@181) (and (AsyncDisk.InternalStep.ProcessWriteStep_q d@@193) ($IsAlloc d@@193 Tclass.AsyncDisk.InternalStep $h@@181)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@193)) Tclass.NativeTypes.uint64 $h@@181)) :qid |unknown.0:0| :skolemid |2845| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@193)) Tclass.NativeTypes.uint64 $h@@181)) )))
(assert (forall ((|a#143#0#0| Int) ) (! (= (|#AsyncDisk.InternalStep.ProcessWriteStep| (LitInt |a#143#0#0|)) (Lit (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#143#0#0|))) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2846| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| (LitInt |a#143#0#0|))) )))
(assert (forall ((|a#144#0#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#144#0#0|)) |a#144#0#0|) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2847| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#144#0#0|)) )))
(assert (forall ((arg0@@588 Int) (arg1@@282 Int) ) (! (= (type (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| arg0@@588 arg1@@282)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.HavocConflictingWritesStep| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| arg0@@588 arg1@@282)) )))
(assert (forall ((|a#145#0#0| Int) (|a#145#1#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#145#0#0| |a#145#1#0|)) |##AsyncDisk.InternalStep.HavocConflictingWritesStep|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2848| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#145#0#0| |a#145#1#0|)) )))
(assert (forall ((d@@194 T@U) ) (!  (=> (= (type d@@194) DatatypeTypeType) (= (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@194) (= (DatatypeCtorId d@@194) |##AsyncDisk.InternalStep.HavocConflictingWritesStep|))) :qid |unknown.0:0| :skolemid |2849| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@194)) )))
(assert (forall ((d@@195 T@U) ) (!  (=> (and (= (type d@@195) DatatypeTypeType) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@195)) (exists ((|a#146#0#0| Int) (|a#146#1#0| Int) ) (! (= d@@195 (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#146#0#0| |a#146#1#0|)) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2850| ))) :qid |unknown.0:0| :skolemid |2851| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@195)) )))
(assert (forall ((|a#147#0#0| Int) (|a#147#1#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#147#0#0| |a#147#1#0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#147#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#147#1#0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2852| :pattern ( ($Is (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#147#0#0| |a#147#1#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#148#0#0| Int) (|a#148#1#0| Int) ($h@@182 T@U) ) (!  (=> (and (= (type $h@@182) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@182)) (= ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#148#0#0| |a#148#1#0|) Tclass.AsyncDisk.InternalStep $h@@182)  (and ($IsAlloc (int_2_U |a#148#0#0|) Tclass.NativeTypes.uint64 $h@@182) ($IsAlloc (int_2_U |a#148#1#0|) Tclass.NativeTypes.uint64 $h@@182)))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2853| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#148#0#0| |a#148#1#0|) Tclass.AsyncDisk.InternalStep $h@@182)) )))
(assert (forall ((d@@196 T@U) ($h@@183 T@U) ) (!  (=> (and (and (= (type d@@196) DatatypeTypeType) (= (type $h@@183) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@183) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@196) ($IsAlloc d@@196 Tclass.AsyncDisk.InternalStep $h@@183)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@196)) Tclass.NativeTypes.uint64 $h@@183)) :qid |unknown.0:0| :skolemid |2854| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@196)) Tclass.NativeTypes.uint64 $h@@183)) )))
(assert (forall ((d@@197 T@U) ($h@@184 T@U) ) (!  (=> (and (and (= (type d@@197) DatatypeTypeType) (= (type $h@@184) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@184) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@197) ($IsAlloc d@@197 Tclass.AsyncDisk.InternalStep $h@@184)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@197)) Tclass.NativeTypes.uint64 $h@@184)) :qid |unknown.0:0| :skolemid |2855| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@197)) Tclass.NativeTypes.uint64 $h@@184)) )))
(assert (forall ((|a#149#0#0| Int) (|a#149#1#0| Int) ) (! (= (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| (LitInt |a#149#0#0|) (LitInt |a#149#1#0|)) (Lit (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#149#0#0| |a#149#1#0|))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2856| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| (LitInt |a#149#0#0|) (LitInt |a#149#1#0|))) )))
(assert (forall ((|a#150#0#0| Int) (|a#150#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#150#0#0| |a#150#1#0|)) |a#150#0#0|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2857| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#150#0#0| |a#150#1#0|)) )))
(assert (forall ((|a#151#0#0| Int) (|a#151#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id_k (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#151#0#0| |a#151#1#0|)) |a#151#1#0|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2858| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#151#0#0| |a#151#1#0|)) )))
(assert (forall ((arg0@@589 Int) (arg1@@283 Int) ) (! (= (type (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| arg0@@589 arg1@@283)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| arg0@@589 arg1@@283)) )))
(assert (forall ((|a#152#0#0| Int) (|a#152#1#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#152#0#0| |a#152#1#0|)) |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2859| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#152#0#0| |a#152#1#0|)) )))
(assert (forall ((d@@198 T@U) ) (!  (=> (= (type d@@198) DatatypeTypeType) (= (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@198) (= (DatatypeCtorId d@@198) |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|))) :qid |unknown.0:0| :skolemid |2860| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@198)) )))
(assert (forall ((d@@199 T@U) ) (!  (=> (and (= (type d@@199) DatatypeTypeType) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@199)) (exists ((|a#153#0#0| Int) (|a#153#1#0| Int) ) (! (= d@@199 (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#153#0#0| |a#153#1#0|)) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2861| ))) :qid |unknown.0:0| :skolemid |2862| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@199)) )))
(assert (forall ((|a#154#0#0| Int) (|a#154#1#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#154#0#0| |a#154#1#0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#154#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#154#1#0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2863| :pattern ( ($Is (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#154#0#0| |a#154#1#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#155#0#0| Int) (|a#155#1#0| Int) ($h@@185 T@U) ) (!  (=> (and (= (type $h@@185) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@185)) (= ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#155#0#0| |a#155#1#0|) Tclass.AsyncDisk.InternalStep $h@@185)  (and ($IsAlloc (int_2_U |a#155#0#0|) Tclass.NativeTypes.uint64 $h@@185) ($IsAlloc (int_2_U |a#155#1#0|) Tclass.NativeTypes.uint64 $h@@185)))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2864| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#155#0#0| |a#155#1#0|) Tclass.AsyncDisk.InternalStep $h@@185)) )))
(assert (forall ((d@@200 T@U) ($h@@186 T@U) ) (!  (=> (and (and (= (type d@@200) DatatypeTypeType) (= (type $h@@186) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@186) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@200) ($IsAlloc d@@200 Tclass.AsyncDisk.InternalStep $h@@186)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@200)) Tclass.NativeTypes.uint64 $h@@186)) :qid |unknown.0:0| :skolemid |2865| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@200)) Tclass.NativeTypes.uint64 $h@@186)) )))
(assert (forall ((d@@201 T@U) ($h@@187 T@U) ) (!  (=> (and (and (= (type d@@201) DatatypeTypeType) (= (type $h@@187) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@187) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@201) ($IsAlloc d@@201 Tclass.AsyncDisk.InternalStep $h@@187)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@201)) Tclass.NativeTypes.uint64 $h@@187)) :qid |unknown.0:0| :skolemid |2866| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@201)) Tclass.NativeTypes.uint64 $h@@187)) )))
(assert (forall ((|a#156#0#0| Int) (|a#156#1#0| Int) ) (! (= (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (LitInt |a#156#0#0|) (LitInt |a#156#1#0|)) (Lit (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#156#0#0| |a#156#1#0|))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2867| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (LitInt |a#156#0#0|) (LitInt |a#156#1#0|))) )))
(assert (forall ((|a#157#0#0| Int) (|a#157#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#157#0#0| |a#157#1#0|)) |a#157#0#0|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2868| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#157#0#0| |a#157#1#0|)) )))
(assert (forall ((|a#158#0#0| Int) (|a#158#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id_k (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#158#0#0| |a#158#1#0|)) |a#158#1#0|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2869| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#158#0#0| |a#158#1#0|)) )))
(assert (forall ((d@@202 T@U) ) (!  (=> (and (= (type d@@202) DatatypeTypeType) (|$IsA#AsyncDisk.InternalStep| d@@202)) (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@202) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@202)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@202)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@202))) :qid |unknown.0:0| :skolemid |2870| :pattern ( (|$IsA#AsyncDisk.InternalStep| d@@202)) )))
(assert (forall ((d@@203 T@U) ) (!  (=> (and (= (type d@@203) DatatypeTypeType) ($Is d@@203 Tclass.AsyncDisk.InternalStep)) (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@203) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@203)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@203)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@203))) :qid |unknown.0:0| :skolemid |2871| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@203) ($Is d@@203 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@203) ($Is d@@203 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@203) ($Is d@@203 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@203) ($Is d@@203 Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((a@@187 T@U) (b@@124 T@U) ) (!  (=> (and (and (= (type a@@187) DatatypeTypeType) (= (type b@@124) DatatypeTypeType)) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q a@@187) (AsyncDisk.InternalStep.ProcessReadFailureStep_q b@@124))) (= (|AsyncDisk.InternalStep#Equal| a@@187 b@@124)  (and (= (AsyncDisk.InternalStep.id a@@187) (AsyncDisk.InternalStep.id b@@124)) (|Seq#Equal| (AsyncDisk.InternalStep.fakeContents a@@187) (AsyncDisk.InternalStep.fakeContents b@@124))))) :qid |unknown.0:0| :skolemid |2872| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@187 b@@124) (AsyncDisk.InternalStep.ProcessReadFailureStep_q a@@187)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@187 b@@124) (AsyncDisk.InternalStep.ProcessReadFailureStep_q b@@124)) )))
(assert (forall ((a@@188 T@U) (b@@125 T@U) ) (!  (=> (and (and (= (type a@@188) DatatypeTypeType) (= (type b@@125) DatatypeTypeType)) (and (AsyncDisk.InternalStep.ProcessWriteStep_q a@@188) (AsyncDisk.InternalStep.ProcessWriteStep_q b@@125))) (= (|AsyncDisk.InternalStep#Equal| a@@188 b@@125) (= (AsyncDisk.InternalStep.id a@@188) (AsyncDisk.InternalStep.id b@@125)))) :qid |unknown.0:0| :skolemid |2873| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@188 b@@125) (AsyncDisk.InternalStep.ProcessWriteStep_q a@@188)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@188 b@@125) (AsyncDisk.InternalStep.ProcessWriteStep_q b@@125)) )))
(assert (forall ((a@@189 T@U) (b@@126 T@U) ) (!  (=> (and (and (= (type a@@189) DatatypeTypeType) (= (type b@@126) DatatypeTypeType)) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q a@@189) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q b@@126))) (= (|AsyncDisk.InternalStep#Equal| a@@189 b@@126)  (and (= (AsyncDisk.InternalStep.id a@@189) (AsyncDisk.InternalStep.id b@@126)) (= (AsyncDisk.InternalStep.id_k a@@189) (AsyncDisk.InternalStep.id_k b@@126))))) :qid |unknown.0:0| :skolemid |2874| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@189 b@@126) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q a@@189)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@189 b@@126) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q b@@126)) )))
(assert (forall ((a@@190 T@U) (b@@127 T@U) ) (!  (=> (and (and (= (type a@@190) DatatypeTypeType) (= (type b@@127) DatatypeTypeType)) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q a@@190) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q b@@127))) (= (|AsyncDisk.InternalStep#Equal| a@@190 b@@127)  (and (= (AsyncDisk.InternalStep.id a@@190) (AsyncDisk.InternalStep.id b@@127)) (= (AsyncDisk.InternalStep.id_k a@@190) (AsyncDisk.InternalStep.id_k b@@127))))) :qid |unknown.0:0| :skolemid |2875| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@190 b@@127) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q a@@190)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@190 b@@127) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q b@@127)) )))
(assert (forall ((a@@191 T@U) (b@@128 T@U) ) (!  (=> (and (= (type a@@191) DatatypeTypeType) (= (type b@@128) DatatypeTypeType)) (= (|AsyncDisk.InternalStep#Equal| a@@191 b@@128) (= a@@191 b@@128))) :qid |unknown.0:0| :skolemid |2876| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@191 b@@128)) )))
(assert (= (type Tclass.AsyncDisk.__default) TyType))
(assert (= (Tag Tclass.AsyncDisk.__default) Tagclass.AsyncDisk.__default))
(assert (= (TagFamily Tclass.AsyncDisk.__default) tytagFamily$_default))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.AsyncDisk.__default)) (and (= ($Box ($Unbox refType bx@@173)) bx@@173) ($Is ($Unbox refType bx@@173) Tclass.AsyncDisk.__default))) :qid |unknown.0:0| :skolemid |2877| :pattern ( ($IsBox bx@@173 Tclass.AsyncDisk.__default)) )))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (= ($Is $o@@48 Tclass.AsyncDisk.__default)  (or (= $o@@48 null) (= (dtype $o@@48) Tclass.AsyncDisk.__default)))) :qid |unknown.0:0| :skolemid |2878| :pattern ( ($Is $o@@48 Tclass.AsyncDisk.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@188 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@188) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@49 Tclass.AsyncDisk.__default $h@@188)  (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@188 $o@@49) alloc))))) :qid |unknown.0:0| :skolemid |2879| :pattern ( ($IsAlloc $o@@49 Tclass.AsyncDisk.__default $h@@188)) )))
(assert  (=> true (forall ((|s#0@@126| T@U) ) (!  (=> (and (= (type |s#0@@126|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| |s#0@@126|) ($Is |s#0@@126| Tclass.AsyncDisk.Variables))) true) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2880| :pattern ( (AsyncDisk.__default.Init |s#0@@126|)) ))))
(assert (forall ((|s#0@@127| T@U) ) (!  (=> (and (= (type |s#0@@127|) DatatypeTypeType) ($Is |s#0@@127| Tclass.AsyncDisk.Variables)) (= (|AsyncDisk.__default.Init#requires| |s#0@@127|) true)) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2881| :pattern ( (|AsyncDisk.__default.Init#requires| |s#0@@127|)) )))
(assert  (=> true (forall ((|s#0@@128| T@U) ) (!  (=> (and (= (type |s#0@@128|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| |s#0@@128|) ($Is |s#0@@128| Tclass.AsyncDisk.Variables))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@128|) (=> (|Map#Equal| (AsyncDisk.Variables.reqReads |s#0@@128|) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q |s#0@@128|) (=> (|Map#Equal| (AsyncDisk.Variables.reqWrites |s#0@@128|) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q |s#0@@128|) (=> (|Map#Equal| (AsyncDisk.Variables.respReads |s#0@@128|) (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.Variables_q |s#0@@128|))))))) (= (AsyncDisk.__default.Init |s#0@@128|)  (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads |s#0@@128|) (|Map#Empty| BoxType BoxType)) (|Map#Equal| (AsyncDisk.Variables.reqWrites |s#0@@128|) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respReads |s#0@@128|) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respWrites |s#0@@128|) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2882| :pattern ( (AsyncDisk.__default.Init |s#0@@128|)) ))))
(assert  (=> true (forall ((|s#0@@129| T@U) ) (!  (=> (and (= (type |s#0@@129|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| (Lit |s#0@@129|)) ($Is |s#0@@129| Tclass.AsyncDisk.Variables))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@129|)) (=> (|Map#Equal| (AsyncDisk.Variables.reqReads (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@129|)) (=> (|Map#Equal| (AsyncDisk.Variables.reqWrites (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@129|)) (=> (|Map#Equal| (AsyncDisk.Variables.respReads (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@129|)))))))) (= (AsyncDisk.__default.Init (Lit |s#0@@129|))  (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType)) (|Map#Equal| (AsyncDisk.Variables.reqWrites (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respReads (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respWrites (Lit |s#0@@129|)) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncDiskModelsdfy.50:18| :weight 3 :skolemid |2883| :pattern ( (AsyncDisk.__default.Init (Lit |s#0@@129|))) ))))
(assert  (=> true (forall ((|s#0@@130| T@U) (|s'#0| T@U) (|dop#0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@130|) DatatypeTypeType) (= (type |s'#0|) DatatypeTypeType)) (= (type |dop#0|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| |s#0@@130| |s'#0| |dop#0|) (and (and ($Is |s#0@@130| Tclass.AsyncDisk.Variables) ($Is |s'#0| Tclass.AsyncDisk.Variables)) ($Is |dop#0| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2884| :pattern ( (AsyncDisk.__default.RecvRead |s#0@@130| |s'#0| |dop#0|)) ))))
(assert (forall ((|s#0@@131| T@U) (|s'#0@@0| T@U) (|dop#0@@0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@131|) DatatypeTypeType) (= (type |s'#0@@0|) DatatypeTypeType)) (= (type |dop#0@@0|) DatatypeTypeType)) (and (and ($Is |s#0@@131| Tclass.AsyncDisk.Variables) ($Is |s'#0@@0| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@0| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvRead#requires| |s#0@@131| |s'#0@@0| |dop#0@@0|) true)) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2885| :pattern ( (|AsyncDisk.__default.RecvRead#requires| |s#0@@131| |s'#0@@0| |dop#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@132| T@U) (|s'#0@@1| T@U) (|dop#0@@1| T@U) ) (!  (=> (and (and (and (= (type |s#0@@132|) DatatypeTypeType) (= (type |s'#0@@1|) DatatypeTypeType)) (= (type |dop#0@@1|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| |s#0@@132| |s'#0@@1| |dop#0@@1|) (and (and ($Is |s#0@@132| Tclass.AsyncDisk.Variables) ($Is |s'#0@@1| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@1| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqReadOp_q |dop#0@@1|) (and (AsyncDisk.Variables.Variables_q |s#0@@132|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@132|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@132|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@132|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|)))))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@1|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0| |s#0@@132|)) (let ((|dt_update#reqReads#0#0| (|Map#Build| (AsyncDisk.Variables.reqReads |s#0@@132|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))) ($Box (AsyncDisk.DiskOp.reqRead |dop#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0|)))))) (let ((|dt_update_tmp#0#0@@0| |s#0@@132|)) (and (AsyncDisk.Variables.Variables_q |s#0@@132|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)))))))))) (= (AsyncDisk.__default.RecvRead |s#0@@132| |s'#0@@1| |dop#0@@1|)  (and (and (and (AsyncDisk.DiskOp.ReqReadOp_q |dop#0@@1|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@132|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@132|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))))))) (|AsyncDisk.Variables#Equal| |s'#0@@1| (let ((|dt_update_tmp#0#0@@1| |s#0@@132|)) (let ((|dt_update#reqReads#0#0@@0| (|Map#Build| (AsyncDisk.Variables.reqReads |s#0@@132|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))) ($Box (AsyncDisk.DiskOp.reqRead |dop#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@0| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@1|))))))))) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2886| :pattern ( (AsyncDisk.__default.RecvRead |s#0@@132| |s'#0@@1| |dop#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@133| T@U) (|s'#0@@2| T@U) (|dop#0@@2| T@U) ) (!  (=> (and (and (and (= (type |s#0@@133|) DatatypeTypeType) (= (type |s'#0@@2|) DatatypeTypeType)) (= (type |dop#0@@2|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| (Lit |s#0@@133|) (Lit |s'#0@@2|) (Lit |dop#0@@2|)) (and (and ($Is |s#0@@133| Tclass.AsyncDisk.Variables) ($Is |s'#0@@2| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@2| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqReadOp_q (Lit |dop#0@@2|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@133|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@133|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@133|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@133|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@2|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1| (Lit |s#0@@133|))) (let ((|dt_update#reqReads#0#1| (|Map#Build| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@133|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))) ($Box (Lit (AsyncDisk.DiskOp.reqRead (Lit |dop#0@@2|))))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1|))))))) (let ((|dt_update_tmp#0#1@@0| (Lit |s#0@@133|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@133|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)))))))))) (= (AsyncDisk.__default.RecvRead (Lit |s#0@@133|) (Lit |s'#0@@2|) (Lit |dop#0@@2|))  (and (and (and (AsyncDisk.DiskOp.ReqReadOp_q (Lit |dop#0@@2|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@133|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@133|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|)))))))) (|AsyncDisk.Variables#Equal| |s'#0@@2| (let ((|dt_update_tmp#0#1@@1| (Lit |s#0@@133|))) (let ((|dt_update#reqReads#0#1@@0| (|Map#Build| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@133|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))) ($Box (Lit (AsyncDisk.DiskOp.reqRead (Lit |dop#0@@2|))))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@0| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@1|)))))))))) :qid |AsyncDiskModelsdfy.66:22| :weight 3 :skolemid |2887| :pattern ( (AsyncDisk.__default.RecvRead (Lit |s#0@@133|) (Lit |s'#0@@2|) (Lit |dop#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@134| T@U) (|s'#0@@3| T@U) (|dop#0@@3| T@U) ) (!  (=> (and (and (and (= (type |s#0@@134|) DatatypeTypeType) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |dop#0@@3|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@134| |s'#0@@3| |dop#0@@3|) (and (and ($Is |s#0@@134| Tclass.AsyncDisk.Variables) ($Is |s'#0@@3| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@3| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2888| :pattern ( (AsyncDisk.__default.RecvWrite |s#0@@134| |s'#0@@3| |dop#0@@3|)) ))))
(assert (forall ((|s#0@@135| T@U) (|s'#0@@4| T@U) (|dop#0@@4| T@U) ) (!  (=> (and (and (and (= (type |s#0@@135|) DatatypeTypeType) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |dop#0@@4|) DatatypeTypeType)) (and (and ($Is |s#0@@135| Tclass.AsyncDisk.Variables) ($Is |s'#0@@4| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@4| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvWrite#requires| |s#0@@135| |s'#0@@4| |dop#0@@4|) true)) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2889| :pattern ( (|AsyncDisk.__default.RecvWrite#requires| |s#0@@135| |s'#0@@4| |dop#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@136| T@U) (|s'#0@@5| T@U) (|dop#0@@5| T@U) ) (!  (=> (and (and (and (= (type |s#0@@136|) DatatypeTypeType) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |dop#0@@5|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@136| |s'#0@@5| |dop#0@@5|) (and (and ($Is |s#0@@136| Tclass.AsyncDisk.Variables) ($Is |s'#0@@5| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@5| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqWriteOp_q |dop#0@@5|) (and (AsyncDisk.Variables.Variables_q |s#0@@136|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@136|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@136|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@136|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|)))))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@5|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@2| |s#0@@136|)) (let ((|dt_update#reqWrites#0#0| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@136|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))) ($Box (AsyncDisk.DiskOp.reqWrite |dop#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@2|) |dt_update#reqWrites#0#0| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@2|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@2|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@2|)))))) (let ((|dt_update_tmp#0#0@@3| |s#0@@136|)) (and (AsyncDisk.Variables.Variables_q |s#0@@136|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)))))))))) (= (AsyncDisk.__default.RecvWrite |s#0@@136| |s'#0@@5| |dop#0@@5|)  (and (and (and (AsyncDisk.DiskOp.ReqWriteOp_q |dop#0@@5|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@136|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@136|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))))))) (|AsyncDisk.Variables#Equal| |s'#0@@5| (let ((|dt_update_tmp#0#0@@4| |s#0@@136|)) (let ((|dt_update#reqWrites#0#0@@0| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@136|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))) ($Box (AsyncDisk.DiskOp.reqWrite |dop#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@4|) |dt_update#reqWrites#0#0@@0| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@4|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@4|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@4|))))))))) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2890| :pattern ( (AsyncDisk.__default.RecvWrite |s#0@@136| |s'#0@@5| |dop#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@137| T@U) (|s'#0@@6| T@U) (|dop#0@@6| T@U) ) (!  (=> (and (and (and (= (type |s#0@@137|) DatatypeTypeType) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |dop#0@@6|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| (Lit |s#0@@137|) (Lit |s'#0@@6|) (Lit |dop#0@@6|)) (and (and ($Is |s#0@@137| Tclass.AsyncDisk.Variables) ($Is |s'#0@@6| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@6| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqWriteOp_q (Lit |dop#0@@6|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@137|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@137|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@137|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@137|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@6|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@2| (Lit |s#0@@137|))) (let ((|dt_update#reqWrites#0#1| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@137|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite (Lit |dop#0@@6|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@2|)) |dt_update#reqWrites#0#1| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@2|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@2|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@2|))))))) (let ((|dt_update_tmp#0#1@@3| (Lit |s#0@@137|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@137|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)))))))))) (= (AsyncDisk.__default.RecvWrite (Lit |s#0@@137|) (Lit |s'#0@@6|) (Lit |dop#0@@6|))  (and (and (and (AsyncDisk.DiskOp.ReqWriteOp_q (Lit |dop#0@@6|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@137|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@137|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|)))))))) (|AsyncDisk.Variables#Equal| |s'#0@@6| (let ((|dt_update_tmp#0#1@@4| (Lit |s#0@@137|))) (let ((|dt_update#reqWrites#0#1@@0| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@137|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite (Lit |dop#0@@6|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@4|)) |dt_update#reqWrites#0#1@@0| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@4|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@4|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@4|)))))))))) :qid |AsyncDiskModelsdfy.74:23| :weight 3 :skolemid |2891| :pattern ( (AsyncDisk.__default.RecvWrite (Lit |s#0@@137|) (Lit |s'#0@@6|) (Lit |dop#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@138| T@U) (|s'#0@@7| T@U) (|dop#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@138|) DatatypeTypeType) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |dop#0@@7|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@138| |s'#0@@7| |dop#0@@7|) (and (and ($Is |s#0@@138| Tclass.AsyncDisk.Variables) ($Is |s'#0@@7| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@7| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2892| :pattern ( (AsyncDisk.__default.RecvWrite2 |s#0@@138| |s'#0@@7| |dop#0@@7|)) ))))
(assert (forall ((|s#0@@139| T@U) (|s'#0@@8| T@U) (|dop#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@139|) DatatypeTypeType) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |dop#0@@8|) DatatypeTypeType)) (and (and ($Is |s#0@@139| Tclass.AsyncDisk.Variables) ($Is |s'#0@@8| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@8| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvWrite2#requires| |s#0@@139| |s'#0@@8| |dop#0@@8|) true)) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2893| :pattern ( (|AsyncDisk.__default.RecvWrite2#requires| |s#0@@139| |s'#0@@8| |dop#0@@8|)) )))
(assert  (=> true (forall ((|s#0@@140| T@U) (|s'#0@@9| T@U) (|dop#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@140|) DatatypeTypeType) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |dop#0@@9|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@140| |s'#0@@9| |dop#0@@9|) (and (and ($Is |s#0@@140| Tclass.AsyncDisk.Variables) ($Is |s'#0@@9| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@9| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqWrite2Op_q |dop#0@@9|) (and (AsyncDisk.Variables.Variables_q |s#0@@140|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@140|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@140|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@140|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|)))))) (=> (not (= (AsyncDisk.DiskOp.id1 |dop#0@@9|) (AsyncDisk.DiskOp.id2 |dop#0@@9|))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@9|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@5| |s#0@@140|)) (let ((|dt_update#reqWrites#0#0@@1| (|Map#Build| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@140|) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite1 |dop#0@@9|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite2 |dop#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@5|) |dt_update#reqWrites#0#0@@1| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@5|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@5|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@5|)))))) (let ((|dt_update_tmp#0#0@@6| |s#0@@140|)) (and (AsyncDisk.Variables.Variables_q |s#0@@140|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|))))))))))))))) (= (AsyncDisk.__default.RecvWrite2 |s#0@@140| |s'#0@@9| |dop#0@@9|)  (and (and (and (and (and (and (AsyncDisk.DiskOp.ReqWrite2Op_q |dop#0@@9|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@140|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))))))) (not (= (AsyncDisk.DiskOp.id1 |dop#0@@9|) (AsyncDisk.DiskOp.id2 |dop#0@@9|)))) (|AsyncDisk.Variables#Equal| |s'#0@@9| (let ((|dt_update_tmp#0#0@@7| |s#0@@140|)) (let ((|dt_update#reqWrites#0#0@@2| (|Map#Build| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@140|) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite1 |dop#0@@9|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite2 |dop#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@7|) |dt_update#reqWrites#0#0@@2| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@7|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@7|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@7|))))))))) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2894| :pattern ( (AsyncDisk.__default.RecvWrite2 |s#0@@140| |s'#0@@9| |dop#0@@9|)) ))))
(assert  (=> true (forall ((|s#0@@141| T@U) (|s'#0@@10| T@U) (|dop#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@141|) DatatypeTypeType) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |dop#0@@10|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| (Lit |s#0@@141|) (Lit |s'#0@@10|) (Lit |dop#0@@10|)) (and (and ($Is |s#0@@141| Tclass.AsyncDisk.Variables) ($Is |s'#0@@10| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@10| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqWrite2Op_q (Lit |dop#0@@10|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@141|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@141|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@141|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@141|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (=> (U_2_bool (Lit (bool_2_U (not (= (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)) (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@10|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@5| (Lit |s#0@@141|))) (let ((|dt_update#reqWrites#0#1@@1| (|Map#Build| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite1 (Lit |dop#0@@10|))))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite2 (Lit |dop#0@@10|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@5|)) |dt_update#reqWrites#0#1@@1| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@5|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@5|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@5|))))))) (let ((|dt_update_tmp#0#1@@6| (Lit |s#0@@141|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@141|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|))))))))))))))) (= (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@141|) (Lit |s'#0@@10|) (Lit |dop#0@@10|))  (and (and (and (and (and (and (AsyncDisk.DiskOp.ReqWrite2Op_q (Lit |dop#0@@10|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@141|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|)))))))) (not (= (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)) (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) (|AsyncDisk.Variables#Equal| |s'#0@@10| (let ((|dt_update_tmp#0#1@@7| (Lit |s#0@@141|))) (let ((|dt_update#reqWrites#0#1@@2| (|Map#Build| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@141|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite1 (Lit |dop#0@@10|))))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite2 (Lit |dop#0@@10|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@7|)) |dt_update#reqWrites#0#1@@2| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@7|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@7|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@7|)))))))))) :qid |AsyncDiskModelsdfy.82:24| :weight 3 :skolemid |2895| :pattern ( (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@141|) (Lit |s'#0@@10|) (Lit |dop#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@142| T@U) (|s'#0@@11| T@U) (|dop#0@@11| T@U) ) (!  (=> (and (and (and (= (type |s#0@@142|) DatatypeTypeType) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |dop#0@@11|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| |s#0@@142| |s'#0@@11| |dop#0@@11|) (and (and ($Is |s#0@@142| Tclass.AsyncDisk.Variables) ($Is |s'#0@@11| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@11| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2896| :pattern ( (AsyncDisk.__default.AckRead |s#0@@142| |s'#0@@11| |dop#0@@11|)) ))))
(assert (forall ((|s#0@@143| T@U) (|s'#0@@12| T@U) (|dop#0@@12| T@U) ) (!  (=> (and (and (and (= (type |s#0@@143|) DatatypeTypeType) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |dop#0@@12|) DatatypeTypeType)) (and (and ($Is |s#0@@143| Tclass.AsyncDisk.Variables) ($Is |s'#0@@12| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@12| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.AckRead#requires| |s#0@@143| |s'#0@@12| |dop#0@@12|) true)) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2897| :pattern ( (|AsyncDisk.__default.AckRead#requires| |s#0@@143| |s'#0@@12| |dop#0@@12|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((|s#0@@144| T@U) (|s'#0@@13| T@U) (|dop#0@@13| T@U) ) (!  (=> (and (and (and (= (type |s#0@@144|) DatatypeTypeType) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |dop#0@@13|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| |s#0@@144| |s'#0@@13| |dop#0@@13|) (and (and ($Is |s#0@@144| Tclass.AsyncDisk.Variables) ($Is |s'#0@@13| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@13| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.RespReadOp_q |dop#0@@13|) (and (AsyncDisk.Variables.Variables_q |s#0@@144|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@144|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (and (and (and (|$IsA#AsyncDisk.RespRead| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@144|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|$IsA#AsyncDisk.RespRead| (AsyncDisk.DiskOp.respRead |dop#0@@13|))) (AsyncDisk.Variables.Variables_q |s#0@@144|)) (=> (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@144|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (AsyncDisk.DiskOp.respRead |dop#0@@13|)) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@13|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@8| |s#0@@144|)) (let ((|dt_update#respReads#0#0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respReads |s#0@@144|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@8|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@8|) |dt_update#respReads#0#0| (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@8|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@8|)))))) (let ((|dt_update_tmp#0#0@@9| |s#0@@144|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@144|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead (AsyncDisk.Variables.respReads |s#0@@144|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)))))))))) (= (AsyncDisk.__default.AckRead |s#0@@144| |s'#0@@13| |dop#0@@13|)  (and (and (and (AsyncDisk.DiskOp.RespReadOp_q |dop#0@@13|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@144|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@144|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (AsyncDisk.DiskOp.respRead |dop#0@@13|))) (|AsyncDisk.Variables#Equal| |s'#0@@13| (let ((|dt_update_tmp#0#0@@10| |s#0@@144|)) (let ((|dt_update#respReads#0#0@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respReads |s#0@@144|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@10|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@10|) |dt_update#respReads#0#0@@0| (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@10|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@10|))))))))) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2898| :pattern ( (AsyncDisk.__default.AckRead |s#0@@144| |s'#0@@13| |dop#0@@13|)) ))))
(assert  (=> true (forall ((|s#0@@145| T@U) (|s'#0@@14| T@U) (|dop#0@@14| T@U) ) (!  (=> (and (and (and (= (type |s#0@@145|) DatatypeTypeType) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |dop#0@@14|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| (Lit |s#0@@145|) (Lit |s'#0@@14|) (Lit |dop#0@@14|)) (and (and ($Is |s#0@@145| Tclass.AsyncDisk.Variables) ($Is |s'#0@@14| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@14| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.RespReadOp_q (Lit |dop#0@@14|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@145|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@145|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))) (and (and (and (|$IsA#AsyncDisk.RespRead| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|$IsA#AsyncDisk.RespRead| (Lit (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|))))) (AsyncDisk.Variables.Variables_q (Lit |s#0@@145|))) (=> (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@14|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@8| (Lit |s#0@@145|))) (let ((|dt_update#respReads#0#1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@8|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@8|)) |dt_update#respReads#0#1| (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@8|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@8|))))))) (let ((|dt_update_tmp#0#1@@9| (Lit |s#0@@145|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@145|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)))))))))) (= (AsyncDisk.__default.AckRead (Lit |s#0@@145|) (Lit |s'#0@@14|) (Lit |dop#0@@14|))  (and (and (and (AsyncDisk.DiskOp.RespReadOp_q (Lit |dop#0@@14|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@145|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|)))) (|AsyncDisk.Variables#Equal| |s'#0@@14| (let ((|dt_update_tmp#0#1@@10| (Lit |s#0@@145|))) (let ((|dt_update#respReads#0#1@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@145|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@10|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@10|)) |dt_update#respReads#0#1@@0| (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@10|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@10|)))))))))) :qid |AsyncDiskModelsdfy.96:21| :weight 3 :skolemid |2899| :pattern ( (AsyncDisk.__default.AckRead (Lit |s#0@@145|) (Lit |s'#0@@14|) (Lit |dop#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@146| T@U) (|s'#0@@15| T@U) (|dop#0@@15| T@U) ) (!  (=> (and (and (and (= (type |s#0@@146|) DatatypeTypeType) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |dop#0@@15|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| |s#0@@146| |s'#0@@15| |dop#0@@15|) (and (and ($Is |s#0@@146| Tclass.AsyncDisk.Variables) ($Is |s'#0@@15| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@15| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2900| :pattern ( (AsyncDisk.__default.AckWrite |s#0@@146| |s'#0@@15| |dop#0@@15|)) ))))
(assert (forall ((|s#0@@147| T@U) (|s'#0@@16| T@U) (|dop#0@@16| T@U) ) (!  (=> (and (and (and (= (type |s#0@@147|) DatatypeTypeType) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |dop#0@@16|) DatatypeTypeType)) (and (and ($Is |s#0@@147| Tclass.AsyncDisk.Variables) ($Is |s'#0@@16| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@16| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.AckWrite#requires| |s#0@@147| |s'#0@@16| |dop#0@@16|) true)) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2901| :pattern ( (|AsyncDisk.__default.AckWrite#requires| |s#0@@147| |s'#0@@16| |dop#0@@16|)) )))
(assert  (=> true (forall ((|s#0@@148| T@U) (|s'#0@@17| T@U) (|dop#0@@17| T@U) ) (!  (=> (and (and (and (= (type |s#0@@148|) DatatypeTypeType) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |dop#0@@17|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| |s#0@@148| |s'#0@@17| |dop#0@@17|) (and (and ($Is |s#0@@148| Tclass.AsyncDisk.Variables) ($Is |s'#0@@17| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@17| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.RespWriteOp_q |dop#0@@17|) (and (AsyncDisk.Variables.Variables_q |s#0@@148|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@148|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (and (and (and (|$IsA#AsyncDisk.RespWrite| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@148|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|$IsA#AsyncDisk.RespWrite| (AsyncDisk.DiskOp.respWrite |dop#0@@17|))) (AsyncDisk.Variables.Variables_q |s#0@@148|)) (=> (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@148|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (AsyncDisk.DiskOp.respWrite |dop#0@@17|)) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@17|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@11| |s#0@@148|)) (let ((|dt_update#respWrites#0#0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respWrites |s#0@@148|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@11|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@11|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@11|) |dt_update#respWrites#0#0| (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@11|)))))) (let ((|dt_update_tmp#0#0@@12| |s#0@@148|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@148|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite (AsyncDisk.Variables.respWrites |s#0@@148|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)))))))))) (= (AsyncDisk.__default.AckWrite |s#0@@148| |s'#0@@17| |dop#0@@17|)  (and (and (and (AsyncDisk.DiskOp.RespWriteOp_q |dop#0@@17|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@148|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@148|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (AsyncDisk.DiskOp.respWrite |dop#0@@17|))) (|AsyncDisk.Variables#Equal| |s'#0@@17| (let ((|dt_update_tmp#0#0@@13| |s#0@@148|)) (let ((|dt_update#respWrites#0#0@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respWrites |s#0@@148|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@13|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@13|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@13|) |dt_update#respWrites#0#0@@0| (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@13|))))))))) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2902| :pattern ( (AsyncDisk.__default.AckWrite |s#0@@148| |s'#0@@17| |dop#0@@17|)) ))))
(assert  (=> true (forall ((|s#0@@149| T@U) (|s'#0@@18| T@U) (|dop#0@@18| T@U) ) (!  (=> (and (and (and (= (type |s#0@@149|) DatatypeTypeType) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |dop#0@@18|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| (Lit |s#0@@149|) (Lit |s'#0@@18|) (Lit |dop#0@@18|)) (and (and ($Is |s#0@@149| Tclass.AsyncDisk.Variables) ($Is |s'#0@@18| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@18| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.RespWriteOp_q (Lit |dop#0@@18|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@149|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))) (and (and (and (|$IsA#AsyncDisk.RespWrite| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|$IsA#AsyncDisk.RespWrite| (Lit (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|))))) (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|))) (=> (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@18|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@11| (Lit |s#0@@149|))) (let ((|dt_update#respWrites#0#1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@11|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@11|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@11|)) |dt_update#respWrites#0#1| (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@11|))))))) (let ((|dt_update_tmp#0#1@@12| (Lit |s#0@@149|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)))))))))) (= (AsyncDisk.__default.AckWrite (Lit |s#0@@149|) (Lit |s'#0@@18|) (Lit |dop#0@@18|))  (and (and (and (AsyncDisk.DiskOp.RespWriteOp_q (Lit |dop#0@@18|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@149|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|)))) (|AsyncDisk.Variables#Equal| |s'#0@@18| (let ((|dt_update_tmp#0#1@@13| (Lit |s#0@@149|))) (let ((|dt_update#respWrites#0#1@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@149|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@13|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@13|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@13|)) |dt_update#respWrites#0#1@@0| (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@13|)))))))))) :qid |AsyncDiskModelsdfy.104:22| :weight 3 :skolemid |2903| :pattern ( (AsyncDisk.__default.AckWrite (Lit |s#0@@149|) (Lit |s'#0@@18|) (Lit |dop#0@@18|))) ))))
(assert  (=> true (forall ((|s#0@@150| T@U) (|s'#0@@19| T@U) (|dop#0@@19| T@U) ) (!  (=> (and (and (and (= (type |s#0@@150|) DatatypeTypeType) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |dop#0@@19|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| |s#0@@150| |s'#0@@19| |dop#0@@19|) (and (and ($Is |s#0@@150| Tclass.AsyncDisk.Variables) ($Is |s'#0@@19| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@19| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2904| :pattern ( (AsyncDisk.__default.Stutter |s#0@@150| |s'#0@@19| |dop#0@@19|)) ))))
(assert (forall ((|s#0@@151| T@U) (|s'#0@@20| T@U) (|dop#0@@20| T@U) ) (!  (=> (and (and (and (= (type |s#0@@151|) DatatypeTypeType) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |dop#0@@20|) DatatypeTypeType)) (and (and ($Is |s#0@@151| Tclass.AsyncDisk.Variables) ($Is |s'#0@@20| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@20| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.Stutter#requires| |s#0@@151| |s'#0@@20| |dop#0@@20|) true)) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2905| :pattern ( (|AsyncDisk.__default.Stutter#requires| |s#0@@151| |s'#0@@20| |dop#0@@20|)) )))
(assert  (=> true (forall ((|s#0@@152| T@U) (|s'#0@@21| T@U) (|dop#0@@21| T@U) ) (!  (=> (and (and (and (= (type |s#0@@152|) DatatypeTypeType) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |dop#0@@21|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| |s#0@@152| |s'#0@@21| |dop#0@@21|) (and (and ($Is |s#0@@152| Tclass.AsyncDisk.Variables) ($Is |s'#0@@21| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@21| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.NoDiskOp_q |dop#0@@21|) (and (|$IsA#AsyncDisk.Variables| |s'#0@@21|) (|$IsA#AsyncDisk.Variables| |s#0@@152|))) (= (AsyncDisk.__default.Stutter |s#0@@152| |s'#0@@21| |dop#0@@21|)  (and (AsyncDisk.DiskOp.NoDiskOp_q |dop#0@@21|) (|AsyncDisk.Variables#Equal| |s'#0@@21| |s#0@@152|))))) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2906| :pattern ( (AsyncDisk.__default.Stutter |s#0@@152| |s'#0@@21| |dop#0@@21|)) ))))
(assert  (=> true (forall ((|s#0@@153| T@U) (|s'#0@@22| T@U) (|dop#0@@22| T@U) ) (!  (=> (and (and (and (= (type |s#0@@153|) DatatypeTypeType) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |dop#0@@22|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| (Lit |s#0@@153|) (Lit |s'#0@@22|) (Lit |dop#0@@22|)) (and (and ($Is |s#0@@153| Tclass.AsyncDisk.Variables) ($Is |s'#0@@22| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@22| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.NoDiskOp_q (Lit |dop#0@@22|))))) (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@22|)) (|$IsA#AsyncDisk.Variables| (Lit |s#0@@153|)))) (= (AsyncDisk.__default.Stutter (Lit |s#0@@153|) (Lit |s'#0@@22|) (Lit |dop#0@@22|))  (and (AsyncDisk.DiskOp.NoDiskOp_q (Lit |dop#0@@22|)) (|AsyncDisk.Variables#Equal| |s'#0@@22| |s#0@@153|))))) :qid |AsyncDiskModelsdfy.112:21| :weight 3 :skolemid |2907| :pattern ( (AsyncDisk.__default.Stutter (Lit |s#0@@153|) (Lit |s'#0@@22|) (Lit |dop#0@@22|))) ))))
(assert  (=> true (forall ((|s#0@@154| T@U) (|s'#0@@23| T@U) (|dop#0@@23| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@154|) DatatypeTypeType) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |dop#0@@23|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| |s#0@@154| |s'#0@@23| |dop#0@@23| |step#0|) (and (and (and ($Is |s#0@@154| Tclass.AsyncDisk.Variables) ($Is |s'#0@@23| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@23| Tclass.AsyncDisk.DiskOp)) ($Is |step#0| Tclass.AsyncDisk.Step)))) true) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2908| :pattern ( (AsyncDisk.__default.NextStep |s#0@@154| |s'#0@@23| |dop#0@@23| |step#0|)) ))))
(assert (forall ((|s#0@@155| T@U) (|s'#0@@24| T@U) (|dop#0@@24| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@155|) DatatypeTypeType) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |dop#0@@24|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@155| Tclass.AsyncDisk.Variables) ($Is |s'#0@@24| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@24| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@0| Tclass.AsyncDisk.Step))) (= (|AsyncDisk.__default.NextStep#requires| |s#0@@155| |s'#0@@24| |dop#0@@24| |step#0@@0|) true)) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2909| :pattern ( (|AsyncDisk.__default.NextStep#requires| |s#0@@155| |s'#0@@24| |dop#0@@24| |step#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@156| T@U) (|s'#0@@25| T@U) (|dop#0@@25| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@156|) DatatypeTypeType) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |dop#0@@25|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25| |step#0@@1|) (and (and (and ($Is |s#0@@156| Tclass.AsyncDisk.Variables) ($Is |s'#0@@25| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@25| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@1| Tclass.AsyncDisk.Step)))) (and (and (=> (AsyncDisk.Step.RecvReadStep_q |step#0@@1|) (|AsyncDisk.__default.RecvRead#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvReadStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|) (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|) (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|)) (and (=> (AsyncDisk.Step.AckReadStep_q |step#0@@1|) (|AsyncDisk.__default.AckRead#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.AckReadStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.AckWriteStep_q |step#0@@1|) (|AsyncDisk.__default.AckWrite#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.AckWriteStep_q |step#0@@1|)) (|AsyncDisk.__default.Stutter#canCall| |s#0@@156| |s'#0@@25| |dop#0@@25|))))))))))) (= (AsyncDisk.__default.NextStep |s#0@@156| |s'#0@@25| |dop#0@@25| |step#0@@1|) (ite (AsyncDisk.Step.RecvReadStep_q |step#0@@1|) (AsyncDisk.__default.RecvRead |s#0@@156| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|) (AsyncDisk.__default.RecvWrite |s#0@@156| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|) (AsyncDisk.__default.RecvWrite2 |s#0@@156| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.AckReadStep_q |step#0@@1|) (AsyncDisk.__default.AckRead |s#0@@156| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.AckWriteStep_q |step#0@@1|) (AsyncDisk.__default.AckWrite |s#0@@156| |s'#0@@25| |dop#0@@25|) (AsyncDisk.__default.Stutter |s#0@@156| |s'#0@@25| |dop#0@@25|))))))))) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2910| :pattern ( (AsyncDisk.__default.NextStep |s#0@@156| |s'#0@@25| |dop#0@@25| |step#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@157| T@U) (|s'#0@@26| T@U) (|dop#0@@26| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@157|) DatatypeTypeType) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |dop#0@@26|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|)) (and (and (and ($Is |s#0@@157| Tclass.AsyncDisk.Variables) ($Is |s'#0@@26| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@26| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@2| Tclass.AsyncDisk.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvRead#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvWrite#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvWrite2#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.AckRead#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.AckWrite#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|)))))) (|AsyncDisk.__default.Stutter#canCall| (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)))))))))))) (= (AsyncDisk.__default.NextStep (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|)) (ite (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvRead (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvWrite (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.AckRead (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.AckWrite (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (AsyncDisk.__default.Stutter (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)))))))))) :qid |AsyncDiskModelsdfy.118:22| :weight 3 :skolemid |2911| :pattern ( (AsyncDisk.__default.NextStep (Lit |s#0@@157|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@158| T@U) (|s'#0@@27| T@U) (|dop#0@@27| T@U) ) (!  (=> (and (and (and (= (type |s#0@@158|) DatatypeTypeType) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |dop#0@@27|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| |s#0@@158| |s'#0@@27| |dop#0@@27|) (and (and ($Is |s#0@@158| Tclass.AsyncDisk.Variables) ($Is |s'#0@@27| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@27| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2912| :pattern ( (AsyncDisk.__default.Next |s#0@@158| |s'#0@@27| |dop#0@@27|)) ))))
(assert (forall ((|s#0@@159| T@U) (|s'#0@@28| T@U) (|dop#0@@28| T@U) ) (!  (=> (and (and (and (= (type |s#0@@159|) DatatypeTypeType) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |dop#0@@28|) DatatypeTypeType)) (and (and ($Is |s#0@@159| Tclass.AsyncDisk.Variables) ($Is |s'#0@@28| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@28| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.Next#requires| |s#0@@159| |s'#0@@28| |dop#0@@28|) true)) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2913| :pattern ( (|AsyncDisk.__default.Next#requires| |s#0@@159| |s'#0@@28| |dop#0@@28|)) )))
(assert  (=> true (forall ((|s#0@@160| T@U) (|s'#0@@29| T@U) (|dop#0@@29| T@U) ) (!  (=> (and (and (and (= (type |s#0@@160|) DatatypeTypeType) (= (type |s'#0@@29|) DatatypeTypeType)) (= (type |dop#0@@29|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| |s#0@@160| |s'#0@@29| |dop#0@@29|) (and (and ($Is |s#0@@160| Tclass.AsyncDisk.Variables) ($Is |s'#0@@29| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@29| Tclass.AsyncDisk.DiskOp)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.AsyncDisk.Step)) (|AsyncDisk.__default.NextStep#canCall| |s#0@@160| |s'#0@@29| |dop#0@@29| |step#0@@3|)) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2915| :pattern ( (AsyncDisk.__default.NextStep |s#0@@160| |s'#0@@29| |dop#0@@29| |step#0@@3|)) )) (= (AsyncDisk.__default.Next |s#0@@160| |s'#0@@29| |dop#0@@29|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.AsyncDisk.Step) (AsyncDisk.__default.NextStep |s#0@@160| |s'#0@@29| |dop#0@@29| |step#0@@4|))) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2914| :pattern ( (AsyncDisk.__default.NextStep |s#0@@160| |s'#0@@29| |dop#0@@29| |step#0@@4|)) ))))) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2916| :pattern ( (AsyncDisk.__default.Next |s#0@@160| |s'#0@@29| |dop#0@@29|)) ))))
(assert  (=> true (forall ((|s#0@@161| T@U) (|s'#0@@30| T@U) (|dop#0@@30| T@U) ) (!  (=> (and (and (and (= (type |s#0@@161|) DatatypeTypeType) (= (type |s'#0@@30|) DatatypeTypeType)) (= (type |dop#0@@30|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| (Lit |s#0@@161|) (Lit |s'#0@@30|) (Lit |dop#0@@30|)) (and (and ($Is |s#0@@161| Tclass.AsyncDisk.Variables) ($Is |s'#0@@30| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@30| Tclass.AsyncDisk.DiskOp)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.AsyncDisk.Step)) (|AsyncDisk.__default.NextStep#canCall| (Lit |s#0@@161|) (Lit |s'#0@@30|) (Lit |dop#0@@30|) |step#1|)) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2918| :pattern ( (AsyncDisk.__default.NextStep |s#0@@161| |s'#0@@30| |dop#0@@30| |step#1|)) )) (= (AsyncDisk.__default.Next (Lit |s#0@@161|) (Lit |s'#0@@30|) (Lit |dop#0@@30|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.AsyncDisk.Step) (AsyncDisk.__default.NextStep (Lit |s#0@@161|) (Lit |s'#0@@30|) (Lit |dop#0@@30|) |step#1@@0|))) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2917| :pattern ( (AsyncDisk.__default.NextStep |s#0@@161| |s'#0@@30| |dop#0@@30| |step#1@@0|)) ))))) :qid |AsyncDiskModelsdfy.129:18| :weight 3 :skolemid |2919| :pattern ( (AsyncDisk.__default.Next (Lit |s#0@@161|) (Lit |s'#0@@30|) (Lit |dop#0@@30|))) ))))
(assert (forall (($ly@@346 T@U) (|s#0@@162| T@U) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |s#0@@162|) (SeqType BoxType))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@346) |s#0@@162|) (AsyncDisk.__default.ChecksumChecksOut $ly@@346 |s#0@@162|))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2920| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@346) |s#0@@162|)) )))
(assert (forall (($ly@@347 T@U) (|s#0@@163| T@U) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@163|) (SeqType BoxType))) (= (AsyncDisk.__default.ChecksumChecksOut $ly@@347 |s#0@@163|) (AsyncDisk.__default.ChecksumChecksOut $LZ |s#0@@163|))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2921| :pattern ( (AsyncDisk.__default.ChecksumChecksOut (AsFuelBottom $ly@@347) |s#0@@163|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|s#0@@164| T@U) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@164|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@164|) ($Is |s#0@@164| (TSeq Tclass.NativeTypes.byte)))) true) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2922| :pattern ( (AsyncDisk.__default.ChecksumChecksOut $ly@@348 |s#0@@164|)) ))))
(assert (forall (($ly@@349 T@U) (|s#0@@165| T@U) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |s#0@@165|) (SeqType BoxType))) ($Is |s#0@@165| (TSeq Tclass.NativeTypes.byte))) (= (|AsyncDisk.__default.ChecksumChecksOut#requires| $ly@@349 |s#0@@165|) true)) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2923| :pattern ( (|AsyncDisk.__default.ChecksumChecksOut#requires| $ly@@349 |s#0@@165|)) )))
(assert  (=> true (forall (($ly@@350 T@U) (|s#0@@166| T@U) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |s#0@@166|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@166|) ($Is |s#0@@166| (TSeq Tclass.NativeTypes.byte)))) (and (=> (>= (|Seq#Length| |s#0@@166|) (LitInt 32)) (|CRC32__C.__default.crc32__c__padded#canCall| (|Seq#Drop| |s#0@@166| (LitInt 32)))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@350) |s#0@@166|)  (and (>= (|Seq#Length| |s#0@@166|) (LitInt 32)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |s#0@@166| (LitInt 32)) (LitInt 0)) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| |s#0@@166| (LitInt 32)))))))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2924| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@350) |s#0@@166|)) ))))
(assert  (=> true (forall (($ly@@351 T@U) (|s#0@@167| T@U) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |s#0@@167|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit |s#0@@167|)) ($Is |s#0@@167| (TSeq Tclass.NativeTypes.byte)))) (and (=> (>= (|Seq#Length| (Lit |s#0@@167|)) (LitInt 32)) (|CRC32__C.__default.crc32__c__padded#canCall| (Lit (|Seq#Drop| (Lit |s#0@@167|) (LitInt 32))))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@351) (Lit |s#0@@167|))  (and (>= (|Seq#Length| (Lit |s#0@@167|)) (LitInt 32)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@167|) (LitInt 32)) (LitInt 0)) (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (Lit |s#0@@167|) (LitInt 32))))))))) :qid |AsyncDiskModelsdfy.149:23| :weight 3 :skolemid |2925| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@351) (Lit |s#0@@167|))) ))))
(assert  (=> true (forall ((|realContents#0| T@U) (|fakeContents#0| T@U) (|i#0@@134| Int) (|j#0@@11| Int) ) (!  (=> (and (and (= (type |realContents#0|) (SeqType BoxType)) (= (type |fakeContents#0|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0| |fakeContents#0| |i#0@@134| |j#0@@11|) (and (and ($Is |realContents#0| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| |realContents#0|) (|Seq#Length| |fakeContents#0|)) (and (and (<= (LitInt 0) |i#0@@134|) (<= |i#0@@134| |j#0@@11|)) (<= |j#0@@11| (|Seq#Length| |realContents#0|))))))) true) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2926| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0| |fakeContents#0| |i#0@@134| |j#0@@11|)) ))))
(assert (forall ((|realContents#0@@0| T@U) (|fakeContents#0@@0| T@U) (|i#0@@135| Int) (|j#0@@12| Int) ) (!  (=> (and (and (= (type |realContents#0@@0|) (SeqType BoxType)) (= (type |fakeContents#0@@0|) (SeqType BoxType))) (and ($Is |realContents#0@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@0| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| |realContents#0@@0| |fakeContents#0@@0| |i#0@@135| |j#0@@12|)  (and (= (|Seq#Length| |realContents#0@@0|) (|Seq#Length| |fakeContents#0@@0|)) (and (and (<= (LitInt 0) |i#0@@135|) (<= |i#0@@135| |j#0@@12|)) (<= |j#0@@12| (|Seq#Length| |realContents#0@@0|)))))) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2927| :pattern ( (|AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| |realContents#0@@0| |fakeContents#0@@0| |i#0@@135| |j#0@@12|)) )))
(assert (= (type StartFuel_AsyncDisk._default.ChecksumChecksOut) LayerTypeType))
(assert  (=> true (forall ((|realContents#0@@1| T@U) (|fakeContents#0@@1| T@U) (|i#0@@136| Int) (|j#0@@13| Int) ) (!  (=> (and (and (= (type |realContents#0@@1|) (SeqType BoxType)) (= (type |fakeContents#0@@1|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0@@1| |fakeContents#0@@1| |i#0@@136| |j#0@@13|) (and (and ($Is |realContents#0@@1| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| |realContents#0@@1|) (|Seq#Length| |fakeContents#0@@1|)) (and (and (<= (LitInt 0) |i#0@@136|) (<= |i#0@@136| |j#0@@13|)) (<= |j#0@@13| (|Seq#Length| |realContents#0@@1|))))))) (and (and (|AsyncDisk.__default.ChecksumChecksOut#canCall| (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@13|) |i#0@@136|)) (=> (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@13|) |i#0@@136|)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@13|) |i#0@@136|)))) (= (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@1| |fakeContents#0@@1| |i#0@@136| |j#0@@13|)  (=> (and (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@13|) |i#0@@136|)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@13|) |i#0@@136|))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@13|) |i#0@@136|) (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@13|) |i#0@@136|)))))) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2928| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@1| |fakeContents#0@@1| |i#0@@136| |j#0@@13|)) ))))
(assert  (=> true (forall ((|realContents#0@@2| T@U) (|fakeContents#0@@2| T@U) (|i#0@@137| Int) (|j#0@@14| Int) ) (!  (=> (and (and (= (type |realContents#0@@2|) (SeqType BoxType)) (= (type |fakeContents#0@@2|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@137|) (LitInt |j#0@@14|)) (and (and ($Is |realContents#0@@2| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| (Lit |realContents#0@@2|)) (|Seq#Length| (Lit |fakeContents#0@@2|))) (and (and (<= (LitInt 0) (LitInt |i#0@@137|)) (<= (LitInt |i#0@@137|) (LitInt |j#0@@14|))) (<= (LitInt |j#0@@14|) (|Seq#Length| (Lit |realContents#0@@2|)))))))) (and (and (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|)))) (=> (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|)))) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|)))))) (= (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@137|) (LitInt |j#0@@14|))  (=> (and (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|)))) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|)) (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@14|)) (LitInt |i#0@@137|))))))) :qid |AsyncDiskModelsdfy.154:39| :weight 3 :skolemid |2929| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@137|) (LitInt |j#0@@14|))) ))))
(assert  (=> true (forall ((|realContents#0@@3| T@U) (|fakeContents#0@@3| T@U) ) (!  (=> (and (and (= (type |realContents#0@@3|) (SeqType BoxType)) (= (type |fakeContents#0@@3|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@3| |fakeContents#0@@3|) (and (and ($Is |realContents#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@3| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| |realContents#0@@3|) (|Seq#Length| |fakeContents#0@@3|))))) true) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2930| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@3| |fakeContents#0@@3|)) ))))
(assert (forall ((|realContents#0@@4| T@U) (|fakeContents#0@@4| T@U) ) (!  (=> (and (and (= (type |realContents#0@@4|) (SeqType BoxType)) (= (type |fakeContents#0@@4|) (SeqType BoxType))) (and ($Is |realContents#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@4| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.AllChecksumsCheckOut#requires| |realContents#0@@4| |fakeContents#0@@4|) (= (|Seq#Length| |realContents#0@@4|) (|Seq#Length| |fakeContents#0@@4|)))) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2931| :pattern ( (|AsyncDisk.__default.AllChecksumsCheckOut#requires| |realContents#0@@4| |fakeContents#0@@4|)) )))
(assert  (=> true (forall ((|realContents#0@@5| T@U) (|fakeContents#0@@5| T@U) ) (!  (=> (and (and (= (type |realContents#0@@5|) (SeqType BoxType)) (= (type |fakeContents#0@@5|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@5| |fakeContents#0@@5|) (and (and ($Is |realContents#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@5| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| |realContents#0@@5|) (|Seq#Length| |fakeContents#0@@5|))))) (and (forall ((|i#0@@138| Int) (|j#0@@15| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@138|) (<= |i#0@@138| |j#0@@15|)) (<= |j#0@@15| (|Seq#Length| |realContents#0@@5|))) (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0@@5| |fakeContents#0@@5| |i#0@@138| |j#0@@15|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2933| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@138| |j#0@@15|)) )) (= (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@5| |fakeContents#0@@5|) (forall ((|i#0@@139| Int) (|j#0@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@139|) (<= |i#0@@139| |j#0@@16|)) (<= |j#0@@16| (|Seq#Length| |realContents#0@@5|))) (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@139| |j#0@@16|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2932| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@139| |j#0@@16|)) ))))) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2934| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@5| |fakeContents#0@@5|)) ))))
(assert  (=> true (forall ((|realContents#0@@6| T@U) (|fakeContents#0@@6| T@U) ) (!  (=> (and (and (= (type |realContents#0@@6|) (SeqType BoxType)) (= (type |fakeContents#0@@6|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|)) (and (and ($Is |realContents#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@6| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| (Lit |realContents#0@@6|)) (|Seq#Length| (Lit |fakeContents#0@@6|)))))) (and (forall ((|i#1@@19| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@19|) (<= |i#1@@19| |j#1@@1|)) (<= |j#1@@1| (|Seq#Length| (Lit |realContents#0@@6|)))) (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|) |i#1@@19| |j#1@@1|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2936| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@6| |fakeContents#0@@6| |i#1@@19| |j#1@@1|)) )) (= (AsyncDisk.__default.AllChecksumsCheckOut (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|)) (forall ((|i#1@@20| Int) (|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@20|) (<= |i#1@@20| |j#1@@2|)) (<= |j#1@@2| (|Seq#Length| (Lit |realContents#0@@6|)))) (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|) |i#1@@20| |j#1@@2|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2935| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@6| |fakeContents#0@@6| |i#1@@20| |j#1@@2|)) ))))) :qid |AsyncDiskModelsdfy.171:34| :weight 3 :skolemid |2937| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@168| T@U) (|s'#0@@31| T@U) (|id#0| Int) (|fakeContents#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@168|) DatatypeTypeType) (= (type |s'#0@@31|) DatatypeTypeType)) (= (type |fakeContents#0@@7|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@168| |s'#0@@31| |id#0| |fakeContents#0@@7|) (and (and (and ($Is |s#0@@168| Tclass.AsyncDisk.Variables) ($Is |s'#0@@31| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0|) (< |id#0| 18446744073709551616))) ($Is |fakeContents#0@@7| (TSeq Tclass.NativeTypes.byte))))) true) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2938| :pattern ( (AsyncDisk.__default.ProcessReadFailure |s#0@@168| |s'#0@@31| |id#0| |fakeContents#0@@7|)) ))))
(assert (forall ((|s#0@@169| T@U) (|s'#0@@32| T@U) (|id#0@@0| Int) (|fakeContents#0@@8| T@U) ) (!  (=> (and (and (= (type |s#0@@169|) DatatypeTypeType) (= (type |s'#0@@32|) DatatypeTypeType)) (= (type |fakeContents#0@@8|) (SeqType BoxType))) (=> (and (and (and ($Is |s#0@@169| Tclass.AsyncDisk.Variables) ($Is |s'#0@@32| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@0|) (< |id#0@@0| 18446744073709551616))) ($Is |fakeContents#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|AsyncDisk.__default.ProcessReadFailure#requires| |s#0@@169| |s'#0@@32| |id#0@@0| |fakeContents#0@@8|) true))) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2939| :pattern ( (|AsyncDisk.__default.ProcessReadFailure#requires| |s#0@@169| |s'#0@@32| |id#0@@0| |fakeContents#0@@8|)) )))
(assert  (=> true (forall ((|s#0@@170| T@U) (|s'#0@@33| T@U) (|id#0@@1| Int) (|fakeContents#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@170|) DatatypeTypeType) (= (type |s'#0@@33|) DatatypeTypeType)) (= (type |fakeContents#0@@9|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@170| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|) (and (and (and ($Is |s#0@@170| Tclass.AsyncDisk.Variables) ($Is |s'#0@@33| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@1|) (< |id#0@@1| 18446744073709551616))) ($Is |fakeContents#0@@9| (TSeq Tclass.NativeTypes.byte))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@170|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@170|)) ($Box (int_2_U |id#0@@1|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@170|) (let ((|req#0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@170|)) ($Box (int_2_U |id#0@@1|)))))) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (=> (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#0|)) (and (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|))) (=> (<= (AsyncDisk.ReqRead.addr |req#0|) (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|))) (and (and (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (AsyncDisk.Variables.Variables_q |s#0@@170|)) (=> (<= (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|)) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@170|))) (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@170|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|))) (let ((|realContents#0@@7| (|Seq#Drop| (|Seq#Take| (AsyncDisk.Variables.contents |s#0@@170|) (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|))) (AsyncDisk.ReqRead.addr |req#0|)))) (=> (= (|Seq#Length| |fakeContents#0@@9|) (|Seq#Length| |realContents#0@@7|)) (=> (not (|Seq#Equal| |fakeContents#0@@9| |realContents#0@@7|)) (and (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@7| |fakeContents#0@@9|) (=> (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@7| |fakeContents#0@@9|) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@33|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#1#0| (let ((|dt_update_tmp#0#0@@14| |s#0@@170|)) (let ((|dt_update#reqReads#0#0@@1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@170|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@1| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@14|)))))) (let ((|dt_update#respReads#0#0@@1| (|Map#Build| (AsyncDisk.Variables.respReads |s#0@@170|) ($Box (int_2_U |id#0@@1|)) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#0|) |fakeContents#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0|) |dt_update#respReads#0#0@@1| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#0|) (AsyncDisk.Variables.contents |dt_update_tmp#1#0|)))))) (and (let ((|dt_update_tmp#0#0@@15| |s#0@@170|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@170|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead (AsyncDisk.Variables.reqReads |s#0@@170|) ($Box (int_2_U |id#0@@1|)))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)))) (let ((|dt_update_tmp#1#0@@0| (let ((|dt_update_tmp#0#0@@16| |s#0@@170|)) (let ((|dt_update#reqReads#0#0@@2| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@170|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@2| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@16|)))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@170|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)))))))))))))))))))))) (= (AsyncDisk.__default.ProcessReadFailure |s#0@@170| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|)  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@170|)) ($Box (int_2_U |id#0@@1|)))) (let ((|req#0@@0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@170|)) ($Box (int_2_U |id#0@@1|)))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#0@@0|)) (<= (AsyncDisk.ReqRead.addr |req#0@@0|) (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|)))) (<= (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|)) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@170|)))) (let ((|realContents#0@@8| (|Seq#Drop| (|Seq#Take| (AsyncDisk.Variables.contents |s#0@@170|) (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|))) (AsyncDisk.ReqRead.addr |req#0@@0|)))) (and (and (and (= (|Seq#Length| |fakeContents#0@@9|) (|Seq#Length| |realContents#0@@8|)) (not (|Seq#Equal| |fakeContents#0@@9| |realContents#0@@8|))) (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@8| |fakeContents#0@@9|)) (|AsyncDisk.Variables#Equal| |s'#0@@33| (let ((|dt_update_tmp#1#0@@1| (let ((|dt_update_tmp#0#0@@17| |s#0@@170|)) (let ((|dt_update#reqReads#0#0@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@170|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@3| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@17|)))))) (let ((|dt_update#respReads#0#0@@2| (|Map#Build| (AsyncDisk.Variables.respReads |s#0@@170|) ($Box (int_2_U |id#0@@1|)) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#0@@0|) |fakeContents#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@1|) |dt_update#respReads#0#0@@2| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#0@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@1|))))))))))))) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2940| :pattern ( (AsyncDisk.__default.ProcessReadFailure |s#0@@170| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|)) ))))
(assert  (=> true (forall ((|s#0@@171| T@U) (|s'#0@@34| T@U) (|id#0@@2| Int) (|fakeContents#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@171|) DatatypeTypeType) (= (type |s'#0@@34|) DatatypeTypeType)) (= (type |fakeContents#0@@10|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| (Lit |s#0@@171|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|)) (and (and (and ($Is |s#0@@171| Tclass.AsyncDisk.Variables) ($Is |s'#0@@34| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@2|) (< |id#0@@2| 18446744073709551616))) ($Is |fakeContents#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U |id#0@@2|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|)) (let ((|req#1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|)))) ($Box (int_2_U (LitInt |id#0@@2|))))))) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (=> (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#1|)) (and (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|))) (=> (<= (AsyncDisk.ReqRead.addr |req#1|) (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|))) (and (and (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|))) (=> (<= (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|)) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@171|))))) (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|)) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|))) (let ((|realContents#1| (|Seq#Drop| (|Seq#Take| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@171|))) (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|))) (AsyncDisk.ReqRead.addr |req#1|)))) (=> (= (|Seq#Length| (Lit |fakeContents#0@@10|)) (|Seq#Length| |realContents#1|)) (=> (not (|Seq#Equal| |fakeContents#0@@10| |realContents#1|)) (and (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#1| (Lit |fakeContents#0@@10|)) (=> (AsyncDisk.__default.AllChecksumsCheckOut |realContents#1| (Lit |fakeContents#0@@10|)) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@34|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#1#1| (let ((|dt_update_tmp#0#1@@14| (Lit |s#0@@171|))) (let ((|dt_update#reqReads#0#1@@1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@1| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@14|))))))) (let ((|dt_update#respReads#0#1@@1| (|Map#Build| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#1|) (Lit |fakeContents#0@@10|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1|) |dt_update#respReads#0#1@@1| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#1|)))))) (and (let ((|dt_update_tmp#0#1@@15| (Lit |s#0@@171|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)))) (let ((|dt_update_tmp#1#1@@0| (let ((|dt_update_tmp#0#1@@16| (Lit |s#0@@171|))) (let ((|dt_update#reqReads#0#1@@2| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@2| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@16|))))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@171|)) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)))))))))))))))))))))) (= (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@171|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|))  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U |id#0@@2|)))) (let ((|req#1@@0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|)))) ($Box (int_2_U (LitInt |id#0@@2|))))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#1@@0|)) (<= (AsyncDisk.ReqRead.addr |req#1@@0|) (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|)))) (<= (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|)) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@171|)))))) (let ((|realContents#1@@0| (|Seq#Drop| (|Seq#Take| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@171|))) (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|))) (AsyncDisk.ReqRead.addr |req#1@@0|)))) (and (and (and (= (|Seq#Length| (Lit |fakeContents#0@@10|)) (|Seq#Length| |realContents#1@@0|)) (not (|Seq#Equal| |fakeContents#0@@10| |realContents#1@@0|))) (AsyncDisk.__default.AllChecksumsCheckOut |realContents#1@@0| (Lit |fakeContents#0@@10|))) (|AsyncDisk.Variables#Equal| |s'#0@@34| (let ((|dt_update_tmp#1#1@@1| (let ((|dt_update_tmp#0#1@@17| (Lit |s#0@@171|))) (let ((|dt_update#reqReads#0#1@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@3| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@17|))))))) (let ((|dt_update#respReads#0#1@@2| (|Map#Build| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@171|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#1@@0|) (Lit |fakeContents#0@@10|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@1|) |dt_update#respReads#0#1@@2| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#1@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@1|))))))))))))) :qid |AsyncDiskModelsdfy.178:32| :weight 3 :skolemid |2941| :pattern ( (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@171|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|))) ))))
(assert (forall ((arg0@@590 T@U) (arg1@@284 T@U) (arg2@@162 Int) (arg3@@111 T@U) ) (! (= (type (AsyncDisk.__default.splice arg0@@590 arg1@@284 arg2@@162 arg3@@111)) (SeqType BoxType)) :qid |funType:AsyncDisk.__default.splice| :pattern ( (AsyncDisk.__default.splice arg0@@590 arg1@@284 arg2@@162 arg3@@111)) )))
(assert (forall (($ly@@352 T@U) (|bytes#0@@19| T@U) (|start#0@@46| Int) (|ins#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@352) LayerTypeType) (= (type |bytes#0@@19|) (SeqType BoxType))) (= (type |ins#0@@5|) (SeqType BoxType))) (= (AsyncDisk.__default.splice ($LS $ly@@352) |bytes#0@@19| |start#0@@46| |ins#0@@5|) (AsyncDisk.__default.splice $ly@@352 |bytes#0@@19| |start#0@@46| |ins#0@@5|))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2942| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@352) |bytes#0@@19| |start#0@@46| |ins#0@@5|)) )))
(assert (forall (($ly@@353 T@U) (|bytes#0@@20| T@U) (|start#0@@47| Int) (|ins#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@353) LayerTypeType) (= (type |bytes#0@@20|) (SeqType BoxType))) (= (type |ins#0@@6|) (SeqType BoxType))) (= (AsyncDisk.__default.splice $ly@@353 |bytes#0@@20| |start#0@@47| |ins#0@@6|) (AsyncDisk.__default.splice $LZ |bytes#0@@20| |start#0@@47| |ins#0@@6|))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2943| :pattern ( (AsyncDisk.__default.splice (AsFuelBottom $ly@@353) |bytes#0@@20| |start#0@@47| |ins#0@@6|)) )))
(assert  (=> true (forall (($ly@@354 T@U) (|bytes#0@@21| T@U) (|start#0@@48| Int) (|ins#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@354) LayerTypeType) (= (type |bytes#0@@21|) (SeqType BoxType))) (= (type |ins#0@@7|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| |bytes#0@@21| |start#0@@48| |ins#0@@7|) (and (and ($Is |bytes#0@@21| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@7| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |start#0@@48|) (<= (+ |start#0@@48| (|Seq#Length| |ins#0@@7|)) (|Seq#Length| |bytes#0@@21|)))))) ($Is (AsyncDisk.__default.splice $ly@@354 |bytes#0@@21| |start#0@@48| |ins#0@@7|) (TSeq Tclass.NativeTypes.byte))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2944| :pattern ( (AsyncDisk.__default.splice $ly@@354 |bytes#0@@21| |start#0@@48| |ins#0@@7|)) ))))
(assert (forall (($ly@@355 T@U) (|bytes#0@@22| T@U) (|start#0@@49| Int) (|ins#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@355) LayerTypeType) (= (type |bytes#0@@22|) (SeqType BoxType))) (= (type |ins#0@@8|) (SeqType BoxType))) (and ($Is |bytes#0@@22| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@8| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.splice#requires| $ly@@355 |bytes#0@@22| |start#0@@49| |ins#0@@8|)  (and (<= (LitInt 0) |start#0@@49|) (<= (+ |start#0@@49| (|Seq#Length| |ins#0@@8|)) (|Seq#Length| |bytes#0@@22|))))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2945| :pattern ( (|AsyncDisk.__default.splice#requires| $ly@@355 |bytes#0@@22| |start#0@@49| |ins#0@@8|)) )))
(assert  (=> true (forall (($ly@@356 T@U) (|bytes#0@@23| T@U) (|start#0@@50| Int) (|ins#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@356) LayerTypeType) (= (type |bytes#0@@23|) (SeqType BoxType))) (= (type |ins#0@@9|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| |bytes#0@@23| |start#0@@50| |ins#0@@9|) (and (and ($Is |bytes#0@@23| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@9| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |start#0@@50|) (<= (+ |start#0@@50| (|Seq#Length| |ins#0@@9|)) (|Seq#Length| |bytes#0@@23|)))))) (= (AsyncDisk.__default.splice ($LS $ly@@356) |bytes#0@@23| |start#0@@50| |ins#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |bytes#0@@23| |start#0@@50|) |ins#0@@9|) (|Seq#Drop| |bytes#0@@23| (+ |start#0@@50| (|Seq#Length| |ins#0@@9|)))))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2946| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@356) |bytes#0@@23| |start#0@@50| |ins#0@@9|)) ))))
(assert  (=> true (forall (($ly@@357 T@U) (|bytes#0@@24| T@U) (|start#0@@51| Int) (|ins#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@357) LayerTypeType) (= (type |bytes#0@@24|) (SeqType BoxType))) (= (type |ins#0@@10|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| (Lit |bytes#0@@24|) (LitInt |start#0@@51|) (Lit |ins#0@@10|)) (and (and ($Is |bytes#0@@24| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@10| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |start#0@@51|)) (<= (+ |start#0@@51| (|Seq#Length| (Lit |ins#0@@10|))) (|Seq#Length| (Lit |bytes#0@@24|))))))) (= (AsyncDisk.__default.splice ($LS $ly@@357) (Lit |bytes#0@@24|) (LitInt |start#0@@51|) (Lit |ins#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |bytes#0@@24|) (LitInt |start#0@@51|)) |ins#0@@10|) (|Seq#Drop| (Lit |bytes#0@@24|) (+ |start#0@@51| (|Seq#Length| (Lit |ins#0@@10|))))))) :qid |AsyncDiskModelsdfy.193:22| :weight 3 :skolemid |2947| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@357) (Lit |bytes#0@@24|) (LitInt |start#0@@51|) (Lit |ins#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@172| T@U) (|s'#0@@35| T@U) (|id#0@@3| Int) ) (!  (=> (and (and (= (type |s#0@@172|) DatatypeTypeType) (= (type |s'#0@@35|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@172| |s'#0@@35| |id#0@@3|) (and (and ($Is |s#0@@172| Tclass.AsyncDisk.Variables) ($Is |s'#0@@35| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@3|) (< |id#0@@3| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2948| :pattern ( (AsyncDisk.__default.ProcessWrite |s#0@@172| |s'#0@@35| |id#0@@3|)) ))))
(assert (forall ((|s#0@@173| T@U) (|s'#0@@36| T@U) (|id#0@@4| Int) ) (!  (=> (and (= (type |s#0@@173|) DatatypeTypeType) (= (type |s'#0@@36|) DatatypeTypeType)) (=> (and (and ($Is |s#0@@173| Tclass.AsyncDisk.Variables) ($Is |s'#0@@36| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@4|) (< |id#0@@4| 18446744073709551616))) (= (|AsyncDisk.__default.ProcessWrite#requires| |s#0@@173| |s'#0@@36| |id#0@@4|) true))) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2949| :pattern ( (|AsyncDisk.__default.ProcessWrite#requires| |s#0@@173| |s'#0@@36| |id#0@@4|)) )))
(assert (= (type StartFuel_AsyncDisk._default.splice) LayerTypeType))
(assert  (=> true (forall ((|s#0@@174| T@U) (|s'#0@@37| T@U) (|id#0@@5| Int) ) (!  (=> (and (and (= (type |s#0@@174|) DatatypeTypeType) (= (type |s'#0@@37|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@174| |s'#0@@37| |id#0@@5|) (and (and ($Is |s#0@@174| Tclass.AsyncDisk.Variables) ($Is |s'#0@@37| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@5|) (< |id#0@@5| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@174|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@174|)) ($Box (int_2_U |id#0@@5|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@174|) (let ((|req#0@@1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@174|)) ($Box (int_2_U |id#0@@5|)))))) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (=> (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#0@@1|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (=> (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|)) 18446744073709551616) (and (and (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (AsyncDisk.Variables.Variables_q |s#0@@174|)) (=> (<= (+ (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@174|))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@37|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#2#0| (let ((|dt_update_tmp#1#0@@2| (let ((|dt_update_tmp#0#0@@18| |s#0@@174|)) (let ((|dt_update#reqWrites#0#0@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@18|) |dt_update#reqWrites#0#0@@3| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@18|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@18|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@18|)))))) (let ((|dt_update#respWrites#0#0@@1| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@2|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@2|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@2|) |dt_update#respWrites#0#0@@1| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@2|)))))) (let ((|dt_update#contents#0#0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (AsyncDisk.Variables.contents |s#0@@174|) (AsyncDisk.ReqWrite.addr |req#0@@1|) (AsyncDisk.ReqWrite.bytes |req#0@@1|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#0|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#0|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#0|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#0|) |dt_update#contents#0#0|))))) (and (and (let ((|dt_update_tmp#0#0@@19| |s#0@@174|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@174|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite (AsyncDisk.Variables.reqWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|)))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)))) (let ((|dt_update_tmp#1#0@@3| (let ((|dt_update_tmp#0#0@@20| |s#0@@174|)) (let ((|dt_update#reqWrites#0#0@@4| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@20|) |dt_update#reqWrites#0#0@@4| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@20|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@20|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@20|)))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@174|) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|))))) (let ((|dt_update_tmp#2#0@@0| (let ((|dt_update_tmp#1#0@@4| (let ((|dt_update_tmp#0#0@@21| |s#0@@174|)) (let ((|dt_update#reqWrites#0#0@@5| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@21|) |dt_update#reqWrites#0#0@@5| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@21|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@21|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@21|)))))) (let ((|dt_update#respWrites#0#0@@2| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@4|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@4|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@4|) |dt_update#respWrites#0#0@@2| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@4|)))))) (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@174|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (|AsyncDisk.__default.splice#canCall| (AsyncDisk.Variables.contents |s#0@@174|) (AsyncDisk.ReqWrite.addr |req#0@@1|) (AsyncDisk.ReqWrite.bytes |req#0@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)))))))))))))))) (= (AsyncDisk.__default.ProcessWrite |s#0@@174| |s'#0@@37| |id#0@@5|)  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@174|)) ($Box (int_2_U |id#0@@5|)))) (let ((|req#0@@2| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@174|)) ($Box (int_2_U |id#0@@5|)))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#0@@2|)) (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|)) 18446744073709551616)) (<= (+ (AsyncDisk.ReqWrite.addr |req#0@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|))) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@174|)))) (|AsyncDisk.Variables#Equal| |s'#0@@37| (let ((|dt_update_tmp#2#0@@1| (let ((|dt_update_tmp#1#0@@5| (let ((|dt_update_tmp#0#0@@22| |s#0@@174|)) (let ((|dt_update#reqWrites#0#0@@6| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@22|) |dt_update#reqWrites#0#0@@6| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@22|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@22|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@22|)))))) (let ((|dt_update#respWrites#0#0@@3| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@174|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@5|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@5|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@5|) |dt_update#respWrites#0#0@@3| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@5|)))))) (let ((|dt_update#contents#0#0@@0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (AsyncDisk.Variables.contents |s#0@@174|) (AsyncDisk.ReqWrite.addr |req#0@@2|) (AsyncDisk.ReqWrite.bytes |req#0@@2|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#0@@1|) |dt_update#contents#0#0@@0|)))))))))) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2950| :pattern ( (AsyncDisk.__default.ProcessWrite |s#0@@174| |s'#0@@37| |id#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@175| T@U) (|s'#0@@38| T@U) (|id#0@@6| Int) ) (!  (=> (and (and (= (type |s#0@@175|) DatatypeTypeType) (= (type |s'#0@@38|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| (Lit |s#0@@175|) (Lit |s'#0@@38|) (LitInt |id#0@@6|)) (and (and ($Is |s#0@@175| Tclass.AsyncDisk.Variables) ($Is |s'#0@@38| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@6|) (< |id#0@@6| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U |id#0@@6|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|)) (let ((|req#1@@1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|)))) ($Box (int_2_U (LitInt |id#0@@6|))))))) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (=> (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#1@@1|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (=> (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|)) 18446744073709551616) (and (and (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|))) (=> (<= (+ (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@175|))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@38|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#2#1| (let ((|dt_update_tmp#1#1@@2| (let ((|dt_update_tmp#0#1@@18| (Lit |s#0@@175|))) (let ((|dt_update#reqWrites#0#1@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@18|)) |dt_update#reqWrites#0#1@@3| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@18|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@18|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@18|))))))) (let ((|dt_update#respWrites#0#1@@1| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@2|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@2|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@2|) |dt_update#respWrites#0#1@@1| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@2|)))))) (let ((|dt_update#contents#0#1| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (Lit (AsyncDisk.Variables.contents (Lit |s#0@@175|))) (AsyncDisk.ReqWrite.addr |req#1@@1|) (AsyncDisk.ReqWrite.bytes |req#1@@1|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#1|) |dt_update#contents#0#1|))))) (and (and (let ((|dt_update_tmp#0#1@@19| (Lit |s#0@@175|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)))) (let ((|dt_update_tmp#1#1@@3| (let ((|dt_update_tmp#0#1@@20| (Lit |s#0@@175|))) (let ((|dt_update#reqWrites#0#1@@4| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@20|)) |dt_update#reqWrites#0#1@@4| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@20|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@20|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@20|))))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|))))) (let ((|dt_update_tmp#2#1@@0| (let ((|dt_update_tmp#1#1@@4| (let ((|dt_update_tmp#0#1@@21| (Lit |s#0@@175|))) (let ((|dt_update#reqWrites#0#1@@5| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@21|)) |dt_update#reqWrites#0#1@@5| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@21|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@21|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@21|))))))) (let ((|dt_update#respWrites#0#1@@2| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@4|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@4|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@4|) |dt_update#respWrites#0#1@@2| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@4|)))))) (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@175|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (|AsyncDisk.__default.splice#canCall| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@175|))) (AsyncDisk.ReqWrite.addr |req#1@@1|) (AsyncDisk.ReqWrite.bytes |req#1@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)))))))))))))))) (= (AsyncDisk.__default.ProcessWrite (Lit |s#0@@175|) (Lit |s'#0@@38|) (LitInt |id#0@@6|))  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U |id#0@@6|)))) (let ((|req#1@@2| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|)))) ($Box (int_2_U (LitInt |id#0@@6|))))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#1@@2|)) (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|)) 18446744073709551616)) (<= (+ (AsyncDisk.ReqWrite.addr |req#1@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|))) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@175|)))))) (|AsyncDisk.Variables#Equal| |s'#0@@38| (let ((|dt_update_tmp#2#1@@1| (let ((|dt_update_tmp#1#1@@5| (let ((|dt_update_tmp#0#1@@22| (Lit |s#0@@175|))) (let ((|dt_update#reqWrites#0#1@@6| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@22|)) |dt_update#reqWrites#0#1@@6| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@22|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@22|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@22|))))))) (let ((|dt_update#respWrites#0#1@@3| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@175|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@5|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@5|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@5|) |dt_update#respWrites#0#1@@3| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@5|)))))) (let ((|dt_update#contents#0#1@@0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (Lit (AsyncDisk.Variables.contents (Lit |s#0@@175|))) (AsyncDisk.ReqWrite.addr |req#1@@2|) (AsyncDisk.ReqWrite.bytes |req#1@@2|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#1@@1|) |dt_update#contents#0#1@@0|)))))))))) :qid |AsyncDiskModelsdfy.200:26| :weight 3 :skolemid |2951| :pattern ( (AsyncDisk.__default.ProcessWrite (Lit |s#0@@175|) (Lit |s'#0@@38|) (LitInt |id#0@@6|))) ))))
(assert  (=> true (forall ((|start#0@@52| Int) (|len#0@@39| Int) (|start'#0@@1| Int) (|len'#0| Int) ) (!  (=> true true) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2952| :pattern ( (AsyncDisk.__default.overlap |start#0@@52| |len#0@@39| |start'#0@@1| |len'#0|)) ))))
(assert (forall ((|start#0@@53| Int) (|len#0@@40| Int) (|start'#0@@2| Int) (|len'#0@@0| Int) ) (! (= (|AsyncDisk.__default.overlap#requires| |start#0@@53| |len#0@@40| |start'#0@@2| |len'#0@@0|) true) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2953| :pattern ( (|AsyncDisk.__default.overlap#requires| |start#0@@53| |len#0@@40| |start'#0@@2| |len'#0@@0|)) )))
(assert  (=> true (forall ((|start#0@@54| Int) (|len#0@@41| Int) (|start'#0@@3| Int) (|len'#0@@1| Int) ) (!  (=> true (= (AsyncDisk.__default.overlap |start#0@@54| |len#0@@41| |start'#0@@3| |len'#0@@1|)  (and (> (+ |start#0@@54| |len#0@@41|) |start'#0@@3|) (> (+ |start'#0@@3| |len'#0@@1|) |start#0@@54|)))) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2954| :pattern ( (AsyncDisk.__default.overlap |start#0@@54| |len#0@@41| |start'#0@@3| |len'#0@@1|)) ))))
(assert  (=> true (forall ((|start#0@@55| Int) (|len#0@@42| Int) (|start'#0@@4| Int) (|len'#0@@2| Int) ) (!  (=> true (= (AsyncDisk.__default.overlap (LitInt |start#0@@55|) (LitInt |len#0@@42|) (LitInt |start'#0@@4|) (LitInt |len'#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (> (+ |start#0@@55| |len#0@@42|) |start'#0@@4|) (> (+ |start'#0@@4| |len'#0@@2|) |start#0@@55|))))))) :qid |AsyncDiskModelsdfy.215:21| :weight 3 :skolemid |2955| :pattern ( (AsyncDisk.__default.overlap (LitInt |start#0@@55|) (LitInt |len#0@@42|) (LitInt |start'#0@@4|) (LitInt |len'#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@176| T@U) (|s'#0@@39| T@U) (|id#0@@7| Int) (|id'#0| Int) ) (!  (=> (and (and (= (type |s#0@@176|) DatatypeTypeType) (= (type |s'#0@@39|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@176| |s'#0@@39| |id#0@@7| |id'#0|) (and (and (and ($Is |s#0@@176| Tclass.AsyncDisk.Variables) ($Is |s'#0@@39| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@7|) (< |id#0@@7| 18446744073709551616))) (and (<= (LitInt 0) |id'#0|) (< |id'#0| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2956| :pattern ( (AsyncDisk.__default.HavocConflictingWrites |s#0@@176| |s'#0@@39| |id#0@@7| |id'#0|)) ))))
(assert (forall ((|s#0@@177| T@U) (|s'#0@@40| T@U) (|id#0@@8| Int) (|id'#0@@0| Int) ) (!  (=> (and (= (type |s#0@@177|) DatatypeTypeType) (= (type |s'#0@@40|) DatatypeTypeType)) (=> (and (and (and ($Is |s#0@@177| Tclass.AsyncDisk.Variables) ($Is |s'#0@@40| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@8|) (< |id#0@@8| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@0|) (< |id'#0@@0| 18446744073709551616))) (= (|AsyncDisk.__default.HavocConflictingWrites#requires| |s#0@@177| |s'#0@@40| |id#0@@8| |id'#0@@0|) true))) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2957| :pattern ( (|AsyncDisk.__default.HavocConflictingWrites#requires| |s#0@@177| |s'#0@@40| |id#0@@8| |id'#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@178| T@U) (|s'#0@@41| T@U) (|id#0@@9| Int) (|id'#0@@1| Int) ) (!  (=> (and (and (= (type |s#0@@178|) DatatypeTypeType) (= (type |s'#0@@41|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@178| |s'#0@@41| |id#0@@9| |id'#0@@1|) (and (and (and ($Is |s#0@@178| Tclass.AsyncDisk.Variables) ($Is |s'#0@@41| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@9|) (< |id#0@@9| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@1|) (< |id'#0@@1| 18446744073709551616))))) (and (=> (not (= |id#0@@9| |id'#0@@1|)) (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@178|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|)))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))))))))))) (= (AsyncDisk.__default.HavocConflictingWrites |s#0@@178| |s'#0@@41| |id#0@@9| |id'#0@@1|)  (and (and (and (not (= |id#0@@9| |id'#0@@1|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id#0@@9|)))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@178|)) ($Box (int_2_U |id'#0@@1|))))))))))) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2958| :pattern ( (AsyncDisk.__default.HavocConflictingWrites |s#0@@178| |s'#0@@41| |id#0@@9| |id'#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@179| T@U) (|s'#0@@42| T@U) (|id#0@@10| Int) (|id'#0@@2| Int) ) (!  (=> (and (and (= (type |s#0@@179|) DatatypeTypeType) (= (type |s'#0@@42|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| (Lit |s#0@@179|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|)) (and (and (and ($Is |s#0@@179| Tclass.AsyncDisk.Variables) ($Is |s'#0@@42| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@10|) (< |id#0@@10| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@2|) (< |id'#0@@2| 18446744073709551616))))) (and (=> (U_2_bool (Lit (bool_2_U (not (= |id#0@@10| |id'#0@@2|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|))) ($Box (int_2_U |id#0@@10|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|))) ($Box (int_2_U |id'#0@@2|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@179|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))))))))) (= (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@179|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|))  (and (and (and (not (= |id#0@@10| |id'#0@@2|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|))) ($Box (int_2_U |id#0@@10|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|))) ($Box (int_2_U |id'#0@@2|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@179|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))))))) :qid |AsyncDiskModelsdfy.221:36| :weight 3 :skolemid |2959| :pattern ( (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@179|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@180| T@U) (|s'#0@@43| T@U) (|id#0@@11| Int) (|id'#0@@3| Int) ) (!  (=> (and (and (= (type |s#0@@180|) DatatypeTypeType) (= (type |s'#0@@43|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@180| |s'#0@@43| |id#0@@11| |id'#0@@3|) (and (and (and ($Is |s#0@@180| Tclass.AsyncDisk.Variables) ($Is |s'#0@@43| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@11|) (< |id#0@@11| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@3|) (< |id'#0@@3| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2960| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@180| |s'#0@@43| |id#0@@11| |id'#0@@3|)) ))))
(assert (forall ((|s#0@@181| T@U) (|s'#0@@44| T@U) (|id#0@@12| Int) (|id'#0@@4| Int) ) (!  (=> (and (= (type |s#0@@181|) DatatypeTypeType) (= (type |s'#0@@44|) DatatypeTypeType)) (=> (and (and (and ($Is |s#0@@181| Tclass.AsyncDisk.Variables) ($Is |s'#0@@44| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@12|) (< |id#0@@12| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@4|) (< |id'#0@@4| 18446744073709551616))) (= (|AsyncDisk.__default.HavocConflictingWriteRead#requires| |s#0@@181| |s'#0@@44| |id#0@@12| |id'#0@@4|) true))) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2961| :pattern ( (|AsyncDisk.__default.HavocConflictingWriteRead#requires| |s#0@@181| |s'#0@@44| |id#0@@12| |id'#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@182| T@U) (|s'#0@@45| T@U) (|id#0@@13| Int) (|id'#0@@5| Int) ) (!  (=> (and (and (= (type |s#0@@182|) DatatypeTypeType) (= (type |s'#0@@45|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@182| |s'#0@@45| |id#0@@13| |id'#0@@5|) (and (and (and ($Is |s#0@@182| Tclass.AsyncDisk.Variables) ($Is |s'#0@@45| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@13|) (< |id#0@@13| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@5|) (< |id'#0@@5| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@182|) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|)))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))))))))) (= (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@182| |s'#0@@45| |id#0@@13| |id'#0@@5|)  (and (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@182|)) ($Box (int_2_U |id#0@@13|)))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@182|)) ($Box (int_2_U |id'#0@@5|)))))))))) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2962| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@182| |s'#0@@45| |id#0@@13| |id'#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@183| T@U) (|s'#0@@46| T@U) (|id#0@@14| Int) (|id'#0@@6| Int) ) (!  (=> (and (and (= (type |s#0@@183|) DatatypeTypeType) (= (type |s'#0@@46|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| (Lit |s#0@@183|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|)) (and (and (and ($Is |s#0@@183| Tclass.AsyncDisk.Variables) ($Is |s'#0@@46| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@14|) (< |id#0@@14| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@6|) (< |id'#0@@6| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|))) ($Box (int_2_U |id#0@@14|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@183|))) ($Box (int_2_U |id'#0@@6|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@183|)) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))))))) (= (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@183|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|))  (and (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|))) ($Box (int_2_U |id#0@@14|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@183|))) ($Box (int_2_U |id'#0@@6|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@183|)))) ($Box (int_2_U (LitInt |id'#0@@6|))))))))))) :qid |AsyncDiskModelsdfy.231:39| :weight 3 :skolemid |2963| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@183|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@184| T@U) (|s'#0@@47| T@U) (|step#0@@5| T@U) ) (!  (=> (and (and (and (= (type |s#0@@184|) DatatypeTypeType) (= (type |s'#0@@47|) DatatypeTypeType)) (= (type |step#0@@5|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@184| |s'#0@@47| |step#0@@5|) (and (and ($Is |s#0@@184| Tclass.AsyncDisk.Variables) ($Is |s'#0@@47| Tclass.AsyncDisk.Variables)) ($Is |step#0@@5| Tclass.AsyncDisk.InternalStep)))) true) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2964| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@184| |s'#0@@47| |step#0@@5|)) ))))
(assert (forall ((|s#0@@185| T@U) (|s'#0@@48| T@U) (|step#0@@6| T@U) ) (!  (=> (and (and (and (= (type |s#0@@185|) DatatypeTypeType) (= (type |s'#0@@48|) DatatypeTypeType)) (= (type |step#0@@6|) DatatypeTypeType)) (and (and ($Is |s#0@@185| Tclass.AsyncDisk.Variables) ($Is |s'#0@@48| Tclass.AsyncDisk.Variables)) ($Is |step#0@@6| Tclass.AsyncDisk.InternalStep))) (= (|AsyncDisk.__default.NextInternalStep#requires| |s#0@@185| |s'#0@@48| |step#0@@6|) true)) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2965| :pattern ( (|AsyncDisk.__default.NextInternalStep#requires| |s#0@@185| |s'#0@@48| |step#0@@6|)) )))
(assert  (=> true (forall ((|s#0@@186| T@U) (|s'#0@@49| T@U) (|step#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@186|) DatatypeTypeType) (= (type |s'#0@@49|) DatatypeTypeType)) (= (type |step#0@@7|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@186| |s'#0@@49| |step#0@@7|) (and (and ($Is |s#0@@186| Tclass.AsyncDisk.Variables) ($Is |s'#0@@49| Tclass.AsyncDisk.Variables)) ($Is |step#0@@7| Tclass.AsyncDisk.InternalStep)))) (and (and (=> (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (let ((|fakeContents#1| (AsyncDisk.InternalStep.fakeContents |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#4| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@186| |s'#0@@49| |id#4| |fakeContents#1|))))) (=> (not (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|)) (and (=> (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#5| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@186| |s'#0@@49| |id#5|)))) (=> (not (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (and (=> (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|) (let ((|id'#2| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#6| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@186| |s'#0@@49| |id#6| |id'#2|))))) (=> (not (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (let ((|id'#3| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#7| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@186| |s'#0@@49| |id#7| |id'#3|)))))))))) (= (AsyncDisk.__default.NextInternalStep |s#0@@186| |s'#0@@49| |step#0@@7|) (ite (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (let ((|fakeContents#0@@11| (AsyncDisk.InternalStep.fakeContents |step#0@@7|))) (let ((|id#0@@15| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.ProcessReadFailure |s#0@@186| |s'#0@@49| |id#0@@15| |fakeContents#0@@11|))) (ite (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|) (let ((|id#1| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.ProcessWrite |s#0@@186| |s'#0@@49| |id#1|)) (ite (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|) (let ((|id'#0@@7| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (let ((|id#2| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.HavocConflictingWrites |s#0@@186| |s'#0@@49| |id#2| |id'#0@@7|))) (let ((|id'#1| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (let ((|id#3| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@186| |s'#0@@49| |id#3| |id'#1|))))))))) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2966| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@186| |s'#0@@49| |step#0@@7|)) ))))
(assert  (=> true (forall ((|s#0@@187| T@U) (|s'#0@@50| T@U) (|step#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@187|) DatatypeTypeType) (= (type |s'#0@@50|) DatatypeTypeType)) (= (type |step#0@@8|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| (Lit |s#0@@187|) (Lit |s'#0@@50|) (Lit |step#0@@8|)) (and (and ($Is |s#0@@187| Tclass.AsyncDisk.Variables) ($Is |s'#0@@50| Tclass.AsyncDisk.Variables)) ($Is |step#0@@8| Tclass.AsyncDisk.InternalStep)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|))))) (let ((|fakeContents#3| (Lit (AsyncDisk.InternalStep.fakeContents (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#12| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.ProcessReadFailure#canCall| (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#12| |fakeContents#3|))))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#13| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.ProcessWrite#canCall| (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#13|)))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))))) (let ((|id'#6| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#14| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.HavocConflictingWrites#canCall| (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#14| |id'#6|))))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|)))))) (let ((|id'#7| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#15| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#15| |id'#7|)))))))))) (= (AsyncDisk.__default.NextInternalStep (Lit |s#0@@187|) (Lit |s'#0@@50|) (Lit |step#0@@8|)) (ite (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|fakeContents#2| (Lit (AsyncDisk.InternalStep.fakeContents (Lit |step#0@@8|))))) (let ((|id#8| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#8| |fakeContents#2|)))))) (ite (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|id#9| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.ProcessWrite (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#9|))))) (ite (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|id'#4| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (let ((|id#10| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#10| |id'#4|)))))) (U_2_bool (let ((|id'#5| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (let ((|id#11| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@187|) (Lit |s'#0@@50|) |id#11| |id'#5|)))))))))))) :qid |AsyncDiskModelsdfy.240:30| :weight 3 :skolemid |2967| :pattern ( (AsyncDisk.__default.NextInternalStep (Lit |s#0@@187|) (Lit |s'#0@@50|) (Lit |step#0@@8|))) ))))
(assert  (=> true (forall ((|s#0@@188| T@U) (|s'#0@@51| T@U) ) (!  (=> (and (and (= (type |s#0@@188|) DatatypeTypeType) (= (type |s'#0@@51|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| |s#0@@188| |s'#0@@51|) (and ($Is |s#0@@188| Tclass.AsyncDisk.Variables) ($Is |s'#0@@51| Tclass.AsyncDisk.Variables)))) true) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2968| :pattern ( (AsyncDisk.__default.NextInternal |s#0@@188| |s'#0@@51|)) ))))
(assert (forall ((|s#0@@189| T@U) (|s'#0@@52| T@U) ) (!  (=> (and (and (= (type |s#0@@189|) DatatypeTypeType) (= (type |s'#0@@52|) DatatypeTypeType)) (and ($Is |s#0@@189| Tclass.AsyncDisk.Variables) ($Is |s'#0@@52| Tclass.AsyncDisk.Variables))) (= (|AsyncDisk.__default.NextInternal#requires| |s#0@@189| |s'#0@@52|) true)) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2969| :pattern ( (|AsyncDisk.__default.NextInternal#requires| |s#0@@189| |s'#0@@52|)) )))
(assert  (=> true (forall ((|s#0@@190| T@U) (|s'#0@@53| T@U) ) (!  (=> (and (and (= (type |s#0@@190|) DatatypeTypeType) (= (type |s'#0@@53|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| |s#0@@190| |s'#0@@53|) (and ($Is |s#0@@190| Tclass.AsyncDisk.Variables) ($Is |s'#0@@53| Tclass.AsyncDisk.Variables)))) (and (forall ((|step#0@@9| T@U) ) (!  (=> (and (= (type |step#0@@9|) DatatypeTypeType) ($Is |step#0@@9| Tclass.AsyncDisk.InternalStep)) (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@190| |s'#0@@53| |step#0@@9|)) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2971| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@190| |s'#0@@53| |step#0@@9|)) )) (= (AsyncDisk.__default.NextInternal |s#0@@190| |s'#0@@53|) (exists ((|step#0@@10| T@U) ) (!  (and (= (type |step#0@@10|) DatatypeTypeType) (and ($Is |step#0@@10| Tclass.AsyncDisk.InternalStep) (AsyncDisk.__default.NextInternalStep |s#0@@190| |s'#0@@53| |step#0@@10|))) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2970| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@190| |s'#0@@53| |step#0@@10|)) ))))) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2972| :pattern ( (AsyncDisk.__default.NextInternal |s#0@@190| |s'#0@@53|)) ))))
(assert  (=> true (forall ((|s#0@@191| T@U) (|s'#0@@54| T@U) ) (!  (=> (and (and (= (type |s#0@@191|) DatatypeTypeType) (= (type |s'#0@@54|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| (Lit |s#0@@191|) (Lit |s'#0@@54|)) (and ($Is |s#0@@191| Tclass.AsyncDisk.Variables) ($Is |s'#0@@54| Tclass.AsyncDisk.Variables)))) (and (forall ((|step#1@@1| T@U) ) (!  (=> (and (= (type |step#1@@1|) DatatypeTypeType) ($Is |step#1@@1| Tclass.AsyncDisk.InternalStep)) (|AsyncDisk.__default.NextInternalStep#canCall| (Lit |s#0@@191|) (Lit |s'#0@@54|) |step#1@@1|)) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2974| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@191| |s'#0@@54| |step#1@@1|)) )) (= (AsyncDisk.__default.NextInternal (Lit |s#0@@191|) (Lit |s'#0@@54|)) (exists ((|step#1@@2| T@U) ) (!  (and (= (type |step#1@@2|) DatatypeTypeType) (and ($Is |step#1@@2| Tclass.AsyncDisk.InternalStep) (AsyncDisk.__default.NextInternalStep (Lit |s#0@@191|) (Lit |s'#0@@54|) |step#1@@2|))) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2973| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@191| |s'#0@@54| |step#1@@2|)) ))))) :qid |AsyncDiskModelsdfy.251:26| :weight 3 :skolemid |2975| :pattern ( (AsyncDisk.__default.NextInternal (Lit |s#0@@191|) (Lit |s'#0@@54|))) ))))
(assert  (=> true (forall ((|s#0@@192| T@U) (|s'#0@@55| T@U) ) (!  (=> (and (and (= (type |s#0@@192|) DatatypeTypeType) (= (type |s'#0@@55|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| |s#0@@192| |s'#0@@55|) (and ($Is |s#0@@192| Tclass.AsyncDisk.Variables) ($Is |s'#0@@55| Tclass.AsyncDisk.Variables)))) true) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2976| :pattern ( (AsyncDisk.__default.Crash |s#0@@192| |s'#0@@55|)) ))))
(assert (forall ((|s#0@@193| T@U) (|s'#0@@56| T@U) ) (!  (=> (and (and (= (type |s#0@@193|) DatatypeTypeType) (= (type |s'#0@@56|) DatatypeTypeType)) (and ($Is |s#0@@193| Tclass.AsyncDisk.Variables) ($Is |s'#0@@56| Tclass.AsyncDisk.Variables))) (= (|AsyncDisk.__default.Crash#requires| |s#0@@193| |s'#0@@56|) true)) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2977| :pattern ( (|AsyncDisk.__default.Crash#requires| |s#0@@193| |s'#0@@56|)) )))
(assert  (=> true (forall ((|s#0@@194| T@U) (|s'#0@@57| T@U) ) (!  (=> (and (and (= (type |s#0@@194|) DatatypeTypeType) (= (type |s'#0@@57|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| |s#0@@194| |s'#0@@57|) (and ($Is |s#0@@194| Tclass.AsyncDisk.Variables) ($Is |s'#0@@57| Tclass.AsyncDisk.Variables)))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@57|) (AsyncDisk.Variables.Variables_q |s#0@@194|)) (= (AsyncDisk.__default.Crash |s#0@@194| |s'#0@@57|) (|AsyncDisk.Variables#Equal| |s'#0@@57| (|#AsyncDisk.Variables.Variables| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.contents |s#0@@194|)))))) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2978| :pattern ( (AsyncDisk.__default.Crash |s#0@@194| |s'#0@@57|)) ))))
(assert  (=> true (forall ((|s#0@@195| T@U) (|s'#0@@58| T@U) ) (!  (=> (and (and (= (type |s#0@@195|) DatatypeTypeType) (= (type |s'#0@@58|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| (Lit |s#0@@195|) (Lit |s'#0@@58|)) (and ($Is |s#0@@195| Tclass.AsyncDisk.Variables) ($Is |s'#0@@58| Tclass.AsyncDisk.Variables)))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@58|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|))) (= (AsyncDisk.__default.Crash (Lit |s#0@@195|) (Lit |s'#0@@58|)) (|AsyncDisk.Variables#Equal| |s'#0@@58| (|#AsyncDisk.Variables.Variables| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|)))))))) :qid |AsyncDiskModelsdfy.256:19| :weight 3 :skolemid |2979| :pattern ( (AsyncDisk.__default.Crash (Lit |s#0@@195|) (Lit |s'#0@@58|))) ))))
(assert (= (type Tclass.JournalBytes.__default) TyType))
(assert (= (Tag Tclass.JournalBytes.__default) Tagclass.JournalBytes.__default))
(assert (= (TagFamily Tclass.JournalBytes.__default) tytagFamily$_default))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.JournalBytes.__default)) (and (= ($Box ($Unbox refType bx@@174)) bx@@174) ($Is ($Unbox refType bx@@174) Tclass.JournalBytes.__default))) :qid |unknown.0:0| :skolemid |2980| :pattern ( ($IsBox bx@@174 Tclass.JournalBytes.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (= ($Is $o@@50 Tclass.JournalBytes.__default)  (or (= $o@@50 null) (= (dtype $o@@50) Tclass.JournalBytes.__default)))) :qid |unknown.0:0| :skolemid |2981| :pattern ( ($Is $o@@50 Tclass.JournalBytes.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@189 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@189) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@51 Tclass.JournalBytes.__default $h@@189)  (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@189 $o@@51) alloc))))) :qid |unknown.0:0| :skolemid |2982| :pattern ( ($IsAlloc $o@@51 Tclass.JournalBytes.__default $h@@189)) )))
(assert (forall ((arg0@@591 T@U) (arg1@@285 T@U) ) (! (= (type (JournalBytes.__default.JournalBlockOfByteSeq arg0@@591 arg1@@285)) DatatypeTypeType) :qid |funType:JournalBytes.__default.JournalBlockOfByteSeq| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq arg0@@591 arg1@@285)) )))
(assert (forall (($ly@@358 T@U) (|s#0@@196| T@U) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |s#0@@196|) (SeqType BoxType))) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@358) |s#0@@196|) (JournalBytes.__default.JournalBlockOfByteSeq $ly@@358 |s#0@@196|))) :qid |JournalBytesidfy.14:22| :skolemid |2983| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@358) |s#0@@196|)) )))
(assert (forall (($ly@@359 T@U) (|s#0@@197| T@U) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |s#0@@197|) (SeqType BoxType))) (= (JournalBytes.__default.JournalBlockOfByteSeq $ly@@359 |s#0@@197|) (JournalBytes.__default.JournalBlockOfByteSeq $LZ |s#0@@197|))) :qid |JournalBytesidfy.14:22| :skolemid |2984| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq (AsFuelBottom $ly@@359) |s#0@@197|)) )))
(assert  (=> true (forall (($ly@@360 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |s#0@@198|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| |s#0@@198|) ($Is |s#0@@198| (TSeq Tclass.NativeTypes.byte)))) (and (=> (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@198|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@198|)))) (LitInt 4064))) ($Is (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@198|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |JournalBytesidfy.14:22| :skolemid |2985| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@198|)) ))))
(assert (forall (($ly@@361 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |s#0@@199|) (SeqType BoxType))) ($Is |s#0@@199| (TSeq Tclass.NativeTypes.byte))) (= (|JournalBytes.__default.JournalBlockOfByteSeq#requires| $ly@@361 |s#0@@199|) true)) :qid |JournalBytesidfy.14:22| :skolemid |2986| :pattern ( (|JournalBytes.__default.JournalBlockOfByteSeq#requires| $ly@@361 |s#0@@199|)) )))
(assert  (=> true (forall (($ly@@362 T@U) (|s#0@@200| T@U) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |s#0@@200|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| |s#0@@200|) ($Is |s#0@@200| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |s#0@@200|) (LitInt 4096)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@200|)) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@362) |s#0@@200|) (ite  (and (= (|Seq#Length| |s#0@@200|) (LitInt 4096)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut |s#0@@200|)) (|#Options.Option.Some| ($Box (|Seq#Drop| |s#0@@200| (LitInt 32)))) |#Options.Option.None|)))) :qid |JournalBytesidfy.14:22| :skolemid |2987| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@362) |s#0@@200|)) ))))
(assert  (=> true (forall (($ly@@363 T@U) (|s#0@@201| T@U) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |s#0@@201|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit |s#0@@201|)) ($Is |s#0@@201| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| (Lit |s#0@@201|)) (LitInt 4096)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit |s#0@@201|))) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@363) (Lit |s#0@@201|)) (ite  (and (= (|Seq#Length| (Lit |s#0@@201|)) (LitInt 4096)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit |s#0@@201|))) (|#Options.Option.Some| ($Box (Lit (|Seq#Drop| (Lit |s#0@@201|) (LitInt 32))))) |#Options.Option.None|)))) :qid |JournalBytesidfy.14:22| :weight 3 :skolemid |2988| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@363) (Lit |s#0@@201|))) ))))
(assert (forall (($ly@@364 T@U) (|s#0@@202| T@U) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@202|) (SeqType BoxType))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@364) |s#0@@202|) (JournalBytes.__default.JournalRangeOfByteSeq $ly@@364 |s#0@@202|))) :qid |JournalBytesidfy.23:22| :skolemid |2989| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@364) |s#0@@202|)) )))
(assert (forall (($ly@@365 T@U) (|s#0@@203| T@U) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@203|) (SeqType BoxType))) (= (JournalBytes.__default.JournalRangeOfByteSeq $ly@@365 |s#0@@203|) (JournalBytes.__default.JournalRangeOfByteSeq $LZ |s#0@@203|))) :qid |JournalBytesidfy.23:22| :skolemid |2990| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq (AsFuelBottom $ly@@365) |s#0@@203|)) )))
(assert  (=> true (forall (($ly@@366 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@204|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |s#0@@204|) ($Is |s#0@@204| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|)) (= (Mul (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|)))) (LitInt 4096)) (|Seq#Length| |s#0@@204|))) (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|)) (forall ((|i#0@@140| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@140|) (< |i#0@@140| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|))) |i#0@@140|))) (LitInt 4064))) :qid |JournalBytesidfy.25:32| :skolemid |2991| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|))) |i#0@@140|))) )))) ($Is (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|) (Tclass.Options.Option (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalBytesidfy.23:22| :skolemid |2992| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@204|)) ))))
(assert (forall (($ly@@367 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@205|) (SeqType BoxType))) ($Is |s#0@@205| (TSeq Tclass.NativeTypes.byte))) (= (|JournalBytes.__default.JournalRangeOfByteSeq#requires| $ly@@367 |s#0@@205|) true)) :qid |JournalBytesidfy.23:22| :skolemid |2993| :pattern ( (|JournalBytes.__default.JournalRangeOfByteSeq#requires| $ly@@367 |s#0@@205|)) )))
(assert (= (type StartFuel_JournalBytes._default.JournalBlockOfByteSeq) LayerTypeType))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@206| T@U) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@206|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |s#0@@206|) ($Is |s#0@@206| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |s#0@@206| (|Seq#Empty| BoxType))) (and (=> (>= (|Seq#Length| |s#0@@206|) (LitInt 4096)) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@206| (LitInt 4096)) (LitInt 0)))) (=> (and (>= (|Seq#Length| |s#0@@206|) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@206| (LitInt 4096)) (LitInt 0))))) (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (|Seq#Drop| |s#0@@206| (LitInt 4096))) (let ((|rest#0@@0| (JournalBytes.__default.JournalRangeOfByteSeq $ly@@368 (|Seq#Drop| |s#0@@206| (LitInt 4096))))) (=> (Options.Option.Some_q |rest#0@@0|) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@206| (LitInt 4096)) (LitInt 0))))))))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@368) |s#0@@206|) (ite (|Seq#Equal| |s#0@@206| (|Seq#Empty| BoxType)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite  (and (>= (|Seq#Length| |s#0@@206|) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@206| (LitInt 4096)) (LitInt 0))))) (let ((|rest#0@@1| (JournalBytes.__default.JournalRangeOfByteSeq $ly@@368 (|Seq#Drop| |s#0@@206| (LitInt 4096))))) (ite (Options.Option.Some_q |rest#0@@1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@206| (LitInt 4096)) (LitInt 0))))) ($Unbox (SeqType BoxType) (Options.Option.value |rest#0@@1|))))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalBytesidfy.23:22| :skolemid |2994| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@368) |s#0@@206|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@207| T@U) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@207|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (Lit |s#0@@207|)) ($Is |s#0@@207| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |s#0@@207| (|Seq#Empty| BoxType))) (and (=> (>= (|Seq#Length| (Lit |s#0@@207|)) (LitInt 4096)) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@207|) (LitInt 4096)) (LitInt 0))))) (=> (and (>= (|Seq#Length| (Lit |s#0@@207|)) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@207|) (LitInt 4096)) (LitInt 0)))))) (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (Lit (|Seq#Drop| (Lit |s#0@@207|) (LitInt 4096)))) (let ((|rest#1@@0| (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |s#0@@207|) (LitInt 4096)))))) (=> (Options.Option.Some_q |rest#1@@0|) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@207|) (LitInt 4096)) (LitInt 0)))))))))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit |s#0@@207|)) (ite (|Seq#Equal| |s#0@@207| (|Seq#Empty| BoxType)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite  (and (>= (|Seq#Length| (Lit |s#0@@207|)) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@207|) (LitInt 4096)) (LitInt 0)))))) (let ((|rest#1@@1| (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |s#0@@207|) (LitInt 4096)))))) (ite (Options.Option.Some_q |rest#1@@1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@207|) (LitInt 4096)) (LitInt 0)))))) ($Unbox (SeqType BoxType) (Options.Option.value |rest#1@@1|))))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalBytesidfy.23:22| :weight 3 :skolemid |2995| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit |s#0@@207|))) ))))
(assert (= (type Tclass.Bounds.__default) TyType))
(assert (= (Tag Tclass.Bounds.__default) Tagclass.Bounds.__default))
(assert (= (TagFamily Tclass.Bounds.__default) tytagFamily$_default))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.Bounds.__default)) (and (= ($Box ($Unbox refType bx@@175)) bx@@175) ($Is ($Unbox refType bx@@175) Tclass.Bounds.__default))) :qid |unknown.0:0| :skolemid |2996| :pattern ( ($IsBox bx@@175 Tclass.Bounds.__default)) )))
(assert (forall (($o@@52 T@U) ) (!  (=> (= (type $o@@52) refType) (= ($Is $o@@52 Tclass.Bounds.__default)  (or (= $o@@52 null) (= (dtype $o@@52) Tclass.Bounds.__default)))) :qid |unknown.0:0| :skolemid |2997| :pattern ( ($Is $o@@52 Tclass.Bounds.__default)) )))
(assert (forall (($o@@53 T@U) ($h@@190 T@U) ) (!  (=> (and (= (type $o@@53) refType) (= (type $h@@190) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@53 Tclass.Bounds.__default $h@@190)  (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@190 $o@@53) alloc))))) :qid |unknown.0:0| :skolemid |2998| :pattern ( ($IsAlloc $o@@53 Tclass.Bounds.__default $h@@190)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NodeBlockSizeUint64) (< Bounds.__default.NodeBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.NodeBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MinNodeBlockIndexUint64) (< Bounds.__default.MinNodeBlockIndexUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MinNodeBlockIndexUint64#requires| true))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.SuperblockSizeUint64) (< Bounds.__default.SuperblockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.SuperblockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.JournalBlockSizeUint64) (< Bounds.__default.JournalBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.JournalBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.DiskNumJournalBlocksUint64) (< Bounds.__default.DiskNumJournalBlocksUint64 18446744073709551616)))))
(assert (= |Bounds.__default.DiskNumJournalBlocksUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableBlockSizeUint64) (< Bounds.__default.IndirectionTableBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.IndirectionTableBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (and (<= (LitInt Bounds.__default.IndirectionTableBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (<= (LitInt Bounds.__default.NodeBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64)) (and (<= (LitInt 0) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (< Bounds.__default.LargestBlockSizeOfAnyTypeUint64 18446744073709551616))))))
(assert (= |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxTotalBucketWeightUint64) (< Bounds.__default.MaxTotalBucketWeightUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxTotalBucketWeightUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxCacheSizeUint64) (< Bounds.__default.MaxCacheSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxCacheSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxNumChildrenUint64) (< Bounds.__default.MaxNumChildrenUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxNumChildrenUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.FlushTriggerWeightUint64) (< Bounds.__default.FlushTriggerWeightUint64 18446744073709551616)))))
(assert (= |Bounds.__default.FlushTriggerWeightUint64#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NumBlocksUint64) (< Bounds.__default.NumBlocksUint64 18446744073709551616)))))
(assert (= |Bounds.__default.NumBlocksUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableMaxSizeUint64) (< Bounds.__default.IndirectionTableMaxSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.IndirectionTableMaxSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.SuperblockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.IndirectionTableBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.NodeBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MinNodeBlockIndex#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxNumChildren#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxTotalBucketWeight#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxCacheSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.FlushTriggerWeight#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.NumBlocks#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.IndirectionTableMaxSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.JournalBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.DiskNumJournalBlocks#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert (forall ((arg0@@592 Int) (arg1@@286 Int) ) (! (= (type (|#DiskLayout.Location.Location| arg0@@592 arg1@@286)) DatatypeTypeType) :qid |funType:#DiskLayout.Location.Location| :pattern ( (|#DiskLayout.Location.Location| arg0@@592 arg1@@286)) )))
(assert (forall ((|a#0#0#0@@3| Int) (|a#0#1#0@@2| Int) ) (! (= (DatatypeCtorId (|#DiskLayout.Location.Location| |a#0#0#0@@3| |a#0#1#0@@2|)) |##DiskLayout.Location.Location|) :qid |DiskLayoutidfy.14:32| :skolemid |2999| :pattern ( (|#DiskLayout.Location.Location| |a#0#0#0@@3| |a#0#1#0@@2|)) )))
(assert (forall ((d@@204 T@U) ) (!  (=> (= (type d@@204) DatatypeTypeType) (= (DiskLayout.Location.Location_q d@@204) (= (DatatypeCtorId d@@204) |##DiskLayout.Location.Location|))) :qid |unknown.0:0| :skolemid |3000| :pattern ( (DiskLayout.Location.Location_q d@@204)) )))
(assert (forall ((d@@205 T@U) ) (!  (=> (and (= (type d@@205) DatatypeTypeType) (DiskLayout.Location.Location_q d@@205)) (exists ((|a#1#0#0@@3| Int) (|a#1#1#0@@2| Int) ) (! (= d@@205 (|#DiskLayout.Location.Location| |a#1#0#0@@3| |a#1#1#0@@2|)) :qid |DiskLayoutidfy.14:32| :skolemid |3001| ))) :qid |unknown.0:0| :skolemid |3002| :pattern ( (DiskLayout.Location.Location_q d@@205)) )))
(assert (= (type Tclass.DiskLayout.Location) TyType))
(assert (= (Tag Tclass.DiskLayout.Location) Tagclass.DiskLayout.Location))
(assert (= (TagFamily Tclass.DiskLayout.Location) tytagFamily$Location))
(assert (forall ((bx@@176 T@U) ) (!  (=> (and (= (type bx@@176) BoxType) ($IsBox bx@@176 Tclass.DiskLayout.Location)) (and (= ($Box ($Unbox DatatypeTypeType bx@@176)) bx@@176) ($Is ($Unbox DatatypeTypeType bx@@176) Tclass.DiskLayout.Location))) :qid |unknown.0:0| :skolemid |3003| :pattern ( ($IsBox bx@@176 Tclass.DiskLayout.Location)) )))
(assert (forall ((|a#2#0#0@@3| Int) (|a#2#1#0@@2| Int) ) (! (= ($Is (|#DiskLayout.Location.Location| |a#2#0#0@@3| |a#2#1#0@@2|) Tclass.DiskLayout.Location)  (and ($Is (int_2_U |a#2#0#0@@3|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#2#1#0@@2|) Tclass.NativeTypes.uint64))) :qid |DiskLayoutidfy.14:32| :skolemid |3004| :pattern ( ($Is (|#DiskLayout.Location.Location| |a#2#0#0@@3| |a#2#1#0@@2|) Tclass.DiskLayout.Location)) )))
(assert (forall ((|a#3#0#0@@3| Int) (|a#3#1#0@@2| Int) ($h@@191 T@U) ) (!  (=> (and (= (type $h@@191) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@191)) (= ($IsAlloc (|#DiskLayout.Location.Location| |a#3#0#0@@3| |a#3#1#0@@2|) Tclass.DiskLayout.Location $h@@191)  (and ($IsAlloc (int_2_U |a#3#0#0@@3|) Tclass.NativeTypes.uint64 $h@@191) ($IsAlloc (int_2_U |a#3#1#0@@2|) Tclass.NativeTypes.uint64 $h@@191)))) :qid |DiskLayoutidfy.14:32| :skolemid |3005| :pattern ( ($IsAlloc (|#DiskLayout.Location.Location| |a#3#0#0@@3| |a#3#1#0@@2|) Tclass.DiskLayout.Location $h@@191)) )))
(assert (forall ((d@@206 T@U) ($h@@192 T@U) ) (!  (=> (and (and (= (type d@@206) DatatypeTypeType) (= (type $h@@192) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@192) (and (DiskLayout.Location.Location_q d@@206) ($IsAlloc d@@206 Tclass.DiskLayout.Location $h@@192)))) ($IsAlloc (int_2_U (DiskLayout.Location.addr d@@206)) Tclass.NativeTypes.uint64 $h@@192)) :qid |unknown.0:0| :skolemid |3006| :pattern ( ($IsAlloc (int_2_U (DiskLayout.Location.addr d@@206)) Tclass.NativeTypes.uint64 $h@@192)) )))
(assert (forall ((d@@207 T@U) ($h@@193 T@U) ) (!  (=> (and (and (= (type d@@207) DatatypeTypeType) (= (type $h@@193) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@193) (and (DiskLayout.Location.Location_q d@@207) ($IsAlloc d@@207 Tclass.DiskLayout.Location $h@@193)))) ($IsAlloc (int_2_U (DiskLayout.Location.len d@@207)) Tclass.NativeTypes.uint64 $h@@193)) :qid |unknown.0:0| :skolemid |3007| :pattern ( ($IsAlloc (int_2_U (DiskLayout.Location.len d@@207)) Tclass.NativeTypes.uint64 $h@@193)) )))
(assert (forall ((|a#4#0#0@@3| Int) (|a#4#1#0@@2| Int) ) (! (= (|#DiskLayout.Location.Location| (LitInt |a#4#0#0@@3|) (LitInt |a#4#1#0@@2|)) (Lit (|#DiskLayout.Location.Location| |a#4#0#0@@3| |a#4#1#0@@2|))) :qid |DiskLayoutidfy.14:32| :skolemid |3008| :pattern ( (|#DiskLayout.Location.Location| (LitInt |a#4#0#0@@3|) (LitInt |a#4#1#0@@2|))) )))
(assert (forall ((|a#5#0#0@@4| Int) (|a#5#1#0@@2| Int) ) (! (= (DiskLayout.Location.addr (|#DiskLayout.Location.Location| |a#5#0#0@@4| |a#5#1#0@@2|)) |a#5#0#0@@4|) :qid |DiskLayoutidfy.14:32| :skolemid |3009| :pattern ( (|#DiskLayout.Location.Location| |a#5#0#0@@4| |a#5#1#0@@2|)) )))
(assert (forall ((|a#6#0#0@@4| Int) (|a#6#1#0@@2| Int) ) (! (= (DiskLayout.Location.len (|#DiskLayout.Location.Location| |a#6#0#0@@4| |a#6#1#0@@2|)) |a#6#1#0@@2|) :qid |DiskLayoutidfy.14:32| :skolemid |3010| :pattern ( (|#DiskLayout.Location.Location| |a#6#0#0@@4| |a#6#1#0@@2|)) )))
(assert (forall ((d@@208 T@U) ) (!  (=> (and (= (type d@@208) DatatypeTypeType) (|$IsA#DiskLayout.Location| d@@208)) (DiskLayout.Location.Location_q d@@208)) :qid |unknown.0:0| :skolemid |3011| :pattern ( (|$IsA#DiskLayout.Location| d@@208)) )))
(assert (forall ((d@@209 T@U) ) (!  (=> (and (= (type d@@209) DatatypeTypeType) ($Is d@@209 Tclass.DiskLayout.Location)) (DiskLayout.Location.Location_q d@@209)) :qid |unknown.0:0| :skolemid |3012| :pattern ( (DiskLayout.Location.Location_q d@@209) ($Is d@@209 Tclass.DiskLayout.Location)) )))
(assert (forall ((a@@192 T@U) (b@@129 T@U) ) (!  (=> (and (and (= (type a@@192) DatatypeTypeType) (= (type b@@129) DatatypeTypeType)) true) (= (|DiskLayout.Location#Equal| a@@192 b@@129)  (and (= (DiskLayout.Location.addr a@@192) (DiskLayout.Location.addr b@@129)) (= (DiskLayout.Location.len a@@192) (DiskLayout.Location.len b@@129))))) :qid |unknown.0:0| :skolemid |3013| :pattern ( (|DiskLayout.Location#Equal| a@@192 b@@129)) )))
(assert (forall ((a@@193 T@U) (b@@130 T@U) ) (!  (=> (and (= (type a@@193) DatatypeTypeType) (= (type b@@130) DatatypeTypeType)) (= (|DiskLayout.Location#Equal| a@@193 b@@130) (= a@@193 b@@130))) :qid |unknown.0:0| :skolemid |3014| :pattern ( (|DiskLayout.Location#Equal| a@@193 b@@130)) )))
(assert (= (type Tclass.DiskLayout.__default) TyType))
(assert (= (Tag Tclass.DiskLayout.__default) Tagclass.DiskLayout.__default))
(assert (= (TagFamily Tclass.DiskLayout.__default) tytagFamily$_default))
(assert (forall ((bx@@177 T@U) ) (!  (=> (and (= (type bx@@177) BoxType) ($IsBox bx@@177 Tclass.DiskLayout.__default)) (and (= ($Box ($Unbox refType bx@@177)) bx@@177) ($Is ($Unbox refType bx@@177) Tclass.DiskLayout.__default))) :qid |unknown.0:0| :skolemid |3015| :pattern ( ($IsBox bx@@177 Tclass.DiskLayout.__default)) )))
(assert (forall (($o@@54 T@U) ) (!  (=> (= (type $o@@54) refType) (= ($Is $o@@54 Tclass.DiskLayout.__default)  (or (= $o@@54 null) (= (dtype $o@@54) Tclass.DiskLayout.__default)))) :qid |unknown.0:0| :skolemid |3016| :pattern ( ($Is $o@@54 Tclass.DiskLayout.__default)) )))
(assert (forall (($o@@55 T@U) ($h@@194 T@U) ) (!  (=> (and (= (type $o@@55) refType) (= (type $h@@194) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@55 Tclass.DiskLayout.__default $h@@194)  (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@194 $o@@55) alloc))))) :qid |unknown.0:0| :skolemid |3017| :pattern ( ($IsAlloc $o@@55 Tclass.DiskLayout.__default $h@@194)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.NumJournalBlocks) (< DiskLayout.__default.NumJournalBlocks 18446744073709551616)))))
(assert (= |DiskLayout.__default.NumJournalBlocks#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= DiskLayout.__default.NumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= DiskLayout.__default.NumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTableMaxLength) (< DiskLayout.__default.IndirectionTableMaxLength 18446744073709551616)))))
(assert (= |DiskLayout.__default.IndirectionTableMaxLength#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= DiskLayout.__default.IndirectionTableMaxLength (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= DiskLayout.__default.IndirectionTableMaxLength (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTable1Addr) (< DiskLayout.__default.IndirectionTable1Addr 18446744073709551616)))))
(assert (= |DiskLayout.__default.IndirectionTable1Addr#requires| true))
(assert  (=> true (=> true (and |DiskLayout.__default.NumJournalBlocks#canCall| (= DiskLayout.__default.IndirectionTable1Addr (LitInt (+ (Mul (LitInt 2) (LitInt 4096)) (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and |DiskLayout.__default.NumJournalBlocks#canCall| (= DiskLayout.__default.IndirectionTable1Addr (LitInt (+ (Mul (LitInt 2) (LitInt 4096)) (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTable2Addr) (< DiskLayout.__default.IndirectionTable2Addr 18446744073709551616)))))
(assert (= |DiskLayout.__default.IndirectionTable2Addr#requires| true))
(assert  (=> true (=> true (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| |DiskLayout.__default.IndirectionTableMaxLength#canCall|) (= DiskLayout.__default.IndirectionTable2Addr (LitInt (+ DiskLayout.__default.IndirectionTable1Addr DiskLayout.__default.IndirectionTableMaxLength)))))))
(assert  (=> true (=> true (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| |DiskLayout.__default.IndirectionTableMaxLength#canCall|) (= DiskLayout.__default.IndirectionTable2Addr (LitInt (+ DiskLayout.__default.IndirectionTable1Addr DiskLayout.__default.IndirectionTableMaxLength)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.JournalStartAddr) (< DiskLayout.__default.JournalStartAddr 18446744073709551616)))))
(assert (= |DiskLayout.__default.JournalStartAddr#requires| true))
(assert  (=> true (=> true (= DiskLayout.__default.JournalStartAddr (LitInt (Mul (LitInt 2) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.JournalStartAddr (LitInt (Mul (LitInt 2) (LitInt 4096)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.JournalEndAddr) (< DiskLayout.__default.JournalEndAddr 18446744073709551616)))))
(assert (= |DiskLayout.__default.JournalEndAddr#requires| true))
(assert  (=> true (=> true (and (and |DiskLayout.__default.JournalStartAddr#canCall| |DiskLayout.__default.NumJournalBlocks#canCall|) (= DiskLayout.__default.JournalEndAddr (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and (and |DiskLayout.__default.JournalStartAddr#canCall| |DiskLayout.__default.NumJournalBlocks#canCall|) (= DiskLayout.__default.JournalEndAddr (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (forall ((|point#0| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| |point#0|) (and (and (<= (LitInt 0) |point#0|) (< |point#0| 18446744073709551616)) (<= |point#0| (LitInt DiskLayout.__default.NumJournalBlocks)))) (and (<= (LitInt 0) (DiskLayout.__default.JournalPoint |point#0|)) (< (DiskLayout.__default.JournalPoint |point#0|) 18446744073709551616))) :qid |DiskLayoutidfy.44:32| :skolemid |3018| :pattern ( (DiskLayout.__default.JournalPoint |point#0|)) ))))
(assert (forall ((|point#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |point#0@@0|) (< |point#0@@0| 18446744073709551616)) (= (|DiskLayout.__default.JournalPoint#requires| |point#0@@0|) (<= |point#0@@0| (LitInt DiskLayout.__default.NumJournalBlocks)))) :qid |DiskLayoutidfy.44:32| :skolemid |3019| :pattern ( (|DiskLayout.__default.JournalPoint#requires| |point#0@@0|)) )))
(assert  (=> true (forall ((|point#0@@1| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| |point#0@@1|) (and (and (<= (LitInt 0) |point#0@@1|) (< |point#0@@1| 18446744073709551616)) (<= |point#0@@1| (LitInt DiskLayout.__default.NumJournalBlocks)))) (and |DiskLayout.__default.JournalStartAddr#canCall| (= (DiskLayout.__default.JournalPoint |point#0@@1|) (+ DiskLayout.__default.JournalStartAddr (Mul |point#0@@1| (LitInt 4096)))))) :qid |DiskLayoutidfy.44:32| :skolemid |3020| :pattern ( (DiskLayout.__default.JournalPoint |point#0@@1|)) ))))
(assert  (=> true (forall ((|point#0@@2| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| (LitInt |point#0@@2|)) (and (and (<= (LitInt 0) |point#0@@2|) (< |point#0@@2| 18446744073709551616)) (<= (LitInt |point#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (and |DiskLayout.__default.JournalStartAddr#canCall| (= (DiskLayout.__default.JournalPoint (LitInt |point#0@@2|)) (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt |point#0@@2|) (LitInt 4096))))))) :qid |DiskLayoutidfy.44:32| :weight 3 :skolemid |3021| :pattern ( (DiskLayout.__default.JournalPoint (LitInt |point#0@@2|))) ))))
(assert  (=> true (forall ((|addr#0| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| |addr#0|) (and (<= (LitInt 0) |addr#0|) (< |addr#0| 18446744073709551616))) true) :qid |DiskLayoutidfy.52:46| :skolemid |3022| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr |addr#0|)) ))))
(assert (forall ((|addr#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |addr#0@@0|) (< |addr#0@@0| 18446744073709551616)) (= (|DiskLayout.__default.ValidIndirectionTableAddr#requires| |addr#0@@0|) true)) :qid |DiskLayoutidfy.52:46| :skolemid |3023| :pattern ( (|DiskLayout.__default.ValidIndirectionTableAddr#requires| |addr#0@@0|)) )))
(assert  (=> true (forall ((|addr#0@@1| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| |addr#0@@1|) (and (<= (LitInt 0) |addr#0@@1|) (< |addr#0@@1| 18446744073709551616))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (not (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable2Addr#canCall|))) (= (DiskLayout.__default.ValidIndirectionTableAddr |addr#0@@1|)  (and true (or (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable2Addr))))))) :qid |DiskLayoutidfy.52:46| :skolemid |3024| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr |addr#0@@1|)) ))))
(assert  (=> true (forall ((|addr#0@@2| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (LitInt |addr#0@@2|)) (and (<= (LitInt 0) |addr#0@@2|) (< |addr#0@@2| 18446744073709551616))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (not (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable2Addr#canCall|))) (= (DiskLayout.__default.ValidIndirectionTableAddr (LitInt |addr#0@@2|))  (and true (or (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable2Addr))))))) :qid |DiskLayoutidfy.52:46| :weight 3 :skolemid |3025| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr (LitInt |addr#0@@2|))) ))))
(assert (forall (($ly@@370 T@U) (|addr#0@@3| Int) ) (!  (=> (= (type $ly@@370) LayerTypeType) (= (DiskLayout.__default.ValidNodeAddr ($LS $ly@@370) |addr#0@@3|) (DiskLayout.__default.ValidNodeAddr $ly@@370 |addr#0@@3|))) :qid |DiskLayoutidfy.59:30| :skolemid |3026| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@370) |addr#0@@3|)) )))
(assert (forall (($ly@@371 T@U) (|addr#0@@4| Int) ) (!  (=> (= (type $ly@@371) LayerTypeType) (= (DiskLayout.__default.ValidNodeAddr $ly@@371 |addr#0@@4|) (DiskLayout.__default.ValidNodeAddr $LZ |addr#0@@4|))) :qid |DiskLayoutidfy.59:30| :skolemid |3027| :pattern ( (DiskLayout.__default.ValidNodeAddr (AsFuelBottom $ly@@371) |addr#0@@4|)) )))
(assert  (=> true (forall (($ly@@372 T@U) (|addr#0@@5| Int) ) (!  (=> (and (= (type $ly@@372) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| |addr#0@@5|) (and (<= (LitInt 0) |addr#0@@5|) (< |addr#0@@5| 18446744073709551616)))) true) :qid |DiskLayoutidfy.59:30| :skolemid |3028| :pattern ( (DiskLayout.__default.ValidNodeAddr $ly@@372 |addr#0@@5|)) ))))
(assert (forall (($ly@@373 T@U) (|addr#0@@6| Int) ) (!  (=> (= (type $ly@@373) LayerTypeType) (=> (and (<= (LitInt 0) |addr#0@@6|) (< |addr#0@@6| 18446744073709551616)) (= (|DiskLayout.__default.ValidNodeAddr#requires| $ly@@373 |addr#0@@6|) true))) :qid |DiskLayoutidfy.59:30| :skolemid |3029| :pattern ( (|DiskLayout.__default.ValidNodeAddr#requires| $ly@@373 |addr#0@@6|)) )))
(assert  (=> true (forall (($ly@@374 T@U) (|addr#0@@7| Int) ) (!  (=> (and (= (type $ly@@374) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| |addr#0@@7|) (and (<= (LitInt 0) |addr#0@@7|) (< |addr#0@@7| 18446744073709551616)))) (and (and |Bounds.__default.NodeBlockSizeUint64#canCall| (=> (= (Mod |addr#0@@7| (LitInt Bounds.__default.NodeBlockSizeUint64)) (LitInt 0)) (and |Bounds.__default.NodeBlockSizeUint64#canCall| |Bounds.__default.MinNodeBlockIndexUint64#canCall|))) (= (DiskLayout.__default.ValidNodeAddr ($LS $ly@@374) |addr#0@@7|)  (and (= (Mod |addr#0@@7| (LitInt Bounds.__default.NodeBlockSizeUint64)) (LitInt 0)) (>= |addr#0@@7| (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64)))))))) :qid |DiskLayoutidfy.59:30| :skolemid |3030| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@374) |addr#0@@7|)) ))))
(assert  (=> true (forall (($ly@@375 T@U) (|addr#0@@8| Int) ) (!  (=> (and (= (type $ly@@375) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| (LitInt |addr#0@@8|)) (and (<= (LitInt 0) |addr#0@@8|) (< |addr#0@@8| 18446744073709551616)))) (and (and |Bounds.__default.NodeBlockSizeUint64#canCall| (=> (= (LitInt (Mod |addr#0@@8| (LitInt Bounds.__default.NodeBlockSizeUint64))) (LitInt 0)) (and |Bounds.__default.NodeBlockSizeUint64#canCall| |Bounds.__default.MinNodeBlockIndexUint64#canCall|))) (= (DiskLayout.__default.ValidNodeAddr ($LS $ly@@375) (LitInt |addr#0@@8|))  (and (= (LitInt (Mod |addr#0@@8| (LitInt Bounds.__default.NodeBlockSizeUint64))) (LitInt 0)) (>= (LitInt |addr#0@@8|) (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64)))))))) :qid |DiskLayoutidfy.59:30| :weight 3 :skolemid |3031| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@375) (LitInt |addr#0@@8|))) ))))
(assert (forall (($ly@@376 T@U) (|loc#0| T@U) ) (!  (=> (and (= (type $ly@@376) LayerTypeType) (= (type |loc#0|) DatatypeTypeType)) (= (DiskLayout.__default.ValidJournalLocation ($LS $ly@@376) |loc#0|) (DiskLayout.__default.ValidJournalLocation $ly@@376 |loc#0|))) :qid |DiskLayoutidfy.66:30| :skolemid |3032| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@376) |loc#0|)) )))
(assert (forall (($ly@@377 T@U) (|loc#0@@0| T@U) ) (!  (=> (and (= (type $ly@@377) LayerTypeType) (= (type |loc#0@@0|) DatatypeTypeType)) (= (DiskLayout.__default.ValidJournalLocation $ly@@377 |loc#0@@0|) (DiskLayout.__default.ValidJournalLocation $LZ |loc#0@@0|))) :qid |DiskLayoutidfy.66:30| :skolemid |3033| :pattern ( (DiskLayout.__default.ValidJournalLocation (AsFuelBottom $ly@@377) |loc#0@@0|)) )))
(assert  (=> true (forall (($ly@@378 T@U) (|loc#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@378) LayerTypeType) (= (type |loc#0@@1|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@1|) ($Is |loc#0@@1| Tclass.DiskLayout.Location))) true) :qid |DiskLayoutidfy.66:30| :skolemid |3034| :pattern ( (DiskLayout.__default.ValidJournalLocation $ly@@378 |loc#0@@1|)) ))))
(assert (forall (($ly@@379 T@U) (|loc#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@379) LayerTypeType) (= (type |loc#0@@2|) DatatypeTypeType)) ($Is |loc#0@@2| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidJournalLocation#requires| $ly@@379 |loc#0@@2|) true)) :qid |DiskLayoutidfy.66:30| :skolemid |3035| :pattern ( (|DiskLayout.__default.ValidJournalLocation#requires| $ly@@379 |loc#0@@2|)) )))
(assert  (=> true (forall (($ly@@380 T@U) (|loc#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@380) LayerTypeType) (= (type |loc#0@@3|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@3|) ($Is |loc#0@@3| Tclass.DiskLayout.Location))) (and (and (DiskLayout.Location.Location_q |loc#0@@3|) (=> (= (Mod (DiskLayout.Location.addr |loc#0@@3|) (LitInt 4096)) (LitInt 0)) (and (DiskLayout.Location.Location_q |loc#0@@3|) (=> (= (Mod (DiskLayout.Location.len |loc#0@@3|) (LitInt 4096)) (LitInt 0)) (and (DiskLayout.Location.Location_q |loc#0@@3|) (=> (>= (DiskLayout.Location.addr |loc#0@@3|) (LitInt (Mul (LitInt 2) (LitInt 4096)))) (and (DiskLayout.Location.Location_q |loc#0@@3|) (=> (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@3|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (and (and (DiskLayout.Location.Location_q |loc#0@@3|) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (< (Div (- (DiskLayout.Location.addr |loc#0@@3|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks) (and (and (DiskLayout.Location.Location_q |loc#0@@3|) (DiskLayout.Location.Location_q |loc#0@@3|)) (=> (<= (DiskLayout.Location.addr |loc#0@@3|) (- 18446744073709551615 (DiskLayout.Location.len |loc#0@@3|))) (and (and (DiskLayout.Location.Location_q |loc#0@@3|) (DiskLayout.Location.Location_q |loc#0@@3|)) |DiskLayout.__default.NumJournalBlocks#canCall|))))))))))))) (= (DiskLayout.__default.ValidJournalLocation ($LS $ly@@380) |loc#0@@3|)  (and (and (and (and (and (= (Mod (DiskLayout.Location.addr |loc#0@@3|) (LitInt 4096)) (LitInt 0)) (= (Mod (DiskLayout.Location.len |loc#0@@3|) (LitInt 4096)) (LitInt 0))) (>= (DiskLayout.Location.addr |loc#0@@3|) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@3|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (< (Div (- (DiskLayout.Location.addr |loc#0@@3|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (DiskLayout.Location.addr |loc#0@@3|) (- 18446744073709551615 (DiskLayout.Location.len |loc#0@@3|)))) (<= (+ (DiskLayout.Location.addr |loc#0@@3|) (DiskLayout.Location.len |loc#0@@3|)) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096)))))))) :qid |DiskLayoutidfy.66:30| :skolemid |3036| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@380) |loc#0@@3|)) ))))
(assert  (=> true (forall (($ly@@381 T@U) (|loc#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@381) LayerTypeType) (= (type |loc#0@@4|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| (Lit |loc#0@@4|)) ($Is |loc#0@@4| Tclass.DiskLayout.Location))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (=> (= (LitInt (Mod (DiskLayout.Location.addr (Lit |loc#0@@4|)) (LitInt 4096))) (LitInt 0)) (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (=> (= (LitInt (Mod (DiskLayout.Location.len (Lit |loc#0@@4|)) (LitInt 4096))) (LitInt 0)) (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@4|))) (LitInt (Mul (LitInt 2) (LitInt 4096)))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (=> (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@4|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (U_2_bool (Lit (bool_2_U (< (Div (- (DiskLayout.Location.addr (Lit |loc#0@@4|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (DiskLayout.Location.Location_q (Lit |loc#0@@4|))) (=> (<= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@4|))) (LitInt (- 18446744073709551615 (DiskLayout.Location.len (Lit |loc#0@@4|))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@4|)) (DiskLayout.Location.Location_q (Lit |loc#0@@4|))) |DiskLayout.__default.NumJournalBlocks#canCall|))))))))))))) (= (DiskLayout.__default.ValidJournalLocation ($LS $ly@@381) (Lit |loc#0@@4|))  (and (and (and (and (and (= (LitInt (Mod (DiskLayout.Location.addr (Lit |loc#0@@4|)) (LitInt 4096))) (LitInt 0)) (= (LitInt (Mod (DiskLayout.Location.len (Lit |loc#0@@4|)) (LitInt 4096))) (LitInt 0))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@4|))) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@4|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (< (Div (- (DiskLayout.Location.addr (Lit |loc#0@@4|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@4|))) (LitInt (- 18446744073709551615 (DiskLayout.Location.len (Lit |loc#0@@4|)))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@4|)) (DiskLayout.Location.len (Lit |loc#0@@4|)))) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096)))))))) :qid |DiskLayoutidfy.66:30| :weight 3 :skolemid |3037| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@381) (Lit |loc#0@@4|))) ))))
(assert (= (type StartFuel_DiskLayout._default.ValidJournalLocation) LayerTypeType))
(assert  (=> true (forall ((|loc#0@@5| T@U) ) (!  (=> (and (and (= (type |loc#0@@5|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@5|) ($Is |loc#0@@5| Tclass.DiskLayout.Location))) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@5|)) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@5|))) :qid |DiskLayoutidfy.86:50| :skolemid |3038| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@5|)) ))))
(assert (forall ((|loc#0@@6| T@U) ) (!  (=> (and (= (type |loc#0@@6|) DatatypeTypeType) ($Is |loc#0@@6| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidIndirectionTableLocation#requires| |loc#0@@6|) true)) :qid |DiskLayoutidfy.86:50| :skolemid |3039| :pattern ( (|DiskLayout.__default.ValidIndirectionTableLocation#requires| |loc#0@@6|)) )))
(assert  (=> true (forall ((|loc#0@@7| T@U) ) (!  (=> (and (= (type |loc#0@@7|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@7|) ($Is |loc#0@@7| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q |loc#0@@7|) (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (DiskLayout.Location.addr |loc#0@@7|))) (=> (DiskLayout.__default.ValidIndirectionTableAddr (DiskLayout.Location.addr |loc#0@@7|)) (and (DiskLayout.Location.Location_q |loc#0@@7|) (=> (< 0 (DiskLayout.Location.len |loc#0@@7|)) (and (DiskLayout.Location.Location_q |loc#0@@7|) |DiskLayout.__default.IndirectionTableMaxLength#canCall|))))) (= (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@7|)  (and (DiskLayout.__default.ValidIndirectionTableAddr (DiskLayout.Location.addr |loc#0@@7|)) (and (< 0 (DiskLayout.Location.len |loc#0@@7|)) (<= (DiskLayout.Location.len |loc#0@@7|) (LitInt DiskLayout.__default.IndirectionTableMaxLength))))))) :qid |DiskLayoutidfy.86:50| :skolemid |3040| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@7|)) ))))
(assert  (=> true (forall ((|loc#0@@8| T@U) ) (!  (=> (and (= (type |loc#0@@8|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| (Lit |loc#0@@8|)) ($Is |loc#0@@8| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))))) (=> (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (=> (U_2_bool (Lit (bool_2_U (< 0 (DiskLayout.Location.len (Lit |loc#0@@8|)))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) |DiskLayout.__default.IndirectionTableMaxLength#canCall|))))) (= (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@8|))  (and (DiskLayout.__default.ValidIndirectionTableAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|)))) (and (< 0 (DiskLayout.Location.len (Lit |loc#0@@8|))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@8|))) (LitInt DiskLayout.__default.IndirectionTableMaxLength))))))) :qid |DiskLayoutidfy.86:50| :weight 3 :skolemid |3041| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@8|))) ))))
(assert  (=> true (forall ((|loc#0@@9| T@U) ) (!  (=> (and (= (type |loc#0@@9|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@9|) ($Is |loc#0@@9| Tclass.DiskLayout.Location))) (and (=> (DiskLayout.__default.ValidNodeLocation |loc#0@@9|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@9|))) (=> (DiskLayout.__default.ValidNodeLocation |loc#0@@9|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@9|))))) :qid |DiskLayoutidfy.104:38| :skolemid |3042| :pattern ( (DiskLayout.__default.ValidNodeLocation |loc#0@@9|)) ))))
(assert (forall ((|loc#0@@10| T@U) ) (!  (=> (and (= (type |loc#0@@10|) DatatypeTypeType) ($Is |loc#0@@10| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidNodeLocation#requires| |loc#0@@10|) true)) :qid |DiskLayoutidfy.104:38| :skolemid |3043| :pattern ( (|DiskLayout.__default.ValidNodeLocation#requires| |loc#0@@10|)) )))
(assert (= (type StartFuel_DiskLayout._default.ValidNodeAddr) LayerTypeType))
(assert  (=> true (forall ((|loc#0@@11| T@U) ) (!  (=> (and (= (type |loc#0@@11|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@11|) ($Is |loc#0@@11| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q |loc#0@@11|) (|DiskLayout.__default.ValidNodeAddr#canCall| (DiskLayout.Location.addr |loc#0@@11|))) (=> (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (DiskLayout.Location.addr |loc#0@@11|)) (and (DiskLayout.Location.Location_q |loc#0@@11|) |Bounds.__default.NodeBlockSizeUint64#canCall|))) (= (DiskLayout.__default.ValidNodeLocation |loc#0@@11|)  (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (DiskLayout.Location.addr |loc#0@@11|)) (<= (DiskLayout.Location.len |loc#0@@11|) (LitInt Bounds.__default.NodeBlockSizeUint64)))))) :qid |DiskLayoutidfy.104:38| :skolemid |3044| :pattern ( (DiskLayout.__default.ValidNodeLocation |loc#0@@11|)) ))))
(assert  (=> true (forall ((|loc#0@@12| T@U) ) (!  (=> (and (= (type |loc#0@@12|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| (Lit |loc#0@@12|)) ($Is |loc#0@@12| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@12|)) (|DiskLayout.__default.ValidNodeAddr#canCall| (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|))))) (=> (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|)))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@12|)) |Bounds.__default.NodeBlockSizeUint64#canCall|))) (= (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@12|))  (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|)))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@12|))) (LitInt Bounds.__default.NodeBlockSizeUint64)))))) :qid |DiskLayoutidfy.104:38| :weight 3 :skolemid |3045| :pattern ( (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@12|))) ))))
(assert (= (type DiskLayout.__default.Superblock1Location) DatatypeTypeType))
(assert  (=> true (=> true (and (and (and (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidNodeLocation (Lit DiskLayout.__default.Superblock1Location)))))) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit DiskLayout.__default.Superblock1Location))))))) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit DiskLayout.__default.Superblock1Location)))) ($Is DiskLayout.__default.Superblock1Location Tclass.DiskLayout.Location)))))
(assert (= |DiskLayout.__default.Superblock1Location#requires| true))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock1Location (Lit (|#DiskLayout.Location.Location| (LitInt 0) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock1Location (Lit (|#DiskLayout.Location.Location| (LitInt 0) (LitInt 4096)))))))
(assert (= (type DiskLayout.__default.Superblock2Location) DatatypeTypeType))
(assert  (=> true (=> true (and (and (and (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidNodeLocation (Lit DiskLayout.__default.Superblock2Location)))))) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit DiskLayout.__default.Superblock2Location))))))) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit DiskLayout.__default.Superblock2Location)))) ($Is DiskLayout.__default.Superblock2Location Tclass.DiskLayout.Location)))))
(assert (= |DiskLayout.__default.Superblock2Location#requires| true))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock2Location (Lit (|#DiskLayout.Location.Location| (LitInt 4096) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock2Location (Lit (|#DiskLayout.Location.Location| (LitInt 4096) (LitInt 4096)))))))
(assert  (=> true (forall ((|loc#0@@13| T@U) ) (!  (=> (and (= (type |loc#0@@13|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@13|) ($Is |loc#0@@13| Tclass.DiskLayout.Location))) (and (and (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@13|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@13|))) (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@13|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@13|)))) (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@13|) (not (DiskLayout.__default.ValidNodeLocation |loc#0@@13|))))) :qid |DiskLayoutidfy.137:45| :skolemid |3046| :pattern ( (DiskLayout.__default.ValidSuperblock1Location |loc#0@@13|)) ))))
(assert (forall ((|loc#0@@14| T@U) ) (!  (=> (and (= (type |loc#0@@14|) DatatypeTypeType) ($Is |loc#0@@14| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidSuperblock1Location#requires| |loc#0@@14|) true)) :qid |DiskLayoutidfy.137:45| :skolemid |3047| :pattern ( (|DiskLayout.__default.ValidSuperblock1Location#requires| |loc#0@@14|)) )))
(assert  (=> true (forall ((|loc#0@@15| T@U) ) (!  (=> (and (= (type |loc#0@@15|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@15|) ($Is |loc#0@@15| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@15|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (= (DiskLayout.__default.ValidSuperblock1Location |loc#0@@15|) (|DiskLayout.Location#Equal| |loc#0@@15| DiskLayout.__default.Superblock1Location)))) :qid |DiskLayoutidfy.137:45| :skolemid |3048| :pattern ( (DiskLayout.__default.ValidSuperblock1Location |loc#0@@15|)) ))))
(assert  (=> true (forall ((|loc#0@@16| T@U) ) (!  (=> (and (= (type |loc#0@@16|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| (Lit |loc#0@@16|)) ($Is |loc#0@@16| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@16|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (= (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@16|)) (|DiskLayout.Location#Equal| |loc#0@@16| DiskLayout.__default.Superblock1Location)))) :qid |DiskLayoutidfy.137:45| :weight 3 :skolemid |3049| :pattern ( (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@16|))) ))))
(assert  (=> true (forall ((|loc#0@@17| T@U) ) (!  (=> (and (= (type |loc#0@@17|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@17|) ($Is |loc#0@@17| Tclass.DiskLayout.Location))) (and (and (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@17|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@17|))) (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@17|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@17|)))) (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@17|) (not (DiskLayout.__default.ValidNodeLocation |loc#0@@17|))))) :qid |DiskLayoutidfy.148:45| :skolemid |3050| :pattern ( (DiskLayout.__default.ValidSuperblock2Location |loc#0@@17|)) ))))
(assert (forall ((|loc#0@@18| T@U) ) (!  (=> (and (= (type |loc#0@@18|) DatatypeTypeType) ($Is |loc#0@@18| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidSuperblock2Location#requires| |loc#0@@18|) true)) :qid |DiskLayoutidfy.148:45| :skolemid |3051| :pattern ( (|DiskLayout.__default.ValidSuperblock2Location#requires| |loc#0@@18|)) )))
(assert  (=> true (forall ((|loc#0@@19| T@U) ) (!  (=> (and (= (type |loc#0@@19|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@19|) ($Is |loc#0@@19| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@19|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|) (= (DiskLayout.__default.ValidSuperblock2Location |loc#0@@19|) (|DiskLayout.Location#Equal| |loc#0@@19| DiskLayout.__default.Superblock2Location)))) :qid |DiskLayoutidfy.148:45| :skolemid |3052| :pattern ( (DiskLayout.__default.ValidSuperblock2Location |loc#0@@19|)) ))))
(assert  (=> true (forall ((|loc#0@@20| T@U) ) (!  (=> (and (= (type |loc#0@@20|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| (Lit |loc#0@@20|)) ($Is |loc#0@@20| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@20|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|) (= (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@20|)) (|DiskLayout.Location#Equal| |loc#0@@20| DiskLayout.__default.Superblock2Location)))) :qid |DiskLayoutidfy.148:45| :weight 3 :skolemid |3053| :pattern ( (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@20|))) ))))
(assert  (=> true (forall ((|loc#0@@21| T@U) ) (!  (=> (and (and (= (type |loc#0@@21|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| |loc#0@@21|) ($Is |loc#0@@21| Tclass.DiskLayout.Location))) (DiskLayout.__default.ValidSuperblockLocation |loc#0@@21|)) (or (DiskLayout.__default.ValidSuperblock1Location |loc#0@@21|) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@21|))) :qid |DiskLayoutidfy.160:44| :skolemid |3054| :pattern ( (DiskLayout.__default.ValidSuperblockLocation |loc#0@@21|)) ))))
(assert (forall ((|loc#0@@22| T@U) ) (!  (=> (and (= (type |loc#0@@22|) DatatypeTypeType) ($Is |loc#0@@22| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidSuperblockLocation#requires| |loc#0@@22|) true)) :qid |DiskLayoutidfy.160:44| :skolemid |3055| :pattern ( (|DiskLayout.__default.ValidSuperblockLocation#requires| |loc#0@@22|)) )))
(assert  (=> true (forall ((|loc#0@@23| T@U) ) (!  (=> (and (= (type |loc#0@@23|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| |loc#0@@23|) ($Is |loc#0@@23| Tclass.DiskLayout.Location))) (and (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@23|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (=> (not (|DiskLayout.Location#Equal| |loc#0@@23| DiskLayout.__default.Superblock1Location)) (and (and (|$IsA#DiskLayout.Location| |loc#0@@23|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|))) (= (DiskLayout.__default.ValidSuperblockLocation |loc#0@@23|)  (or (|DiskLayout.Location#Equal| |loc#0@@23| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@23| DiskLayout.__default.Superblock2Location))))) :qid |DiskLayoutidfy.160:44| :skolemid |3056| :pattern ( (DiskLayout.__default.ValidSuperblockLocation |loc#0@@23|)) ))))
(assert  (=> true (forall ((|loc#0@@24| T@U) ) (!  (=> (and (= (type |loc#0@@24|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| (Lit |loc#0@@24|)) ($Is |loc#0@@24| Tclass.DiskLayout.Location))) (and (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@24|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (=> (not (|DiskLayout.Location#Equal| |loc#0@@24| DiskLayout.__default.Superblock1Location)) (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@24|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|))) (= (DiskLayout.__default.ValidSuperblockLocation (Lit |loc#0@@24|))  (or (|DiskLayout.Location#Equal| |loc#0@@24| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@24| DiskLayout.__default.Superblock2Location))))) :qid |DiskLayoutidfy.160:44| :weight 3 :skolemid |3057| :pattern ( (DiskLayout.__default.ValidSuperblockLocation (Lit |loc#0@@24|))) ))))
(assert  (=> true (forall ((|loc#0@@25| T@U) ) (!  (=> (and (= (type |loc#0@@25|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| |loc#0@@25|) ($Is |loc#0@@25| Tclass.DiskLayout.Location))) true) :qid |DiskLayoutidfy.168:34| :skolemid |3058| :pattern ( (DiskLayout.__default.ValidLocation |loc#0@@25|)) ))))
(assert (forall ((|loc#0@@26| T@U) ) (!  (=> (and (= (type |loc#0@@26|) DatatypeTypeType) ($Is |loc#0@@26| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.ValidLocation#requires| |loc#0@@26|) true)) :qid |DiskLayoutidfy.168:34| :skolemid |3059| :pattern ( (|DiskLayout.__default.ValidLocation#requires| |loc#0@@26|)) )))
(assert  (=> true (forall ((|loc#0@@27| T@U) ) (!  (=> (and (= (type |loc#0@@27|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| |loc#0@@27|) ($Is |loc#0@@27| Tclass.DiskLayout.Location))) (and (and (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@27|) (=> (not (DiskLayout.__default.ValidSuperblock1Location |loc#0@@27|)) (and (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@27|) (=> (not (DiskLayout.__default.ValidSuperblock2Location |loc#0@@27|)) (and (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@27|) (=> (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@27|)) (and (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@27|) (=> (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@27|)) (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@27|))))))))) (= (DiskLayout.__default.ValidLocation |loc#0@@27|)  (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location |loc#0@@27|) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@27|)) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@27|)) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@27|)) (DiskLayout.__default.ValidNodeLocation |loc#0@@27|))))) :qid |DiskLayoutidfy.168:34| :skolemid |3060| :pattern ( (DiskLayout.__default.ValidLocation |loc#0@@27|)) ))))
(assert  (=> true (forall ((|loc#0@@28| T@U) ) (!  (=> (and (= (type |loc#0@@28|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| (Lit |loc#0@@28|)) ($Is |loc#0@@28| Tclass.DiskLayout.Location))) (and (and (|DiskLayout.__default.ValidSuperblock1Location#canCall| (Lit |loc#0@@28|)) (=> (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@28|)))))) (and (|DiskLayout.__default.ValidSuperblock2Location#canCall| (Lit |loc#0@@28|)) (=> (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@28|)))))) (and (|DiskLayout.__default.ValidJournalLocation#canCall| (Lit |loc#0@@28|)) (=> (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@28|))) (and (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| (Lit |loc#0@@28|)) (=> (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@28|)))))) (|DiskLayout.__default.ValidNodeLocation#canCall| (Lit |loc#0@@28|)))))))))) (= (DiskLayout.__default.ValidLocation (Lit |loc#0@@28|))  (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@28|)) (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@28|))) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@28|))) (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@28|))) (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@28|)))))) :qid |DiskLayoutidfy.168:34| :weight 3 :skolemid |3061| :pattern ( (DiskLayout.__default.ValidLocation (Lit |loc#0@@28|))) ))))
(assert  (=> true (forall ((|loc#0@@29| T@U) (|loc'#0| T@U) ) (!  (=> (and (and (= (type |loc#0@@29|) DatatypeTypeType) (= (type |loc'#0|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| |loc#0@@29| |loc'#0|) (and ($Is |loc#0@@29| Tclass.DiskLayout.Location) ($Is |loc'#0| Tclass.DiskLayout.Location)))) true) :qid |DiskLayoutidfy.188:21| :skolemid |3062| :pattern ( (DiskLayout.__default.overlap |loc#0@@29| |loc'#0|)) ))))
(assert (forall ((|loc#0@@30| T@U) (|loc'#0@@0| T@U) ) (!  (=> (and (and (= (type |loc#0@@30|) DatatypeTypeType) (= (type |loc'#0@@0|) DatatypeTypeType)) (and ($Is |loc#0@@30| Tclass.DiskLayout.Location) ($Is |loc'#0@@0| Tclass.DiskLayout.Location))) (= (|DiskLayout.__default.overlap#requires| |loc#0@@30| |loc'#0@@0|) true)) :qid |DiskLayoutidfy.188:21| :skolemid |3063| :pattern ( (|DiskLayout.__default.overlap#requires| |loc#0@@30| |loc'#0@@0|)) )))
(assert  (=> true (forall ((|loc#0@@31| T@U) (|loc'#0@@1| T@U) ) (!  (=> (and (and (= (type |loc#0@@31|) DatatypeTypeType) (= (type |loc'#0@@1|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| |loc#0@@31| |loc'#0@@1|) (and ($Is |loc#0@@31| Tclass.DiskLayout.Location) ($Is |loc'#0@@1| Tclass.DiskLayout.Location)))) (and (and (and (and (DiskLayout.Location.Location_q |loc#0@@31|) (DiskLayout.Location.Location_q |loc#0@@31|)) (DiskLayout.Location.Location_q |loc'#0@@1|)) (=> (> (+ (DiskLayout.Location.addr |loc#0@@31|) (DiskLayout.Location.len |loc#0@@31|)) (DiskLayout.Location.addr |loc'#0@@1|)) (and (and (DiskLayout.Location.Location_q |loc'#0@@1|) (DiskLayout.Location.Location_q |loc'#0@@1|)) (DiskLayout.Location.Location_q |loc#0@@31|)))) (= (DiskLayout.__default.overlap |loc#0@@31| |loc'#0@@1|)  (and (> (+ (DiskLayout.Location.addr |loc#0@@31|) (DiskLayout.Location.len |loc#0@@31|)) (DiskLayout.Location.addr |loc'#0@@1|)) (> (+ (DiskLayout.Location.addr |loc'#0@@1|) (DiskLayout.Location.len |loc'#0@@1|)) (DiskLayout.Location.addr |loc#0@@31|)))))) :qid |DiskLayoutidfy.188:21| :skolemid |3064| :pattern ( (DiskLayout.__default.overlap |loc#0@@31| |loc'#0@@1|)) ))))
(assert  (=> true (forall ((|loc#0@@32| T@U) (|loc'#0@@2| T@U) ) (!  (=> (and (and (= (type |loc#0@@32|) DatatypeTypeType) (= (type |loc'#0@@2|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| (Lit |loc#0@@32|) (Lit |loc'#0@@2|)) (and ($Is |loc#0@@32| Tclass.DiskLayout.Location) ($Is |loc'#0@@2| Tclass.DiskLayout.Location)))) (and (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@32|)) (DiskLayout.Location.Location_q (Lit |loc#0@@32|))) (DiskLayout.Location.Location_q (Lit |loc'#0@@2|))) (=> (U_2_bool (Lit (bool_2_U (> (+ (DiskLayout.Location.addr (Lit |loc#0@@32|)) (DiskLayout.Location.len (Lit |loc#0@@32|))) (DiskLayout.Location.addr (Lit |loc'#0@@2|)))))) (and (and (DiskLayout.Location.Location_q (Lit |loc'#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc'#0@@2|))) (DiskLayout.Location.Location_q (Lit |loc#0@@32|))))) (= (DiskLayout.__default.overlap (Lit |loc#0@@32|) (Lit |loc'#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (> (+ (DiskLayout.Location.addr (Lit |loc#0@@32|)) (DiskLayout.Location.len (Lit |loc#0@@32|))) (DiskLayout.Location.addr (Lit |loc'#0@@2|))) (> (+ (DiskLayout.Location.addr (Lit |loc'#0@@2|)) (DiskLayout.Location.len (Lit |loc'#0@@2|))) (DiskLayout.Location.addr (Lit |loc#0@@32|)))))))))) :qid |DiskLayoutidfy.188:21| :weight 3 :skolemid |3065| :pattern ( (DiskLayout.__default.overlap (Lit |loc#0@@32|) (Lit |loc'#0@@2|))) ))))
(assert (forall ((arg0@@593 Int) (arg1@@287 Int) ) (! (= (type (DiskLayout.__default.JournalRangeLocation arg0@@593 arg1@@287)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalRangeLocation| :pattern ( (DiskLayout.__default.JournalRangeLocation arg0@@593 arg1@@287)) )))
(assert  (=> true (forall ((|start#0@@56| Int) (|len#0@@43| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@56| |len#0@@43|) (and (and (and (<= (LitInt 0) |start#0@@56|) (< |start#0@@56| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@43|) (< |len#0@@43| 18446744073709551616))) (and (< |start#0@@56| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@56| |len#0@@43|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (DiskLayout.__default.JournalRangeLocation |start#0@@56| |len#0@@43|)) ($Is (DiskLayout.__default.JournalRangeLocation |start#0@@56| |len#0@@43|) Tclass.DiskLayout.Location))) :qid |DiskLayoutidfy.234:40| :skolemid |3066| :pattern ( (DiskLayout.__default.JournalRangeLocation |start#0@@56| |len#0@@43|)) ))))
(assert (forall ((|start#0@@57| Int) (|len#0@@44| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@57|) (< |start#0@@57| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@44|) (< |len#0@@44| 18446744073709551616))) (= (|DiskLayout.__default.JournalRangeLocation#requires| |start#0@@57| |len#0@@44|)  (and (< |start#0@@57| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@57| |len#0@@44|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :qid |DiskLayoutidfy.234:40| :skolemid |3067| :pattern ( (|DiskLayout.__default.JournalRangeLocation#requires| |start#0@@57| |len#0@@44|)) )))
(assert  (and (= (type MoreFuel_DiskLayout._default.ValidJournalLocation0) LayerTypeType) (= (type StartFuelAssert_DiskLayout._default.ValidJournalLocation) LayerTypeType)))
(assert  (=> true (forall ((|start#0@@58| Int) (|len#0@@45| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@58| |len#0@@45|) (and (and (and (<= (LitInt 0) |start#0@@58|) (< |start#0@@58| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@45|) (< |len#0@@45| 18446744073709551616))) (and (< |start#0@@58| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@58| |len#0@@45|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (|DiskLayout.__default.JournalPoint#canCall| |start#0@@58|) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation0)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation0)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation0) MoreFuel_DiskLayout._default.ValidJournalLocation0)) (= (DiskLayout.__default.JournalRangeLocation |start#0@@58| |len#0@@45|) (|#DiskLayout.Location.Location| (DiskLayout.__default.JournalPoint |start#0@@58|) (Mul |len#0@@45| (LitInt 4096))))))) :qid |DiskLayoutidfy.234:40| :skolemid |3068| :pattern ( (DiskLayout.__default.JournalRangeLocation |start#0@@58| |len#0@@45|)) ))))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation1) LayerTypeType))
(assert  (=> true (forall ((|start#0@@59| Int) (|len#0@@46| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt |start#0@@59|) (LitInt |len#0@@46|)) (and (and (and (<= (LitInt 0) |start#0@@59|) (< |start#0@@59| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@46|) (< |len#0@@46| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |start#0@@59| DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt (+ |start#0@@59| |len#0@@46|)) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@59|)) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation1)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation1)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation1) MoreFuel_DiskLayout._default.ValidJournalLocation1)) (= (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@59|) (LitInt |len#0@@46|)) (Lit (|#DiskLayout.Location.Location| (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@59|))) (LitInt (Mul (LitInt |len#0@@46|) (LitInt 4096))))))))) :qid |DiskLayoutidfy.234:40| :weight 3 :skolemid |3069| :pattern ( (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@59|) (LitInt |len#0@@46|))) ))))
(assert  (=> true (forall ((|loc#0@@33| T@U) (|start#0@@60| Int) (|len#0@@47| Int) ) (!  (=> (and (= (type |loc#0@@33|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| |loc#0@@33| |start#0@@60| |len#0@@47|) (and (and (and ($Is |loc#0@@33| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@60|) (< |start#0@@60| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@47|) (< |len#0@@47| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@60|) (< |start#0@@60| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@47|) (<= |len#0@@47| (LitInt DiskLayout.__default.NumJournalBlocks))))))) true) :qid |DiskLayoutidfy.243:48| :skolemid |3070| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@33| |start#0@@60| |len#0@@47|)) ))))
(assert (forall ((|loc#0@@34| T@U) (|start#0@@61| Int) (|len#0@@48| Int) ) (!  (=> (= (type |loc#0@@34|) DatatypeTypeType) (=> (and (and ($Is |loc#0@@34| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@61|) (< |start#0@@61| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@48|) (< |len#0@@48| 18446744073709551616))) (= (|DiskLayout.__default.locContainedInCircularJournalRange#requires| |loc#0@@34| |start#0@@61| |len#0@@48|)  (and (and (<= (LitInt 0) |start#0@@61|) (< |start#0@@61| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@48|) (<= |len#0@@48| (LitInt DiskLayout.__default.NumJournalBlocks))))))) :qid |DiskLayoutidfy.243:48| :skolemid |3071| :pattern ( (|DiskLayout.__default.locContainedInCircularJournalRange#requires| |loc#0@@34| |start#0@@61| |len#0@@48|)) )))
(assert  (=> true (forall ((|loc#0@@35| T@U) (|start#0@@62| Int) (|len#0@@49| Int) ) (!  (=> (and (= (type |loc#0@@35|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| |loc#0@@35| |start#0@@62| |len#0@@49|) (and (and (and ($Is |loc#0@@35| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@62|) (< |start#0@@62| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@49|) (< |len#0@@49| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@62|) (< |start#0@@62| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@49|) (<= |len#0@@49| (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (+ |start#0@@62| |len#0@@49|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@62|)) (=> (>= (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.__default.JournalPoint |start#0@@62|)) (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (DiskLayout.Location.Location_q |loc#0@@35|)) (|DiskLayout.__default.JournalPoint#canCall| (+ |start#0@@62| |len#0@@49|))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (+ |start#0@@62| |len#0@@49|)) (and (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@62|)) (=> (>= (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.__default.JournalPoint |start#0@@62|)) (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (DiskLayout.Location.Location_q |loc#0@@35|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (not (and (>= (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.__default.JournalPoint |start#0@@62|)) (<= (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks)))))) (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (>= (DiskLayout.Location.addr |loc#0@@35|) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (DiskLayout.Location.Location_q |loc#0@@35|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (- (+ |start#0@@62| |len#0@@49|) DiskLayout.__default.NumJournalBlocks)))))))))) (= (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@35| |start#0@@62| |len#0@@49|) (ite (<= (+ |start#0@@62| |len#0@@49|) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.__default.JournalPoint |start#0@@62|)) (<= (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (DiskLayout.__default.JournalPoint (+ |start#0@@62| |len#0@@49|))))  (or (and (>= (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.__default.JournalPoint |start#0@@62|)) (<= (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@35|) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (DiskLayout.__default.JournalPoint (- (+ |start#0@@62| |len#0@@49|) DiskLayout.__default.NumJournalBlocks))))))))) :qid |DiskLayoutidfy.243:48| :skolemid |3072| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@35| |start#0@@62| |len#0@@49|)) ))))
(assert  (=> true (forall ((|loc#0@@36| T@U) (|start#0@@63| Int) (|len#0@@50| Int) ) (!  (=> (and (= (type |loc#0@@36|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| (Lit |loc#0@@36|) (LitInt |start#0@@63|) (LitInt |len#0@@50|)) (and (and (and ($Is |loc#0@@36| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@63|) (< |start#0@@63| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@50|) (< |len#0@@50| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |start#0@@63|)) (< |start#0@@63| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt |len#0@@50|)) (<= (LitInt |len#0@@50|) (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (LitInt (+ |start#0@@63| |len#0@@50|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@63|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@63|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (DiskLayout.Location.Location_q (Lit |loc#0@@36|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt (+ |start#0@@63| |len#0@@50|)))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt (+ |start#0@@63| |len#0@@50|))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@63|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@63|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (DiskLayout.Location.Location_q (Lit |loc#0@@36|))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (not (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@63|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks)))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (DiskLayout.Location.Location_q (Lit |loc#0@@36|))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt (- (+ |start#0@@63| |len#0@@50|) DiskLayout.__default.NumJournalBlocks))))))))))) (= (DiskLayout.__default.locContainedInCircularJournalRange (Lit |loc#0@@36|) (LitInt |start#0@@63|) (LitInt |len#0@@50|)) (ite (<= (LitInt (+ |start#0@@63| |len#0@@50|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@63|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@63| |len#0@@50|))))))  (or (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@63|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@36|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@63| |len#0@@50|) DiskLayout.__default.NumJournalBlocks))))))))))) :qid |DiskLayoutidfy.243:48| :weight 3 :skolemid |3073| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange (Lit |loc#0@@36|) (LitInt |start#0@@63|) (LitInt |len#0@@50|))) ))))
(assert  (=> true (forall ((|loc#0@@37| T@U) (|start#0@@64| Int) (|len#0@@51| Int) ) (!  (=> (and (= (type |loc#0@@37|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| |loc#0@@37| |start#0@@64| |len#0@@51|) (and (and (and ($Is |loc#0@@37| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@64|) (< |start#0@@64| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@51|) (< |len#0@@51| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@64|) (< |start#0@@64| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@51|) (<= |len#0@@51| (LitInt DiskLayout.__default.NumJournalBlocks))))))) true) :qid |DiskLayoutidfy.264:49| :skolemid |3074| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@37| |start#0@@64| |len#0@@51|)) ))))
(assert (forall ((|loc#0@@38| T@U) (|start#0@@65| Int) (|len#0@@52| Int) ) (!  (=> (= (type |loc#0@@38|) DatatypeTypeType) (=> (and (and ($Is |loc#0@@38| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@65|) (< |start#0@@65| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@52|) (< |len#0@@52| 18446744073709551616))) (= (|DiskLayout.__default.locDisjointFromCircularJournalRange#requires| |loc#0@@38| |start#0@@65| |len#0@@52|)  (and (and (<= (LitInt 0) |start#0@@65|) (< |start#0@@65| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@52|) (<= |len#0@@52| (LitInt DiskLayout.__default.NumJournalBlocks))))))) :qid |DiskLayoutidfy.264:49| :skolemid |3075| :pattern ( (|DiskLayout.__default.locDisjointFromCircularJournalRange#requires| |loc#0@@38| |start#0@@65| |len#0@@52|)) )))
(assert  (=> true (forall ((|loc#0@@39| T@U) (|start#0@@66| Int) (|len#0@@53| Int) ) (!  (=> (and (= (type |loc#0@@39|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| |loc#0@@39| |start#0@@66| |len#0@@53|) (and (and (and ($Is |loc#0@@39| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@66|) (< |start#0@@66| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@53|) (< |len#0@@53| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@66|) (< |start#0@@66| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@53|) (<= |len#0@@53| (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (+ |start#0@@66| |len#0@@53|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@66|)) (=> (< (DiskLayout.__default.JournalPoint |start#0@@66|) (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|))) (and (DiskLayout.Location.Location_q |loc#0@@39|) (|DiskLayout.__default.JournalPoint#canCall| (+ |start#0@@66| |len#0@@53|))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (+ |start#0@@66| |len#0@@53|)) (and (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt 0))) (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|))) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (=> (> (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (DiskLayout.Location.addr |loc#0@@39|)) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (- (+ |start#0@@66| |len#0@@53|) DiskLayout.__default.NumJournalBlocks)))) (=> (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint (- (+ |start#0@@66| |len#0@@53|) DiskLayout.__default.NumJournalBlocks))) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@66|)))))))))) (= (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@39| |start#0@@66| |len#0@@53|) (ite (<= (+ |start#0@@66| |len#0@@53|) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint |start#0@@66|)) (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint (+ |start#0@@66| |len#0@@53|))))  (or (or (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (DiskLayout.Location.addr |loc#0@@39|) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint (- (+ |start#0@@66| |len#0@@53|) DiskLayout.__default.NumJournalBlocks))) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint |start#0@@66|)))))))) :qid |DiskLayoutidfy.264:49| :skolemid |3076| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@39| |start#0@@66| |len#0@@53|)) ))))
(assert  (=> true (forall ((|loc#0@@40| T@U) (|start#0@@67| Int) (|len#0@@54| Int) ) (!  (=> (and (= (type |loc#0@@40|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| (Lit |loc#0@@40|) (LitInt |start#0@@67|) (LitInt |len#0@@54|)) (and (and (and ($Is |loc#0@@40| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@67|) (< |start#0@@67| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@54|) (< |len#0@@54| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |start#0@@67|)) (< |start#0@@67| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt |len#0@@54|)) (<= (LitInt |len#0@@54|) (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (LitInt (+ |start#0@@67| |len#0@@54|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@67|))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@67|))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt (+ |start#0@@67| |len#0@@54|)))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt (+ |start#0@@67| |len#0@@54|))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt 0))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (=> (> (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt (- (+ |start#0@@67| |len#0@@54|) DiskLayout.__default.NumJournalBlocks))))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@67| |len#0@@54|) DiskLayout.__default.NumJournalBlocks))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@67|))))))))))) (= (DiskLayout.__default.locDisjointFromCircularJournalRange (Lit |loc#0@@40|) (LitInt |start#0@@67|) (LitInt |len#0@@54|)) (ite (<= (LitInt (+ |start#0@@67| |len#0@@54|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@67|)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@67| |len#0@@54|))))))  (or (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@67| |len#0@@54|) DiskLayout.__default.NumJournalBlocks))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@67|)))))))))) :qid |DiskLayoutidfy.264:49| :weight 3 :skolemid |3077| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange (Lit |loc#0@@40|) (LitInt |start#0@@67|) (LitInt |len#0@@54|))) ))))
(assert  (=> true (forall ((|start#0@@68| Int) (|span#0| Int) ) (!  (=> true true) :qid |DiskLayoutidfy.285:26| :skolemid |3078| :pattern ( (DiskLayout.__default.JournalPosAdd |start#0@@68| |span#0|)) ))))
(assert (forall ((|start#0@@69| Int) (|span#0@@0| Int) ) (! (= (|DiskLayout.__default.JournalPosAdd#requires| |start#0@@69| |span#0@@0|) true) :qid |DiskLayoutidfy.285:26| :skolemid |3079| :pattern ( (|DiskLayout.__default.JournalPosAdd#requires| |start#0@@69| |span#0@@0|)) )))
(assert  (=> true (forall ((|start#0@@70| Int) (|span#0@@1| Int) ) (!  (=> true (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (>= (+ |start#0@@70| |span#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (= (DiskLayout.__default.JournalPosAdd |start#0@@70| |span#0@@1|) (ite (>= (+ |start#0@@70| |span#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) (- (+ |start#0@@70| |span#0@@1|) DiskLayout.__default.NumJournalBlocks) (+ |start#0@@70| |span#0@@1|))))) :qid |DiskLayoutidfy.285:26| :skolemid |3080| :pattern ( (DiskLayout.__default.JournalPosAdd |start#0@@70| |span#0@@1|)) ))))
(assert  (=> true (forall ((|start#0@@71| Int) (|span#0@@2| Int) ) (!  (=> true (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (>= (LitInt (+ |start#0@@71| |span#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (= (DiskLayout.__default.JournalPosAdd (LitInt |start#0@@71|) (LitInt |span#0@@2|)) (ite (>= (LitInt (+ |start#0@@71| |span#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (- (+ |start#0@@71| |span#0@@2|) DiskLayout.__default.NumJournalBlocks) (+ |start#0@@71| |span#0@@2|))))) :qid |DiskLayoutidfy.285:26| :weight 3 :skolemid |3081| :pattern ( (DiskLayout.__default.JournalPosAdd (LitInt |start#0@@71|) (LitInt |span#0@@2|))) ))))
(assert (forall ((arg0@@594 Int) (arg1@@288 Int) ) (! (= (type (DiskLayout.__default.JournalFrontLocation arg0@@594 arg1@@288)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalFrontLocation| :pattern ( (DiskLayout.__default.JournalFrontLocation arg0@@594 arg1@@288)) )))
(assert  (=> true (forall ((|start#0@@72| Int) (|len#0@@55| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| |start#0@@72| |len#0@@55|) (and (and (and (<= (LitInt 0) |start#0@@72|) (< |start#0@@72| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@55|) (< |len#0@@55| 18446744073709551616))) (< |start#0@@72| DiskLayout.__default.NumJournalBlocks))) ($Is (DiskLayout.__default.JournalFrontLocation |start#0@@72| |len#0@@55|) (Tclass.Options.Option Tclass.DiskLayout.Location))) :qid |DiskLayoutidfy.293:33| :skolemid |3082| :pattern ( (DiskLayout.__default.JournalFrontLocation |start#0@@72| |len#0@@55|)) ))))
(assert (forall ((|start#0@@73| Int) (|len#0@@56| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@73|) (< |start#0@@73| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@56|) (< |len#0@@56| 18446744073709551616))) (= (|DiskLayout.__default.JournalFrontLocation#requires| |start#0@@73| |len#0@@56|) (< |start#0@@73| DiskLayout.__default.NumJournalBlocks))) :qid |DiskLayoutidfy.293:33| :skolemid |3083| :pattern ( (|DiskLayout.__default.JournalFrontLocation#requires| |start#0@@73| |len#0@@56|)) )))
(assert  (=> true (forall ((|start#0@@74| Int) (|len#0@@57| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| |start#0@@74| |len#0@@57|) (and (and (and (<= (LitInt 0) |start#0@@74|) (< |start#0@@74| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@57|) (< |len#0@@57| 18446744073709551616))) (< |start#0@@74| DiskLayout.__default.NumJournalBlocks))) (and (=> (not (= |len#0@@57| (LitInt 0))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@74|) |len#0@@57|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@74| (ite (<= |len#0@@57| (- DiskLayout.__default.NumJournalBlocks |start#0@@74|)) |len#0@@57| (- DiskLayout.__default.NumJournalBlocks |start#0@@74|))))) (= (DiskLayout.__default.JournalFrontLocation |start#0@@74| |len#0@@57|) (ite (= |len#0@@57| (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation |start#0@@74| (ite (<= |len#0@@57| (- DiskLayout.__default.NumJournalBlocks |start#0@@74|)) |len#0@@57| (- DiskLayout.__default.NumJournalBlocks |start#0@@74|))))))))) :qid |DiskLayoutidfy.293:33| :skolemid |3084| :pattern ( (DiskLayout.__default.JournalFrontLocation |start#0@@74| |len#0@@57|)) ))))
(assert  (=> true (forall ((|start#0@@75| Int) (|len#0@@58| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| (LitInt |start#0@@75|) (LitInt |len#0@@58|)) (and (and (and (<= (LitInt 0) |start#0@@75|) (< |start#0@@75| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@58|) (< |len#0@@58| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |start#0@@75| DiskLayout.__default.NumJournalBlocks)))))) (and (=> (not (= (LitInt |len#0@@58|) (LitInt 0))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@75|)) (LitInt |len#0@@58|)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt |start#0@@75|) (ite (<= (LitInt |len#0@@58|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@75|))) |len#0@@58| (- DiskLayout.__default.NumJournalBlocks |start#0@@75|))))) (= (DiskLayout.__default.JournalFrontLocation (LitInt |start#0@@75|) (LitInt |len#0@@58|)) (ite (= (LitInt |len#0@@58|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@75|) (ite (<= (LitInt |len#0@@58|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@75|))) |len#0@@58| (- DiskLayout.__default.NumJournalBlocks |start#0@@75|))))))))) :qid |DiskLayoutidfy.293:33| :weight 3 :skolemid |3085| :pattern ( (DiskLayout.__default.JournalFrontLocation (LitInt |start#0@@75|) (LitInt |len#0@@58|))) ))))
(assert (forall ((arg0@@595 Int) (arg1@@289 Int) ) (! (= (type (DiskLayout.__default.JournalBackLocation arg0@@595 arg1@@289)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalBackLocation| :pattern ( (DiskLayout.__default.JournalBackLocation arg0@@595 arg1@@289)) )))
(assert  (=> true (forall ((|start#0@@76| Int) (|len#0@@59| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| |start#0@@76| |len#0@@59|) (and (and (and (<= (LitInt 0) |start#0@@76|) (< |start#0@@76| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@59|) (< |len#0@@59| 18446744073709551616))) (and (< |start#0@@76| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@59| (LitInt DiskLayout.__default.NumJournalBlocks))))) ($Is (DiskLayout.__default.JournalBackLocation |start#0@@76| |len#0@@59|) (Tclass.Options.Option Tclass.DiskLayout.Location))) :qid |DiskLayoutidfy.309:32| :skolemid |3086| :pattern ( (DiskLayout.__default.JournalBackLocation |start#0@@76| |len#0@@59|)) ))))
(assert (forall ((|start#0@@77| Int) (|len#0@@60| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@77|) (< |start#0@@77| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@60|) (< |len#0@@60| 18446744073709551616))) (= (|DiskLayout.__default.JournalBackLocation#requires| |start#0@@77| |len#0@@60|)  (and (< |start#0@@77| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@60| (LitInt DiskLayout.__default.NumJournalBlocks))))) :qid |DiskLayoutidfy.309:32| :skolemid |3087| :pattern ( (|DiskLayout.__default.JournalBackLocation#requires| |start#0@@77| |len#0@@60|)) )))
(assert  (=> true (forall ((|start#0@@78| Int) (|len#0@@61| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| |start#0@@78| |len#0@@61|) (and (and (and (<= (LitInt 0) |start#0@@78|) (< |start#0@@78| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@61|) (< |len#0@@61| 18446744073709551616))) (and (< |start#0@@78| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@61| (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= |len#0@@61| (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@78|) |len#0@@61|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt 0) (- |len#0@@61| (- DiskLayout.__default.NumJournalBlocks |start#0@@78|))))))) (= (DiskLayout.__default.JournalBackLocation |start#0@@78| |len#0@@61|) (ite (= |len#0@@61| (LitInt 0)) |#Options.Option.None| (ite (<= |len#0@@61| (- DiskLayout.__default.NumJournalBlocks |start#0@@78|)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation (LitInt 0) (- |len#0@@61| (- DiskLayout.__default.NumJournalBlocks |start#0@@78|)))))))))) :qid |DiskLayoutidfy.309:32| :skolemid |3088| :pattern ( (DiskLayout.__default.JournalBackLocation |start#0@@78| |len#0@@61|)) ))))
(assert  (=> true (forall ((|start#0@@79| Int) (|len#0@@62| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| (LitInt |start#0@@79|) (LitInt |len#0@@62|)) (and (and (and (<= (LitInt 0) |start#0@@79|) (< |start#0@@79| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@62|) (< |len#0@@62| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |start#0@@79| DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt |len#0@@62|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= (LitInt |len#0@@62|) (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@79|)) (LitInt |len#0@@62|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt 0) (LitInt (- |len#0@@62| (- DiskLayout.__default.NumJournalBlocks |start#0@@79|)))))))) (= (DiskLayout.__default.JournalBackLocation (LitInt |start#0@@79|) (LitInt |len#0@@62|)) (ite (= (LitInt |len#0@@62|) (LitInt 0)) |#Options.Option.None| (ite (<= (LitInt |len#0@@62|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@79|))) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lit (DiskLayout.__default.JournalRangeLocation (LitInt 0) (LitInt (- |len#0@@62| (- DiskLayout.__default.NumJournalBlocks |start#0@@79|)))))))))))) :qid |DiskLayoutidfy.309:32| :weight 3 :skolemid |3089| :pattern ( (DiskLayout.__default.JournalBackLocation (LitInt |start#0@@79|) (LitInt |len#0@@62|))) ))))
(assert  (=> true (forall ((|loc1#0| T@U) (|loc2#0| T@U) ) (!  (=> (and (and (= (type |loc1#0|) DatatypeTypeType) (= (type |loc2#0|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| |loc1#0| |loc2#0|) (and ($Is |loc1#0| Tclass.DiskLayout.Location) ($Is |loc2#0| Tclass.DiskLayout.Location)))) true) :qid |DiskLayoutidfy.322:25| :skolemid |3090| :pattern ( (DiskLayout.__default.LocationSub |loc1#0| |loc2#0|)) ))))
(assert (forall ((|loc1#0@@0| T@U) (|loc2#0@@0| T@U) ) (!  (=> (and (and (= (type |loc1#0@@0|) DatatypeTypeType) (= (type |loc2#0@@0|) DatatypeTypeType)) (and ($Is |loc1#0@@0| Tclass.DiskLayout.Location) ($Is |loc2#0@@0| Tclass.DiskLayout.Location))) (= (|DiskLayout.__default.LocationSub#requires| |loc1#0@@0| |loc2#0@@0|) true)) :qid |DiskLayoutidfy.322:25| :skolemid |3091| :pattern ( (|DiskLayout.__default.LocationSub#requires| |loc1#0@@0| |loc2#0@@0|)) )))
(assert  (=> true (forall ((|loc1#0@@1| T@U) (|loc2#0@@1| T@U) ) (!  (=> (and (and (= (type |loc1#0@@1|) DatatypeTypeType) (= (type |loc2#0@@1|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| |loc1#0@@1| |loc2#0@@1|) (and ($Is |loc1#0@@1| Tclass.DiskLayout.Location) ($Is |loc2#0@@1| Tclass.DiskLayout.Location)))) (and (and (and (DiskLayout.Location.Location_q |loc1#0@@1|) (DiskLayout.Location.Location_q |loc2#0@@1|)) (=> (>= (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.addr |loc2#0@@1|)) (and (and (DiskLayout.Location.Location_q |loc1#0@@1|) (DiskLayout.Location.Location_q |loc1#0@@1|)) (and (DiskLayout.Location.Location_q |loc2#0@@1|) (DiskLayout.Location.Location_q |loc2#0@@1|))))) (= (DiskLayout.__default.LocationSub |loc1#0@@1| |loc2#0@@1|)  (and (>= (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.addr |loc2#0@@1|)) (<= (+ (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.len |loc1#0@@1|)) (+ (DiskLayout.Location.addr |loc2#0@@1|) (DiskLayout.Location.len |loc2#0@@1|))))))) :qid |DiskLayoutidfy.322:25| :skolemid |3092| :pattern ( (DiskLayout.__default.LocationSub |loc1#0@@1| |loc2#0@@1|)) ))))
(assert  (=> true (forall ((|loc1#0@@2| T@U) (|loc2#0@@2| T@U) ) (!  (=> (and (and (= (type |loc1#0@@2|) DatatypeTypeType) (= (type |loc2#0@@2|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| (Lit |loc1#0@@2|) (Lit |loc2#0@@2|)) (and ($Is |loc1#0@@2| Tclass.DiskLayout.Location) ($Is |loc2#0@@2| Tclass.DiskLayout.Location)))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc1#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc2#0@@2|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc1#0@@2|))) (LitInt (DiskLayout.Location.addr (Lit |loc2#0@@2|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc1#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc1#0@@2|))) (and (DiskLayout.Location.Location_q (Lit |loc2#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc2#0@@2|)))))) (= (DiskLayout.__default.LocationSub (Lit |loc1#0@@2|) (Lit |loc2#0@@2|))  (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc1#0@@2|))) (LitInt (DiskLayout.Location.addr (Lit |loc2#0@@2|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc1#0@@2|)) (DiskLayout.Location.len (Lit |loc1#0@@2|)))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc2#0@@2|)) (DiskLayout.Location.len (Lit |loc2#0@@2|))))))))) :qid |DiskLayoutidfy.322:25| :weight 3 :skolemid |3093| :pattern ( (DiskLayout.__default.LocationSub (Lit |loc1#0@@2|) (Lit |loc2#0@@2|))) ))))
(assert (forall (($ly@@382 T@U) (|loc#0@@41| T@U) ) (!  (=> (and (= (type $ly@@382) LayerTypeType) (= (type |loc#0@@41|) DatatypeTypeType)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@382) |loc#0@@41|) (DiskLayout.__default.JournalBlockIdx $ly@@382 |loc#0@@41|))) :qid |DiskLayoutidfy.329:22| :skolemid |3094| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@382) |loc#0@@41|)) )))
(assert (forall (($ly@@383 T@U) (|loc#0@@42| T@U) ) (!  (=> (and (= (type $ly@@383) LayerTypeType) (= (type |loc#0@@42|) DatatypeTypeType)) (= (DiskLayout.__default.JournalBlockIdx $ly@@383 |loc#0@@42|) (DiskLayout.__default.JournalBlockIdx $LZ |loc#0@@42|))) :qid |DiskLayoutidfy.329:22| :skolemid |3095| :pattern ( (DiskLayout.__default.JournalBlockIdx (AsFuelBottom $ly@@383) |loc#0@@42|)) )))
(assert  (=> true (forall (($ly@@384 T@U) (|loc#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@384) LayerTypeType) (= (type |loc#0@@43|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| |loc#0@@43|) (and ($Is |loc#0@@43| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@43|)))) (and (and (<= (LitInt 0) (DiskLayout.__default.JournalBlockIdx $ly@@384 |loc#0@@43|)) (< (DiskLayout.__default.JournalBlockIdx $ly@@384 |loc#0@@43|) DiskLayout.__default.NumJournalBlocks)) (= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (DiskLayout.__default.JournalBlockIdx $ly@@384 |loc#0@@43|))))) :qid |DiskLayoutidfy.329:22| :skolemid |3096| :pattern ( (DiskLayout.__default.JournalBlockIdx $ly@@384 |loc#0@@43|)) ))))
(assert (forall (($ly@@385 T@U) (|loc#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@385) LayerTypeType) (= (type |loc#0@@44|) DatatypeTypeType)) ($Is |loc#0@@44| Tclass.DiskLayout.Location)) (= (|DiskLayout.__default.JournalBlockIdx#requires| $ly@@385 |loc#0@@44|) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@44|))) :qid |DiskLayoutidfy.329:22| :skolemid |3097| :pattern ( (|DiskLayout.__default.JournalBlockIdx#requires| $ly@@385 |loc#0@@44|)) )))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation2) LayerTypeType))
(assert  (=> true (forall (($ly@@386 T@U) (|loc#0@@45| T@U) ) (!  (=> (and (and (= (type $ly@@386) LayerTypeType) (= (type |loc#0@@45|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| |loc#0@@45|) (and ($Is |loc#0@@45| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@45|)))) (and (DiskLayout.Location.Location_q |loc#0@@45|) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation2)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation2)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation2) MoreFuel_DiskLayout._default.ValidJournalLocation2)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@386) |loc#0@@45|) (Div (- (DiskLayout.Location.addr |loc#0@@45|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))))) :qid |DiskLayoutidfy.329:22| :skolemid |3098| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@386) |loc#0@@45|)) ))))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation3) LayerTypeType))
(assert  (=> true (forall (($ly@@387 T@U) (|loc#0@@46| T@U) ) (!  (=> (and (and (= (type $ly@@387) LayerTypeType) (= (type |loc#0@@46|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| (Lit |loc#0@@46|)) (and ($Is |loc#0@@46| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@46|))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@46|)) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation3)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation3)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation3) MoreFuel_DiskLayout._default.ValidJournalLocation3)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@387) (Lit |loc#0@@46|)) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@46|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))))))) :qid |DiskLayoutidfy.329:22| :weight 3 :skolemid |3099| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@387) (Lit |loc#0@@46|))) ))))
(assert  (=> true (forall ((|addr#0@@9| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| |addr#0@@9|) (and (<= (LitInt 0) |addr#0@@9|) (< |addr#0@@9| 18446744073709551616))) (and (<= (LitInt 0) (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|)) (< (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|) 18446744073709551616))) :qid |DiskLayoutidfy.342:45| :skolemid |3100| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|)) ))))
(assert (forall ((|addr#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |addr#0@@10|) (< |addr#0@@10| 18446744073709551616)) (= (|DiskLayout.__default.otherIndirectionTableAddr#requires| |addr#0@@10|) true)) :qid |DiskLayoutidfy.342:45| :skolemid |3101| :pattern ( (|DiskLayout.__default.otherIndirectionTableAddr#requires| |addr#0@@10|)) )))
(assert  (=> true (forall ((|addr#0@@11| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| |addr#0@@11|) (and (<= (LitInt 0) |addr#0@@11|) (< |addr#0@@11| 18446744073709551616))) (and (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr)) |DiskLayout.__default.IndirectionTable2Addr#canCall|)) (=> (not (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable1Addr#canCall|)) (= (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@11|) (ite (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr)) DiskLayout.__default.IndirectionTable2Addr DiskLayout.__default.IndirectionTable1Addr)))) :qid |DiskLayoutidfy.342:45| :skolemid |3102| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@11|)) ))))
(assert  (=> true (forall ((|addr#0@@12| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| (LitInt |addr#0@@12|)) (and (<= (LitInt 0) |addr#0@@12|) (< |addr#0@@12| 18446744073709551616))) (and (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) |DiskLayout.__default.IndirectionTable2Addr#canCall|)) (=> (not (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable1Addr#canCall|)) (= (DiskLayout.__default.otherIndirectionTableAddr (LitInt |addr#0@@12|)) (ite (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) DiskLayout.__default.IndirectionTable2Addr DiskLayout.__default.IndirectionTable1Addr)))) :qid |DiskLayoutidfy.342:45| :weight 3 :skolemid |3103| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr (LitInt |addr#0@@12|))) ))))
(assert (= (type Tclass.PackedIntsLib.__default) TyType))
(assert (= (Tag Tclass.PackedIntsLib.__default) Tagclass.PackedIntsLib.__default))
(assert (= (TagFamily Tclass.PackedIntsLib.__default) tytagFamily$_default))
(assert (forall ((bx@@178 T@U) ) (!  (=> (and (= (type bx@@178) BoxType) ($IsBox bx@@178 Tclass.PackedIntsLib.__default)) (and (= ($Box ($Unbox refType bx@@178)) bx@@178) ($Is ($Unbox refType bx@@178) Tclass.PackedIntsLib.__default))) :qid |unknown.0:0| :skolemid |3104| :pattern ( ($IsBox bx@@178 Tclass.PackedIntsLib.__default)) )))
(assert (forall (($o@@56 T@U) ) (!  (=> (= (type $o@@56) refType) (= ($Is $o@@56 Tclass.PackedIntsLib.__default)  (or (= $o@@56 null) (= (dtype $o@@56) Tclass.PackedIntsLib.__default)))) :qid |unknown.0:0| :skolemid |3105| :pattern ( ($Is $o@@56 Tclass.PackedIntsLib.__default)) )))
(assert (forall (($o@@57 T@U) ($h@@195 T@U) ) (!  (=> (and (= (type $o@@57) refType) (= (type $h@@195) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@57 Tclass.PackedIntsLib.__default $h@@195)  (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@195 $o@@57) alloc))))) :qid |unknown.0:0| :skolemid |3106| :pattern ( ($IsAlloc $o@@57 Tclass.PackedIntsLib.__default $h@@195)) )))
(assert (forall (($ly@@388 T@U) (|i#0@@141| Int) ) (!  (=> (= (type $ly@@388) LayerTypeType) (= (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@388) |i#0@@141|) (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@388 |i#0@@141|))) :qid |PackedIntsLibidfy.10:29| :skolemid |3107| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@388) |i#0@@141|)) )))
(assert (forall (($ly@@389 T@U) (|i#0@@142| Int) ) (!  (=> (= (type $ly@@389) LayerTypeType) (= (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@389 |i#0@@142|) (PackedIntsLib.__default.pack__LittleEndian__Uint32 $LZ |i#0@@142|))) :qid |PackedIntsLibidfy.10:29| :skolemid |3108| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 (AsFuelBottom $ly@@389) |i#0@@142|)) )))
(assert  (=> true (forall (($ly@@390 T@U) (|i#0@@143| Int) ) (!  (=> (and (= (type $ly@@390) LayerTypeType) (or (|PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| |i#0@@143|) (and (<= (LitInt 0) |i#0@@143|) (< |i#0@@143| 4294967296)))) (and (and (= (|Seq#Length| (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@390 |i#0@@143|)) (LitInt 4)) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@390 |i#0@@143|)) |i#0@@143|)) ($Is (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@390 |i#0@@143|) (TSeq Tclass.NativeTypes.byte)))) :qid |PackedIntsLibidfy.10:29| :skolemid |3109| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 $ly@@390 |i#0@@143|)) ))))
(assert (forall (($ly@@391 T@U) (|i#0@@144| Int) ) (!  (=> (= (type $ly@@391) LayerTypeType) (=> (and (<= (LitInt 0) |i#0@@144|) (< |i#0@@144| 4294967296)) (= (|PackedIntsLib.__default.pack__LittleEndian__Uint32#requires| $ly@@391 |i#0@@144|) true))) :qid |PackedIntsLibidfy.10:29| :skolemid |3110| :pattern ( (|PackedIntsLib.__default.pack__LittleEndian__Uint32#requires| $ly@@391 |i#0@@144|)) )))
(assert  (=> true (forall (($ly@@392 T@U) (|i#0@@145| Int) ) (!  (=> (and (= (type $ly@@392) LayerTypeType) (or (|PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| |i#0@@145|) (and (<= (LitInt 0) |i#0@@145|) (< |i#0@@145| 4294967296)))) (= (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@392) |i#0@@145|) (let ((|d0#0| (Mod |i#0@@145| (LitInt 256)))) (let ((|i1#0| (Div (- |i#0@@145| |d0#0|) (LitInt 256)))) (let ((|d1#0| (Mod |i1#0| (LitInt 256)))) (let ((|i2#0| (Div (- |i1#0| |d1#0|) (LitInt 256)))) (let ((|d2#0| (Mod |i2#0| (LitInt 256)))) (let ((|i3#0| (Div (- |i2#0| |d2#0|) (LitInt 256)))) (let ((|d3#0| (Mod |i3#0| (LitInt 256)))) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |d0#0|))) ($Box (int_2_U |d1#0|))) ($Box (int_2_U |d2#0|))) ($Box (int_2_U |d3#0|)))))))))))) :qid |PackedIntsLibidfy.10:29| :skolemid |3111| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@392) |i#0@@145|)) ))))
(assert  (=> true (forall (($ly@@393 T@U) (|i#0@@146| Int) ) (!  (=> (and (= (type $ly@@393) LayerTypeType) (or (|PackedIntsLib.__default.pack__LittleEndian__Uint32#canCall| (LitInt |i#0@@146|)) (and (<= (LitInt 0) |i#0@@146|) (< |i#0@@146| 4294967296)))) (= (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@393) (LitInt |i#0@@146|)) (let ((|d0#1| (LitInt (Mod |i#0@@146| (LitInt 256))))) (let ((|i1#1| (LitInt (Div (- |i#0@@146| |d0#1|) (LitInt 256))))) (let ((|d1#1| (LitInt (Mod |i1#1| (LitInt 256))))) (let ((|i2#1| (LitInt (Div (- |i1#1| |d1#1|) (LitInt 256))))) (let ((|d2#1| (LitInt (Mod |i2#1| (LitInt 256))))) (let ((|i3#1| (LitInt (Div (- |i2#1| |d2#1|) (LitInt 256))))) (let ((|d3#1| (LitInt (Mod |i3#1| (LitInt 256))))) (Lit (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |d0#1|))) ($Box (int_2_U |d1#1|))) ($Box (int_2_U |d2#1|))) ($Box (int_2_U |d3#1|))))))))))))) :qid |PackedIntsLibidfy.10:29| :weight 3 :skolemid |3112| :pattern ( (PackedIntsLib.__default.pack__LittleEndian__Uint32 ($LS $ly@@393) (LitInt |i#0@@146|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@596 T@T) (arg1@@290 T@T) ) (! (= (Ctor (MapType8Type arg0@@596 arg1@@290)) 30) :qid |ctor:MapType8Type| )) (forall ((arg0@@597 T@T) (arg1@@291 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@597 arg1@@291)) arg0@@597) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@597 arg1@@291)) ))) (forall ((arg0@@598 T@T) (arg1@@292 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@598 arg1@@292)) arg1@@292) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@598 arg1@@292)) ))) (forall ((arg0@@599 T@U) (arg1@@293 T@U) (arg2@@163 T@U) ) (! (let ((aVar1@@8 (MapType8TypeInv1 (type arg0@@599)))) (= (type (MapType8Select arg0@@599 arg1@@293 arg2@@163)) aVar1@@8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@599 arg1@@293 arg2@@163)) ))) (forall ((arg0@@600 T@U) (arg1@@294 T@U) (arg2@@164 T@U) (arg3@@112 T@U) ) (! (let ((aVar1@@9 (type arg3@@112))) (let ((aVar0@@6 (type arg1@@294))) (= (type (MapType8Store arg0@@600 arg1@@294 arg2@@164 arg3@@112)) (MapType8Type aVar0@@6 aVar1@@9)))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@600 arg1@@294 arg2@@164 arg3@@112)) ))) (forall ((m@@84 T@U) (x0@@44 T@U) (x1@@38 T@U) (val@@45 T@U) ) (! (let ((aVar1@@10 (MapType8TypeInv1 (type m@@84)))) (=> (= (type val@@45) aVar1@@10) (= (MapType8Select (MapType8Store m@@84 x0@@44 x1@@38 val@@45) x0@@44 x1@@38) val@@45))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (forall ((val@@46 T@U) (m@@85 T@U) (x0@@45 T@U) (x1@@39 T@U) (y0@@36 T@U) (y1@@32 T@U) ) (!  (or (= x0@@45 y0@@36) (= (MapType8Select (MapType8Store m@@85 x0@@45 x1@@39 val@@46) y0@@36 y1@@32) (MapType8Select m@@85 y0@@36 y1@@32))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@47 T@U) (m@@86 T@U) (x0@@46 T@U) (x1@@40 T@U) (y0@@37 T@U) (y1@@33 T@U) ) (!  (or (= x1@@40 y1@@33) (= (MapType8Select (MapType8Store m@@86 x0@@46 x1@@40 val@@47) y0@@37 y1@@33) (MapType8Select m@@86 y0@@37 y1@@33))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@48 T@U) (m@@87 T@U) (x0@@47 T@U) (x1@@41 T@U) (y0@@38 T@U) (y1@@34 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@87 x0@@47 x1@@41 val@@48) y0@@38 y1@@34) (MapType8Select m@@87 y0@@38 y1@@34))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@601 T@U) (arg1@@295 T@U) (arg2@@165 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#0| arg0@@601 arg1@@295 arg2@@165 arg3@@113)) (MapType8Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@601 arg1@@295 arg2@@165 arg3@@113)) ))))
(assert (forall ((|l#0@@11| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@58 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0@@11|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType8Select (|lambda#0| |l#0@@11| |l#1| |l#2| |l#3|) $o@@58 $f@@4))  (=> (and (not (= $o@@58 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@58) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3113| :pattern ( (MapType8Select (|lambda#0| |l#0@@11| |l#1| |l#2| |l#3|) $o@@58 $f@@4)) )))
(assert (forall ((arg0@@602 T@U) (arg1@@296 T@U) (arg2@@166 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#1| arg0@@602 arg1@@296 arg2@@166 arg3@@114)) (MapType8Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@602 arg1@@296 arg2@@166 arg3@@114)) )))
(assert (forall ((|l#0@@12| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@59 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@12|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType8Select (|lambda#1| |l#0@@12| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@59 $f@@5))  (=> (and (not (= $o@@59 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@59) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3114| :pattern ( (MapType8Select (|lambda#1| |l#0@@12| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@59 $f@@5)) )))
(assert (forall ((arg0@@603 T@U) (arg1@@297 T@U) (arg2@@167 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#2| arg0@@603 arg1@@297 arg2@@167 arg3@@115)) (MapType8Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@603 arg1@@297 arg2@@167 arg3@@115)) )))
(assert (forall ((|l#0@@13| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@60 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@13|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType8Select (|lambda#2| |l#0@@13| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@60 $f@@6))  (=> (and (not (= $o@@60 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@60) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3115| :pattern ( (MapType8Select (|lambda#2| |l#0@@13| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@60 $f@@6)) )))
(assert (forall ((arg0@@604 T@U) (arg1@@298 T@U) (arg2@@168 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#3| arg0@@604 arg1@@298 arg2@@168 arg3@@116)) (MapType8Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@604 arg1@@298 arg2@@168 arg3@@116)) )))
(assert (forall ((|l#0@@14| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@61 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@14|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType8Select (|lambda#3| |l#0@@14| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@61 $f@@7))  (=> (and (not (= $o@@61 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@61) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3116| :pattern ( (MapType8Select (|lambda#3| |l#0@@14| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@61 $f@@7)) )))
(assert (forall ((arg0@@605 T@U) (arg1@@299 T@U) (arg2@@169 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#4| arg0@@605 arg1@@299 arg2@@169 arg3@@117)) (MapType8Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@605 arg1@@299 arg2@@169 arg3@@117)) )))
(assert (forall ((|l#0@@15| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@62 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType8Select (|lambda#4| |l#0@@15| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@62 $f@@8))  (=> (and (not (= $o@@62 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@62) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3117| :pattern ( (MapType8Select (|lambda#4| |l#0@@15| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@62 $f@@8)) )))
(assert (forall ((arg0@@606 T@U) (arg1@@300 T@U) (arg2@@170 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#5| arg0@@606 arg1@@300 arg2@@170 arg3@@118)) (MapType8Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@606 arg1@@300 arg2@@170 arg3@@118)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@63 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType8Select (|lambda#5| |l#0@@16| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@63 $f@@9))  (=> (and (not (= $o@@63 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@63) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3118| :pattern ( (MapType8Select (|lambda#5| |l#0@@16| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@63 $f@@9)) )))
(assert (forall ((arg0@@607 T@U) (arg1@@301 T@U) (arg2@@171 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#6| arg0@@607 arg1@@301 arg2@@171 arg3@@119)) (MapType8Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@607 arg1@@301 arg2@@171 arg3@@119)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@64 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType8Select (|lambda#6| |l#0@@17| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@64 $f@@10))  (=> (and (not (= $o@@64 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@64) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3119| :pattern ( (MapType8Select (|lambda#6| |l#0@@17| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@64 $f@@10)) )))
(assert (forall ((arg0@@608 T@U) (arg1@@302 T@U) (arg2@@172 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#7| arg0@@608 arg1@@302 arg2@@172 arg3@@120)) (MapType8Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@608 arg1@@302 arg2@@172 arg3@@120)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@65 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@18|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType8Select (|lambda#7| |l#0@@18| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@65 $f@@11))  (=> (and (not (= $o@@65 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@65) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3120| :pattern ( (MapType8Select (|lambda#7| |l#0@@18| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@65 $f@@11)) )))
(assert (forall ((arg0@@609 T@U) (arg1@@303 T@U) (arg2@@173 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#8| arg0@@609 arg1@@303 arg2@@173 arg3@@121)) (MapType8Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@609 arg1@@303 arg2@@173 arg3@@121)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@66 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@19|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType8Select (|lambda#8| |l#0@@19| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@66 $f@@12))  (=> (and (not (= $o@@66 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@66) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3121| :pattern ( (MapType8Select (|lambda#8| |l#0@@19| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@66 $f@@12)) )))
(assert (forall ((arg0@@610 T@U) (arg1@@304 T@U) (arg2@@174 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#9| arg0@@610 arg1@@304 arg2@@174 arg3@@122)) (MapType8Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@610 arg1@@304 arg2@@174 arg3@@122)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@67 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType8Select (|lambda#9| |l#0@@20| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@67 $f@@13))  (=> (and (not (= $o@@67 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@67) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3122| :pattern ( (MapType8Select (|lambda#9| |l#0@@20| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@67 $f@@13)) )))
(assert (forall ((arg0@@611 T@U) (arg1@@305 T@U) (arg2@@175 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#10| arg0@@611 arg1@@305 arg2@@175 arg3@@123)) (MapType8Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@611 arg1@@305 arg2@@175 arg3@@123)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@68 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType8Select (|lambda#10| |l#0@@21| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@68 $f@@14))  (=> (and (not (= $o@@68 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@68) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3123| :pattern ( (MapType8Select (|lambda#10| |l#0@@21| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@68 $f@@14)) )))
(assert (forall ((arg0@@612 T@U) (arg1@@306 T@U) (arg2@@176 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#11| arg0@@612 arg1@@306 arg2@@176 arg3@@124)) (MapType8Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@612 arg1@@306 arg2@@176 arg3@@124)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@69 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType8Select (|lambda#11| |l#0@@22| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@69 $f@@15))  (=> (and (not (= $o@@69 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@69) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3124| :pattern ( (MapType8Select (|lambda#11| |l#0@@22| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@69 $f@@15)) )))
(assert (forall ((arg0@@613 T@U) (arg1@@307 T@U) (arg2@@177 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#12| arg0@@613 arg1@@307 arg2@@177 arg3@@125)) (MapType8Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@613 arg1@@307 arg2@@177 arg3@@125)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@70 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType8Select (|lambda#12| |l#0@@23| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@70 $f@@16))  (=> (and (not (= $o@@70 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@70) |l#2@@11|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3125| :pattern ( (MapType8Select (|lambda#12| |l#0@@23| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@70 $f@@16)) )))
(assert (forall ((arg0@@614 T@U) (arg1@@308 T@U) (arg2@@178 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#13| arg0@@614 arg1@@308 arg2@@178 arg3@@126)) (MapType8Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@614 arg1@@308 arg2@@178 arg3@@126)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@71 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType8Select (|lambda#13| |l#0@@24| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@71 $f@@17))  (=> (and (not (= $o@@71 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@71) |l#2@@12|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3126| :pattern ( (MapType8Select (|lambda#13| |l#0@@24| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@71 $f@@17)) )))
(assert (forall ((arg0@@615 T@U) (arg1@@309 T@U) (arg2@@179 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#14| arg0@@615 arg1@@309 arg2@@179 arg3@@127)) (MapType8Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@615 arg1@@309 arg2@@179 arg3@@127)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@72 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType8Select (|lambda#14| |l#0@@25| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@72 $f@@18))  (=> (and (not (= $o@@72 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@72) |l#2@@13|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3127| :pattern ( (MapType8Select (|lambda#14| |l#0@@25| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@72 $f@@18)) )))
(assert (forall ((arg0@@616 T@U) (arg1@@310 T@U) (arg2@@180 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#15| arg0@@616 arg1@@310 arg2@@180 arg3@@128)) (MapType8Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@616 arg1@@310 arg2@@180 arg3@@128)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@73 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType8Select (|lambda#15| |l#0@@26| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@73 $f@@19))  (=> (and (not (= $o@@73 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@73) |l#2@@14|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3128| :pattern ( (MapType8Select (|lambda#15| |l#0@@26| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@73 $f@@19)) )))
(assert (forall ((arg0@@617 T@U) (arg1@@311 T@U) (arg2@@181 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#16| arg0@@617 arg1@@311 arg2@@181 arg3@@129)) (MapType8Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@617 arg1@@311 arg2@@181 arg3@@129)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@74 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType8Select (|lambda#16| |l#0@@27| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@74 $f@@20))  (=> (and (not (= $o@@74 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@74) |l#2@@15|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3129| :pattern ( (MapType8Select (|lambda#16| |l#0@@27| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@74 $f@@20)) )))
(assert (forall ((arg0@@618 T@U) (arg1@@312 T@U) (arg2@@182 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#17| arg0@@618 arg1@@312 arg2@@182 arg3@@130)) (MapType8Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@618 arg1@@312 arg2@@182 arg3@@130)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@75 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType8Select (|lambda#17| |l#0@@28| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@75 $f@@21))  (=> (and (not (= $o@@75 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@75) |l#2@@16|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3130| :pattern ( (MapType8Select (|lambda#17| |l#0@@28| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@75 $f@@21)) )))
(assert (forall ((arg0@@619 T@U) (arg1@@313 T@U) (arg2@@183 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#18| arg0@@619 arg1@@313 arg2@@183 arg3@@131)) (MapType8Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@619 arg1@@313 arg2@@183 arg3@@131)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@76 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType8Select (|lambda#18| |l#0@@29| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@76 $f@@22))  (=> (and (not (= $o@@76 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@76) |l#2@@17|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3131| :pattern ( (MapType8Select (|lambda#18| |l#0@@29| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@76 $f@@22)) )))
(assert (forall ((arg0@@620 T@U) (arg1@@314 T@U) (arg2@@184 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#19| arg0@@620 arg1@@314 arg2@@184 arg3@@132)) (MapType8Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@620 arg1@@314 arg2@@184 arg3@@132)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@77 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType8Select (|lambda#19| |l#0@@30| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@77 $f@@23))  (=> (and (not (= $o@@77 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@77) |l#2@@18|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3132| :pattern ( (MapType8Select (|lambda#19| |l#0@@30| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@77 $f@@23)) )))
(assert (forall ((arg0@@621 T@U) (arg1@@315 T@U) (arg2@@185 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#20| arg0@@621 arg1@@315 arg2@@185 arg3@@133)) (MapType8Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@621 arg1@@315 arg2@@185 arg3@@133)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ($o@@78 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType8Select (|lambda#20| |l#0@@31| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@78 $f@@24))  (=> (and (not (= $o@@78 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@78) |l#2@@19|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3133| :pattern ( (MapType8Select (|lambda#20| |l#0@@31| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@78 $f@@24)) )))
(assert (forall ((arg0@@622 T@U) (arg1@@316 T@U) (arg2@@186 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#21| arg0@@622 arg1@@316 arg2@@186 arg3@@134)) (MapType8Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@622 arg1@@316 arg2@@186 arg3@@134)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ($o@@79 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType8Select (|lambda#21| |l#0@@32| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@79 $f@@25))  (=> (and (not (= $o@@79 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@79) |l#2@@20|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3134| :pattern ( (MapType8Select (|lambda#21| |l#0@@32| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@79 $f@@25)) )))
(assert (forall ((arg0@@623 T@U) (arg1@@317 T@U) (arg2@@187 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#22| arg0@@623 arg1@@317 arg2@@187 arg3@@135)) (MapType8Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@623 arg1@@317 arg2@@187 arg3@@135)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ($o@@80 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType8Select (|lambda#22| |l#0@@33| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@80 $f@@26))  (=> (and (not (= $o@@80 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@80) |l#2@@21|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3135| :pattern ( (MapType8Select (|lambda#22| |l#0@@33| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@80 $f@@26)) )))
(assert (forall ((arg0@@624 T@U) (arg1@@318 T@U) (arg2@@188 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#23| arg0@@624 arg1@@318 arg2@@188 arg3@@136)) (MapType8Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@624 arg1@@318 arg2@@188 arg3@@136)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ($o@@81 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType8Select (|lambda#23| |l#0@@34| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@81 $f@@27))  (=> (and (not (= $o@@81 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@81) |l#2@@22|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3136| :pattern ( (MapType8Select (|lambda#23| |l#0@@34| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@81 $f@@27)) )))
(assert (forall ((arg0@@625 T@U) (arg1@@319 T@U) (arg2@@189 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#24| arg0@@625 arg1@@319 arg2@@189 arg3@@137)) (MapType8Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@625 arg1@@319 arg2@@189 arg3@@137)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ($o@@82 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType8Select (|lambda#24| |l#0@@35| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@82 $f@@28))  (=> (and (not (= $o@@82 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@82) |l#2@@23|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3137| :pattern ( (MapType8Select (|lambda#24| |l#0@@35| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@82 $f@@28)) )))
(assert (forall ((arg0@@626 T@U) (arg1@@320 T@U) (arg2@@190 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#25| arg0@@626 arg1@@320 arg2@@190 arg3@@138)) (MapType8Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@626 arg1@@320 arg2@@190 arg3@@138)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ($o@@83 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType8Select (|lambda#25| |l#0@@36| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@83 $f@@29))  (=> (and (not (= $o@@83 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@83) |l#2@@24|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3138| :pattern ( (MapType8Select (|lambda#25| |l#0@@36| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@83 $f@@29)) )))
(assert (forall ((arg0@@627 T@U) (arg1@@321 T@U) (arg2@@191 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#26| arg0@@627 arg1@@321 arg2@@191 arg3@@139)) (MapType8Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@627 arg1@@321 arg2@@191 arg3@@139)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ($o@@84 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType8Select (|lambda#26| |l#0@@37| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@84 $f@@30))  (=> (and (not (= $o@@84 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@84) |l#2@@25|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3139| :pattern ( (MapType8Select (|lambda#26| |l#0@@37| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@84 $f@@30)) )))
(assert (forall ((arg0@@628 T@U) (arg1@@322 T@U) (arg2@@192 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#27| arg0@@628 arg1@@322 arg2@@192 arg3@@140)) (MapType8Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@628 arg1@@322 arg2@@192 arg3@@140)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ($o@@85 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType8Select (|lambda#27| |l#0@@38| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@85 $f@@31))  (=> (and (not (= $o@@85 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@85) |l#2@@26|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3140| :pattern ( (MapType8Select (|lambda#27| |l#0@@38| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@85 $f@@31)) )))
(assert (forall ((arg0@@629 T@U) (arg1@@323 T@U) (arg2@@193 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#28| arg0@@629 arg1@@323 arg2@@193 arg3@@141)) (MapType8Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@629 arg1@@323 arg2@@193 arg3@@141)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ($o@@86 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType8Select (|lambda#28| |l#0@@39| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@86 $f@@32))  (=> (and (not (= $o@@86 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@86) |l#2@@27|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3141| :pattern ( (MapType8Select (|lambda#28| |l#0@@39| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@86 $f@@32)) )))
(assert (forall ((arg0@@630 T@U) (arg1@@324 T@U) (arg2@@194 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#29| arg0@@630 arg1@@324 arg2@@194 arg3@@142)) (MapType8Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@630 arg1@@324 arg2@@194 arg3@@142)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ($o@@87 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType8Select (|lambda#29| |l#0@@40| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@87 $f@@33))  (=> (and (not (= $o@@87 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@87) |l#2@@28|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3142| :pattern ( (MapType8Select (|lambda#29| |l#0@@40| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@87 $f@@33)) )))
(assert (forall ((arg0@@631 T@U) (arg1@@325 T@U) (arg2@@195 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#30| arg0@@631 arg1@@325 arg2@@195 arg3@@143)) (MapType8Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@631 arg1@@325 arg2@@195 arg3@@143)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ($o@@88 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType8Select (|lambda#30| |l#0@@41| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@88 $f@@34))  (=> (and (not (= $o@@88 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@88) |l#2@@29|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3143| :pattern ( (MapType8Select (|lambda#30| |l#0@@41| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@88 $f@@34)) )))
(assert (forall ((arg0@@632 T@U) (arg1@@326 T@U) (arg2@@196 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#31| arg0@@632 arg1@@326 arg2@@196 arg3@@144)) (MapType8Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@632 arg1@@326 arg2@@196 arg3@@144)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ($o@@89 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType8Select (|lambda#31| |l#0@@42| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@89 $f@@35))  (=> (and (not (= $o@@89 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@89) |l#2@@30|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3144| :pattern ( (MapType8Select (|lambda#31| |l#0@@42| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@89 $f@@35)) )))
(assert (forall ((arg0@@633 T@U) (arg1@@327 T@U) (arg2@@197 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#32| arg0@@633 arg1@@327 arg2@@197 arg3@@145)) (MapType8Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@633 arg1@@327 arg2@@197 arg3@@145)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ($o@@90 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType8Select (|lambda#32| |l#0@@43| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@90 $f@@36))  (=> (and (not (= $o@@90 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@90) |l#2@@31|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3145| :pattern ( (MapType8Select (|lambda#32| |l#0@@43| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@90 $f@@36)) )))
(assert (forall ((arg0@@634 T@U) (arg1@@328 T@U) (arg2@@198 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#33| arg0@@634 arg1@@328 arg2@@198 arg3@@146)) (MapType8Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@634 arg1@@328 arg2@@198 arg3@@146)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ($o@@91 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType8Select (|lambda#33| |l#0@@44| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@91 $f@@37))  (=> (and (not (= $o@@91 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@91) |l#2@@32|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3146| :pattern ( (MapType8Select (|lambda#33| |l#0@@44| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@91 $f@@37)) )))
(assert (forall ((arg0@@635 T@U) (arg1@@329 T@U) (arg2@@199 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#34| arg0@@635 arg1@@329 arg2@@199 arg3@@147)) (MapType8Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@635 arg1@@329 arg2@@199 arg3@@147)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ($o@@92 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType8Select (|lambda#34| |l#0@@45| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@92 $f@@38))  (=> (and (not (= $o@@92 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@92) |l#2@@33|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3147| :pattern ( (MapType8Select (|lambda#34| |l#0@@45| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@92 $f@@38)) )))
(assert (forall ((arg0@@636 T@U) (arg1@@330 T@U) (arg2@@200 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#35| arg0@@636 arg1@@330 arg2@@200 arg3@@148)) (MapType8Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@636 arg1@@330 arg2@@200 arg3@@148)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ($o@@93 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType8Select (|lambda#35| |l#0@@46| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@93 $f@@39))  (=> (and (not (= $o@@93 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@93) |l#2@@34|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3148| :pattern ( (MapType8Select (|lambda#35| |l#0@@46| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@93 $f@@39)) )))
(assert (forall ((arg0@@637 T@U) (arg1@@331 T@U) (arg2@@201 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#36| arg0@@637 arg1@@331 arg2@@201 arg3@@149)) (MapType8Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@637 arg1@@331 arg2@@201 arg3@@149)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ($o@@94 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType8Select (|lambda#36| |l#0@@47| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@94 $f@@40))  (=> (and (not (= $o@@94 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@94) |l#2@@35|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3149| :pattern ( (MapType8Select (|lambda#36| |l#0@@47| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@94 $f@@40)) )))
(assert (forall ((arg0@@638 T@U) (arg1@@332 T@U) (arg2@@202 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#37| arg0@@638 arg1@@332 arg2@@202 arg3@@150)) (MapType8Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@638 arg1@@332 arg2@@202 arg3@@150)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ($o@@95 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType8Select (|lambda#37| |l#0@@48| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@95 $f@@41))  (=> (and (not (= $o@@95 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@95) |l#2@@36|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3150| :pattern ( (MapType8Select (|lambda#37| |l#0@@48| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@95 $f@@41)) )))
(assert (forall ((arg0@@639 T@U) (arg1@@333 T@U) (arg2@@203 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#38| arg0@@639 arg1@@333 arg2@@203 arg3@@151)) (MapType8Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@639 arg1@@333 arg2@@203 arg3@@151)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ($o@@96 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType8Select (|lambda#38| |l#0@@49| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@96 $f@@42))  (=> (and (not (= $o@@96 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@96) |l#2@@37|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3151| :pattern ( (MapType8Select (|lambda#38| |l#0@@49| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@96 $f@@42)) )))
(assert (forall ((arg0@@640 T@U) (arg1@@334 T@U) (arg2@@204 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#39| arg0@@640 arg1@@334 arg2@@204 arg3@@152)) (MapType8Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@640 arg1@@334 arg2@@204 arg3@@152)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ($o@@97 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType8Select (|lambda#39| |l#0@@50| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@97 $f@@43))  (=> (and (not (= $o@@97 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@97) |l#2@@38|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3152| :pattern ( (MapType8Select (|lambda#39| |l#0@@50| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@97 $f@@43)) )))
(assert (forall ((arg0@@641 T@U) (arg1@@335 T@U) (arg2@@205 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#40| arg0@@641 arg1@@335 arg2@@205 arg3@@153)) (MapType8Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@641 arg1@@335 arg2@@205 arg3@@153)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ($o@@98 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType8Select (|lambda#40| |l#0@@51| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@98 $f@@44))  (=> (and (not (= $o@@98 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@98) |l#2@@39|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3153| :pattern ( (MapType8Select (|lambda#40| |l#0@@51| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@98 $f@@44)) )))
(assert (forall ((arg0@@642 T@U) (arg1@@336 T@U) (arg2@@206 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#41| arg0@@642 arg1@@336 arg2@@206 arg3@@154)) (MapType8Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@642 arg1@@336 arg2@@206 arg3@@154)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ($o@@99 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType8Select (|lambda#41| |l#0@@52| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@99 $f@@45))  (=> (and (not (= $o@@99 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@99) |l#2@@40|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3154| :pattern ( (MapType8Select (|lambda#41| |l#0@@52| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@99 $f@@45)) )))
(assert (forall ((arg0@@643 T@U) (arg1@@337 T@U) (arg2@@207 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#42| arg0@@643 arg1@@337 arg2@@207 arg3@@155)) (MapType8Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@643 arg1@@337 arg2@@207 arg3@@155)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ($o@@100 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType8Select (|lambda#42| |l#0@@53| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@100 $f@@46))  (=> (and (not (= $o@@100 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@100) |l#2@@41|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3155| :pattern ( (MapType8Select (|lambda#42| |l#0@@53| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@100 $f@@46)) )))
(assert (forall ((arg0@@644 T@U) (arg1@@338 T@U) (arg2@@208 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#43| arg0@@644 arg1@@338 arg2@@208 arg3@@156)) (MapType8Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@644 arg1@@338 arg2@@208 arg3@@156)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ($o@@101 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@47) (FieldType alpha@@54))) (= (U_2_bool (MapType8Select (|lambda#43| |l#0@@54| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@101 $f@@47))  (=> (and (not (= $o@@101 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@101) |l#2@@42|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3156| :pattern ( (MapType8Select (|lambda#43| |l#0@@54| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@101 $f@@47)) )))
(assert (forall ((arg0@@645 T@U) (arg1@@339 T@U) (arg2@@209 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#44| arg0@@645 arg1@@339 arg2@@209 arg3@@157)) (MapType8Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@645 arg1@@339 arg2@@209 arg3@@157)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ($o@@102 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@48) (FieldType alpha@@55))) (= (U_2_bool (MapType8Select (|lambda#44| |l#0@@55| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@102 $f@@48))  (=> (and (not (= $o@@102 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@102) |l#2@@43|))) |l#3@@43|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3157| :pattern ( (MapType8Select (|lambda#44| |l#0@@55| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@102 $f@@48)) )))
(assert (forall ((arg0@@646 T@U) (arg1@@340 T@U) (arg2@@210 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#45| arg0@@646 arg1@@340 arg2@@210 arg3@@158)) (MapType8Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@646 arg1@@340 arg2@@210 arg3@@158)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ($o@@103 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@49) (FieldType alpha@@56))) (= (U_2_bool (MapType8Select (|lambda#45| |l#0@@56| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@103 $f@@49))  (=> (and (not (= $o@@103 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@103) |l#2@@44|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3158| :pattern ( (MapType8Select (|lambda#45| |l#0@@56| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@103 $f@@49)) )))
(assert (forall ((arg0@@647 T@U) (arg1@@341 T@U) (arg2@@211 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#46| arg0@@647 arg1@@341 arg2@@211 arg3@@159)) (MapType8Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@647 arg1@@341 arg2@@211 arg3@@159)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ($o@@104 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@50) (FieldType alpha@@57))) (= (U_2_bool (MapType8Select (|lambda#46| |l#0@@57| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@104 $f@@50))  (=> (and (not (= $o@@104 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@104) |l#2@@45|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3159| :pattern ( (MapType8Select (|lambda#46| |l#0@@57| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@104 $f@@50)) )))
(assert (forall ((arg0@@648 T@U) (arg1@@342 T@U) (arg2@@212 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#47| arg0@@648 arg1@@342 arg2@@212 arg3@@160)) (MapType8Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@648 arg1@@342 arg2@@212 arg3@@160)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ($o@@105 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@51) (FieldType alpha@@58))) (= (U_2_bool (MapType8Select (|lambda#47| |l#0@@58| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@105 $f@@51))  (=> (and (not (= $o@@105 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@105) |l#2@@46|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3160| :pattern ( (MapType8Select (|lambda#47| |l#0@@58| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@105 $f@@51)) )))
(assert (forall ((arg0@@649 T@U) (arg1@@343 T@U) (arg2@@213 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#48| arg0@@649 arg1@@343 arg2@@213 arg3@@161)) (MapType8Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@649 arg1@@343 arg2@@213 arg3@@161)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@47| Bool) ($o@@106 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@52) (FieldType alpha@@59))) (= (U_2_bool (MapType8Select (|lambda#48| |l#0@@59| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@106 $f@@52))  (=> (and (not (= $o@@106 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@106) |l#2@@47|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3161| :pattern ( (MapType8Select (|lambda#48| |l#0@@59| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@106 $f@@52)) )))
(assert (forall ((arg0@@650 T@U) (arg1@@344 T@U) (arg2@@214 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#49| arg0@@650 arg1@@344 arg2@@214 arg3@@162)) (MapType8Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@650 arg1@@344 arg2@@214 arg3@@162)) )))
(assert (forall ((|l#0@@60| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@48| Bool) ($o@@107 T@U) ($f@@53 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@53) (FieldType alpha@@60))) (= (U_2_bool (MapType8Select (|lambda#49| |l#0@@60| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@107 $f@@53))  (=> (and (not (= $o@@107 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@107) |l#2@@48|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3162| :pattern ( (MapType8Select (|lambda#49| |l#0@@60| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@107 $f@@53)) )))
(assert (forall ((arg0@@651 T@U) (arg1@@345 T@U) (arg2@@215 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#50| arg0@@651 arg1@@345 arg2@@215 arg3@@163)) (MapType8Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@651 arg1@@345 arg2@@215 arg3@@163)) )))
(assert (forall ((|l#0@@61| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@49| Bool) ($o@@108 T@U) ($f@@54 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@54) (FieldType alpha@@61))) (= (U_2_bool (MapType8Select (|lambda#50| |l#0@@61| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@108 $f@@54))  (=> (and (not (= $o@@108 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@108) |l#2@@49|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3163| :pattern ( (MapType8Select (|lambda#50| |l#0@@61| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@108 $f@@54)) )))
(assert (forall ((arg0@@652 T@U) (arg1@@346 T@U) (arg2@@216 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#51| arg0@@652 arg1@@346 arg2@@216 arg3@@164)) (MapType8Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@652 arg1@@346 arg2@@216 arg3@@164)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@50| Bool) ($o@@109 T@U) ($f@@55 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@55) (FieldType alpha@@62))) (= (U_2_bool (MapType8Select (|lambda#51| |l#0@@62| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@109 $f@@55))  (=> (and (not (= $o@@109 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@109) |l#2@@50|))) |l#3@@50|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3164| :pattern ( (MapType8Select (|lambda#51| |l#0@@62| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@109 $f@@55)) )))
(assert (forall ((arg0@@653 T@U) (arg1@@347 T@U) (arg2@@217 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#52| arg0@@653 arg1@@347 arg2@@217 arg3@@165)) (MapType8Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@653 arg1@@347 arg2@@217 arg3@@165)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@51| Bool) ($o@@110 T@U) ($f@@56 T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@56) (FieldType alpha@@63))) (= (U_2_bool (MapType8Select (|lambda#52| |l#0@@63| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@110 $f@@56))  (=> (and (not (= $o@@110 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@110) |l#2@@51|))) |l#3@@51|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3165| :pattern ( (MapType8Select (|lambda#52| |l#0@@63| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@110 $f@@56)) )))
(assert (forall ((arg0@@654 T@U) (arg1@@348 T@U) (arg2@@218 T@U) (arg3@@166 Bool) ) (! (= (type (|lambda#53| arg0@@654 arg1@@348 arg2@@218 arg3@@166)) (MapType8Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@654 arg1@@348 arg2@@218 arg3@@166)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@52| Bool) ($o@@111 T@U) ($f@@57 T@U) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@111) refType)) (= (type $f@@57) (FieldType alpha@@64))) (= (U_2_bool (MapType8Select (|lambda#53| |l#0@@64| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@111 $f@@57))  (=> (and (not (= $o@@111 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@111) |l#2@@52|))) |l#3@@52|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3166| :pattern ( (MapType8Select (|lambda#53| |l#0@@64| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@111 $f@@57)) )))
(assert (forall ((arg0@@655 T@U) (arg1@@349 T@U) (arg2@@219 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#54| arg0@@655 arg1@@349 arg2@@219 arg3@@167)) (MapType8Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@655 arg1@@349 arg2@@219 arg3@@167)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@53| Bool) ($o@@112 T@U) ($f@@58 T@U) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@112) refType)) (= (type $f@@58) (FieldType alpha@@65))) (= (U_2_bool (MapType8Select (|lambda#54| |l#0@@65| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@112 $f@@58))  (=> (and (not (= $o@@112 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@112) |l#2@@53|))) |l#3@@53|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3167| :pattern ( (MapType8Select (|lambda#54| |l#0@@65| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@112 $f@@58)) )))
(assert (forall ((arg0@@656 T@U) (arg1@@350 T@U) (arg2@@220 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#55| arg0@@656 arg1@@350 arg2@@220 arg3@@168)) (MapType8Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@656 arg1@@350 arg2@@220 arg3@@168)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@54| Bool) ($o@@113 T@U) ($f@@59 T@U) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type $o@@113) refType)) (= (type $f@@59) (FieldType alpha@@66))) (= (U_2_bool (MapType8Select (|lambda#55| |l#0@@66| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@113 $f@@59))  (=> (and (not (= $o@@113 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@113) |l#2@@54|))) |l#3@@54|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3168| :pattern ( (MapType8Select (|lambda#55| |l#0@@66| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@113 $f@@59)) )))
(assert (forall ((arg0@@657 T@U) (arg1@@351 T@U) (arg2@@221 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#56| arg0@@657 arg1@@351 arg2@@221 arg3@@169)) (MapType8Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@657 arg1@@351 arg2@@221 arg3@@169)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@55| T@U) (|l#2@@55| T@U) (|l#3@@55| Bool) ($o@@114 T@U) ($f@@60 T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (type $o@@114) refType)) (= (type $f@@60) (FieldType alpha@@67))) (= (U_2_bool (MapType8Select (|lambda#56| |l#0@@67| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@114 $f@@60))  (=> (and (not (= $o@@114 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@114) |l#2@@55|))) |l#3@@55|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3169| :pattern ( (MapType8Select (|lambda#56| |l#0@@67| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@114 $f@@60)) )))
(assert (forall ((arg0@@658 T@U) (arg1@@352 T@U) (arg2@@222 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#57| arg0@@658 arg1@@352 arg2@@222 arg3@@170)) (MapType8Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@658 arg1@@352 arg2@@222 arg3@@170)) )))
(assert (forall ((|l#0@@68| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@56| Bool) ($o@@115 T@U) ($f@@61 T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type $o@@115) refType)) (= (type $f@@61) (FieldType alpha@@68))) (= (U_2_bool (MapType8Select (|lambda#57| |l#0@@68| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@115 $f@@61))  (=> (and (not (= $o@@115 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@115) |l#2@@56|))) |l#3@@56|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3170| :pattern ( (MapType8Select (|lambda#57| |l#0@@68| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@115 $f@@61)) )))
(assert (forall ((arg0@@659 T@U) (arg1@@353 T@U) (arg2@@223 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#58| arg0@@659 arg1@@353 arg2@@223 arg3@@171)) (MapType8Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@659 arg1@@353 arg2@@223 arg3@@171)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@57| Bool) ($o@@116 T@U) ($f@@62 T@U) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type $o@@116) refType)) (= (type $f@@62) (FieldType alpha@@69))) (= (U_2_bool (MapType8Select (|lambda#58| |l#0@@69| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@116 $f@@62))  (=> (and (not (= $o@@116 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@116) |l#2@@57|))) |l#3@@57|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3171| :pattern ( (MapType8Select (|lambda#58| |l#0@@69| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@116 $f@@62)) )))
(assert (forall ((arg0@@660 T@U) (arg1@@354 T@U) (arg2@@224 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#59| arg0@@660 arg1@@354 arg2@@224 arg3@@172)) (MapType8Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@660 arg1@@354 arg2@@224 arg3@@172)) )))
(assert (forall ((|l#0@@70| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@58| Bool) ($o@@117 T@U) ($f@@63 T@U) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type $o@@117) refType)) (= (type $f@@63) (FieldType alpha@@70))) (= (U_2_bool (MapType8Select (|lambda#59| |l#0@@70| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@117 $f@@63))  (=> (and (not (= $o@@117 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@117) |l#2@@58|))) |l#3@@58|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3172| :pattern ( (MapType8Select (|lambda#59| |l#0@@70| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@117 $f@@63)) )))
(assert (forall ((arg0@@661 T@U) (arg1@@355 T@U) (arg2@@225 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#60| arg0@@661 arg1@@355 arg2@@225 arg3@@173)) (MapType8Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@661 arg1@@355 arg2@@225 arg3@@173)) )))
(assert (forall ((|l#0@@71| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@59| Bool) ($o@@118 T@U) ($f@@64 T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (type $o@@118) refType)) (= (type $f@@64) (FieldType alpha@@71))) (= (U_2_bool (MapType8Select (|lambda#60| |l#0@@71| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@118 $f@@64))  (=> (and (not (= $o@@118 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@118) |l#2@@59|))) |l#3@@59|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3173| :pattern ( (MapType8Select (|lambda#60| |l#0@@71| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@118 $f@@64)) )))
(assert (forall ((arg0@@662 T@U) (arg1@@356 T@U) (arg2@@226 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#61| arg0@@662 arg1@@356 arg2@@226 arg3@@174)) (MapType8Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@662 arg1@@356 arg2@@226 arg3@@174)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@60| Bool) ($o@@119 T@U) ($f@@65 T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (type $o@@119) refType)) (= (type $f@@65) (FieldType alpha@@72))) (= (U_2_bool (MapType8Select (|lambda#61| |l#0@@72| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@119 $f@@65))  (=> (and (not (= $o@@119 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@119) |l#2@@60|))) |l#3@@60|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3174| :pattern ( (MapType8Select (|lambda#61| |l#0@@72| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@119 $f@@65)) )))
(assert (forall ((arg0@@663 T@U) (arg1@@357 T@U) (arg2@@227 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#62| arg0@@663 arg1@@357 arg2@@227 arg3@@175)) (MapType8Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@663 arg1@@357 arg2@@227 arg3@@175)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@61| T@U) (|l#2@@61| T@U) (|l#3@@61| Bool) ($o@@120 T@U) ($f@@66 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type $o@@120) refType)) (= (type $f@@66) (FieldType alpha@@73))) (= (U_2_bool (MapType8Select (|lambda#62| |l#0@@73| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@120 $f@@66))  (=> (and (not (= $o@@120 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@120) |l#2@@61|))) |l#3@@61|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3175| :pattern ( (MapType8Select (|lambda#62| |l#0@@73| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@120 $f@@66)) )))
(assert (forall ((arg0@@664 T@U) (arg1@@358 T@U) (arg2@@228 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#63| arg0@@664 arg1@@358 arg2@@228 arg3@@176)) (MapType8Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@664 arg1@@358 arg2@@228 arg3@@176)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@62| T@U) (|l#2@@62| T@U) (|l#3@@62| Bool) ($o@@121 T@U) ($f@@67 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type $o@@121) refType)) (= (type $f@@67) (FieldType alpha@@74))) (= (U_2_bool (MapType8Select (|lambda#63| |l#0@@74| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@121 $f@@67))  (=> (and (not (= $o@@121 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@121) |l#2@@62|))) |l#3@@62|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3176| :pattern ( (MapType8Select (|lambda#63| |l#0@@74| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@121 $f@@67)) )))
(assert (forall ((arg0@@665 T@U) (arg1@@359 T@U) (arg2@@229 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#64| arg0@@665 arg1@@359 arg2@@229 arg3@@177)) (MapType8Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@665 arg1@@359 arg2@@229 arg3@@177)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@63| T@U) (|l#2@@63| T@U) (|l#3@@63| Bool) ($o@@122 T@U) ($f@@68 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (type $o@@122) refType)) (= (type $f@@68) (FieldType alpha@@75))) (= (U_2_bool (MapType8Select (|lambda#64| |l#0@@75| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@122 $f@@68))  (=> (and (not (= $o@@122 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@122) |l#2@@63|))) |l#3@@63|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3177| :pattern ( (MapType8Select (|lambda#64| |l#0@@75| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@122 $f@@68)) )))
(assert (forall ((arg0@@666 T@U) (arg1@@360 T@U) (arg2@@230 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#65| arg0@@666 arg1@@360 arg2@@230 arg3@@178)) (MapType8Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@666 arg1@@360 arg2@@230 arg3@@178)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@64| T@U) (|l#2@@64| T@U) (|l#3@@64| Bool) ($o@@123 T@U) ($f@@69 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (type $o@@123) refType)) (= (type $f@@69) (FieldType alpha@@76))) (= (U_2_bool (MapType8Select (|lambda#65| |l#0@@76| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@123 $f@@69))  (=> (and (not (= $o@@123 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@123) |l#2@@64|))) |l#3@@64|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3178| :pattern ( (MapType8Select (|lambda#65| |l#0@@76| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@123 $f@@69)) )))
(assert (forall ((arg0@@667 T@U) (arg1@@361 T@U) (arg2@@231 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#66| arg0@@667 arg1@@361 arg2@@231 arg3@@179)) (MapType8Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@667 arg1@@361 arg2@@231 arg3@@179)) )))
(assert (forall ((|l#0@@77| T@U) (|l#1@@65| T@U) (|l#2@@65| T@U) (|l#3@@65| Bool) ($o@@124 T@U) ($f@@70 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type |l#0@@77|) refType) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (type $o@@124) refType)) (= (type $f@@70) (FieldType alpha@@77))) (= (U_2_bool (MapType8Select (|lambda#66| |l#0@@77| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@124 $f@@70))  (=> (and (not (= $o@@124 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@124) |l#2@@65|))) |l#3@@65|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3179| :pattern ( (MapType8Select (|lambda#66| |l#0@@77| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@124 $f@@70)) )))
(assert (forall ((arg0@@668 T@U) (arg1@@362 T@U) (arg2@@232 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#67| arg0@@668 arg1@@362 arg2@@232 arg3@@180)) (MapType8Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@668 arg1@@362 arg2@@232 arg3@@180)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@66| T@U) (|l#2@@66| T@U) (|l#3@@66| Bool) ($o@@125 T@U) ($f@@71 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type |l#0@@78|) refType) (= (type |l#1@@66|) (MapType0Type refType MapType1Type))) (= (type |l#2@@66|) (FieldType boolType))) (= (type $o@@125) refType)) (= (type $f@@71) (FieldType alpha@@78))) (= (U_2_bool (MapType8Select (|lambda#67| |l#0@@78| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@125 $f@@71))  (=> (and (not (= $o@@125 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@66| $o@@125) |l#2@@66|))) |l#3@@66|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3180| :pattern ( (MapType8Select (|lambda#67| |l#0@@78| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@125 $f@@71)) )))
(assert (forall ((arg0@@669 T@U) (arg1@@363 T@U) (arg2@@233 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#68| arg0@@669 arg1@@363 arg2@@233 arg3@@181)) (MapType8Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@669 arg1@@363 arg2@@233 arg3@@181)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@67| T@U) (|l#2@@67| T@U) (|l#3@@67| Bool) ($o@@126 T@U) ($f@@72 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type |l#0@@79|) refType) (= (type |l#1@@67|) (MapType0Type refType MapType1Type))) (= (type |l#2@@67|) (FieldType boolType))) (= (type $o@@126) refType)) (= (type $f@@72) (FieldType alpha@@79))) (= (U_2_bool (MapType8Select (|lambda#68| |l#0@@79| |l#1@@67| |l#2@@67| |l#3@@67|) $o@@126 $f@@72))  (=> (and (not (= $o@@126 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@67| $o@@126) |l#2@@67|))) |l#3@@67|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3181| :pattern ( (MapType8Select (|lambda#68| |l#0@@79| |l#1@@67| |l#2@@67| |l#3@@67|) $o@@126 $f@@72)) )))
(assert (forall ((arg0@@670 T@U) (arg1@@364 T@U) (arg2@@234 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#69| arg0@@670 arg1@@364 arg2@@234 arg3@@182)) (MapType8Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@670 arg1@@364 arg2@@234 arg3@@182)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@68| T@U) (|l#2@@68| T@U) (|l#3@@68| Bool) ($o@@127 T@U) ($f@@73 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type |l#0@@80|) refType) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (type $o@@127) refType)) (= (type $f@@73) (FieldType alpha@@80))) (= (U_2_bool (MapType8Select (|lambda#69| |l#0@@80| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@127 $f@@73))  (=> (and (not (= $o@@127 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@127) |l#2@@68|))) |l#3@@68|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3182| :pattern ( (MapType8Select (|lambda#69| |l#0@@80| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@127 $f@@73)) )))
(assert (forall ((arg0@@671 T@U) (arg1@@365 T@U) (arg2@@235 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#70| arg0@@671 arg1@@365 arg2@@235 arg3@@183)) (MapType8Type refType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@671 arg1@@365 arg2@@235 arg3@@183)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@69| T@U) (|l#2@@69| T@U) (|l#3@@69| Bool) ($o@@128 T@U) ($f@@74 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type |l#0@@81|) refType) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@69|) (FieldType boolType))) (= (type $o@@128) refType)) (= (type $f@@74) (FieldType alpha@@81))) (= (U_2_bool (MapType8Select (|lambda#70| |l#0@@81| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@128 $f@@74))  (=> (and (not (= $o@@128 |l#0@@81|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@128) |l#2@@69|))) |l#3@@69|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3183| :pattern ( (MapType8Select (|lambda#70| |l#0@@81| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@128 $f@@74)) )))
(assert (forall ((arg0@@672 T@U) (arg1@@366 T@U) (arg2@@236 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#71| arg0@@672 arg1@@366 arg2@@236 arg3@@184)) (MapType8Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@672 arg1@@366 arg2@@236 arg3@@184)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@70| T@U) (|l#2@@70| T@U) (|l#3@@70| Bool) ($o@@129 T@U) ($f@@75 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type |l#0@@82|) refType) (= (type |l#1@@70|) (MapType0Type refType MapType1Type))) (= (type |l#2@@70|) (FieldType boolType))) (= (type $o@@129) refType)) (= (type $f@@75) (FieldType alpha@@82))) (= (U_2_bool (MapType8Select (|lambda#71| |l#0@@82| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@129 $f@@75))  (=> (and (not (= $o@@129 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@70| $o@@129) |l#2@@70|))) |l#3@@70|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3184| :pattern ( (MapType8Select (|lambda#71| |l#0@@82| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@129 $f@@75)) )))
(assert (forall ((arg0@@673 T@U) (arg1@@367 T@U) (arg2@@237 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#72| arg0@@673 arg1@@367 arg2@@237 arg3@@185)) (MapType8Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@673 arg1@@367 arg2@@237 arg3@@185)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@71| T@U) (|l#2@@71| T@U) (|l#3@@71| Bool) ($o@@130 T@U) ($f@@76 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (= (type |l#0@@83|) refType) (= (type |l#1@@71|) (MapType0Type refType MapType1Type))) (= (type |l#2@@71|) (FieldType boolType))) (= (type $o@@130) refType)) (= (type $f@@76) (FieldType alpha@@83))) (= (U_2_bool (MapType8Select (|lambda#72| |l#0@@83| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@130 $f@@76))  (=> (and (not (= $o@@130 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@71| $o@@130) |l#2@@71|))) |l#3@@71|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3185| :pattern ( (MapType8Select (|lambda#72| |l#0@@83| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@130 $f@@76)) )))
(assert (forall ((arg0@@674 T@U) (arg1@@368 T@U) (arg2@@238 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#73| arg0@@674 arg1@@368 arg2@@238 arg3@@186)) (MapType8Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@674 arg1@@368 arg2@@238 arg3@@186)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@72| T@U) (|l#2@@72| T@U) (|l#3@@72| Bool) ($o@@131 T@U) ($f@@77 T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (= (type |l#0@@84|) refType) (= (type |l#1@@72|) (MapType0Type refType MapType1Type))) (= (type |l#2@@72|) (FieldType boolType))) (= (type $o@@131) refType)) (= (type $f@@77) (FieldType alpha@@84))) (= (U_2_bool (MapType8Select (|lambda#73| |l#0@@84| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@131 $f@@77))  (=> (and (not (= $o@@131 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@72| $o@@131) |l#2@@72|))) |l#3@@72|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3186| :pattern ( (MapType8Select (|lambda#73| |l#0@@84| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@131 $f@@77)) )))
(assert (forall ((arg0@@675 T@U) (arg1@@369 T@U) (arg2@@239 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#74| arg0@@675 arg1@@369 arg2@@239 arg3@@187)) (MapType8Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@675 arg1@@369 arg2@@239 arg3@@187)) )))
(assert (forall ((|l#0@@85| T@U) (|l#1@@73| T@U) (|l#2@@73| T@U) (|l#3@@73| Bool) ($o@@132 T@U) ($f@@78 T@U) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (= (type |l#0@@85|) refType) (= (type |l#1@@73|) (MapType0Type refType MapType1Type))) (= (type |l#2@@73|) (FieldType boolType))) (= (type $o@@132) refType)) (= (type $f@@78) (FieldType alpha@@85))) (= (U_2_bool (MapType8Select (|lambda#74| |l#0@@85| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@132 $f@@78))  (=> (and (not (= $o@@132 |l#0@@85|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@73| $o@@132) |l#2@@73|))) |l#3@@73|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3187| :pattern ( (MapType8Select (|lambda#74| |l#0@@85| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@132 $f@@78)) )))
(assert (forall ((arg0@@676 T@U) (arg1@@370 T@U) (arg2@@240 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#75| arg0@@676 arg1@@370 arg2@@240 arg3@@188)) (MapType8Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@676 arg1@@370 arg2@@240 arg3@@188)) )))
(assert (forall ((|l#0@@86| T@U) (|l#1@@74| T@U) (|l#2@@74| T@U) (|l#3@@74| Bool) ($o@@133 T@U) ($f@@79 T@U) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type |l#0@@86|) refType) (= (type |l#1@@74|) (MapType0Type refType MapType1Type))) (= (type |l#2@@74|) (FieldType boolType))) (= (type $o@@133) refType)) (= (type $f@@79) (FieldType alpha@@86))) (= (U_2_bool (MapType8Select (|lambda#75| |l#0@@86| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@133 $f@@79))  (=> (and (not (= $o@@133 |l#0@@86|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@74| $o@@133) |l#2@@74|))) |l#3@@74|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3188| :pattern ( (MapType8Select (|lambda#75| |l#0@@86| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@133 $f@@79)) )))
(assert (forall ((arg0@@677 T@U) (arg1@@371 T@U) (arg2@@241 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#76| arg0@@677 arg1@@371 arg2@@241 arg3@@189)) (MapType8Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@677 arg1@@371 arg2@@241 arg3@@189)) )))
(assert (forall ((|l#0@@87| T@U) (|l#1@@75| T@U) (|l#2@@75| T@U) (|l#3@@75| Bool) ($o@@134 T@U) ($f@@80 T@U) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type |l#0@@87|) refType) (= (type |l#1@@75|) (MapType0Type refType MapType1Type))) (= (type |l#2@@75|) (FieldType boolType))) (= (type $o@@134) refType)) (= (type $f@@80) (FieldType alpha@@87))) (= (U_2_bool (MapType8Select (|lambda#76| |l#0@@87| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@134 $f@@80))  (=> (and (not (= $o@@134 |l#0@@87|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@75| $o@@134) |l#2@@75|))) |l#3@@75|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3189| :pattern ( (MapType8Select (|lambda#76| |l#0@@87| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@134 $f@@80)) )))
(assert (forall ((arg0@@678 T@U) (arg1@@372 T@U) (arg2@@242 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#77| arg0@@678 arg1@@372 arg2@@242 arg3@@190)) (MapType8Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@678 arg1@@372 arg2@@242 arg3@@190)) )))
(assert (forall ((|l#0@@88| T@U) (|l#1@@76| T@U) (|l#2@@76| T@U) (|l#3@@76| Bool) ($o@@135 T@U) ($f@@81 T@U) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (= (type |l#0@@88|) refType) (= (type |l#1@@76|) (MapType0Type refType MapType1Type))) (= (type |l#2@@76|) (FieldType boolType))) (= (type $o@@135) refType)) (= (type $f@@81) (FieldType alpha@@88))) (= (U_2_bool (MapType8Select (|lambda#77| |l#0@@88| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@135 $f@@81))  (=> (and (not (= $o@@135 |l#0@@88|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@76| $o@@135) |l#2@@76|))) |l#3@@76|)))) :qid |DafnyPreludebpl.129:1| :skolemid |3190| :pattern ( (MapType8Select (|lambda#77| |l#0@@88| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@135 $f@@81)) )))
(assert (forall ((|l#0@@89| T@U) (|l#1@@77| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@89|) TyType) (= (type |l#1@@77|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#78| |l#0@@89| |l#1@@77|) |$l#0#heap#0| |$l#0#i#0|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@89| (|Seq#Index| |l#1@@77| (U_2_int ($Unbox intType |$l#0#i#0|)))))))) :qid |unknown.0:0| :skolemid |3191| :pattern ( (MapType2Select (|lambda#78| |l#0@@89| |l#1@@77|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@90| T@U) (|l#1@@78| Int) (|l#2@@77| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@90|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#79| |l#0@@90| |l#1@@78| |l#2@@77|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@90|) (and (<= |l#1@@78| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@77|))))) :qid |DafnyPreludebpl.22:1| :skolemid |3192| :pattern ( (MapType2Select (|lambda#79| |l#0@@90| |l#1@@78| |l#2@@77|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@91| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#80| |l#0@@91|) |$l#0#o#0|)) |l#0@@91|)) :qid |unknown.0:0| :skolemid |3193| :pattern ( (MapType0Select (|lambda#80| |l#0@@91|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@92| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@92|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#81| |l#0@@92|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@92|)) :qid |LinearSequencesdfy.68:25| :skolemid |3194| :pattern ( (MapType2Select (|lambda#81| |l#0@@92|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@93| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@93|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#82| |l#0@@93|) |$l#0#ly#0|) |l#0@@93|)) :qid |LinearSequencesdfy.68:25| :skolemid |3195| :pattern ( (MapType0Select (|lambda#82| |l#0@@93|) |$l#0#ly#0|)) )))
(assert (forall ((|l#0@@94| T@U) (|l#1@@79| T@U) (|l#2@@78| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@94|) TyType) (= (type |l#1@@79|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#88| |l#0@@94| |l#1@@79| |l#2@@78|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@94|) (> (U_2_int (MapType0Select |l#1@@79| |$y#0|)) |l#2@@78|)))) :qid |unknown.0:0| :skolemid |3196| :pattern ( (MapType0Select (|lambda#88| |l#0@@94| |l#1@@79| |l#2@@78|) |$y#0|)) )))
(assert (forall ((|l#0@@95| T@U) (|l#1@@80| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@95|) TyType) (= (type |l#1@@80|) (MapType0Type BoxType boolType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#90| |l#0@@95| |l#1@@80|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@95|) (U_2_bool (MapType0Select |l#1@@80| |$y#0@@0|))))) :qid |unknown.0:0| :skolemid |3197| :pattern ( (MapType0Select (|lambda#90| |l#0@@95| |l#1@@80|) |$y#0@@0|)) )))
(assert (forall ((|l#0@@96| T@U) (|l#1@@81| T@U) (|l#2@@79| T@U) (|$w#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@96|) TyType) (= (type |l#1@@81|) (MapType0Type BoxType boolType))) (= (type |l#2@@79|) BoxType)) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#96| |l#0@@96| |l#1@@81| |l#2@@79|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@96|) (and (U_2_bool (MapType0Select |l#1@@81| |$w#0|)) (not (= |$w#0| |l#2@@79|)))))) :qid |unknown.0:0| :skolemid |3198| :pattern ( (MapType0Select (|lambda#96| |l#0@@96| |l#1@@81| |l#2@@79|) |$w#0|)) )))
(assert (forall ((|l#0@@97| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (= (type |l#0@@97|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#97| |l#0@@97|) |$w#0@@0|) (MapType0Select |l#0@@97| |$w#0@@0|))) :qid |MapRemovesdfy.22:44| :skolemid |3199| :pattern ( (MapType0Select (|lambda#97| |l#0@@97|) |$w#0@@0|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq () T@U)
(declare-fun |buf#0@@75| () T@U)
(declare-fun |entries#0@@24| () T@U)
(declare-fun |jr#0@0| () T@U)
(declare-fun |##jr#1_1_0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |numBlocks#0@@57| () Int)
(declare-fun |##jr#1_2_0@0| () T@U)
(declare-fun |##jr#1_2_1@0| () T@U)
(declare-fun |##jr#1_3_1@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun MoreFuel_JournalRanges._default.parseHeader0 () T@U)
(declare-fun StartFuelAssert_JournalRanges._default.parseHeader () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun |##a#0_0_0@0| () T@U)
(declare-fun |##a#0_0_1@0| () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun MoreFuel_Sequences._default.concatSeq0 () T@U)
(declare-fun |##a#0_0_2@0| () T@U)
(declare-fun |##a#0_0_3@0| () T@U)
(declare-fun |##a#0_1_0@0| () T@U)
(declare-fun |a##0_1_0@0| () T@U)
(declare-fun |b##0_1_0@0| () T@U)
(declare-fun call0formal@Sequences._default.concatSeqAdditive$A@0 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun |##a#0_1_1@0| () T@U)
(declare-fun |##a#0_1_2@0| () T@U)
(declare-fun |##a#0_2_1@0| () T@U)
(declare-fun |##s#3@0| () T@U)
(declare-fun |##s#4@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0 () T@U)
(declare-fun StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.withoutChecksums () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |buf##1@0| () T@U)
(declare-fun |header##0@0| () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.hasHeader () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |buf##2@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun MoreFuel_JournalistMarshallingModel._default.hasHeader0 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuelAssert_AsyncDisk._default.ChecksumChecksOut () T@U)
(declare-fun StartFuelAssert_AsyncDisk._default.splice () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.ValidNodeAddr () T@U)
(declare-fun StartFuel_DiskLayout._default.JournalBlockIdx () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.JournalBlockIdx () T@U)
(declare-fun StartFuelAssert_PackedIntsLib._default.pack_LittleEndian_Uint32 () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.cyclicSlice () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.splice () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.writeOnto () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.writeIntOnto () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.writeJournalEntries () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.fillInChecksums () T@U)
(declare-fun StartFuel_JournalistMarshallingModel._default.marshallJournalEntries () T@U)
(declare-fun StartFuelAssert_JournalistMarshallingModel._default.marshallJournalEntries () T@U)
(declare-fun $Heap@@51 () T@U)
(declare-fun |jr#0@@35| () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $_Frame@0) (MapType8Type refType boolType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_JournalistMarshallingModel._default.hasHeader0) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.hasHeader) LayerTypeType)) (= (type |buf#0@@75|) (SeqType BoxType))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0) LayerTypeType)) (= (type StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) LayerTypeType)) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0) LayerTypeType)) (= (type StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) LayerTypeType)) (= (type |jr#0@0|) (SeqType BoxType))) (= (type |##a#0_2_1@0|) (SeqType BoxType))) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type |##a#0_1_0@0|) (SeqType BoxType))) (= (type |a##0_1_0@0|) (SeqType BoxType))) (= (type |b##0_1_0@0|) (SeqType BoxType))) (= (type call0formal@Sequences._default.concatSeqAdditive$A@0) TyType)) (= (type $Heap@7) (MapType0Type refType MapType1Type))) (= (type |##a#0_1_1@0|) (SeqType BoxType))) (= (type |##a#0_1_2@0|) (SeqType BoxType))) (= (type |##a#0_0_0@0|) (SeqType BoxType))) (= (type |##a#0_0_1@0|) (SeqType BoxType))) (= (type $Heap@8) (MapType0Type refType MapType1Type))) (= (type MoreFuel_Sequences._default.concatSeq0) LayerTypeType)) (= (type |##a#0_0_2@0|) (SeqType BoxType))) (= (type |##a#0_0_3@0|) (SeqType BoxType))) (= (type $Heap@9) (MapType0Type refType MapType1Type))) (= (type MoreFuel_JournalRanges._default.parseHeader0) LayerTypeType)) (= (type StartFuelAssert_JournalRanges._default.parseHeader) LayerTypeType)) (= (type |##jr#1_3_1@0|) (SeqType BoxType))) (= (type |entries#0@@24|) (SeqType BoxType))) (= (type |##jr#1_2_0@0|) (SeqType BoxType))) (= (type |##jr#1_2_1@0|) (SeqType BoxType))) (= (type |##jr#1_1_0@0|) (SeqType BoxType))) (= (type |##s#3@0|) (SeqType BoxType))) (= (type |##s#4@0|) (SeqType BoxType))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_JournalistMarshallingModel._default.withoutChecksums) LayerTypeType)) (= (type |buf##1@0|) (SeqType BoxType))) (= (type |header##0@0|) DatatypeTypeType)) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |buf##2@0|) (SeqType BoxType))) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)) (= (type StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) LayerTypeType)) (= (type StartFuelAssert_AsyncDisk._default.splice) LayerTypeType)) (= (type StartFuelAssert_DiskLayout._default.ValidNodeAddr) LayerTypeType)) (= (type StartFuel_DiskLayout._default.JournalBlockIdx) LayerTypeType)) (= (type StartFuelAssert_DiskLayout._default.JournalBlockIdx) LayerTypeType)) (= (type StartFuelAssert_PackedIntsLib._default.pack_LittleEndian_Uint32) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.cyclicSlice) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.splice) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.writeOnto) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.writeIntOnto) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.writeJournalEntries) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.fillInChecksums) LayerTypeType)) (= (type StartFuel_JournalistMarshallingModel._default.marshallJournalEntries) LayerTypeType)) (= (type StartFuelAssert_JournalistMarshallingModel._default.marshallJournalEntries) LayerTypeType)) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |jr#0@@35|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$JournalistMarshallingModel.__default.parsesFromStuff)
(assert (not (=> (= (ControlFlow 0 0) 598010) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 597943) (- 0 603080)) (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|))) (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|)) (=> (= (ControlFlow 0 597943) (- 0 603088)) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|)))) (|#Options.Option.Some| ($Box |entries#0@@24|)))))))) (let ((anon29_Else_correct  (=> (and (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@0|) (|#Options.Option.Some| ($Box |entries#0@@24|))) (= (ControlFlow 0 179709) 597943)) GeneratedUnifiedExit_correct))) (let ((anon29_Then_correct  (and (=> (= (ControlFlow 0 179707) (- 0 601106)) (|Seq#Equal| (|Seq#Append| |entries#0@@24| (|Seq#Empty| BoxType)) |entries#0@@24|)) (=> (|Seq#Equal| (|Seq#Append| |entries#0@@24| (|Seq#Empty| BoxType)) |entries#0@@24|) (=> (= (ControlFlow 0 179707) (- 0 601120)) (|Options.Option#Equal| (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| (|Seq#Empty| BoxType)))) (|#Options.Option.Some| ($Box |entries#0@@24|)))))))) (let ((anon28_Then_correct  (=> (and (= |##jr#1_1_0@0| (Lit (|Seq#Empty| BoxType))) ($IsAlloc |##jr#1_1_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4)) (=> (and (and (|JournalRanges.__default.parseJournalRange#canCall| (Lit (|Seq#Empty| BoxType))) (Options.Option.Some_q (Lit (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (|Seq#Empty| BoxType)))))) (and (|JournalRanges.__default.parseJournalRange#canCall| (Lit (|Seq#Empty| BoxType))) (= (ControlFlow 0 179703) (- 0 601056)))) (|Options.Option#Equal| (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| ($Unbox (SeqType BoxType) (Options.Option.value (Lit (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (Lit (|Seq#Empty| BoxType))))))))) (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| (|Seq#Empty| BoxType))))))))) (let ((anon27_Then_correct  (=> (and (<= 0 |numBlocks#0@@57|) (<= |numBlocks#0@@57| (|Seq#Length| |jr#0@0|))) (=> (and (and (and (= |##jr#1_2_0@0| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)) ($IsAlloc |##jr#1_2_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4)) (and (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|))))) (and (and (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)) (= |##jr#1_2_1@0| (Lit (|Seq#Empty| BoxType)))) (and ($IsAlloc |##jr#1_2_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|JournalRanges.__default.parseJournalRange#canCall| (Lit (|Seq#Empty| BoxType)))))) (and (=> (= (ControlFlow 0 179699) (- 0 600915)) (Options.Option.Some_q (Lit (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (|Seq#Empty| BoxType)))))) (=> (Options.Option.Some_q (Lit (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (|Seq#Empty| BoxType))))) (=> (and (|JournalRanges.__default.parseJournalRange#canCall| (Lit (|Seq#Empty| BoxType))) (= (ControlFlow 0 179699) (- 0 600939))) (|Options.Option#Equal| (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|))))))) (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| ($Unbox (SeqType BoxType) (Options.Option.value (Lit (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (Lit (|Seq#Empty| BoxType))))))))))))))))) (let ((anon26_Then_correct  (=> ($IsAlloc |jr#0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (=> (and (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@0|) (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@0|)) (and (=> (= (ControlFlow 0 179695) (- 0 600694)) (and (<= 0 |numBlocks#0@@57|) (<= |numBlocks#0@@57| (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179695) (- 0 600711)) (|Seq#Equal| (|Seq#Take| |jr#0@0| |numBlocks#0@@57|) |jr#0@0|)) (=> (|Seq#Equal| (|Seq#Take| |jr#0@0| |numBlocks#0@@57|) |jr#0@0|) (and (=> (= (ControlFlow 0 179695) (- 0 600719)) (and (<= 0 |numBlocks#0@@57|) (<= |numBlocks#0@@57| (|Seq#Length| |jr#0@0|)))) (=> (= |##jr#1_3_1@0| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)) (=> (and ($IsAlloc |##jr#1_3_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|))) (and (=> (= (ControlFlow 0 179695) (- 0 600762)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)))) (=> (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|))) (=> (and (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|)) (= (ControlFlow 0 179695) (- 0 600782))) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@0|) (|#Options.Option.Some| ($Box (|Seq#Append| |entries#0@@24| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (|Seq#Drop| |jr#0@0| |numBlocks#0@@57|))))))))))))))))))))) (let ((anon25_Then_correct true)) (let ((anon20_Else_correct  (=> (|JournalRanges.Header#Equal| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|)) (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))) (and (and (and (and (and (=> (= (ControlFlow 0 179687) 179691) anon25_Then_correct) (=> (= (ControlFlow 0 179687) 179695) anon26_Then_correct)) (=> (= (ControlFlow 0 179687) 179699) anon27_Then_correct)) (=> (= (ControlFlow 0 179687) 179703) anon28_Then_correct)) (=> (= (ControlFlow 0 179687) 179707) anon29_Then_correct)) (=> (= (ControlFlow 0 179687) 179709) anon29_Else_correct))))) (let ((anon24_Else_correct  (=> (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Drop| |jr#0@0| (LitInt 1))))) (and (=> (= (ControlFlow 0 179683) (- 0 602504)) (forall (($o@@136 T@U) ($f@@82 T@U) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (= (type $o@@136) refType) (= (type $f@@82) (FieldType alpha@@89))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@136 $f@@82)))) :qid |JournalistMarshallingModelidfy.860:25| :skolemid |1714| :no-pattern (type $o@@136) :no-pattern (type $f@@82) :no-pattern (U_2_int $o@@136) :no-pattern (U_2_bool $o@@136) :no-pattern (U_2_int $f@@82) :no-pattern (U_2_bool $f@@82) ))) (=> (forall (($o@@137 T@U) ($f@@83 T@U) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (= (type $o@@137) refType) (= (type $f@@83) (FieldType alpha@@90))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@137 $f@@83)))) :qid |JournalistMarshallingModelidfy.860:25| :skolemid |1714| :no-pattern (type $o@@137) :no-pattern (type $f@@83) :no-pattern (U_2_int $o@@137) :no-pattern (U_2_bool $o@@137) :no-pattern (U_2_int $f@@83) :no-pattern (U_2_bool $f@@83) )) (=> (and (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (= $Heap@4 $Heap@9) (= StartFuel_JournalRanges._default.parseHeader ($LS MoreFuel_JournalRanges._default.parseHeader0)))) (and (and (= StartFuelAssert_JournalRanges._default.parseHeader ($LS ($LS MoreFuel_JournalRanges._default.parseHeader0))) (= (AsFuelBottom MoreFuel_JournalRanges._default.parseHeader0) MoreFuel_JournalRanges._default.parseHeader0)) (and ($IsAlloc |jr#0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@9) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|)))) (and (=> (= (ControlFlow 0 179683) (- 0 602585)) (and (<= 0 (LitInt 0)) (<= (LitInt 0) (|Seq#Length| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))))) (and (=> (= (ControlFlow 0 179683) (- 0 602610)) (and (<= (LitInt 0) (LitInt 4)) (<= (LitInt 4) (|Seq#Length| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))))) (and (=> (= (ControlFlow 0 179683) (- 0 602637)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179683) (- 0 602656)) (and (<= 0 (LitInt 0)) (<= (LitInt 0) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))))) (and (=> (= (ControlFlow 0 179683) (- 0 602685)) (and (<= (LitInt 0) (LitInt 4)) (<= (LitInt 4) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))))) (=> (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|) (and (=> (= (ControlFlow 0 179683) (- 0 602721)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq |jr#0@0|) (LitInt 4)) (LitInt 0)) (|Seq#Drop| (|Seq#Take| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (LitInt 4)) (LitInt 0)))) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|) (LitInt 4)) (LitInt 0)) (|Seq#Drop| (|Seq#Take| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (LitInt 4)) (LitInt 0))) (=> (and ($IsAlloc |jr#0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@9) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|)) (and (=> (= (ControlFlow 0 179683) (- 0 602826)) (and (<= 0 (LitInt 4)) (<= (LitInt 4) (|Seq#Length| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))))) (and (=> (= (ControlFlow 0 179683) (- 0 602851)) (and (<= (LitInt 4) (LitInt 8)) (<= (LitInt 8) (|Seq#Length| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))))) (and (=> (= (ControlFlow 0 179683) (- 0 602878)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179683) (- 0 602897)) (and (<= 0 (LitInt 4)) (<= (LitInt 4) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))))) (and (=> (= (ControlFlow 0 179683) (- 0 602926)) (and (<= (LitInt 4) (LitInt 8)) (<= (LitInt 8) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))))) (=> (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|) (and (=> (= (ControlFlow 0 179683) (- 0 602962)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq |jr#0@0|) (LitInt 8)) (LitInt 4)) (|Seq#Drop| (|Seq#Take| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (LitInt 8)) (LitInt 4)))) (=> (and (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|) (LitInt 8)) (LitInt 4)) (|Seq#Drop| (|Seq#Take| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (LitInt 8)) (LitInt 4))) (= (ControlFlow 0 179683) (- 0 603050))) (|JournalRanges.Header#Equal| (JournalRanges.__default.parseHeader StartFuelAssert_JournalRanges._default.parseHeader (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq |jr#0@0|)) (JournalRanges.__default.parseHeader StartFuelAssert_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))))))))))))))))))))))))))) (let ((anon24_Then_correct  (=> (and (and (and (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|))) (= |##a#0_0_0@0| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))) (and ($IsAlloc |##a#0_0_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))))) (and (and (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|))) (= |##a#0_0_1@0| (|Seq#Drop| |jr#0@0| (LitInt 1)))) (and (and ($IsAlloc |##a#0_0_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1)))) (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1))))))) (and (=> (= (ControlFlow 0 179681) (- 0 602093)) (forall (($o@@138 T@U) ($f@@84 T@U) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (= (type $o@@138) refType) (= (type $f@@84) (FieldType alpha@@91))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@138 $f@@84)))) :qid |JournalistMarshallingModelidfy.855:27| :skolemid |1712| :no-pattern (type $o@@138) :no-pattern (type $f@@84) :no-pattern (U_2_int $o@@138) :no-pattern (U_2_bool $o@@138) :no-pattern (U_2_int $f@@84) :no-pattern (U_2_bool $f@@84) ))) (=> (forall (($o@@139 T@U) ($f@@85 T@U) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (= (type $o@@139) refType) (= (type $f@@85) (FieldType alpha@@92))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@139 $f@@85)))) :qid |JournalistMarshallingModelidfy.855:27| :skolemid |1712| :no-pattern (type $o@@139) :no-pattern (type $f@@85) :no-pattern (U_2_int $o@@139) :no-pattern (U_2_bool $o@@139) :no-pattern (U_2_int $f@@85) :no-pattern (U_2_bool $f@@85) )) (=> (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (=> (and (and (= $Heap@4 $Heap@8) (= StartFuel_Sequences._default.concatSeq ($LS MoreFuel_Sequences._default.concatSeq0))) (and (= StartFuelAssert_Sequences._default.concatSeq ($LS ($LS MoreFuel_Sequences._default.concatSeq0))) (= (AsFuelBottom MoreFuel_Sequences._default.concatSeq0) MoreFuel_Sequences._default.concatSeq0))) (and (=> (= (ControlFlow 0 179681) (- 0 602157)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (=> (= |##a#0_0_2@0| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (=> (and ($IsAlloc |##a#0_0_2@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@8) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))) (and (=> (= (ControlFlow 0 179681) (- 0 602222)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (=> (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (and (=> (= (ControlFlow 0 179681) (- 0 602258)) (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))) (=> (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (and (=> (= (ControlFlow 0 179681) (- 0 602322)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179681) (- 0 602341)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (=> (= |##a#0_0_3@0| (|Seq#Drop| |jr#0@0| (LitInt 1))) (=> (and (and ($IsAlloc |##a#0_0_3@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@8) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1)))) (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1))) (= (ControlFlow 0 179681) (- 0 602405)))) (|Seq#Equal| (|Seq#Append| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Drop| |jr#0@0| (LitInt 1)))) (|Seq#Append| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Drop| |jr#0@0| (LitInt 1))))))))))))))))))))))) (let ((anon23_Then_correct  (=> (and (and (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|))) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (and (and (= |##a#0_1_0@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) ($IsAlloc |##a#0_1_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4)) (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1))))))) (and (=> (= (ControlFlow 0 179677) (- 0 601563)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|))) (=> (= |a##0_1_0@0| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (and (=> (= (ControlFlow 0 179677) (- 0 601603)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (=> (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|))) (=> (= |b##0_1_0@0| (|Seq#Drop| |jr#0@0| (LitInt 1))) (and (=> (= (ControlFlow 0 179677) (- 0 601637)) (forall (($o@@140 T@U) ($f@@86 T@U) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (= (type $o@@140) refType) (= (type $f@@86) (FieldType alpha@@93))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@140 $f@@86)))) :qid |JournalistMarshallingModelidfy.852:28| :skolemid |1713| :no-pattern (type $o@@140) :no-pattern (type $f@@86) :no-pattern (U_2_int $o@@140) :no-pattern (U_2_bool $o@@140) :no-pattern (U_2_int $f@@86) :no-pattern (U_2_bool $f@@86) ))) (=> (forall (($o@@141 T@U) ($f@@87 T@U) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (= (type $o@@141) refType) (= (type $f@@87) (FieldType alpha@@94))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@141 $f@@87)))) :qid |JournalistMarshallingModelidfy.852:28| :skolemid |1713| :no-pattern (type $o@@141) :no-pattern (type $f@@87) :no-pattern (U_2_int $o@@141) :no-pattern (U_2_bool $o@@141) :no-pattern (U_2_int $f@@87) :no-pattern (U_2_bool $f@@87) )) (=> (= call0formal@Sequences._default.concatSeqAdditive$A@0 Tclass.NativeTypes.byte) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (|Sequences.__default.concatSeq#canCall| call0formal@Sequences._default.concatSeqAdditive$A@0 (|Seq#Append| |a##0_1_0@0| |b##0_1_0@0|)) (and (|Sequences.__default.concatSeq#canCall| call0formal@Sequences._default.concatSeqAdditive$A@0 |a##0_1_0@0|) (|Sequences.__default.concatSeq#canCall| call0formal@Sequences._default.concatSeqAdditive$A@0 |b##0_1_0@0|))) (and (|Seq#Equal| (Sequences.__default.concatSeq call0formal@Sequences._default.concatSeqAdditive$A@0 StartFuelAssert_Sequences._default.concatSeq (|Seq#Append| |a##0_1_0@0| |b##0_1_0@0|)) (|Seq#Append| (Sequences.__default.concatSeq call0formal@Sequences._default.concatSeqAdditive$A@0 StartFuelAssert_Sequences._default.concatSeq |a##0_1_0@0|) (Sequences.__default.concatSeq call0formal@Sequences._default.concatSeqAdditive$A@0 StartFuelAssert_Sequences._default.concatSeq |b##0_1_0@0|))) (= $Heap@4 $Heap@7))) (and (=> (= (ControlFlow 0 179677) (- 0 601731)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (=> (= |##a#0_1_1@0| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (=> (and ($IsAlloc |##a#0_1_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@7) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))))) (and (=> (= (ControlFlow 0 179677) (- 0 601796)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (=> (= |##a#0_1_2@0| (|Seq#Drop| |jr#0@0| (LitInt 1))) (=> (and ($IsAlloc |##a#0_1_2@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@7) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1)))) (=> (and (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Drop| |jr#0@0| (LitInt 1)))) (= (ControlFlow 0 179677) (- 0 601879))) (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) (|Seq#Append| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Drop| |jr#0@0| (LitInt 1)))))))))))))))))))))))))) (let ((anon22_Then_correct  (=> ($IsAlloc |jr#0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (=> (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|)) (and (=> (= (ControlFlow 0 179673) (- 0 601203)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179673) (- 0 601222)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179673) (- 0 601243)) (|Seq#Equal| |jr#0@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1))))) (=> (|Seq#Equal| |jr#0@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) (and (=> (= (ControlFlow 0 179673) (- 0 601268)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179673) (- 0 601287)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |jr#0@0|)))) (=> (= |##a#0_2_1@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) (=> (and (and ($IsAlloc |##a#0_2_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1))))) (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1)))) (= (ControlFlow 0 179673) (- 0 601396)))) (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq |jr#0@0|) (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@0| (LitInt 0))) (|Seq#Drop| |jr#0@0| (LitInt 1))))))))))))))))) (let ((anon21_Then_correct true)) (let ((anon19_Else_correct  (=> (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (LitInt 8)) (=> (and (and ($IsAlloc |jr#0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@4) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|)) (and (= |##s#3@0| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|)) ($IsAlloc |##s#3@0| (TSeq Tclass.NativeTypes.byte) $Heap@4))) (and (=> (= (ControlFlow 0 179663) (- 0 600449)) (>= (|Seq#Length| |##s#3@0|) (LitInt 8))) (=> (and (|JournalRanges.__default.parseHeader#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|)) (JournalRanges.Header.Header_q (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|)))) (and (=> (= (ControlFlow 0 179663) (- 0 600480)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (=> (and (= |##s#4@0| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) ($IsAlloc |##s#4@0| (TSeq Tclass.NativeTypes.byte) $Heap@4)) (and (=> (= (ControlFlow 0 179663) (- 0 600524)) (>= (|Seq#Length| |##s#4@0|) (LitInt 8))) (=> (and (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (JournalRanges.Header.Header_q (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))))) (=> (and (and (|$IsA#JournalRanges.Header| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))) (|$IsA#JournalRanges.Header| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))))) (and (and (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte |jr#0@0|) (|JournalRanges.__default.parseHeader#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq |jr#0@0|))) (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))))) (and (and (and (and (and (=> (= (ControlFlow 0 179663) 179687) anon20_Else_correct) (=> (= (ControlFlow 0 179663) 179669) anon21_Then_correct)) (=> (= (ControlFlow 0 179663) 179673) anon22_Then_correct)) (=> (= (ControlFlow 0 179663) 179677) anon23_Then_correct)) (=> (= (ControlFlow 0 179663) 179681) anon24_Then_correct)) (=> (= (ControlFlow 0 179663) 179683) anon24_Else_correct))))))))))))) (let ((anon19_Then_correct  (and (=> (= (ControlFlow 0 179661) (- 0 600243)) (forall (($o@@142 T@U) ($f@@88 T@U) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (= (type $o@@142) refType) (= (type $f@@88) (FieldType alpha@@95))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@142 $f@@88)))) :qid |JournalistMarshallingModelidfy.843:35| :skolemid |1710| :no-pattern (type $o@@142) :no-pattern (type $f@@88) :no-pattern (U_2_int $o@@142) :no-pattern (U_2_bool $o@@142) :no-pattern (U_2_int $f@@88) :no-pattern (U_2_bool $f@@88) ))) (=> (forall (($o@@143 T@U) ($f@@89 T@U) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (= (type $o@@143) refType) (= (type $f@@89) (FieldType alpha@@96))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@143 $f@@89)))) :qid |JournalistMarshallingModelidfy.843:35| :skolemid |1710| :no-pattern (type $o@@143) :no-pattern (type $f@@89) :no-pattern (U_2_int $o@@143) :no-pattern (U_2_bool $o@@143) :no-pattern (U_2_int $f@@89) :no-pattern (U_2_bool $f@@89) )) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (= $Heap@4 $Heap@5) (= StartFuel_JournalBytes._default.JournalBlockOfByteSeq ($LS MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0))) (and (= StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq ($LS ($LS MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0))) (= (AsFuelBottom MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0) MoreFuel_JournalBytes._default.JournalBlockOfByteSeq0))) (and (=> (= (ControlFlow 0 179661) (- 0 600307)) (forall (($o@@144 T@U) ($f@@90 T@U) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (= (type $o@@144) refType) (= (type $f@@90) (FieldType alpha@@97))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@144 $f@@90)))) :qid |JournalistMarshallingModelidfy.844:35| :skolemid |1711| :no-pattern (type $o@@144) :no-pattern (type $f@@90) :no-pattern (U_2_int $o@@144) :no-pattern (U_2_bool $o@@144) :no-pattern (U_2_int $f@@90) :no-pattern (U_2_bool $f@@90) ))) (=> (forall (($o@@145 T@U) ($f@@91 T@U) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (= (type $o@@145) refType) (= (type $f@@91) (FieldType alpha@@98))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@145 $f@@91)))) :qid |JournalistMarshallingModelidfy.844:35| :skolemid |1711| :no-pattern (type $o@@145) :no-pattern (type $f@@91) :no-pattern (U_2_int $o@@145) :no-pattern (U_2_bool $o@@145) :no-pattern (U_2_int $f@@91) :no-pattern (U_2_bool $f@@91) )) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (= $Heap@5 $Heap@6)) (and (and (= StartFuel_JournalBytes._default.JournalRangeOfByteSeq ($LS MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0)) (= StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq ($LS ($LS MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0)))) (and (= (AsFuelBottom MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0) MoreFuel_JournalBytes._default.JournalRangeOfByteSeq0) (= (ControlFlow 0 179661) (- 0 600371))))) (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@0| (LitInt 0)))) (LitInt 8))))))))))) (let ((anon18_Else_correct  (=> (<= (LitInt 8) (|Seq#Length| |buf#0@@75|)) (and (=> (= (ControlFlow 0 179657) (- 0 599596)) (forall (($o@@146 T@U) ($f@@92 T@U) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (= (type $o@@146) refType) (= (type $f@@92) (FieldType alpha@@99))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@146 $f@@92)))) :qid |JournalistMarshallingModelidfy.835:33| :skolemid |1707| :no-pattern (type $o@@146) :no-pattern (type $f@@92) :no-pattern (U_2_int $o@@146) :no-pattern (U_2_bool $o@@146) :no-pattern (U_2_int $f@@92) :no-pattern (U_2_bool $f@@92) ))) (=> (forall (($o@@147 T@U) ($f@@93 T@U) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (= (type $o@@147) refType) (= (type $f@@93) (FieldType alpha@@100))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@147 $f@@93)))) :qid |JournalistMarshallingModelidfy.835:33| :skolemid |1707| :no-pattern (type $o@@147) :no-pattern (type $f@@93) :no-pattern (U_2_int $o@@147) :no-pattern (U_2_bool $o@@147) :no-pattern (U_2_int $f@@93) :no-pattern (U_2_bool $f@@93) )) (and (=> (= (ControlFlow 0 179657) (- 0 599614)) (= (|Seq#Length| |buf#0@@75|) (Mul |numBlocks#0@@57| (LitInt 4096)))) (=> (= (|Seq#Length| |buf#0@@75|) (Mul |numBlocks#0@@57| (LitInt 4096))) (and (=> (= (ControlFlow 0 179657) (- 0 599626)) (=> (|JournalistMarshallingModel.__default.hasChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|) (or (JournalistMarshallingModel.__default.hasChecksums |buf#0@@75| |numBlocks#0@@57|) (forall ((|i#0@@147| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@147|) (< |i#0@@147| |numBlocks#0@@57|)) (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#0@@147|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1663| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#0@@147|)) ))))) (=> (=> (|JournalistMarshallingModel.__default.hasChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|) (or (JournalistMarshallingModel.__default.hasChecksums |buf#0@@75| |numBlocks#0@@57|) (forall ((|i#0@@148| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@148|) (< |i#0@@148| |numBlocks#0@@57|)) (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#0@@148|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1663| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#0@@148|)) )))) (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |buf#0@@75|) (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|)))) (=> (and (and (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |buf#0@@75|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|))))) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|)) (and (and (|Seq#Equal| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuelAssert_Sequences._default.concatSeq ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|)))) (JournalistMarshallingModel.__default.withoutChecksums StartFuelAssert_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|)) (= $Heap@0 $Heap@2)) (and ($IsAlloc |buf#0@@75| (TSeq Tclass.NativeTypes.byte) $Heap@2) ($IsAlloc (int_2_U |numBlocks#0@@57|) Tclass.NativeTypes.uint64 $Heap@2)))) (and (=> (= (ControlFlow 0 179657) (- 0 599774)) (= (|Seq#Length| |buf#0@@75|) (Mul (LitInt 4096) |numBlocks#0@@57|))) (=> (= (|Seq#Length| |buf#0@@75|) (Mul (LitInt 4096) |numBlocks#0@@57|)) (=> (and (and (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|)) (and (= |buf##1@0| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|)) (= |header##0@0| (|#JournalRanges.Header.Header| (|Seq#Length| |entries#0@@24|) |numBlocks#0@@57|)))) (and (=> (= (ControlFlow 0 179657) (- 0 599840)) (forall (($o@@148 T@U) ($f@@94 T@U) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (= (type $o@@148) refType) (= (type $f@@94) (FieldType alpha@@101))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@148 $f@@94)))) :qid |JournalistMarshallingModelidfy.836:29| :skolemid |1708| :no-pattern (type $o@@148) :no-pattern (type $f@@94) :no-pattern (U_2_int $o@@148) :no-pattern (U_2_bool $o@@148) :no-pattern (U_2_int $f@@94) :no-pattern (U_2_bool $f@@94) ))) (=> (forall (($o@@149 T@U) ($f@@95 T@U) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (= (type $o@@149) refType) (= (type $f@@95) (FieldType alpha@@102))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@149 $f@@95)))) :qid |JournalistMarshallingModelidfy.836:29| :skolemid |1708| :no-pattern (type $o@@149) :no-pattern (type $f@@95) :no-pattern (U_2_int $o@@149) :no-pattern (U_2_bool $o@@149) :no-pattern (U_2_int $f@@95) :no-pattern (U_2_bool $f@@95) )) (and (=> (= (ControlFlow 0 179657) (- 0 599858)) (>= (|Seq#Length| |buf##1@0|) (LitInt 8))) (=> (>= (|Seq#Length| |buf##1@0|) (LitInt 8)) (and (=> (= (ControlFlow 0 179657) (- 0 599867)) (JournalistMarshallingModel.__default.hasHeader StartFuelAssert_JournalistMarshallingModel._default.hasHeader |buf##1@0| |header##0@0|)) (=> (JournalistMarshallingModel.__default.hasHeader StartFuelAssert_JournalistMarshallingModel._default.hasHeader |buf##1@0| |header##0@0|) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (|$IsA#JournalRanges.Header| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader |buf##1@0|)) (|$IsA#JournalRanges.Header| |header##0@0|)) (|JournalRanges.__default.parseHeader#canCall| |buf##1@0|)) (and (and (|JournalRanges.Header#Equal| (JournalRanges.__default.parseHeader StartFuelAssert_JournalRanges._default.parseHeader |buf##1@0|) |header##0@0|) (= $Heap@2 $Heap@3)) (and ($IsAlloc |buf#0@@75| (TSeq Tclass.NativeTypes.byte) $Heap@3) ($IsAlloc (int_2_U |numBlocks#0@@57|) Tclass.NativeTypes.uint64 $Heap@3)))) (and (=> (= (ControlFlow 0 179657) (- 0 599942)) (= (|Seq#Length| |buf#0@@75|) (Mul (LitInt 4096) |numBlocks#0@@57|))) (=> (and (and (= (|Seq#Length| |buf#0@@75|) (Mul (LitInt 4096) |numBlocks#0@@57|)) (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|)) (and (|JournalistMarshallingModel.__default.withoutChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|) (= |buf##2@0| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|)))) (and (=> (= (ControlFlow 0 179657) (- 0 599997)) (forall (($o@@150 T@U) ($f@@96 T@U) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (= (type $o@@150) refType) (= (type $f@@96) (FieldType alpha@@103))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@150 $f@@96)))) :qid |JournalistMarshallingModelidfy.837:31| :skolemid |1709| :no-pattern (type $o@@150) :no-pattern (type $f@@96) :no-pattern (U_2_int $o@@150) :no-pattern (U_2_bool $o@@150) :no-pattern (U_2_int $f@@96) :no-pattern (U_2_bool $f@@96) ))) (=> (forall (($o@@151 T@U) ($f@@97 T@U) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (= (type $o@@151) refType) (= (type $f@@97) (FieldType alpha@@104))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@151 $f@@97)))) :qid |JournalistMarshallingModelidfy.837:31| :skolemid |1709| :no-pattern (type $o@@151) :no-pattern (type $f@@97) :no-pattern (U_2_int $o@@151) :no-pattern (U_2_bool $o@@151) :no-pattern (U_2_int $f@@97) :no-pattern (U_2_bool $f@@97) )) (and (=> (= (ControlFlow 0 179657) (- 0 600015)) (<= (LitInt 8) (|Seq#Length| |buf##2@0|))) (=> (<= (LitInt 8) (|Seq#Length| |buf##2@0|)) (and (=> (= (ControlFlow 0 179657) (- 0 600024)) (=> (|JournalistMarshallingModel.__default.hasEntries#canCall| |buf##2@0| |entries#0@@24| (|Seq#Length| |entries#0@@24|)) (or (JournalistMarshallingModel.__default.hasEntries |buf##2@0| |entries#0@@24| (|Seq#Length| |entries#0@@24|)) (forall ((|i#0@@149| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@149|) (< |i#0@@149| (|Seq#Length| |entries#0@@24|))) (JournalistMarshallingModel.__default.hasEntry |buf##2@0| |entries#0@@24| |i#0@@149|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1689| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf##2@0| |entries#0@@24| |i#0@@149|)) ))))) (=> (=> (|JournalistMarshallingModel.__default.hasEntries#canCall| |buf##2@0| |entries#0@@24| (|Seq#Length| |entries#0@@24|)) (or (JournalistMarshallingModel.__default.hasEntries |buf##2@0| |entries#0@@24| (|Seq#Length| |entries#0@@24|)) (forall ((|i#0@@150| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@150|) (< |i#0@@150| (|Seq#Length| |entries#0@@24|))) (JournalistMarshallingModel.__default.hasEntry |buf##2@0| |entries#0@@24| |i#0@@150|)) :qid |JournalistMarshallingModelidfy.434:12| :skolemid |1689| :pattern ( (JournalistMarshallingModel.__default.hasEntry |buf##2@0| |entries#0@@24| |i#0@@150|)) )))) (=> (and (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (|JournalRanges.__default.parseEntries#canCall| |buf##2@0| (|Seq#Length| |entries#0@@24|) (LitInt 8))) (and (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |buf##2@0| (|Seq#Length| |entries#0@@24|) (LitInt 8))) (|JournalRanges.__default.parseEntries#canCall| |buf##2@0| (|Seq#Length| |entries#0@@24|) (LitInt 8)))) (and (and (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |buf##2@0| (|Seq#Length| |entries#0@@24|) (LitInt 8)))) |entries#0@@24|) (= $Heap@3 $Heap@4)) (and ($IsAlloc |buf#0@@75| (TSeq Tclass.NativeTypes.byte) $Heap@4) (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |buf#0@@75|)))) (and (=> (= (ControlFlow 0 179657) (- 0 600181)) (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|))) (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|)) (=> (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |buf#0@@75|) (= |jr#0@0| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |buf#0@@75|))))) (and (=> (= (ControlFlow 0 179657) (- 0 600215)) (= (|Seq#Length| |jr#0@0|) |numBlocks#0@@57|)) (=> (= (|Seq#Length| |jr#0@0|) |numBlocks#0@@57|) (and (=> (= (ControlFlow 0 179657) (- 0 600222)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |jr#0@0|)))) (and (=> (= (ControlFlow 0 179657) 179661) anon19_Then_correct) (=> (= (ControlFlow 0 179657) 179663) anon19_Else_correct))))))))))))))))))))))))))))))))))))))) (let ((anon18_Then_correct  (and (=> (= (ControlFlow 0 179655) (- 0 599500)) (forall (($o@@152 T@U) ($f@@98 T@U) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (= (type $o@@152) refType) (= (type $f@@98) (FieldType alpha@@105))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@152 $f@@98)))) :qid |JournalistMarshallingModelidfy.833:44| :skolemid |1706| :no-pattern (type $o@@152) :no-pattern (type $f@@98) :no-pattern (U_2_int $o@@152) :no-pattern (U_2_bool $o@@152) :no-pattern (U_2_int $f@@98) :no-pattern (U_2_bool $f@@98) ))) (=> (forall (($o@@153 T@U) ($f@@99 T@U) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (= (type $o@@153) refType) (= (type $f@@99) (FieldType alpha@@106))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@153 $f@@99)))) :qid |JournalistMarshallingModelidfy.833:44| :skolemid |1706| :no-pattern (type $o@@153) :no-pattern (type $f@@99) :no-pattern (U_2_int $o@@153) :no-pattern (U_2_bool $o@@153) :no-pattern (U_2_int $f@@99) :no-pattern (U_2_bool $f@@99) )) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap@0 $Heap@1)) (and (and (= StartFuel_JournalistMarshallingModel._default.hasHeader ($LS MoreFuel_JournalistMarshallingModel._default.hasHeader0)) (= StartFuelAssert_JournalistMarshallingModel._default.hasHeader ($LS ($LS MoreFuel_JournalistMarshallingModel._default.hasHeader0)))) (and (= (AsFuelBottom MoreFuel_JournalistMarshallingModel._default.hasHeader0) MoreFuel_JournalistMarshallingModel._default.hasHeader0) (= (ControlFlow 0 179655) (- 0 599564))))) (<= (LitInt 8) (|Seq#Length| |buf#0@@75|))))))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32))) (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) (= (AsFuelBottom StartFuel_JournalRanges._default.parseHeader) StartFuel_JournalRanges._default.parseHeader))) (and (and (= (AsFuelBottom StartFuelAssert_JournalRanges._default.parseHeader) StartFuelAssert_JournalRanges._default.parseHeader) (= (AsFuelBottom StartFuel_JournalRanges._default.WeightJournalEntries) StartFuel_JournalRanges._default.WeightJournalEntries)) (and (= (AsFuelBottom StartFuelAssert_JournalRanges._default.WeightJournalEntries) StartFuelAssert_JournalRanges._default.WeightJournalEntries) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_AsyncDisk._default.ChecksumChecksOut) StartFuel_AsyncDisk._default.ChecksumChecksOut)) (and (= (AsFuelBottom StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) (= (AsFuelBottom StartFuel_AsyncDisk._default.splice) StartFuel_AsyncDisk._default.splice))) (and (and (= (AsFuelBottom StartFuelAssert_AsyncDisk._default.splice) StartFuelAssert_AsyncDisk._default.splice) (= (AsFuelBottom StartFuel_JournalBytes._default.JournalBlockOfByteSeq) StartFuel_JournalBytes._default.JournalBlockOfByteSeq)) (and (= (AsFuelBottom StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) (= (AsFuelBottom StartFuel_JournalBytes._default.JournalRangeOfByteSeq) StartFuel_JournalBytes._default.JournalRangeOfByteSeq)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) (= (AsFuelBottom StartFuel_DiskLayout._default.ValidNodeAddr) StartFuel_DiskLayout._default.ValidNodeAddr)) (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.ValidNodeAddr) StartFuelAssert_DiskLayout._default.ValidNodeAddr) (= (AsFuelBottom StartFuel_DiskLayout._default.ValidJournalLocation) StartFuel_DiskLayout._default.ValidJournalLocation))) (and (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.ValidJournalLocation) StartFuelAssert_DiskLayout._default.ValidJournalLocation) (= (AsFuelBottom StartFuel_DiskLayout._default.JournalBlockIdx) StartFuel_DiskLayout._default.JournalBlockIdx)) (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.JournalBlockIdx) StartFuelAssert_DiskLayout._default.JournalBlockIdx) (= (AsFuelBottom StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32) StartFuel_PackedIntsLib._default.pack_LittleEndian_Uint32)))) (and (and (and (= (AsFuelBottom StartFuelAssert_PackedIntsLib._default.pack_LittleEndian_Uint32) StartFuelAssert_PackedIntsLib._default.pack_LittleEndian_Uint32) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.cyclicSlice) StartFuel_JournalistMarshallingModel._default.cyclicSlice)) (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.cyclicSlice) StartFuelAssert_JournalistMarshallingModel._default.cyclicSlice) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.withoutChecksums) StartFuel_JournalistMarshallingModel._default.withoutChecksums))) (and (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.withoutChecksums) StartFuelAssert_JournalistMarshallingModel._default.withoutChecksums) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.splice) StartFuel_JournalistMarshallingModel._default.splice)) (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.splice) StartFuelAssert_JournalistMarshallingModel._default.splice) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.writeOnto) StartFuel_JournalistMarshallingModel._default.writeOnto))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.writeOnto) StartFuelAssert_JournalistMarshallingModel._default.writeOnto) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.writeIntOnto) StartFuel_JournalistMarshallingModel._default.writeIntOnto)) (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.writeIntOnto) StartFuelAssert_JournalistMarshallingModel._default.writeIntOnto) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.writeJournalEntries) StartFuel_JournalistMarshallingModel._default.writeJournalEntries))) (and (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.writeJournalEntries) StartFuelAssert_JournalistMarshallingModel._default.writeJournalEntries) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.fillInChecksums) StartFuel_JournalistMarshallingModel._default.fillInChecksums)) (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.fillInChecksums) StartFuelAssert_JournalistMarshallingModel._default.fillInChecksums) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.hasHeader) StartFuel_JournalistMarshallingModel._default.hasHeader)))) (and (and (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.hasHeader) StartFuelAssert_JournalistMarshallingModel._default.hasHeader) (= (AsFuelBottom StartFuel_JournalistMarshallingModel._default.marshallJournalEntries) StartFuel_JournalistMarshallingModel._default.marshallJournalEntries)) (and (= (AsFuelBottom StartFuelAssert_JournalistMarshallingModel._default.marshallJournalEntries) StartFuelAssert_JournalistMarshallingModel._default.marshallJournalEntries) (= $_Frame@0 (|lambda#73| null $Heap@@51 alloc false)))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@51 $Heap@0) (forall ((|$ih#buf0#0| T@U) (|$ih#numBlocks0#0| Int) ) (!  (=> (= (type |$ih#buf0#0|) (SeqType BoxType)) (=> (and (and (and ($Is |$ih#buf0#0| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |$ih#numBlocks0#0|) (< |$ih#numBlocks0#0| 18446744073709551616))) (and (and (= (|Seq#Length| |$ih#buf0#0|) (Mul |$ih#numBlocks0#0| (LitInt 4096))) (JournalistMarshallingModel.__default.hasStuff (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |$ih#buf0#0| |$ih#numBlocks0#0|) |$ih#numBlocks0#0| |entries#0@@24|)) (JournalistMarshallingModel.__default.hasChecksums |$ih#buf0#0| |$ih#numBlocks0#0|))) (or (< (|Seq#Rank| |$ih#buf0#0|) (|Seq#Rank| |buf#0@@75|)) (and (= (|Seq#Rank| |$ih#buf0#0|) (|Seq#Rank| |buf#0@@75|)) (or (and (<= 0 |$ih#numBlocks0#0|) (< |$ih#numBlocks0#0| |numBlocks#0@@57|)) (and (= |$ih#numBlocks0#0| |numBlocks#0@@57|) (< (|Seq#Rank| |entries#0@@24|) (|Seq#Rank| |entries#0@@24|))))))) (and (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |$ih#buf0#0|)) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq StartFuel_JournalBytes._default.JournalRangeOfByteSeq |$ih#buf0#0|)))) (|#Options.Option.Some| ($Box |entries#0@@24|)))))) :qid |JournalistMarshallingModelidfy.824:25| :skolemid |1705| :no-pattern (type |$ih#buf0#0|) :no-pattern (U_2_int |$ih#buf0#0|) :no-pattern (U_2_bool |$ih#buf0#0|) )))))))) (and (=> (= (ControlFlow 0 179653) 179655) anon18_Then_correct) (=> (= (ControlFlow 0 179653) 179657) anon18_Else_correct)))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@51) ($IsHeapAnchor $Heap@@51)) (=> (and (and (and (and ($Is |buf#0@@75| (TSeq Tclass.NativeTypes.byte)) ($IsAlloc |buf#0@@75| (TSeq Tclass.NativeTypes.byte) $Heap@@51)) (and (<= (LitInt 0) |numBlocks#0@@57|) (< |numBlocks#0@@57| 18446744073709551616))) (and (and ($Is |entries#0@@24| (TSeq Tclass.Journal.JournalEntry)) ($IsAlloc |entries#0@@24| (TSeq Tclass.Journal.JournalEntry) $Heap@@51)) (and ($Is |jr#0@@35| (TSeq (TSeq Tclass.NativeTypes.byte))) ($IsAlloc |jr#0@@35| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@@51)))) (and (and (and (= 50 $FunctionContextHeight) (= (|Seq#Length| |buf#0@@75|) (Mul |numBlocks#0@@57| (LitInt 4096)))) (and (|JournalistMarshallingModel.__default.hasStuff#canCall| (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|) |numBlocks#0@@57| |entries#0@@24|) (and (JournalistMarshallingModel.__default.hasStuff (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|) |numBlocks#0@@57| |entries#0@@24|) (and (JournalistMarshallingModel.__default.hasEntries (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|) |entries#0@@24| (|Seq#Length| |entries#0@@24|)) (JournalistMarshallingModel.__default.hasHeader StartFuel_JournalistMarshallingModel._default.hasHeader (JournalistMarshallingModel.__default.withoutChecksums StartFuel_JournalistMarshallingModel._default.withoutChecksums |buf#0@@75| |numBlocks#0@@57|) (|#JournalRanges.Header.Header| (|Seq#Length| |entries#0@@24|) |numBlocks#0@@57|)))))) (and (and (|JournalistMarshallingModel.__default.hasChecksums#canCall| |buf#0@@75| |numBlocks#0@@57|) (and (JournalistMarshallingModel.__default.hasChecksums |buf#0@@75| |numBlocks#0@@57|) (forall ((|i#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| |numBlocks#0@@57|)) (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#3@@3|)) :qid |JournalistMarshallingModelidfy.454:12| :skolemid |1704| :pattern ( (JournalistMarshallingModel.__default.hasChecksumAt |buf#0@@75| |i#3@@3|)) )))) (= (ControlFlow 0 598010) 179653)))) anon0_correct)))) PreconditionGeneratedEntry_correct)))))))))))))))))))) ))
(check-sat)
